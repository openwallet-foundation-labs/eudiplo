var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AccessCertificateResponse.html",[0,1.473,1,3.721]],["body/interfaces/AccessCertificateResponse.html",[0,2.045,1,6.313,2,3.175,3,0.098,4,0.098,5,0.088,6,5.637,7,4.421,8,5.637,9,0.828,10,6.352,11,4.477,12,1.669,13,0.294,14,1.103,15,6.232,16,2.25,17,0.968,18,8.086,19,0.727,20,0.372,21,0.008,22,3.054,23,1.923,24,4.795,25,3.881,26,4.277,27,3.288,28,4.465,29,6.889,30,0.098,31,0.006,32,0.006]],["title/classes/AllowListPolicy.html",[33,0.17,34,2.613]],["body/classes/AllowListPolicy.html",[3,0.082,4,0.082,5,0.073,9,0.688,13,0.244,14,0.981,19,0.614,20,0.385,21,0.008,30,0.139,31,0.005,32,0.005,33,0.334,34,4.394,35,1.233,36,3.13,37,4.965,38,4.11,39,5.251,40,5.712,41,3.779,42,4.455,43,3.766,44,0.489,45,5.278,46,1.056,47,5.278,48,1.73,49,5.278,50,0.203,51,1.981,52,4.368,53,5.606,54,2.811,55,2.7,56,2.426,57,3.255,58,1.502,59,2.638,60,4.264,61,3.344,62,3.405,63,3.405,64,4.455,65,3.405,66,4.455,67,3.572,68,5.524,69,3.255,70,3.943,71,3.405,72,3.572,73,2.488,74,3.26,75,2.811,76,3.405,77,3.943,78,3.405,79,4.752,80,2.721,81,1.699,82,3.572,83,3.943,84,3.405,85,3.572,86,2.721,87,2.028,88,3.572,89,3.13]],["title/classes/ApiKeyConfig.html",[33,0.17,90,3.265]],["body/classes/ApiKeyConfig.html",[3,0.081,4,0.081,5,0.073,9,0.685,13,0.243,14,0.978,17,0.655,19,0.675,20,0.406,21,0.008,23,2.191,30,0.126,31,0.005,32,0.005,33,0.314,35,1.228,44,0.488,46,1.377,50,0.203,51,1.972,55,2.415,56,2.736,58,1.495,59,2.626,90,5.813,91,3.748,92,2.373,93,6.701,94,4.002,95,5.513,96,6.243,97,2.611,98,5.253,99,1.273,100,4.201,101,4.489,102,5.253,103,3.115,104,3.251,105,3.058,106,4.251,107,5.478,108,3.365,109,5.478,110,4.272,111,3.555,112,4.272,113,2.018,114,1.691,115,3.981,116,3.748,117,2.117,118,2.774,119,3.244,120,3.748,121,2.708,122,2.408]],["title/controllers/AppController.html",[123,1.413,124,3.468]],["body/controllers/AppController.html",[3,0.105,4,0.105,5,0.094,13,0.315,19,0.645,21,0.008,30,0.105,31,0.006,32,0.006,33,0.253,44,0.482,46,1.36,50,0.238,123,2.498,124,6.13,125,2.44,126,6.035,127,1.818,128,8.935,129,6.8,130,1.499,131,1.094,132,4.996,133,2.236,134,1.283,135,6.035,136,4.388,137,6.8,138,6.035,139,4.388,140,6.035,141,5.53,142,6.035]],["title/modules/AppModule.html",[143,1.302,144,3.468]],["body/modules/AppModule.html",[3,0.098,4,0.057,5,0.074,20,0.237,21,0.008,22,2.103,30,0.057,31,0.004,32,0.004,33,0.136,48,1.422,50,0.272,73,1.72,118,1.471,124,4.792,125,1.918,131,0.587,134,1.008,143,1.8,144,7.149,145,1.507,146,1.72,147,1.824,148,1.824,149,1.673,150,2.981,151,1.72,152,3.239,153,3.239,154,3.239,155,5.524,156,4.123,157,5.971,158,5.524,159,5.239,160,5.287,161,5.524,162,4.781,163,4.781,164,5.014,165,5.524,166,5.239,167,2.672,168,1.824,169,1.824,170,3.65,171,4.792,172,2.948,173,4.28,174,2.63,175,1.151,176,3.65,177,2.968,178,3.65,179,3.239,180,2.604,181,2.945,182,2.968,183,2.254,184,3.448,185,3.65,186,2.254,187,2.165,188,3.65,189,4.05,190,3.65,191,2.254,192,4.05,193,2.968,194,2.011,195,3.239,196,4.05,197,3.65,198,3.65,199,3.65,200,4.05,201,3.239,202,3.65,203,4.05,204,2.766,205,4.05,206,2.766,207,4.05,208,3.239,209,3.65,210,3.617,211,4.05,212,3.65,213,3.239,214,3.239,215,3.65,216,3.65,217,4.792,218,3.65,219,3.65,220,3.65,221,3.65,222,4.346,223,3.65,224,4.346,225,4.346,226,1.471,227,2.968,228,1.875,229,5.345,230,4.346,231,3.65,232,6.026,233,3.65,234,3.65,235,3.65,236,4.346,237,2.604,238,2.968,239,2.968,240,3.65,241,4.792,242,1.72,243,3.239,244,3.65,245,3.65,246,3.301,247,4.05,248,1.193,249,4.346,250,2.766,251,2.103,252,1.507,253,1.628,254,3.301,255,3.65,256,3.65,257,3.65,258,3.65,259,3.65,260,2.766,261,3.65,262,3.65,263,3.65,264,3.65,265,2.604,266,3.65,267,3.65,268,3.65,269,3.65,270,3.239,271,3.65,272,3.65,273,3.65,274,3.65,275,3.65,276,3.751,277,3.301,278,5.345,279,3.65,280,1.72,281,2.766,282,3.65,283,2.011,284,1.628,285,4.743,286,3.65,287,2.47,288,3.65,289,1.039,290,3.65,291,2.756,292,3.239,293,3.65,294,3.65,295,3.65,296,3.65,297,3.239,298,5.345,299,3.65,300,3.65,301,3.65,302,3.65]],["title/classes/AttestationBasedPolicy.html",[33,0.17,83,2.613]],["body/classes/AttestationBasedPolicy.html",[3,0.082,4,0.082,5,0.073,13,0.245,14,0.983,19,0.552,20,0.386,21,0.008,30,0.139,31,0.005,32,0.005,33,0.334,34,3.951,35,1.237,36,3.14,37,4.464,38,4.114,39,5.255,40,5.716,41,3.783,42,3.416,43,3.778,44,0.491,46,1.059,48,1.555,50,0.204,51,1.988,52,4.372,53,5.611,54,2.82,55,2.704,56,2.43,57,3.262,58,1.507,59,2.647,60,4.273,61,3.349,62,3.416,63,3.416,64,4.464,65,3.416,66,4.464,67,3.583,68,5.53,69,3.262,70,3.951,71,3.416,72,3.583,73,2.496,74,3.27,75,2.82,76,3.416,77,3.951,78,3.416,79,5.047,80,2.73,81,1.705,82,3.583,83,4.401,84,4.464,85,3.583,86,2.73,87,2.035,88,3.583,89,3.14,303,5.295,304,5.295,305,4.699,306,5.295]],["title/classes/AuthConfigValidator.html",[33,0.17,307,3.097]],["body/classes/AuthConfigValidator.html",[3,0.055,4,0.055,5,0.049,9,0.466,12,0.94,13,0.166,17,0.78,19,0.55,20,0.395,21,0.008,28,1.906,30,0.114,31,0.004,32,0.004,33,0.295,35,0.836,44,0.373,50,0.184,51,1.343,55,2.194,56,1.661,57,2.483,58,1.779,61,3.618,69,1.687,73,1.687,86,1.845,87,2.024,92,2.01,94,3.914,99,1.156,101,1.971,103,2.122,104,2.231,105,2.347,108,2.176,113,1.375,114,2.981,117,2.519,118,2.779,122,3.935,127,1.184,130,1.161,134,1.538,248,0.994,251,2.072,280,4.35,284,2.789,307,4.231,308,4.231,309,2.309,310,3.992,311,3.399,312,3.992,313,2.35,314,4.737,315,5.268,316,2.947,317,3.992,318,6.023,319,3.578,320,1.28,321,5.225,322,3.194,323,5.202,324,5.202,325,5.091,326,3.759,327,3.759,328,3.565,329,3.175,330,3.992,331,3.992,332,1.64,333,1.039,334,3.759,335,3.992,336,3.57,337,5.826,338,3.992,339,3.253,340,4.92,341,2.716,342,2.711,343,2.92,344,2.711,345,4.049,346,5.82,347,4.205,348,3.948,349,3.759,350,2.711,351,2.309,352,3.672,353,1.848,354,2.711,355,2.553,356,2.024,357,3.565,358,2.711,359,2.483,360,2.553,361,3.565,362,4.033,363,2.711,364,2.711,365,2.902,366,2.711,367,2.421,368,2.711,369,2.553,370,2.21]],["title/controllers/AuthController.html",[123,1.413,371,3.468]],["body/controllers/AuthController.html",[3,0.044,4,0.044,5,0.04,9,1.079,11,1.436,12,1.62,13,0.133,16,1.409,17,0.358,19,0.356,20,0.296,21,0.008,22,1.13,23,1.939,25,1.436,30,0.044,31,0.004,32,0.004,33,0.107,44,0.388,46,1.094,48,0.646,50,0.235,73,1.354,80,1.481,81,2.843,87,1.104,92,2.084,94,1.99,97,1.377,99,0.531,100,3.442,111,1.944,113,1.104,121,1.481,122,2.826,123,1.377,125,1.031,127,1.003,130,1.68,131,0.462,132,1.774,133,0.945,134,1.163,135,3.959,140,2.549,141,2.336,142,2.549,174,1.798,175,0.906,242,3.593,248,1.477,252,1.842,253,1.282,283,3.893,320,0.698,333,1.588,348,3.401,365,1.583,371,3.38,372,2.549,373,6.166,374,5.469,375,6.166,376,4.461,377,2.872,378,4.521,379,3.233,380,3.008,381,2.872,382,7.066,383,2.872,384,4.144,385,2.547,386,4.313,387,4.136,388,5.014,389,4.461,390,3.628,391,3.903,392,2.82,393,4.144,394,2.872,395,2.872,396,4.144,397,3.978,398,4.461,399,4.123,400,1.877,401,4.144,402,3.959,403,4.144,404,2.872,405,4.461,406,4.461,407,3.802,408,6.166,409,3.008,410,1.406,411,4.461,412,2.872,413,5.158,414,7.622,415,4.518,416,6.166,417,2.872,418,2.872,419,4.461,420,4.447,421,3.959,422,3.013,423,3.701,424,4.447,425,4.853,426,1.583,427,5.924,428,3.38,429,4.447,430,5.429,431,1.774,432,2.872,433,2.23,434,3.378,435,2.336,436,2.872,437,2.872,438,2.872,439,2.872,440,2.336,441,3.529,442,2.549,443,2.23,444,2.177,445,1.853,446,2.872,447,0.785,448,1.654,449,1.349,450,2.872,451,5.924,452,4.4,453,2.549,454,3.183,455,2.679,456,2.549,457,2.549,458,3.903,459,2.872,460,3.38,461,3.38,462,3.019,463,4.461,464,2.872,465,2.565,466,2.149,467,1.944,468,3.628,469,3.38,470,2.177,471,2.872,472,1.944,473,4.123,474,4.764,475,3.019,476,2.336,477,4.461,478,2.872,479,2.872,480,4.461,481,2.872,482,2.872,483,2.336,484,2.872,485,2.755,486,2.872,487,1.583,488,2.872,489,2.872,490,2.872,491,2.872,492,2.872,493,2.549,494,3.959,495,0.945,496,2.177,497,2.872,498,2.872,499,1.317,500,2.878,501,2.872,502,2.872,503,4.144,504,2.872,505,1.406,506,4.461,507,2.872,508,3.019,509,1.531,510,3.628,511,2.872,512,2.336,513,2.336,514,2.05,515,4.461,516,4.461,517,1.774,518,1.248,519,2.05,520,2.872,521,2.05,522,2.872,523,3.38,524,2.549,525,2.872,526,2.177,527,2.872,528,2.872,529,2.872,530,2.872,531,1.583,532,2.872,533,2.872,534,2.05,535,2.336,536,2.05,537,1.944,538,2.872,539,1.944,540,1.944,541,2.549,542,2.872,543,2.734,544,1.078,545,2.872,546,2.177,547,1.583]],["title/modules/AuthModule.html",[143,1.302,155,3.265]],["body/modules/AuthModule.html",[3,0.069,4,0.069,5,0.061,21,0.008,30,0.124,31,0.005,32,0.005,33,0.165,50,0.274,99,0.823,125,2.207,131,0.715,143,2.008,145,1.837,146,2.096,147,2.223,148,2.223,149,2.039,150,3.325,151,3.325,155,6.756,156,4.402,159,5.594,162,5.105,164,3.01,167,3.076,168,2.223,169,2.223,172,2.606,173,4.164,175,1.402,181,3.39,189,3.37,191,2.747,201,3.946,204,3.37,208,3.946,248,1.436,371,5.346,413,3.01,434,5.105,435,3.617,441,5.834,442,3.946,454,4.39,509,1.527,544,1.67,548,3.946,549,3.946,550,3.946,551,3.946,552,5.333,553,4.982,554,6.452,555,3.617,556,7.054,557,3.37,558,2.638,559,1.884,560,5.46,561,2.869,562,3.01,563,3.173,564,2.45,565,3.617,566,4.447,567,4.447,568,3.01,569,3.617,570,4.447,571,3.173,572,3.946,573,3.617,574,3.617,575,7.023,576,3.617,577,7.519,578,3.946,579,6.047,580,3.946,581,3.946,582,3.946,583,3.946,584,3.617,585,3.946,586,3.946,587,3.946,588,3.37,589,3.946,590,3.946,591,3.946,592,4.447,593,4.447,594,3.946,595,3.617,596,1.933,597,3.173]],["title/interfaces/AuthResponse.html",[0,1.473,598,3.265]],["body/interfaces/AuthResponse.html",[0,2.049,2,3.181,3,0.099,4,0.099,5,0.088,9,0.83,12,2.043,13,0.294,14,1.104,19,0.715,20,0.387,21,0.008,23,1.926,30,0.099,31,0.006,32,0.006,97,1.965,343,3.292,380,3.224,598,5.988,599,5.648,600,3.507,601,3.634,602,6.306,603,7.106,604,7.772,605,7.772,606,6.321,607,6.321,608,5.89,609,4.977,610,4.282,611,4.623,612,6.365,613,4.307]],["title/classes/AuthenticationConfigDto.html",[33,0.17,336,2.613]],["body/classes/AuthenticationConfigDto.html",[3,0.054,4,0.054,5,0.048,9,0.455,12,0.917,13,0.161,14,0.735,17,0.769,19,0.543,20,0.378,21,0.008,30,0.113,31,0.004,32,0.004,33,0.301,35,0.816,44,0.367,46,1.035,50,0.181,51,1.31,55,2.162,56,1.631,57,2.438,58,1.472,61,3.71,69,1.645,73,2.438,86,1.8,87,2.618,92,2.083,94,4.014,99,0.646,101,1.923,103,2.07,104,2.19,105,2.313,108,2.136,113,1.987,114,2.94,117,2.483,118,2.746,122,4.038,134,1.527,248,0.976,251,2.035,280,4.322,284,3.246,307,3.5,308,4.17,309,2.252,310,2.645,311,2.252,312,2.645,313,1.557,314,3.919,316,1.645,317,2.645,318,4.669,321,2.645,322,3.161,323,5.336,324,5.336,325,5.225,326,2.491,327,2.491,328,2.362,330,3.919,331,3.919,332,1.6,333,1.014,334,3.691,335,3.919,336,3.89,337,5.774,338,3.919,339,3.194,340,4.862,341,2.667,342,2.645,343,3.081,344,2.645,345,4.345,346,6.166,347,4.455,348,4.09,349,3.691,350,2.645,351,2.252,352,4.058,353,2.162,354,2.645,355,2.491,356,2.367,357,4.17,358,3.919,359,2.904,360,3.691,361,4.17,362,4.694,363,3.919,364,2.645,365,3.395,366,3.919,367,3.5,368,2.645,369,2.491,370,2.156,614,3.49,615,3.49,616,3.49,617,3.49]],["title/classes/AuthenticationUrlConfig.html",[33,0.17,323,3.097]],["body/classes/AuthenticationUrlConfig.html",[3,0.056,4,0.056,5,0.05,9,0.475,12,0.957,13,0.168,14,0.758,17,0.868,19,0.59,20,0.382,21,0.008,30,0.115,31,0.004,32,0.004,33,0.297,35,0.851,44,0.378,46,1.067,50,0.186,51,1.367,55,2.216,56,1.682,57,2.515,58,1.519,61,3.562,69,1.717,73,1.717,86,1.878,87,2.05,92,2.185,94,4.016,99,0.674,101,2.006,103,2.16,104,2.26,105,2.779,108,3.058,113,1.399,114,2.915,117,2.803,118,3.303,122,3.95,134,1.546,248,1.007,251,2.099,280,4.289,284,3.103,307,3.611,308,4.274,309,2.35,310,2.76,311,2.35,312,2.76,313,1.625,314,4.044,316,1.717,317,2.76,318,4.786,321,2.76,322,3.022,323,5.235,324,5.01,325,5.041,326,2.599,327,2.599,328,2.464,330,4.786,331,4.044,332,1.669,333,1.058,334,3.808,335,4.044,336,3.606,337,5.862,338,4.044,339,3.296,340,4.962,341,2.751,342,2.76,343,2.945,344,2.76,345,4.404,346,6.066,347,4.383,348,4.016,349,4.962,350,4.044,351,3.443,352,3.704,353,1.872,354,2.76,355,2.599,356,2.05,357,3.611,358,2.76,359,2.515,360,2.599,361,3.611,362,4.075,363,2.76,364,2.76,365,2.94,366,2.76,367,2.464,368,2.76,369,2.599,370,2.249,618,3.642,619,3.642,620,3.642]],["title/classes/AuthorizationResponse.html",[33,0.17,621,3.265]],["body/classes/AuthorizationResponse.html",[3,0.102,4,0.102,5,0.091,9,0.86,13,0.305,14,1.128,19,0.705,20,0.292,21,0.008,30,0.102,31,0.006,32,0.006,33,0.295,35,1.541,44,0.468,46,1.319,50,0.194,56,2.687,58,1.877,380,3.052,400,3.192,407,4.561,600,3.634,601,4.535,609,4.71,610,4.873,621,5.667,622,7.048,623,5.852,624,5.667]],["title/controllers/AuthorizeController.html",[123,1.413,625,3.468]],["body/controllers/AuthorizeController.html",[3,0.061,4,0.061,5,0.054,9,0.733,11,2.812,12,2.323,13,0.181,17,0.897,20,0.362,21,0.008,30,0.061,31,0.004,32,0.004,33,0.146,44,0.51,46,1.439,48,0.88,50,0.258,99,1.331,105,2.112,123,2.353,125,1.405,127,1.264,130,1.802,131,0.63,132,2.418,133,1.288,134,1.357,248,0.739,252,1.617,276,4.847,291,4.558,316,2.651,320,1.748,333,1.911,347,2.9,380,3.272,386,4.761,400,2.805,407,4.633,409,3.496,410,2.268,426,2.157,428,4.262,433,1.957,445,2.526,447,1.071,448,1.701,449,2.472,462,2.65,495,2.992,505,1.235,625,4.262,626,3.475,627,1.957,628,3.916,629,4.991,630,4.262,631,5.625,632,4.642,633,4.988,634,6.582,635,7.194,636,3.475,637,5.403,638,3.916,639,3.916,640,4.991,641,3.916,642,3.916,643,5.134,644,4.697,645,3.916,646,3.916,647,5.851,648,3.916,649,3.916,650,3.916,651,3.916,652,3.916,653,4.991,654,2.526,655,2.65,656,2.967,657,2.236,658,2.236,659,2.019,660,4.454,661,2.967,662,2.526,663,2.967,664,3.29,665,2.526,666,3.904,667,3.916,668,2.967,669,1.846,670,2.967,671,3.916,672,4.988,673,3.916,674,1.617,675,3.916,676,3.916,677,3.916,678,3.916,679,4.443,680,3.916,681,3.475,682,3.184,683,3.184,684,2.794,685,3.475,686,3.916,687,3.475,688,3.916,689,3.475,690,2.65,691,3.916,692,3.916,693,3.916]],["title/classes/AuthorizeQueries.html",[33,0.17,637,2.826]],["body/classes/AuthorizeQueries.html",[3,0.079,4,0.079,5,0.07,13,0.236,14,0.96,17,1.193,19,0.763,20,0.407,21,0.008,30,0.079,31,0.005,32,0.005,33,0.251,35,1.193,44,0.651,46,1.837,50,0.15,55,3.244,56,2.914,58,1.453,423,5.123,637,4.172,679,4.676,694,8.203,695,3.028,696,5.402,697,7.57,698,7.57,699,7.57,700,5.402,701,7.57,702,7.57,703,4.884,704,5.737,705,6.959,706,4.53,707,4.152,708,5.105,709,5.105,710,5.105,711,4.53,712,5.105,713,4.53,714,5.105,715,4.53,716,5.105]],["title/injectables/AuthorizeService.html",[666,2.714,717,0.952]],["body/injectables/AuthorizeService.html",[0,1.264,3,0.038,4,0.038,5,0.034,12,2.005,13,0.113,17,0.927,19,0.667,20,0.358,21,0.008,22,0.962,30,0.061,31,0.003,32,0.003,33,0.091,41,1.752,44,0.527,48,1.106,50,0.237,61,1.062,81,0.787,87,0.939,92,1.074,94,2.196,97,0.755,99,1.375,106,3.04,108,2.723,113,2.165,114,0.787,117,2.271,118,2.271,121,2.538,122,2.583,127,0.883,130,1.588,131,0.393,134,1.243,174,2.168,175,0.771,226,1.983,228,0.858,248,1.66,252,2.033,253,1.09,276,2.919,280,2.91,281,3.73,283,2.712,289,2.171,291,3.714,320,1.806,325,1.45,332,1.12,333,2.474,343,2.614,347,3.399,348,1.09,351,2.533,352,1.302,353,1.378,356,1.891,387,1.152,392,1.26,400,2.769,409,2.856,410,1.238,422,1.347,447,1.074,448,2.179,465,2.768,466,2.456,472,2.657,473,1.509,487,1.347,495,2.976,505,2.61,508,1.654,517,1.509,518,2.139,519,1.744,521,1.744,523,1.852,526,1.852,531,2.163,540,1.654,602,2.657,633,3.73,636,2.169,637,4.711,643,1.744,644,3.512,654,3.175,655,1.654,658,1.396,659,1.26,664,3.463,665,1.577,666,2.329,668,1.852,669,1.152,679,3.04,696,4.021,700,4.021,717,0.817,718,0.939,719,1.852,720,3.484,721,3.926,722,4.002,723,3.926,724,4.002,725,3.926,726,4.002,727,1.347,728,3.011,729,3.956,730,4.109,731,2.444,732,2.444,733,2.975,734,2.444,735,5.361,736,3.193,737,2.444,738,5.02,739,2.444,740,2.444,741,1.302,742,2.163,743,3.193,744,2.444,745,2.444,746,2.444,747,3.193,748,2.444,749,2.444,750,2.444,751,3.661,752,4.583,753,4.583,754,2.583,755,1.987,756,4.583,757,1.744,758,1.26,759,1.987,760,1.852,761,1.744,762,1.987,763,2.802,764,3.193,765,2.802,766,1.987,767,1.987,768,3.193,769,1.987,770,3.193,771,2.425,772,4.583,773,3.481,774,1.987,775,1.987,776,1.852,777,1.987,778,1.987,779,1.852,780,1.577,781,1.852,782,1.852,783,1.987,784,1.852,785,1.987,786,1.852,787,1.987,788,1.987,789,3.193,790,1.987,791,1.852,792,1.987,793,1.987,794,3.956,795,1.987,796,1.987,797,1.987,798,1.987,799,1.987,800,4.002,801,3.73,802,1.987,803,4.271,804,1.987,805,1.987,806,1.987,807,1.987,808,1.987,809,4.583,810,3.193,811,5.25,812,1.987,813,3.193,814,3.193,815,3.193,816,3.193,817,1.905,818,3.193,819,1.987,820,1.987,821,1.987,822,1.987,823,1.987,824,1.987,825,1.987,826,3.193,827,1.987,828,1.987,829,1.45,830,1.186,831,1.987,832,1.852,833,1.577,834,1.987,835,1.577,836,1.987,837,1.987,838,1.852,839,1.509,840,3.193,841,1.654,842,1.987,843,4.002,844,1.987,845,1.987,846,1.987,847,1.987,848,1.987,849,1.852,850,3.193,851,1.987,852,3.193,853,2.425,854,1.987,855,4.002,856,1.987,857,1.987,858,1.987,859,1.987,860,1.987,861,1.577,862,2.425,863,1.852,864,1.302,865,1.987,866,1.509,867,1.987,868,1.852,869,1.987,870,3.73,871,1.987,872,1.987,873,1.987,874,4.002,875,1.987,876,1.852,877,1.987,878,1.987,879,1.987]],["title/entities/CertEntity.html",[880,1.537,881,2.714]],["body/entities/CertEntity.html",[3,0.076,4,0.076,5,0.067,7,3.84,9,1.108,11,3.702,12,2.08,13,0.226,14,0.932,15,5.284,16,2.128,17,0.818,19,0.704,20,0.409,21,0.008,23,2.106,24,4.051,25,3.279,26,3.614,27,2.778,30,0.102,31,0.005,32,0.005,33,0.244,44,0.616,46,1.737,48,1.985,50,0.193,58,1.39,228,2.302,289,2.107,543,3.279,544,2.462,547,4.549,609,4.695,880,2.659,881,3.89,882,2.37,883,3.972,884,5.334,885,5.82,886,4.08,887,4.228,888,4.889,889,5.011,890,4.885,891,5.357,892,3.614,893,5.1,894,4.885,895,4.051,896,4.885,897,4.528,898,4.885,899,4.885,900,5.284,901,4.885,902,5.011,903,4.885,904,4.232,905,4.232,906,4.335,907,2.602,908,2.018,909,4.549]],["title/interfaces/Client.html",[0,1.473,387,2.157]],["body/interfaces/Client.html",[0,1.762,2,1.885,3,0.058,4,0.058,5,0.052,13,0.174,14,0.778,16,2.301,19,0.692,20,0.243,21,0.008,30,0.085,31,0.004,32,0.004,33,0.14,48,0.848,50,0.258,81,1.762,92,1.497,94,1.683,116,2.691,130,1.207,131,0.607,134,1.524,136,5.529,174,2.119,175,1.189,226,2.849,228,1.323,248,1.033,253,1.683,280,1.778,291,1.945,313,1.683,316,1.778,333,2.053,348,1.683,379,3.485,387,4.39,399,2.329,434,2.329,447,1.031,448,2.626,449,1.656,455,3.403,465,2.103,466,1.762,473,3.381,474,3.906,485,4.637,505,2.702,509,1.879,546,4.148,559,1.597,561,2.433,562,2.552,563,2.691,564,2.078,568,2.552,569,3.067,588,2.858,597,5.045,717,1.139,728,2.8,758,1.945,897,2.009,910,3.067,911,5.718,912,4.598,913,2.154,914,3.067,915,4.452,916,2.858,917,2.736,918,2.552,919,3.98,920,3.067,921,3.98,922,2.691,923,3.126,924,2.552,925,3.98,926,3.067,927,4.858,928,5.588,929,3.347,930,3.347,931,3.347,932,3.347,933,3.347,934,2.329,935,2.858,936,5.24,937,3.347,938,4.858,939,3.347,940,5.718,941,3.347,942,3.067,943,3.347,944,3.347,945,3.347,946,3.067,947,3.347,948,4.858,949,4.858,950,3.347,951,3.347,952,3.347,953,3.347,954,2.237,955,3.347,956,3.347,957,3.347,958,3.347,959,3.347,960,4.858,961,4.858,962,2.009,963,3.347,964,3.067,965,3.347,966,3.347,967,2.552,968,3.347,969,3.705,970,4.858,971,2.691,972,3.347,973,3.347,974,3.347,975,2.858,976,2.237,977,3.347,978,3.347,979,3.347,980,3.347,981,3.347,982,3.347,983,3.347,984,3.347,985,3.347,986,3.347]],["title/classes/ClientCredentialsDto.html",[33,0.17,396,3.468]],["body/classes/ClientCredentialsDto.html",[3,0.105,4,0.105,5,0.094,13,0.315,14,1.149,19,0.713,20,0.359,21,0.008,30,0.105,31,0.006,32,0.006,33,0.301,35,1.589,44,0.573,46,1.618,50,0.2,56,2.877,58,1.935,396,6.13,423,5.843,424,7.021,987,7.662,988,6.035,989,6.8,990,6.8]],["title/entities/ClientEntry.html",[568,3.097,880,1.537]],["body/entities/ClientEntry.html",[3,0.098,4,0.098,5,0.087,13,0.293,14,1.1,16,2.157,17,0.966,19,0.696,20,0.387,21,0.008,30,0.12,31,0.006,32,0.006,33,0.235,44,0.593,46,1.674,48,1.741,50,0.186,136,4.083,226,3.515,228,2.718,379,2.614,455,3.637,568,5.241,880,2.602,882,3.07,893,4.783,895,4.783,907,3.37,908,2.614,909,4.267,991,5.146,992,6.328,993,6.806,994,6.328,995,6.806,996,6.343,997,6.328]],["title/injectables/ClientService.html",[434,2.826,717,0.952]],["body/injectables/ClientService.html",[0,1.53,3,0.048,4,0.048,5,0.043,13,0.144,14,0.675,16,2.222,17,0.865,19,0.705,20,0.324,21,0.008,30,0.074,31,0.004,32,0.004,33,0.116,44,0.569,48,0.701,50,0.248,81,2.073,92,1.76,94,2.12,97,0.963,99,1.282,116,3.391,127,1.068,130,1.768,131,0.502,134,1.432,136,5.507,174,2.401,175,0.983,226,2.595,228,1.667,248,0.896,253,2.12,280,2.24,291,1.608,313,1.391,316,2.24,320,1.684,333,2.375,348,2.12,379,3.483,387,4.402,399,2.935,434,2.935,447,1.299,448,2.673,449,1.437,455,3.173,465,1.826,466,1.53,473,3.976,474,4.594,485,2.935,505,2.579,509,1.976,546,3.601,559,1.321,561,2.012,562,2.11,563,2.225,564,1.718,568,2.11,569,2.536,588,2.363,597,5.585,717,0.988,718,1.198,727,1.718,728,3.3,758,1.608,897,2.531,910,2.536,911,5.109,912,5.21,913,1.781,914,2.536,915,5.236,916,2.363,917,3.218,918,2.11,919,4.689,920,2.536,921,4.689,922,2.225,923,3.676,924,2.11,925,4.689,926,2.536,927,5.109,928,5.837,929,5.109,930,2.767,931,5.109,932,2.767,933,5.109,934,1.926,935,2.363,936,4.682,937,2.767,938,4.217,939,5.713,940,5.109,941,2.767,942,3.864,943,5.713,944,2.767,945,2.767,946,2.536,947,4.217,948,4.217,949,4.217,950,2.767,951,4.217,952,4.217,953,4.217,954,1.849,955,2.767,956,2.767,957,2.767,958,2.767,959,2.767,960,4.217,961,4.217,962,1.661,963,2.767,964,2.536,965,2.767,966,2.767,967,2.11,968,2.767,969,3.216,970,4.217,971,2.225,972,2.767,973,2.767,974,2.767,975,3.601,976,2.818,977,4.217,978,4.217,979,4.217,980,4.217,981,4.217,982,2.767,983,2.767,984,2.767,985,2.767,986,2.767,998,4.752,999,4.752,1000,4.752,1001,4.752,1002,4.752,1003,3.118,1004,3.118,1005,3.118,1006,3.118,1007,3.118,1008,3.118,1009,3.118]],["title/entities/CredentialConfig.html",[880,1.537,1010,2.613]],["body/entities/CredentialConfig.html",[3,0.054,4,0.054,5,0.048,9,0.802,13,0.161,14,0.734,16,1.586,17,1.139,19,0.645,20,0.403,21,0.008,23,1.525,28,3.625,30,0.054,31,0.004,32,0.004,33,0.293,34,2.949,39,4.311,40,4.912,42,2.247,44,0.629,46,1.776,48,2.009,50,0.248,51,2.31,55,2.951,56,2.146,57,3.208,58,1.751,60,2.151,70,2.949,71,2.247,77,2.949,78,2.247,80,3.173,81,1.662,83,2.949,84,2.247,86,2.663,89,3.65,97,2.102,99,1.259,104,2.883,114,1.981,133,1.145,228,2.388,251,2.032,289,1.751,322,2.244,339,2.151,353,1.222,356,1.338,433,1.741,596,2.244,705,2.639,880,1.735,881,4.037,882,1.69,895,5.439,897,3.625,907,1.855,908,1.439,909,3.39,1010,2.949,1011,3.091,1012,4.164,1013,5.461,1014,5.461,1015,3.514,1016,3.97,1017,3.801,1018,6.154,1019,5.333,1020,3.75,1021,3.495,1022,5.164,1023,3.483,1024,5.461,1025,3.091,1026,3.483,1027,4.391,1028,3.091,1029,3.685,1030,5.164,1031,5.535,1032,4.199,1033,3.483,1034,4.582,1035,3.483,1036,3.483,1037,3.483,1038,6.806,1039,5.164,1040,3.483,1041,3.483,1042,5.164,1043,5.164,1044,5.164,1045,4.582,1046,5.164,1047,5.164,1048,5.164,1049,5.164,1050,5.164,1051,5.164,1052,3.483,1053,3.091,1054,3.483,1055,5.164,1056,5.164,1057,3.483,1058,3.483,1059,3.483,1060,3.483,1061,3.483,1062,4.857,1063,5.164,1064,3.483,1065,3.483,1066,2.832,1067,3.483,1068,3.483,1069,2.485,1070,3.913,1071,2.247,1072,6.154,1073,3.332,1074,4.582,1075,4.582,1076,3.483,1077,2.639,1078,2.357,1079,2.639,1080,3.091,1081,2.639,1082,3.483,1083,4.702,1084,5.164,1085,2.485,1086,3.483,1087,3.483,1088,2.357,1089,2.485]],["title/classes/CredentialConfigCreate.html",[33,0.17,1090,3.265]],["body/classes/CredentialConfigCreate.html",[3,0.108,4,0.108,5,0.097,21,0.008,23,2.037,30,0.108,31,0.006,32,0.006,33,0.26,35,1.633,38,3.988,50,0.242,114,2.25,133,2.298,289,2.34,1010,3.991,1012,5.563,1090,5.866,1091,6.202,1092,5.684,1093,8.221,1094,4.987,1095,5.296]],["title/classes/CredentialConfigMapping.html",[33,0.17,1096,3.468]],["body/classes/CredentialConfigMapping.html",[3,0.09,4,0.09,5,0.08,9,0.758,13,0.269,14,1.043,16,2.075,19,0.586,20,0.357,21,0.008,26,4.047,27,3.111,30,0.114,31,0.006,32,0.006,33,0.315,35,1.358,38,2.82,44,0.412,46,1.163,48,1.306,50,0.262,51,2.182,52,3.788,55,2.039,56,2.539,57,3.463,58,1.654,69,2.739,92,2.202,94,2.593,104,2.461,117,2.342,133,1.911,248,1.096,289,1.654,332,2.664,336,3.319,353,3.063,356,3.252,359,3.989,601,4.599,864,3.095,886,3.202,887,3.319,1012,3.933,1073,3.75,1078,3.933,1094,4.147,1096,6.413,1097,4.726,1098,6.55,1099,5.812,1100,4.726,1101,3.319,1102,3.933,1103,5.157,1104,4.404,1105,4.404,1106,5.157]],["title/injectables/CredentialConfigService.html",[717,0.952,1107,2.952]],["body/injectables/CredentialConfigService.html",[3,0.045,4,0.045,5,0.102,7,1.411,9,0.875,13,0.135,16,2.326,17,0.838,19,0.701,20,0.298,21,0.008,22,2.169,23,1.116,30,0.045,31,0.004,32,0.004,33,0.205,44,0.525,48,1.012,50,0.259,51,1.092,53,1.876,58,0.828,75,2.399,81,1.45,92,2.093,97,1.391,99,1.242,114,2.737,121,1.499,127,1.012,130,1.732,131,0.468,134,1.171,172,1.907,174,2.436,175,0.917,183,1.796,184,1.876,186,1.796,187,2.671,217,2.204,248,1.604,251,2.642,253,1.297,289,2.362,316,2.123,320,1.631,328,1.968,333,1.601,339,2.782,353,2.868,359,2.926,379,1.201,403,3.413,410,2.239,447,1.697,448,1.877,449,2.315,499,2.527,505,1.957,509,1.892,544,3.321,559,1.232,674,1.201,717,0.937,718,1.117,728,3.219,758,1.499,880,2.571,882,2.185,908,1.201,913,1.661,917,3.55,976,3.269,1010,4.738,1015,2.572,1090,4.791,1095,2.204,1107,4.004,1108,6.573,1109,5.285,1110,2.204,1111,2.185,1112,3.348,1113,4.504,1114,3.544,1115,2.908,1116,2.842,1117,4.429,1118,2.908,1119,5.512,1120,4.504,1121,2.908,1122,2.782,1123,4.37,1124,6.302,1125,3.214,1126,4.504,1127,4.504,1128,2.908,1129,3.833,1130,4.504,1131,2.908,1132,2.908,1133,3.933,1134,4.504,1135,2.908,1136,3.214,1137,3.933,1138,4.055,1139,4.504,1140,3.413,1141,3.663,1142,2.365,1143,2.365,1144,2.204,1145,2.365,1146,2.204,1147,2.581,1148,2.365,1149,2.365,1150,3.663,1151,2.908,1152,4.482,1153,2.365,1154,2.365,1155,3.663,1156,2.365,1157,2.365,1158,2.365,1159,2.365,1160,4.482,1161,2.782,1162,2.365,1163,2.365,1164,1.968,1165,2.365,1166,6.023,1167,3.663,1168,2.365,1169,2.204,1170,2.365,1171,2.365,1172,2.365,1173,2.365,1174,2.908,1175,2.908,1176,4.482,1177,4.482,1178,2.365,1179,2.365,1180,2.365,1181,2.365,1182,2.204,1183,2.365,1184,2.365,1185,2.204,1186,2.365,1187,2.365,1188,5.512,1189,4.177,1190,2.908,1191,3.214,1192,3.663,1193,3.214,1194,3.663,1195,1.968,1196,2.782,1197,2.906,1198,2.908,1199,2.365,1200,2.365,1201,2.365,1202,2.365,1203,2.365,1204,2.908,1205,2.075,1206,2.365,1207,2.908,1208,2.581,1209,2.908,1210,2.908,1211,2.908]],["title/entities/CredentialIssuanceBinding.html",[880,1.537,1027,2.952]],["body/entities/CredentialIssuanceBinding.html",[3,0.073,4,0.073,5,0.065,9,0.61,12,2.044,13,0.217,14,0.905,19,0.62,20,0.372,21,0.008,23,2.08,30,0.073,31,0.005,32,0.005,33,0.174,44,0.595,46,1.68,50,0.213,92,2.391,105,2.393,252,1.934,253,2.089,353,2.73,356,3.504,420,3.808,547,3.512,606,5.183,609,4.614,864,4.819,880,2.613,882,2.272,886,3.993,887,4.138,888,4.805,889,4.904,891,5.265,892,3.512,902,4.904,904,4.113,905,4.113,908,1.934,993,6.618,1010,5.167,1015,3.64,1027,4.113,1029,5.551,1031,6.326,1032,6.326,1053,5.656,1074,6.431,1101,2.674,1212,7.624,1213,4.155,1214,6.374,1215,8.396,1216,7.247,1217,4.83,1218,6.374,1219,6.374,1220,6.431,1221,6.431,1222,4.682,1223,6.374,1224,4.682,1225,5.895,1226,4.682,1227,6.374,1228,4.682,1229,4.682,1230,4.682,1231,3.808,1232,4.682,1233,4.155,1234,4.682]],["title/classes/CredentialIssuerMetadataDto.html",[33,0.17,1235,3.468]],["body/classes/CredentialIssuerMetadataDto.html",[3,0.077,4,0.077,5,0.069,9,0.65,13,0.231,14,0.945,19,0.724,20,0.398,21,0.008,27,2.817,30,0.077,31,0.005,32,0.005,33,0.185,35,1.166,44,0.629,75,3.543,81,2.57,111,4.502,118,3.575,139,5.151,341,3.43,353,3.152,356,3.287,359,3.136,386,4.398,391,4.747,392,3.43,407,4.116,470,5.041,518,4.082,596,2.168,608,3.781,964,5.41,1164,3.376,1235,5.041,1236,5.795,1237,7.97,1238,4.057,1239,3.081,1240,2.657,1241,7.484,1242,7.484,1243,7.484,1244,6.641,1245,7.484,1246,7.484,1247,8.316,1248,7.484,1249,4.989,1250,6.652,1251,4.989,1252,3.799,1253,6.652,1254,4.989,1255,6.641,1256,4.989,1257,4.989,1258,4.989,1259,5.903,1260,4.989,1261,4.989,1262,3.945,1263,4.427,1264,4.427]],["title/controllers/CredentialsController.html",[123,1.413,1265,3.468]],["body/controllers/CredentialsController.html",[3,0.076,4,0.076,5,0.068,9,0.641,13,0.227,16,2.045,17,0.927,19,0.592,20,0.329,21,0.008,30,0.076,31,0.005,32,0.005,33,0.183,44,0.527,46,1.486,50,0.256,92,2.17,99,1.374,114,2.664,123,2.293,125,1.763,127,1.48,130,1.949,131,0.79,133,1.616,134,1.401,284,3.944,320,1.805,353,3.142,359,3.74,380,2.854,409,2.53,426,4.092,431,3.035,443,4.522,449,2.4,518,2.135,544,2.979,553,2.707,627,2.456,657,2.806,674,2.03,1010,2.806,1090,5.662,1095,3.724,1107,4.792,1109,3.506,1111,3.195,1112,2.316,1122,4.067,1136,4.699,1145,3.996,1146,3.724,1265,5.629,1266,4.361,1267,6.585,1268,6.04,1269,6.585,1270,7.427,1271,4.361,1272,3.506,1273,4.914,1274,4.914,1275,4.914,1276,4.914,1277,4.914,1278,3.326,1279,3.326,1280,3.326,1281,3.996,1282,3.996,1283,3.035,1284,3.326,1285,3.326,1286,3.996,1287,3.506,1288,4.249,1289,2.192,1290,4.914,1291,4.914,1292,4.914,1293,3.506,1294,3.724,1295,4.914]],["title/controllers/CredentialsMetadataController.html",[123,1.413,1296,3.468]],["body/controllers/CredentialsMetadataController.html",[3,0.086,4,0.086,5,0.076,9,0.721,13,0.256,16,2.267,17,0.888,19,0.746,20,0.368,21,0.008,27,3.013,30,0.086,31,0.006,32,0.006,33,0.205,44,0.504,46,1.423,48,1.242,50,0.232,81,2.29,92,1.945,99,1.316,123,1.707,125,1.983,127,1.599,130,1.734,131,0.889,132,3.414,133,1.818,134,1.342,289,2.58,320,1.729,353,3.087,365,3.92,445,3.566,449,2.38,509,2.442,627,2.763,674,2.283,1017,5.13,1019,5.622,1129,5.13,1240,3.789,1288,5.076,1289,2.466,1296,5.391,1297,5.962,1298,6.398,1299,4.905,1300,5.527,1301,5.527,1302,5.527,1303,5.527,1304,5.527,1305,5.527,1306,5.527,1307,4.394,1308,4.905,1309,5.527,1310,5.527,1311,5.527,1312,7.114,1313,5.527,1314,5.527,1315,5.527,1316,5.527]],["title/injectables/CredentialsService.html",[717,0.952,1288,2.952]],["body/injectables/CredentialsService.html",[3,0.042,4,0.042,5,0.037,9,0.349,13,0.124,16,1.918,17,0.806,19,0.674,20,0.33,21,0.008,23,1.047,30,0.042,31,0.003,32,0.003,33,0.1,44,0.487,48,0.602,50,0.253,80,3.704,81,1.911,87,1.623,92,2.256,97,0.827,99,1.195,100,1.382,113,2.01,114,0.863,121,3.061,127,0.95,130,1.729,131,0.431,134,1.12,174,2.448,175,0.845,193,2.179,194,1.476,228,0.94,248,1.593,289,2.378,320,1.57,322,2.273,333,2.362,345,2.328,353,2.964,359,1.992,365,3.271,379,1.107,410,2.164,433,1.34,447,1.623,448,1.954,449,2.496,455,3.122,465,2.482,466,2.21,475,1.814,487,2.328,494,2.378,495,2.828,505,2.415,509,1.45,517,2.609,534,1.912,536,3.732,537,3.54,547,2.328,559,1.135,564,1.476,596,1.165,659,1.382,717,0.879,718,1.03,728,3.122,741,1.427,742,1.476,751,4.071,754,3.512,757,1.912,758,1.382,773,4.239,794,3.689,817,2.05,829,1.589,830,1.3,864,4.394,908,1.107,913,1.53,917,2.968,923,4.251,924,1.814,962,1.427,1010,3.689,1013,3.749,1015,2.413,1016,1.729,1017,3.23,1019,4.372,1020,3.271,1024,2.378,1029,4.61,1062,1.912,1071,1.729,1077,2.031,1078,1.814,1079,2.031,1095,2.031,1101,1.53,1111,2.05,1112,1.263,1129,3.667,1133,3.015,1140,2.031,1147,2.378,1244,3.749,1252,1.53,1283,1.655,1288,3.83,1307,2.609,1317,2.378,1318,5.23,1319,5.23,1320,5.23,1321,4.225,1322,2.378,1323,5.937,1324,4.415,1325,2.68,1326,2.68,1327,6.46,1328,2.68,1329,4.225,1330,3.015,1331,5.804,1332,2.68,1333,2.68,1334,2.68,1335,2.68,1336,4.225,1337,2.68,1338,5.937,1339,3.749,1340,4.225,1341,2.987,1342,2.031,1343,2.031,1344,3.749,1345,2.031,1346,3.749,1347,2.031,1348,1.912,1349,1.912,1350,2.378,1351,2.68,1352,1.476,1353,3.749,1354,2.68,1355,2.68,1356,5.268,1357,2.68,1358,2.68,1359,2.68,1360,4.225,1361,4.225,1362,2.68,1363,2.68,1364,2.68,1365,5.23,1366,2.68,1367,2.68,1368,2.68,1369,5.23,1370,2.68,1371,2.68,1372,4.225,1373,2.859,1374,2.378,1375,4.225,1376,2.68,1377,2.68,1378,2.68,1379,2.68,1380,2.179,1381,2.68,1382,2.68,1383,2.68,1384,2.378,1385,2.68,1386,2.378,1387,2.179,1388,2.68,1389,2.68,1390,4.225,1391,3.015,1392,2.179,1393,2.68,1394,2.68,1395,2.68,1396,2.179,1397,1.729,1398,2.378,1399,2.378,1400,4.225,1401,5.268,1402,2.68,1403,2.68,1404,2.68,1405,1.912,1406,2.031,1407,4.225,1408,2.031,1409,2.68,1410,2.68,1411,2.68,1412,4.225]],["title/modules/CryptoImplementatationModule.html",[143,1.302,1413,3.265]],["body/modules/CryptoImplementatationModule.html",[3,0.099,4,0.099,5,0.088,21,0.008,30,0.12,31,0.006,32,0.006,33,0.237,50,0.257,131,1.024,143,2.388,145,2.629,146,3,147,3.181,148,3.181,149,2.918,150,3.955,151,3.955,167,3.885,168,3.181,169,3.181,172,2.696,173,5.26,175,2.007,181,4.282,192,4.823,194,3.507,248,1.201,384,5.89,1195,4.307,1324,5.651,1349,4.542,1413,6.587,1414,5.648,1415,5.648,1416,5.648,1417,4.307,1418,5.176,1419,5.648,1420,5.648]],["title/interfaces/CryptoImplementation.html",[0,1.473,1421,3.097]],["body/interfaces/CryptoImplementation.html",[0,2.527,2,2.749,3,0.085,4,0.085,5,0.076,9,0.717,13,0.254,14,1.007,17,0.885,19,0.701,20,0.389,21,0.008,23,2.054,30,0.085,31,0.006,32,0.006,44,0.556,99,1.452,127,1.594,130,1.73,194,4.568,320,1.723,410,2.855,449,2.145,466,2.283,611,3.907,829,4.655,830,4.023,1330,5.916,1374,7.357,1417,5.611,1421,4.799,1422,4.472,1423,5.767,1424,7.091,1425,5.767,1426,5.06,1427,6.742,1428,7.091,1429,7.091,1430,5.499,1431,6.293,1432,5.311,1433,6.293,1434,9.057,1435,5.499,1436,6.283,1437,5.767,1438,6.293,1439,5.499,1440,5.948,1441,6.293,1442,3.722,1443,3.548,1444,4.472,1445,3.548]],["title/injectables/CryptoImplementationService.html",[717,0.952,1324,2.714]],["body/injectables/CryptoImplementationService.html",[3,0.084,4,0.084,5,0.075,13,0.252,17,0.88,20,0.313,21,0.008,30,0.109,31,0.006,32,0.006,33,0.203,44,0.554,50,0.252,97,1.684,99,1.305,105,2.648,127,1.585,130,1.933,131,0.877,134,1.615,174,2.718,175,1.719,194,4.554,228,2.475,320,1.714,447,1.491,449,1.65,465,2.096,466,1.756,531,4.554,547,3.886,717,1.467,718,2.096,830,4.153,868,4.133,870,5.345,1195,5.792,1289,2.433,1324,4.183,1330,5.033,1341,3.114,1342,4.133,1343,4.133,1417,5.593,1421,5.29,1445,5.522,1446,4.435,1447,8.265,1448,7.817,1449,5.454,1450,5.454,1451,7.053,1452,5.454,1453,5.345,1454,6.721,1455,5.454,1456,5.454,1457,6.357,1458,5.033,1459,7.817,1460,6.486,1461,5.454]],["title/modules/CryptoModule.html",[143,1.302,156,2.437]],["body/modules/CryptoModule.html",[3,0.094,4,0.094,5,0.084,21,0.008,30,0.094,31,0.006,32,0.006,33,0.226,50,0.269,125,2.711,131,0.978,143,2.34,145,2.512,146,2.867,147,3.04,148,3.04,149,2.788,150,3.876,151,3.876,156,4.995,167,3.778,168,3.04,169,3.04,172,2.576,558,3.607,559,2.576,728,4.117,881,3.607,919,5.851,1462,5.396,1463,5.396,1464,5.396,1465,6.081,1466,6.231,1467,5.396,1468,6.081,1469,6.081,1470,4.876,1471,5.396,1472,6.081,1473,5.396]],["title/classes/DBKeyService.html",[33,0.17,1474,3.468]],["body/classes/DBKeyService.html",[3,0.037,4,0.037,5,0.085,7,1.173,9,0.315,13,0.112,14,0.553,16,1.908,17,1.003,19,0.751,20,0.391,21,0.008,22,2.822,23,2.285,24,4.051,30,0.076,31,0.003,32,0.003,33,0.09,35,0.565,38,1.888,43,5.119,44,0.578,48,0.875,50,0.25,97,0.746,99,1.488,100,2.519,127,0.875,130,1.874,134,1.434,174,2.157,175,0.762,194,2.144,210,1.636,226,1.568,228,0.848,248,1.493,289,2.524,320,1.954,333,2.398,365,2.144,409,2.152,410,2.701,433,1.208,447,1.064,448,2.592,449,1.857,465,1.495,466,1.573,499,1.784,505,2.335,509,2.463,518,1.691,543,3.447,544,2.462,547,2.144,681,3.453,727,1.332,728,2.123,741,3.493,742,1.332,754,3.162,829,3.641,881,1.433,900,3.996,917,3.447,918,1.636,934,2.403,962,2.982,996,2.949,1015,5.086,1089,2.777,1111,1.888,1112,1.834,1123,1.38,1138,2.222,1195,4.154,1225,1.832,1324,3.321,1341,1.38,1349,1.725,1352,1.332,1373,2.634,1421,3.306,1432,2.634,1436,2.949,1437,1.965,1442,4.154,1443,5.013,1457,1.965,1470,1.559,1474,2.949,1475,6.12,1476,2.145,1477,2.634,1478,5.258,1479,4.335,1480,3.891,1481,3.891,1482,6.366,1483,4.243,1484,3.453,1485,3.453,1486,4.554,1487,3.972,1488,3.891,1489,3.453,1490,3.891,1491,3.891,1492,4.554,1493,3.165,1494,2.145,1495,2.417,1496,3.891,1497,3.453,1498,3.891,1499,2.417,1500,2.634,1501,4.554,1502,3.891,1503,6.138,1504,2.417,1505,3.613,1506,4.969,1507,2.417,1508,2.417,1509,2.417,1510,3.453,1511,3.458,1512,2.417,1513,3.891,1514,2.417,1515,3.453,1516,2.417,1517,3.453,1518,3.996,1519,5.599,1520,2.417,1521,2.145,1522,1.725,1523,5.599,1524,3.453,1525,2.417,1526,3.972,1527,1.208,1528,3.165,1529,1.832,1530,1.636,1531,1.965,1532,1.832,1533,1.832,1534,2.145,1535,1.965,1536,2.417,1537,2.417,1538,2.417,1539,2.417,1540,4.335,1541,6.138,1542,1.965,1543,2.417,1544,3.891,1545,2.417,1546,2.417,1547,2.417,1548,2.417,1549,2.417,1550,2.417,1551,2.417,1552,2.417,1553,2.417,1554,2.417,1555,2.417,1556,2.417,1557,2.417,1558,4.885,1559,2.417,1560,2.417,1561,2.417,1562,2.417,1563,2.417,1564,2.145,1565,2.417,1566,2.145,1567,2.145,1568,2.145,1569,4.885,1570,3.891,1571,3.453,1572,3.891,1573,2.417,1574,2.417,1575,2.417,1576,2.417,1577,2.417,1578,2.417]],["title/modules/DatabaseModule.html",[143,1.302,157,3.265]],["body/modules/DatabaseModule.html",[3,0.087,4,0.087,5,0.077,20,0.318,21,0.008,30,0.111,31,0.006,32,0.006,33,0.208,48,1.613,50,0.254,131,0.901,134,1.354,143,2.042,145,2.314,157,5.121,172,3.04,173,4.857,174,2.745,175,1.766,181,3.954,186,4.432,187,3.323,246,3.46,247,4.246,248,1.494,250,4.246,297,4.972,558,3.323,559,2.373,579,6.159,1408,4.246,1579,4.556,1580,7.177,1581,4.556,1582,6.368,1583,4.972,1584,4.972,1585,4.972,1586,7.409,1587,7.836,1588,6.541,1589,6.159,1590,4.972,1591,4.972,1592,4.972,1593,4.972,1594,4.972,1595,5.603,1596,7.177,1597,7.918,1598,5.603,1599,5.603,1600,7.177,1601,5.603,1602,5.603,1603,5.603,1604,5.603,1605,5.603,1606,4.972,1607,5.603,1608,5.836,1609,5.603,1610,5.603]],["title/entities/DisplayEntity.html",[880,1.537,1611,3.468]],["body/entities/DisplayEntity.html",[3,0.101,4,0.101,5,0.09,13,0.302,14,1.121,19,0.732,20,0.376,21,0.008,30,0.101,31,0.006,32,0.006,33,0.243,44,0.56,46,1.579,48,1.774,50,0.192,97,2.62,99,1.208,118,2.631,289,2.415,880,2.652,882,3.168,893,4.033,897,4.204,907,3.478,908,2.697,909,3.598,1021,4.419,1083,4.033,1611,5.982,1612,5.31,1613,6.529,1614,6.9,1615,6.529,1616,6.529,1617,6.529,1618,3.478]],["title/classes/EC_Public.html",[33,0.17,1505,2.952]],["body/classes/EC_Public.html",[3,0.08,4,0.08,5,0.072,9,0.677,13,0.24,14,0.971,19,0.69,20,0.374,21,0.008,22,3.595,23,2.309,25,3.817,30,0.106,31,0.005,32,0.005,33,0.302,35,1.214,44,0.575,50,0.153,75,4.066,87,2.625,105,2.565,242,3.599,313,3.048,378,4.528,379,2.145,385,2.966,400,1.783,531,3.764,543,4.408,600,2.862,610,2.862,623,4.609,690,4.624,754,3.863,866,4.22,1236,5.437,1239,4.715,1445,4.408,1505,4.408,1527,2.597,1530,5.703,1619,7.198,1620,6.147,1621,7.062,1622,6.775,1623,5.448,1624,5.786,1625,6.386,1626,6.386,1627,5.194,1628,6.063,1629,5.556,1630,6.063,1631,5.194,1632,6.147,1633,4.609,1634,3.515]],["title/classes/EmbeddedDisclosurePolicy.html",[33,0.17,39,2.714]],["body/classes/EmbeddedDisclosurePolicy.html",[3,0.084,4,0.084,5,0.075,13,0.25,14,0.995,19,0.559,20,0.378,21,0.008,30,0.14,31,0.006,32,0.006,33,0.335,34,4.002,35,1.262,36,3.203,37,4.521,38,3.995,39,5.186,40,5.743,41,3.471,42,3.484,44,0.383,46,1.08,48,1.575,50,0.206,51,2.027,52,4.399,53,5.641,54,2.876,55,2.73,56,2.453,57,3.303,58,1.537,59,2.699,60,4.805,61,3.381,62,3.484,63,3.484,64,4.521,65,3.484,66,4.521,67,3.654,68,5.572,69,3.303,70,4.002,71,3.484,72,3.654,73,2.545,74,3.335,75,2.876,76,3.484,77,4.002,78,3.484,79,4.805,80,2.784,81,1.738,82,3.654,83,4.002,84,3.484,85,3.654,86,2.784,87,2.075,88,3.654,89,3.203,1635,5.4,1636,5.4]],["title/injectables/EncryptionService.html",[717,0.952,919,2.826]],["body/injectables/EncryptionService.html",[3,0.065,4,0.065,5,0.058,9,0.968,13,0.194,16,2.149,17,0.926,19,0.725,20,0.347,21,0.008,22,3.194,23,2.067,30,0.065,31,0.005,32,0.005,33,0.156,44,0.527,48,0.945,50,0.246,99,1.374,127,1.329,130,1.726,131,0.676,134,1.291,174,1.382,242,2.788,248,1.291,289,2.525,291,2.167,320,1.902,333,2.358,378,3.507,400,3.012,410,2.468,422,3.258,447,2.031,448,1.271,449,2.368,485,2.595,505,2.157,509,2.03,543,3.712,544,3.294,559,1.78,658,2.399,683,4.809,717,1.23,718,1.615,754,3.137,913,2.399,917,3.712,918,2.844,919,4.587,934,3.652,1112,1.981,1123,4.241,1129,3.652,1287,4.22,1373,4.002,1387,3.417,1427,3.417,1443,3.816,1453,4.482,1470,3.816,1471,3.729,1487,4.809,1524,3.729,1526,3.417,1527,2.1,1528,4.809,1529,3.184,1540,5.248,1571,3.729,1623,2.998,1637,3.729,1638,3.816,1639,8.773,1640,5.914,1641,5.914,1642,5.914,1643,4.809,1644,4.202,1645,4.202,1646,5.914,1647,4.202,1648,4.202,1649,5.914,1650,7.427,1651,6.783,1652,5.914,1653,5.914,1654,4.202,1655,4.809,1656,4.202,1657,4.202,1658,4.202,1659,4.202,1660,4.202,1661,5.248,1662,3.729,1663,3.729,1664,4.202,1665,4.202,1666,5.565,1667,5.914,1668,4.202,1669,3.729,1670,4.202,1671,4.202,1672,4.202,1673,4.202,1674,4.202]],["title/interfaces/FileStorage.html",[0,1.473,1675,2.952]],["body/interfaces/FileStorage.html",[0,1.662,2,2.58,3,0.08,4,0.08,5,0.071,13,0.239,17,1.115,19,0.762,20,0.39,21,0.008,22,2.677,23,2.24,30,0.125,31,0.005,32,0.005,44,0.596,50,0.152,99,1.555,118,3.067,127,1.529,130,1.854,248,0.974,320,2.043,409,2.925,410,2.878,448,1.561,483,4.198,496,5.156,596,3.516,741,2.749,1020,3.749,1112,3.207,1138,3.885,1240,3.624,1675,4.39,1676,3.912,1677,6.038,1678,5.768,1679,5.768,1680,5.156,1681,5.162,1682,5.533,1683,5.162,1684,4.58,1685,6.754,1686,5.162,1687,3.912,1688,5.162,1689,4.198,1690,5.151,1691,6.132,1692,6.19,1693,5.774,1694,5.162,1695,3.912,1696,4.202,1697,4.198,1698,4.58,1699,5.162,1700,3.493,1701,5.162,1702,5.162,1703,4.58,1704,3.912,1705,5.162,1706,5.162,1707,5.162,1708,3.683,1709,3.683,1710,4.58]],["title/injectables/FilesService.html",[717,0.952,1711,3.468]],["body/injectables/FilesService.html",[3,0.074,4,0.074,5,0.066,13,0.222,17,1.024,19,0.751,20,0.364,21,0.008,22,1.891,23,1.948,30,0.074,31,0.005,32,0.005,33,0.179,44,0.582,50,0.242,74,2.968,97,2.003,99,1.519,123,1.484,127,1.458,130,1.734,131,0.773,134,1.549,187,2.85,228,2.276,246,2.968,248,1.385,251,2.552,252,1.985,289,1.846,320,1.995,409,3.021,410,2.045,447,1.314,448,1.962,596,2.819,654,3.101,684,3.429,717,1.349,718,1.847,741,2.56,835,4.186,1112,3.058,1195,3.252,1240,2.56,1352,2.648,1675,5.073,1678,4.916,1680,4.916,1687,4.916,1690,4.97,1691,5.959,1695,3.642,1696,4.856,1697,3.908,1698,5.757,1700,3.252,1708,3.429,1709,3.429,1711,4.916,1712,4.265,1713,6.488,1714,7.344,1715,4.806,1716,4.806,1717,6.488,1718,4.806,1719,6.488,1720,7.863,1721,4.806,1722,4.806,1723,4.806,1724,7.863,1725,6.395,1726,4.806,1727,4.806,1728,4.806,1729,4.806,1730,6.488,1731,4.806,1732,4.806,1733,4.806,1734,4.806,1735,4.806,1736,4.806,1737,4.806,1738,4.806,1739,4.806,1740,4.806,1741,4.806,1742,4.806,1743,4.806,1744,4.806,1745,4.806,1746,4.806,1747,3.429,1748,4.806,1749,4.806]],["title/interfaces/GenerateTokenOptions.html",[0,1.473,1750,3.468]],["body/interfaces/GenerateTokenOptions.html",[0,1.44,2,2.235,3,0.069,4,0.069,5,0.062,13,0.207,14,0.877,17,1.033,19,0.716,20,0.314,21,0.008,28,2.381,30,0.096,31,0.005,32,0.005,33,0.166,50,0.236,73,2.108,87,1.718,131,0.719,134,1.51,174,2.326,175,1.41,226,2.851,228,1.569,230,3.636,248,1.656,253,1.995,265,3.191,322,1.943,333,1.793,380,3.261,392,2.306,399,2.762,410,1.947,413,5.164,422,3.898,441,2.885,443,4.002,444,3.389,465,2.718,466,2.666,467,3.026,468,6.205,469,5.782,475,4.179,485,4.369,487,3.403,499,3.67,503,6.068,505,1.947,508,5.164,509,1.535,518,3.074,539,4.179,571,4.407,717,1.284,780,2.885,817,3.702,830,2.169,833,4.923,928,4.407,1196,2.762,1217,3.389,1289,1.995,1426,3.191,1483,4.68,1500,3.026,1527,2.235,1750,5.361,1751,3.636,1752,3.968,1753,3.636,1754,3.968,1755,3.968,1756,3.968,1757,3.968,1758,3.968,1759,3.636,1760,3.968,1761,5.48,1762,5.48,1763,5.48,1764,5.48,1765,3.968,1766,3.968,1767,6.278,1768,5.48,1769,3.968,1770,5.022,1771,3.968,1772,3.968,1773,3.968,1774,3.636,1775,3.968,1776,3.968,1777,3.968,1778,3.968,1779,3.968,1780,3.636,1781,3.968,1782,3.968,1783,3.389,1784,3.968,1785,3.968,1786,3.636,1787,3.968,1788,3.968,1789,3.968,1790,3.636]],["title/controllers/HealthController.html",[123,1.413,1791,3.468]],["body/controllers/HealthController.html",[3,0.096,4,0.096,5,0.085,9,0.805,13,0.286,21,0.008,30,0.096,31,0.006,32,0.006,33,0.229,44,0.438,46,1.235,50,0.225,123,1.906,125,2.215,127,1.715,130,1.682,131,0.993,134,1.164,253,4.134,367,5.162,386,4.203,447,1.688,448,2.307,509,2.619,627,3.086,630,5.78,1477,5.162,1608,6.203,1791,6.552,1792,5.478,1793,9.049,1794,7.628,1795,8.647,1796,7.628,1797,6.769,1798,7.628,1799,6.173,1800,6.173,1801,7.628,1802,7.628,1803,5.02,1804,6.173,1805,6.173,1806,6.173,1807,6.173]],["title/modules/HealthModule.html",[143,1.302,158,3.265]],["body/modules/HealthModule.html",[3,0.109,4,0.109,5,0.097,21,0.008,30,0.109,31,0.007,32,0.007,33,0.261,50,0.258,125,2.961,131,1.131,143,2.348,145,2.905,158,5.888,172,2.979,1791,6.636,1803,5.72,1808,7.034,1809,8.252,1810,7.034]],["title/entities/IssuanceConfig.html",[864,2.437,880,1.537]],["body/entities/IssuanceConfig.html",[3,0.055,4,0.055,5,0.049,9,0.998,12,2.012,13,0.164,14,0.742,16,1.885,17,1.014,19,0.611,20,0.394,21,0.008,26,2.879,27,2.213,30,0.055,31,0.004,32,0.004,33,0.231,44,0.599,46,1.689,48,1.898,50,0.233,51,1.329,55,2.567,56,1.958,57,3.233,58,1.007,61,2.271,80,2.694,81,1.682,87,2.008,92,2.223,94,3.416,97,1.614,101,2.879,104,2.905,108,2.833,113,2.636,114,2.208,117,3.192,119,3.227,122,2.395,133,1.164,228,2.407,284,3.06,289,1.768,322,1.538,325,3.099,332,1.623,336,3.917,343,2.213,345,2.879,346,4.895,347,3.537,348,3.416,349,3.729,352,2.783,353,2.567,356,3.42,357,4.642,360,3.729,361,3.536,362,3.372,370,4.236,391,3.729,400,1.794,544,1.962,596,2.271,609,4.068,864,2.783,880,2.304,882,1.717,884,4.249,886,3.423,887,3.547,888,4.236,889,4.204,891,4.642,892,2.879,895,4.729,897,3.653,902,4.204,904,3.372,905,3.372,907,1.885,908,1.462,909,3.423,1012,4.204,1027,4.426,1028,3.141,1029,3.729,1031,5.578,1032,4.249,1034,3.141,1066,2.878,1069,2.526,1070,3.96,1073,3.372,1075,4.637,1078,2.395,1081,2.682,1083,3.837,1085,2.526,1089,2.526,1125,3.729,1133,3.729,1255,4.637,1262,3.099,1263,4.637,1264,5.512,1811,7.599,1812,4.433,1813,5.512,1814,3.539,1815,3.141,1816,3.141,1817,4.236,1818,3.539,1819,4.637,1820,5.226,1821,3.141,1822,3.099,1823,3.539,1824,5.226,1825,3.539,1826,5.226,1827,5.226,1828,5.226,1829,3.539,1830,3.539,1831,3.539,1832,3.539,1833,3.141,1834,3.539,1835,3.539,1836,3.141]],["title/controllers/IssuanceController.html",[123,1.413,1837,3.468]],["body/controllers/IssuanceController.html",[3,0.079,4,0.079,5,0.071,13,0.237,16,2.08,17,0.947,19,0.605,20,0.336,21,0.008,30,0.079,31,0.005,32,0.005,33,0.191,44,0.538,46,1.518,50,0.254,92,2.207,99,1.403,114,2.599,123,1.584,125,1.84,127,1.523,130,1.968,131,0.825,133,1.687,134,1.431,284,3.982,320,1.844,356,3.312,359,3.194,380,2.916,409,2.604,426,4.181,431,3.168,443,4.558,449,2.295,518,2.229,544,3.03,553,2.826,627,2.564,657,2.929,674,2.119,730,4.5,1102,5.462,1112,2.418,1122,4.185,1136,4.835,1268,6.171,1271,4.552,1272,3.66,1278,3.471,1279,3.471,1280,3.471,1282,4.171,1283,3.168,1284,3.471,1285,3.471,1286,4.171,1289,2.289,1293,3.66,1294,3.887,1837,5.135,1838,4.552,1839,6.776,1840,6.776,1841,6.733,1842,5.129,1843,5.129,1844,5.129,1845,5.129,1846,5.129,1847,4.552,1848,5.129,1849,5.129,1850,5.129,1851,5.129,1852,3.887,1853,5.129]],["title/classes/IssuanceDto.html",[33,0.17,1102,3.097]],["body/classes/IssuanceDto.html",[3,0.088,4,0.088,5,0.079,9,0.743,13,0.264,14,1.031,16,1.469,19,0.455,20,0.354,21,0.008,26,3.141,27,2.414,30,0.112,31,0.006,32,0.006,33,0.312,35,1.332,38,3.52,44,0.404,46,1.14,48,1.281,50,0.261,51,2.14,52,3.741,55,2,56,2.288,57,3.42,58,1.622,69,2.687,92,2.183,94,2.543,104,2.414,117,2.297,133,1.874,248,1.369,289,2.065,305,5.058,332,2.613,336,3.255,353,2.948,356,3.334,359,4.09,601,4.558,864,3.036,886,3.998,887,4.143,1012,4.911,1073,3.678,1078,3.858,1094,4.068,1096,6.368,1097,4.636,1098,6.491,1100,4.636,1101,3.255,1102,4.911,1103,6.439,1104,5.499,1105,5.499,1106,7.083,1854,5.7,1855,5.7]],["title/injectables/IssuanceService.html",[717,0.952,730,2.714]],["body/injectables/IssuanceService.html",[3,0.039,4,0.039,5,0.087,9,0.329,13,0.117,16,1.878,17,0.782,19,0.698,20,0.296,21,0.008,22,1.978,30,0.039,31,0.003,32,0.003,33,0.187,44,0.497,48,0.905,50,0.264,51,0.947,58,0.718,61,1.75,81,1.297,86,1.301,92,1.569,94,1.126,97,2.065,99,1.16,113,1.548,114,2.48,122,2.305,127,1.29,130,1.817,131,0.406,134,1.261,174,2.307,175,0.795,183,1.558,184,1.628,186,2.488,187,2.389,217,4.753,226,2.313,246,1.558,248,1.66,251,2.468,253,1.126,260,1.912,265,1.8,280,3.152,289,2.373,313,1.126,316,2.37,320,1.524,325,2.982,333,2.182,336,1.441,339,1.558,353,2.557,356,3.203,359,3.775,370,4.757,379,1.042,388,3.275,403,3.052,410,1.27,447,1.569,448,2.272,449,2.272,465,1.932,466,1.618,487,1.39,499,2.305,505,2.368,509,1.383,544,2.634,559,1.069,606,2.052,717,0.838,718,0.969,728,3.049,730,3.404,742,1.39,758,1.301,864,3.057,876,1.912,908,1.042,913,1.441,917,3.508,976,2.389,1010,3.277,1012,1.707,1015,2.3,1020,1.39,1027,1.628,1029,1.8,1078,1.707,1081,1.912,1100,2.052,1101,1.441,1102,4.749,1107,3.703,1109,1.8,1111,1.954,1112,1.899,1114,3.582,1116,2.592,1117,4.095,1122,2.488,1123,2.3,1133,2.874,1137,3.587,1138,2.871,1141,2.052,1142,2.052,1143,2.052,1144,1.912,1148,2.052,1149,2.052,1150,3.275,1152,4.088,1153,2.052,1154,2.052,1155,3.275,1156,2.052,1157,2.052,1158,2.052,1159,2.052,1160,4.088,1161,3.545,1162,2.052,1163,2.052,1164,1.707,1165,2.052,1166,5.437,1167,3.275,1168,2.052,1169,1.912,1170,2.052,1171,2.052,1172,2.052,1173,3.275,1176,3.275,1177,3.275,1178,2.052,1179,3.275,1180,2.052,1181,2.052,1182,1.912,1183,2.052,1184,2.052,1185,1.912,1186,2.052,1187,2.052,1191,1.8,1192,2.052,1193,1.8,1194,4.088,1196,1.558,1197,1.628,1199,2.052,1200,2.052,1201,4.088,1202,4.088,1203,2.052,1205,1.8,1206,2.052,1208,3.574,1220,2.239,1221,5.093,1231,2.052,1268,3.275,1281,2.052,1352,2.219,1425,2.052,1458,4.095,1501,4.088,1567,2.239,1836,2.239,1841,3.574,1847,2.239,1856,2.239,1857,4.028,1858,5.027,1859,5.437,1860,2.523,1861,5.027,1862,5.739,1863,2.523,1864,5.027,1865,4.028,1866,2.523,1867,4.028,1868,2.523,1869,2.523,1870,2.523,1871,2.523,1872,2.523,1873,4.028,1874,2.523,1875,4.028,1876,2.239,1877,2.523,1878,2.523,1879,2.523,1880,2.523,1881,2.523,1882,2.239,1883,2.523,1884,2.523,1885,2.523,1886,2.523,1887,2.523,1888,2.523,1889,5.027,1890,2.523,1891,4.028,1892,2.523,1893,2.523,1894,2.523,1895,4.028,1896,2.523,1897,2.523,1898,2.523,1899,4.028,1900,2.523,1901,2.523,1902,2.523,1903,2.523,1904,2.523,1905,2.523,1906,2.523,1907,2.523,1908,2.523,1909,2.523,1910,2.523,1911,2.523,1912,5.027,1913,5.739,1914,2.523,1915,2.523,1916,2.523,1917,2.523,1918,2.523,1919,2.523,1920,2.523]],["title/controllers/IssuerManagementController.html",[123,1.413,1921,3.468]],["body/controllers/IssuerManagementController.html",[3,0.066,4,0.066,5,0.059,9,0.555,13,0.197,17,0.531,19,0.339,20,0.385,21,0.008,25,2.128,30,0.066,31,0.005,32,0.005,33,0.158,41,1.899,44,0.302,46,0.851,50,0.256,61,1.85,73,2.006,80,2.195,87,1.636,97,2.306,99,0.787,119,2.629,122,1.951,123,1.314,125,1.527,127,1.341,130,0.938,131,0.685,133,1.4,139,2.746,242,3.248,248,1.126,252,1.758,284,3.509,287,4.664,291,4.055,320,1.034,333,2.001,341,2.195,347,3.553,348,1.899,353,2.094,379,1.758,380,2.293,397,3.85,400,2.981,409,3.283,426,2.345,428,4.522,430,4.853,431,2.629,443,3.734,449,1.805,452,5.33,455,2.593,495,1.962,505,1.881,509,2.049,518,1.85,540,2.881,546,3.226,553,2.345,627,2.128,657,2.431,658,2.431,669,2.813,674,1.758,682,3.462,703,4.819,849,3.226,861,3.85,862,4.613,921,4.256,922,3.037,962,3.178,1017,3.686,1278,2.881,1279,2.881,1280,2.881,1282,3.462,1283,4.256,1284,2.881,1285,2.881,1286,3.462,1289,1.899,1500,2.881,1618,3.178,1690,2.881,1852,3.226,1921,4.522,1922,5.296,1923,4.853,1924,3.777,1925,6.115,1926,3.777,1927,5.953,1928,3.777,1929,5.296,1930,4.446,1931,3.777,1932,4.257,1933,4.257,1934,4.257,1935,3.462,1936,4.446,1937,2.881,1938,3.462,1939,4.257,1940,3.777,1941,3.777,1942,5.296,1943,3.226,1944,6.628,1945,3.777,1946,3.777,1947,5.604,1948,3.777,1949,6.628,1950,5.96,1951,3.777,1952,4.257,1953,4.257,1954,4.257,1955,4.257,1956,4.257,1957,4.257,1958,4.257,1959,4.522,1960,3.462,1961,4.257,1962,4.257,1963,3.777,1964,3.777,1965,4.257,1966,3.777,1967,4.257,1968,3.777,1969,3.777,1970,3.777,1971,3.777,1972,3.777,1973,3.777,1974,3.777]],["title/interfaces/IssuerMetadata.html",[0,1.473,1975,3.265]],["body/interfaces/IssuerMetadata.html",[0,2.676,2,3.115,3,0.097,4,0.097,5,0.086,9,0.812,13,0.288,14,1.09,19,0.663,20,0.385,21,0.008,22,3.018,23,1.901,27,3.249,30,0.097,31,0.006,32,0.006,50,0.183,118,3.092,242,3.617,378,4.55,379,3.169,385,5.248,518,4.091,543,4.336,608,5.814,610,4.227,613,5.192,754,3.517,1238,5.068,1240,4.086,1252,3.558,1259,6.808,1527,3.115,1975,5.475,1976,5.53]],["title/modules/IssuerModule.html",[143,1.302,159,3.097]],["body/modules/IssuerModule.html",[3,0.065,4,0.065,5,0.058,21,0.008,30,0.091,31,0.005,32,0.005,33,0.156,50,0.28,81,1.349,125,2.118,131,0.674,143,1.945,145,1.731,146,1.976,147,2.095,148,2.095,149,1.921,150,3.221,151,3.221,156,4.321,159,6.456,163,5.01,167,2.951,168,2.095,169,2.095,172,2.5,174,2.247,175,1.321,181,3.253,191,2.589,200,3.176,206,3.176,248,1.114,356,1.61,455,1.821,518,1.821,552,5.234,558,2.486,559,1.775,564,2.309,565,3.408,625,5.179,666,5.308,727,2.309,730,4.811,760,3.176,864,3.144,921,5.527,1010,3.371,1027,3.809,1071,2.704,1080,3.719,1081,3.176,1101,2.393,1107,5.234,1109,2.991,1231,3.408,1265,5.179,1281,3.408,1288,5.234,1296,5.179,1298,3.408,1308,3.719,1350,3.719,1611,4.474,1837,5.179,1876,3.719,1921,5.179,1923,3.408,1977,3.719,1978,3.719,1979,3.719,1980,3.719,1981,5.234,1982,5.01,1983,4.811,1984,5.01,1985,3.408,1986,5.179,1987,3.995,1988,2.309,1989,5.903,1990,4.212,1991,3.176,1992,2.991,1993,3.408,1994,4.191,1995,4.191,1996,4.191,1997,4.191,1998,4.191,1999,4.191,2000,4.191,2001,4.191,2002,4.191,2003,4.191,2004,3.719,2005,3.719,2006,4.191,2007,5.903,2008,3.719,2009,4.191,2010,4.191]],["title/classes/JwksResponseDto.html",[33,0.17,1634,3.097]],["body/classes/JwksResponseDto.html",[3,0.087,4,0.087,5,0.078,9,0.735,13,0.261,14,1.024,19,0.634,20,0.32,21,0.008,22,3.582,23,2.256,25,3.971,30,0.112,31,0.006,32,0.006,33,0.295,35,1.318,44,0.4,50,0.166,75,4.711,87,2.168,105,2.118,242,3.744,313,2.517,378,4.711,379,2.977,385,4.116,400,2.475,531,3.108,543,4.596,600,3.108,610,3.971,690,3.818,754,3.837,866,3.484,1236,4.651,1239,4.906,1445,3.64,1505,3.64,1527,2.82,1530,4.878,1619,6.396,1620,5.462,1621,7.023,1622,6.396,1623,4.026,1624,4.275,1625,5.462,1626,5.462,1628,5.006,1629,4.588,1630,5.006,1632,5.462,1634,4.878,2011,5.006]],["title/injectables/JwtAuthGuard.html",[553,2.521,717,0.952]],["body/injectables/JwtAuthGuard.html",[3,0.097,4,0.097,5,0.086,13,0.289,17,0.958,20,0.34,21,0.008,30,0.097,31,0.006,32,0.006,33,0.232,38,3.727,44,0.545,48,1.403,50,0.256,99,1.421,127,1.727,130,1.376,131,1.004,134,1.449,248,1.178,320,1.866,447,1.707,553,4.232,557,4.731,717,1.598,718,2.399,1289,2.786,1725,6.246,2012,5.54,2013,7.681,2014,6.816,2015,5.54,2016,8.053,2017,6.243,2018,6.816,2019,6.194,2020,6.243,2021,3.856,2022,5.077,2023,6.243,2024,6.246,2025,6.243,2026,6.243,2027,6.243,2028,5.54,2029,6.243,2030,6.243]],["title/injectables/JwtService.html",[441,2.952,717,0.952]],["body/injectables/JwtService.html",[0,1.303,3,0.063,4,0.063,5,0.056,13,0.187,17,0.911,19,0.684,20,0.324,21,0.008,28,3.067,30,0.089,31,0.005,32,0.005,33,0.15,44,0.547,50,0.227,73,2.714,87,1.555,97,1.249,99,1.351,127,1.294,130,1.61,131,0.651,134,1.456,174,2.637,175,1.276,226,2.701,228,2.02,230,3.291,248,1.619,253,2.569,265,4.783,320,1.774,322,1.758,333,2.329,380,3.417,392,2.969,399,3.556,410,2.302,413,5.222,422,4.024,441,3.715,443,4.216,444,3.066,447,1.106,465,2.576,466,2.582,467,2.738,468,6.275,469,5.848,475,3.897,485,4.14,487,3.173,499,3.676,503,4.364,505,1.815,508,2.738,509,1.977,518,2.913,539,4.536,571,4.109,717,1.198,718,1.555,727,2.229,780,3.715,817,3.891,830,1.963,833,2.611,928,4.783,1196,3.556,1217,4.364,1289,1.805,1426,2.887,1483,4.364,1500,3.897,1527,2.023,1750,5.534,1751,3.291,1752,3.591,1753,3.291,1754,3.591,1755,3.591,1756,3.591,1757,3.591,1758,3.591,1759,4.683,1760,5.948,1761,5.11,1762,5.11,1763,5.11,1764,5.11,1765,3.591,1766,3.591,1767,5.948,1768,5.11,1769,3.591,1770,4.683,1771,3.591,1772,3.591,1773,3.591,1774,3.291,1775,3.591,1776,3.591,1777,3.591,1778,3.591,1779,5.11,1780,3.291,1781,3.591,1782,3.591,1783,3.066,1784,5.11,1785,5.11,1786,4.683,1787,5.11,1788,3.591,1789,6.48,1790,3.291,2031,5.758,2032,5.758,2033,4.046,2034,4.046,2035,4.046,2036,4.046,2037,4.046,2038,4.046]],["title/injectables/JwtStrategy.html",[554,3.265,717,0.952]],["body/injectables/JwtStrategy.html",[3,0.063,4,0.063,5,0.056,9,0.529,13,0.188,17,0.964,20,0.343,21,0.008,23,1.43,30,0.063,31,0.005,32,0.005,33,0.151,38,2.801,44,0.548,48,1.51,50,0.243,76,2.62,99,1.429,114,2.355,127,1.298,130,1.704,131,0.653,134,1.515,136,3.725,174,2.991,175,1.28,180,5.73,226,3.114,246,2.508,248,1.592,250,3.078,251,1.598,253,2.576,265,5.22,276,2.409,311,2.62,316,3.448,320,1.878,322,1.765,333,1.951,379,2.385,385,3.297,387,2.721,390,3.303,399,2.508,402,3.604,410,1.82,421,5.961,422,2.238,434,5.101,435,3.303,443,3.656,444,3.078,447,1.579,448,2.554,449,1.228,465,1.561,466,1.308,499,3.937,500,3.725,505,1.28,518,3.489,547,2.238,554,4.12,557,3.078,576,3.303,584,3.303,717,1.201,718,1.561,727,2.238,741,2.163,817,4.008,967,4.546,1193,2.898,1196,2.508,1352,3.181,1426,4.793,1458,2.898,1759,3.303,1770,3.303,1774,3.303,1786,3.303,1790,3.303,1959,3.078,2039,3.604,2040,5.773,2041,5.773,2042,6.717,2043,4.061,2044,5.773,2045,4.061,2046,5.773,2047,4.061,2048,5.773,2049,6.717,2050,4.061,2051,4.061,2052,5.773,2053,4.061,2054,5.773,2055,4.061,2056,5.773,2057,3.604,2058,4.061,2059,4.061,2060,3.604,2061,7.315,2062,4.061,2063,4.061,2064,4.061,2065,4.061,2066,4.061,2067,4.061,2068,4.061,2069,5.773,2070,6.717,2071,4.061,2072,4.061,2073,3.604,2074,4.061,2075,4.061,2076,4.061,2077,4.061,2078,5.773,2079,3.604,2080,5.773,2081,3.604,2082,4.061,2083,5.773,2084,4.061,2085,4.061,2086,4.061,2087,4.061,2088,4.061,2089,4.061,2090,4.061,2091,4.061,2092,4.061,2093,4.061]],["title/classes/Key.html",[23,1.134,33,0.17]],["body/classes/Key.html",[3,0.079,4,0.079,5,0.07,7,2.469,9,0.879,13,0.235,14,0.958,15,3.632,16,1.311,17,0.635,19,0.751,20,0.404,21,0.008,23,2.274,24,3.143,25,3.37,30,0.079,31,0.005,32,0.005,33,0.299,35,1.189,44,0.622,46,1.755,50,0.223,51,1.911,54,2.711,55,2.652,56,2.957,58,1.448,97,1.572,99,0.941,104,2.855,105,1.911,313,3.008,448,2.039,543,4.022,601,2.906,754,3.689,830,3.667,1443,3.284,1445,3.284,1511,3.143,1527,2.544,1542,6.147,1620,3.857,1621,6.098,1623,5.394,1624,5.728,1625,6.098,1626,6.098,1632,5.108,2094,6.029,2095,4.139,2096,6.708,2097,5.09,2098,5.09,2099,5.09,2100,5.09,2101,5.09,2102,5.09,2103,5.09,2104,5.09,2105,4.516,2106,4.516]],["title/controllers/KeyController.html",[123,1.413,1466,3.468]],["body/controllers/KeyController.html",[3,0.066,4,0.066,5,0.059,9,0.553,13,0.196,16,2.311,17,0.93,19,0.649,20,0.331,21,0.008,22,1.668,23,2.239,30,0.066,31,0.005,32,0.005,33,0.158,44,0.529,46,1.492,50,0.255,99,1.379,123,1.309,125,1.521,127,1.338,130,1.795,131,0.682,133,1.394,134,1.297,246,2.619,248,1.406,289,1.957,320,1.812,333,2.365,380,3.517,409,3.473,410,2.567,426,3.789,443,4.518,447,1.159,448,1.283,449,2.624,466,1.916,505,1.876,509,2.795,543,3.727,544,2.234,553,2.336,627,2.119,657,2.421,674,1.751,728,2.988,881,2.515,1111,2.887,1112,3.242,1272,3.026,1278,2.869,1279,2.869,1280,2.869,1284,2.869,1285,2.869,1293,3.026,1294,4.51,1352,3.279,1466,5.65,1467,3.763,1477,4.028,1478,4.654,1492,4.84,1511,4.605,1531,4.84,1532,3.213,1533,3.213,1535,3.448,1679,3.213,2107,3.763,2108,6.877,2109,5.951,2110,5.951,2111,6.877,2112,4.24,2113,4.24,2114,4.24,2115,4.24,2116,4.24,2117,4.24,2118,4.24,2119,5.65,2120,4.24,2121,4.24,2122,5.951,2123,4.84,2124,3.448,2125,4.24,2126,4.24,2127,4.24,2128,6.877,2129,4.24,2130,4.24,2131,4.24,2132,4.24,2133,4.24,2134,4.24]],["title/entities/KeyEntity.html",[880,1.537,1470,2.952]],["body/entities/KeyEntity.html",[3,0.088,4,0.088,5,0.079,13,0.263,14,1.03,16,2.235,19,0.67,20,0.399,21,0.008,23,2.327,26,3.993,27,3.07,30,0.112,31,0.006,32,0.006,33,0.212,44,0.595,46,1.68,48,1.888,50,0.213,228,2.543,289,2.27,544,2.721,754,3.656,880,2.435,882,2.761,893,4.926,897,4.472,907,3.031,908,2.35,909,4.394,1021,3.851,1083,3.514,1470,4.676,1527,2.844,1651,4.628,1666,7.21,2135,4.628,2136,5.69,2137,5.69,2138,7.248,2139,5.69,2140,6.486,2141,5.691,2142,5.69,2143,4.061]],["title/classes/KeyImportDto.html",[33,0.17,1511,2.826]],["body/classes/KeyImportDto.html",[3,0.082,4,0.082,5,0.073,7,3.368,9,1.135,13,0.246,14,0.986,15,5.512,16,1.371,17,1.086,19,0.737,20,0.386,21,0.008,23,2.327,24,4.287,25,4.093,30,0.082,31,0.005,32,0.005,33,0.304,35,1.243,44,0.548,46,1.545,50,0.227,51,1.998,54,2.834,55,2.711,56,2.867,58,1.514,97,1.643,99,0.984,104,2.94,105,1.998,313,2.374,448,2.337,543,4.093,601,3.963,754,3.753,830,2.582,1443,4.984,1445,3.433,1511,4.287,1527,2.66,1542,4.327,1620,4.032,1621,6.205,1623,3.797,1624,4.032,1625,5.26,1626,5.26,1632,5.26,2094,5.541,2095,4.327,2096,4.722,2105,4.722,2106,6.159,2144,6.159,2145,5.321,2146,5.321,2147,5.321,2148,5.321]],["title/modules/KeyModule.html",[143,1.302,160,3.265]],["body/modules/KeyModule.html",[3,0.08,4,0.08,5,0.072,21,0.008,30,0.106,31,0.005,32,0.005,33,0.193,44,0.368,50,0.273,114,1.67,127,1.166,130,1.143,131,0.834,134,1.439,143,2.171,145,2.142,150,2.445,151,2.445,160,5.444,172,2.197,173,4.619,174,2.844,175,1.635,180,4.87,181,3.761,194,3.761,195,4.602,196,3.93,246,3.203,247,3.93,248,1.287,250,3.93,384,5.172,466,2.197,558,3.076,559,2.197,579,4.87,728,3.315,881,3.076,917,3.814,918,3.51,1195,4.619,1324,4.525,1349,3.701,1413,4.87,1470,4.404,1473,4.602,1474,5.172,1478,4.619,1486,6.204,1487,5.55,1533,3.93,1534,4.602,1535,5.55,1588,5.172,1589,4.87,1987,4.619,1988,2.857,2149,4.217,2150,6.77,2151,5.186,2152,6.77,2153,6.01,2154,5.186,2155,5.186,2156,6.057,2157,5.186,2158,6.057,2159,4.602,2160,4.602,2161,7.194,2162,3.93,2163,4.602,2164,4.602,2165,4.602,2166,4.602,2167,4.602,2168,6.825,2169,5.186,2170,5.186]],["title/classes/KeyObj.html",[33,0.17,2171,3.468]],["body/classes/KeyObj.html",[3,0.095,4,0.095,5,0.085,7,4.187,9,0.8,13,0.284,14,1.08,15,5.892,16,2.128,19,0.688,20,0.366,21,0.008,22,3.395,23,2.293,24,4.694,25,4.314,26,4.755,27,3.655,30,0.095,31,0.006,32,0.006,33,0.228,35,1.434,44,0.585,50,0.181,210,4.154,433,3.068,754,3.484,880,2.554,1239,4.694,1442,5.588,1505,5.327,1530,4.154,2094,5.84,2171,5.76,2172,5.447,2173,6.138,2174,6.138,2175,6.138]],["title/classes/KeyResponseDto.html",[33,0.17,393,3.468]],["body/classes/KeyResponseDto.html",[3,0.109,4,0.109,5,0.097,13,0.326,14,1.174,20,0.312,21,0.007,30,0.109,31,0.007,32,0.007,33,0.262,35,1.647,44,0.5,50,0.208,210,4.77,393,6.261,433,3.524,543,4.381,600,3.884,1505,5.655,1530,4.77,2094,5.591,2176,6.255]],["title/classes/KeyService.html",[33,0.17,1478,3.097]],["body/classes/KeyService.html",[0,1.622,3,0.052,4,0.052,5,0.047,7,2.444,9,0.439,13,0.156,16,2.111,17,1.056,19,0.76,20,0.399,21,0.008,22,1.982,23,2.27,24,4.135,30,0.052,31,0.004,32,0.004,33,0.125,35,0.787,44,0.6,50,0.252,99,1.566,100,3.111,127,1.132,130,1.93,131,0.542,134,0.95,174,2.473,175,1.062,252,1.391,289,2.625,320,2.058,409,2.572,410,2.865,447,1.377,449,2.358,465,1.294,466,1.942,499,2.309,509,2.582,607,4.906,684,2.404,727,1.856,741,4.005,751,1.998,754,3.285,794,1.923,829,4.46,881,1.998,900,4.777,908,1.391,917,3.346,934,3.111,962,2.683,996,3.817,1015,5.189,1123,2.876,1189,2.553,1341,1.923,1373,2.28,1423,4.096,1432,3.409,1436,3.817,1478,3.409,1479,4.47,1482,7.27,1483,4.572,1484,6.359,1485,4.47,1486,4.906,1489,4.47,1493,4.096,1494,4.47,1506,5.353,1510,4.47,1511,4.135,1515,4.47,1517,2.989,1518,4.777,1521,4.47,1522,2.404,1527,1.684,1531,4.096,1532,2.553,1533,2.553,1564,2.989,1780,2.739,2171,2.553,2177,2.989,2178,9.326,2179,3.368,2180,3.368,2181,3.368,2182,3.368,2183,3.368,2184,3.368,2185,3.368,2186,3.368,2187,5.037,2188,3.368,2189,4.47,2190,3.368,2191,3.25,2192,6.695,2193,3.368,2194,3.368,2195,3.368,2196,3.368]],["title/classes/LocalFileStorage.html",[33,0.17,2197,3.468]],["body/classes/LocalFileStorage.html",[3,0.076,4,0.076,5,0.068,13,0.227,17,1.031,19,0.744,20,0.366,21,0.008,23,2.24,30,0.076,31,0.005,32,0.005,33,0.182,35,1.145,44,0.586,48,1.477,50,0.233,99,1.529,127,1.477,130,1.747,134,1.495,186,3.026,187,2.906,248,1.559,313,2.932,320,2.008,333,2.154,409,3.176,410,2.072,447,1.34,466,1.577,505,1.545,741,2.609,1112,3.098,1138,3.753,1144,3.713,1289,2.186,1675,4.785,1678,4.98,1679,5.62,1680,4.98,1682,5.345,1687,4.98,1689,3.984,1690,5.019,1691,6.264,1692,6.031,1693,5.655,1695,4.98,1696,3.026,1700,3.316,1704,3.713,2081,4.348,2197,4.98,2198,4.348,2199,4.899,2200,4.899,2201,6.572,2202,4.899,2203,4.899,2204,4.899,2205,4.899,2206,4.899,2207,4.899,2208,4.899,2209,4.899,2210,4.899,2211,4.899,2212,4.899,2213,3.984,2214,6.572,2215,6.572,2216,4.899,2217,6.572,2218,4.899,2219,6.572,2220,4.348,2221,4.899,2222,4.899,2223,4.899,2224,4.899,2225,4.899,2226,4.348,2227,4.899,2228,4.899,2229,4.899,2230,4.899,2231,4.348,2232,5.832,2233,4.899,2234,4.899,2235,4.899]],["title/injectables/LoggerConfigService.html",[717,0.952,2236,3.468]],["body/injectables/LoggerConfigService.html",[0,1.363,3,0.092,4,0.066,5,0.058,9,0.552,13,0.196,14,0.845,17,0.742,19,0.548,20,0.305,21,0.008,28,4.731,30,0.092,31,0.005,32,0.005,33,0.157,44,0.636,50,0.175,92,2.226,99,1.1,105,2.232,114,2.212,127,1.337,130,1.937,131,0.681,134,1.61,174,2.676,175,1.335,182,4.835,224,4.835,225,4.835,226,2.396,227,4.835,236,3.444,237,3.022,238,3.444,239,3.444,241,5.647,242,3.239,248,0.799,249,4.835,251,2.704,253,2.653,254,3.672,260,5.208,320,1.445,447,1.158,448,2.623,509,2.041,674,1.749,717,1.237,718,1.627,727,2.333,954,4.42,1020,2.333,1110,3.209,1111,2.885,1116,3.066,1289,1.889,1391,4.243,1747,4.243,2236,4.506,2237,7.349,2238,6.613,2239,6.613,2240,6.613,2241,6.613,2242,6.613,2243,6.613,2244,6.613,2245,5.946,2246,6.613,2247,6.613,2248,5.946,2249,4.235,2250,5.949,2251,4.235,2252,4.235,2253,7.223,2254,4.235,2255,4.235,2256,4.235,2257,4.235,2258,5.276,2259,4.235,2260,4.235,2261,5.276,2262,5.276,2263,4.024,2264,4.235,2265,5.276,2266,5.276,2267,5.276,2268,5.276,2269,5.276,2270,5.276,2271,5.276,2272,3.758,2273,3.758,2274,5.318,2275,3.758,2276,5.276,2277,5.208,2278,3.758,2279,3.758,2280,3.758,2281,3.758,2282,3.758,2283,3.758,2284,3.758]],["title/interfaces/LoggerConfiguration.html",[0,1.473,2250,3.468]],["body/interfaces/LoggerConfiguration.html",[0,1.584,2,2.46,3,0.102,4,0.076,5,0.068,13,0.228,14,0.936,19,0.393,20,0.367,21,0.008,28,4.926,30,0.102,31,0.005,32,0.005,33,0.183,50,0.194,92,2.032,105,1.848,114,1.584,131,0.791,134,1.668,174,2.444,175,1.552,182,4.002,224,5.361,225,5.361,226,2.657,227,5.361,236,4.002,237,3.512,238,4.002,239,4.002,241,6.273,242,3.743,248,0.928,249,6.732,251,2.924,253,2.196,254,3.039,260,6.273,448,2.248,509,1.689,674,2.033,717,1.371,954,3.91,1020,2.712,1110,3.729,1111,2.388,1116,2.538,1289,2.196,1391,3.512,1747,3.512,2236,3.729,2237,4.002,2238,4.367,2239,4.367,2240,4.367,2241,4.367,2242,4.367,2243,4.367,2244,4.367,2246,4.367,2247,4.367,2250,6.017,2253,7.561,2258,4.367,2261,4.367,2262,4.367,2263,3.331,2265,4.367,2266,4.367,2267,7.346,2268,7.346,2269,7.346,2270,5.85,2271,5.85,2272,4.367,2273,4.367,2274,5.665,2275,4.367,2276,5.85,2277,5.633,2278,4.367,2279,4.367,2280,4.367,2281,4.367,2282,4.367,2283,4.367,2284,4.367]],["title/modules/MetricModule.html",[143,1.302,161,3.265]],["body/modules/MetricModule.html",[3,0.108,4,0.108,5,0.096,21,0.008,30,0.108,31,0.006,32,0.006,33,0.258,50,0.241,131,1.117,143,2.331,145,2.868,161,5.844,172,2.941,251,2.732,252,2.868,386,3.826,561,4.481,562,4.7,935,5.263,1352,3.826,1391,4.955,2285,6.945,2286,6.945,2287,5.263,2288,6.945,2289,6.945,2290,6.945]],["title/classes/NoneTrustPolicy.html",[33,0.17,77,2.613]],["body/classes/NoneTrustPolicy.html",[3,0.083,4,0.083,5,0.074,9,0.7,13,0.249,14,0.992,19,0.557,20,0.378,21,0.008,30,0.14,31,0.006,32,0.006,33,0.335,34,3.989,35,1.256,36,3.187,37,4.507,38,4.133,39,5.273,40,5.736,41,3.463,42,3.467,43,3.834,44,0.381,48,1.57,50,0.206,51,2.017,52,4.393,53,5.634,54,2.862,55,2.724,56,2.447,57,3.293,58,1.529,59,2.686,60,4.314,61,3.571,62,3.467,63,3.467,64,4.507,65,3.467,66,4.507,67,3.636,68,5.562,69,3.293,70,3.989,71,3.467,72,3.636,73,2.533,74,3.319,75,2.862,76,3.467,77,4.432,78,4.507,79,4.794,80,2.771,81,1.73,82,3.636,83,3.989,84,3.467,85,3.636,86,2.771,87,2.065,88,3.636,89,3.187,2291,5.373]],["title/classes/NotificationRequestDto.html",[33,0.17,2292,3.468]],["body/classes/NotificationRequestDto.html",[3,0.104,4,0.104,5,0.092,13,0.309,14,1.138,19,0.639,20,0.355,21,0.008,30,0.104,31,0.006,32,0.006,33,0.298,35,1.563,44,0.568,46,1.602,50,0.236,54,3.563,56,2.703,58,1.904,695,3.967,711,5.936,715,5.936,976,5.085,1071,4.316,2292,6.07,2293,7.608,2294,8.574,2295,6.972,2296,6.689,2297,8.01,2298,6.689]],["title/controllers/OAuthController.html",[123,1.413,2299,3.468]],["body/controllers/OAuthController.html",[3,0.086,4,0.086,5,0.077,9,0.933,11,4.166,13,0.258,17,0.695,20,0.317,21,0.008,30,0.086,31,0.006,32,0.006,33,0.207,44,0.395,46,1.115,50,0.254,81,2.839,99,1.031,123,1.721,125,2,127,1.608,130,1.229,131,0.896,133,1.833,134,1.051,320,1.354,333,2.294,348,3.191,380,3.388,386,4.859,387,4.157,390,5.817,409,2.748,410,2.255,422,4.591,426,3.071,429,5.817,431,3.443,433,2.786,440,5.817,452,3.978,472,4.841,505,1.757,597,5.104,627,2.786,669,2.628,674,2.302,689,4.947,1289,2.487,2299,5.421,2300,4.947,2301,6.53,2302,7.899,2303,5.574,2304,5.946,2305,4.947,2306,7.008,2307,8.333,2308,5.574,2309,5.574,2310,7.153,2311,7.899,2312,3.978,2313,5.346,2314,4.947,2315,5.574,2316,5.574,2317,5.574]],["title/modules/OAuthModule.html",[143,1.302,2318,3.468]],["body/modules/OAuthModule.html",[3,0.096,4,0.096,5,0.085,21,0.008,30,0.118,31,0.006,32,0.006,33,0.23,50,0.262,125,2.74,131,0.995,143,2.358,145,2.554,146,2.915,147,3.091,148,3.091,149,2.835,150,3.905,151,3.905,156,4.822,167,3.817,168,3.091,169,3.091,172,3.234,181,4.207,191,3.82,248,1.167,575,6.21,2299,6.278,2313,6.425,2314,5.488,2318,7.08,2319,5.488,2320,6.184,2321,5.488,2322,5.488,2323,5.029,2324,6.184,2325,5.029,2326,5.488,2327,5.029]],["title/injectables/OAuthService.html",[717,0.952,2313,3.097]],["body/injectables/OAuthService.html",[3,0.059,4,0.059,5,0.053,11,1.901,12,1.447,13,0.176,14,0.782,17,1.01,19,0.745,20,0.359,21,0.008,23,0.942,28,3.78,30,0.059,31,0.004,32,0.004,33,0.141,44,0.599,50,0.222,74,2.348,81,1.773,87,2.116,92,1.04,97,1.174,99,1.498,127,1.455,130,1.786,131,0.611,134,1.339,174,2.582,175,1.199,228,2.272,248,1.481,289,1.567,316,1.792,320,1.968,333,2.281,380,1.461,387,3.052,410,2.237,415,3.726,427,3.374,433,1.901,440,4.478,447,1.506,448,2.705,454,3.929,458,2.713,460,2.881,461,2.881,462,2.573,465,1.461,466,2.084,467,2.573,473,5.123,474,5.919,493,3.374,499,2.524,500,2.453,505,1.736,517,3.401,534,2.713,535,3.092,536,2.713,537,2.573,540,3.726,544,1.427,547,3.034,597,5.375,669,1.792,674,3.111,704,5.951,717,1.145,718,1.461,727,2.095,728,3.52,741,2.025,758,1.961,830,1.845,884,3.092,934,2.348,954,4.467,1114,2.171,1352,2.095,1397,3.553,1457,4.478,1500,2.573,1608,3.092,1817,3.401,1963,3.374,2263,2.573,2274,2.713,2301,2.881,2304,5.064,2312,2.713,2313,3.726,2327,3.092,2328,3.374,2329,5.506,2330,6.474,2331,6.474,2332,5.506,2333,7.097,2334,5.506,2335,6.474,2336,5.506,2337,5.506,2338,3.802,2339,3.802,2340,3.802,2341,3.802,2342,3.802,2343,5.506,2344,3.802,2345,3.802,2346,5.506,2347,3.802,2348,3.802,2349,3.802,2350,4.886,2351,5.506,2352,3.802,2353,3.802,2354,3.374,2355,3.802,2356,2.881,2357,5.506,2358,3.802,2359,6.474,2360,3.802,2361,3.802,2362,5.506,2363,3.802,2364,4.886,2365,3.802,2366,5.506,2367,4.886,2368,3.929,2369,5.506,2370,3.802,2371,4.478,2372,3.374,2373,2.881,2374,3.802,2375,3.802,2376,3.802,2377,3.802,2378,3.802]],["title/classes/Oauth2AuthorizationServerResponse.html",[33,0.17,2379,3.265]],["body/classes/Oauth2AuthorizationServerResponse.html",[3,0.073,4,0.073,5,0.065,9,0.616,12,1.685,13,0.218,14,0.911,19,0.744,20,0.394,21,0.008,23,1.589,28,3.415,29,5.689,30,0.073,31,0.005,32,0.005,33,0.176,35,1.104,44,0.63,111,5.283,118,3.619,242,3.022,378,3.803,379,2.648,380,2.464,385,3.661,386,4.948,392,4.74,399,5.318,400,1.621,407,4.926,518,3.163,519,5.194,521,5.194,547,3.532,600,2.602,632,4.137,640,6.928,647,6.349,776,5.516,779,5.516,781,5.516,782,5.516,784,5.516,786,5.516,811,4.859,1236,5.794,1239,2.917,1252,4.458,1426,5.571,2011,4.191,2141,4.575,2379,4.575,2380,7.969,2381,4.723,2382,4.723,2383,8.418,2384,4.723,2385,4.723,2386,3.841,2387,4.723,2388,4.723,2389,5.214,2390,6.411,2391,4.191]],["title/classes/OfferRequestDto.html",[33,0.17,1927,3.097]],["body/classes/OfferRequestDto.html",[3,0.073,4,0.073,5,0.065,9,1.015,12,1.234,13,0.217,14,1.106,16,2.007,17,1.091,19,0.698,20,0.393,21,0.008,30,0.099,31,0.005,32,0.005,33,0.27,35,1.097,41,3.749,44,0.62,46,1.681,50,0.229,52,3.293,54,2.501,55,2.859,56,2.288,58,1.336,80,4.574,92,2.13,97,1.45,104,3.074,108,2.638,114,2.056,117,2.925,133,1.544,228,2.949,322,2.775,332,2.153,341,3.293,353,2.949,356,2.993,362,4.121,397,4.682,400,2.192,495,2.763,669,2.213,695,2.785,703,4.682,706,4.167,861,4.121,862,4.482,1020,3.519,1104,4.84,1225,4.84,1618,2.501,1812,5.179,1927,4.322,1930,3.03,1936,3.03,1937,4.911,1938,3.819,1950,3.558,1959,5.902,1960,3.819,2392,6.992,2393,6.44,2394,4.696,2395,4.696,2396,4.696,2397,4.167,2398,4.696,2399,4.696,2400,5.667,2401,4.696,2402,4.696,2403,4.84,2404,4.696,2405,4.696,2406,4.696,2407,4.696,2408,4.911,2409,5.667,2410,3.819,2411,4.167,2412,4.167,2413,4.167]],["title/classes/OfferResponse.html",[33,0.17,1930,2.952]],["body/classes/OfferResponse.html",[3,0.085,4,0.085,5,0.076,9,0.921,12,1.438,13,0.253,14,1.112,16,1.821,19,0.712,20,0.367,21,0.008,30,0.109,31,0.006,32,0.006,33,0.291,35,1.279,41,3.493,44,0.555,50,0.244,52,3.645,54,2.914,55,3.006,56,2.228,58,1.557,80,4.267,92,1.933,97,1.69,104,3.316,108,2.26,114,1.762,117,2.849,133,1.799,228,2.747,332,2.508,341,2.821,353,2.747,356,2.716,362,3.53,397,4.56,400,1.878,495,2.817,669,2.579,695,3.245,703,3.53,861,3.53,862,3.38,1020,3.015,1104,4.147,1225,4.147,1618,4.17,1812,3.905,1927,3.703,1930,4.56,1936,3.53,1937,4.783,1938,4.45,1950,4.147,1959,5.356,1960,4.45,2392,6.367,2393,4.856,2400,4.856,2403,4.147,2408,5.299,2409,6.272,2410,4.45,2411,4.856,2412,4.856,2413,4.856,2414,5.472,2415,5.472]],["title/controllers/Oid4vciController.html",[123,1.413,1986,3.468]],["body/controllers/Oid4vciController.html",[3,0.07,4,0.07,5,0.063,9,0.593,12,2.24,13,0.21,17,0.89,20,0.357,21,0.008,30,0.07,31,0.005,32,0.005,33,0.169,44,0.506,46,1.428,48,1.404,50,0.265,81,2.011,99,1.421,113,1.747,120,5.092,123,2.204,125,1.631,127,1.404,130,1.776,131,0.731,132,2.808,133,1.495,134,1.449,248,0.858,252,2.58,276,5.225,320,1.734,345,4.784,353,2.826,355,3.244,356,2.4,386,4.438,409,3.198,410,1.969,415,4.227,426,2.505,445,2.933,449,1.889,495,3.132,627,2.272,632,4.03,654,2.933,657,2.596,658,2.596,659,2.344,660,4.829,661,3.445,662,2.933,663,3.445,669,2.143,672,3.445,674,1.878,839,2.808,841,3.076,892,2.505,921,4.407,922,3.244,1071,2.933,1114,2.596,1262,3.705,1289,2.028,1307,3.858,1638,4.03,1982,2.808,1986,4.734,1990,3.244,1991,3.445,2292,5.823,2416,4.034,2417,4.546,2418,5.08,2419,4.546,2420,4.546,2421,4.546,2422,6.246,2423,4.546,2424,4.546,2425,4.546,2426,4.546,2427,4.546,2428,4.546,2429,4.034,2430,5.08,2431,4.546,2432,2.933,2433,4.546,2434,3.697,2435,4.546,2436,4.546,2437,4.034,2438,4.546,2439,4.034,2440,4.546,2441,4.546,2442,4.546,2443,4.546,2444,4.546,2445,4.546,2446,4.546,2447,4.546,2448,4.546,2449,4.546,2450,3.697,2451,4.546]],["title/controllers/Oid4vpController.html",[123,1.413,2452,3.468]],["body/controllers/Oid4vpController.html",[3,0.077,4,0.077,5,0.069,9,0.651,12,1.75,13,0.231,17,0.831,20,0.295,21,0.008,30,0.077,31,0.005,32,0.005,33,0.186,44,0.472,46,1.332,48,1.497,50,0.264,99,1.385,113,1.92,123,2.313,125,1.793,127,1.497,130,1.887,131,0.804,132,3.086,133,1.643,134,1.256,320,1.618,352,4.652,386,3.669,400,2.286,407,3.433,409,3.197,415,4.506,426,3.669,433,2.498,445,3.224,447,1.366,449,2.416,495,3.1,621,5.7,627,2.498,632,4.296,657,2.853,659,2.576,660,4.506,661,3.786,662,3.224,663,3.786,672,3.786,674,2.064,729,4.751,839,4.113,1088,3.381,1123,3.802,1289,2.229,1307,4.113,1453,3.786,1638,4.832,1822,3.949,1982,3.086,1990,4.752,1991,3.786,2429,4.434,2430,5.415,2432,3.224,2434,4.063,2437,4.434,2439,5.909,2452,5.676,2453,4.434,2454,4.996,2455,5.415,2456,6.659,2457,6.646,2458,4.996,2459,4.996,2460,4.996,2461,5.069,2462,4.434,2463,4.996,2464,4.996,2465,4.434,2466,4.434,2467,4.996,2468,4.996,2469,4.996,2470,4.996]],["title/modules/Oid4vpModule.html",[143,1.302,1981,2.952]],["body/modules/Oid4vpModule.html",[3,0.085,4,0.085,5,0.076,21,0.008,30,0.085,31,0.006,32,0.006,33,0.204,50,0.273,125,2.541,131,0.883,143,2.232,145,2.268,146,2.588,147,2.744,148,2.744,149,2.517,150,3.697,151,3.697,156,4.678,162,4.375,163,5.424,167,3.541,168,2.744,169,2.744,172,3,191,3.391,204,4.161,206,4.161,729,5.335,1981,6.143,1982,5.424,1983,5.209,1984,5.424,1987,4.794,1988,3.025,1990,5.055,1991,4.161,1992,3.918,1993,4.465,2452,5.943,2466,4.872,2471,4.872,2472,5.49,2473,4.872,2474,4.872,2475,5.49,2476,6.959,2477,4.57,2478,4.872,2479,5.49]],["title/injectables/Oid4vpService.html",[717,0.952,729,2.613]],["body/injectables/Oid4vpService.html",[3,0.039,4,0.039,5,0.035,11,2.01,12,1.973,13,0.116,16,0.649,17,0.715,19,0.581,20,0.254,21,0.008,23,0.624,25,1.258,30,0.039,31,0.003,32,0.003,33,0.094,41,2.557,44,0.406,50,0.25,81,2.017,97,0.777,99,1.06,100,2.588,113,0.967,114,0.81,118,2.023,119,1.555,122,1.154,127,0.904,130,1.381,131,0.405,134,0.758,174,2.305,175,0.794,186,1.555,226,2.934,248,1.668,251,0.99,252,2.073,254,3.54,277,2.483,280,1.895,289,2.191,291,2.073,320,1.623,322,2.491,333,2.18,345,1.387,348,3.128,352,3.557,385,1.437,392,1.298,400,1.968,407,3.23,409,1.545,410,1.807,423,2.721,433,2.01,447,1.099,448,2.202,449,2.202,465,1.929,466,1.845,475,2.721,487,2.215,495,2.818,499,1.154,505,2.596,509,0.864,517,3.1,524,2.234,531,3.158,535,2.047,536,1.796,537,1.704,543,1.258,598,1.796,602,2.721,603,3.269,611,1.387,621,4.09,654,2.594,655,1.704,659,1.298,664,3.504,665,1.624,669,1.187,679,1.555,696,1.796,703,1.624,717,0.836,718,0.967,728,2.903,729,2.296,751,1.493,758,1.298,771,2.483,773,4.636,794,1.437,817,2.781,830,1.951,835,1.624,839,2.483,888,1.555,892,1.387,919,4.33,920,2.047,925,4.33,926,2.047,942,2.047,962,2.141,1015,2.296,1016,2.594,1116,1.298,1125,1.796,1161,3.54,1169,3.047,1287,2.869,1322,2.234,1341,1.437,1353,2.234,1380,2.047,1396,2.047,1397,3.239,1405,1.796,1406,1.908,1408,3.047,1431,3.568,1436,4.344,1528,3.269,1529,1.908,1618,1.341,1661,2.234,1669,2.234,1812,2.869,1817,1.555,1930,1.624,1983,3.399,1984,4.33,1990,2.869,1992,1.796,1993,2.047,2021,3.869,2301,1.908,2350,2.234,2354,2.234,2371,2.047,2372,2.234,2373,1.908,2418,5.095,2432,3.239,2457,3.568,2461,5.08,2462,3.568,2465,2.234,2480,2.234,2481,4.02,2482,5.019,2483,4.33,2484,2.517,2485,4.02,2486,2.517,2487,3.568,2488,2.594,2489,3.568,2490,3.269,2491,2.517,2492,4.344,2493,2.517,2494,2.517,2495,4.02,2496,2.047,2497,3.239,2498,2.517,2499,2.517,2500,2.047,2501,2.517,2502,4.748,2503,3.047,2504,3.269,2505,2.234,2506,4.02,2507,6.265,2508,5.732,2509,4.02,2510,5.019,2511,2.517,2512,2.384,2513,4.02,2514,6.265,2515,3.804,2516,2.517,2517,4.02,2518,2.517,2519,3.047,2520,2.517,2521,2.517,2522,2.047,2523,2.234,2524,2.517,2525,2.517,2526,2.517,2527,2.517,2528,6.265,2529,3.047,2530,2.517,2531,2.517,2532,2.517,2533,2.517,2534,2.517,2535,2.517,2536,2.517,2537,2.517,2538,2.517,2539,2.517,2540,4.02,2541,2.517,2542,2.517,2543,2.517,2544,2.517,2545,2.234,2546,2.234,2547,2.517,2548,2.047,2549,2.517,2550,2.517,2551,4.02,2552,2.517,2553,4.02,2554,2.517,2555,2.047,2556,2.047,2557,2.517,2558,2.517,2559,2.517,2560,2.517,2561,4.02,2562,4.02,2563,6.265,2564,2.517,2565,2.517,2566,2.517,2567,4.02,2568,2.517,2569,2.517,2570,4.454,2571,2.234,2572,2.517,2573,2.517,2574,4.02,2575,4.02,2576,3.568,2577,4.02,2578,2.517,2579,2.517,2580,2.517,2581,4.02,2582,2.517,2583,2.517,2584,4.02,2585,2.517,2586,5.019,2587,2.047,2588,2.517,2589,4.02,2590,2.517,2591,2.517,2592,4.02,2593,4.02,2594,2.517,2595,2.517,2596,2.517,2597,2.517,2598,2.517,2599,2.517,2600,2.517,2601,2.517]],["title/classes/ParResponseDto.html",[33,0.17,670,3.468]],["body/classes/ParResponseDto.html",[3,0.103,4,0.103,5,0.092,12,2.419,13,0.307,14,1.132,19,0.636,20,0.353,21,0.008,30,0.103,31,0.006,32,0.006,33,0.247,35,1.551,44,0.565,407,4.11,462,5.782,514,5.688,596,3.464,600,3.656,647,6.482,670,6.04,679,5.277,1398,7.073,1399,7.073,1618,4.72,2386,5.396,2391,5.888,2602,7.582]],["title/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,1.473,763,3.265]],["body/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,1.421,2,1.416,3,0.044,4,0.044,5,0.039,12,1.994,13,0.131,14,0.627,19,0.636,20,0.311,21,0.008,22,1.114,30,0.068,31,0.003,32,0.003,33,0.105,41,1.969,48,1.219,50,0.246,61,1.231,81,0.912,87,1.088,92,1.207,94,2.419,97,0.875,106,3.348,108,2.528,113,2.351,114,0.912,117,1.778,118,2.466,121,2.795,122,2.805,131,0.456,134,1.325,174,1.783,175,0.893,226,2.185,228,0.994,248,1.696,252,2.239,253,1.264,276,1.68,280,3.127,281,4.108,283,2.987,289,2.088,291,3.155,325,1.68,332,1.299,333,2.04,343,2.809,347,4.019,348,1.264,351,2.847,352,1.509,353,1.548,356,2.083,387,1.335,392,1.461,400,2.518,409,2.549,410,0.893,422,1.561,447,0.775,448,2.125,465,2.915,466,2.566,472,2.986,473,1.749,487,1.561,495,2.897,505,2.693,508,1.917,517,1.749,518,2.356,519,2.021,521,2.021,523,2.147,526,2.147,531,2.431,540,1.917,602,2.986,633,2.147,637,3.78,643,2.021,644,3.149,654,3.497,655,1.917,658,1.618,659,1.461,664,2.71,665,1.828,666,1.68,668,2.147,669,1.335,679,3.348,696,4.367,700,2.021,717,0.918,719,2.147,722,2.304,724,2.304,726,2.304,728,2.356,729,3.095,730,3.215,733,2.147,735,5.394,736,2.304,738,4.977,743,2.304,747,2.304,751,3.934,752,5.713,753,4.977,754,2.805,755,2.304,756,4.977,757,2.021,758,1.461,759,2.304,760,2.147,761,2.021,762,2.304,763,3.868,764,5.394,765,3.149,766,2.304,767,2.304,768,3.589,769,2.304,770,3.589,771,2.725,772,4.977,773,3.78,774,2.304,775,2.304,776,2.147,777,2.304,778,2.304,779,2.147,780,1.828,781,2.147,782,2.147,783,2.304,784,2.147,785,2.304,786,2.147,787,2.304,788,2.304,789,3.589,790,2.304,791,2.147,792,2.304,793,2.304,794,4.189,795,2.304,796,2.304,797,2.304,798,2.304,799,2.304,800,4.408,801,4.108,802,2.304,803,4.638,804,2.304,805,2.304,806,2.304,807,2.304,808,2.304,809,4.977,810,3.589,811,5.559,812,2.304,813,3.589,814,3.589,815,3.589,816,3.589,817,2.141,818,3.589,819,2.304,820,2.304,821,2.304,822,2.304,823,2.304,824,2.304,825,2.304,826,3.589,827,2.304,828,2.304,829,1.68,830,1.374,831,2.304,832,2.147,833,1.828,834,2.304,835,1.828,836,2.304,837,2.304,838,2.147,839,1.749,840,3.589,841,1.917,842,2.304,843,4.408,844,2.304,845,2.304,846,2.304,847,2.304,848,2.304,849,2.147,850,3.589,851,2.304,852,3.589,853,2.725,854,2.304,855,4.408,856,2.304,857,2.304,858,2.304,859,2.304,860,2.304,861,1.828,862,2.725,863,2.147,864,1.509,865,2.304,866,1.749,867,2.304,868,2.147,869,2.304,870,4.108,871,2.304,872,2.304,873,2.304,874,4.408,875,2.304,876,2.147,877,2.304,878,2.304,879,2.304]],["title/interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html",[0,1.473,765,3.265]],["body/interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html",[0,1.412,2,1.405,3,0.044,4,0.044,5,0.039,12,1.989,13,0.13,14,0.623,17,0.547,19,0.656,20,0.324,21,0.008,22,1.106,30,0.068,31,0.003,32,0.003,33,0.104,41,1.957,48,1.212,50,0.246,61,1.221,81,0.905,87,1.08,92,1.199,94,2.407,97,0.868,106,3.331,108,2.517,113,2.342,114,0.905,117,1.768,118,2.456,121,2.781,122,2.794,131,0.452,134,1.321,174,1.774,175,0.886,226,2.174,228,0.986,248,1.695,252,2.228,253,1.254,276,1.667,280,3.115,281,4.088,283,2.972,289,2.082,291,3.142,325,1.667,332,1.289,333,2.034,343,2.799,347,3.611,348,1.254,351,2.83,352,1.497,353,1.539,356,2.073,387,1.325,392,1.449,400,2.511,409,2.539,410,0.886,422,1.549,447,0.769,448,2.118,465,2.908,466,2.56,472,2.968,473,1.736,487,1.549,495,2.893,505,2.689,508,1.902,517,1.736,518,2.344,519,2.006,521,2.006,523,2.13,526,2.13,531,2.417,540,1.902,602,2.968,633,2.13,637,3.764,643,2.006,644,3.13,654,3.48,655,1.902,658,1.605,659,1.449,664,2.696,665,1.814,666,1.667,668,2.13,669,1.325,679,3.331,696,4.349,700,2.006,717,0.912,719,2.13,722,2.286,724,2.286,726,2.286,728,2.344,729,3.08,730,3.199,733,2.13,735,5.374,736,2.286,738,4.956,743,2.286,747,2.286,751,3.92,752,4.956,753,4.956,754,2.794,755,2.286,756,5.695,757,2.006,758,1.449,759,2.286,760,2.13,761,2.006,762,2.286,763,3.13,764,5.374,765,3.849,766,4.956,767,4.956,768,3.567,769,2.286,770,3.567,771,2.709,772,4.956,773,3.764,774,2.286,775,2.286,776,2.13,777,2.286,778,2.286,779,2.13,780,1.814,781,2.13,782,2.13,783,2.286,784,2.13,785,2.286,786,2.13,787,2.286,788,2.286,789,3.567,790,2.286,791,2.13,792,2.286,793,2.286,794,4.177,795,2.286,796,2.286,797,2.286,798,2.286,799,2.286,800,4.386,801,4.088,802,2.286,803,4.618,804,2.286,805,2.286,806,2.286,807,2.286,808,2.286,809,4.956,810,3.567,811,5.543,812,2.286,813,3.567,814,3.567,815,3.567,816,3.567,817,2.128,818,3.567,819,2.286,820,2.286,821,2.286,822,2.286,823,2.286,824,2.286,825,2.286,826,3.567,827,2.286,828,2.286,829,1.667,830,1.364,831,2.286,832,2.13,833,1.814,834,2.286,835,1.814,836,2.286,837,2.286,838,2.13,839,1.736,840,3.567,841,1.902,842,2.286,843,4.386,844,2.286,845,2.286,846,2.286,847,2.286,848,2.286,849,2.13,850,3.567,851,2.286,852,3.567,853,2.709,854,2.286,855,4.386,856,2.286,857,2.286,858,2.286,859,2.286,860,2.286,861,1.814,862,2.709,863,2.13,864,1.497,865,2.286,866,1.736,867,2.286,868,2.13,869,2.286,870,4.088,871,2.286,872,2.286,873,2.286,874,4.386,875,2.286,876,2.13,877,2.286,878,2.286,879,2.286]],["title/classes/PolicyCredential.html",[33,0.17,79,2.826]],["body/classes/PolicyCredential.html",[3,0.081,4,0.081,5,0.072,9,0.678,13,0.241,14,0.972,17,1.013,19,0.546,20,0.391,21,0.008,30,0.139,31,0.005,32,0.005,33,0.333,34,3.906,35,1.216,36,3.086,37,4.413,38,3.938,39,5.001,40,5.44,41,3.409,42,3.357,44,0.542,46,1.528,48,1.537,50,0.201,51,1.953,52,4.347,53,5.584,54,2.771,55,2.681,56,2.409,57,3.224,58,1.481,59,2.601,60,4.224,61,3.32,62,3.357,63,3.357,64,4.413,65,3.357,66,4.93,67,3.521,68,5.493,69,3.224,70,3.906,71,3.357,72,3.521,73,2.452,74,3.213,75,2.771,76,3.357,77,3.906,78,3.357,79,5.013,80,3.94,81,2.46,82,5.171,83,3.906,84,3.357,85,3.521,86,2.683,87,1.999,88,3.521,89,3.086,2603,6.84,2604,5.203,2605,5.203,2606,5.203,2607,5.203]],["title/classes/PresentationAttachment.html",[33,0.17,2608,3.468]],["body/classes/PresentationAttachment.html",[3,0.071,4,0.071,5,0.063,7,2.215,9,0.932,12,2.284,13,0.211,14,0.89,16,1.614,17,0.892,19,0.681,20,0.358,21,0.008,25,3.575,26,2.515,27,1.933,30,0.097,31,0.005,32,0.005,33,0.286,35,1.067,44,0.507,46,1.431,48,1.954,50,0.245,51,1.714,52,3.23,55,2.924,56,2.627,57,2.953,58,1.299,69,2.152,92,1.713,104,3.26,105,1.714,108,2.587,117,2.882,118,1.84,133,1.501,228,1.602,252,1.885,289,1.299,316,2.152,332,2.093,343,3.029,400,1.567,514,3.257,544,1.714,596,1.984,609,4.942,610,2.515,611,3.94,613,3.089,624,3.257,656,4.747,669,2.152,690,3.089,835,2.945,841,3.089,853,2.819,866,2.819,880,2.403,886,2.515,887,2.607,888,3.869,889,4.239,891,4.239,892,2.515,895,4.754,897,3.336,902,4.239,904,2.945,905,2.945,907,2.431,908,1.885,909,3.94,1016,4.042,1069,3.257,1070,4.747,1073,4.042,1083,4.754,1085,3.257,1307,2.819,1822,2.707,2488,2.945,2512,2.707,2515,3.459,2519,3.459,2608,5.42,2609,6.259,2610,6.83,2611,5.094,2612,6.346,2613,4.565,2614,4.565,2615,6.83,2616,4.565,2617,4.565,2618,4.239,2619,4.051,2620,4.051,2621,4.051,2622,4.051,2623,5.559,2624,3.257,2625,4.051]],["title/entities/PresentationConfig.html",[880,1.537,2512,2.714]],["body/entities/PresentationConfig.html",[3,0.059,4,0.059,5,0.052,7,2.66,9,1.022,12,2.379,13,0.175,14,0.779,16,1.936,17,1.095,19,0.661,20,0.389,21,0.008,25,1.89,26,3.021,27,2.322,30,0.085,31,0.004,32,0.004,33,0.263,44,0.608,46,1.715,48,1.927,50,0.231,51,1.419,52,2.827,55,2.75,56,2.369,57,2.585,58,1.076,69,1.782,92,1.935,104,2.998,105,2.059,108,3.104,117,2.852,118,2.21,133,1.243,228,1.924,252,1.561,289,1.836,316,1.782,332,1.733,343,3.319,400,1.882,514,3.913,544,2.059,596,2.383,609,5.207,610,3.021,611,2.083,613,3.711,624,3.913,656,4.89,669,1.782,690,2.558,835,3.538,841,3.711,853,3.387,866,2.335,880,2.378,882,1.834,886,3.555,887,3.685,888,4.371,889,4.367,891,4.79,892,3.021,893,3.387,895,5.115,897,3.77,902,4.367,904,3.538,905,3.538,907,2.013,908,1.561,909,3.555,1016,4.849,1021,2.558,1025,3.355,1066,3.074,1069,2.698,1070,4.155,1073,3.538,1083,4.371,1085,2.698,1307,3.387,1815,3.355,1816,3.355,1821,3.355,1822,3.252,1833,3.355,2488,3.538,2512,3.252,2515,4.89,2519,4.89,2608,4.89,2609,7.063,2610,6.955,2611,3.074,2612,3.355,2615,5.726,2618,4.367,2619,3.355,2620,4.866,2621,4.866,2622,4.866,2623,5.726,2624,3.913,2625,3.355,2626,3.78,2627,3.78,2628,3.78,2629,3.78,2630,3.78,2631,3.78,2632,3.78,2633,3.78,2634,3.78,2635,3.78,2636,3.78,2637,3.78]],["title/classes/PresentationConfigCreateDto.html",[33,0.17,2638,3.265]],["body/classes/PresentationConfigCreateDto.html",[3,0.106,4,0.106,5,0.094,14,0.97,21,0.008,30,0.106,31,0.006,32,0.006,33,0.254,35,1.596,38,3.934,50,0.239,114,2.611,133,2.246,248,1.53,289,2.308,343,2.892,601,3.899,690,4.621,886,4.468,887,4.63,962,3.637,1092,5.553,1094,4.873,1101,3.899,2512,4.05,2638,5.786,2639,6.06,2640,8.109,2641,5.175]],["title/classes/PresentationDuringIssuanceConfig.html",[33,0.17,324,3.097]],["body/classes/PresentationDuringIssuanceConfig.html",[3,0.058,4,0.058,5,0.052,9,0.487,12,1.429,13,0.173,14,0.772,17,0.466,19,0.597,20,0.388,21,0.008,30,0.116,31,0.004,32,0.004,33,0.3,35,0.873,44,0.265,46,0.748,50,0.189,51,1.403,55,2.249,56,2.021,57,2.563,58,1.548,61,3.588,69,1.762,73,1.762,86,1.927,87,2.089,92,2.203,94,3.946,99,0.691,101,2.996,103,2.216,104,2.303,105,2.643,108,2.246,113,1.436,114,2.925,117,2.583,118,2.837,122,3.92,134,1.557,248,1.026,251,2.139,280,4.305,284,2.86,307,3.68,308,3.68,309,2.411,310,2.832,311,2.411,312,2.832,313,1.667,314,4.121,316,1.762,317,2.832,318,4.858,321,2.832,322,3.059,323,5.062,324,5.283,325,5.138,326,2.667,327,2.667,328,2.529,330,4.121,331,4.121,332,1.713,333,1.085,334,3.88,335,4.121,336,3.66,337,5.916,338,4.121,339,3.359,340,5.023,341,2.804,342,2.832,343,3.306,344,2.832,345,4.122,346,5.891,347,4.257,348,4.006,349,3.88,350,2.832,351,2.411,352,3.984,353,2.249,354,4.121,355,3.88,356,2.463,357,4.338,358,2.832,359,2.563,360,2.667,361,3.68,362,4.136,363,2.832,364,2.832,365,2.996,366,2.832,367,2.529,368,2.832,369,2.667,370,2.308,2642,3.737]],["title/controllers/PresentationManagementController.html",[123,1.413,2643,3.468]],["body/controllers/PresentationManagementController.html",[3,0.057,4,0.057,5,0.051,9,0.478,12,2.158,13,0.17,16,1.913,17,0.87,19,0.556,20,0.387,21,0.008,25,1.833,30,0.057,31,0.004,32,0.004,33,0.136,41,1.636,44,0.495,46,1.395,50,0.257,87,1.409,92,2.12,97,1.656,99,1.29,101,2.954,108,1.514,114,2.39,119,2.264,123,1.132,125,1.315,127,1.205,130,1.847,131,0.59,133,1.206,134,1.196,242,2.989,248,1.012,252,1.514,284,3.932,287,4.291,291,3.827,320,1.695,333,1.841,341,1.89,343,3.548,347,3.269,359,2.528,379,1.514,380,2.681,397,3.46,400,2.876,409,3.077,426,3.493,428,4.064,430,4.361,431,2.264,443,4.405,447,1.002,448,1.622,449,2.245,452,3.826,455,2.33,505,1.691,553,2.02,627,1.833,657,2.093,658,2.093,669,2.528,674,2.215,682,2.981,703,3.46,729,3.62,905,3.46,962,2.856,1017,3.312,1101,2.093,1112,1.728,1114,3.062,1122,3.312,1137,3.826,1138,3.062,1146,2.778,1272,2.616,1278,2.481,1279,2.481,1280,2.481,1283,3.916,1284,3.629,1285,3.629,1293,2.616,1500,2.481,1618,2.856,1690,2.481,1852,4.805,1925,5.626,1926,3.253,1928,3.253,1929,4.758,1930,4.091,1931,3.253,1935,2.981,1936,4.091,1937,2.481,1940,3.253,1941,3.253,1942,4.758,1943,2.778,1944,6.191,1945,3.253,1946,3.253,1947,5.156,1948,3.253,1949,4.758,1950,4.064,1951,3.253,1968,3.253,1969,3.253,1970,3.253,1971,3.253,1972,3.253,1973,3.253,1974,3.253,2461,3.629,2483,3.916,2496,2.981,2500,2.981,2512,2.174,2638,4.978,2641,2.778,2643,4.064,2644,3.253,2645,5.362,2646,5.626,2647,3.666,2648,3.666,2649,3.666,2650,3.666,2651,5.876,2652,3.666,2653,3.666,2654,3.666,2655,3.666,2656,3.666,2657,3.666,2658,3.666,2659,3.253,2660,3.666,2661,3.666,2662,3.666,2663,3.666,2664,3.666,2665,3.666,2666,3.666,2667,3.666,2668,3.666,2669,3.666,2670,3.666,2671,3.666,2672,3.666,2673,3.666,2674,3.666]],["title/classes/PresentationRequest.html",[33,0.17,2651,3.468]],["body/classes/PresentationRequest.html",[3,0.084,4,0.084,5,0.074,9,0.703,12,2.338,13,0.249,14,0.994,16,1.804,17,0.873,19,0.558,20,0.408,21,0.008,27,2.965,30,0.108,31,0.006,32,0.006,33,0.26,35,1.26,44,0.551,46,1.555,50,0.206,54,2.871,55,2.456,56,2.451,58,1.534,59,3.499,92,2.39,104,2.965,105,2.628,108,3.675,117,3.133,121,3.61,332,2.471,343,3.768,347,2.78,400,3.13,601,3.997,610,3.857,695,3.197,703,5.016,1458,4.995,1618,4.14,1822,4.152,1936,4.517,1937,5.261,1947,4.384,2397,4.784,2403,5.891,2410,5.693,2461,5.261,2651,5.305,2675,6.236,2676,5.391,2677,4.784,2678,5.391,2679,7,2680,5.693]],["title/interfaces/PresentationRequestOptions.html",[0,1.473,2492,3.468]],["body/interfaces/PresentationRequestOptions.html",[0,2.069,2,3.213,3,0.1,4,0.1,5,0.089,9,0.838,12,2.215,13,0.297,14,1.111,17,1.164,19,0.672,20,0.347,21,0.008,27,3.311,30,0.1,31,0.006,32,0.006,50,0.189,92,2.138,108,3.774,117,3.534,332,2.946,400,2.684,495,3.005,601,4.465,1822,4.637,2492,6.644,2675,4.87,2681,5.703,2682,6.938]],["title/modules/PresentationsModule.html",[143,1.302,2477,2.952]],["body/modules/PresentationsModule.html",[3,0.093,4,0.093,5,0.083,21,0.008,30,0.093,31,0.006,32,0.006,33,0.224,50,0.271,125,2.693,131,0.967,143,2.328,145,2.484,146,2.835,147,3.006,148,3.006,149,2.757,150,3.857,151,3.857,167,3.752,168,3.006,169,3.006,172,3.179,558,3.567,559,2.547,1101,3.434,1981,4.842,1987,5.079,1988,3.314,2476,6.66,2477,5.999,2483,5.842,2512,3.567,2641,4.558,2643,6.2,2659,5.337,2683,5.337,2684,5.337,2685,5.337,2686,5.337,2687,6.416,2688,6.014,2689,5.337,2690,6.014,2691,6.014,2692,6.014]],["title/injectables/PresentationsService.html",[717,0.952,2483,2.826]],["body/injectables/PresentationsService.html",[3,0.028,4,0.028,5,0.073,7,2.779,9,0.836,12,0.813,13,0.085,14,0.439,16,2.345,17,0.761,19,0.706,20,0.315,21,0.008,22,1.58,23,0.453,30,0.028,31,0.002,32,0.002,33,0.149,41,0.816,44,0.537,48,1.371,50,0.249,51,0.687,58,0.521,75,1.647,92,2.188,97,1.458,99,1.277,100,1.595,114,1.844,127,0.695,130,1.764,131,0.294,134,1.509,172,2,174,2.006,175,0.577,183,1.13,184,1.181,186,1.13,187,1.834,217,1.387,226,1.246,228,1.409,248,1.566,251,2.4,289,2.362,291,2.435,313,0.816,316,1.458,320,1.678,322,1.344,328,1.238,333,1.862,339,1.13,343,3.487,359,3.431,379,0.756,400,1.062,403,1.387,410,2.343,433,0.915,447,1.291,448,2.29,449,2.49,455,2.052,465,1.543,466,2.149,487,1.704,499,3.06,505,2.021,509,1.062,531,1.704,544,3.035,559,0.775,598,3.37,603,2.515,609,1.834,611,3.532,632,1.995,683,4.658,717,0.643,718,0.703,751,1.085,754,1.841,780,3.935,794,1.766,817,3.733,839,1.91,853,2.916,866,2.916,880,1.924,882,1.5,886,1.008,912,3.37,913,1.045,917,2.863,918,1.238,954,1.085,967,1.238,969,2.093,971,1.306,976,1.834,1014,2.744,1088,4.128,1089,2.207,1101,1.045,1111,2.291,1112,2.226,1114,3.661,1116,2.071,1117,3.37,1122,1.91,1123,1.766,1124,5.689,1125,1.306,1129,2.916,1133,1.306,1136,3.37,1137,1.306,1138,1.045,1140,2.344,1141,2.515,1142,1.488,1143,1.488,1144,1.387,1146,1.387,1148,1.488,1149,1.488,1150,2.515,1152,3.266,1153,1.488,1154,1.488,1155,2.515,1156,1.488,1157,1.488,1158,1.488,1159,1.488,1160,3.266,1161,1.91,1162,1.488,1163,1.488,1164,1.238,1165,1.488,1166,4.292,1167,2.515,1168,1.488,1169,1.387,1170,1.488,1171,1.488,1172,1.488,1173,1.488,1176,2.515,1177,2.515,1178,1.488,1179,1.488,1180,1.488,1181,1.488,1182,1.387,1183,1.488,1184,1.488,1185,1.387,1186,1.488,1187,1.488,1191,1.306,1192,1.488,1193,1.306,1194,1.488,1196,1.13,1197,1.181,1199,1.488,1200,1.488,1201,1.488,1202,1.488,1203,1.488,1205,1.306,1206,1.488,1252,1.766,1287,2.207,1307,1.91,1339,3.564,1341,4.516,1342,1.387,1343,1.387,1346,5.924,1347,1.387,1348,4.352,1373,1.238,1384,2.744,1401,3.564,1440,5.383,1442,1.238,1444,5.919,1518,2.207,1522,1.306,1526,1.488,1527,0.915,1618,3.051,1638,3.047,1747,2.207,1753,1.488,1859,4.658,1882,1.624,1988,1.008,2153,4.764,2191,1.181,2450,2.515,2455,2.515,2483,2.916,2488,1.995,2500,1.488,2512,4.095,2519,1.387,2611,3.266,2624,4.087,2638,3.766,2641,1.387,2646,3.564,2693,1.624,2694,3.093,2695,6.411,2696,6.099,2697,4.017,2698,4.722,2699,3.093,2700,4.017,2701,3.093,2702,4.017,2703,3.093,2704,1.488,2705,4.673,2706,4.722,2707,3.093,2708,3.093,2709,2.744,2710,3.093,2711,3.093,2712,1.83,2713,3.093,2714,3.093,2715,1.83,2716,1.83,2717,3.093,2718,1.83,2719,1.83,2720,4.722,2721,4.722,2722,1.83,2723,1.83,2724,1.83,2725,5.278,2726,4.722,2727,1.83,2728,3.093,2729,3.093,2730,1.83,2731,5.278,2732,1.83,2733,3.093,2734,1.83,2735,4.017,2736,1.83,2737,3.093,2738,1.83,2739,3.093,2740,1.83,2741,3.093,2742,1.387,2743,1.238,2744,1.83,2745,1.83,2746,1.83,2747,3.093,2748,1.83,2749,1.83,2750,1.83,2751,3.093,2752,1.83,2753,1.83,2754,1.83,2755,1.488,2756,1.624,2757,1.83,2758,1.83,2759,1.83,2760,1.83,2761,1.83,2762,1.83,2763,1.83,2764,1.83,2765,1.83,2766,1.83,2767,1.83,2768,1.83,2769,1.83,2770,3.093,2771,1.83,2772,1.83,2773,1.83,2774,1.83,2775,1.83,2776,1.83,2777,1.83,2778,1.83,2779,4.017,2780,1.83,2781,1.83,2782,1.83,2783,1.83,2784,3.093,2785,1.83]],["title/entities/RegistrarEntity.html",[880,1.537,2786,3.265]],["body/entities/RegistrarEntity.html",[3,0.102,4,0.102,5,0.091,13,0.304,14,1.125,19,0.733,20,0.377,21,0.008,30,0.102,31,0.006,32,0.006,33,0.244,44,0.603,46,1.702,48,1.781,50,0.193,289,2.421,880,2.662,882,3.187,893,5.254,897,4.22,907,3.498,908,2.713,909,4.687,2786,5.653,2787,5.829,2788,7.549,2789,7.549,2790,6.569,2791,6.569,2792,6.569]],["title/modules/RegistrarModule.html",[143,1.302,162,2.826]],["body/modules/RegistrarModule.html",[3,0.084,4,0.084,5,0.075,9,0.711,21,0.008,30,0.109,31,0.006,32,0.006,33,0.203,50,0.263,113,2.096,131,0.877,143,2.352,145,3.229,146,2.571,147,2.726,148,2.726,149,2.5,150,3.685,151,3.685,156,4.669,162,5.794,167,3.526,168,2.726,169,2.726,172,3.5,181,3.886,191,3.368,203,4.133,222,4.435,248,1.029,388,5.736,509,2.421,558,3.235,559,2.31,925,5.819,1017,3.368,1111,3.422,1196,3.368,1477,4.773,1589,5.578,2143,3.892,2263,3.691,2356,4.133,2477,5.656,2488,4.551,2786,3.892,2793,4.84,2794,4.84,2795,4.84,2796,5.454,2797,4.435,2798,6.357,2799,5.454,2800,4.84,2801,5.454,2802,4.84,2803,4.84,2804,4.84,2805,6.937,2806,6.937,2807,4.435,2808,4.435,2809,5.454]],["title/injectables/RegistrarService.html",[717,0.952,925,2.826]],["body/injectables/RegistrarService.html",[3,0.034,4,0.034,5,0.03,7,4.075,9,0.593,11,4.232,13,0.101,14,0.508,16,1.499,17,0.78,19,0.696,20,0.306,21,0.008,24,1.347,28,1.161,30,0.034,31,0.003,32,0.004,33,0.081,41,1.597,44,0.555,48,0.805,50,0.222,73,2.947,81,1.152,87,1.749,92,1.591,93,2.712,99,1.525,105,1.344,114,0.702,122,1,127,0.805,130,1.725,131,0.351,134,1.476,174,2.348,175,0.687,187,2.7,226,1.442,248,1.45,251,1.408,252,2.176,253,1.597,276,2.123,280,1.687,289,2.227,291,1.845,311,2.309,313,0.973,320,1.519,333,2.34,340,1.556,359,1.687,379,0.901,380,2.65,387,4.046,392,1.124,399,3.254,400,0.749,409,1.749,410,1.661,413,2.422,420,2.911,422,1.972,447,1.441,448,2.54,449,1.76,465,1.749,466,2.475,469,2.712,473,2.21,474,2.554,505,2.424,509,1.809,544,1.344,559,0.924,579,2.554,596,0.948,632,2.309,656,1.652,669,1.028,717,0.744,718,0.838,727,1.201,728,3.194,742,1.201,758,1.124,832,1.652,833,1.407,853,2.21,885,4.675,888,2.21,892,3.445,908,0.901,912,4.462,913,1.245,917,2.634,925,3.862,928,1.556,946,2.911,954,1.293,1015,2.599,1088,4.231,1111,1.736,1114,1.245,1136,2.554,1137,4.462,1138,3.57,1161,1.347,1189,2.712,1287,2.554,1330,3.76,1352,2.903,1391,3.76,1392,1.773,1397,1.407,1408,2.712,1425,1.773,1442,1.476,1445,1.407,1453,2.712,1477,2.422,1493,1.773,1497,1.935,1566,1.935,1638,2.309,1643,2.911,1655,2.911,1663,4.04,1797,3.176,1859,5.085,1964,1.935,2008,1.935,2079,1.935,2123,4.285,2189,3.176,2191,3.399,2220,1.935,2364,4.04,2450,1.773,2455,2.911,2461,3.566,2483,4.54,2488,2.309,2515,3.993,2545,1.935,2587,1.773,2618,3.566,2624,5.374,2680,4.285,2786,1.556,2788,3.176,2789,5.861,2798,7.1,2800,1.935,2807,1.773,2808,1.773,2810,1.935,2811,3.579,2812,3.176,2813,6.252,2814,7.949,2815,3.579,2816,6.605,2817,4.552,2818,4.552,2819,3.579,2820,3.579,2821,4.285,2822,5.269,2823,4.552,2824,3.579,2825,2.911,2826,3.579,2827,2.181,2828,2.181,2829,6.252,2830,2.181,2831,2.181,2832,3.579,2833,2.181,2834,3.579,2835,7.688,2836,3.579,2837,2.181,2838,2.181,2839,2.181,2840,6.252,2841,2.21,2842,3.579,2843,3.579,2844,2.181,2845,2.181,2846,2.181,2847,3.579,2848,3.579,2849,3.579,2850,2.181,2851,5.269,2852,2.181,2853,1.935,2854,2.181,2855,2.181,2856,3.579,2857,3.579,2858,3.579,2859,3.579,2860,3.579,2861,2.181,2862,2.181,2863,2.911,2864,2.181,2865,2.181,2866,2.181,2867,2.181,2868,2.181,2869,2.181,2870,2.181,2871,2.181,2872,6.252,2873,2.181,2874,2.181,2875,2.181,2876,3.579,2877,3.579,2878,3.579,2879,1.935,2880,2.181,2881,2.181,2882,2.181,2883,2.181,2884,2.181,2885,2.181,2886,2.181,2887,2.181,2888,2.181,2889,2.181,2890,1.773,2891,2.181,2892,2.181,2893,2.181,2894,2.181,2895,2.181,2896,2.181,2897,2.181,2898,5.269,2899,2.181,2900,2.181,2901,2.181,2902,2.181,2903,2.181,2904,2.181,2905,2.181,2906,2.181,2907,2.181,2908,2.181,2909,2.181,2910,4.552,2911,5.269,2912,2.181,2913,3.579,2914,2.181,2915,2.181,2916,3.579,2917,2.181,2918,2.181,2919,2.181,2920,2.181,2921,2.181,2922,1.935,2923,3.579,2924,2.181,2925,2.181,2926,2.181,2927,2.181,2928,2.181,2929,2.181,2930,2.181,2931,3.579,2932,2.181,2933,2.181,2934,2.181,2935,2.181,2936,2.181,2937,2.181]],["title/classes/RegistrationCertificateRequest.html",[33,0.17,2618,3.097]],["body/classes/RegistrationCertificateRequest.html",[3,0.097,4,0.097,5,0.086,7,4.209,9,0.812,12,2.016,13,0.288,14,1.09,16,2.142,17,0.957,19,0.612,20,0.34,21,0.008,27,3.249,30,0.097,31,0.006,32,0.006,33,0.285,35,1.456,44,0.544,46,1.535,50,0.226,56,2.621,58,1.773,104,3.521,391,5.475,409,3.423,601,4.381,610,4.227,624,5.475,695,3.696,707,5.068,2488,4.95,2618,5.871,2624,6.19,2938,7.377,2939,8.313,2940,6.231,2941,6.231]],["title/modules/ResolverModule.html",[143,1.302,2687,3.265]],["body/modules/ResolverModule.html",[3,0.102,4,0.102,5,0.091,21,0.008,30,0.102,31,0.006,32,0.006,33,0.245,50,0.251,131,1.059,143,2.423,145,2.719,146,3.103,147,3.29,148,3.29,149,3.017,150,4.014,151,4.014,167,3.965,168,3.29,169,3.29,172,2.788,1987,5.368,1988,3.626,2687,6.632,2705,6.475,2942,5.841,2943,5.841,2944,5.841,2945,6.582,2946,6.582]],["title/injectables/ResolverService.html",[717,0.952,2705,3.097]],["body/injectables/ResolverService.html",[3,0.075,4,0.075,5,0.067,7,2.352,9,0.632,13,0.224,17,0.814,20,0.289,21,0.008,22,3.105,23,2.102,25,2.424,30,0.075,31,0.005,32,0.005,33,0.18,44,0.463,50,0.25,99,1.207,100,4.47,127,1.467,130,1.439,131,0.78,134,1.392,248,1.489,252,2.003,253,2.912,283,3.596,316,2.286,320,1.586,326,3.46,333,2.142,400,1.664,410,2.058,447,1.326,449,1.974,465,3.032,466,2.652,483,3.943,499,2.992,505,1.529,509,2.24,518,3.686,543,3.262,655,3.281,717,1.357,718,1.863,751,2.876,754,4.04,794,3.727,817,3.166,1189,4.946,1240,3.476,1289,2.163,1348,3.46,1405,4.657,1518,5.631,1527,2.424,1568,5.791,1975,3.46,1988,2.671,2153,6.053,2191,4.211,2226,5.791,2704,3.943,2705,4.417,2709,5.791,2742,4.946,2743,3.281,2922,4.303,2947,4.303,2948,6.526,2949,6.526,2950,4.849,2951,6.526,2952,4.849,2953,5.791,2954,6.526,2955,4.849,2956,4.849,2957,4.303,2958,4.849,2959,4.849,2960,4.849,2961,4.849,2962,4.849,2963,4.849,2964,4.849,2965,4.849,2966,4.849,2967,4.849,2968,4.849,2969,4.849,2970,4.849,2971,6.526,2972,4.849,2973,4.849,2974,4.849,2975,4.849,2976,4.849,2977,4.849,2978,4.849,2979,4.849,2980,4.849,2981,4.849,2982,4.849]],["title/classes/RootOfTrustPolicy.html",[33,0.17,70,2.613]],["body/classes/RootOfTrustPolicy.html",[3,0.082,4,0.082,5,0.073,9,0.689,13,0.245,14,0.982,19,0.614,20,0.385,21,0.008,30,0.139,31,0.005,32,0.005,33,0.334,34,3.947,35,1.235,36,3.135,37,4.459,38,4.112,39,5.253,40,5.714,41,3.781,42,3.411,43,3.772,44,0.49,46,1.058,48,1.554,50,0.203,51,1.985,52,4.37,53,5.609,54,2.816,55,2.702,56,2.428,57,3.258,58,1.505,59,2.643,60,4.269,61,3.346,62,3.411,63,3.411,64,4.969,65,3.411,66,4.459,67,3.578,68,5.527,69,3.258,70,4.397,71,4.459,72,3.578,73,2.492,74,3.265,75,2.816,76,3.411,77,3.947,78,3.411,79,4.756,80,2.726,81,1.702,82,3.578,83,3.947,84,3.411,85,3.578,86,2.726,87,2.031,88,3.578,89,3.135,2983,5.287,2984,5.287,2985,5.287]],["title/classes/S3FileStorage.html",[33,0.17,2986,3.468]],["body/classes/S3FileStorage.html",[3,0.063,4,0.063,5,0.056,12,1.073,13,0.189,17,1.054,19,0.745,20,0.356,21,0.008,22,2.65,23,2.298,30,0.063,31,0.005,32,0.005,33,0.152,35,0.954,44,0.57,48,0.917,50,0.216,99,1.488,118,2.714,127,1.302,130,1.707,134,1.46,248,1.383,251,1.606,313,2.585,320,1.954,322,2.518,333,2.587,334,2.913,409,2.975,410,1.827,447,1.584,448,2.037,466,2.589,475,2.762,487,2.249,496,3.093,503,3.093,505,2.441,596,2.927,741,3.086,742,3.192,1112,2.731,1138,3.308,1240,2.174,1675,4.346,1677,5.977,1678,4.391,1679,5.104,1680,4.391,1682,4.711,1684,5.141,1685,6.506,1687,4.391,1689,3.319,1690,4.558,1691,5.867,1692,5.477,1693,5.231,1695,5.104,1696,4.16,1697,3.319,1700,2.762,1703,3.622,1704,4.391,2141,4.134,2213,3.319,2231,5.141,2232,3.622,2986,4.391,2987,3.622,2988,4.082,2989,6.506,2990,8.599,2991,6.735,2992,4.082,2993,4.806,2994,4.082,2995,4.082,2996,4.082,2997,4.082,2998,4.082,2999,5.794,3000,6.735,3001,6.735,3002,5.794,3003,4.711,3004,3.319,3005,3.622,3006,3.622,3007,4.082,3008,7.742,3009,8.043,3010,4.082,3011,5.794,3012,4.082,3013,4.082,3014,4.082,3015,4.082,3016,4.082,3017,4.082,3018,4.082,3019,4.082,3020,4.082,3021,4.082,3022,4.082,3023,4.082,3024,4.082,3025,4.082,3026,4.082,3027,4.082]],["title/classes/SchemaResponse.html",[33,0.17,1062,3.265]],["body/classes/SchemaResponse.html",[3,0.089,4,0.089,5,0.08,9,1.1,13,0.266,14,1.236,17,1.11,19,0.709,20,0.4,21,0.008,30,0.089,31,0.006,32,0.006,33,0.272,35,1.346,44,0.631,46,1.779,50,0.17,52,4.136,55,2.815,56,2.529,58,1.639,104,3.397,113,3.082,242,3.443,316,3.443,341,2.97,600,3.174,705,5.535,1017,5.376,1020,4.025,1062,5.212,1079,6.846,1185,5.535,1297,6.846,1633,5.112,3028,8.021,3029,5.76,3030,8.021,3031,8.021,3032,5.112,3033,5.76,3034,5.76,3035,5.112,3036,5.76,3037,5.76,3038,5.76,3039,5.76,3040,5.76,3041,5.76]],["title/entities/Session.html",[495,1.505,880,1.537]],["body/entities/Session.html",[3,0.041,4,0.041,5,0.037,9,0.346,12,2.274,13,0.123,14,0.838,16,1.967,17,1.14,19,0.707,20,0.395,21,0.008,26,2.862,27,2.2,30,0.08,31,0.003,32,0.003,33,0.099,44,0.625,46,1.764,48,2.065,50,0.211,59,2.094,81,2.303,92,1.868,105,1.573,108,2.438,115,3.175,117,2.59,118,2.379,119,3.645,120,4.586,122,1.921,133,0.872,138,3.718,139,2.703,228,2.071,284,2.318,289,1.478,322,1.152,332,1.216,341,2.16,343,3.141,345,2.309,347,3.043,348,1.869,353,2.679,357,2.836,400,1.438,407,4.032,455,2.793,470,3.175,495,2.823,499,1.921,539,2.836,544,1.573,609,3.5,610,3.252,613,2.836,624,4.211,637,3.208,644,4.211,669,1.975,679,3.208,687,4.61,803,3.936,817,1.286,861,5.31,862,3.208,880,2.159,882,1.286,886,2.862,887,2.966,888,4.22,889,3.515,891,3.994,892,2.309,893,4.716,895,5.673,902,3.515,904,2.703,905,2.703,907,1.412,908,1.095,909,4.308,976,1.573,993,2.156,1021,4.842,1071,1.711,1083,4.419,1105,5.422,1111,1.286,1125,4.211,1197,2.703,1239,1.638,1262,4.399,1307,2.588,1331,1.892,1341,1.514,1347,2.009,1348,1.892,1618,3.143,1629,3.407,1812,3.707,1813,4.61,1822,2.485,1927,3.515,2295,3.407,2408,2.836,2418,5.227,2461,3.515,2487,3.718,2496,2.156,2523,4.61,2570,4.61,2576,4.61,2841,3.208,3042,2.009,3043,4.224,3044,5.194,3045,2.652,3046,2.652,3047,2.652,3048,4.19,3049,2.652,3050,2.652,3051,4.61,3052,2.652,3053,4.19,3054,2.652,3055,2.652,3056,2.652,3057,2.652,3058,2.652,3059,2.652,3060,2.652,3061,2.652,3062,5.194,3063,2.652,3064,2.652,3065,2.652,3066,2.652,3067,2.652,3068,4.8,3069,2.652,3070,2.652,3071,4.8,3072,2.652,3073,2.652,3074,4.19,3075,4.19,3076,2.652,3077,2.652,3078,4.19,3079,2.652,3080,3.718,3081,2.99,3082,3.718,3083,1.794,3084,2.652,3085,2.652,3086,2.652]],["title/controllers/SessionController.html",[123,1.413,3087,3.468]],["body/controllers/SessionController.html",[3,0.073,4,0.073,5,0.065,9,0.613,13,0.218,16,2.312,17,0.906,19,0.671,20,0.322,21,0.008,27,2.707,30,0.073,31,0.005,32,0.005,33,0.175,44,0.552,46,1.559,50,0.258,81,2.058,97,2.243,99,1.343,123,1.452,125,1.687,127,1.437,130,1.853,131,0.756,133,1.546,134,1.47,139,4.125,284,3.837,320,1.765,365,3.522,380,2.791,409,1.807,410,2.65,426,2.591,431,2.904,443,4.299,447,1.286,448,1.934,449,2.465,455,2.778,495,3.001,553,2.591,563,4.562,564,2.591,627,2.351,657,2.685,664,3.63,674,2.64,923,4.147,924,3.182,969,4.326,1112,2.217,1122,3.948,1123,3.65,1129,4.813,1272,3.356,1278,3.182,1279,3.182,1280,3.182,1283,2.904,1284,3.182,1285,3.182,1293,3.356,1294,3.564,1852,4.844,2124,3.824,3083,4.326,3087,4.844,3088,4.173,3089,7.263,3090,7.793,3091,6.393,3092,6.393,3093,4.702,3094,4.702,3095,4.702,3096,4.702,3097,4.702,3098,4.702,3099,4.702,3100,5.561,3101,4.702,3102,4.702,3103,3.824,3104,3.824,3105,3.824,3106,4.702,3107,4.702,3108,4.702,3109,4.702,3110,4.702,3111,4.702,3112,4.702,3113,4.702,3114,4.702,3115,4.702]],["title/guards/SessionGuard.html",[662,2.952,2287,3.468]],["body/guards/SessionGuard.html",[3,0.093,4,0.093,5,0.083,12,1.972,13,0.278,16,1.934,17,0.936,20,0.333,21,0.008,30,0.093,31,0.006,32,0.006,33,0.224,44,0.532,48,1.352,50,0.221,99,1.388,127,1.687,130,1.326,131,0.967,134,1.134,248,1.543,277,5.053,313,2.683,320,1.988,333,2.376,410,2.366,447,1.644,465,2.884,466,2.416,495,2.899,505,1.896,662,4.842,664,4.495,674,2.484,717,1.561,794,4.286,1289,2.683,2014,7.603,2018,6.66,2019,6.113,2021,3.714,3105,4.891,3116,6.014,3117,5.337,3118,6.014,3119,6.014,3120,6.014,3121,8.181,3122,5.337,3123,6.014,3124,6.014,3125,5.337]],["title/interfaces/SessionLogContext.html",[0,1.473,2497,2.952]],["body/interfaces/SessionLogContext.html",[0,1.826,2,2.835,3,0.088,4,0.088,5,0.078,9,0.739,13,0.262,14,1.027,16,1.864,17,1.081,19,0.745,20,0.399,21,0.008,23,1.792,26,3.985,27,3.552,30,0.088,31,0.006,32,0.006,44,0.402,139,4.666,254,3.502,277,5.18,289,2.387,345,4.773,348,3.865,352,4.614,495,2.997,496,5.481,544,2.989,1105,5.481,1116,3.729,1217,5.481,2021,4.918,2497,4.666,2503,6.355,2504,7.321,2682,6.418,2812,5.032,3126,5.161,3127,5.032,3128,5.032,3129,5.671,3130,7.232,3131,7.232,3132,7.232,3133,7.232]],["title/injectables/SessionLoggerInterceptor.html",[717,0.952,1982,2.826]],["body/injectables/SessionLoggerInterceptor.html",[3,0.054,4,0.054,5,0.048,9,0.884,12,2.266,13,0.16,14,0.729,17,0.764,20,0.337,21,0.008,23,0.857,28,2.735,30,0.054,31,0.004,32,0.004,33,0.129,44,0.481,50,0.231,92,1.404,99,1.254,118,3.254,127,1.154,130,1.495,131,0.556,134,1.279,139,4.375,174,2.761,175,1.09,183,2.135,184,2.231,226,2.469,237,2.467,248,1.659,251,1.36,254,4.188,277,4.475,280,3.807,283,1.905,284,1.543,285,4.557,287,2.34,289,1.462,292,3.068,313,1.543,320,1.489,379,1.428,380,1.328,386,1.905,400,2.103,409,3.314,447,1.854,448,2.496,449,2.297,458,2.467,465,1.328,485,2.135,495,2.655,510,2.811,611,2.829,632,3.313,674,3.136,717,1.068,718,1.328,962,2.735,976,3.634,1088,4.904,1089,4.372,1116,3.736,1117,5.418,1182,2.62,1191,2.467,1205,3.665,1240,3.859,1606,3.068,1783,3.892,1982,4.188,2015,3.068,2016,7.321,2019,4.839,2021,4.689,2022,2.811,2028,3.068,2162,5.139,2274,2.467,2277,3.892,2434,2.811,2489,4.557,2490,2.811,2502,5.139,2503,5.491,2571,5.437,2587,2.811,2743,2.34,2821,4.982,2825,5.515,2863,4.176,2879,4.557,2890,5.515,3081,2.467,3122,3.068,3126,5.17,3134,3.068,3135,5.135,3136,5.135,3137,5.135,3138,5.135,3139,5.135,3140,5.135,3141,6.781,3142,3.457,3143,5.135,3144,5.135,3145,5.135,3146,5.135,3147,7.246,3148,5.135,3149,5.135,3150,3.457,3151,5.135,3152,6.127,3153,5.135,3154,6.781,3155,5.135,3156,3.457,3157,3.457,3158,3.457,3159,4.176,3160,3.457,3161,3.457,3162,3.068,3163,3.457,3164,3.457,3165,3.457,3166,3.457,3167,3.457,3168,3.457,3169,3.457,3170,3.457,3171,3.457,3172,3.457,3173,3.457,3174,6.127,3175,3.457,3176,3.457,3177,6.781,3178,3.457,3179,3.457,3180,3.457,3181,3.457,3182,3.457,3183,3.457,3184,3.457,3185,3.457,3186,3.068,3187,3.068,3188,2.62,3189,3.068,3190,3.457,3191,3.457,3192,3.457,3193,3.457,3194,3.457,3195,3.457,3196,5.135,3197,3.457]],["title/injectables/SessionLoggerService.html",[717,0.952,1983,2.714]],["body/injectables/SessionLoggerService.html",[3,0.042,4,0.042,5,0.038,9,0.557,12,1.387,13,0.126,14,0.607,17,1.002,19,0.651,20,0.367,21,0.008,28,3.847,30,0.042,31,0.003,32,0.003,33,0.101,44,0.587,50,0.176,92,1.168,99,1.531,127,0.96,130,1.77,131,0.437,134,1.515,174,2.59,175,0.857,183,1.678,184,1.753,226,3.526,237,1.939,248,0.996,251,1.069,254,4.264,280,2.82,320,1.951,343,1.809,348,3.433,353,2.423,356,1.641,367,2.891,380,2.028,407,3.085,447,1.636,448,2.263,449,1.292,495,2.911,509,1.467,539,4.049,544,1.02,653,4.684,674,2.686,685,3.791,717,0.888,718,1.044,741,4.194,892,1.497,954,4.671,976,4.437,1088,2.891,1116,3.085,1117,5.338,1191,3.048,1193,3.048,1197,1.753,1205,5.338,1262,3.857,1423,4.865,1783,4.534,1983,3.548,2021,5.608,2162,3.237,2263,2.891,2274,1.939,2277,6.671,2295,5.289,2490,3.474,2497,5.928,2504,5.873,2505,2.412,2821,4.292,2825,3.474,2863,3.474,3051,5.771,3081,1.939,3126,5.98,3186,3.791,3187,7.588,3188,3.237,3189,3.791,3198,2.412,3199,5.983,3200,4.272,3201,4.272,3202,5.278,3203,5.278,3204,4.272,3205,5.278,3206,4.272,3207,5.278,3208,5.278,3209,5.278,3210,4.272,3211,5.983,3212,2.718,3213,4.272,3214,4.272,3215,9.355,3216,2.718,3217,2.718,3218,6.504,3219,2.718,3220,2.718,3221,2.718,3222,4.272,3223,2.718,3224,5.278,3225,2.718,3226,2.718,3227,4.272,3228,2.718,3229,2.718,3230,2.718,3231,2.718,3232,2.718,3233,2.718,3234,2.718,3235,4.272,3236,2.718,3237,2.718,3238,2.718,3239,7.875,3240,7.875,3241,2.718,3242,7.481,3243,2.718,3244,2.718,3245,2.718,3246,2.718,3247,2.718,3248,2.718,3249,2.718,3250,2.718,3251,2.718,3252,2.718,3253,4.272]],["title/modules/SessionModule.html",[143,1.302,163,2.826]],["body/modules/SessionModule.html",[3,0.085,4,0.085,5,0.076,9,0.715,21,0.008,30,0.11,31,0.006,32,0.006,33,0.204,50,0.266,99,1.014,125,2.539,131,0.881,143,2.357,145,2.264,146,2.584,147,2.74,148,2.74,149,2.513,150,3.694,151,3.694,163,5.736,167,3.537,168,2.74,169,2.74,172,2.997,181,3.899,205,4.154,228,2.483,248,1.034,284,3.496,455,3.075,495,1.802,512,4.457,513,4.457,552,5.664,558,3.251,559,2.321,560,6.279,561,3.536,562,3.709,563,3.911,564,3.02,565,4.457,594,4.864,595,4.457,596,2.382,664,4.669,1111,3.802,1477,4.789,2368,3.911,2529,5.938,3083,5.801,3087,5.938,3104,4.457,3105,4.457,3254,4.864,3255,5.481,3256,4.864,3257,4.864,3258,4.457,3259,5.481,3260,4.457,3261,4.864,3262,4.864,3263,4.864,3264,5.481,3265,5.481,3266,4.864,3267,4.864]],["title/injectables/SessionService.html",[664,2.287,717,0.952]],["body/injectables/SessionService.html",[3,0.047,4,0.047,5,0.042,13,0.141,16,2.097,17,0.941,19,0.67,20,0.334,21,0.008,30,0.047,31,0.004,32,0.004,33,0.114,41,3.233,44,0.577,50,0.235,99,1.395,114,1.507,127,1.052,130,1.927,131,0.492,134,1.467,136,4.112,149,2.146,174,2.48,175,0.964,177,2.486,228,1.996,248,1.561,289,2.062,313,1.364,320,1.832,333,2.316,356,2.185,365,2.579,379,1.263,387,1.441,410,2.009,447,1.28,448,1.928,449,2.412,454,2.182,455,3.648,456,2.713,457,4.154,466,1.507,495,2.962,500,4.432,505,2.009,539,3.849,544,1.757,559,1.295,561,1.973,595,2.486,602,5.507,607,2.486,664,2.34,674,1.933,684,3.34,700,4.058,717,0.973,718,1.175,742,2.579,771,1.888,773,2.891,791,3.547,862,2.891,863,2.317,886,1.684,887,1.746,892,1.684,908,1.263,912,5.17,913,1.746,914,2.486,915,5.182,916,2.317,917,3.185,935,2.317,936,4.625,954,1.813,962,3.394,969,3.168,1112,2.206,1122,2.891,1197,3.02,1352,2.579,1397,3.02,1458,3.34,1817,2.891,2123,3.806,2368,3.34,2755,2.486,2756,2.713,2841,2.891,3068,5.586,3071,4.625,3081,2.182,3083,5.103,3104,2.486,3260,3.806,3266,6.096,3267,6.096,3268,2.713,3269,6.373,3270,4.681,3271,6.373,3272,3.057,3273,7.541,3274,5.687,3275,3.057,3276,4.681,3277,4.681,3278,6.373,3279,3.057,3280,4.681,3281,6.373,3282,3.057,3283,4.681,3284,3.057,3285,4.681,3286,3.057,3287,3.057,3288,4.681,3289,6.373,3290,3.057,3291,4.681,3292,3.057,3293,4.681,3294,6.373,3295,4.681,3296,4.681,3297,4.681,3298,4.154,3299,4.681,3300,3.057,3301,4.681,3302,3.057,3303,4.681,3304,4.681,3305,3.057,3306,4.681,3307,3.057,3308,3.057,3309,3.057,3310,3.057,3311,3.057,3312,4.681,3313,4.681,3314,3.057,3315,4.681,3316,3.057,3317,3.057,3318,4.681,3319,3.057,3320,3.057,3321,3.057,3322,3.057,3323,3.057,3324,4.681,3325,4.681,3326,3.057,3327,4.681,3328,4.681,3329,4.681,3330,3.057,3331,4.681,3332,3.057,3333,3.057,3334,5.687,3335,4.681,3336,3.057,3337,3.057,3338,3.057,3339,3.057,3340,3.057,3341,3.057,3342,4.681,3343,3.057,3344,4.681,3345,3.057,3346,3.057]],["title/controllers/StatusListController.html",[123,1.413,3347,3.468]],["body/controllers/StatusListController.html",[3,0.097,4,0.097,5,0.086,13,0.288,17,0.777,19,0.663,20,0.368,21,0.008,30,0.097,31,0.006,32,0.006,33,0.232,44,0.442,46,1.247,48,1.401,50,0.245,99,1.153,100,3.213,123,1.924,125,2.236,127,1.725,130,1.691,131,1.002,132,3.849,133,2.049,134,1.175,289,2.184,320,1.514,431,3.849,445,4.021,449,1.885,455,3.612,564,4.227,627,3.115,923,4.747,924,4.217,1252,4.747,1283,5.134,1289,2.78,3347,5.814,3348,4.95,3349,5.53,3350,6.231,3351,6.808,3352,5.53,3353,6.231,3354,6.231,3355,7.672,3356,6.231,3357,6.231,3358,6.231,3359,6.231,3360,5.53,3361,6.231,3362,6.231]],["title/entities/StatusListEntity.html",[880,1.537,3363,3.265]],["body/entities/StatusListEntity.html",[3,0.08,4,0.08,5,0.071,9,0.674,13,0.239,14,0.968,16,1.755,17,0.85,19,0.646,20,0.373,21,0.008,30,0.08,31,0.005,32,0.005,33,0.192,44,0.596,46,1.683,48,1.82,50,0.201,69,3.211,105,2.557,242,3.211,289,2.168,378,4.04,380,2.617,455,4.083,467,4.609,544,3.04,596,3.755,613,4.609,817,4.082,880,2.72,882,2.508,893,4.207,895,4.207,897,3.628,907,2.753,908,2.135,909,3.753,1021,4.609,1083,4.207,1085,3.689,1164,5.694,1252,5.318,1341,2.952,1345,3.918,3188,6.376,3348,5.574,3363,4.86,3364,7.026,3365,4.588,3366,7.466,3367,7.617,3368,5.17,3369,5.17,3370,5.17,3371,5.17,3372,5.17,3373,6.044,3374,5.17,3375,6.811]],["title/modules/StatusListModule.html",[143,1.302,552,2.952]],["body/modules/StatusListModule.html",[3,0.094,4,0.094,5,0.084,21,0.008,30,0.094,31,0.006,32,0.006,33,0.225,50,0.269,125,2.705,131,0.974,143,2.336,145,2.502,146,2.856,147,3.029,148,3.029,149,2.777,150,3.87,151,3.87,156,4.798,167,3.769,168,3.029,169,3.029,172,3.193,191,3.742,455,3.277,552,6.007,558,3.593,559,2.566,564,3.338,923,5.407,924,4.1,3347,6.221,3348,3.909,3363,5.38,3376,5.376,3377,5.376,3378,5.376,3379,6.059,3380,6.059,3381,6.691,3382,5.376,3383,4.323,3384,5.376,3385,6.059,3386,6.059]],["title/injectables/StatusListService.html",[717,0.952,923,2.613]],["body/injectables/StatusListService.html",[3,0.044,4,0.044,5,0.11,9,0.368,13,0.25,16,1.574,17,0.914,19,0.681,20,0.325,21,0.008,30,0.044,31,0.003,32,0.003,33,0.105,44,0.519,50,0.243,75,1.503,92,1.479,97,2.404,99,1.355,100,2.269,127,0.989,130,1.671,131,0.454,134,1.02,174,2.307,175,0.89,186,3.341,187,1.674,242,2.075,248,1.638,252,1.166,277,2.718,289,2.452,311,2.84,320,1.78,322,1.227,333,2.479,353,1.898,410,1.387,447,1.203,448,2.216,449,1.848,455,3.988,465,1.691,466,2.507,495,2.56,499,2.017,500,4.273,505,2.557,509,1.511,517,3.341,531,1.555,534,3.14,537,1.91,541,4.8,544,2.293,547,1.555,559,1.196,564,4.175,596,3.049,659,1.456,717,0.915,718,1.085,727,1.555,728,3.184,742,1.555,751,2.61,758,1.456,771,1.743,773,2.718,794,1.612,817,3.404,830,1.37,904,1.821,908,1.166,913,1.612,917,3.662,923,2.513,934,2.718,962,3.736,969,4.134,1098,3.579,1114,1.612,1138,2.513,1140,4.629,1161,2.718,1164,3.66,1252,5.192,1283,2.718,1331,4.725,1341,2.513,1344,2.505,1345,2.139,1373,1.91,1392,6.163,1397,3.49,1405,2.014,1406,2.139,1492,3.579,1501,3.579,1518,3.14,1522,2.014,1618,1.503,1643,3.579,1655,3.579,1704,3.335,1817,1.743,2124,2.296,2371,2.296,2373,2.139,2548,2.296,2755,3.579,2890,3.579,3100,4.359,3188,5.743,3348,4.889,3351,3.905,3352,3.905,3363,4.359,3366,2.505,3373,4.8,3381,3.905,3382,2.505,3383,2.014,3384,2.505,3387,2.505,3388,5.409,3389,4.401,3390,4.401,3391,4.401,3392,5.409,3393,5.409,3394,2.823,3395,2.823,3396,2.823,3397,4.401,3398,4.401,3399,2.823,3400,2.823,3401,2.823,3402,4.401,3403,6.108,3404,7.015,3405,4.401,3406,4.401,3407,4.401,3408,2.823,3409,4.401,3410,2.823,3411,4.401,3412,2.823,3413,4.401,3414,2.823,3415,2.823,3416,2.823,3417,2.823,3418,2.823,3419,2.823,3420,2.823,3421,2.823,3422,2.823,3423,2.823,3424,2.823,3425,2.823,3426,2.823,3427,4.401,3428,2.823,3429,2.823,3430,6.108,3431,4.401,3432,4.401,3433,2.823,3434,4.401,3435,2.823,3436,2.823,3437,2.823,3438,4.401,3439,2.823,3440,6.622,3441,2.823,3442,2.823,3443,2.823,3444,2.823,3445,2.823,3446,2.823,3447,2.823,3448,4.401,3449,4.401,3450,2.823,3451,2.823,3452,2.823]],["title/entities/StatusMapping.html",[880,1.537,3383,3.265]],["body/entities/StatusMapping.html",[3,0.093,4,0.093,5,0.083,13,0.396,14,1.062,19,0.716,20,0.408,21,0.008,30,0.093,31,0.006,32,0.006,33,0.222,44,0.606,46,1.71,48,2.07,50,0.176,277,5.04,596,3.25,880,2.513,882,2.902,897,4.905,907,4.688,908,2.47,1252,4.66,1331,5.824,3348,5.68,3364,7.158,3383,5.337,3453,5.308,3454,8.551,3455,8.979,3456,5.981,3457,7.48,3458,5.981,3459,5.981,3460,5.981]],["title/classes/StatusUpdateDto.html",[33,0.17,3100,3.265]],["body/classes/StatusUpdateDto.html",[3,0.091,4,0.091,5,0.081,13,0.272,14,1.05,16,2.189,17,1.06,18,7.539,19,0.678,20,0.359,21,0.008,30,0.091,31,0.006,32,0.006,33,0.275,35,1.373,44,0.574,46,1.619,50,0.173,55,2.595,56,2.678,58,1.672,81,2.381,92,2.022,103,3.484,121,3.813,277,4.999,284,3.299,353,2.981,455,3.805,495,2.794,596,3.214,853,4.567,1073,4.771,1161,4.567,1331,5.776,1817,5.247,2144,5.213,3100,5.277,3103,6.908,3348,5.481,3461,4.777,3462,5.874,3463,5.874,3464,5.874,3465,5.874,3466,5.874]],["title/modules/StorageModule.html",[143,1.302,164,3.097]],["body/modules/StorageModule.html",[3,0.079,4,0.079,5,0.071,20,0.227,21,0.008,30,0.105,31,0.005,32,0.005,33,0.19,44,0.363,48,1.151,50,0.263,81,1.649,127,1.151,130,1.129,131,0.824,134,1.43,143,2.158,145,2.115,150,2.414,151,2.414,164,5.131,172,2.169,173,3.466,174,2.493,175,1.615,180,4.83,181,3.729,207,3.881,214,4.545,232,4.165,243,4.545,246,3.163,247,3.881,248,1.277,384,5.13,386,2.822,466,2.441,1588,3.881,1589,5.986,1675,4.367,1708,5.41,1709,5.41,1711,3.881,2150,6.728,2152,6.728,2167,4.545,2197,5.13,2213,4.165,2986,5.13,2989,6.007,2993,6.504,3003,4.165,3004,4.165,3467,3.881,3468,5.121,3469,5.121,3470,5.121,3471,5.121,3472,6.166,3473,4.545,3474,4.545,3475,4.545,3476,4.545,3477,7.799,3478,4.545,3479,4.545,3480,4.545,3481,6.007,3482,6.007,3483,4.545,3484,6.007,3485,4.545,3486,4.545,3487,5.121,3488,5.121,3489,5.121,3490,5.121,3491,5.121,3492,5.121,3493,7.582,3494,5.121,3495,5.121,3496,5.121,3497,5.121,3498,5.121]],["title/interfaces/TokenPayload.html",[0,1.473,443,2.287]],["body/interfaces/TokenPayload.html",[0,2.098,2,3.257,3,0.101,4,0.101,5,0.09,9,0.85,11,3.257,12,2.072,13,0.301,14,1.12,19,0.676,20,0.289,21,0.008,30,0.122,31,0.006,32,0.006,41,3.518,50,0.192,81,2.098,131,1.048,134,1.229,248,1.487,284,3.518,341,3.36,380,3.385,387,3.072,423,4.41,443,4.238,499,2.987,500,5.684,611,3.59,742,3.59,833,4.204,2019,5.626,3499,5.299,3500,6.997,3501,5.783,3502,5.783,3503,5.783]],["title/classes/TokenRequestDto.html",[33,0.17,2304,3.265]],["body/classes/TokenRequestDto.html",[3,0.089,4,0.089,5,0.079,9,1.098,11,3.643,12,1.915,13,0.266,14,1.035,16,1.479,17,0.909,19,0.709,20,0.385,21,0.008,27,3.087,30,0.089,31,0.006,32,0.006,33,0.271,35,1.341,44,0.597,46,1.685,50,0.215,56,2.656,58,1.634,59,3.643,103,3.405,113,2.8,133,1.888,251,2.867,322,3.167,387,4.189,397,5.895,415,3.885,423,5.42,424,6.512,451,7.106,453,7.106,472,4.932,485,4.946,695,3.405,704,6.589,707,4.668,713,5.094,2304,5.201,2408,5.884,2677,5.094,3504,7.071,3505,7.476,3506,7.288,3507,5.74,3508,5.74,3509,5.74]],["title/classes/TokenResponse.html",[33,0.17,401,3.468]],["body/classes/TokenResponse.html",[3,0.104,4,0.104,5,0.093,13,0.311,14,1.142,17,1.003,19,0.71,20,0.381,21,0.007,30,0.104,31,0.006,32,0.006,33,0.25,35,1.573,44,0.631,401,6.092,458,6.134,460,6.514,461,5.101,462,5.818,510,6.991,596,3.494,600,3.708,2176,5.973,2386,5.473,3510,8.076,3511,6.731,3512,6.731]],["title/classes/TokenResponseDto.html",[33,0.17,2312,3.265]],["body/classes/TokenResponseDto.html",[3,0.091,4,0.091,5,0.081,9,1.107,11,4.468,13,0.272,14,1.05,17,0.923,19,0.678,20,0.388,21,0.008,30,0.091,31,0.006,32,0.006,33,0.218,35,1.373,44,0.602,46,1.699,50,0.173,113,2.842,133,1.932,251,2.909,322,3.692,380,3.526,397,5.921,415,3.975,458,5.776,460,6.134,461,5.604,462,5.478,514,5.277,596,3.214,600,3.236,704,6.635,1016,4.771,2312,5.277,2367,5.213,2408,5.925,3032,5.213,3035,5.213,3504,7.12,3505,7.539,3513,5.874,3514,5.874,3515,5.874]],["title/classes/UpdateKeyDto.html",[33,0.17,2119,3.468]],["body/classes/UpdateKeyDto.html",[3,0.109,4,0.109,5,0.097,21,0.008,23,1.739,30,0.109,31,0.007,32,0.007,33,0.261,35,1.64,38,3.998,50,0.243,133,2.308,248,1.555,1094,5.009,1443,5.317,1511,4.335,1532,5.319,2094,4.75,2119,6.245,3461,5.708,3516,8.241]],["title/classes/VCT.html",[33,0.17,1019,3.097]],["body/classes/VCT.html",[3,0.086,4,0.086,5,0.076,9,1.026,13,0.256,14,1.012,17,1.177,19,0.753,20,0.397,21,0.008,30,0.086,31,0.006,32,0.006,33,0.265,35,1.294,38,3.82,44,0.635,46,1.791,50,0.21,55,3.142,56,2.823,58,1.576,99,1.456,113,2.127,133,1.821,251,2.178,309,3.572,329,4.913,705,6.671,906,6.32,1019,5.82,1077,6.873,1297,6.873,2408,4.82,3517,7.874,3518,7.874,3519,7.874,3520,5.537,3521,5.537,3522,5.537,3523,5.537,3524,5.537,3525,5.537,3526,5.537,3527,5.537]],["title/modules/VerifierModule.html",[143,1.302,165,3.265]],["body/modules/VerifierModule.html",[3,0.094,4,0.094,5,0.084,21,0.008,30,0.094,31,0.006,32,0.006,33,0.226,50,0.269,131,0.976,143,2.338,145,2.507,146,2.861,147,3.034,148,3.034,149,2.783,150,2.861,151,2.861,156,4.8,162,5.566,163,5.566,165,6.808,167,3.773,168,3.034,169,3.034,172,3.197,191,3.749,204,4.6,206,4.6,1981,5.815,1987,5.108,1988,3.344,2477,5.815,2478,5.386,2689,5.386,3528,6.07,3529,6.07,3530,6.07]],["title/classes/WebHookAuthConfig.html",[33,0.17,109,3.265]],["body/classes/WebHookAuthConfig.html",[3,0.081,4,0.081,5,0.072,9,0.683,13,0.242,14,0.976,17,0.653,19,0.611,20,0.415,21,0.008,23,2.093,30,0.126,31,0.005,32,0.005,33,0.314,35,1.224,44,0.487,46,1.374,50,0.202,51,1.966,55,2.41,56,2.565,58,1.49,59,2.617,90,5.806,91,3.736,92,2.416,93,6.403,94,4.083,95,5.187,96,4.258,97,2.121,99,0.968,100,3.541,101,3.784,103,3.105,104,3.246,105,3.172,106,4.734,107,6.029,108,3.581,109,5.806,110,5.585,111,4.648,112,4.258,113,2.639,114,2.468,115,3.968,116,3.736,117,2.11,118,2.768,119,3.234,120,3.736,121,2.7,122,2.4,3531,5.236,3532,5.236,3533,5.236,3534,5.236]],["title/classes/WebhookConfig.html",[33,0.17,117,1.844]],["body/classes/WebhookConfig.html",[3,0.081,4,0.081,5,0.072,9,0.681,13,0.242,14,0.975,17,1.014,19,0.649,20,0.405,21,0.008,23,2.015,30,0.126,31,0.005,32,0.005,33,0.314,35,1.222,44,0.486,46,1.372,50,0.202,51,1.963,55,2.408,56,2.662,58,1.488,59,2.613,90,5.465,91,3.73,92,2.415,93,6.162,94,4.044,95,5.503,96,4.251,97,2.119,99,0.967,100,3.538,101,3.78,103,3.1,104,3.244,105,3.254,106,4.237,107,5.465,108,3.58,109,5.802,110,4.251,111,3.538,112,4.251,113,2.009,114,1.683,115,5.199,116,4.896,117,2.765,118,3.403,119,4.237,120,4.896,121,3.538,122,3.511,3535,5.228,3536,5.228,3537,5.228]],["title/classes/WebhookResponse.html",[33,0.17,3538,3.468]],["body/classes/WebhookResponse.html",[3,0.061,4,0.061,5,0.055,9,0.515,17,0.493,19,0.452,21,0.008,23,1.403,30,0.088,31,0.004,32,0.004,33,0.211,35,0.924,44,0.28,48,0.889,50,0.241,61,2.461,81,2.562,95,2.676,101,3.12,107,4.041,108,3.763,121,2.039,131,0.636,134,1.248,226,2.282,248,1.248,252,2.339,283,3.981,333,1.922,343,2.399,356,2.176,400,2.732,447,1.549,448,2.002,449,2.619,465,2.176,466,1.823,495,2.848,505,2.086,509,1.357,611,2.178,659,2.039,664,3.612,665,2.551,717,1.178,771,3.498,967,5.386,971,4.041,975,4.292,1020,3.981,1114,4.126,1116,2.039,1262,4.972,1638,2.551,1822,3.359,1983,3.359,1984,3.498,1988,2.178,1992,2.821,2021,2.442,2153,5.156,2389,3.215,2432,3.654,2497,4.27,2502,6.467,2522,4.606,2555,5.381,2556,4.606,2742,5.015,2743,2.676,2841,2.442,3043,4.606,3128,3.508,3538,5.476,3539,3.215,3540,3.954,3541,5.026,3542,5.872,3543,3.508,3544,3.508,3545,3.508,3546,3.508,3547,3.508,3548,3.508,3549,3.508,3550,7.062,3551,6.412,3552,6.412,3553,5.026,3554,3.508,3555,5.026,3556,5.026,3557,5.026,3558,5.026,3559,7.272,3560,5.026,3561,5.026,3562,5.026,3563,5.026,3564,5.026,3565,5.026,3566,5.026,3567,5.026,3568,3.508,3569,3.508,3570,3.508,3571,3.508,3572,3.508,3573,3.508,3574,5.026,3575,3.508]],["title/injectables/WebhookService.html",[717,0.952,1984,2.826]],["body/injectables/WebhookService.html",[3,0.055,4,0.055,5,0.049,9,0.686,13,0.165,17,0.916,19,0.285,20,0.277,21,0.008,23,0.886,30,0.082,31,0.004,32,0.004,33,0.196,44,0.443,48,1.183,50,0.234,61,2.287,81,2.625,95,3.562,97,1.104,99,1.156,101,2.9,107,3.756,108,3.749,121,2.714,127,1.183,130,1.16,131,0.575,134,1.3,226,2.121,228,1.254,248,1.178,252,2.174,283,3.797,320,1.518,333,2.133,343,2.229,356,2.022,400,2.728,447,1.884,448,1.89,449,2.56,465,2.022,466,1.694,495,2.969,505,1.97,509,1.807,611,2.9,659,1.843,664,4.075,665,2.306,717,1.095,718,1.373,741,1.904,771,3.251,967,5.2,971,3.756,975,5.223,1020,3.442,1114,3.935,1116,1.843,1262,5.202,1638,3.396,1822,2.12,1983,4.087,1984,4.256,1988,1.969,1992,2.55,2021,2.207,2153,5.67,2389,4.28,2432,4.447,2497,5.126,2502,6.646,2522,4.28,2555,5.081,2556,4.28,2704,2.907,2742,4.734,2743,2.419,2841,3.251,3043,4.28,3538,4.734,3539,2.907,3541,4.671,3542,6.519,3543,4.671,3544,5.544,3545,3.172,3546,3.172,3547,3.172,3548,3.172,3549,3.172,3550,6.819,3551,6.116,3552,6.116,3553,4.671,3554,3.172,3555,4.671,3556,4.671,3557,4.671,3558,4.671,3559,7.051,3560,4.671,3561,4.671,3562,4.671,3563,4.671,3564,4.671,3565,4.671,3566,4.671,3567,4.671,3568,5.544,3569,3.172,3570,3.172,3571,3.172,3572,3.172,3573,3.172,3574,4.671,3575,3.172,3576,3.574,3577,3.574,3578,3.574,3579,3.574,3580,3.574]],["title/controllers/WellKnownController.html",[123,1.413,171,3.468]],["body/controllers/WellKnownController.html",[3,0.068,4,0.068,5,0.06,9,0.911,13,0.202,17,0.872,20,0.352,21,0.008,23,1.506,30,0.068,31,0.005,32,0.005,33,0.162,44,0.495,46,1.398,48,1.366,50,0.26,99,1.397,100,2.253,113,1.679,123,2.158,125,1.568,127,1.366,130,1.95,131,0.703,132,2.699,133,1.437,134,1.318,166,5.113,171,5.296,210,4.73,211,5.725,213,3.878,242,2.865,289,1.244,320,1.698,353,2.133,378,3.605,379,2.887,385,3.471,392,4.348,407,4.348,410,1.916,429,4.943,433,3.038,445,2.82,447,1.195,449,2.114,452,3.118,495,3.051,518,3.737,544,2.282,627,2.184,629,7.631,630,4.606,657,2.495,659,2.253,660,4.73,661,3.312,662,2.82,663,3.312,672,3.312,674,1.805,684,3.118,720,6.202,733,3.312,1123,3.471,1129,3.754,1236,4.875,1240,4.491,1289,1.95,1634,2.957,1696,5.208,1935,3.554,1966,3.878,1975,4.987,2305,3.878,2379,4.987,2430,4.943,3360,3.878,3581,3.878,3582,4.37,3583,6.704,3584,5.394,3585,4.37,3586,4.37,3587,4.37,3588,4.37,3589,6.078,3590,4.37,3591,4.37,3592,4.37,3593,6.144,3594,4.37,3595,4.37,3596,4.37,3597,5.394,3598,4.37,3599,3.878,3600,3.878,3601,3.878,3602,4.37,3603,4.37,3604,4.37,3605,4.37,3606,3.878,3607,4.37,3608,4.37,3609,4.37,3610,4.37,3611,4.37,3612,4.37,3613,4.37,3614,4.37]],["title/injectables/WellKnownService.html",[166,3.097,717,0.952]],["body/injectables/WellKnownService.html",[3,0.058,4,0.058,5,0.052,9,0.488,11,2.723,12,0.984,13,0.173,17,0.879,19,0.512,20,0.379,21,0.008,23,1.59,30,0.058,31,0.004,32,0.004,33,0.139,44,0.5,50,0.252,97,1.682,99,1.303,127,1.224,130,1.886,131,0.602,134,1.329,166,4.769,193,3.046,194,2.064,210,3.686,211,5.674,242,3.683,248,1.027,270,3.324,287,3.686,289,1.55,320,1.712,327,3.887,333,1.864,353,1.911,378,4.18,379,2.25,380,2.093,385,3.11,391,2.673,392,3.31,407,3.31,410,1.717,422,3.883,433,2.723,447,1.927,448,2.132,449,2.265,495,2.813,499,2.497,500,2.417,505,2.024,509,1.87,518,3.504,534,2.673,536,2.673,537,2.535,543,1.872,544,2.933,610,3.001,630,4.128,643,3.887,659,1.931,666,4.9,674,2.911,717,1.133,718,1.439,728,3.59,742,3.001,758,1.931,773,3.964,817,3.114,830,1.817,921,4.98,922,2.673,1015,3.11,1016,2.417,1045,3.324,1123,4.461,1129,3.364,1145,3.046,1235,4.128,1236,4.831,1240,4.75,1324,4.782,1349,2.673,1352,2.064,1356,3.324,1380,3.046,1396,3.046,1397,2.417,1405,2.673,1406,2.839,1634,2.535,1696,4.624,1817,2.313,1943,4.128,2073,4.834,2301,4.128,2306,4.43,2368,3.887,2373,2.839,2379,5.029,2546,3.324,2548,3.046,2680,4.43,2953,4.834,2957,3.324,3583,4.834,3584,4.834,3593,5.731,3597,3.324,3599,3.324,3600,3.324,3601,3.324,3606,3.324,3615,3.324,3616,5.447,3617,5.447,3618,5.447,3619,3.746,3620,3.746,3621,5.447,3622,3.746,3623,5.447,3624,3.746,3625,5.447,3626,5.447,3627,5.447,3628,5.731,3629,6.419,3630,4.834,3631,5.447,3632,3.746,3633,3.746,3634,3.746,3635,3.746,3636,3.746,3637,3.746,3638,5.447,3639,3.746,3640,3.746,3641,3.746,3642,3.746,3643,3.746]],["title/coverage.html",[3644,5.568]],["body/coverage.html",[0,2.599,1,1.785,5,0.03,6,1.948,7,1.065,8,1.948,12,0.577,20,0.362,21,0.008,22,0.864,23,0.544,27,0.93,31,0.003,32,0.003,33,0.345,34,1.253,36,3.929,39,1.302,70,1.253,77,1.253,79,1.356,83,1.253,89,1.302,90,1.566,91,3.775,106,1.356,109,1.566,114,1.159,117,0.885,123,2.522,124,1.664,126,1.948,149,1.006,166,1.486,171,1.664,189,1.664,192,1.664,194,3.65,196,1.664,200,1.664,203,1.664,205,1.664,207,1.664,211,2.727,307,1.486,308,3.951,309,4.047,323,1.486,324,1.486,336,1.253,356,0.843,370,1.356,371,1.664,372,1.948,380,0.843,387,1.035,392,1.132,393,1.664,396,1.664,401,1.664,407,1.132,425,3.193,434,1.356,441,1.416,443,1.097,466,0.707,495,0.722,518,0.954,553,1.209,554,1.566,555,4.302,564,1.983,568,1.486,571,1.566,573,1.785,574,1.785,598,1.566,599,1.948,600,4.059,621,1.566,622,1.948,625,1.664,626,1.948,637,1.356,660,1.486,662,1.416,664,1.097,666,1.302,670,1.664,694,1.948,695,3.929,717,1.818,719,3.466,728,0.954,729,1.253,730,1.302,761,1.566,763,1.566,765,1.566,829,1.302,838,7.105,864,1.169,880,2.588,881,1.302,883,2.927,900,1.566,910,2.927,919,1.356,921,1.356,923,1.253,925,1.356,987,1.948,988,1.948,991,2.927,995,1.785,1010,1.253,1011,1.948,1019,1.486,1027,1.416,1062,1.566,1069,3.264,1077,1.664,1079,1.664,1090,1.566,1091,1.948,1092,2.927,1096,1.664,1097,2.927,1102,1.486,1107,1.416,1108,1.948,1109,1.566,1110,3.466,1116,1.132,1161,5.835,1212,1.948,1213,1.948,1233,1.948,1235,1.664,1236,4.047,1237,1.948,1238,2.927,1262,1.302,1265,1.664,1266,1.948,1288,1.416,1296,1.664,1297,3.466,1298,1.785,1299,1.948,1317,1.948,1324,1.302,1417,4.679,1418,1.785,1421,1.486,1422,4.302,1432,1.486,1440,1.664,1446,2.927,1454,1.785,1460,1.664,1466,1.664,1470,1.416,1474,1.664,1475,1.948,1476,3.193,1478,1.486,1505,1.416,1511,1.356,1530,2.435,1579,1.785,1581,1.785,1611,1.664,1612,2.927,1614,1.785,1634,1.486,1637,1.948,1675,1.416,1676,4.009,1693,1.566,1696,1.356,1700,1.486,1709,1.566,1711,1.664,1712,1.948,1750,1.664,1751,2.927,1791,1.664,1792,1.948,1811,1.948,1837,1.664,1838,1.948,1856,1.948,1921,1.664,1922,1.948,1923,1.785,1924,1.948,1927,1.486,1930,1.416,1975,1.566,1976,1.948,1982,1.356,1983,1.302,1984,1.356,1985,1.785,1986,1.664,2012,1.948,2024,1.785,2039,1.948,2094,3.951,2095,2.927,2107,1.948,2119,1.664,2135,2.927,2140,1.785,2149,1.785,2156,1.948,2171,1.664,2172,1.948,2177,1.948,2191,2.322,2197,1.664,2198,1.948,2236,1.664,2237,2.927,2250,1.664,2287,1.664,2292,1.664,2293,1.948,2299,1.664,2300,1.948,2304,1.566,2312,1.566,2313,1.486,2323,1.785,2325,1.785,2328,1.948,2379,1.566,2380,1.948,2392,2.927,2416,1.948,2432,1.416,2452,1.664,2453,1.948,2480,1.948,2483,1.356,2492,1.664,2497,1.416,2512,1.302,2529,2.727,2602,1.948,2608,1.664,2609,2.927,2618,1.486,2638,1.566,2639,1.948,2643,1.664,2644,1.948,2651,1.664,2675,2.727,2681,1.948,2693,1.948,2705,1.486,2786,1.566,2787,1.948,2797,1.785,2810,1.948,2938,1.948,2947,1.948,2986,1.664,2987,1.948,3042,2.727,3087,1.664,3088,1.948,3100,1.566,3103,1.785,3117,1.948,3126,4.166,3127,1.948,3134,1.948,3159,1.785,3198,1.948,3258,1.785,3268,1.948,3298,7.626,3347,1.664,3348,3.767,3349,1.948,3363,1.566,3364,2.927,3365,1.948,3383,1.566,3387,1.948,3453,1.948,3461,2.927,3467,2.727,3472,1.785,3499,2.927,3504,2.927,3510,1.948,3538,1.664,3539,2.927,3581,1.948,3615,1.948,3644,1.948,3645,2.195,3646,2.195,3647,4.573,3648,2.195,3649,3.599,3650,3.599,3651,5.839,3652,5.29,3653,6.915,3654,9.107,3655,2.195,3656,2.195,3657,4.573,3658,8.071,3659,6.272,3660,2.195,3661,3.599,3662,1.948,3663,2.195,3664,3.193,3665,6.272,3666,5.839,3667,3.193,3668,3.599,3669,2.195,3670,1.948,3671,6.272,3672,2.195,3673,2.195,3674,2.195,3675,2.195,3676,2.195,3677,5.29,3678,5.29,3679,1.948,3680,3.599,3681,6.624,3682,8.337,3683,2.195,3684,6.272,3685,3.599,3686,2.195,3687,4.573,3688,2.195,3689,2.195,3690,2.195,3691,2.195,3692,4.573,3693,4.573,3694,3.193,3695,3.599,3696,7.367,3697,2.195,3698,2.195,3699,2.195,3700,2.195,3701,3.599,3702,3.599,3703,1.948,3704,2.195,3705,1.948,3706,2.195,3707,1.948,3708,5.29,3709,2.195,3710,2.195,3711,2.195,3712,3.193,3713,2.195,3714,2.195,3715,1.785,3716,1.948,3717,2.195,3718,2.195,3719,2.195,3720,2.195,3721,2.195]],["title/dependencies.html",[146,2.598,3722,3.378]],["body/dependencies.html",[12,1.431,21,0.008,31,0.006,32,0.006,33,0.262,51,2.044,58,1.55,131,0.876,133,1.79,146,2.567,175,1.717,177,4.428,179,4.832,180,3.885,181,3,183,3.363,184,5.04,241,4.126,385,3.109,387,3.321,455,2.366,557,4.126,559,2.306,561,3.513,562,3.685,658,3.109,757,3.885,817,3.418,908,2.249,916,4.126,1071,3.513,1240,2.9,1252,3.109,1341,4.716,1342,4.126,1343,4.126,1345,4.126,1347,4.126,1348,3.885,1522,3.885,1527,2.722,1529,4.126,1747,3.885,1803,4.428,1936,3.513,1988,3,2022,4.428,2057,4.832,2060,4.832,2743,3.685,2853,4.832,2993,3.885,3003,5.729,3004,4.428,3005,4.832,3006,4.832,3723,7.045,3724,5.445,3725,7.045,3726,7.811,3727,5.445,3728,5.445,3729,5.445,3730,5.445,3731,5.445,3732,5.445,3733,5.445,3734,5.445,3735,5.445,3736,7.045,3737,8.26,3738,8.26,3739,8.26,3740,5.445,3741,5.445,3742,5.445,3743,5.445,3744,7.811,3745,5.445,3746,5.445,3747,5.445,3748,5.445,3749,5.445,3750,5.445,3751,5.445,3752,5.445,3753,5.445,3754,5.445,3755,5.445,3756,5.445,3757,5.445,3758,5.445,3759,5.445,3760,5.445,3761,5.445,3762,5.445,3763,5.445,3764,5.445,3765,5.445,3766,5.445,3767,5.445,3768,5.445,3769,5.445]],["title/miscellaneous/enumerations.html",[3770,2.351,3771,4.891]],["body/miscellaneous/enumerations.html",[12,1.66,13,0.292,20,0.28,21,0.008,31,0.006,32,0.006,36,3.746,37,4.075,59,3.157,60,4.778,61,3.362,62,4.075,63,4.075,64,4.075,65,4.075,66,4.075,97,2.95,105,2.371,343,2.675,400,2.168,695,4.588,1197,4.991,1239,3.901,1618,4.12,1936,4.991,1937,5.235,1943,4.786,2143,4.507,2403,4.786,2675,4.786,2841,3.901,3042,4.786,3068,6.291,3071,6.291,3080,6.865,3081,5.52,3082,6.865,3593,6.291,3628,5.136,3630,5.604,3715,5.136,3770,3.901,3771,5.604,3772,5.604,3773,7.736,3774,5.604,3775,6.316,3776,5.604,3777,6.316,3778,6.316]],["title/miscellaneous/functions.html",[3770,2.351,3779,4.891]],["body/miscellaneous/functions.html",[12,2.297,13,0.324,17,0.874,20,0.31,21,0.007,31,0.006,32,0.006,99,1.295,130,1.544,149,4.136,183,4.326,276,4.154,283,3.859,320,1.702,476,5.696,658,3.999,761,5.873,801,5.308,934,4.326,2191,5.311,2841,4.326,3703,6.215,3705,6.215,3770,4.326,3779,6.215,3780,7.004,3781,7.004,3782,7.004,3783,7.004]],["title/index.html",[13,0.212,3784,4.06]],["body/index.html",[2,1.808,21,0.008,31,0.004,32,0.004,35,0.845,125,1.298,143,1.03,144,7.116,145,1.494,146,1.705,147,1.808,148,1.808,149,1.658,150,1.705,151,1.705,152,3.21,153,3.21,154,3.21,155,6.594,156,4.789,157,4.946,158,4.489,159,6.38,160,4.489,161,4.489,162,5.376,163,5.314,164,4.258,165,6.273,166,4.258,167,2.654,168,1.808,169,1.808,434,3.886,441,5.146,548,3.21,549,3.21,550,3.21,551,3.21,552,5.476,553,4.394,554,5.691,664,3.987,666,4.73,718,1.39,728,3.466,729,4.554,730,3.731,882,1.755,919,4.926,921,4.926,923,4.554,925,4.926,1107,4.059,1288,4.059,1324,4.73,1413,5.268,1414,3.21,1415,3.21,1416,3.21,1462,3.21,1463,3.21,1464,3.21,1817,2.234,1977,3.21,1978,3.21,1979,3.21,1980,3.21,1981,5.835,1982,4.281,1983,4.111,1984,4.281,2287,2.741,2313,5.398,2318,6.044,2319,3.21,2321,3.21,2322,3.21,2471,3.21,2473,3.21,2474,3.21,2477,5.386,2483,4.926,2683,3.21,2684,3.21,2685,3.21,2686,3.21,2687,5.507,2705,5.398,2793,3.21,2794,3.21,2795,3.21,2942,3.21,2943,3.21,2944,3.21,3254,3.21,3256,3.21,3257,3.21,3376,3.21,3377,3.21,3378,3.21,3662,3.21,3694,3.21,3784,3.21,3785,3.618,3786,3.618,3787,3.618,3788,3.618]],["title/modules.html",[145,2.592]],["body/modules.html",[21,0.006,31,0.006,32,0.006,144,4.786,145,2.609,155,4.507,156,3.364,157,4.507,158,4.507,159,4.274,160,4.507,161,4.507,162,3.901,163,3.901,164,4.274,165,4.507,467,6.051,470,7.24,552,4.075,1413,4.507,1981,4.075,2318,4.786,2477,4.075,2687,4.507,3789,9.553,3790,9.553,3791,9.668,3792,8.942]],["title/properties.html",[14,0.783,3722,3.378]],["body/properties.html",[9,0.927,14,1.01,21,0.007,31,0.007,32,0.007,141,6.753,839,4.391,917,3.554,2306,5.782,3793,7.11,3794,7.11,3795,7.11,3796,7.11,3797,7.11,3798,7.11,3799,8.304,3800,7.11,3801,7.11,3802,7.11,3803,7.11,3804,7.11,3805,7.11,3806,7.11]],["title/miscellaneous/typealiases.html",[3770,2.351,3807,5.511]],["body/miscellaneous/typealiases.html",[11,2.854,13,0.264,20,0.414,21,0.007,23,1.415,31,0.006,32,0.006,34,3.261,36,3.387,59,2.854,69,2.692,70,3.261,77,3.261,83,3.261,86,2.944,89,4.308,91,4.075,94,3.241,95,3.864,105,2.144,106,4.486,136,3.684,194,4.002,226,2.301,280,2.692,284,2.548,308,3.864,309,4.687,348,2.548,359,2.692,361,3.864,365,3.146,369,4.075,370,4.486,379,2.359,495,1.878,531,3.146,547,3.146,608,6.916,829,4.308,880,1.918,883,4.644,900,5.183,991,4.644,995,5.907,996,4.327,1111,2.77,1239,3.527,1262,4.308,1417,4.916,1422,6.838,1432,4.916,1440,5.505,1446,5.907,1454,5.907,1460,4.327,1612,4.644,1614,5.907,1651,4.644,1666,4.644,1676,4.327,1693,5.183,1700,4.916,1708,4.075,2135,4.644,2140,5.907,2141,4.075,2143,4.075,2191,4.687,2841,3.527,2993,4.075,3042,4.327,3083,3.864,3467,4.327,3472,5.907,3770,3.527,3774,5.067,3776,5.067,3808,5.71,3809,5.71,3810,5.71,3811,5.71,3812,5.71,3813,7.461,3814,5.71,3815,5.067,3816,5.71,3817,6.446]],["title/miscellaneous/variables.html",[2356,4.177,3770,2.351]],["body/miscellaneous/variables.html",[11,1.446,12,1.862,13,0.134,19,0.639,20,0.389,21,0.008,22,1.765,23,0.717,31,0.004,32,0.004,48,1.008,97,2.773,99,1.145,105,1.086,113,1.111,114,0.931,127,0.65,134,1.441,143,1.277,189,3.399,192,3.399,194,1.594,196,3.399,200,3.399,203,3.399,205,3.399,207,3.399,222,2.352,228,3.177,232,2.352,248,1.563,251,1.765,254,1.787,283,1.594,284,1.291,287,1.958,322,1.257,333,1.945,341,4.33,345,1.594,352,1.541,380,2.111,413,1.958,443,1.446,454,3.201,466,1.444,476,2.352,495,2.035,499,1.326,505,2.331,509,0.993,512,2.352,513,2.352,555,2.352,571,3.201,572,2.567,573,3.648,574,3.648,575,6.519,576,2.352,577,6.56,578,2.567,579,6.061,580,2.567,581,2.567,582,2.567,583,2.567,584,2.352,585,2.567,586,2.567,587,2.567,588,2.192,589,2.567,590,2.567,591,2.567,611,3.69,660,3.035,742,3.027,754,2.837,780,2.894,830,1.403,1017,1.787,1111,1.403,1116,2.313,1196,1.787,1240,1.541,1330,2.064,1386,2.567,1387,3.648,1417,3.035,1418,3.648,1419,2.567,1420,2.567,1421,1.958,1427,2.352,1432,1.958,1433,2.567,1437,2.352,1438,2.567,1441,2.567,1442,4.188,1443,3.993,1444,4.467,1460,5.076,1579,2.352,1581,3.648,1582,2.567,1583,2.567,1584,2.567,1585,2.567,1586,5.492,1587,5.944,1588,5.79,1589,6.121,1590,2.567,1591,2.567,1592,2.567,1593,2.567,1594,2.567,1662,2.567,1676,2.192,1696,2.77,1708,2.064,1709,3.201,1710,2.567,1725,2.352,1819,2.567,1985,2.352,2004,2.567,2005,2.567,2019,3.92,2024,3.648,2141,3.201,2143,2.064,2149,2.352,2158,2.567,2159,2.567,2160,2.567,2161,4.875,2162,2.192,2163,2.567,2164,2.567,2165,2.567,2166,2.567,2263,1.958,2323,2.352,2325,3.648,2326,2.567,2327,2.352,2356,3.399,2368,2.064,2432,2.894,2503,3.399,2529,4.163,2797,2.352,2798,2.352,2802,2.567,2803,2.567,2804,2.567,2805,4.875,2806,4.875,2807,2.352,2808,2.352,2993,5.275,3083,1.958,3125,2.567,3126,2.064,3159,3.648,3162,3.98,3258,2.352,3260,2.352,3261,2.567,3262,2.567,3263,2.567,3467,2.192,3473,2.567,3474,2.567,3475,2.567,3476,2.567,3477,6.56,3478,2.567,3479,2.567,3480,2.567,3481,2.567,3482,2.567,3483,2.567,3484,2.567,3485,2.567,3486,2.567,3499,2.352,3500,4.875,3501,4.875,3502,4.875,3503,2.567,3628,2.352,3664,2.567,3667,2.567,3670,3.98,3679,2.567,3707,2.567,3712,4.875,3715,2.352,3716,3.98,3770,1.787,3772,2.567,3813,2.567,3815,2.567,3817,2.567,3818,6.189,3819,2.893,3820,2.893,3821,2.893,3822,4.485,3823,2.893,3824,2.893,3825,2.893,3826,2.893,3827,4.485,3828,2.893,3829,2.893,3830,2.893,3831,2.893,3832,5.493,3833,2.893,3834,6.189,3835,2.893,3836,7.086,3837,2.893,3838,4.485,3839,2.893,3840,2.893,3841,4.485,3842,2.893,3843,4.485,3844,2.893,3845,2.893,3846,2.893,3847,2.893,3848,4.485,3849,2.893,3850,2.893,3851,2.893,3852,2.893]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1161,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["0.0.1",{"_index":3794,"title":{},"body":{"properties.html":{}}}],["0.14.0",{"_index":3744,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":3745,"title":{},"body":{"dependencies.html":{}}}],["0.14.2",{"_index":3750,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":3764,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":3737,"title":{},"body":{"dependencies.html":{}}}],["0.3.25",{"_index":3768,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":3424,"title":{},"body":{"injectables/StatusListService.html":{}}}],["0.5.1",{"_index":3749,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":3654,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":3685,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":3686,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":3647,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3653,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":3661,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":3657,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":3708,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":3709,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":3680,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1817,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/WellKnownService.html":{},"index.html":{}}}],["1.11.0",{"_index":3748,"title":{},"body":{"dependencies.html":{}}}],["1.13.0",{"_index":3743,"title":{},"body":{"dependencies.html":{}}}],["1.5.4",{"_index":3762,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":3682,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":3666,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":3693,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":3695,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":3663,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":3689,"title":{},"body":{"coverage.html":{}}}],["10)}/${randomuuid()}${safeext",{"_index":1736,"title":{},"body":{"injectables/FilesService.html":{}}}],["10,000",{"_index":3403,"title":{},"body":{"injectables/StatusListService.html":{}}}],["10.5.0",{"_index":3759,"title":{},"body":{"dependencies.html":{}}}],["10/15",{"_index":3672,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":838,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["1000",{"_index":1397,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["10000",{"_index":3417,"title":{},"body":{"injectables/StatusListService.html":{}}}],["11.0.0",{"_index":3736,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":3731,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":3769,"title":{},"body":{"dependencies.html":{}}}],["11.1.6",{"_index":3726,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":3735,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":3786,"title":{},"body":{"index.html":{}}}],["12/14",{"_index":3714,"title":{},"body":{"coverage.html":{}}}],["12/schema",{"_index":3031,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["13.1.1",{"_index":3760,"title":{},"body":{"dependencies.html":{}}}],["14",{"_index":3688,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":3706,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":3788,"title":{},"body":{"index.html":{}}}],["15.1.3",{"_index":3761,"title":{},"body":{"dependencies.html":{}}}],["15/15",{"_index":3718,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":3662,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["18",{"_index":3785,"title":{},"body":{"index.html":{}}}],["18.0.0",{"_index":3751,"title":{},"body":{"dependencies.html":{}}}],["19/21",{"_index":3669,"title":{},"body":{"coverage.html":{}}}],["2.0",{"_index":2306,"title":{},"body":{"controllers/OAuthController.html":{},"injectables/WellKnownService.html":{},"properties.html":{}}}],["2/2",{"_index":3684,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":3687,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":3676,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{}}}],["201",{"_index":1929,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["20250714110838",{"_index":3739,"title":{},"body":{"dependencies.html":{}}}],["23",{"_index":3710,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":512,"title":{},"body":{"controllers/AuthController.html":{},"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["24h",{"_index":507,"title":{},"body":{"controllers/AuthController.html":{}}}],["25",{"_index":3694,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["256",{"_index":1387,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["3.0.1",{"_index":3730,"title":{},"body":{"dependencies.html":{}}}],["3.14.3",{"_index":3755,"title":{},"body":{"dependencies.html":{}}}],["3.2.0",{"_index":3753,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":3724,"title":{},"body":{"dependencies.html":{}}}],["3.864.0",{"_index":3723,"title":{},"body":{"dependencies.html":{}}}],["3/13",{"_index":3711,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":3696,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":3652,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":3717,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":835,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/FilesService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{}}}],["30d",{"_index":511,"title":{},"body":{"controllers/AuthController.html":{}}}],["33",{"_index":3692,"title":{},"body":{"coverage.html":{}}}],["36/36",{"_index":3650,"title":{},"body":{"coverage.html":{}}}],["3600",{"_index":2367,"title":{},"body":{"injectables/OAuthService.html":{},"classes/TokenResponseDto.html":{}}}],["4.0.1",{"_index":3725,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":3727,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":3756,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":3681,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":3678,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":3660,"title":{},"body":{"coverage.html":{}}}],["401",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["47",{"_index":3674,"title":{},"body":{"coverage.html":{}}}],["48",{"_index":3787,"title":{},"body":{"index.html":{}}}],["4909",{"_index":1956,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["5",{"_index":2076,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["5.0.3",{"_index":3734,"title":{},"body":{"dependencies.html":{}}}],["5.1.7",{"_index":3767,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":3671,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":3699,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":3665,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":688,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["6.0.0",{"_index":3733,"title":{},"body":{"dependencies.html":{}}}],["6.0.12",{"_index":3752,"title":{},"body":{"dependencies.html":{}}}],["6.0.2",{"_index":3746,"title":{},"body":{"dependencies.html":{}}}],["6/10",{"_index":3655,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":3691,"title":{},"body":{"coverage.html":{}}}],["6/8",{"_index":3704,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":2529,"title":{},"body":{"injectables/Oid4vpService.html":{},"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["66",{"_index":3659,"title":{},"body":{"coverage.html":{}}}],["7.8.2",{"_index":3765,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":3690,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":3698,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":3651,"title":{},"body":{"coverage.html":{}}}],["8.16.3",{"_index":3758,"title":{},"body":{"dependencies.html":{}}}],["8/12",{"_index":3683,"title":{},"body":{"coverage.html":{}}}],["8/8",{"_index":3697,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":3677,"title":{},"body":{"coverage.html":{}}}],["81",{"_index":3701,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":3713,"title":{},"body":{"coverage.html":{}}}],["86400",{"_index":463,"title":{},"body":{"controllers/AuthController.html":{}}}],["8a7a",{"_index":1957,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["8ad6",{"_index":1955,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["9/10",{"_index":3720,"title":{},"body":{"coverage.html":{}}}],["9/11",{"_index":3702,"title":{},"body":{"coverage.html":{}}}],["9/19",{"_index":3675,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":3719,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":3668,"title":{},"body":{"coverage.html":{}}}],["_d",{"_index":1543,"title":{},"body":{"classes/DBKeyService.html":{}}}],["_ext",{"_index":1547,"title":{},"body":{"classes/DBKeyService.html":{}}}],["_key_ops",{"_index":1545,"title":{},"body":{"classes/DBKeyService.html":{}}}],["a128gcm",{"_index":2543,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["a739c2c412c0",{"_index":1958,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["abstract",{"_index":2178,"title":{},"body":{"classes/KeyService.html":{}}}],["accept",{"_index":1966,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/WellKnownController.html":{}}}],["accepts",{"_index":406,"title":{},"body":{"controllers/AuthController.html":{}}}],["access",{"_index":11,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"entities/CertEntity.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"injectables/WellKnownService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["access_token",{"_index":458,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{}}}],["accesscert",{"_index":2551,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscert?.length",{"_index":2560,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscertificatecontrollerregister",{"_index":2856,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["accesscertificateid",{"_index":2788,"title":{},"body":{"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{}}}],["accesscertificateresponse",{"_index":1,"title":{"interfaces/AccessCertificateResponse.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["accessing",{"_index":2825,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["accesskeyid",{"_index":3494,"title":{},"body":{"modules/StorageModule.html":{}}}],["accesstoken",{"_index":2364,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/RegistrarService.html":{}}}],["accesstokenrequest",{"_index":800,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["accordingly",{"_index":980,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["acl",{"_index":1697,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/S3FileStorage.html":{}}}],["acl=public",{"_index":1705,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["action",{"_index":2508,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["active",{"_index":3071,"title":{},"body":{"entities/Session.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{}}}],["actual",{"_index":542,"title":{},"body":{"controllers/AuthController.html":{}}}],["adapt",{"_index":72,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["adapters/db",{"_index":2155,"title":{},"body":{"modules/KeyModule.html":{}}}],["adapters/local.storage",{"_index":3469,"title":{},"body":{"modules/StorageModule.html":{}}}],["adapters/s3.storage",{"_index":3470,"title":{},"body":{"modules/StorageModule.html":{}}}],["adapters/vault",{"_index":2157,"title":{},"body":{"modules/KeyModule.html":{}}}],["add",{"_index":1352,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/MetricModule.html":{},"injectables/OAuthService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/WellKnownService.html":{}}}],["add(issuer_state",{"_index":3277,"title":{},"body":{"injectables/SessionService.html":{}}}],["addaccesscertificate",{"_index":2817,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addaccesscertificate(tenantid",{"_index":2827,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addclient",{"_index":2329,"title":{},"body":{"injectables/OAuthService.html":{}}}],["addclient(clientid",{"_index":2337,"title":{},"body":{"injectables/OAuthService.html":{}}}],["adding",{"_index":2813,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["additional",{"_index":1217,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/SessionLogContext.html":{}}}],["additionaldata",{"_index":3215,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["addkey",{"_index":2108,"title":{},"body":{"controllers/KeyController.html":{}}}],["addkey(token",{"_index":2112,"title":{},"body":{"controllers/KeyController.html":{}}}],["addregistrationcertificate",{"_index":2818,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addregistrationcertificate(req",{"_index":2830,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp",{"_index":2819,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp(name",{"_index":2832,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["adds",{"_index":2834,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["against",{"_index":1178,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["agent",{"_index":285,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["alg",{"_index":830,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["algorithm",{"_index":1445,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/RegistrarService.html":{}}}],["algorithms",{"_index":1426,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["alias",{"_index":3658,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":3808,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow_list",{"_index":62,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/enumerations.html":{}}}],["allowedsigningalgs",{"_index":815,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["allowing",{"_index":977,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["allowinsecureurls",{"_index":2010,"title":{},"body":{"modules/IssuerModule.html":{}}}],["allowlist",{"_index":37,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/enumerations.html":{}}}],["allowlistpolicy",{"_index":34,"title":{"classes/AllowListPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["allows",{"_index":2310,"title":{},"body":{"controllers/OAuthController.html":{}}}],["alpha",{"_index":3738,"title":{},"body":{"dependencies.html":{}}}],["already",{"_index":1137,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["always",{"_index":1630,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["amount",{"_index":1263,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{}}}],["any).$schema",{"_index":1366,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["any).azp",{"_index":2092,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["any).issuer",{"_index":2091,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["any).method",{"_index":876,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/IssuanceService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["anypolicy",{"_index":89,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apache",{"_index":3802,"title":{},"body":{"properties.html":{}}}],["api",{"_index":93,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/RegistrarService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["api:read",{"_index":2661,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["api:write",{"_index":2662,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apibody",{"_index":428,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apibody({description",{"_index":646,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["apiexcludecontroller",{"_index":132,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["apiexcludecontroller(process.env.swagger_all",{"_index":445,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["apiheader",{"_index":3603,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apihideproperty",{"_index":1070,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{}}}],["apihideproperty()@column('varchar",{"_index":1066,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["apikey",{"_index":107,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["apikeyconfig",{"_index":90,"title":{"classes/ApiKeyConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["apioperation",{"_index":429,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OAuthController.html":{},"controllers/WellKnownController.html":{}}}],["apioperation({summary",{"_index":2305,"title":{},"body":{"controllers/OAuthController.html":{},"controllers/WellKnownController.html":{}}}],["apiparam",{"_index":2430,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["apiproduces",{"_index":1935,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["apiproduces(\"application/json",{"_index":1946,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiproduces(mediatype.application_json",{"_index":3605,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apiproperty",{"_index":2408,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/Session.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/VCT.html":{}}}],["apiproperty({description",{"_index":3505,"title":{},"body":{"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{}}}],["apiproperty({enum",{"_index":3069,"title":{},"body":{"entities/Session.html":{}}}],["apiproperty({examples",{"_index":2402,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["apiproperty({required",{"_index":3525,"title":{},"body":{"classes/VCT.html":{}}}],["apiproperty({type",{"_index":2394,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["apiresponse",{"_index":430,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiresponse({description",{"_index":1928,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apisecurity",{"_index":1278,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["apisecurity(\"oauth2",{"_index":1285,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["apitags",{"_index":431,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/OAuthController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{}}}],["apitags(\"authentication",{"_index":446,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"issuer",{"_index":1282,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["apitags(\"oauth",{"_index":2315,"title":{},"body":{"controllers/OAuthController.html":{}}}],["apitags(\"presentation",{"_index":2660,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apitags(\"session",{"_index":3106,"title":{},"body":{"controllers/SessionController.html":{}}}],["apitags(\"status",{"_index":3357,"title":{},"body":{"controllers/StatusListController.html":{}}}],["app/app.controller",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":124,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":2841,"title":{},"body":{"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["application/json",{"_index":1943,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["application/jwk",{"_index":3589,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["application/jwt",{"_index":3630,"title":{},"body":{"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["application/statuslist+jwt",{"_index":3355,"title":{},"body":{"controllers/StatusListController.html":{}}}],["application_json",{"_index":3777,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["application_jwt",{"_index":3778,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["applications",{"_index":419,"title":{},"body":{"controllers/AuthController.html":{}}}],["appmodule",{"_index":144,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["args",{"_index":321,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["args.object",{"_index":335,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["array",{"_index":75,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/JwksResponseDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/StatusListService.html":{}}}],["array(size",{"_index":3420,"title":{},"body":{"injectables/StatusListService.html":{}}}],["array(size).fill(0).map",{"_index":3418,"title":{},"body":{"injectables/StatusListService.html":{}}}],["array.isarray(dcql_query",{"_index":2526,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["associated",{"_index":1105,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{}}}],["assume",{"_index":852,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["async",{"_index":333,"title":{},"body":{"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["att",{"_index":2779,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attached",{"_index":2610,"title":{},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{}}}],["attestation",{"_index":841,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{}}}],["attestation_based",{"_index":65,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/enumerations.html":{}}}],["attestationbased",{"_index":66,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/enumerations.html":{}}}],["attestationbasedpolicy",{"_index":83,"title":{"classes/AttestationBasedPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["attestations",{"_index":2611,"title":{},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{}}}],["attestations.map((att",{"_index":2780,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attribute",{"_index":1218,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["aud",{"_index":535,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{}}}],["audience",{"_index":508,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["auth",{"_index":122,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["auth.controller",{"_index":566,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":567,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.module",{"_index":1754,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["auth/auth.guard",{"_index":1279,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["auth/auth.module",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/token.decorator",{"_index":1280,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["auth_client_id",{"_index":590,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["auth_client_secret",{"_index":588,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"miscellaneous/variables.html":{}}}],["auth_queries",{"_index":687,"title":{},"body":{"controllers/AuthorizeController.html":{},"entities/Session.html":{}}}],["auth_session",{"_index":696,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["auth_validation_schema",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authconfig",{"_index":106,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["authconfig.method",{"_index":869,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authconfigvalidator",{"_index":307,"title":{"classes/AuthConfigValidator.html":{}},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authcontroller",{"_index":371,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":421,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["authenticate(req",{"_index":2044,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authenticating",{"_index":2849,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["authentication",{"_index":94,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/typealiases.html":{}}}],["authentication.'})@apiresponse({status",{"_index":417,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticationconfig",{"_index":370,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["authenticationconfigdto",{"_index":336,"title":{"classes/AuthenticationConfigDto.html":{}},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationurlconfig",{"_index":323,"title":{"classes/AuthenticationUrlConfig.html":{}},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authfixed",{"_index":1952,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["authguard",{"_index":2023,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard(\"jwt",{"_index":2013,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authheader",{"_index":477,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.startswith(\"basic",{"_index":479,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.substring(6",{"_index":481,"title":{},"body":{"controllers/AuthController.html":{}}}],["authmodule",{"_index":155,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"index.html":{},"modules.html":{}}}],["author",{"_index":3804,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":407,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["authorization_challenge_endpoint",{"_index":786,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorization_code",{"_index":803,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["authorization_encrypted_response_alg",{"_index":2541,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_encrypted_response_enc",{"_index":2542,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_endpoint",{"_index":776,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorization_request",{"_index":2505,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{}}}],["authorization_server",{"_index":1241,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["authorization_servers",{"_index":1242,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["authorizationchallengeendpoint",{"_index":633,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationchallengeendpoint(res",{"_index":636,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{}}}],["authorizationcodegrantidentifier",{"_index":752,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationresponse",{"_index":621,"title":{"classes/AuthorizationResponse.html":{}},"body":{"classes/AuthorizationResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"coverage.html":{}}}],["authorizationserver",{"_index":768,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata",{"_index":735,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata.dpop_signing_alg_values_supported",{"_index":816,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata.issuer",{"_index":836,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorize",{"_index":634,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(@query",{"_index":675,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(queries",{"_index":641,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize.service",{"_index":667,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize/authorize.controller",{"_index":1995,"title":{},"body":{"modules/IssuerModule.html":{}}}],["authorize/authorize.service",{"_index":1996,"title":{},"body":{"modules/IssuerModule.html":{}}}],["authorizecontroller",{"_index":625,"title":{"controllers/AuthorizeController.html":{}},"body":{"controllers/AuthorizeController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["authorized",{"_index":346,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["authorized_code",{"_index":806,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizequeries",{"_index":637,"title":{"classes/AuthorizeQueries.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"coverage.html":{}}}],["authorizequeries})@post('par",{"_index":648,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorizeservice",{"_index":666,"title":{"injectables/AuthorizeService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["authresponse",{"_index":598,"title":{"interfaces/AuthResponse.html":{}},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"coverage.html":{}}}],["authserver",{"_index":770,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/.well",{"_index":778,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize",{"_index":777,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/challenge",{"_index":787,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/par",{"_index":783,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/token",{"_index":775,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authtype",{"_index":3553,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["authz",{"_index":2549,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authzmetadata",{"_index":720,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/WellKnownController.html":{}}}],["authzmetadata(session",{"_index":733,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/WellKnownController.html":{}}}],["autoloadentities",{"_index":1599,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["autologging",{"_index":262,"title":{},"body":{"modules/AppModule.html":{}}}],["automatic",{"_index":2265,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["available",{"_index":467,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/OAuthService.html":{},"entities/StatusListEntity.html":{},"modules.html":{}}}],["avoid",{"_index":1182,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["await",{"_index":505,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":3003,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["axios",{"_index":3747,"title":{},"body":{"dependencies.html":{}}}],["back",{"_index":489,"title":{},"body":{"controllers/AuthController.html":{}}}],["badgateway/oauth2",{"_index":2853,"title":{},"body":{"injectables/RegistrarService.html":{},"dependencies.html":{}}}],["badrequestexception",{"_index":911,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["base",{"_index":358,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["base64",{"_index":483,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/FileStorage.html":{},"injectables/ResolverService.html":{}}}],["base64credentials",{"_index":480,"title":{},"body":{"controllers/AuthController.html":{}}}],["base64url",{"_index":3847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":1330,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["basedir",{"_index":2201,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["baseurl",{"_index":2874,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["basic",{"_index":408,"title":{},"body":{"controllers/AuthController.html":{}}}],["batch",{"_index":1255,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{}}}],["batch_credential_issuance",{"_index":1243,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["batch_size",{"_index":1264,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{}}}],["bearer",{"_index":461,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{}}}],["before",{"_index":849,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["being",{"_index":3130,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["belongs",{"_index":3375,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["better",{"_index":3556,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["between",{"_index":606,"title":{},"body":{"interfaces/AuthResponse.html":{},"entities/CredentialIssuanceBinding.html":{},"injectables/IssuanceService.html":{}}}],["binary",{"_index":1945,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["binding",{"_index":1029,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{}}}],["binding.credentialconfig",{"_index":1030,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["binding.credentialconfigid",{"_index":1361,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["binding.entity",{"_index":1081,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["binding.entity.ts",{"_index":1213,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"coverage.html":{}}}],["binding.entity.ts:22",{"_index":1226,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["binding.entity.ts:28",{"_index":1229,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["binding.entity.ts:38",{"_index":1224,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["binding.entity.ts:48",{"_index":1228,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["binding.entity.ts:54",{"_index":1222,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["binding.entity.ts:60",{"_index":1230,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["binding.issuanceconfig",{"_index":1824,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["binding?.credentialconfig?.keyid",{"_index":1379,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["bindings",{"_index":1827,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["bits",{"_index":3366,"title":{},"body":{"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["bitsperstatus",{"_index":3367,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["body",{"_index":409,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/CredentialsController.html":{},"classes/DBKeyService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["body.auth_session",{"_index":850,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.client_id",{"_index":490,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.client_secret",{"_index":491,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.code",{"_index":804,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.grant_type",{"_index":471,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.issuer_state",{"_index":843,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.privatekey",{"_index":1539,"title":{},"body":{"classes/DBKeyService.html":{}}}],["body.requestid",{"_index":2666,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body.response",{"_index":2580,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["body.response_type",{"_index":1968,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["body.webhook",{"_index":2667,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body['pre",{"_index":805,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["boolean",{"_index":28,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AuthConfigValidator.html":{},"entities/CredentialConfig.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["bootstrap",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["both",{"_index":682,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["bound",{"_index":2921,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["break",{"_index":874,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["browse",{"_index":3791,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3789,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":2990,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["buffer",{"_index":1690,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/IssuerManagementController.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"classes/S3FileStorage.html":{}}}],["buffer.from",{"_index":482,"title":{},"body":{"controllers/AuthController.html":{}}}],["buffer.from(signature).tostring(\"base64url",{"_index":3844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer.from(signaturebase64url",{"_index":3846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bugs",{"_index":3798,"title":{},"body":{"properties.html":{}}}],["builder/querypartialentity",{"_index":3309,"title":{},"body":{"injectables/SessionService.html":{}}}],["c.id",{"_index":949,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["cache",{"_index":2073,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/WellKnownService.html":{}}}],["call",{"_index":2879,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["callback",{"_index":607,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{}}}],["callbacks",{"_index":351,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["called",{"_index":2840,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["callhandler",{"_index":3141,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["canactivate",{"_index":2014,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/SessionGuard.html":{}}}],["canactivate(context",{"_index":2018,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/SessionGuard.html":{}}}],["canonical",{"_index":1701,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["cascade",{"_index":1031,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{}}}],["case",{"_index":870,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["catch",{"_index":487,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"classes/S3FileStorage.html":{}}}],["catcherror",{"_index":3156,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["catcherror((error",{"_index":3184,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["cb",{"_index":2078,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cb(err",{"_index":2082,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cert",{"_index":1189,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["cert.crt",{"_index":2195,"title":{},"body":{"classes/KeyService.html":{}}}],["cert.id",{"_index":1566,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/RegistrarService.html":{}}}],["cert.publickey.export",{"_index":2969,"title":{},"body":{"injectables/ResolverService.html":{}}}],["cert.revoked",{"_index":2926,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cert.subjectaltname?.includes(new",{"_index":2966,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certentity",{"_index":881,"title":{"entities/CertEntity.html":{}},"body":{"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"coverage.html":{}}}],["certificate",{"_index":7,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"coverage.html":{}}}],["certificatechainlength",{"_index":2559,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["certificates",{"_index":885,"title":{},"body":{"entities/CertEntity.html":{},"injectables/RegistrarService.html":{}}}],["certificatetype",{"_index":900,"title":{},"body":{"entities/CertEntity.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["certrepository",{"_index":1486,"title":{},"body":{"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{}}}],["certs",{"_index":2922,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["certs?.length",{"_index":2928,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["certs[0",{"_index":2965,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certs[0].jwt",{"_index":2929,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cfg",{"_index":3487,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get",{"_index":3493,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_bucket",{"_index":3496,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_endpoint",{"_index":3491,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_public_base_url",{"_index":3497,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_region",{"_index":3490,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"storage_driver",{"_index":3488,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.getorthrow(\"local_storage_dir",{"_index":3498,"title":{},"body":{"modules/StorageModule.html":{}}}],["chain",{"_index":2961,"title":{},"body":{"injectables/ResolverService.html":{}}}],["challenge",{"_index":640,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["check",{"_index":253,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["checked",{"_index":857,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["checking",{"_index":3402,"title":{},"body":{"injectables/StatusListService.html":{}}}],["checks",{"_index":1797,"title":{},"body":{"controllers/HealthController.html":{},"injectables/RegistrarService.html":{}}}],["checksum",{"_index":1698,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{}}}],["checksumsha256",{"_index":3013,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["checl",{"_index":2970,"title":{},"body":{"injectables/ResolverService.html":{}}}],["child",{"_index":1897,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["children",{"_index":1894,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["claims",{"_index":80,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["claims_supported",{"_index":533,"title":{},"body":{"controllers/AuthController.html":{}}}],["claimswebhook",{"_index":1812,"title":{},"body":{"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["class",{"_index":33,"title":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":35,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"index.html":{}}}],["clear",{"_index":2596,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client",{"_index":387,"title":{"interfaces/Client.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/JwtStrategy.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["client.id",{"_index":501,"title":{},"body":{"controllers/AuthController.html":{}}}],["client.secret",{"_index":950,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["client.service",{"_index":435,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["client_credentials",{"_index":451,"title":{},"body":{"controllers/AuthController.html":{},"classes/TokenRequestDto.html":{}}}],["client_id",{"_index":423,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{}}}],["client_metadata",{"_index":2535,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_name",{"_index":2544,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_secret",{"_index":424,"title":{},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{},"classes/TokenRequestDto.html":{}}}],["client_secret_basic",{"_index":527,"title":{},"body":{"controllers/AuthController.html":{}}}],["client_secret_post",{"_index":528,"title":{},"body":{"controllers/AuthController.html":{}}}],["clientcredentialsdto",{"_index":396,"title":{"classes/ClientCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["cliententry",{"_index":568,"title":{"entities/ClientEntry.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"coverage.html":{}}}],["clientid",{"_index":473,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/OAuthService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["clientrepository",{"_index":931,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["clients",{"_index":597,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{}}}],["clientsecret",{"_index":474,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/OAuthService.html":{},"injectables/RegistrarService.html":{}}}],["clientservice",{"_index":434,"title":{"injectables/ClientService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{}}}],["clientstatus",{"_index":995,"title":{},"body":{"entities/ClientEntry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["cloudfront",{"_index":3007,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["cluster_appmodule",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_providers",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_authmodule",{"_index":548,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_exports",{"_index":551,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_imports",{"_index":550,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_providers",{"_index":549,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule",{"_index":1414,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule_exports",{"_index":1415,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule_providers",{"_index":1416,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptomodule",{"_index":1462,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_cryptomodule_exports",{"_index":1463,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_cryptomodule_providers",{"_index":1464,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_issuermodule",{"_index":1977,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_exports",{"_index":1978,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_imports",{"_index":1979,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_providers",{"_index":1980,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_oauthmodule",{"_index":2319,"title":{},"body":{"modules/OAuthModule.html":{},"index.html":{}}}],["cluster_oauthmodule_exports",{"_index":2321,"title":{},"body":{"modules/OAuthModule.html":{},"index.html":{}}}],["cluster_oauthmodule_imports",{"_index":2320,"title":{},"body":{"modules/OAuthModule.html":{}}}],["cluster_oauthmodule_providers",{"_index":2322,"title":{},"body":{"modules/OAuthModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule",{"_index":2471,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule_exports",{"_index":2473,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule_imports",{"_index":2472,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["cluster_oid4vpmodule_providers",{"_index":2474,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_presentationsmodule",{"_index":2683,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_exports",{"_index":2685,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_imports",{"_index":2686,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_providers",{"_index":2684,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_registrarmodule",{"_index":2793,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_registrarmodule_exports",{"_index":2795,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_registrarmodule_imports",{"_index":2796,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["cluster_registrarmodule_providers",{"_index":2794,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_resolvermodule",{"_index":2942,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_resolvermodule_exports",{"_index":2943,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_resolvermodule_providers",{"_index":2944,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_sessionmodule",{"_index":3254,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_sessionmodule_exports",{"_index":3257,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_sessionmodule_imports",{"_index":3255,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_sessionmodule_providers",{"_index":3256,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_statuslistmodule",{"_index":3376,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_statuslistmodule_exports",{"_index":3377,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_statuslistmodule_imports",{"_index":3379,"title":{},"body":{"modules/StatusListModule.html":{}}}],["cluster_statuslistmodule_providers",{"_index":3378,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_verifiermodule",{"_index":3528,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cluster_verifiermodule_imports",{"_index":3529,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cnf",{"_index":1401,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["cnonce",{"_index":826,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["cnonceexpiresin",{"_index":837,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["code",{"_index":347,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/Session.html":{}}}],["code_challenge",{"_index":697,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_method",{"_index":698,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_methods_supported",{"_index":784,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["colorize",{"_index":266,"title":{},"body":{"modules/AppModule.html":{}}}],["column",{"_index":907,"title":{},"body":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{}}}],["column(\"boolean",{"_index":1084,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["column(\"date",{"_index":3085,"title":{},"body":{"entities/Session.html":{}}}],["column(\"int",{"_index":1085,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/StatusListEntity.html":{}}}],["column(\"json",{"_index":1083,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["column(\"varchar",{"_index":909,"title":{},"body":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["column('date",{"_index":3054,"title":{},"body":{"entities/Session.html":{}}}],["column('int",{"_index":3368,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["column('json",{"_index":1021,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["column('json')@isobject",{"_index":1025,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/PresentationConfig.html":{}}}],["column('varchar",{"_index":893,"title":{},"body":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/DisplayEntity.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["column({type",{"_index":3454,"title":{},"body":{"entities/StatusMapping.html":{}}}],["commonoptions",{"_index":1597,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["comparison",{"_index":2933,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["complete",{"_index":2714,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["completed",{"_index":3081,"title":{},"body":{"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{}}}],["completion",{"_index":3224,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["components",{"_index":1572,"title":{},"body":{"classes/DBKeyService.html":{}}}],["computed",{"_index":3015,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["condition",{"_index":3291,"title":{},"body":{"injectables/SessionService.html":{}}}],["config",{"_index":114,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["config.dto",{"_index":1078,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{}}}],["config.dto.ts",{"_index":309,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/VCT.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["config.dto.ts:100",{"_index":2642,"title":{},"body":{"classes/PresentationDuringIssuanceConfig.html":{}}}],["config.dto.ts:115",{"_index":617,"title":{},"body":{"classes/AuthenticationConfigDto.html":{}}}],["config.dto.ts:12",{"_index":3522,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:125",{"_index":615,"title":{},"body":{"classes/AuthenticationConfigDto.html":{}}}],["config.dto.ts:15",{"_index":3520,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:18",{"_index":3521,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:21",{"_index":329,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/VCT.html":{}}}],["config.dto.ts:24",{"_index":3523,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:27",{"_index":3524,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:50",{"_index":319,"title":{},"body":{"classes/AuthConfigValidator.html":{}}}],["config.dto.ts:79",{"_index":618,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["config.dto.ts:88",{"_index":620,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["config.dto.ts:9",{"_index":3527,"title":{},"body":{"classes/VCT.html":{}}}],["config.entity",{"_index":1101,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"entities/CredentialIssuanceBinding.html":{},"injectables/CredentialsService.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["config.entity.ts",{"_index":1069,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"coverage.html":{}}}],["config.entity.ts:101",{"_index":2635,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:105",{"_index":1832,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:110",{"_index":2627,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:114",{"_index":1818,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:22",{"_index":2617,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["config.entity.ts:25",{"_index":2616,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["config.entity.ts:29",{"_index":2614,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["config.entity.ts:35",{"_index":1831,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:42",{"_index":1833,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.entity.ts:49",{"_index":2634,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:50",{"_index":1830,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:57",{"_index":2629,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:60",{"_index":1825,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:65",{"_index":2631,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:73",{"_index":1815,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.entity.ts:79",{"_index":1823,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:80",{"_index":2633,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:85",{"_index":1834,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:89",{"_index":2637,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:95",{"_index":1821,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.keyid",{"_index":1188,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service",{"_index":1281,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["config.service.ts",{"_index":1110,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["config.service.ts:138",{"_index":1128,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:151",{"_index":1131,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:165",{"_index":1135,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:17",{"_index":2248,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:178",{"_index":1121,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:18",{"_index":1118,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:23",{"_index":2257,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:34",{"_index":1132,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:47",{"_index":2259,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:59",{"_index":2249,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:63",{"_index":2256,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:67",{"_index":2255,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:71",{"_index":2254,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:75",{"_index":2252,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:79",{"_index":2251,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:86",{"_index":2260,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:94",{"_index":2264,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.type",{"_index":344,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["config.url",{"_index":342,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["config/credential",{"_index":1109,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["config_folder",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["config_import",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["config_import_force",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["config_storage_schema",{"_index":207,"title":{},"body":{"modules/AppModule.html":{},"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configmodule",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["configmodule.forroot",{"_index":214,"title":{},"body":{"modules/AppModule.html":{},"modules/StorageModule.html":{}}}],["configpath",{"_index":1148,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["configs",{"_index":1133,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["configservice",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{}}}],["configservice.get",{"_index":250,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{}}}],["configservice.get(\"jwt_issuer",{"_index":2090,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"jwt_secret",{"_index":2086,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"keycloak_algorithm",{"_index":2084,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"log_level",{"_index":261,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"oidc",{"_index":2062,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.getorthrow(\"db_database",{"_index":1609,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_host",{"_index":1601,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_password",{"_index":1607,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_port",{"_index":1603,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_username",{"_index":1605,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"folder",{"_index":297,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configservie",{"_index":1451,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["configurable",{"_index":504,"title":{},"body":{"controllers/AuthController.html":{}}}],["configuration",{"_index":92,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["configuration(@token",{"_index":2670,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configuration(user",{"_index":2647,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configurations",{"_index":359,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/typealiases.html":{}}}],["configured",{"_index":1458,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationRequest.html":{},"injectables/SessionService.html":{}}}],["conflictexception",{"_index":751,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{}}}],["conflictexception(\"certificate",{"_index":2196,"title":{},"body":{"classes/KeyService.html":{}}}],["conflictexception(\"issuer",{"_index":2977,"title":{},"body":{"injectables/ResolverService.html":{}}}],["conflictexception(\"no",{"_index":2582,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["conflictexception('authorization",{"_index":807,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["conflictexception(`request",{"_index":2760,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["connect",{"_index":416,"title":{},"body":{"controllers/AuthController.html":{}}}],["connect/certs",{"_index":2072,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["connect/token",{"_index":2868,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["connection",{"_index":1798,"title":{},"body":{"controllers/HealthController.html":{}}}],["console.error",{"_index":2079,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{}}}],["console.error(\"error",{"_index":2912,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["console.error(err",{"_index":968,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["console.log('session",{"_index":2449,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["console.log(err",{"_index":2770,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["console.warn",{"_index":1756,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["const",{"_index":248,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateKeyDto.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["constraints",{"_index":1194,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["constructor",{"_index":447,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["constructor(@inject(file_storage",{"_index":1729,"title":{},"body":{"injectables/FilesService.html":{}}}],["constructor(basedir",{"_index":2199,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["constructor(configservice",{"_index":727,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"classes/DBKeyService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"injectables/OAuthService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["constructor(configservie",{"_index":1449,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["constructor(credentialconfigrepository",{"_index":1115,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["constructor(cryptoservice",{"_index":1322,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{}}}],["constructor(httpservice",{"_index":2704,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/WebhookService.html":{}}}],["constructor(issuanceconfigrepo",{"_index":1860,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["constructor(keyrepository",{"_index":1644,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["constructor(logger",{"_index":3212,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["constructor(oid4vciservice",{"_index":3619,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["constructor(private",{"_index":1289,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/ResolverService.html":{},"guards/SessionGuard.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["constructor(reflector",{"_index":2015,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["constructor(s3",{"_index":2988,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["constructor(sessionrepository",{"_index":3272,"title":{},"body":{"injectables/SessionService.html":{}}}],["constructor(sessionservice",{"_index":3118,"title":{},"body":{"guards/SessionGuard.html":{}}}],["constructor(storage",{"_index":1715,"title":{},"body":{"injectables/FilesService.html":{}}}],["containing",{"_index":610,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"injectables/WellKnownService.html":{}}}],["content",{"_index":287,"title":{},"body":{"modules/AppModule.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["contenttype",{"_index":1696,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":2021,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/Oid4vpService.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["context.flowtype",{"_index":3240,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.getclass",{"_index":2029,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":2028,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["context.sessionid",{"_index":3242,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.switchtohttp().getrequest",{"_index":3122,"title":{},"body":{"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":3163,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.tenantid",{"_index":3243,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.ts",{"_index":3127,"title":{},"body":{"interfaces/SessionLogContext.html":{},"coverage.html":{}}}],["context.ts:21",{"_index":3129,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["continue",{"_index":1176,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["controller",{"_index":123,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["controller(\":session/.well",{"_index":3602,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["controller(\":session/authorize",{"_index":673,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["controller(\":session/oid4vp",{"_index":2467,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["controller(\":session/vci",{"_index":2436,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["controller(\":tenantid/credentials",{"_index":1309,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["controller(\":tenantid/status",{"_index":3358,"title":{},"body":{"controllers/StatusListController.html":{}}}],["controller(\"health",{"_index":1804,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(\"issuer",{"_index":1286,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["controller(\"key",{"_index":2125,"title":{},"body":{"controllers/KeyController.html":{}}}],["controller(\"oauth",{"_index":2316,"title":{},"body":{"controllers/OAuthController.html":{}}}],["controller(\"presentation",{"_index":2663,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["controller(\"session",{"_index":3107,"title":{},"body":{"controllers/SessionController.html":{}}}],["controllers",{"_index":125,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"modules/CryptoModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"controllers/WellKnownController.html":{},"index.html":{}}}],["convenience",{"_index":85,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["convert",{"_index":1567,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{}}}],["coordinate",{"_index":1632,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["copy",{"_index":3190,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["correct",{"_index":858,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["corresponds",{"_index":369,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/typealiases.html":{}}}],["count",{"_index":936,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/SessionService.html":{}}}],["countby",{"_index":956,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["counter",{"_index":1160,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["coverage",{"_index":3644,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covered",{"_index":2917,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["create",{"_index":962,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"controllers/IssuerManagementController.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["create(session",{"_index":3280,"title":{},"body":{"injectables/SessionService.html":{}}}],["create(tenantid",{"_index":1489,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["create.dto",{"_index":1146,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["create.dto.ts",{"_index":1092,"title":{},"body":{"classes/CredentialConfigCreate.html":{},"classes/PresentationConfigCreateDto.html":{},"coverage.html":{}}}],["create_authorization_request",{"_index":2509,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest",{"_index":2481,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest(session",{"_index":2485,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationservermetadata",{"_index":774,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["created",{"_index":892,"title":{},"body":{"entities/CertEntity.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{}}}],["createdat",{"_index":886,"title":{},"body":{"entities/CertEntity.html":{},"classes/CredentialConfigMapping.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{}}}],["createdatecolumn",{"_index":889,"title":{},"body":{"entities/CertEntity.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["createdsession",{"_index":3329,"title":{},"body":{"injectables/SessionService.html":{}}}],["createdsession.issuanceid",{"_index":3333,"title":{},"body":{"injectables/SessionService.html":{}}}],["createdsession.tenantid",{"_index":3332,"title":{},"body":{"injectables/SessionService.html":{}}}],["createentry",{"_index":3388,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createentry(session",{"_index":3395,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createhash('sha256').update(bufferorstreamtobuffer(body)).digest('base64",{"_index":1739,"title":{},"body":{"injectables/FilesService.html":{}}}],["createheaderandpayload",{"_index":3411,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createlist",{"_index":3389,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createlist(entry",{"_index":3398,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createparamdecorator",{"_index":3500,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["createreadstream",{"_index":2206,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createreadstream(fullpath",{"_index":2233,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createrequest",{"_index":2482,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createrequest(requestid",{"_index":2491,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["creates",{"_index":1436,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{}}}],["createwritestream",{"_index":2207,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createwritestream(fullpath",{"_index":2221,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["creation",{"_index":2622,"title":{},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{}}}],["credential",{"_index":353,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["credential(req",{"_index":2419,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["credential_configurations_supported",{"_index":1244,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{}}}],["credential_configurations_supported[value.id",{"_index":1370,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credential_creation",{"_index":3249,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_endpoint",{"_index":1245,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["credential_ids",{"_index":2612,"title":{},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{}}}],["credential_issuance",{"_index":3248,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_issuer",{"_index":1246,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["credential_revoked",{"_index":2297,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["credential_sets",{"_index":82,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["credential_signing_alg_values_supported",{"_index":1357,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credential_verification",{"_index":3251,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credentialconfig",{"_index":1010,"title":{"entities/CredentialConfig.html":{}},"body":{"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialconfig).key",{"_index":1198,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["credentialconfig.config",{"_index":1918,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialconfig.credentialissuancebindings",{"_index":1223,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["credentialconfig.keybinding",{"_index":1402,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.keyid",{"_index":1919,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialconfig.lifetime",{"_index":1400,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.schema",{"_index":1412,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.statusmanagement",{"_index":1393,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct",{"_index":1407,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct.vct",{"_index":1409,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigcreate",{"_index":1090,"title":{"classes/CredentialConfigCreate.html":{}},"body":{"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"coverage.html":{}}}],["credentialconfigid",{"_index":1220,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"injectables/IssuanceService.html":{}}}],["credentialconfigid.id",{"_index":1910,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialconfigmapping",{"_index":1096,"title":{"classes/CredentialConfigMapping.html":{}},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"coverage.html":{}}}],["credentialconfigrepo",{"_index":1323,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigrepository",{"_index":1119,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["credentialconfigs",{"_index":1106,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{}}}],["credentialconfigservice",{"_index":1107,"title":{"injectables/CredentialConfigService.html":{}},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"index.html":{}}}],["credentialconfiguration",{"_index":1371,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.claims",{"_index":1377,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.disclosureframe",{"_index":1378,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigurationid",{"_index":1331,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["credentialconfigurationids",{"_index":2393,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["credentialconfigurationsupported",{"_index":1024,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{}}}],["credentialcount",{"_index":2592,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialid",{"_index":1338,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialissuancebinding",{"_index":1027,"title":{"entities/CredentialIssuanceBinding.html":{}},"body":{"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialissuancebindingrepo",{"_index":1861,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialissuancebindings",{"_index":1012,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{}}}],["credentialissuancebindings.credentialconfig",{"_index":1907,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialissuer",{"_index":3635,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["credentialissuermetadatadto",{"_index":1235,"title":{"classes/CredentialIssuerMetadataDto.html":{}},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["credentialofferobject",{"_index":3062,"title":{},"body":{"entities/Session.html":{}}}],["credentialpayload",{"_index":3043,"title":{},"body":{"entities/Session.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["credentialresponse",{"_index":2431,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["credentials",{"_index":81,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"classes/NoneTrustPolicy.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["credentials.dto",{"_index":437,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":988,"title":{},"body":{"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:5",{"_index":989,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.dto.ts:7",{"_index":990,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.length",{"_index":2591,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentials.push",{"_index":1911,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentials.split",{"_index":486,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials/credential",{"_index":1876,"title":{},"body":{"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials/credentials.controller",{"_index":1997,"title":{},"body":{"modules/IssuerModule.html":{}}}],["credentials/credentials.service",{"_index":1308,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{}}}],["credentials/entities/credential.entity",{"_index":1231,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials?.length",{"_index":2593,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialsconfigservice",{"_index":1862,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialscontroller",{"_index":1265,"title":{"controllers/CredentialsController.html":{}},"body":{"controllers/CredentialsController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialsmetadatacontroller",{"_index":1296,"title":{"controllers/CredentialsMetadataController.html":{}},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialsservice",{"_index":1288,"title":{"injectables/CredentialsService.html":{}},"body":{"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"index.html":{}}}],["credentialtype",{"_index":3218,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["cron",{"_index":3295,"title":{},"body":{"injectables/SessionService.html":{}}}],["crt",{"_index":15,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{}}}],["crv",{"_index":1623,"title":{},"body":{"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["crypto",{"_index":1195,"title":{},"body":{"injectables/CredentialConfigService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/FilesService.html":{},"modules/KeyModule.html":{}}}],["crypto.service",{"_index":1467,"title":{},"body":{"modules/CryptoModule.html":{},"controllers/KeyController.html":{}}}],["crypto.webcrypto.subtle.exportkey",{"_index":3838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.generatekey",{"_index":3837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.importkey",{"_index":3841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.sign",{"_index":3842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.verify",{"_index":3849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto/crypto.module",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}}}],["crypto/crypto.service",{"_index":758,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["crypto/encryption/encryption.service",{"_index":920,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{}}}],["crypto/key/crypto",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialsService.html":{},"injectables/WellKnownService.html":{}}}],["crypto/key/dto/key",{"_index":432,"title":{},"body":{"controllers/AuthController.html":{}}}],["crypto/key/entities/cert.entity",{"_index":1076,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["crypto/key/key.module",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["crypto_alg",{"_index":1419,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"miscellaneous/variables.html":{}}}],["crypto_validation_schema",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptoImplementatationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptographic",{"_index":2826,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cryptographic_binding_methods_supported",{"_index":1358,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["cryptoimplementatationmodule",{"_index":1413,"title":{"modules/CryptoImplementatationModule.html":{}},"body":{"modules/CryptoImplementatationModule.html":{},"modules/KeyModule.html":{},"index.html":{},"modules.html":{}}}],["cryptoimplementation",{"_index":1421,"title":{"interfaces/CryptoImplementation.html":{}},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptoimplementationservice",{"_index":1324,"title":{"injectables/CryptoImplementationService.html":{}},"body":{"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["cryptokey",{"_index":1523,"title":{},"body":{"classes/DBKeyService.html":{}}}],["cryptomodule",{"_index":156,"title":{"modules/CryptoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["cryptoservice",{"_index":728,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["cryptoservice.getcrypto",{"_index":1538,"title":{},"body":{"classes/DBKeyService.html":{}}}],["cryptotype",{"_index":1454,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ctx",{"_index":3501,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":3502,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["current",{"_index":1890,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["currently",{"_index":110,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["curve",{"_index":1620,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["custom",{"_index":310,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["customprops",{"_index":275,"title":{},"body":{"modules/AppModule.html":{}}}],["d",{"_index":1542,"title":{},"body":{"classes/DBKeyService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["data",{"_index":611,"title":{},"body":{"interfaces/AuthResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TokenPayload.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":1608,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"injectables/OAuthService.html":{}}}],["database/database.module",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":157,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"index.html":{},"modules.html":{}}}],["date",{"_index":888,"title":{},"body":{"entities/CertEntity.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{}}}],["date().gettime",{"_index":1396,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["date().toisostring().slice(0",{"_index":1735,"title":{},"body":{"injectables/FilesService.html":{}}}],["date(date.now",{"_index":3346,"title":{},"body":{"injectables/SessionService.html":{}}}],["date(token.expiresat",{"_index":2886,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["date.gettime",{"_index":2897,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["date.now",{"_index":2571,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["day",{"_index":3304,"title":{},"body":{"injectables/SessionService.html":{}}}],["db",{"_index":1805,"title":{},"body":{"controllers/HealthController.html":{}}}],["db_database",{"_index":1594,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_host",{"_index":1585,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_password",{"_index":1593,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_port",{"_index":1590,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_type",{"_index":1582,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_username",{"_index":1592,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_validation_schema",{"_index":1581,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbkeyservice",{"_index":1474,"title":{"classes/DBKeyService.html":{}},"body":{"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"coverage.html":{}}}],["dbtype",{"_index":1596,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dc+sd",{"_index":2539,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcql",{"_index":2623,"title":{},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{}}}],["dcql_query",{"_index":2515,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{}}}],["dcql_query.length",{"_index":2527,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcqlquerycount",{"_index":2525,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dd",{"_index":271,"title":{},"body":{"modules/AppModule.html":{}}}],["deal",{"_index":1941,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["debug",{"_index":224,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["debugging",{"_index":1786,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["declarations",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["declare",{"_index":68,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["decode",{"_index":1784,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodedvc",{"_index":2762,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.header",{"_index":2765,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.payload",{"_index":2764,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodejwt",{"_index":1752,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodejwt(token",{"_index":1788,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodetoken",{"_index":2031,"title":{},"body":{"injectables/JwtService.html":{}}}],["decodetoken(token",{"_index":1787,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decorator",{"_index":3832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":46,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"entities/CertEntity.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/CredentialIssuanceBinding.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"entities/DisplayEntity.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/RegistrarEntity.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["decrease",{"_index":3337,"title":{},"body":{"injectables/SessionService.html":{}}}],["decryption",{"_index":1640,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe",{"_index":1641,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe(response",{"_index":1646,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["dedicated",{"_index":2372,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{}}}],["deeppartial",{"_index":3281,"title":{},"body":{"injectables/SessionService.html":{}}}],["default",{"_index":228,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"injectables/JwtService.html":{},"entities/KeyEntity.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["default_auth_client_id",{"_index":573,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_auth_client_secret",{"_index":574,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_jwt_secret",{"_index":571,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultclientid",{"_index":2357,"title":{},"body":{"injectables/OAuthService.html":{}}}],["defaultclientsecret",{"_index":2359,"title":{},"body":{"injectables/OAuthService.html":{}}}],["defaultmessage",{"_index":315,"title":{},"body":{"classes/AuthConfigValidator.html":{}}}],["defaultmessage(args",{"_index":317,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["defaultmetrics",{"_index":2290,"title":{},"body":{"modules/MetricModule.html":{}}}],["define",{"_index":690,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{}}}],["defined",{"_index":44,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["defines",{"_index":2802,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["delete",{"_index":1112,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{}}}],["delete(\":id",{"_index":1293,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["delete(':id",{"_index":1272,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["delete(id",{"_index":3283,"title":{},"body":{"injectables/SessionService.html":{}}}],["delete(key",{"_index":1680,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["delete(tenantid",{"_index":1120,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["deleteconfiguration",{"_index":2645,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(@param(\"id",{"_index":2673,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(id",{"_index":2649,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteissuanceconfiguration",{"_index":1268,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["deleteissuanceconfiguration(id",{"_index":1271,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{}}}],["deleteissuanceconfiguration(tenantid",{"_index":1865,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["deletekey",{"_index":2109,"title":{},"body":{"controllers/KeyController.html":{}}}],["deletekey(@token",{"_index":2133,"title":{},"body":{"controllers/KeyController.html":{}}}],["deletekey(token",{"_index":2114,"title":{},"body":{"controllers/KeyController.html":{}}}],["deleteobjectcommand",{"_index":2999,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["deletepresentationconfig",{"_index":2699,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletepresentationconfig(id",{"_index":2711,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletes",{"_index":1122,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{}}}],["deletesession",{"_index":3089,"title":{},"body":{"controllers/SessionController.html":{}}}],["deletesession(id",{"_index":3093,"title":{},"body":{"controllers/SessionController.html":{}}}],["deletion",{"_index":2713,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dependencies",{"_index":146,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"dependencies.html":{},"index.html":{}}}],["desc",{"_index":2756,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/SessionService.html":{}}}],["description",{"_index":9,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"classes/NoneTrustPolicy.html":{},"controllers/OAuthController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"properties.html":{}}}],["details",{"_index":624,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{}}}],["detection",{"_index":1738,"title":{},"body":{"injectables/FilesService.html":{}}}],["determine",{"_index":1819,"title":{},"body":{"entities/IssuanceConfig.html":{},"miscellaneous/variables.html":{}}}],["determines",{"_index":360,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["development/testing",{"_index":944,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["different",{"_index":1425,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{}}}],["digest",{"_index":1339,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["direct_post.jwt",{"_index":2534,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["directory",{"_index":2721,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dirname",{"_index":2212,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["disable",{"_index":2889,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["disclosure",{"_index":1043,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["disclosureframe",{"_index":1013,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{}}}],["discovery",{"_index":414,"title":{},"body":{"controllers/AuthController.html":{}}}],["discovery.dto",{"_index":439,"title":{},"body":{"controllers/AuthController.html":{}}}],["discovery.dto.ts",{"_index":3649,"title":{},"body":{"coverage.html":{}}}],["discoveryendpoint",{"_index":2869,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["discriminated",{"_index":1044,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["discriminator",{"_index":1038,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["display",{"_index":1247,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["displayentity",{"_index":1611,"title":{"entities/DisplayEntity.html":{}},"body":{"entities/DisplayEntity.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["displayinfo",{"_index":1614,"title":{},"body":{"entities/DisplayEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["dns",{"_index":2909,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["document",{"_index":2953,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["documentation",{"_index":3645,"title":{},"body":{"coverage.html":{}}}],["documents",{"_index":2710,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dpop",{"_index":811,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dpop_jkt",{"_index":699,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["dpop_signing_alg_values_supported",{"_index":779,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dpopvalue",{"_index":809,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["driver",{"_index":3472,"title":{},"body":{"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["dto",{"_index":601,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["dto/auth",{"_index":2745,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dto/authentication",{"_index":1836,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{}}}],["dto/authorization",{"_index":2465,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["dto/authorize",{"_index":668,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dto/client",{"_index":436,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/credential",{"_index":1145,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/WellKnownService.html":{}}}],["dto/issuance.dto",{"_index":1847,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["dto/issuer",{"_index":2956,"title":{},"body":{"injectables/ResolverService.html":{}}}],["dto/jwks",{"_index":3600,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["dto/key",{"_index":1531,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{}}}],["dto/notification",{"_index":2435,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["dto/oauth",{"_index":3601,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["dto/oidc",{"_index":438,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/par",{"_index":671,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["dto/presentation",{"_index":2500,"title":{},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["dto/status",{"_index":3414,"title":{},"body":{"injectables/StatusListService.html":{}}}],["dto/token",{"_index":440,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{}}}],["dto/vp",{"_index":2619,"title":{},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{}}}],["duration",{"_index":3177,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["duration}ms",{"_index":3183,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["during",{"_index":3558,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["dynamically",{"_index":2375,"title":{},"body":{"injectables/OAuthService.html":{}}}],["dynamicmodule",{"_index":2152,"title":{},"body":{"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["e",{"_index":1657,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["e.g",{"_index":496,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{},"interfaces/SessionLogContext.html":{}}}],["each",{"_index":69,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{},"entities/StatusListEntity.html":{},"miscellaneous/typealiases.html":{}}}],["easier",{"_index":2931,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["ec",{"_index":1621,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["ec_public",{"_index":1505,"title":{"classes/EC_Public.html":{}},"body":{"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["ecdh",{"_index":1669,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["ecdsa",{"_index":3833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ecdsa_p256",{"_index":3670,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ed25519",{"_index":1460,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["eddsa",{"_index":3836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["element",{"_index":3439,"title":{},"body":{"injectables/StatusListService.html":{}}}],["elements",{"_index":1164,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["elliptic",{"_index":1619,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["elsewhere",{"_index":88,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["embedded",{"_index":1042,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["embeddeddisclosurepolicy",{"_index":39,"title":{"classes/EmbeddedDisclosurePolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["embeddeddisclosurepolicy:26",{"_index":45,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["embeddeddisclosurepolicy:35",{"_index":2983,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["embeddeddisclosurepolicy:45",{"_index":2291,"title":{},"body":{"classes/NoneTrustPolicy.html":{}}}],["embeddeddisclosurepolicy:64",{"_index":303,"title":{},"body":{"classes/AttestationBasedPolicy.html":{}}}],["emits",{"_index":3148,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["emitter",{"_index":3729,"title":{},"body":{"dependencies.html":{}}}],["empty",{"_index":541,"title":{},"body":{"controllers/AuthController.html":{},"injectables/StatusListService.html":{}}}],["enabled",{"_index":1391,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"injectables/RegistrarService.html":{}}}],["enabledebugmode",{"_index":2268,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enablehttplogger",{"_index":249,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enablesessionlogger",{"_index":2267,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["encodeuri(key",{"_index":3019,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["encodeuricomponent(key)}=${encodeuricomponent(value",{"_index":2569,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["encrypt",{"_index":1651,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/KeyEntity.html":{},"miscellaneous/typealiases.html":{}}}],["encrypted",{"_index":1652,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption",{"_index":1639,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption/encryption.service",{"_index":1468,"title":{},"body":{"modules/CryptoModule.html":{}}}],["encryptionservice",{"_index":919,"title":{"injectables/EncryptionService.html":{}},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"coverage.html":{},"index.html":{}}}],["encrypts",{"_index":1649,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["endpoint",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/HealthController.html":{},"modules/MetricModule.html":{},"controllers/OAuthController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{},"modules/StorageModule.html":{}}}],["endpoints",{"_index":630,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/HealthController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["enhanced",{"_index":545,"title":{},"body":{"controllers/AuthController.html":{}}}],["ensure",{"_index":311,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["entities",{"_index":882,"title":{},"body":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"index.html":{}}}],["entities/cert.entity",{"_index":1533,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{}}}],["entities/credential",{"_index":1877,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["entities/credential.entity",{"_index":1095,"title":{},"body":{"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{}}}],["entities/issuance",{"_index":1100,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{}}}],["entities/keys.entity",{"_index":1534,"title":{},"body":{"classes/DBKeyService.html":{},"modules/KeyModule.html":{}}}],["entities/presentation",{"_index":2641,"title":{},"body":{"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["entities/registrar.entity",{"_index":2800,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{}}}],["entities/session.entity",{"_index":3104,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["entities/status",{"_index":3381,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["entitites/client.entity",{"_index":569,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["entity",{"_index":880,"title":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{}},"body":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["entries",{"_index":3404,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entries.length",{"_index":3450,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry",{"_index":1392,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["entry.bits",{"_index":3429,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.elements",{"_index":3446,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.elements[id",{"_index":3445,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.key",{"_index":1674,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["entry.key.d",{"_index":1673,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["entry.relyingpartyid",{"_index":2923,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["entry.tenantid",{"_index":3430,"title":{},"body":{"injectables/StatusListService.html":{}}}],["enum",{"_index":59,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationRequest.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"classes/TokenRequestDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["enumerations",{"_index":3771,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":2263,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"modules/RegistrarModule.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["environments",{"_index":1758,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["equals",{"_index":3038,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals(\"https://json",{"_index":3039,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals(\"object",{"_index":3041,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals('https://json",{"_index":3029,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals('object",{"_index":3036,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["erika",{"_index":2411,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["err",{"_index":967,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/PresentationsService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["err.message",{"_index":971,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/PresentationsService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["error",{"_index":226,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/typealiases.html":{}}}],["error(\"error",{"_index":2913,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["error(\"issuer",{"_index":2959,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error(\"key",{"_index":2982,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error(\"no",{"_index":2774,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["error(\"stack",{"_index":3442,"title":{},"body":{"injectables/StatusListService.html":{}}}],["error(\"subject",{"_index":2968,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error('credential",{"_index":860,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["error(`error",{"_index":3567,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["error(`invalid",{"_index":1782,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["error(`unsupported",{"_index":1461,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["error.children",{"_index":1895,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["error.children.length",{"_index":1896,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["error.constraints",{"_index":1202,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error.message",{"_index":1783,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.name",{"_index":3186,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.property",{"_index":1201,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error.stack",{"_index":3189,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.value",{"_index":1203,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error_description",{"_index":848,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["errormessages",{"_index":1899,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["errors",{"_index":1193,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerService.html":{}}}],["es",{"_index":1661,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["es256",{"_index":531,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{},"miscellaneous/typealiases.html":{}}}],["es256.getverifier(publickey",{"_index":2767,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["eslint",{"_index":2888,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["eslint/no",{"_index":2893,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["etag",{"_index":1703,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["eudi",{"_index":3797,"title":{},"body":{"properties.html":{}}}],["eudiplo",{"_index":135,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["event",{"_index":976,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"classes/NotificationRequestDto.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["events",{"_index":3199,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["everything",{"_index":973,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["example",{"_index":1948,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["examples",{"_index":397,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{}}}],["exchange",{"_index":653,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["execution",{"_index":3144,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["executioncontext",{"_index":2019,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1501,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/StatusListService.html":{}}}],["existing",{"_index":2123,"title":{},"body":{"controllers/KeyController.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{}}}],["exists",{"_index":1138,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"interfaces/FileStorage.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/StatusListService.html":{}}}],["exists(key",{"_index":1682,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["existssync",{"_index":2208,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["exp",{"_index":536,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["expandvariables",{"_index":244,"title":{},"body":{"modules/AppModule.html":{}}}],["expect",{"_index":3543,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["expected",{"_index":2403,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["expectedcode",{"_index":824,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectedpreauthorizedcode",{"_index":819,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectedtxcode",{"_index":821,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectresponse",{"_index":3542,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["expiration",{"_index":1398,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/ParResponseDto.html":{}}}],["expirationdate",{"_index":2885,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["expirationdate.gettime",{"_index":2896,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["expire",{"_index":2089,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expired",{"_index":3082,"title":{},"body":{"entities/Session.html":{},"miscellaneous/enumerations.html":{}}}],["expires_in",{"_index":462,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/OAuthService.html":{},"classes/ParResponseDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{}}}],["expiresat",{"_index":2570,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["expiresin",{"_index":503,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/S3FileStorage.html":{}}}],["expiresinsec",{"_index":1685,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["expiresinseconds",{"_index":834,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["export",{"_index":30,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["exportable",{"_index":1555,"title":{},"body":{"classes/DBKeyService.html":{}}}],["exportjwk",{"_index":1524,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{}}}],["exportjwk(secret.privatekey",{"_index":1664,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exports",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["exportspki",{"_index":1525,"title":{},"body":{"classes/DBKeyService.html":{}}}],["exportspki(publickeyinstance",{"_index":1575,"title":{},"body":{"classes/DBKeyService.html":{}}}],["expose",{"_index":1746,"title":{},"body":{"injectables/FilesService.html":{}}}],["express",{"_index":658,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/EncryptionService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["ext",{"_index":1546,"title":{},"body":{"classes/DBKeyService.html":{}}}],["extends",{"_index":38,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/DBKeyService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/RootOfTrustPolicy.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{}}}],["extends#integrity",{"_index":3517,"title":{},"body":{"classes/VCT.html":{}}}],["external",{"_index":468,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["extname",{"_index":1727,"title":{},"body":{"injectables/FilesService.html":{}}}],["extname(filename",{"_index":1731,"title":{},"body":{"injectables/FilesService.html":{}}}],["extract",{"_index":476,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["extractable",{"_index":1571,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{}}}],["extracterrormessages",{"_index":1888,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extracterrormessages(child",{"_index":1898,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extracterrormessages(error",{"_index":1901,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extractjwt",{"_index":2058,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":2083,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":459,"title":{},"body":{"controllers/AuthController.html":{}}}],["eyjhbgcioijsuzi1niisinr5cci6ikpxvcj9",{"_index":3515,"title":{},"body":{"classes/TokenResponseDto.html":{}}}],["failed",{"_index":1197,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{}}}],["failure",{"_index":3336,"title":{},"body":{"injectables/SessionService.html":{}}}],["failwitherror",{"_index":2067,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fall",{"_index":488,"title":{},"body":{"controllers/AuthController.html":{}}}],["false",{"_index":251,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/VCT.html":{},"miscellaneous/variables.html":{}}}],["false})@isboolean",{"_index":1056,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["false})@isempty",{"_index":3526,"title":{},"body":{"classes/VCT.html":{}}}],["family_name",{"_index":2412,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["fatal",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["fd3ebf28",{"_index":1954,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["fetch",{"_index":2739,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fetched",{"_index":3080,"title":{},"body":{"entities/Session.html":{},"miscellaneous/enumerations.html":{}}}],["fields",{"_index":2587,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["file#asynchronous",{"_index":258,"title":{},"body":{"modules/AppModule.html":{}}}],["file.jwt",{"_index":3437,"title":{},"body":{"injectables/StatusListService.html":{}}}],["file.replace(\".json",{"_index":1172,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["file.stack.pop",{"_index":3441,"title":{},"body":{"injectables/StatusListService.html":{}}}],["file_storage",{"_index":1709,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["filename",{"_index":1724,"title":{},"body":{"injectables/FilesService.html":{}}}],["files",{"_index":1167,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["files.service",{"_index":3471,"title":{},"body":{"modules/StorageModule.html":{}}}],["files/:key",{"_index":1748,"title":{},"body":{"injectables/FilesService.html":{}}}],["filesservice",{"_index":1711,"title":{"injectables/FilesService.html":{}},"body":{"injectables/FilesService.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["filestorage",{"_index":1675,"title":{"interfaces/FileStorage.html":{}},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["fill(0",{"_index":3421,"title":{},"body":{"injectables/StatusListService.html":{}}}],["filter((tenant",{"_index":1158,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["finally",{"_index":2954,"title":{},"body":{"injectables/ResolverService.html":{}}}],["find",{"_index":951,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["findclientbyid",{"_index":998,"title":{},"body":{"injectables/ClientService.html":{}}}],["findclientbyid(clientid",{"_index":952,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["findonebyorfail",{"_index":1373,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["findoptionswhere",{"_index":3289,"title":{},"body":{"injectables/SessionService.html":{}}}],["fine",{"_index":974,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["first",{"_index":1568,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/ResolverService.html":{}}}],["firstvaluefrom",{"_index":2742,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["firstvaluefrom(this.httpservice.get(uri)).then",{"_index":2771,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fixed",{"_index":1953,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["flow",{"_index":348,"title":{},"body":{"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"controllers/OAuthController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/typealiases.html":{}}}],["flow_complete",{"_index":3246,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_error",{"_index":3247,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_start",{"_index":3244,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flowtype",{"_index":2503,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["folder",{"_index":217,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["forbidnonwhitelisted",{"_index":1186,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["forbidunknownvalues",{"_index":1181,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["force",{"_index":1152,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["forcepathstyle",{"_index":3492,"title":{},"body":{"modules/StorageModule.html":{}}}],["format",{"_index":25,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"entities/CertEntity.html":{},"classes/EC_Public.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/ResolverService.html":{}}}],["formats",{"_index":3626,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["forroot",{"_index":2150,"title":{},"body":{"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["forwardref",{"_index":2476,"title":{},"body":{"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{}}}],["found",{"_index":794,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"guards/SessionGuard.html":{},"injectables/StatusListService.html":{}}}],["foundation",{"_index":141,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"properties.html":{}}}],["free",{"_index":3397,"title":{},"body":{"injectables/StatusListService.html":{}}}],["fresh",{"_index":2562,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["fs",{"_index":1144,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"injectables/PresentationsService.html":{}}}],["fullpath",{"_index":2214,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["function",{"_index":2191,"title":{},"body":{"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":3779,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":3048,"title":{},"body":{"entities/Session.html":{}}}],["g",{"_index":2517,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["gauge",{"_index":915,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/SessionService.html":{}}}],["generate",{"_index":1500,"title":{},"body":{"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/OAuthService.html":{},"controllers/PresentationManagementController.html":{}}}],["generateaccesstoken",{"_index":2330,"title":{},"body":{"injectables/OAuthService.html":{}}}],["generateaccesstoken(clientid",{"_index":2339,"title":{},"body":{"injectables/OAuthService.html":{}}}],["generated",{"_index":1493,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["generated/client.gen",{"_index":2861,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["generatekeypair",{"_index":1427,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["generatekeypair(\"ecdh",{"_index":1660,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generates",{"_index":1431,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{}}}],["generatesalt",{"_index":1340,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["generatetoken",{"_index":1760,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generatetoken(payload",{"_index":2035,"title":{},"body":{"injectables/JwtService.html":{}}}],["generatetokenoptions",{"_index":1750,"title":{"interfaces/GenerateTokenOptions.html":{}},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{}}}],["generation",{"_index":1762,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generic",{"_index":1423,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/KeyService.html":{},"injectables/SessionLoggerService.html":{}}}],["get(\".well",{"_index":515,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\":id",{"_index":3109,"title":{},"body":{"controllers/SessionController.html":{}}}],["get(\"jwks.json",{"_index":3612,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get(\"oauth",{"_index":3609,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get(\"openid",{"_index":3607,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get(\"schema/:id",{"_index":1314,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get(\"status",{"_index":3359,"title":{},"body":{"controllers/StatusListController.html":{}}}],["get(\"vct/:id",{"_index":1310,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get('.well",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':id",{"_index":3097,"title":{},"body":{"controllers/SessionController.html":{}}}],["get('oauth",{"_index":3585,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('schema/:id",{"_index":1302,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get('session",{"_index":2448,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["get('status",{"_index":3353,"title":{},"body":{"controllers/StatusListController.html":{}}}],["get('vct/:id",{"_index":1305,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get()@healthcheck",{"_index":1799,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@sessionlogger('session",{"_index":2459,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["get(state",{"_index":3285,"title":{},"body":{"injectables/SessionService.html":{}}}],["get(tenantid",{"_index":1127,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getalg",{"_index":1447,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getall",{"_index":3269,"title":{},"body":{"injectables/SessionService.html":{}}}],["getallsessions",{"_index":3090,"title":{},"body":{"controllers/SessionController.html":{}}}],["getauthorizationserver",{"_index":721,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["getauthorizationserver(tenantid",{"_index":736,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["getauthzmetadata",{"_index":3617,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getauthzmetadata(session",{"_index":3621,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getby",{"_index":791,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["getby(where",{"_index":3288,"title":{},"body":{"injectables/SessionService.html":{}}}],["getbyid",{"_index":1113,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getbyid(tenantid",{"_index":1130,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getcertificate",{"_index":1485,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getcertificate(tenantid",{"_index":1521,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getclients",{"_index":939,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["getconfigs",{"_index":1269,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(@token",{"_index":1290,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(user",{"_index":1274,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfiguration",{"_index":2238,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getcredential",{"_index":1318,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredential(credentialconfigurationid",{"_index":1326,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredentialconfigurationsupported",{"_index":1319,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredentialconfigurationsupported(session",{"_index":1332,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcrypto",{"_index":1448,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getcrypto(alg",{"_index":1455,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getdownloadurl",{"_index":1713,"title":{},"body":{"injectables/FilesService.html":{}}}],["getdownloadurl(key",{"_index":1719,"title":{},"body":{"injectables/FilesService.html":{}}}],["getencryptionpublickey",{"_index":1642,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getencryptionpublickey(tenantid",{"_index":1653,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getexistingrp",{"_index":2820,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["getexistingrp(name",{"_index":2836,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["getexternaloidcconfig",{"_index":2041,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getexternaloidcconfig(configservice",{"_index":2046,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getglobaljwks",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{}}}],["getheadersfromrequest",{"_index":761,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getheadersfromrequest(req",{"_index":801,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"miscellaneous/functions.html":{}}}],["getintegratedoauth2config",{"_index":2042,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getintegratedoauth2config(configservice",{"_index":2050,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getissuanceconfiguration",{"_index":1857,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfiguration(tenantid",{"_index":1867,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid",{"_index":1858,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid(issuanceconfigid",{"_index":1869,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurations",{"_index":1840,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(@token",{"_index":1849,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(user",{"_index":1843,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuermetadata",{"_index":3618,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getissuermetadata(session",{"_index":3623,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getjwks",{"_index":3584,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["getjwks(@sessionentity",{"_index":3613,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["getjwks(session",{"_index":3587,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["getjwks(tenantid",{"_index":3631,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getkeys",{"_index":2110,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkeys(@token",{"_index":2127,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkeys(token",{"_index":2116,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkid",{"_index":1479,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getkid(tenantid",{"_index":1494,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getlist",{"_index":3351,"title":{},"body":{"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["getlist(@param(\"tenantid",{"_index":3361,"title":{},"body":{"controllers/StatusListController.html":{}}}],["getlist(tenantid",{"_index":3352,"title":{},"body":{"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["getlogformat",{"_index":2239,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getloglevel",{"_index":2240,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getoauth2token",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{}}}],["getoauth2token(body",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{}}}],["getobjectcommand",{"_index":3000,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["getoffer",{"_index":1925,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getoffer(res",{"_index":1926,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getoidcdiscovery",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{}}}],["getorthrow(\"public_url",{"_index":2008,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/RegistrarService.html":{}}}],["getpresentationconfig",{"_index":2700,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfig(id",{"_index":2715,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs",{"_index":2701,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs(tenantid",{"_index":2717,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getprivatekey",{"_index":1480,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getprivatekey(tenantid",{"_index":1498,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getpubfromprivatekey",{"_index":1481,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getpubfromprivatekey(privatekey",{"_index":1502,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getpublickey",{"_index":1482,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getpublickey(type",{"_index":1506,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getrepositorytoken",{"_index":2154,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrepositorytoken(certentity",{"_index":2169,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrepositorytoken(keyentity",{"_index":2170,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrequestwithsession",{"_index":2456,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getrequestwithsession(@sessionentity",{"_index":2468,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getrequestwithsession(session",{"_index":2458,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getresponse",{"_index":2457,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["getresponse(body",{"_index":2462,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["gets",{"_index":1496,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getschema",{"_index":1320,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getschema(credentialconfigurationid",{"_index":1334,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getsession",{"_index":3091,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(@param(\"id",{"_index":3110,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(id",{"_index":3096,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsignedurl",{"_index":1677,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getsignedurl(key",{"_index":1684,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getsignedurl?(key",{"_index":1707,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["getsigner",{"_index":1428,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getsigner(privatekeyjwk",{"_index":1433,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["getstream",{"_index":1678,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getstream(key",{"_index":1687,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getting",{"_index":964,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CredentialIssuerMetadataDto.html":{}}}],["gettoken",{"_index":2302,"title":{},"body":{"controllers/OAuthController.html":{}}}],["gettoken(tokenrequest",{"_index":2303,"title":{},"body":{"controllers/OAuthController.html":{}}}],["getvct",{"_index":1321,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getvct(credentialid",{"_index":1336,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getverifier",{"_index":1429,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getverifier(publickeyjwk",{"_index":1438,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["given",{"_index":1123,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"classes/KeyService.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["given_name",{"_index":1960,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["global",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{},"modules/CryptoImplementatationModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["globalthis.headers",{"_index":3783,"title":{},"body":{"miscellaneous/functions.html":{}}}],["go",{"_index":1234,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["grant",{"_index":472,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"controllers/OAuthController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/TokenRequestDto.html":{}}}],["grant_type",{"_index":453,"title":{},"body":{"controllers/AuthController.html":{},"classes/TokenRequestDto.html":{}}}],["grant_types_supported",{"_index":525,"title":{},"body":{"controllers/AuthController.html":{}}}],["granttype",{"_index":764,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["graph",{"_index":3792,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":2287,"title":{"guards/SessionGuard.html":{}},"body":{"modules/MetricModule.html":{},"coverage.html":{},"index.html":{}}}],["guards",{"_index":3116,"title":{},"body":{"guards/SessionGuard.html":{}}}],["handle",{"_index":643,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WellKnownService.html":{}}}],["handleclientcredentialsgrant",{"_index":2331,"title":{},"body":{"injectables/OAuthService.html":{}}}],["handleclientcredentialsgrant(request",{"_index":2341,"title":{},"body":{"injectables/OAuthService.html":{}}}],["handled",{"_index":1780,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{}}}],["handler",{"_index":3145,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["handles",{"_index":631,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["handlesigningkeyerror",{"_index":2077,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["handling",{"_index":1638,"title":{},"body":{"injectables/EncryptionService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["hasclient",{"_index":2332,"title":{},"body":{"injectables/OAuthService.html":{}}}],["hasclient(clientid",{"_index":2343,"title":{},"body":{"injectables/OAuthService.html":{}}}],["hash",{"_index":3835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashalg",{"_index":1385,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["hasher",{"_index":1384,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["hasresponsedata",{"_index":3565,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["haswebhook",{"_index":2585,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["head",{"_index":3016,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.contentlength",{"_index":3022,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.contenttype",{"_index":3023,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.etag",{"_index":3021,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["header",{"_index":100,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["header(\"content",{"_index":3360,"title":{},"body":{"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["header('content",{"_index":3588,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["header.kid",{"_index":2981,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c",{"_index":2960,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c.map",{"_index":2963,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header[\"jwk",{"_index":2971,"title":{},"body":{"injectables/ResolverService.html":{}}}],["headername",{"_index":96,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["headers",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["headers.authorization",{"_index":478,"title":{},"body":{"controllers/AuthController.html":{}}}],["headers[session.claimswebhook!.auth.config.headername",{"_index":3547,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["headers[webhook.auth.config.headername",{"_index":3572,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["headobjectcommand",{"_index":3001,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["health",{"_index":1793,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":1810,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1801,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1795,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1791,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":158,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"index.html":{},"modules.html":{}}}],["help",{"_index":594,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{}}}],["here",{"_index":3640,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["hh:mm:ss",{"_index":272,"title":{},"body":{"modules/AppModule.html":{}}}],["holdercnf",{"_index":1327,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["host",{"_index":1408,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["hostname",{"_index":2528,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${session.id}/oid4vp",{"_index":2532,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${session.tenantid",{"_index":2511,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${tenantid}/credentials",{"_index":1410,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["hot",{"_index":2261,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["hour",{"_index":2368,"title":{},"body":{"injectables/OAuthService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["hours",{"_index":513,"title":{},"body":{"controllers/AuthController.html":{},"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["hs256",{"_index":1770,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["http",{"_index":1747,"title":{},"body":{"injectables/FilesService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["httpmethod",{"_index":753,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["httpmodule",{"_index":1987,"title":{},"body":{"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"modules/VerifierModule.html":{}}}],["https://${this.bucket}.s3.amazonaws.com/${encodeuri(key",{"_index":3020,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["https://github.com/iamolegga/nestjs",{"_index":255,"title":{},"body":{"modules/AppModule.html":{}}}],["https://github.com/openwallet",{"_index":3799,"title":{},"body":{"properties.html":{}}}],["https://json",{"_index":3040,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["https://openwallet",{"_index":140,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["httpservice",{"_index":2153,"title":{},"body":{"modules/KeyModule.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["iat",{"_index":537,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["id",{"_index":16,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{}}}],["id).catch",{"_index":1175,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["id_token_signing_alg_values_supported",{"_index":530,"title":{},"body":{"controllers/AuthController.html":{}}}],["identifier",{"_index":27,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/IssuerMetadata.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"classes/TokenRequestDto.html":{},"coverage.html":{}}}],["ids",{"_index":1104,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["idx",{"_index":3440,"title":{},"body":{"injectables/StatusListService.html":{}}}],["ignore",{"_index":273,"title":{},"body":{"modules/AppModule.html":{}}}],["ignoreexpiration",{"_index":2088,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":1972,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png",{"_index":1944,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png')@apibody({type",{"_index":1932,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["image/png')@useguards(jwtauthguard)@apisecurity('oauth2')@apibody({type",{"_index":2652,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["imeplement",{"_index":1424,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation",{"_index":1457,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/OAuthService.html":{}}}],["implementation.module",{"_index":195,"title":{},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{}}}],["implementation.module.ts",{"_index":1418,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["implementation.service",{"_index":1349,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"injectables/WellKnownService.html":{}}}],["implementation.service.ts",{"_index":1446,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["implementation.service.ts:10",{"_index":1450,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.service.ts:17",{"_index":1452,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.service.ts:26",{"_index":1456,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.ts",{"_index":1422,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["implementation.ts:19",{"_index":1430,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:24",{"_index":1435,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:29",{"_index":1439,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation/crypto",{"_index":194,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["implementation/ed25519.ts",{"_index":3679,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["implements",{"_index":313,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/EC_Public.html":{},"injectables/IssuanceService.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/LocalFileStorage.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{}}}],["import",{"_index":50,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["import(tenantid",{"_index":1510,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["import.dto",{"_index":1532,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/UpdateKeyDto.html":{}}}],["import.dto.ts",{"_index":2095,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{},"coverage.html":{}}}],["import.dto.ts:11",{"_index":2103,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:13",{"_index":2104,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:15",{"_index":2098,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:17",{"_index":2099,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:19",{"_index":2097,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:31",{"_index":2148,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:38",{"_index":2145,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:45",{"_index":2146,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:7",{"_index":2100,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:9",{"_index":2102,"title":{},"body":{"classes/Key.html":{}}}],["imported",{"_index":1206,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["importing",{"_index":2106,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["importjwk",{"_index":1526,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/PresentationsService.html":{}}}],["importjwk(keyentity.key",{"_index":1668,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["importjwk(payload.cnf.jwk",{"_index":2775,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["importjwk(privatekey",{"_index":1576,"title":{},"body":{"classes/DBKeyService.html":{}}}],["imports",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/CredentialConfigService.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{}}}],["include",{"_index":494,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{}}}],["included",{"_index":1828,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["includes",{"_index":2487,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["including",{"_index":2812,"title":{},"body":{"injectables/RegistrarService.html":{},"interfaces/SessionLogContext.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":3128,"title":{},"body":{"interfaces/SessionLogContext.html":{},"classes/WebhookResponse.html":{}}}],["indexes",{"_index":3373,"title":{},"body":{"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["indicates",{"_index":29,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["indicating",{"_index":2679,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["information",{"_index":139,"title":{},"body":{"controllers/AppController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/IssuerManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["inherited",{"_index":43,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/DBKeyService.html":{},"classes/NoneTrustPolicy.html":{},"classes/RootOfTrustPolicy.html":{}}}],["init",{"_index":996,"title":{},"body":{"entities/ClientEntry.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"miscellaneous/typealiases.html":{}}}],["init(tenant",{"_index":1513,"title":{},"body":{"classes/DBKeyService.html":{}}}],["init(tenantid",{"_index":2187,"title":{},"body":{"classes/KeyService.html":{}}}],["initialization",{"_index":3245,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["initialize",{"_index":934,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"classes/KeyService.html":{},"injectables/OAuthService.html":{},"injectables/StatusListService.html":{},"miscellaneous/functions.html":{}}}],["initializeclients",{"_index":2333,"title":{},"body":{"injectables/OAuthService.html":{}}}],["initialized",{"_index":2189,"title":{},"body":{"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["initializes",{"_index":1287,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["inject",{"_index":246,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["inject(\"keyservice",{"_index":2126,"title":{},"body":{"controllers/KeyController.html":{}}}],["injectable",{"_index":717,"title":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["injectables",{"_index":718,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"index.html":{}}}],["injectmetric",{"_index":914,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/SessionService.html":{}}}],["injectmetric(\"sessions",{"_index":3311,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectmetric(\"tenant_client_total",{"_index":932,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["injectrepository",{"_index":913,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["injectrepository(cliententry",{"_index":930,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["injectrepository(credentialconfig",{"_index":1147,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{}}}],["injectrepository(credentialissuancebinding",{"_index":1879,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["injectrepository(issuanceconfig",{"_index":1878,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["injectrepository(keyentity",{"_index":1659,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["injectrepository(presentationconfig",{"_index":2746,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["injectrepository(registrarentity",{"_index":2862,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["injectrepository(session",{"_index":3310,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectrepository(statuslistentity",{"_index":3416,"title":{},"body":{"injectables/StatusListService.html":{}}}],["injectrepository(statusmapping",{"_index":3415,"title":{},"body":{"injectables/StatusListService.html":{}}}],["instance",{"_index":1088,"title":{},"body":{"entities/CredentialConfig.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["instance.decode(`${data}.${signature",{"_index":2763,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["instanceof",{"_index":2081,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LocalFileStorage.html":{}}}],["instantiate",{"_index":1046,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["instead",{"_index":76,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/JwtStrategy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["insufficient_authorization",{"_index":847,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["int",{"_index":3457,"title":{},"body":{"entities/StatusMapping.html":{}}}],["integrated",{"_index":1759,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["integration",{"_index":927,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["intended",{"_index":1628,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["interact",{"_index":3796,"title":{},"body":{"properties.html":{}}}],["interacting",{"_index":2851,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["interaction",{"_index":2811,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["intercept",{"_index":3137,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercept(context",{"_index":3140,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interceptor",{"_index":3135,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercepts",{"_index":3143,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/TokenPayload.html":{},"index.html":{}}}],["interval",{"_index":3315,"title":{},"body":{"injectables/SessionService.html":{}}}],["intervaltime",{"_index":3313,"title":{},"body":{"injectables/SessionService.html":{}}}],["invalid",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["is_public_key",{"_index":2024,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isabsolute",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["isabsolute(folder",{"_index":299,"title":{},"body":{"modules/AppModule.html":{}}}],["isarray",{"_index":52,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/CredentialConfigMapping.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{}}}],["isarray()@isoptional",{"_index":2399,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["isarray()@validatenested({each",{"_index":1854,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["isboolean",{"_index":1072,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isdebugmodeenabled",{"_index":2241,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isdefined",{"_index":53,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"injectables/CredentialConfigService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isdefined()@isarray",{"_index":2606,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["isdefined()@isarray()@validatenested({each",{"_index":304,"title":{},"body":{"classes/AttestationBasedPolicy.html":{}}}],["isdefined()@isenum(policytype",{"_index":1635,"title":{},"body":{"classes/EmbeddedDisclosurePolicy.html":{}}}],["isdefined()@isstring",{"_index":2984,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["isdefined()@isstring({each",{"_index":47,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["isempty",{"_index":906,"title":{},"body":{"entities/CertEntity.html":{},"classes/VCT.html":{}}}],["isenabled",{"_index":2821,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["isenum",{"_index":54,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationRequest.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isenum([\"credential_accepted",{"_index":2298,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["isenum([\"ec",{"_index":2105,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["isenum(['credential_accepted",{"_index":2296,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["isenum(['ec",{"_index":2101,"title":{},"body":{"classes/Key.html":{}}}],["isenum(policytype",{"_index":67,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isenum(responsetype",{"_index":2410,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["isglobal",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"modules/StorageModule.html":{}}}],["ishttploggerenabled",{"_index":2242,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isin",{"_index":103,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isin([\"apikey",{"_index":112,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isin([\"client_credentials",{"_index":3509,"title":{},"body":{"classes/TokenRequestDto.html":{}}}],["isin([\"none",{"_index":364,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isin(['apikey",{"_index":3533,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["isin(['none",{"_index":616,"title":{},"body":{"classes/AuthenticationConfigDto.html":{}}}],["isin([0",{"_index":3466,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnotempty",{"_index":2615,"title":{},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{}}}],["isnotempty()@isstring({each",{"_index":2613,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["isnull",{"_index":3306,"title":{},"body":{"injectables/SessionService.html":{}}}],["isnumber",{"_index":1073,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/StatusUpdateDto.html":{}}}],["isnumber()@isin(['0",{"_index":3464,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnumber()@isoptional()@column('int",{"_index":1816,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["isobject",{"_index":104,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isobject()@column('json')@validatenested()@type(undefined",{"_index":1814,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["isobject()@isoptional",{"_index":2397,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/PresentationRequest.html":{}}}],["isobject()@isoptional()@validatenested()@type(undefined",{"_index":619,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["isobject()@isoptional()@validatenested()@type(undefined)@column('json",{"_index":1820,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["isobject()@type(undefined",{"_index":2147,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["isoptional",{"_index":55,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizeQueries.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isoptional()@column('boolean",{"_index":1055,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isoptional()@column('int",{"_index":1059,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isoptional()@isarray",{"_index":2603,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["isoptional()@isarray()@validatenested()@column('json",{"_index":2626,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["isoptional()@isobject()@column('json",{"_index":2632,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["isoptional()@isstring",{"_index":705,"title":{},"body":{"classes/AuthorizeQueries.html":{},"entities/CredentialConfig.html":{},"classes/SchemaResponse.html":{},"classes/VCT.html":{}}}],["isoptional()@validate(authconfigvalidator",{"_index":614,"title":{},"body":{"classes/AuthenticationConfigDto.html":{}}}],["isoptional()@validatenested()@type(undefined",{"_index":1037,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isoptional()@validatenested()@type(undefined)@column('json",{"_index":1063,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["ispublic",{"_index":1725,"title":{},"body":{"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["iss",{"_index":534,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["issessionloggerenabled",{"_index":2243,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["issetup",{"_index":999,"title":{},"body":{"injectables/ClientService.html":{}}}],["issetup(id",{"_index":953,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["isstring",{"_index":56,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isstring()@column('varchar",{"_index":1034,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["isstring()@isoptional",{"_index":2144,"title":{},"body":{"classes/KeyImportDto.html":{},"classes/StatusUpdateDto.html":{}}}],["isstring()@isoptional()@column('varchar",{"_index":1829,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["issuance",{"_index":356,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["issuance.service",{"_index":1848,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["issuance/credentials",{"_index":1151,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["issuance/entities/credential",{"_index":1080,"title":{},"body":{"entities/CredentialConfig.html":{},"modules/IssuerModule.html":{}}}],["issuance/entities/issuance",{"_index":1350,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{}}}],["issuance/issuance",{"_index":1883,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuance/issuance.controller",{"_index":1999,"title":{},"body":{"modules/IssuerModule.html":{}}}],["issuance/issuance.service",{"_index":760,"title":{},"body":{"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfig",{"_index":864,"title":{"entities/IssuanceConfig.html":{}},"body":{"injectables/AuthorizeService.html":{},"classes/CredentialConfigMapping.html":{},"entities/CredentialIssuanceBinding.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["issuanceconfig.authenticationconfig",{"_index":867,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfig.claimswebhook",{"_index":871,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfig.credentialissuancebindings",{"_index":1227,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["issuanceconfig.credentialissuancebindings.find",{"_index":1360,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["issuanceconfigid",{"_index":1221,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"injectables/IssuanceService.html":{}}}],["issuanceconfigrepo",{"_index":1864,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuancecontroller",{"_index":1837,"title":{"controllers/IssuanceController.html":{}},"body":{"controllers/IssuanceController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["issuancecounter",{"_index":3324,"title":{},"body":{"injectables/SessionService.html":{}}}],["issuancedto",{"_index":1102,"title":{"classes/IssuanceDto.html":{}},"body":{"classes/CredentialConfigMapping.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"coverage.html":{}}}],["issuanceid",{"_index":862,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"injectables/SessionService.html":{}}}],["issuanceservice",{"_index":730,"title":{"injectables/IssuanceService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"index.html":{}}}],["issue",{"_index":2422,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["issued",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/WellKnownService.html":{}}}],["issuer",{"_index":518,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["issuer/authorize/authorize.service",{"_index":3633,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["issuer/authorize/dto/authorize",{"_index":3079,"title":{},"body":{"entities/Session.html":{}}}],["issuer/issuer.module",{"_index":201,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["issuer/oid4vci/dto/offer",{"_index":2496,"title":{},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{}}}],["issuer/oid4vci/oid4vci.service",{"_index":922,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/WellKnownService.html":{}}}],["issuer/status",{"_index":563,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["issuer_state",{"_index":700,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["issuer_validation_schema",{"_index":200,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["issuermanagementcontroller",{"_index":1921,"title":{"controllers/IssuerManagementController.html":{}},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["issuermetadata",{"_index":1975,"title":{"interfaces/IssuerMetadata.html":{}},"body":{"interfaces/IssuerMetadata.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["issuermetadata(session",{"_index":3592,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["issuermodule",{"_index":159,"title":{"modules/IssuerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"index.html":{},"modules.html":{}}}],["issues",{"_index":1329,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["issuing",{"_index":3250,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["isuance",{"_index":1916,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["isurl",{"_index":330,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isused",{"_index":1359,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["isused?.credentialconfig",{"_index":1368,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["isusingexternaloidc",{"_index":1789,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["isuuid",{"_index":2409,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["isuuid()@isoptional",{"_index":2406,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["isverified",{"_index":3848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["it's",{"_index":3557,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["item.name",{"_index":2904,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["iterate",{"_index":1162,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["job",{"_index":3296,"title":{},"body":{"injectables/SessionService.html":{}}}],["joi",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/OAuthModule.html":{},"modules/RegistrarModule.html":{},"modules/SessionModule.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["joi.boolean().default(false",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.boolean().when(joi.ref(\"storage_driver",{"_index":3485,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.exist",{"_index":2806,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["joi.number().default(24",{"_index":3263,"title":{},"body":{"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["joi.number().default(60",{"_index":3261,"title":{},"body":{"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["joi.number().when(\"db_type",{"_index":1591,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["joi.object",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.optional",{"_index":1588,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.required",{"_index":1589,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/RegistrarModule.html":{},"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string",{"_index":222,"title":{},"body":{"modules/AppModule.html":{},"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(\"../../assets/config",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default(\"../../tmp",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default(\"24h",{"_index":587,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(\"eudiplo",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default(\"http://localhost:3000",{"_index":2005,"title":{},"body":{"modules/IssuerModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(\"rs256",{"_index":581,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(\"uploads",{"_index":3478,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(default_auth_client_id",{"_index":591,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(default_auth_client_secret",{"_index":589,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(default_jwt_secret",{"_index":583,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().optional",{"_index":575,"title":{},"body":{"modules/AuthModule.html":{},"modules/OAuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().optional().default(\"eudiplo",{"_index":585,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":578,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().uri().when(\"km_type",{"_index":2164,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid(\"db",{"_index":2159,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid(\"es256\").default(\"es256",{"_index":1420,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid(\"local",{"_index":3474,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid(\"sqlite",{"_index":1583,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when(\"db_type",{"_index":1586,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when(\"km_type",{"_index":2166,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when(\"registrar_url",{"_index":2805,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when(joi.ref(\"storage_driver",{"_index":3477,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.when(\"oidc",{"_index":577,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["join",{"_index":186,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"modules/DatabaseModule.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["join(__dirname",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["join(configpath",{"_index":1165,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["join(folder",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["join(this.basedir",{"_index":2215,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["jose",{"_index":1527,"title":{},"body":{"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"dependencies.html":{}}}],["joseheaderparameters",{"_index":2192,"title":{},"body":{"classes/KeyService.html":{}}}],["json",{"_index":242,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/SchemaResponse.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["json.parse",{"_index":1169,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["json.stringify",{"_index":3086,"title":{},"body":{"entities/Session.html":{}}}],["json.stringify(data",{"_index":3181,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["json.stringify(presentationconfig.dcql_query).replace",{"_index":2516,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["json.stringify(presentationconfig.registrationcert).replace",{"_index":2520,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jsonwebkey",{"_index":1434,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["junction",{"_index":1214,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["jwe",{"_index":1650,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwk",{"_index":754,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"miscellaneous/variables.html":{}}}],["jwk_ec_private",{"_index":1503,"title":{},"body":{"classes/DBKeyService.html":{}}}],["jwk_ec_public",{"_index":1622,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["jwks",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{},"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{}}}],["jwks_uri",{"_index":521,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["jwksrequestsperminute",{"_index":2075,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwksresponsedto",{"_index":1634,"title":{"classes/JwksResponseDto.html":{}},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["jwksuri",{"_index":2070,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwt",{"_index":817,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{}}}],["jwt.service",{"_index":442,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["jwt.setaudience(options.audience",{"_index":1777,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.sign(secretkey",{"_index":1778,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.strategy",{"_index":570,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt/crypto",{"_index":1342,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["jwt/jwt",{"_index":1345,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["jwt/sd",{"_index":1347,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["jwt/types",{"_index":1522,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["jwt_alg_values",{"_index":2540,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jwt_expires_in",{"_index":586,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["jwt_issuer",{"_index":584,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["jwt_secret",{"_index":582,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":553,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"coverage.html":{},"index.html":{}}}],["jwtdecrypt",{"_index":1658,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtdecrypt(response",{"_index":1670,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtfromrequest",{"_index":2049,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtheaderparameters",{"_index":1519,"title":{},"body":{"classes/DBKeyService.html":{}}}],["jwtpayload",{"_index":1518,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{}}}],["jwtservice",{"_index":441,"title":{"injectables/JwtService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{},"index.html":{}}}],["jwtstrategy",{"_index":554,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{}}}],["jwtstrategy.getexternaloidcconfig(configservice",{"_index":2063,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy.getintegratedoauth2config(configservice",{"_index":2064,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtverify",{"_index":1753,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/PresentationsService.html":{}}}],["jwtverify(`${data}.${signature",{"_index":2776,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["jwtverify(token",{"_index":1781,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwtwithstatuslistpayload",{"_index":1344,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/StatusListService.html":{}}}],["kb",{"_index":1353,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{}}}],["kbverifier",{"_index":2696,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keep",{"_index":1087,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["keepdiscriminatorproperty",{"_index":1039,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["key",{"_index":23,"title":{"classes/Key.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/UpdateKeyDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["key).then",{"_index":2777,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["key.key",{"_index":1563,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.kid",{"_index":2980,"title":{},"body":{"injectables/ResolverService.html":{}}}],["key.service",{"_index":1535,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{}}}],["key.service.ts",{"_index":1476,"title":{},"body":{"classes/DBKeyService.html":{},"coverage.html":{}}}],["key.service.ts:118",{"_index":1499,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:153",{"_index":1508,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:158",{"_index":1509,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:28",{"_index":1488,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:62",{"_index":1504,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key/entities/cert.entity",{"_index":1469,"title":{},"body":{"modules/CryptoModule.html":{}}}],["key/entities/keys.entity",{"_index":1471,"title":{},"body":{"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{}}}],["key/key.controller",{"_index":1472,"title":{},"body":{"modules/CryptoModule.html":{}}}],["key_ops",{"_index":1544,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key_validation_schema",{"_index":196,"title":{},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["keybinding",{"_index":1014,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/PresentationsService.html":{}}}],["keybindingnonce",{"_index":2726,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keybindings",{"_index":2737,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keycloak",{"_index":2080,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["keycloak_algorithm",{"_index":580,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["keycloak_internal_issuer_url",{"_index":576,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["keycloakissuerurl",{"_index":2069,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["keycloakissuerurl}/protocol/openid",{"_index":2071,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["keycontroller",{"_index":1466,"title":{"controllers/KeyController.html":{}},"body":{"modules/CryptoModule.html":{},"controllers/KeyController.html":{},"coverage.html":{}}}],["keyentity",{"_index":1470,"title":{"entities/KeyEntity.html":{}},"body":{"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"coverage.html":{}}}],["keyid",{"_index":1015,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/WellKnownService.html":{}}}],["keyimportdto",{"_index":1511,"title":{"classes/KeyImportDto.html":{}},"body":{"classes/DBKeyService.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["keymodule",{"_index":160,"title":{"modules/KeyModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{},"index.html":{},"modules.html":{}}}],["keymodule.forroot",{"_index":294,"title":{},"body":{"modules/AppModule.html":{}}}],["keyobj",{"_index":2171,"title":{"classes/KeyObj.html":{}},"body":{"classes/KeyObj.html":{},"classes/KeyService.html":{},"coverage.html":{}}}],["keypair",{"_index":1432,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["keypair.privatekey",{"_index":3840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keypair.publickey",{"_index":3839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyrepository",{"_index":1487,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"modules/KeyModule.html":{}}}],["keyresponsedto",{"_index":393,"title":{"classes/KeyResponseDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["keys",{"_index":543,"title":{},"body":{"controllers/AuthController.html":{},"entities/CertEntity.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyResponseDto.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["keys.privatekey",{"_index":1551,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice",{"_index":1478,"title":{"classes/KeyService.html":{}},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"coverage.html":{}}}],["keyservice:109",{"_index":1516,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:136",{"_index":1495,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:152",{"_index":1507,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:195",{"_index":1520,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:46",{"_index":1512,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:77",{"_index":1514,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:86",{"_index":1490,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyusage",{"_index":2140,"title":{},"body":{"entities/KeyEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["kid",{"_index":2096,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["km_type",{"_index":2158,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["kmtype",{"_index":2168,"title":{},"body":{"modules/KeyModule.html":{}}}],["know",{"_index":2918,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["known",{"_index":3583,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["known.controller",{"_index":212,"title":{},"body":{"modules/AppModule.html":{}}}],["known.controller.ts",{"_index":3581,"title":{},"body":{"controllers/WellKnownController.html":{},"coverage.html":{}}}],["known.controller.ts:47",{"_index":3596,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:59",{"_index":3586,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:71",{"_index":3591,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.service",{"_index":213,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{}}}],["known.service.ts",{"_index":3615,"title":{},"body":{"injectables/WellKnownService.html":{},"coverage.html":{}}}],["known.service.ts:16",{"_index":3620,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:39",{"_index":3624,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:77",{"_index":3622,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:87",{"_index":3632,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known/dto/credential",{"_index":1237,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"coverage.html":{}}}],["known/dto/jwks",{"_index":1530,"title":{},"body":{"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["known/dto/oauth",{"_index":2380,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"coverage.html":{}}}],["known/jwks.json",{"_index":523,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["known/jwks.json')@apioperation({summary",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{}}}],["known/jwt",{"_index":2974,"title":{},"body":{"injectables/ResolverService.html":{}}}],["known/oauth",{"_index":411,"title":{},"body":{"controllers/AuthController.html":{}}}],["known/openid",{"_index":2871,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["known/well",{"_index":211,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["kty",{"_index":1624,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["labelnames",{"_index":3265,"title":{},"body":{"modules/SessionModule.html":{}}}],["labs.github.io/eudiplo/latest",{"_index":142,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["labs/eudiplo.git",{"_index":3803,"title":{},"body":{"properties.html":{}}}],["labs/eudiplo/issues",{"_index":3800,"title":{},"body":{"properties.html":{}}}],["last",{"_index":904,"title":{},"body":{"entities/CertEntity.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{}}}],["later",{"_index":546,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{}}}],["legend",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["length",{"_index":3182,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["lessthan",{"_index":3307,"title":{},"body":{"injectables/SessionService.html":{}}}],["lessthan(new",{"_index":3345,"title":{},"body":{"injectables/SessionService.html":{}}}],["level",{"_index":260,"title":{},"body":{"modules/AppModule.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["levels",{"_index":2275,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["levels[level.tolowercase",{"_index":2278,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["license",{"_index":3801,"title":{},"body":{"properties.html":{}}}],["lifetime",{"_index":1016,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TokenResponseDto.html":{},"injectables/WellKnownService.html":{}}}],["line",{"_index":2891,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["link",{"_index":354,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["links",{"_index":1826,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["list",{"_index":1252,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/PresentationsService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"dependencies.html":{}}}],["list')@header('content",{"_index":3354,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.controller",{"_index":3385,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.controller.ts",{"_index":3349,"title":{},"body":{"controllers/StatusListController.html":{},"coverage.html":{}}}],["list.controller.ts:17",{"_index":3356,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.entity",{"_index":3382,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["list.entity.ts",{"_index":3365,"title":{},"body":{"entities/StatusListEntity.html":{},"coverage.html":{}}}],["list.entity.ts:13",{"_index":3374,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:19",{"_index":3370,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:25",{"_index":3372,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:31",{"_index":3369,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:37",{"_index":3371,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.module",{"_index":565,"title":{},"body":{"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/SessionModule.html":{}}}],["list.module.ts",{"_index":3380,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.service",{"_index":924,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{}}}],["list.service.ts",{"_index":3387,"title":{},"body":{"injectables/StatusListService.html":{},"coverage.html":{}}}],["list.service.ts:105",{"_index":3400,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:115",{"_index":3396,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:157",{"_index":3408,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:173",{"_index":3410,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:20",{"_index":3394,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:36",{"_index":3401,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:59",{"_index":3399,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list/dto/status",{"_index":3103,"title":{},"body":{"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["list/entities/status",{"_index":3364,"title":{},"body":{"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"coverage.html":{}}}],["list/status",{"_index":564,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"coverage.html":{}}}],["listen",{"_index":978,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["literal",{"_index":608,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":942,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{}}}],["loadclients",{"_index":943,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["loadconfiguration",{"_index":2244,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loadtypemetadataformat",{"_index":1389,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["local",{"_index":1708,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"modules/StorageModule.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["local_storage_dir",{"_index":3476,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["locale",{"_index":1616,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["localfilestorage",{"_index":2197,"title":{"classes/LocalFileStorage.html":{}},"body":{"classes/LocalFileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["log",{"_index":2277,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["log_debug_mode",{"_index":238,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_enable_http_logger",{"_index":236,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_enable_session_logger",{"_index":237,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["log_format",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_level",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["logauthorizationrequest",{"_index":3201,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logauthorizationrequest(context",{"_index":3214,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcontext",{"_index":2502,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["logcredentialissuance",{"_index":3202,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialissuance(context",{"_index":3217,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification",{"_index":3203,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification(context",{"_index":3220,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete",{"_index":3204,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete(context",{"_index":3222,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror",{"_index":3205,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror(context",{"_index":3225,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart",{"_index":3206,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart(context",{"_index":3227,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logformat",{"_index":2269,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["logged",{"_index":3131,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["logger",{"_index":1116,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.decorator",{"_index":2434,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logger.decorator.ts",{"_index":3712,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.interceptor",{"_index":1991,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["logger.interceptor.ts",{"_index":3134,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{}}}],["logger.interceptor.ts:136",{"_index":3150,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:19",{"_index":3139,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:44",{"_index":3142,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.service",{"_index":1992,"title":{},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["logger.service.ts",{"_index":3198,"title":{},"body":{"injectables/SessionLoggerService.html":{},"coverage.html":{}}}],["logger.service.ts:102",{"_index":3219,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:12",{"_index":3213,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:124",{"_index":3221,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:146",{"_index":3216,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:163",{"_index":3236,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:180",{"_index":3230,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:202",{"_index":3232,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:221",{"_index":3234,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:30",{"_index":3237,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:37",{"_index":3228,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:56",{"_index":3223,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:75",{"_index":3226,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger/session",{"_index":3541,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["loggerconfigservice",{"_index":2236,"title":{"injectables/LoggerConfigService.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["loggerconfiguration",{"_index":2250,"title":{"interfaces/LoggerConfiguration.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["loggermodule",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loggermodule.forrootasync",{"_index":245,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":254,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["loglevel",{"_index":2253,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["lognotification",{"_index":3207,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["lognotification(context",{"_index":3229,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logo",{"_index":1617,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["logs",{"_index":2489,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logsession",{"_index":3208,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsession(context",{"_index":3231,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror",{"_index":3209,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror(context",{"_index":3233,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange",{"_index":3210,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange(context",{"_index":3235,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["long",{"_index":2621,"title":{},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{}}}],["made",{"_index":2620,"title":{},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{}}}],["main",{"_index":128,"title":{},"body":{"controllers/AppController.html":{}}}],["maintain",{"_index":605,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["make",{"_index":502,"title":{},"body":{"controllers/AuthController.html":{}}}],["makegaugeprovider",{"_index":560,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{}}}],["makes",{"_index":1045,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/WellKnownService.html":{}}}],["making",{"_index":2708,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["manage",{"_index":884,"title":{},"body":{"entities/CertEntity.html":{},"entities/IssuanceConfig.html":{},"injectables/OAuthService.html":{}}}],["management",{"_index":1283,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["management.controller",{"_index":2000,"title":{},"body":{"modules/IssuerModule.html":{}}}],["management.controller.ts",{"_index":1924,"title":{},"body":{"controllers/IssuerManagementController.html":{},"coverage.html":{}}}],["management.controller.ts:83",{"_index":1934,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management/credentials",{"_index":1267,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["management/issuance",{"_index":1839,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["management/issuer",{"_index":1923,"title":{},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["managing",{"_index":1111,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["many",{"_index":1215,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["manytoone",{"_index":1074,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{}}}],["manytoone(undefined",{"_index":1053,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{}}}],["map",{"_index":2350,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{}}}],["map((_",{"_index":3422,"title":{},"body":{"injectables/StatusListService.html":{}}}],["map((error",{"_index":1900,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["mapping",{"_index":1098,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity",{"_index":3384,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity.ts",{"_index":3453,"title":{},"body":{"entities/StatusMapping.html":{},"coverage.html":{}}}],["mapping.entity.ts:12",{"_index":3458,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:15",{"_index":3456,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:6",{"_index":3460,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:9",{"_index":3459,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mark",{"_index":3852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marks",{"_index":3301,"title":{},"body":{"injectables/SessionService.html":{}}}],["match",{"_index":326,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/ResolverService.html":{}}}],["matches",{"_index":312,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["matching",{"_index":32,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":2138,"title":{},"body":{"entities/KeyEntity.html":{}}}],["math.floor(date.now",{"_index":2371,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{}}}],["math.floor(new",{"_index":2546,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["math.random",{"_index":3425,"title":{},"body":{"injectables/StatusListService.html":{}}}],["math.round(new",{"_index":1395,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["max",{"_index":1961,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["maybe",{"_index":2934,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["media",{"_index":3628,"title":{},"body":{"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mediatype",{"_index":3593,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["mediatype.application_jwt",{"_index":3606,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["mediatype.application_jwt)@get('openid",{"_index":3595,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["message",{"_index":3187,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["messages",{"_index":1889,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.join",{"_index":1903,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.length",{"_index":1902,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.push",{"_index":1891,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["metadata",{"_index":1240,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/IssuerMetadata.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["metadata+jwt",{"_index":3637,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["metadata.'})@apiproduces(mediatype.application_json",{"_index":3594,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["metadata.controller",{"_index":1998,"title":{},"body":{"modules/IssuerModule.html":{}}}],["metadata.controller.ts",{"_index":1299,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"coverage.html":{}}}],["metadata.controller.ts:15",{"_index":1306,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.controller.ts:25",{"_index":1303,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.credential_issuer",{"_index":3638,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["metadata.dto",{"_index":2957,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["metadata.dto.ts",{"_index":1238,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"coverage.html":{}}}],["metadata.dto.ts:12",{"_index":1251,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:16",{"_index":1257,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:20",{"_index":1261,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:24",{"_index":1254,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:33",{"_index":1260,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:37",{"_index":1256,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:41",{"_index":1249,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:8",{"_index":1258,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata/credentials",{"_index":1298,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["metadata/dto/credential",{"_index":1077,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["metadata/dto/schema",{"_index":1079,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/SchemaResponse.html":{},"coverage.html":{}}}],["metadata/vct/${credentialconfig.id",{"_index":1411,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["method",{"_index":280,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/typealiases.html":{}}}],["methods",{"_index":127,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["metric/metric.module",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["metricmodule",{"_index":161,"title":{"modules/MetricModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetricModule.html":{},"index.html":{},"modules.html":{}}}],["metrics",{"_index":935,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"modules/MetricModule.html":{},"injectables/SessionService.html":{}}}],["middleware",{"_index":3795,"title":{},"body":{"properties.html":{}}}],["mirko",{"_index":3805,"title":{},"body":{"properties.html":{}}}],["miscellaneous",{"_index":3770,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["misused",{"_index":2894,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["mkdirsync",{"_index":2209,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["mkdirsync(dirname(fullpath",{"_index":2216,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["mm",{"_index":270,"title":{},"body":{"modules/AppModule.html":{},"injectables/WellKnownService.html":{}}}],["modify",{"_index":1965,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["modifying",{"_index":3191,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["module",{"_index":143,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":145,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["mollik",{"_index":3806,"title":{},"body":{"properties.html":{}}}],["more",{"_index":138,"title":{},"body":{"controllers/AppController.html":{},"entities/Session.html":{}}}],["move",{"_index":2354,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{}}}],["mso_mdoc",{"_index":2538,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["multi",{"_index":3074,"title":{},"body":{"entities/Session.html":{}}}],["mustermann",{"_index":2413,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["mysql2",{"_index":3754,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":99,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"entities/DisplayEntity.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name)?.id",{"_index":2905,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["namedcurve",{"_index":3834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["necessary",{"_index":2488,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["need",{"_index":420,"title":{},"body":{"controllers/AuthController.html":{},"entities/CredentialIssuanceBinding.html":{},"injectables/RegistrarService.html":{}}}],["needed",{"_index":73,"title":{},"body":{"classes/AllowListPolicy.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{}}}],["needs",{"_index":856,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["nestinterceptor",{"_index":3155,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["nestjs",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["nestjs/axios",{"_index":1988,"title":{},"body":{"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"modules/VerifierModule.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":131,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"modules/VerifierModule.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2022,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":3728,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":557,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":3732,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionService.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":133,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1803,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":559,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["new",{"_index":466,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":2890,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/StatusListService.html":{}}}],["next.handle",{"_index":3161,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["next.handle().pipe",{"_index":3175,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["node:crypto",{"_index":655,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{}}}],["nodejs",{"_index":1343,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["noncce",{"_index":3078,"title":{},"body":{"entities/Session.html":{}}}],["nonce",{"_index":2418,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["nonce(@sessionentity",{"_index":2446,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["nonce(session",{"_index":2423,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["none",{"_index":61,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/NoneTrustPolicy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["nonetrustpolicy",{"_index":77,"title":{"classes/NoneTrustPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["not(isnull",{"_index":3326,"title":{},"body":{"injectables/SessionService.html":{}}}],["notfoundexception",{"_index":3121,"title":{},"body":{"guards/SessionGuard.html":{}}}],["notification",{"_index":1262,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["notification_endpoint",{"_index":1248,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["notification_id",{"_index":2294,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["notificationevent",{"_index":2295,"title":{},"body":{"classes/NotificationRequestDto.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["notificationrequestdto",{"_index":2292,"title":{"classes/NotificationRequestDto.html":{}},"body":{"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["notifications",{"_index":120,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/Oid4vciController.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["notifications(body",{"_index":2426,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["notifywebhook",{"_index":1813,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/Session.html":{}}}],["now",{"_index":540,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"injectables/OAuthService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["null",{"_index":928,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/RegistrarService.html":{}}}],["nullable",{"_index":895,"title":{},"body":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["number",{"_index":596,"title":{},"body":{"modules/AuthModule.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/ParResponseDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"modules/SessionModule.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{}}}],["oauth",{"_index":2301,"title":{},"body":{"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["oauth.controller",{"_index":2324,"title":{},"body":{"modules/OAuthModule.html":{}}}],["oauth.service",{"_index":2314,"title":{},"body":{"controllers/OAuthController.html":{},"modules/OAuthModule.html":{}}}],["oauth2",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{}}}],["oauth2authorizationserver",{"_index":738,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["oauth2authorizationserverresponse",{"_index":2379,"title":{"classes/Oauth2AuthorizationServerResponse.html":{}},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["oauth2client",{"_index":2816,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["oauth_client_id",{"_index":2326,"title":{},"body":{"modules/OAuthModule.html":{},"miscellaneous/variables.html":{}}}],["oauth_client_secret",{"_index":2327,"title":{},"body":{"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"miscellaneous/variables.html":{}}}],["oauth_validation_schema",{"_index":2325,"title":{},"body":{"modules/OAuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["oauthcontroller",{"_index":2299,"title":{"controllers/OAuthController.html":{}},"body":{"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"coverage.html":{}}}],["oauthmodule",{"_index":2318,"title":{"modules/OAuthModule.html":{}},"body":{"modules/OAuthModule.html":{},"index.html":{},"modules.html":{}}}],["oauthservice",{"_index":2313,"title":{"injectables/OAuthService.html":{}},"body":{"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"coverage.html":{},"index.html":{}}}],["obj",{"_index":334,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/S3FileStorage.html":{}}}],["obj.body",{"_index":3024,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.contentlength",{"_index":3026,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.contenttype",{"_index":3025,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.method",{"_index":337,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["object",{"_index":341,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["object.dto",{"_index":2194,"title":{},"body":{"classes/KeyService.html":{}}}],["object.dto.ts",{"_index":2172,"title":{},"body":{"classes/KeyObj.html":{},"coverage.html":{}}}],["object.dto.ts:11",{"_index":2174,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.dto.ts:15",{"_index":2175,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.dto.ts:19",{"_index":2173,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.entries(params",{"_index":2568,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["object.keys(res.vp_token",{"_index":2778,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["object.values",{"_index":1892,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["objects",{"_index":1185,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"classes/SchemaResponse.html":{}}}],["observable",{"_index":3147,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["obtain",{"_index":2307,"title":{},"body":{"controllers/OAuthController.html":{}}}],["offer",{"_index":861,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["offerrequestdto",{"_index":1927,"title":{"classes/OfferRequestDto.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/Session.html":{},"coverage.html":{}}}],["offerresponse",{"_index":1930,"title":{"classes/OfferResponse.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"coverage.html":{}}}],["offerurl",{"_index":3044,"title":{},"body":{"entities/Session.html":{}}}],["oid4vci",{"_index":345,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"miscellaneous/variables.html":{}}}],["oid4vci/dto/offer",{"_index":1939,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["oid4vci/entities/display.entity",{"_index":2001,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/oid4vci.controller",{"_index":2002,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/oid4vci.service",{"_index":2003,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/util",{"_index":762,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["oid4vcicontroller",{"_index":1986,"title":{"controllers/Oid4vciController.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["oid4vciservice",{"_index":921,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["oid4vp",{"_index":352,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/SessionLogContext.html":{},"miscellaneous/variables.html":{}}}],["oid4vp.controller",{"_index":2479,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["oid4vp.service",{"_index":2466,"title":{},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["oid4vp/dto/presentation",{"_index":2657,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vp/oid4vp.module",{"_index":2689,"title":{},"body":{"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{}}}],["oid4vp/oid4vp.service",{"_index":2658,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vpcontroller",{"_index":2452,"title":{"controllers/Oid4vpController.html":{}},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"coverage.html":{}}}],["oid4vpmodule",{"_index":1981,"title":{"modules/Oid4vpModule.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["oid4vpservice",{"_index":729,"title":{"injectables/Oid4vpService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"coverage.html":{},"index.html":{}}}],["oidc",{"_index":413,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["oidcdiscoverydto",{"_index":425,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["oidcissuerurl",{"_index":2864,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/.well",{"_index":2870,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/protocol/openid",{"_index":2867,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["older",{"_index":3303,"title":{},"body":{"injectables/SessionService.html":{}}}],["omittype",{"_index":1094,"title":{},"body":{"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/UpdateKeyDto.html":{}}}],["omittype(credentialconfig",{"_index":1093,"title":{},"body":{"classes/CredentialConfigCreate.html":{}}}],["omittype(issuanceconfig",{"_index":1103,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{}}}],["omittype(keyimportdto",{"_index":3516,"title":{},"body":{"classes/UpdateKeyDto.html":{}}}],["omittype(presentationconfig",{"_index":2640,"title":{},"body":{"classes/PresentationConfigCreateDto.html":{}}}],["on(\"error",{"_index":2227,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["on(\"finish",{"_index":2225,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["onapplicationbootstrap",{"_index":912,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{}}}],["once",{"_index":2829,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["ondelete",{"_index":1032,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{}}}],["one",{"_index":1497,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/RegistrarService.html":{}}}],["ones",{"_index":1375,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["onetomany",{"_index":1075,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["onetomany(undefined",{"_index":1028,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["onmoduleinit",{"_index":1859,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["ontenantinit",{"_index":1643,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit(tenantid",{"_index":1655,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["openid",{"_index":415,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{}}}],["openid4vc",{"_index":361,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/typealiases.html":{}}}],["openid4vc/oauth2",{"_index":757,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"dependencies.html":{}}}],["openid4vc/openid4vci",{"_index":1071,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["openid4vc/openid4vp",{"_index":3740,"title":{},"body":{"dependencies.html":{}}}],["openid4vc/utils",{"_index":3741,"title":{},"body":{"dependencies.html":{}}}],["openid4vci",{"_index":629,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/WellKnownController.html":{}}}],["openid4vp://?${(await",{"_index":844,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["openid4vp://?${querystring",{"_index":2577,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["openid4vp://?${values.uri",{"_index":2669,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["openidvci",{"_index":3636,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["operation",{"_index":1126,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["operations",{"_index":1453,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"controllers/Oid4vpController.html":{},"injectables/RegistrarService.html":{}}}],["optional",{"_index":17,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":265,"title":{},"body":{"modules/AppModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["options.audience",{"_index":1776,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["options.dto",{"_index":2501,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["options.dto.ts",{"_index":2681,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"coverage.html":{}}}],["options.expiresin",{"_index":1765,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["opts",{"_index":1692,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["opts?.acl",{"_index":3011,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["opts?.checksum",{"_index":3014,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["opts?.contenttype",{"_index":2231,"title":{},"body":{"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["opts?.metadata",{"_index":3010,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["order",{"_index":2755,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["original",{"_index":3192,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["originalname",{"_index":1741,"title":{},"body":{"injectables/FilesService.html":{}}}],["otherwhise",{"_index":1940,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["otherwise",{"_index":579,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":169,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["ov",{"_index":257,"title":{},"body":{"modules/AppModule.html":{}}}],["over",{"_index":1163,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["override",{"_index":1959,"title":{},"body":{"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["overrides",{"_index":2400,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["overview",{"_index":3784,"title":{"index.html":{}},"body":{"index.html":{}}}],["overwrite",{"_index":1875,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["overwritten",{"_index":1139,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["p",{"_index":1662,"title":{},"body":{"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["package",{"_index":3722,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pairs",{"_index":612,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["par",{"_index":635,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(@body",{"_index":678,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(body",{"_index":645,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["param",{"_index":449,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["param(\"id",{"_index":1294,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/SessionController.html":{}}}],["param(\"tenantid",{"_index":1312,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["parameter",{"_index":604,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["parameters",{"_index":320,"title":{},"body":{"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":2564,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["parresponsedto",{"_index":670,"title":{"classes/ParResponseDto.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{},"coverage.html":{}}}],["parse",{"_index":2728,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseaccesstokenrequest",{"_index":799,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsechallengerequest",{"_index":722,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsechallengerequest(body",{"_index":739,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["parsed",{"_index":2729,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parsedaccesstokenauthorizationcoderequestgrant",{"_index":763,"title":{"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["parsedaccesstokenpreauthorizedcoderequestgrant",{"_index":765,"title":{"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["parsedaccesstokenrequest",{"_index":798,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.accesstokenrequest",{"_index":814,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.dpop?.jwt",{"_index":818,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant",{"_index":813,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.granttype",{"_index":810,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.preauthorizedcode",{"_index":820,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.txcode",{"_index":822,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parseloglevel",{"_index":2245,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["parseloglevel(level",{"_index":2258,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["parseresponse",{"_index":2702,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseresponse(res",{"_index":2724,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["part",{"_index":2741,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parties",{"_index":2815,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["party",{"_index":2835,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["pass",{"_index":1964,"title":{},"body":{"controllers/IssuerManagementController.html":{},"injectables/RegistrarService.html":{}}}],["passed",{"_index":1374,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{}}}],["passport",{"_index":2060,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportjwtsecret",{"_index":2056,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportmodule",{"_index":556,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":2055,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":2040,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":1606,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["path",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"modules/DatabaseModule.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["payload",{"_index":499,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["payload.cnf",{"_index":2773,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["payload.id",{"_index":1173,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["payload.iss",{"_index":2958,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.iss}/.well",{"_index":2973,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.sub",{"_index":1774,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["payloads",{"_index":2948,"title":{},"body":{"injectables/ResolverService.html":{}}}],["peculiar/x509",{"_index":3742,"title":{},"body":{"dependencies.html":{}}}],["pem",{"_index":24,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/DBKeyService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["perform",{"_index":1796,"title":{},"body":{"controllers/HealthController.html":{}}}],["periodically",{"_index":2848,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["pg",{"_index":3757,"title":{},"body":{"dependencies.html":{}}}],["pid",{"_index":1950,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{}}}],["pid,hostname",{"_index":274,"title":{},"body":{"modules/AppModule.html":{}}}],["pino",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{}}}],["pino?tab=readme",{"_index":256,"title":{},"body":{"modules/AppModule.html":{}}}],["pinohttp",{"_index":259,"title":{},"body":{"modules/AppModule.html":{}}}],["pinologger",{"_index":1117,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["pkcecodechallengemethod",{"_index":755,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["pkcecodechallengemethod.s256",{"_index":785,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["plain",{"_index":1184,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["plaintoclass",{"_index":1141,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["plaintoclass(issuancedto",{"_index":1885,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["please",{"_index":960,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["png",{"_index":1942,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["policies",{"_index":1082,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["policy",{"_index":40,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["policycredential",{"_index":79,"title":{"classes/PolicyCredential.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["policytype",{"_index":60,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/enumerations.html":{}}}],["policytype.allow_list",{"_index":42,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["policytype.attestation_based",{"_index":84,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["policytype.none",{"_index":78,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["policytype.root_of_trust",{"_index":71,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["port",{"_index":1602,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["positives",{"_index":1183,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["post",{"_index":426,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["post(\"challenge",{"_index":692,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post(\"credential",{"_index":2438,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post(\"nonce",{"_index":2444,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post(\"notification",{"_index":2441,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post(\"oauth2/token",{"_index":450,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"offer",{"_index":1962,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["post(\"par",{"_index":677,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post(\"request",{"_index":2664,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["post(\"revoke",{"_index":3113,"title":{},"body":{"controllers/SessionController.html":{}}}],["post(\"token",{"_index":689,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/OAuthController.html":{}}}],["post('credential')@sessionlogger('session",{"_index":2420,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('nonce')@sessionlogger('nonce",{"_index":2424,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('notification')@sessionlogger('notification_id",{"_index":2427,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('oauth2/token')@apibody({type",{"_index":395,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('revoke",{"_index":3101,"title":{},"body":{"controllers/SessionController.html":{}}}],["post()@sessionlogger('session",{"_index":2463,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["postgres",{"_index":1600,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres\").default(\"sqlite",{"_index":1584,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["pre",{"_index":362,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["preauthorizedcode",{"_index":766,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["preauthorizedcodegrantidentifier",{"_index":756,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["predefined",{"_index":2720,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["preferred",{"_index":1250,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["prefix",{"_index":627,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["preheader",{"_index":3432,"title":{},"body":{"injectables/StatusListService.html":{}}}],["prepayload",{"_index":3431,"title":{},"body":{"injectables/StatusListService.html":{}}}],["present",{"_index":338,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["presentation",{"_index":343,"title":{},"body":{"classes/AuthConfigValidator.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["presentationattachment",{"_index":2608,"title":{"classes/PresentationAttachment.html":{}},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"coverage.html":{}}}],["presentationconfig",{"_index":2512,"title":{"entities/PresentationConfig.html":{}},"body":{"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"coverage.html":{}}}],["presentationconfig.lifetime",{"_index":2572,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationconfig.webhook",{"_index":2575,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationconfigcreatedto",{"_index":2638,"title":{"classes/PresentationConfigCreateDto.html":{}},"body":{"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"coverage.html":{}}}],["presentationduringissuance",{"_index":325,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["presentationduringissuanceconfig",{"_index":324,"title":{"classes/PresentationDuringIssuanceConfig.html":{}},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["presentationexists",{"_index":2751,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["presentationmanagementcontroller",{"_index":2643,"title":{"controllers/PresentationManagementController.html":{}},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"coverage.html":{}}}],["presentationrequest",{"_index":2651,"title":{"classes/PresentationRequest.html":{}},"body":{"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"coverage.html":{}}}],["presentationrequestoptions",{"_index":2492,"title":{"interfaces/PresentationRequestOptions.html":{}},"body":{"injectables/Oid4vpService.html":{},"interfaces/PresentationRequestOptions.html":{},"coverage.html":{}}}],["presentations",{"_index":2455,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["presentations.controller",{"_index":2691,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["presentations.service",{"_index":2659,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{}}}],["presentations/dto/auth",{"_index":2498,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentations/presentations.module",{"_index":2478,"title":{},"body":{"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["presentations/presentations.service",{"_index":2499,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationsmodule",{"_index":2477,"title":{"modules/PresentationsModule.html":{}},"body":{"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["presentationsservice",{"_index":2483,"title":{"injectables/PresentationsService.html":{}},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"coverage.html":{},"index.html":{}}}],["presigned",{"_index":1706,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["presigner",{"_index":3006,"title":{},"body":{"classes/S3FileStorage.html":{},"dependencies.html":{}}}],["pretty",{"_index":241,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"dependencies.html":{}}}],["primary",{"_index":897,"title":{},"body":{"entities/CertEntity.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{}}}],["primarycolumn",{"_index":993,"title":{},"body":{"entities/ClientEntry.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/Session.html":{}}}],["primarycolumn(\"uuid",{"_index":3084,"title":{},"body":{"entities/Session.html":{}}}],["primarycolumn('uuid",{"_index":3056,"title":{},"body":{"entities/Session.html":{}}}],["primarygeneratedcolumn",{"_index":1835,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["private",{"_index":448,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{}}}],["private_key",{"_index":3194,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["privateencryptionkey",{"_index":1667,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["privatekey",{"_index":1443,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/UpdateKeyDto.html":{},"miscellaneous/variables.html":{}}}],["privatekey.alg",{"_index":1553,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekey.ext",{"_index":1556,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekey.key_ops",{"_index":1557,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekey.kid",{"_index":1541,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekeyinstance",{"_index":1569,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekeyjwk",{"_index":1437,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"miscellaneous/variables.html":{}}}],["proceed",{"_index":3146,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["process",{"_index":357,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{}}}],["process.env.node_env",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["process_presentation_response",{"_index":2584,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["processes",{"_index":2495,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["production",{"_index":230,"title":{},"body":{"modules/AppModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["progress",{"_index":3133,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["prom",{"_index":916,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/SessionService.html":{},"dependencies.html":{}}}],["prometheus",{"_index":562,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"modules/MetricModule.html":{},"modules/SessionModule.html":{},"dependencies.html":{}}}],["prometheus/dist/injector",{"_index":3305,"title":{},"body":{"injectables/SessionService.html":{}}}],["prometheusmodule",{"_index":2286,"title":{},"body":{"modules/MetricModule.html":{}}}],["prometheusmodule.register",{"_index":2289,"title":{},"body":{"modules/MetricModule.html":{}}}],["promise",{"_index":410,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["promise((resolve",{"_index":2218,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["promise.all(att",{"_index":2785,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["promise.resolve",{"_index":2232,"title":{},"body":{"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["promise.resolve(existssync(join(this.basedir",{"_index":2235,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["promise.resolve(this.storage.delete(key",{"_index":1743,"title":{},"body":{"injectables/FilesService.html":{}}}],["promise.resolve(this.storage.getstream(key",{"_index":1742,"title":{},"body":{"injectables/FilesService.html":{}}}],["promise.resolve(undefined",{"_index":1749,"title":{},"body":{"injectables/FilesService.html":{}}}],["promises",{"_index":2895,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["proof_signing_alg_values_supported",{"_index":1355,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["proof_types_supported",{"_index":1354,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"properties.html":{}}}],["property",{"_index":339,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{}}}],["protect",{"_index":2288,"title":{},"body":{"modules/MetricModule.html":{}}}],["protected",{"_index":1484,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["provide",{"_index":2167,"title":{},"body":{"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["provided",{"_index":121,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["provider",{"_index":469,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/RegistrarService.html":{}}}],["providers",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["provides",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{},"injectables/IssuanceService.html":{},"modules/RegistrarModule.html":{}}}],["providing",{"_index":1794,"title":{},"body":{"controllers/HealthController.html":{}}}],["public",{"_index":22,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"controllers/KeyController.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public.decorator",{"_index":2025,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["public_url",{"_index":2004,"title":{},"body":{"modules/IssuerModule.html":{},"miscellaneous/variables.html":{}}}],["publicbaseurl",{"_index":2991,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["publicjwk",{"_index":831,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["publickey",{"_index":1442,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyObj.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["publickeyinstance",{"_index":1574,"title":{},"body":{"classes/DBKeyService.html":{}}}],["publickeyjwk",{"_index":1441,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["publicurl",{"_index":516,"title":{},"body":{"controllers/AuthController.html":{}}}],["publicurl}/.well",{"_index":522,"title":{},"body":{"controllers/AuthController.html":{}}}],["publicurl}/oauth2/token",{"_index":520,"title":{},"body":{"controllers/AuthController.html":{}}}],["purpose",{"_index":2919,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["pushed",{"_index":647,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["pushed_authorization_request_endpoint",{"_index":782,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["put",{"_index":1679,"title":{},"body":{"interfaces/FileStorage.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["put(\":id",{"_index":2131,"title":{},"body":{"controllers/KeyController.html":{}}}],["put(':id",{"_index":2120,"title":{},"body":{"controllers/KeyController.html":{}}}],["put(key",{"_index":1689,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["putobjectcommand",{"_index":3002,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["putoptions",{"_index":1693,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["qr",{"_index":1947,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["qrcode",{"_index":1936,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["qrcode.tobuffer(values.uri",{"_index":1970,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["qrcodebuffer",{"_index":1969,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["queries",{"_index":644,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["queries.request_uri",{"_index":789,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["query",{"_index":656,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{}}}],["querydeeppartialentity",{"_index":3278,"title":{},"body":{"injectables/SessionService.html":{}}}],["querystring",{"_index":2567,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["r",{"_index":2975,"title":{},"body":{"injectables/ResolverService.html":{}}}],["r.data",{"_index":2976,"title":{},"body":{"injectables/ResolverService.html":{}}}],["random",{"_index":1552,"title":{},"body":{"classes/DBKeyService.html":{}}}],["randomness",{"_index":3406,"title":{},"body":{"injectables/StatusListService.html":{}}}],["randomuuid",{"_index":654,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/FilesService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["ratelimit",{"_index":2074,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["re",{"_index":842,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["reachable",{"_index":2978,"title":{},"body":{"injectables/ResolverService.html":{}}}],["react",{"_index":979,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["read",{"_index":3012,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["readable",{"_index":1691,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["readable.from(body",{"_index":2223,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["readdirsync",{"_index":1142,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readdirsync(configpath",{"_index":1156,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readdirsync(path",{"_index":1168,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readfilesync",{"_index":1143,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readfilesync(join(path",{"_index":1170,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readonly",{"_index":674,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["real",{"_index":2351,"title":{},"body":{"injectables/OAuthService.html":{}}}],["really",{"_index":1232,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["receive",{"_index":1822,"title":{},"body":{"entities/IssuanceConfig.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["received",{"_index":3561,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["record",{"_index":1020,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"interfaces/FileStorage.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/SchemaResponse.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["recursive",{"_index":2217,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["recursively",{"_index":1893,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["redacted",{"_index":3197,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["redirect",{"_index":363,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["redirect_uri",{"_index":701,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["redirected",{"_index":349,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["reference",{"_index":1225,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"classes/DBKeyService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["reflect",{"_index":3763,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":2016,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["refresh",{"_index":2843,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["refresh_token",{"_index":510,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenResponse.html":{}}}],["refreshaccesstoken",{"_index":2822,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["refreshes",{"_index":2847,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["regcert",{"_index":2514,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["region",{"_index":3489,"title":{},"body":{"modules/StorageModule.html":{}}}],["register",{"_index":3293,"title":{},"body":{"injectables/SessionService.html":{}}}],["registrar",{"_index":2798,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar.service",{"_index":2801,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["registrar/generated",{"_index":2941,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrar/registrar.module",{"_index":204,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["registrar/registrar.service",{"_index":926,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{}}}],["registrar_oidc_client_id",{"_index":2807,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar_oidc_client_secret",{"_index":2808,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar_oidc_url",{"_index":2804,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["registrar_url",{"_index":2803,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["registrar_validation_schema",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"modules/RegistrarModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["registrarentity",{"_index":2786,"title":{"entities/RegistrarEntity.html":{}},"body":{"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"coverage.html":{}}}],["registrarmodule",{"_index":162,"title":{"modules/RegistrarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["registrarrepository",{"_index":2823,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrarservice",{"_index":925,"title":{"injectables/RegistrarService.html":{}},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"coverage.html":{},"index.html":{}}}],["registration",{"_index":2624,"title":{},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["registrationcert",{"_index":2519,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{}}}],["registrationcertid",{"_index":2735,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["registrationcertificatecontrollerall",{"_index":2857,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrationcertificatecontrollerregister",{"_index":2858,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrationcertificatecreation",{"_index":2939,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrationcertificaterequest",{"_index":2618,"title":{"classes/RegistrationCertificateRequest.html":{}},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"coverage.html":{}}}],["reject",{"_index":2219,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["related",{"_index":2162,"title":{},"body":{"modules/KeyModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["relations",{"_index":1208,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{}}}],["relationship",{"_index":1216,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["relevant",{"_index":355,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/Oid4vciController.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["reload",{"_index":2262,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["reloadconfiguration",{"_index":2246,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["relying",{"_index":2814,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerfindall",{"_index":2859,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerregister",{"_index":2860,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartyid",{"_index":2789,"title":{},"body":{"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{}}}],["remove",{"_index":1089,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/DBKeyService.html":{},"entities/IssuanceConfig.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["removeclient",{"_index":2334,"title":{},"body":{"injectables/OAuthService.html":{}}}],["removeclient(clientid",{"_index":2346,"title":{},"body":{"injectables/OAuthService.html":{}}}],["replace(\"https",{"_index":2908,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["repository",{"_index":917,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"properties.html":{}}}],["representing",{"_index":613,"title":{},"body":{"interfaces/AuthResponse.html":{},"interfaces/IssuerMetadata.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["represents",{"_index":1239,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"entities/Session.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["repsonse",{"_index":10,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{}}}],["req",{"_index":276,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/JwtStrategy.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"miscellaneous/functions.html":{}}}],["req+jwt",{"_index":2550,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["req.body",{"_index":2930,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["req.headers[\"content",{"_index":288,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers[\"user",{"_index":286,"title":{},"body":{"modules/AppModule.html":{}}}],["req.id",{"_index":2927,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["req.method",{"_index":281,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["req.params?.session",{"_index":278,"title":{},"body":{"modules/AppModule.html":{}}}],["req.params?.tenantid",{"_index":290,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url",{"_index":282,"title":{},"body":{"modules/AppModule.html":{}}}],["request",{"_index":12,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["request.'})@isenum(responsetype",{"_index":2404,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.client_id",{"_index":2362,"title":{},"body":{"injectables/OAuthService.html":{}}}],["request.client_secret",{"_index":2363,"title":{},"body":{"injectables/OAuthService.html":{}}}],["request.dto",{"_index":669,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{}}}],["request.dto.ts",{"_index":695,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/TokenRequestDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["request.dto.ts:12",{"_index":707,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/TokenRequestDto.html":{}}}],["request.dto.ts:15",{"_index":712,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:17",{"_index":2940,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:18",{"_index":714,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:19",{"_index":3507,"title":{},"body":{"classes/TokenRequestDto.html":{}}}],["request.dto.ts:21",{"_index":716,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:23",{"_index":2405,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:24",{"_index":708,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:26",{"_index":2677,"title":{},"body":{"classes/PresentationRequest.html":{},"classes/TokenRequestDto.html":{}}}],["request.dto.ts:27",{"_index":709,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:29",{"_index":2401,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:30",{"_index":710,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:32",{"_index":2676,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["request.dto.ts:33",{"_index":713,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/TokenRequestDto.html":{}}}],["request.dto.ts:36",{"_index":706,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/OfferRequestDto.html":{}}}],["request.dto.ts:40",{"_index":2678,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["request.dto.ts:56",{"_index":2396,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:6",{"_index":711,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.dto.ts:63",{"_index":2398,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:70",{"_index":2407,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:74",{"_index":2415,"title":{},"body":{"classes/OfferResponse.html":{}}}],["request.dto.ts:75",{"_index":2414,"title":{},"body":{"classes/OfferResponse.html":{}}}],["request.dto.ts:9",{"_index":715,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.header",{"_index":2552,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.headers[\"accept",{"_index":3831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.headers[\"content",{"_index":3171,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.headers[\"user",{"_index":3170,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.method",{"_index":3166,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params.session",{"_index":3123,"title":{},"body":{"guards/SessionGuard.html":{}}}],["request.params?.tenantid",{"_index":3165,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params[sessionidparam",{"_index":3164,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.payload",{"_index":2554,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.scope",{"_index":2366,"title":{},"body":{"injectables/OAuthService.html":{}}}],["request.session",{"_index":3125,"title":{},"body":{"guards/SessionGuard.html":{},"miscellaneous/variables.html":{}}}],["request.url",{"_index":3167,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.user",{"_index":3503,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["request/response",{"_index":2266,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["request_error",{"_index":3185,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_start",{"_index":3169,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_success",{"_index":3178,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_uri",{"_index":679,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["requested",{"_index":2450,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["requestid",{"_index":2461,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{}}}],["requests",{"_index":632,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["requesturl",{"_index":2576,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["require_pushed_authorization_requests",{"_index":781,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["required",{"_index":113,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"modules/RegistrarModule.html":{},"classes/SchemaResponse.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/variables.html":{}}}],["requiredclaimkeys",{"_index":2782,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requiredfields",{"_index":2725,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requires",{"_index":2390,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["res",{"_index":291,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["res.data",{"_index":2772,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["res.data![\"crt",{"_index":2915,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data![\"id",{"_index":2916,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data![\"jwt",{"_index":2937,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data?.filter",{"_index":2925,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.error",{"_index":2911,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.payload",{"_index":1671,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["res.redirect(`${values.redirect_uri}?code=${code",{"_index":796,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.send",{"_index":878,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.send(qrcodebuffer",{"_index":1973,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.send(values",{"_index":1974,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.setheader(\"content",{"_index":1971,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.state",{"_index":2581,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["res.status",{"_index":959,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["res.status(400).send(response",{"_index":873,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.statuscode",{"_index":293,"title":{},"body":{"modules/AppModule.html":{}}}],["reset",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["resolve",{"_index":2226,"title":{},"body":{"classes/LocalFileStorage.html":{},"injectables/ResolverService.html":{}}}],["resolvepublickey",{"_index":2949,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolvepublickey(payload",{"_index":2951,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolver.service",{"_index":2946,"title":{},"body":{"modules/ResolverModule.html":{}}}],["resolver/resolver.module",{"_index":2690,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["resolver/resolver.service",{"_index":2744,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resolvermodule",{"_index":2687,"title":{"modules/ResolverModule.html":{}},"body":{"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"index.html":{},"modules.html":{}}}],["resolverservice",{"_index":2705,"title":{"injectables/ResolverService.html":{}},"body":{"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"coverage.html":{},"index.html":{}}}],["resolves",{"_index":1124,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/PresentationsService.html":{}}}],["resolving",{"_index":2709,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{}}}],["resource",{"_index":702,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["response",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["response.data!.find((item",{"_index":2903,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.data![\"id",{"_index":2901,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.dto",{"_index":433,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["response.dto.ts",{"_index":600,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:11",{"_index":623,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{}}}],["response.dto.ts:13",{"_index":2382,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:14",{"_index":3032,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponseDto.html":{}}}],["response.dto.ts:15",{"_index":1627,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:16",{"_index":3037,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:17",{"_index":2387,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:18",{"_index":3034,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:19",{"_index":1631,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:2",{"_index":3511,"title":{},"body":{"classes/TokenResponse.html":{}}}],["response.dto.ts:20",{"_index":3035,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponseDto.html":{}}}],["response.dto.ts:21",{"_index":2384,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:23",{"_index":1633,"title":{},"body":{"classes/EC_Public.html":{},"classes/SchemaResponse.html":{}}}],["response.dto.ts:25",{"_index":2385,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:26",{"_index":3033,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:27",{"_index":3514,"title":{},"body":{"classes/TokenResponseDto.html":{}}}],["response.dto.ts:29",{"_index":2388,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:3",{"_index":3512,"title":{},"body":{"classes/TokenResponse.html":{}}}],["response.dto.ts:33",{"_index":2011,"title":{},"body":{"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:37",{"_index":2381,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:4",{"_index":2176,"title":{},"body":{"classes/KeyResponseDto.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:5",{"_index":2386,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:8",{"_index":3513,"title":{},"body":{"classes/TokenResponseDto.html":{}}}],["response.dto.ts:9",{"_index":2391,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["response.error",{"_index":2899,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.jwks.keys.find((key",{"_index":2979,"title":{},"body":{"injectables/ResolverService.html":{}}}],["response.statuscode",{"_index":3179,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["response.ts",{"_index":8,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["response_mode",{"_index":2533,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_processing",{"_index":2583,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_type",{"_index":703,"title":{},"body":{"classes/AuthorizeQueries.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["response_types_supported",{"_index":524,"title":{},"body":{"controllers/AuthController.html":{},"injectables/Oid4vpService.html":{}}}],["response_uri",{"_index":2531,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["responses",{"_index":3136,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsesize",{"_index":3180,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsestatus",{"_index":3563,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["responsetype",{"_index":1937,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["responsetype.qrcode",{"_index":1949,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsetype.uri",{"_index":1951,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsible",{"_index":1477,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/HealthController.html":{},"controllers/KeyController.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{}}}],["result",{"_index":1125,"title":{},"body":{"injectables/CredentialConfigService.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{}}}],["result.payload",{"_index":2783,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["results",{"_index":31,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieval",{"_index":3616,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["retrieve",{"_index":683,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/EncryptionService.html":{},"injectables/PresentationsService.html":{}}}],["retrieves",{"_index":1129,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["retry",{"_index":961,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["return",{"_index":134,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":2680,"title":{},"body":{"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"injectables/WellKnownService.html":{}}}],["returning",{"_index":2068,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["returns",{"_index":130,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["reuse",{"_index":2598,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["review",{"_index":3639,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["revokeall",{"_index":3092,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(@body",{"_index":3114,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(value",{"_index":3099,"title":{},"body":{"controllers/SessionController.html":{}}}],["revoked",{"_index":18,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/StatusUpdateDto.html":{}}}],["right",{"_index":1047,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["rmdirsync",{"_index":2210,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["rmdirsync(join(this.basedir",{"_index":2234,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["root",{"_index":454,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/OAuthService.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["root_of_trust",{"_index":63,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/enumerations.html":{}}}],["rootoftrust",{"_index":64,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/enumerations.html":{}}}],["rootoftrustpolicy",{"_index":70,"title":{"classes/RootOfTrustPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["rootpath",{"_index":298,"title":{},"body":{"modules/AppModule.html":{}}}],["rp",{"_index":2910,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["rp_name",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["rpid",{"_index":2898,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["rs256",{"_index":2374,"title":{},"body":{"injectables/OAuthService.html":{}}}],["rsa",{"_index":2057,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["rules",{"_index":1051,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["run",{"_index":3297,"title":{},"body":{"injectables/SessionService.html":{}}}],["running",{"_index":137,"title":{},"body":{"controllers/AppController.html":{}}}],["runs",{"_index":1049,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["rxjs",{"_index":2743,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":3158,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["s3",{"_index":2993,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["s3\").default(\"local",{"_index":3475,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_access_key_id",{"_index":3481,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_bucket",{"_index":3480,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_endpoint",{"_index":3483,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_force_path_style",{"_index":3484,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_public_base_url",{"_index":3486,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_region",{"_index":3479,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_secret_access_key",{"_index":3482,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3client",{"_index":2989,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{}}}],["s3filestorage",{"_index":2986,"title":{"classes/S3FileStorage.html":{}},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["safeext",{"_index":1730,"title":{},"body":{"injectables/FilesService.html":{}}}],["saltgenerator",{"_index":1388,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["same",{"_index":840,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sanitize",{"_index":3153,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody",{"_index":3138,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody(body",{"_index":3149,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized",{"_index":3154,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized[field",{"_index":3196,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizes",{"_index":3151,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["save",{"_index":681,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/DBKeyService.html":{}}}],["saveuserupload",{"_index":1714,"title":{},"body":{"injectables/FilesService.html":{}}}],["saveuserupload(tenantid",{"_index":1723,"title":{},"body":{"injectables/FilesService.html":{}}}],["schedulemodule",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":295,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":3273,"title":{},"body":{"injectables/SessionService.html":{}}}],["schema",{"_index":1017,"title":{},"body":{"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"modules/RegistrarModule.html":{},"classes/SchemaResponse.html":{},"miscellaneous/variables.html":{}}}],["schema(@param(\"id",{"_index":1315,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema(id",{"_index":1301,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema.org/draft/2020",{"_index":3030,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["schema_uri",{"_index":3518,"title":{},"body":{"classes/VCT.html":{}}}],["schema_uri#integrity",{"_index":3519,"title":{},"body":{"classes/VCT.html":{}}}],["schemaresponse",{"_index":1062,"title":{"classes/SchemaResponse.html":{}},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/SchemaResponse.html":{},"coverage.html":{}}}],["scope",{"_index":704,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/OAuthService.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{}}}],["scopes_supported",{"_index":532,"title":{},"body":{"controllers/AuthController.html":{}}}],["sd",{"_index":1341,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["sdjwt",{"_index":1381,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwt.issue",{"_index":1403,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwtinstance",{"_index":2697,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["sdjwtvcinstance",{"_index":1346,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["sdk/client",{"_index":3004,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["sdk/s3",{"_index":3005,"title":{},"body":{"classes/S3FileStorage.html":{},"dependencies.html":{}}}],["seconds",{"_index":514,"title":{},"body":{"controllers/AuthController.html":{},"classes/ParResponseDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TokenResponseDto.html":{}}}],["secret",{"_index":485,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenRequestDto.html":{}}}],["secretaccesskey",{"_index":3495,"title":{},"body":{"modules/StorageModule.html":{}}}],["secretkey",{"_index":1767,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["secretorkey",{"_index":2085,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secretorkeyprovider",{"_index":2048,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":1757,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["securely",{"_index":2353,"title":{},"body":{"injectables/OAuthService.html":{}}}],["selected",{"_index":366,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["send",{"_index":119,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["sendauthorizationcode",{"_index":723,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sendauthorizationcode(res",{"_index":743,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sendauthorizationresponse",{"_index":724,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sendauthorizationresponse(queries",{"_index":745,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sending",{"_index":3550,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sends",{"_index":975,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sendwebhook",{"_index":3544,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sendwebhook(session",{"_index":3577,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sendwebhooknotification",{"_index":3568,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sendwebhooknotification(session",{"_index":3579,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sense",{"_index":3641,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["sensitive",{"_index":3152,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields",{"_index":3193,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields.foreach((field",{"_index":3195,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sent",{"_index":101,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["serializers",{"_index":279,"title":{},"body":{"modules/AppModule.html":{}}}],["server",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["server')@apioperation({summary",{"_index":412,"title":{},"body":{"controllers/AuthController.html":{}}}],["server's",{"_index":2383,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["servers",{"_index":1253,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["servestaticmodule",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forrootasync",{"_index":296,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":509,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["service.db",{"_index":1610,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["service_documentation",{"_index":538,"title":{},"body":{"controllers/AuthController.html":{}}}],["services",{"_index":116,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["session",{"_index":495,"title":{"entities/Session.html":{}},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["session.auth_queries",{"_index":793,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.authorization_code",{"_index":825,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.claimswebhook",{"_index":2586,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.claimswebhook!.auth",{"_index":3545,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.auth.config.value",{"_index":3548,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.auth.type",{"_index":3546,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.auth?.type",{"_index":3554,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.url",{"_index":3552,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.controller",{"_index":3259,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.credentialpayload",{"_index":3562,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.credentialpayload!.claims",{"_index":3560,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.credentialpayload?.claims?.[credentialconfigurationid",{"_index":1376,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["session.credentials",{"_index":854,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.id",{"_index":771,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.issuanceid",{"_index":863,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["session.notifywebhook",{"_index":3569,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.requestid",{"_index":2507,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.service",{"_index":3105,"title":{},"body":{"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"modules/SessionModule.html":{}}}],["session.tenantid",{"_index":773,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["session.vp_nonce",{"_index":2589,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session/.well",{"_index":3582,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["session/authorize",{"_index":628,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["session/entities/session.entity",{"_index":659,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["session/oid4vp",{"_index":2454,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["session/session.decorator",{"_index":661,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["session/session.guard",{"_index":663,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["session/session.module",{"_index":206,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["session/session.service",{"_index":665,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session/vci",{"_index":2417,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_id",{"_index":2451,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_logger_key",{"_index":3159,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["session_tidy_up_interval",{"_index":3260,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["session_ttl",{"_index":3262,"title":{},"body":{"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["session_type",{"_index":3267,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["session_validation_schema",{"_index":205,"title":{},"body":{"modules/AppModule.html":{},"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessioncontroller",{"_index":3087,"title":{"controllers/SessionController.html":{}},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"coverage.html":{}}}],["sessionentity",{"_index":660,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessionguard",{"_index":662,"title":{"guards/SessionGuard.html":{}},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"guards/SessionGuard.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["sessionid",{"_index":277,"title":{},"body":{"modules/AppModule.html":{},"injectables/Oid4vpService.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["sessionidparam",{"_index":3162,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["sessionlogcontext",{"_index":2497,"title":{"interfaces/SessionLogContext.html":{}},"body":{"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["sessionlogger",{"_index":2432,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessionlogger(\"nonce",{"_index":2445,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["sessionlogger(\"notification_id",{"_index":2442,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["sessionlogger(\"session",{"_index":2439,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["sessionloggerinterceptor",{"_index":1982,"title":{"injectables/SessionLoggerInterceptor.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{},"index.html":{}}}],["sessionloggerservice",{"_index":1983,"title":{"injectables/SessionLoggerService.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["sessionmodule",{"_index":163,"title":{"modules/SessionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/SessionModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["sessionrepository",{"_index":3276,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessions",{"_index":3083,"title":{},"body":{"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sessionscounter",{"_index":3274,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionservice",{"_index":664,"title":{"injectables/SessionService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["sessionstatus",{"_index":3068,"title":{},"body":{"entities/Session.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{}}}],["sessionstatus.active",{"_index":3319,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.completed",{"_index":3321,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.expired",{"_index":3322,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.failed",{"_index":3323,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.fetched",{"_index":3320,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus})@column('varchar",{"_index":3070,"title":{},"body":{"entities/Session.html":{}}}],["sessiontype",{"_index":3334,"title":{},"body":{"injectables/SessionService.html":{}}}],["set",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/EC_Public.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/typealiases.html":{}}}],["set+json",{"_index":3611,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["set+json')@get('jwks.json",{"_index":3590,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["setauthcode",{"_index":725,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["setauthcode(issuer_state",{"_index":747,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["setentry",{"_index":3390,"title":{},"body":{"injectables/StatusListService.html":{}}}],["setentry(id",{"_index":3407,"title":{},"body":{"injectables/StatusListService.html":{}}}],["setexpirationtime(expiresin",{"_index":1775,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setglobalconfig",{"_index":1989,"title":{},"body":{"modules/IssuerModule.html":{}}}],["setinterval(callback",{"_index":3316,"title":{},"body":{"injectables/SessionService.html":{}}}],["setissuedat",{"_index":1771,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setissuer(issuer",{"_index":1772,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setmetadata(is_public_key",{"_index":3850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(session_logger_key",{"_index":3851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setprotectedheader",{"_index":1769,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setprotectedheader(header",{"_index":1577,"title":{},"body":{"classes/DBKeyService.html":{}}}],["setstate",{"_index":3270,"title":{},"body":{"injectables/SessionService.html":{}}}],["setstate(session",{"_index":3299,"title":{},"body":{"injectables/SessionService.html":{}}}],["setsubject(options.subject",{"_index":1773,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["settimeout",{"_index":2887,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["setting",{"_index":972,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["setupclient",{"_index":1000,"title":{},"body":{"injectables/ClientService.html":{}}}],["setupclient(id",{"_index":981,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["sha",{"_index":1386,"title":{},"body":{"injectables/CredentialsService.html":{},"miscellaneous/variables.html":{}}}],["sha256",{"_index":1699,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["shouldenableautologging",{"_index":2247,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["shouldlog",{"_index":3211,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["shuffel",{"_index":3419,"title":{},"body":{"injectables/StatusListService.html":{}}}],["shuffled",{"_index":3405,"title":{},"body":{"injectables/StatusListService.html":{}}}],["sign",{"_index":2141,"title":{},"body":{"entities/KeyEntity.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/S3FileStorage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sign(privatekeyinstance",{"_index":1578,"title":{},"body":{"classes/DBKeyService.html":{}}}],["signalg",{"_index":1383,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["signature",{"_index":1444,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["signature).catch((err",{"_index":2769,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["signaturebase64url",{"_index":3845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signed",{"_index":3629,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["signedjwt",{"_index":2553,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwt.length",{"_index":2558,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwtlength",{"_index":2557,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signer",{"_index":829,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["signer(tenantid",{"_index":1515,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["signing",{"_index":547,"title":{},"body":{"controllers/AuthController.html":{},"entities/CertEntity.html":{},"entities/CredentialIssuanceBinding.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/JwtStrategy.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/StatusListService.html":{},"miscellaneous/typealiases.html":{}}}],["signjwt",{"_index":1483,"title":{},"body":{"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{}}}],["signjwt(payload",{"_index":1517,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["signl",{"_index":963,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["simplicity",{"_index":2784,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["singleline",{"_index":267,"title":{},"body":{"modules/AppModule.html":{}}}],["size",{"_index":1704,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"injectables/StatusListService.html":{}}}],["skip",{"_index":1177,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["slice(1",{"_index":1733,"title":{},"body":{"injectables/FilesService.html":{}}}],["someone",{"_index":2935,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["sort",{"_index":3423,"title":{},"body":{"injectables/StatusListService.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["specific",{"_index":365,"title":{},"body":{"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{}}}],["specified",{"_index":327,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/WellKnownService.html":{}}}],["specifying",{"_index":1219,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["sqlite",{"_index":1587,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["sqlite3",{"_index":3766,"title":{},"body":{"dependencies.html":{}}}],["src",{"_index":2222,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src.pipe(write",{"_index":2224,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/.../auth.module.ts",{"_index":3818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authentication",{"_index":3810,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../cert.entity.ts",{"_index":3811,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../client.entity.ts",{"_index":3812,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../crypto",{"_index":3813,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../crypto.service.ts",{"_index":3820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.module.ts",{"_index":3819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../display.entity.ts",{"_index":3814,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../ed25519.ts",{"_index":3821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../issuer.module.ts",{"_index":3823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../key.module.ts",{"_index":3824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../keys.entity.ts",{"_index":3816,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":3780,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../media",{"_index":3772,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../oauth.module.ts",{"_index":3825,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../policies.ts",{"_index":3774,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../presentation",{"_index":3775,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../public.decorator.ts",{"_index":3822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../registrar.module.ts",{"_index":3826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session",{"_index":3827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session.decorator.ts",{"_index":3829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session.entity.ts",{"_index":3776,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../session.module.ts",{"_index":3828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../storage.module.ts",{"_index":3815,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../storage.types.ts",{"_index":3817,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../token.decorator.ts",{"_index":3830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../util.ts",{"_index":3781,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../webhook.dto.ts",{"_index":3809,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.module.ts",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/app.controller.ts",{"_index":126,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app/app.controller.ts:8",{"_index":129,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/dto/oidc",{"_index":3648,"title":{},"body":{"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:171",{"_index":418,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:206",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:75",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard.ts",{"_index":2012,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/auth.guard.ts:12",{"_index":2020,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.guard.ts:7",{"_index":2017,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":555,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/client.service.ts",{"_index":910,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"coverage.html":{}}}],["src/auth/client.service.ts:142",{"_index":1008,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:26",{"_index":1002,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:41",{"_index":1007,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:51",{"_index":1004,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:61",{"_index":1006,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:77",{"_index":1009,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:90",{"_index":1003,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:99",{"_index":1005,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/dto/client",{"_index":987,"title":{},"body":{"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["src/auth/dto/oidc",{"_index":3656,"title":{},"body":{"coverage.html":{}}}],["src/auth/dto/token",{"_index":3510,"title":{},"body":{"classes/TokenResponse.html":{},"coverage.html":{}}}],["src/auth/entitites/client.entity.ts",{"_index":991,"title":{},"body":{"entities/ClientEntry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/entitites/client.entity.ts:11",{"_index":997,"title":{},"body":{"entities/ClientEntry.html":{}}}],["src/auth/entitites/client.entity.ts:14",{"_index":992,"title":{},"body":{"entities/ClientEntry.html":{}}}],["src/auth/entitites/client.entity.ts:8",{"_index":994,"title":{},"body":{"entities/ClientEntry.html":{}}}],["src/auth/jwt.service.ts",{"_index":1751,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{}}}],["src/auth/jwt.service.ts:102",{"_index":2037,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:14",{"_index":2033,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:28",{"_index":2036,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:65",{"_index":2038,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:91",{"_index":2034,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":2039,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:10",{"_index":2043,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:24",{"_index":2045,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:31",{"_index":2047,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:61",{"_index":2051,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:85",{"_index":2053,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/public.decorator.ts",{"_index":3664,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/token.decorator.ts",{"_index":3499,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/crypto.module.ts",{"_index":1465,"title":{},"body":{"modules/CryptoModule.html":{}}}],["src/crypto/crypto.service.ts",{"_index":3667,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/encryption/encryption.service.ts",{"_index":1637,"title":{},"body":{"injectables/EncryptionService.html":{},"coverage.html":{}}}],["src/crypto/encryption/encryption.service.ts:13",{"_index":1645,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:27",{"_index":1656,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:47",{"_index":1647,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:67",{"_index":1654,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/key/adapters/db",{"_index":1475,"title":{},"body":{"classes/DBKeyService.html":{},"coverage.html":{}}}],["src/crypto/key/adapters/vault",{"_index":3673,"title":{},"body":{"coverage.html":{}}}],["src/crypto/key/crypto",{"_index":1417,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/key/dto/key",{"_index":2094,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["src/crypto/key/entities/cert.entity.ts",{"_index":883,"title":{},"body":{"entities/CertEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/entities/cert.entity.ts:15",{"_index":898,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:21",{"_index":899,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:27",{"_index":894,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:33",{"_index":901,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:39",{"_index":896,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:45",{"_index":890,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:51",{"_index":903,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts",{"_index":2135,"title":{},"body":{"entities/KeyEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/entities/keys.entity.ts:15",{"_index":2136,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:21",{"_index":2139,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:27",{"_index":2137,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:33",{"_index":2142,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/key.controller.ts",{"_index":2107,"title":{},"body":{"controllers/KeyController.html":{},"coverage.html":{}}}],["src/crypto/key/key.controller.ts:39",{"_index":2117,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:51",{"_index":2113,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:67",{"_index":2121,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:82",{"_index":2115,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.module.ts",{"_index":2149,"title":{},"body":{"modules/KeyModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/key/key.module.ts:33",{"_index":2151,"title":{},"body":{"modules/KeyModule.html":{}}}],["src/crypto/key/key.service.ts",{"_index":2177,"title":{},"body":{"classes/KeyService.html":{},"coverage.html":{}}}],["src/crypto/key/key.service.ts:13",{"_index":2179,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:24",{"_index":2188,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:31",{"_index":2180,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:38",{"_index":2186,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:44",{"_index":2190,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:50",{"_index":2182,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:56",{"_index":2183,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:61",{"_index":2184,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:66",{"_index":2185,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:73",{"_index":2193,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:86",{"_index":2181,"title":{},"body":{"classes/KeyService.html":{}}}],["src/database/database.module.ts",{"_index":1579,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/health/health.controller.ts",{"_index":1792,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:25",{"_index":1800,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1808,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/issuer/authorize/authorize.controller.ts",{"_index":626,"title":{},"body":{"controllers/AuthorizeController.html":{},"coverage.html":{}}}],["src/issuer/authorize/authorize.controller.ts:41",{"_index":642,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:55",{"_index":649,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:77",{"_index":652,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:94",{"_index":639,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.service.ts",{"_index":719,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["src/issuer/authorize/authorize.service.ts:103",{"_index":750,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:208",{"_index":740,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:226",{"_index":732,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:298",{"_index":744,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:305",{"_index":748,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:37",{"_index":731,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:48",{"_index":737,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:55",{"_index":734,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:78",{"_index":746,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/dto/authorize",{"_index":694,"title":{},"body":{"classes/AuthorizeQueries.html":{},"coverage.html":{}}}],["src/issuer/authorize/dto/par",{"_index":2602,"title":{},"body":{"classes/ParResponseDto.html":{},"coverage.html":{}}}],["src/issuer/credentials",{"_index":1297,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"classes/SchemaResponse.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["src/issuer/credentials/credential",{"_index":1108,"title":{},"body":{"injectables/CredentialConfigService.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.controller.ts",{"_index":1266,"title":{},"body":{"controllers/CredentialsController.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.controller.ts:36",{"_index":1275,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:46",{"_index":1277,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:59",{"_index":1273,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.service.ts",{"_index":1317,"title":{},"body":{"injectables/CredentialsService.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.service.ts:102",{"_index":1328,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:210",{"_index":1337,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:23",{"_index":1325,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:236",{"_index":1335,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:46",{"_index":1333,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/dto/credential",{"_index":1091,"title":{},"body":{"classes/CredentialConfigCreate.html":{},"coverage.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts",{"_index":1011,"title":{},"body":{"entities/CredentialConfig.html":{},"coverage.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:116",{"_index":1041,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:123",{"_index":1033,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:35",{"_index":1052,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:39",{"_index":1035,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:43",{"_index":1067,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:47",{"_index":1026,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:52",{"_index":1023,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:57",{"_index":1036,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:63",{"_index":1068,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:68",{"_index":1057,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:72",{"_index":1058,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:75",{"_index":1054,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:80",{"_index":1065,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:85",{"_index":1061,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:91",{"_index":1064,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/policies.ts",{"_index":36,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/issuer/credentials/entities/policies.ts:21",{"_index":1636,"title":{},"body":{"classes/EmbeddedDisclosurePolicy.html":{}}}],["src/issuer/credentials/entities/policies.ts:30",{"_index":49,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["src/issuer/credentials/entities/policies.ts:40",{"_index":2985,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["src/issuer/credentials/entities/policies.ts:52",{"_index":2604,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["src/issuer/credentials/entities/policies.ts:56",{"_index":2607,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["src/issuer/credentials/entities/policies.ts:60",{"_index":2605,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["src/issuer/credentials/entities/policies.ts:70",{"_index":306,"title":{},"body":{"classes/AttestationBasedPolicy.html":{}}}],["src/issuer/issuance/dto/authentication",{"_index":308,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts",{"_index":1097,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"coverage.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:23",{"_index":1099,"title":{},"body":{"classes/CredentialConfigMapping.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:41",{"_index":1855,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/entities/credential",{"_index":1212,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"coverage.html":{}}}],["src/issuer/issuance/entities/issuance",{"_index":1811,"title":{},"body":{"entities/IssuanceConfig.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.controller.ts",{"_index":1838,"title":{},"body":{"controllers/IssuanceController.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.controller.ts:28",{"_index":1844,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:38",{"_index":1846,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:54",{"_index":1842,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.service.ts",{"_index":1856,"title":{},"body":{"injectables/IssuanceService.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.service.ts:162",{"_index":1868,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:175",{"_index":1870,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:191",{"_index":1874,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:23",{"_index":1863,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:261",{"_index":1866,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:43",{"_index":1872,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:52",{"_index":1871,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuer",{"_index":1922,"title":{},"body":{"controllers/IssuerManagementController.html":{},"coverage.html":{}}}],["src/issuer/issuer.module.ts",{"_index":1985,"title":{},"body":{"modules/IssuerModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/issuer/oid4vci/dto/notification",{"_index":2293,"title":{},"body":{"classes/NotificationRequestDto.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/dto/offer",{"_index":2392,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/entities/display.entity.ts",{"_index":1612,"title":{},"body":{"entities/DisplayEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/issuer/oid4vci/entities/display.entity.ts:15",{"_index":1613,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["src/issuer/oid4vci/entities/display.entity.ts:18",{"_index":1615,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts",{"_index":2416,"title":{},"body":{"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:39",{"_index":2421,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:53",{"_index":2428,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:63",{"_index":2425,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts",{"_index":3700,"title":{},"body":{"coverage.html":{}}}],["src/issuer/oid4vci/util.ts",{"_index":3703,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/issuer/status",{"_index":3348,"title":{},"body":{"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":3705,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/metric/metric.module.ts",{"_index":2285,"title":{},"body":{"modules/MetricModule.html":{}}}],["src/oauth/dto/token",{"_index":3504,"title":{},"body":{"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"coverage.html":{}}}],["src/oauth/oauth.controller.ts",{"_index":2300,"title":{},"body":{"controllers/OAuthController.html":{},"coverage.html":{}}}],["src/oauth/oauth.controller.ts:22",{"_index":2309,"title":{},"body":{"controllers/OAuthController.html":{}}}],["src/oauth/oauth.module.ts",{"_index":2323,"title":{},"body":{"modules/OAuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/oauth/oauth.service.ts",{"_index":2328,"title":{},"body":{"injectables/OAuthService.html":{},"coverage.html":{}}}],["src/oauth/oauth.service.ts:10",{"_index":2336,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:100",{"_index":2344,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:20",{"_index":2345,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:33",{"_index":2342,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:60",{"_index":2349,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:68",{"_index":2340,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:92",{"_index":2338,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:96",{"_index":2347,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/registrar/dto/access",{"_index":6,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["src/registrar/entities/registrar.entity.ts",{"_index":2787,"title":{},"body":{"entities/RegistrarEntity.html":{},"coverage.html":{}}}],["src/registrar/entities/registrar.entity.ts:12",{"_index":2790,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/entities/registrar.entity.ts:6",{"_index":2792,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/entities/registrar.entity.ts:9",{"_index":2791,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/registrar.module.ts",{"_index":2797,"title":{},"body":{"modules/RegistrarModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/registrar/registrar.service.ts",{"_index":2810,"title":{},"body":{"injectables/RegistrarService.html":{},"coverage.html":{}}}],["src/registrar/registrar.service.ts:100",{"_index":2839,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:111",{"_index":2845,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:133",{"_index":2846,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:150",{"_index":2833,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:173",{"_index":2837,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:190",{"_index":2828,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:232",{"_index":2831,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:32",{"_index":2852,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:36",{"_index":2850,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:40",{"_index":2824,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:59",{"_index":2844,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:92",{"_index":2838,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/session/entities/session.entity.ts",{"_index":3042,"title":{},"body":{"entities/Session.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/session/entities/session.entity.ts:103",{"_index":3059,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:109",{"_index":3049,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:115",{"_index":3076,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:118",{"_index":3055,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:124",{"_index":3063,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:130",{"_index":3064,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:136",{"_index":3050,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:141",{"_index":3047,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:146",{"_index":3061,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:151",{"_index":3060,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:156",{"_index":3073,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:163",{"_index":3072,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:56",{"_index":3057,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:59",{"_index":3058,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:65",{"_index":3066,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:71",{"_index":3067,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:77",{"_index":3052,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:82",{"_index":3046,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:87",{"_index":3065,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:92",{"_index":3045,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:97",{"_index":3077,"title":{},"body":{"entities/Session.html":{}}}],["src/session/session.controller.ts",{"_index":3088,"title":{},"body":{"controllers/SessionController.html":{},"coverage.html":{}}}],["src/session/session.controller.ts:32",{"_index":3095,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:41",{"_index":3098,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:52",{"_index":3094,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:65",{"_index":3102,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.decorator.ts",{"_index":3707,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/session/session.guard.ts",{"_index":3117,"title":{},"body":{"guards/SessionGuard.html":{},"coverage.html":{}}}],["src/session/session.guard.ts:10",{"_index":3119,"title":{},"body":{"guards/SessionGuard.html":{}}}],["src/session/session.guard.ts:13",{"_index":3120,"title":{},"body":{"guards/SessionGuard.html":{}}}],["src/session/session.module.ts",{"_index":3258,"title":{},"body":{"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/session/session.service.ts",{"_index":3268,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["src/session/session.service.ts:110",{"_index":3300,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:136",{"_index":3279,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:144",{"_index":3287,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:155",{"_index":3286,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:164",{"_index":3290,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:171",{"_index":3302,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:184",{"_index":3284,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:19",{"_index":3275,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:34",{"_index":3292,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:90",{"_index":3282,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/storage/adapters/local.storage.ts",{"_index":2198,"title":{},"body":{"classes/LocalFileStorage.html":{},"coverage.html":{}}}],["src/storage/adapters/local.storage.ts:15",{"_index":2200,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:18",{"_index":2205,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:39",{"_index":2204,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:44",{"_index":2202,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:50",{"_index":2203,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts",{"_index":2987,"title":{},"body":{"classes/S3FileStorage.html":{},"coverage.html":{}}}],["src/storage/adapters/s3.storage.ts:13",{"_index":2992,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:20",{"_index":2998,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:56",{"_index":2997,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:68",{"_index":2994,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:74",{"_index":2995,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:85",{"_index":2996,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/files.service.ts",{"_index":1712,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{}}}],["src/storage/files.service.ts:13",{"_index":1716,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:16",{"_index":1726,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:38",{"_index":1722,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:42",{"_index":1718,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:46",{"_index":1721,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/storage.module.ts",{"_index":3467,"title":{},"body":{"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/storage/storage.module.ts:51",{"_index":3468,"title":{},"body":{"modules/StorageModule.html":{}}}],["src/storage/storage.types.ts",{"_index":1676,"title":{},"body":{"interfaces/FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/storage/storage.types.ts:21",{"_index":1694,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:27",{"_index":1688,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:31",{"_index":1681,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:33",{"_index":1683,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:35",{"_index":1686,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/utils/logger/logger",{"_index":2237,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["src/utils/logger/session",{"_index":3126,"title":{},"body":{"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/mediatype/media",{"_index":3715,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/utils/webhook/webhook.dto.ts",{"_index":91,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/utils/webhook/webhook.dto.ts:12",{"_index":98,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:17",{"_index":102,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:34",{"_index":3534,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:41",{"_index":3532,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:52",{"_index":3537,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:60",{"_index":3536,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook/webhook.service.ts",{"_index":3539,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["src/utils/webhook/webhook.service.ts:111",{"_index":3580,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/utils/webhook/webhook.service.ts:12",{"_index":3540,"title":{},"body":{"classes/WebhookResponse.html":{}}}],["src/utils/webhook/webhook.service.ts:20",{"_index":3576,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/utils/webhook/webhook.service.ts:40",{"_index":3578,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/verifier/oid4vp/dto/authorization",{"_index":622,"title":{},"body":{"classes/AuthorizationResponse.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/dto/presentation",{"_index":2675,"title":{},"body":{"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts",{"_index":2453,"title":{},"body":{"controllers/Oid4vpController.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:41",{"_index":2460,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:52",{"_index":2464,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.module.ts",{"_index":2475,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts",{"_index":2480,"title":{},"body":{"injectables/Oid4vpService.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:20",{"_index":2484,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:205",{"_index":2493,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:264",{"_index":2494,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:41",{"_index":2486,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/presentations/dto/auth",{"_index":599,"title":{},"body":{"interfaces/AuthResponse.html":{},"coverage.html":{}}}],["src/verifier/presentations/dto/presentation",{"_index":2639,"title":{},"body":{"classes/PresentationConfigCreateDto.html":{},"coverage.html":{}}}],["src/verifier/presentations/dto/vp",{"_index":2938,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{},"coverage.html":{}}}],["src/verifier/presentations/entities/presentation",{"_index":2609,"title":{},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.controller.ts",{"_index":2644,"title":{},"body":{"controllers/PresentationManagementController.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.controller.ts:112",{"_index":2648,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:122",{"_index":2656,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:138",{"_index":2650,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:80",{"_index":2654,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.module.ts",{"_index":2688,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["src/verifier/presentations/presentations.service.ts",{"_index":2693,"title":{},"body":{"injectables/PresentationsService.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.service.ts:143",{"_index":2718,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:156",{"_index":2732,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:172",{"_index":2712,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:182",{"_index":2716,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:203",{"_index":2734,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:216",{"_index":2740,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:239",{"_index":2738,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:254",{"_index":2736,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:271",{"_index":2727,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:29",{"_index":2707,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:49",{"_index":2723,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:61",{"_index":2722,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:68",{"_index":2719,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/resolver/dto/issuer",{"_index":1976,"title":{},"body":{"interfaces/IssuerMetadata.html":{},"coverage.html":{}}}],["src/verifier/resolver/resolver.module.ts",{"_index":2945,"title":{},"body":{"modules/ResolverModule.html":{}}}],["src/verifier/resolver/resolver.service.ts",{"_index":2947,"title":{},"body":{"injectables/ResolverService.html":{},"coverage.html":{}}}],["src/verifier/resolver/resolver.service.ts:12",{"_index":2950,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/resolver/resolver.service.ts:21",{"_index":2952,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/verifier.module.ts",{"_index":3530,"title":{},"body":{"modules/VerifierModule.html":{}}}],["src/well",{"_index":1236,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["st",{"_index":2228,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["st.size",{"_index":2230,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["stack",{"_index":3188,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["stage",{"_index":2504,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["start",{"_index":2490,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["started",{"_index":3241,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["starting",{"_index":3173,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["starts",{"_index":2842,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["startswith(\"http",{"_index":2009,"title":{},"body":{"modules/IssuerModule.html":{}}}],["starttime",{"_index":3174,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["state",{"_index":602,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["statements",{"_index":3646,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":3318,"title":{},"body":{"injectables/SessionService.html":{}}}],["static",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["statsync",{"_index":2211,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["statsync(fullpath",{"_index":2229,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["status",{"_index":455,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"dependencies.html":{}}}],["status_list",{"_index":3444,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuscode",{"_index":292,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["statuslist",{"_index":3412,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslist(entry.elements",{"_index":3428,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslist+jwt",{"_index":3433,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistcontroller",{"_index":3347,"title":{"controllers/StatusListController.html":{}},"body":{"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"coverage.html":{}}}],["statuslistentity",{"_index":3363,"title":{"entities/StatusListEntity.html":{}},"body":{"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"coverage.html":{}}}],["statuslistfetcher",{"_index":2698,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["statuslistjwtheaderparameters",{"_index":3413,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistmodule",{"_index":552,"title":{"modules/StatusListModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"index.html":{},"modules.html":{}}}],["statuslistrepository",{"_index":3393,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistservice",{"_index":923,"title":{"injectables/StatusListService.html":{}},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"coverage.html":{},"index.html":{}}}],["statusmanagement",{"_index":1018,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["statusmapping",{"_index":3383,"title":{"entities/StatusMapping.html":{}},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"coverage.html":{}}}],["statusmappingrepository",{"_index":3392,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statusupdatedto",{"_index":3100,"title":{"classes/StatusUpdateDto.html":{}},"body":{"controllers/SessionController.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["statutslistservice",{"_index":929,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["step",{"_index":685,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["still",{"_index":498,"title":{},"body":{"controllers/AuthController.html":{}}}],["stopatfirsterror",{"_index":1187,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["storage",{"_index":1717,"title":{},"body":{"injectables/FilesService.html":{}}}],["storage.types",{"_index":2213,"title":{},"body":{"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"modules/StorageModule.html":{}}}],["storage/storage.module",{"_index":208,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["storage/storage.types",{"_index":1728,"title":{},"body":{"injectables/FilesService.html":{}}}],["storage_driver",{"_index":3473,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["storagemodule",{"_index":164,"title":{"modules/StorageModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/StorageModule.html":{},"index.html":{},"modules.html":{}}}],["storagemodule.forroot",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["store",{"_index":1114,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["store(tenantid",{"_index":1134,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["storecredentialconfiguration",{"_index":1270,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["storecredentialconfiguration(config",{"_index":1276,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["stored",{"_index":1140,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["storedobject",{"_index":1700,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["storedsecret",{"_index":2369,"title":{},"body":{"injectables/OAuthService.html":{}}}],["storeissuanceconfiguration",{"_index":1841,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["storeissuanceconfiguration(config",{"_index":1845,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["storeissuanceconfiguration(tenantid",{"_index":1873,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["storepresentationconfig",{"_index":2646,"title":{},"body":{"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["storepresentationconfig(config",{"_index":2655,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["storepresentationconfig(tenantid",{"_index":2730,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid",{"_index":2703,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid(registrationcertid",{"_index":2733,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["stores",{"_index":1136,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["strategy",{"_index":2059,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["stream",{"_index":1695,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["string",{"_index":19,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":866,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{}}}],["structured",{"_index":3200,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["sub",{"_index":500,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/OAuthService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{}}}],["subclass",{"_index":1048,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["subclass’s",{"_index":1050,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["subfolder",{"_index":1150,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["subject",{"_index":833,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{}}}],["subject_types_supported",{"_index":529,"title":{},"body":{"controllers/AuthController.html":{}}}],["subtypes",{"_index":1086,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["succeeded",{"_index":3252,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["success",{"_index":456,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionService.html":{}}}],["successful",{"_index":457,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionService.html":{}}}],["successfully",{"_index":2556,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["such",{"_index":1629,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/Session.html":{}}}],["summary",{"_index":452,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/OAuthController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["super",{"_index":2026,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["super(config",{"_index":2065,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super(configservice",{"_index":1536,"title":{},"body":{"classes/DBKeyService.html":{}}}],["super.authenticate(req",{"_index":2066,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":2030,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["supersecret",{"_index":572,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["support",{"_index":470,"title":{},"body":{"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/Session.html":{},"modules.html":{}}}],["supported",{"_index":111,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["supportedauthenticationscheme.clientattestationjwt",{"_index":788,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["supports",{"_index":405,"title":{},"body":{"controllers/AuthController.html":{}}}],["svg",{"_index":3790,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":3604,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["switch",{"_index":868,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["symbol(\"file_storage",{"_index":1710,"title":{},"body":{"interfaces/FileStorage.html":{},"miscellaneous/variables.html":{}}}],["symmetric",{"_index":2087,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["synchronize",{"_index":1598,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["system",{"_index":1492,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"injectables/StatusListService.html":{}}}],["t",{"_index":1648,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["table",{"_index":1233,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3721,"title":{},"body":{"coverage.html":{}}}],["tamper",{"_index":1737,"title":{},"body":{"injectables/FilesService.html":{}}}],["tap",{"_index":3157,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["tap((data",{"_index":3176,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["target",{"_index":264,"title":{},"body":{"modules/AppModule.html":{}}}],["tell",{"_index":2594,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["tenancy",{"_index":3075,"title":{},"body":{"entities/Session.html":{}}}],["tenant",{"_index":544,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"entities/CertEntity.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"injectables/OAuthService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["tenant.isdirectory",{"_index":1159,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["tenant.name",{"_index":1166,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["tenant/2025/08/14/uuid.ext",{"_index":1702,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["tenant_client_total",{"_index":593,"title":{},"body":{"modules/AuthModule.html":{}}}],["tenant_id",{"_index":3266,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["tenantclienttotal",{"_index":933,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["tenantfolders",{"_index":1155,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["tenanthost",{"_index":2510,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["tenantid",{"_index":289,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"entities/DisplayEntity.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["tenantid)).uri",{"_index":846,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["tenantid/credentials",{"_index":1300,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["tenantid/status",{"_index":3350,"title":{},"body":{"controllers/StatusListController.html":{}}}],["tenantid}/${new",{"_index":1734,"title":{},"body":{"injectables/FilesService.html":{}}}],["terminusmodule",{"_index":1809,"title":{},"body":{"modules/HealthModule.html":{}}}],["textencoder().encode(data",{"_index":3843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textencoder().encode(secret",{"_index":1768,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["then((cert",{"_index":1565,"title":{},"body":{"classes/DBKeyService.html":{}}}],["then((count",{"_index":957,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["then((entry",{"_index":1672,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["then((file",{"_index":3436,"title":{},"body":{"injectables/StatusListService.html":{}}}],["then((key",{"_index":1562,"title":{},"body":{"classes/DBKeyService.html":{}}}],["then((res",{"_index":2924,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["then((response",{"_index":2902,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["then((session",{"_index":792,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["then(async",{"_index":1663,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{}}}],["think",{"_index":497,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.accesstoken",{"_index":2876,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.addaccesscertificate",{"_index":2881,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.addrp(name",{"_index":2880,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.authorizeservice.authorizationchallengeendpoint",{"_index":693,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.authzmetadata",{"_index":3642,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.authorizeservice.sendauthorizationresponse(queries",{"_index":676,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.validatetokenrequest(body",{"_index":691,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authzmetadata(session",{"_index":808,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.bucket",{"_index":3009,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.certrepository",{"_index":1564,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["this.client",{"_index":2872,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.client.setconfig",{"_index":2873,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.clientrepository",{"_index":955,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clientrepository.countby",{"_index":937,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clientrepository.findonebyorfail",{"_index":958,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clientrepository.save",{"_index":965,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clientrepository.update",{"_index":970,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clients",{"_index":940,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clients.delete(clientid",{"_index":2377,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clients.get(clientid",{"_index":2370,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clients.has(clientid",{"_index":2378,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clients.set(clientid",{"_index":2376,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clients.set(defaultclientid",{"_index":2360,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clientservice.issetup(sub",{"_index":2093,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.clientservice.validateclient",{"_index":492,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.config",{"_index":2271,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enabledebugmode",{"_index":2281,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enablehttplogger",{"_index":2280,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enablesessionlogger",{"_index":2279,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.level",{"_index":2282,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.logformat",{"_index":2283,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice",{"_index":2907,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.get",{"_index":2274,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.configservice.get(\"config_import",{"_index":1154,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.configservice.get(\"config_import_force",{"_index":1153,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.configservice.get(\"jwt_secret",{"_index":1755,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.get(\"log_level",{"_index":2273,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice.get(\"oauth_client_id",{"_index":2358,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.configservice.get(\"oidc",{"_index":1790,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["this.configservice.get(\"registrar_url",{"_index":2877,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow",{"_index":946,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"auth_client_id",{"_index":945,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.configservice.getorthrow(\"config_folder",{"_index":1149,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.configservice.getorthrow(\"jwt_expires_in",{"_index":1766,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow(\"jwt_issuer",{"_index":1764,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow(\"jwt_secret",{"_index":1763,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow(\"public_url",{"_index":517,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{}}}],["this.configservice.getorthrow(\"public_url\")}${req.url",{"_index":797,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${session.id",{"_index":828,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${session.tenantid}/credentials/vct/${credentialconfigurationid",{"_index":1404,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${session.tenantid}/credentials/vct/${value.id",{"_index":1364,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${values.session}/oid4vp",{"_index":2566,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.configservice.getorthrow(\"registrar_oidc_url",{"_index":2865,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"registrar_url",{"_index":2875,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"rp_name",{"_index":2545,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"session_tidy_up_interval",{"_index":3314,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservice.getorthrow(\"session_ttl",{"_index":3343,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservie.get(\"crypto_alg",{"_index":1459,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["this.create(tenant",{"_index":1549,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.create(tenantid",{"_index":1561,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.createlist(entry",{"_index":3427,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.credentialconfigrepo",{"_index":1372,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findby",{"_index":1351,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findonebyorfail",{"_index":1390,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepository.delete",{"_index":1211,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.find",{"_index":1207,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.findonebyorfail",{"_index":1209,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.save",{"_index":1210,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialissuancebindingrepo.save",{"_index":1917,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsconfigservice.getbyid",{"_index":1909,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsconfigservice.import",{"_index":1881,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsservice.delete(user.sub",{"_index":1295,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.get(user.sub",{"_index":1291,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.getschema(id",{"_index":1316,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.getvct(id",{"_index":1313,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.store(user.sub",{"_index":1292,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.crypto",{"_index":1537,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.crypto.alg",{"_index":1554,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.crypto.generatekeypair",{"_index":1550,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.crypto.getsigner(privatekey",{"_index":1559,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.cryptoimplementationservice.getalg",{"_index":1356,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.deletekey(token.sub",{"_index":2134,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.getalg",{"_index":1570,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.cryptoservice.getcallbackcontext(tenantid",{"_index":769,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.cryptoservice.getcertchain",{"_index":1406,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.getcertentry",{"_index":1190,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.cryptoservice.getcerts(tenantid",{"_index":2129,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.getjwks(tenantid).then((key",{"_index":3643,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.cryptoservice.import",{"_index":1880,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.cryptoservice.importkey(tenantid",{"_index":2130,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.keyservice.getkid",{"_index":1380,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.keyservice.getkid(tenantid",{"_index":2906,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.cryptoservice.keyservice.getpublickey",{"_index":832,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["this.cryptoservice.keyservice.signer",{"_index":1382,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.cryptoservice.ontenantinit(id",{"_index":982,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.cryptoservice.signjwt",{"_index":2373,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.storeaccesscertificate",{"_index":2914,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.cryptoservice.updatecert(tenantid",{"_index":2132,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.db.pingcheck(\"database",{"_index":1807,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.encryptionservice.decryptjwe",{"_index":2579,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.getencryptionpublickey",{"_index":2536,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.ontenantinit(id",{"_index":983,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.generateaccesstoken",{"_index":2365,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.getauthorizationserver",{"_index":772,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.getauthorizationserver(tenantid).createaccesstokenresponse",{"_index":827,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.getbyid(tenant.name",{"_index":1174,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.getclients().find((c",{"_index":948,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.getexistingrp(name",{"_index":2900,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.getissuanceconfigurationbyid",{"_index":1884,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.getkid(tenant).catch(async",{"_index":1548,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.getkid(tenantid).catch",{"_index":1560,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.getpresentationconfig",{"_index":2752,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.getprivatekey(tenantid",{"_index":1558,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.getpubfromprivatekey(privatekeyjwk",{"_index":1573,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.health.check",{"_index":1806,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httpservice.get",{"_index":2972,"title":{},"body":{"injectables/ResolverService.html":{}}}],["this.httpservice.post",{"_index":3555,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.import",{"_index":1882,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.initializeclients",{"_index":2355,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.isenabled",{"_index":2863,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.ishttploggerenabled",{"_index":2284,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.issuanceconfigrepo.delete",{"_index":1920,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.find",{"_index":1905,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.findoneorfail",{"_index":1906,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.save",{"_index":1915,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceservice.deleteissuanceconfiguration(user.sub",{"_index":1853,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfiguration(user.sub",{"_index":1850,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfigurationbyid",{"_index":865,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.issuanceservice.storeissuanceconfiguration",{"_index":1851,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.isusingexternaloidc",{"_index":1761,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.jwtservice.generatetoken(payload",{"_index":506,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwtservice.isusingexternaloidc",{"_index":464,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.kbverifier.bind(this",{"_index":2749,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.keyrepository",{"_index":1540,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{}}}],["this.keyrepository.save",{"_index":1665,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.loadclients",{"_index":941,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.loadconfiguration",{"_index":2270,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.logger.error",{"_index":1191,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.info",{"_index":1205,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.setcontext(\"sessionlogger",{"_index":3168,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.logger.setcontext(\"sessionloggerservice",{"_index":3238,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.oauth2client",{"_index":2866,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.oauth2client.clientcredentials().then((token",{"_index":2883,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.oauthservice.handleclientcredentialsgrant",{"_index":2317,"title":{},"body":{"controllers/OAuthController.html":{}}}],["this.oid4vciservice.createoffer",{"_index":1967,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.oid4vciservice.getcredential(req",{"_index":2440,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.handlenotification(req",{"_index":2443,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.issuermetadata(session",{"_index":3634,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.oid4vciservice.noncerequest(session",{"_index":2447,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.ontenantinit(id",{"_index":986,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.oid4vpservice.createauthorizationrequest(session",{"_index":2469,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.oid4vpservice.createrequest",{"_index":2665,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.oid4vpservice.createrequest(\"pid",{"_index":845,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.oid4vpservice.getresponse(body",{"_index":2470,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.parsechallengerequest",{"_index":872,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.parseloglevel",{"_index":2272,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.presentationsservice.deletepresentationconfig(id",{"_index":2674,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.getpresentationconfig",{"_index":2513,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.getpresentationconfigs(user.sub",{"_index":2671,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.parseresponse",{"_index":2588,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.storepresentationconfig",{"_index":2672,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.storercid",{"_index":2936,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.publicbaseurl",{"_index":3017,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.publicbaseurl.replace",{"_index":3018,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.reflector.get",{"_index":3160,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.reflector.getallandoverride",{"_index":2027,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.refreshaccesstoken",{"_index":2878,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarrepository.findonebyorfail",{"_index":2920,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarrepository.save",{"_index":2882,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarservice.addregistrationcertificate",{"_index":2521,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.isenabled",{"_index":2518,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.ontenantinit(id",{"_index":985,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.resolverservice.resolvepublickey",{"_index":2766,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.s3",{"_index":3027,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.s3.send",{"_index":3008,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.sanitizebody(request.body",{"_index":3172,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.schedulerregistry.addinterval(\"tidyupsessions",{"_index":3317,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sdjwtinstance",{"_index":2747,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.sendauthorizationcode(res",{"_index":855,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionlogger.logauthorizationrequest(logcontext",{"_index":2524,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logcredentialverification",{"_index":2590,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowcomplete(logcontext",{"_index":2600,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowerror(logcontext",{"_index":2561,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowstart(logcontext",{"_index":2506,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logsession",{"_index":2555,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionlogger.logsession(logcontext",{"_index":3549,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionlogger.logsessionerror",{"_index":3566,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionrepository.countby",{"_index":3325,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.delete",{"_index":3344,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.find",{"_index":3339,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail",{"_index":3340,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail(where",{"_index":3341,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.save(session",{"_index":3330,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.update",{"_index":3335,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.dec",{"_index":3338,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.inc",{"_index":3331,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.set",{"_index":3327,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionservice",{"_index":790,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.add(body.issuer_state",{"_index":686,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.sessionservice.add(issuer_state",{"_index":879,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.add(res.state",{"_index":2595,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.add(session.id",{"_index":2522,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionservice.add(values.session",{"_index":2578,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.create",{"_index":2573,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.delete(id",{"_index":3112,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.get(body.auth_session",{"_index":851,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.get(body.issuer_state",{"_index":859,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.get(id",{"_index":3111,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.get(sessionid",{"_index":3124,"title":{},"body":{"guards/SessionGuard.html":{}}}],["this.sessionservice.getall",{"_index":3108,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.getby",{"_index":802,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setauthcode(issuer_state",{"_index":877,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setauthcode(values.issuer_state",{"_index":795,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setentry(entry.index",{"_index":3451,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.setupclient(id).catch(async",{"_index":966,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.shouldlog",{"_index":3239,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.statuslistfetcher.bind(this",{"_index":2750,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.statuslistrepository",{"_index":3435,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.findonebyorfail",{"_index":3438,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.save",{"_index":3426,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.update",{"_index":3434,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistservice.createentry",{"_index":1394,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.statuslistservice.getlist(tenantid",{"_index":3362,"title":{},"body":{"controllers/StatusListController.html":{}}}],["this.statuslistservice.updatestatus(value",{"_index":3115,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.statusmappingrepository.findby",{"_index":3447,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statusmappingrepository.save",{"_index":3443,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statutslistservice.ontenantinit(id",{"_index":984,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.storage.getsignedurl",{"_index":1744,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storage.getsignedurl(key",{"_index":1745,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storage.put(key",{"_index":1740,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.store(tenant.name",{"_index":1204,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.storeissuanceconfiguration",{"_index":1904,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.storepresentationconfig(tenant.name",{"_index":2753,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.tenantclienttotal.set",{"_index":938,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.tidyupsessions",{"_index":3312,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.validateclientcredentials",{"_index":2361,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.verifier.bind(this",{"_index":2748,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository",{"_index":2759,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.delete",{"_index":2758,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.find",{"_index":2754,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.save",{"_index":2757,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.update",{"_index":2761,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.webhookservice.sendwebhook",{"_index":2599,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.wellknownservice.getauthzmetadata(session",{"_index":3610,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.wellknownservice.getissuermetadata(session",{"_index":3608,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.wellknownservice.getjwks(session.tenantid",{"_index":3614,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["throw",{"_index":465,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["tidy",{"_index":3294,"title":{},"body":{"injectables/SessionService.html":{}}}],["tidyupsessions",{"_index":3271,"title":{},"body":{"injectables/SessionService.html":{}}}],["time",{"_index":1399,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/ParResponseDto.html":{}}}],["timestamp",{"_index":891,"title":{},"body":{"entities/CertEntity.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["title",{"_index":3028,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["todo",{"_index":252,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialIssuanceBinding.html":{},"injectables/FilesService.html":{},"controllers/IssuerManagementController.html":{},"classes/KeyService.html":{},"modules/MetricModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["token",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponseDto.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["token(body",{"_index":650,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["token.accesstoken",{"_index":2884,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["token.decorator",{"_index":444,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["token.sub",{"_index":2128,"title":{},"body":{"controllers/KeyController.html":{}}}],["token_endpoint",{"_index":519,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["token_endpoint_auth_methods_supported",{"_index":526,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["token_exchange",{"_index":3253,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["token_type",{"_index":460,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{}}}],["tokenpayload",{"_index":443,"title":{"interfaces/TokenPayload.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenrequest",{"_index":2311,"title":{},"body":{"controllers/OAuthController.html":{}}}],["tokenrequestdto",{"_index":2304,"title":{"classes/TokenRequestDto.html":{}},"body":{"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/TokenRequestDto.html":{},"coverage.html":{}}}],["tokenresponse",{"_index":401,"title":{"classes/TokenResponse.html":{}},"body":{"controllers/AuthController.html":{},"classes/TokenResponse.html":{},"coverage.html":{}}}],["tokenresponsedto",{"_index":2312,"title":{"classes/TokenResponseDto.html":{}},"body":{"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/TokenResponseDto.html":{},"coverage.html":{}}}],["tokens",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/OAuthController.html":{}}}],["tolowercase",{"_index":1732,"title":{},"body":{"injectables/FilesService.html":{}}}],["toodo",{"_index":1886,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["tostring(\"ascii",{"_index":484,"title":{},"body":{"controllers/AuthController.html":{}}}],["total",{"_index":595,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["tracking",{"_index":2682,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{}}}],["transformer",{"_index":51,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["translatetime",{"_index":268,"title":{},"body":{"modules/AppModule.html":{}}}],["transport",{"_index":263,"title":{},"body":{"modules/AppModule.html":{}}}],["true",{"_index":48,"title":{},"body":{"classes/AllowListPolicy.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"classes/LocalFileStorage.html":{},"classes/NoneTrustPolicy.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"guards/SessionGuard.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"modules/StorageModule.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/variables.html":{}}}],["true})@column('json",{"_index":1040,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isnumber",{"_index":1060,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isoptional()@isobject",{"_index":1022,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isoptional()@isobject()@validate(webhookconfig)@type(undefined",{"_index":2636,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@isoptional()@isstring",{"_index":2628,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@isstring",{"_index":2630,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@type(undefined",{"_index":305,"title":{},"body":{"classes/AttestationBasedPolicy.html":{},"classes/IssuanceDto.html":{}}}],["trust",{"_index":2962,"title":{},"body":{"injectables/ResolverService.html":{}}}],["try",{"_index":475,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vpService.html":{},"classes/S3FileStorage.html":{}}}],["ttl",{"_index":3342,"title":{},"body":{"injectables/SessionService.html":{}}}],["ttlseconds",{"_index":1720,"title":{},"body":{"injectables/FilesService.html":{}}}],["two",{"_index":3625,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["txcode",{"_index":767,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["typ",{"_index":2548,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["type",{"_index":20,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type(undefined)@isobject",{"_index":3531,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["type(undefined)@isoptional()@isobject",{"_index":3535,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["type.'})@post('token",{"_index":2308,"title":{},"body":{"controllers/OAuthController.html":{}}}],["type.decorator",{"_index":3598,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["type.decorator.ts",{"_index":3716,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":3599,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["type.enum.ts",{"_index":3773,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typealiases",{"_index":3807,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":340,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{}}}],["typeorm",{"_index":908,"title":{},"body":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"injectables/CredentialsService.html":{},"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"dependencies.html":{}}}],["typeorm/query",{"_index":3308,"title":{},"body":{"injectables/SessionService.html":{}}}],["typeorm/repository/repository",{"_index":918,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"modules/KeyModule.html":{},"injectables/PresentationsService.html":{}}}],["typeormhealthindicator",{"_index":1802,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormmodule",{"_index":558,"title":{},"body":{"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{}}}],["typeormmodule.forfeature",{"_index":2006,"title":{},"body":{"modules/IssuerModule.html":{}}}],["typeormmodule.forfeature([certentity",{"_index":1473,"title":{},"body":{"modules/CryptoModule.html":{},"modules/KeyModule.html":{}}}],["typeormmodule.forfeature([cliententry",{"_index":592,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([presentationconfig",{"_index":2692,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["typeormmodule.forfeature([registrarentity",{"_index":2809,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["typeormmodule.forfeature([session",{"_index":3264,"title":{},"body":{"modules/SessionModule.html":{}}}],["typeormmodule.forfeature([statusmapping",{"_index":3386,"title":{},"body":{"modules/StatusListModule.html":{}}}],["typeormmodule.forrootasync",{"_index":1595,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleoptions",{"_index":1580,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":2143,"title":{},"body":{"entities/KeyEntity.html":{},"modules/RegistrarModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":2892,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["typically",{"_index":1259,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{}}}],["unauthorizedexception",{"_index":427,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{}}}],["unauthorizedexception(\"invalid",{"_index":493,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{}}}],["undefined",{"_index":322,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/OfferRequestDto.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apiproduces('application/json",{"_index":1931,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["undefined})@apiresponse({status",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@isobject()@isoptional",{"_index":2395,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["undefined})@isstring",{"_index":3506,"title":{},"body":{"classes/TokenRequestDto.html":{}}}],["undefined})@isstring()@isin(['client_credentials",{"_index":3508,"title":{},"body":{"classes/TokenRequestDto.html":{}}}],["undefined})@post('offer",{"_index":1933,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["undefined})@post('request",{"_index":2653,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["union",{"_index":86,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/IssuanceService.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/typealiases.html":{}}}],["unique",{"_index":26,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{}}}],["unknown",{"_index":742,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["unsecure",{"_index":2007,"title":{},"body":{"modules/IssuerModule.html":{}}}],["unsigned",{"_index":3627,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["unsupported",{"_index":875,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["up",{"_index":136,"title":{},"body":{"controllers/AppController.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{}}}],["update",{"_index":969,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["update.dto",{"_index":2124,"title":{},"body":{"controllers/KeyController.html":{},"controllers/SessionController.html":{},"injectables/StatusListService.html":{}}}],["update.dto.ts",{"_index":3461,"title":{},"body":{"classes/StatusUpdateDto.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["update.dto.ts:16",{"_index":3462,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:24",{"_index":3465,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:8",{"_index":3463,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["updated",{"_index":905,"title":{},"body":{"entities/CertEntity.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{}}}],["updatedat",{"_index":887,"title":{},"body":{"entities/CertEntity.html":{},"classes/CredentialConfigMapping.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"entities/Session.html":{},"injectables/SessionService.html":{}}}],["updatedatecolumn",{"_index":902,"title":{},"body":{"entities/CertEntity.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["updatekey",{"_index":2111,"title":{},"body":{"controllers/KeyController.html":{}}}],["updatekey(token",{"_index":2118,"title":{},"body":{"controllers/KeyController.html":{}}}],["updatekeydto",{"_index":2119,"title":{"classes/UpdateKeyDto.html":{}},"body":{"controllers/KeyController.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["updates",{"_index":2122,"title":{},"body":{"controllers/KeyController.html":{}}}],["updatestatus",{"_index":3391,"title":{},"body":{"injectables/StatusListService.html":{}}}],["updatestatus(value",{"_index":3409,"title":{},"body":{"injectables/StatusListService.html":{}}}],["uri",{"_index":1618,"title":{},"body":{"entities/DisplayEntity.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"miscellaneous/enumerations.html":{}}}],["url",{"_index":118,"title":{},"body":{"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/DisplayEntity.html":{},"interfaces/FileStorage.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["url(payload.iss).hostname",{"_index":2967,"title":{},"body":{"injectables/ResolverService.html":{}}}],["urn:${randomuuid",{"_index":680,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["usage",{"_index":1666,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/KeyEntity.html":{},"miscellaneous/typealiases.html":{}}}],["use",{"_index":87,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"classes/NoneTrustPolicy.html":{},"injectables/OAuthService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{}}}],["used",{"_index":105,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"entities/CredentialIssuanceBinding.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["useexternaloidc",{"_index":2061,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usefactory",{"_index":247,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["useful",{"_index":3132,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["useguards",{"_index":657,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/WellKnownController.html":{}}}],["useguards(jwtauthguard",{"_index":1284,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["useguards(sessionguard",{"_index":672,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["useguards(sessionguard)@post('challenge",{"_index":638,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["useguards(sessionguard)@post('token",{"_index":651,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["useinterceptors",{"_index":2429,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["useinterceptors(sessionloggerinterceptor",{"_index":2437,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["user",{"_index":284,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/CredentialsController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"modules/SessionModule.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["user.sub",{"_index":1852,"title":{},"body":{"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["username",{"_index":1604,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["users",{"_index":350,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["uses",{"_index":367,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/HealthController.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/SessionLoggerService.html":{}}}],["using",{"_index":422,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/OAuthController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/WellKnownService.html":{}}}],["utf8",{"_index":1171,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["utility",{"_index":3782,"title":{},"body":{"miscellaneous/functions.html":{}}}],["utils/logger//session",{"_index":2433,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["utils/logger/session",{"_index":1990,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["utils/mediatype/media",{"_index":3597,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["utils/webhook/webhook.dto",{"_index":332,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{}}}],["utils/webhook/webhook.service",{"_index":1993,"title":{},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["uuid",{"_index":1529,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"dependencies.html":{}}}],["v4",{"_index":1528,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["valid",{"_index":853,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/StatusUpdateDto.html":{}}}],["valid(\"json",{"_index":240,"title":{},"body":{"modules/AppModule.html":{}}}],["valid(\"trace",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":316,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/OAuthService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{}}}],["validate(authconfigvalidator",{"_index":368,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["validate(config",{"_index":328,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{}}}],["validate(issuancedto",{"_index":1887,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["validate(payload",{"_index":2052,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(webhookconfig",{"_index":2625,"title":{},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{}}}],["validateclient",{"_index":1001,"title":{},"body":{"injectables/ClientService.html":{}}}],["validateclient(clientid",{"_index":947,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["validateclientcredentials",{"_index":2335,"title":{},"body":{"injectables/OAuthService.html":{}}}],["validateclientcredentials(clientid",{"_index":2348,"title":{},"body":{"injectables/OAuthService.html":{}}}],["validated",{"_index":2054,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatenested",{"_index":57,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{}}}],["validatetokenrequest",{"_index":726,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["validatetokenrequest(body",{"_index":749,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["validation",{"_index":1196,"title":{},"body":{"injectables/CredentialConfigService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["validationarguments",{"_index":318,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["validationerror",{"_index":1192,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors",{"_index":1179,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors.length",{"_index":1199,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors.map((error",{"_index":1200,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationschema",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":58,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"entities/CertEntity.html":{},"classes/ClientCredentialsDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":331,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["validatorconstraintinterface",{"_index":314,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["value",{"_index":97,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"entities/DisplayEntity.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/StatusListService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.authenticationconfig",{"_index":1914,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.authenticationconfig.config",{"_index":1913,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.authenticationconfig.method",{"_index":1912,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.config",{"_index":1369,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.config.disclosure_policy",{"_index":1367,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.config.vct",{"_index":1363,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.credentialconfigs",{"_index":1908,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.credentialconfigurationid",{"_index":3449,"title":{},"body":{"injectables/StatusListService.html":{}}}],["value.embeddeddisclosurepolicy",{"_index":1365,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.id",{"_index":1362,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.sessionid",{"_index":3448,"title":{},"body":{"injectables/StatusListService.html":{}}}],["value.status",{"_index":3452,"title":{},"body":{"injectables/StatusListService.html":{}}}],["values",{"_index":41,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"injectables/AuthorizeService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"controllers/IssuerManagementController.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/SessionService.html":{},"interfaces/TokenPayload.html":{}}}],["values.session",{"_index":2563,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["values.uri",{"_index":2668,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["values.webhook",{"_index":2574,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["varchar",{"_index":3455,"title":{},"body":{"entities/StatusMapping.html":{}}}],["variable",{"_index":3298,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["variables",{"_index":2356,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/OAuthService.html":{},"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":115,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["vault",{"_index":2161,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vault\").default(\"db",{"_index":2160,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vault_token",{"_index":2165,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vault_url",{"_index":2163,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vaultkeyservice",{"_index":2156,"title":{},"body":{"modules/KeyModule.html":{},"coverage.html":{}}}],["vc",{"_index":1348,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["vcs",{"_index":2695,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vct",{"_index":1019,"title":{"classes/VCT.html":{}},"body":{"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["vct(@param(\"id",{"_index":1311,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["vct(id",{"_index":1304,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["verbose",{"_index":2276,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["verifiable",{"_index":1307,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{}}}],["verification",{"_index":539,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{}}}],["verification.'})@apiresponse({status",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{}}}],["verificationcounter",{"_index":3328,"title":{},"body":{"injectables/SessionService.html":{}}}],["verificationresult",{"_index":3051,"title":{},"body":{"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["verified",{"_index":3053,"title":{},"body":{"entities/Session.html":{}}}],["verifier",{"_index":1440,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["verifier/oid4vp/dto/presentation",{"_index":1938,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["verifier/oid4vp/oid4vp.module",{"_index":1994,"title":{},"body":{"modules/IssuerModule.html":{}}}],["verifier/oid4vp/oid4vp.service",{"_index":759,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifier/presentations/dto/vp",{"_index":2854,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["verifier/presentations/presentations.module",{"_index":2799,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["verifier/presentations/presentations.service",{"_index":2855,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["verifier/verifier.module",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["verifier_attestations",{"_index":2547,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["verifiermodule",{"_index":165,"title":{"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["verify",{"_index":780,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["verify(data",{"_index":2768,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verify(res.vp_token[att",{"_index":2781,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verifyauthorizationcodeaccesstokenrequest",{"_index":823,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifying",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifypreauthorizedcodeaccesstokenrequest",{"_index":812,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifytoken",{"_index":2032,"title":{},"body":{"injectables/JwtService.html":{}}}],["verifytoken(token",{"_index":1779,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["version",{"_index":3793,"title":{},"body":{"properties.html":{}}}],["via",{"_index":684,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/FilesService.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{},"controllers/WellKnownController.html":{}}}],["void",{"_index":954,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{}}}],["vp",{"_index":609,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"entities/CertEntity.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{}}}],["vp_formats",{"_index":2537,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["vp_nonce",{"_index":2523,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["vp_token",{"_index":603,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["vprequest",{"_index":2731,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequestrepository",{"_index":2706,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vps",{"_index":2694,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["wallet",{"_index":839,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"properties.html":{}}}],["want",{"_index":74,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/FilesService.html":{},"classes/NoneTrustPolicy.html":{},"injectables/OAuthService.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["warn",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["we'll",{"_index":1963,"title":{},"body":{"controllers/IssuerManagementController.html":{},"injectables/OAuthService.html":{}}}],["web",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"entities/StatusListEntity.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["webhook",{"_index":108,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth",{"_index":3570,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth.config.value",{"_index":3573,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth.type",{"_index":3571,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth?.type",{"_index":3575,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.url",{"_index":3574,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhookauthconfig",{"_index":109,"title":{"classes/WebHookAuthConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookconfig",{"_index":117,"title":{"classes/WebhookConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookresponse",{"_index":3538,"title":{"classes/WebhookResponse.html":{}},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["webhookresponse.data",{"_index":3559,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhookresponse.status",{"_index":3564,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhooks",{"_index":95,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/typealiases.html":{}}}],["webhooksent",{"_index":2601,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhookservice",{"_index":1984,"title":{"injectables/WebhookService.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["webhookurl",{"_index":3551,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webook",{"_index":2597,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["well",{"_index":210,"title":{},"body":{"modules/AppModule.html":{},"classes/DBKeyService.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["wellknowncontroller",{"_index":171,"title":{"controllers/WellKnownController.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["wellknownservice",{"_index":166,"title":{"injectables/WellKnownService.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["whether",{"_index":2389,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["whitelist",{"_index":1180,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["willsoto/nestjs",{"_index":561,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"modules/MetricModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"dependencies.html":{}}}],["withfiletypes",{"_index":1157,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["without",{"_index":1785,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["write",{"_index":2220,"title":{},"body":{"classes/LocalFileStorage.html":{},"injectables/RegistrarService.html":{}}}],["writing",{"_index":2932,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["wrtites",{"_index":1491,"title":{},"body":{"classes/DBKeyService.html":{}}}],["x",{"_index":1625,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["x509_san_dns",{"_index":2530,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509_san_dns:${hostname",{"_index":2565,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509certificate",{"_index":2955,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x509certificate(buffer.from(cert",{"_index":2964,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x5c",{"_index":1405,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["y",{"_index":1626,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["yes",{"_index":741,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/OAuthService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{}}}],["you'd",{"_index":2352,"title":{},"body":{"injectables/OAuthService.html":{}}}],["yyyy",{"_index":269,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AccessCertificateResponse.html":{"url":"interfaces/AccessCertificateResponse.html","title":"interface - AccessCertificateResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccessCertificateResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/dto/access-certificate-response.ts\n        \n\n\n            \n                Description\n            \n            \n                Repsonse of access certificate request.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            crt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            revoked\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        crt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        crt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The public key in PEM format.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier of the access certificate.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        revoked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        revoked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates if the access certificate is revoked.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AccessCertificateResponse {\n    /**\n     * Unique identifier of the access certificate.\n     */\n    id: string;\n    /**\n     * The public key in PEM format.\n     */\n    crt: string;\n    /**\n     * Indicates if the access certificate is revoked.\n     */\n    revoked?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllowListPolicy.html":{"url":"classes/AllowListPolicy.html","title":"class - AllowListPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllowListPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.ts\n        \n\n\n            \n                Description\n            \n            \n                allowList\n\n            \n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                policy\n                            \n                            \n                                    \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PolicyType.ALLOW_LIST\n\n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:26\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsEnum,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\nexport enum PolicyType {\n    NONE = \"none\",\n    ALLOW_LIST = \"allowList\",\n    ROOT_OF_TRUST = \"rootOfTrust\",\n    ATTESTATION_BASED = \"attestationBased\",\n}\n\nexport class EmbeddedDisclosurePolicy {\n    @IsDefined()\n    @IsEnum(PolicyType)\n    policy!: PolicyType;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ALLOW_LIST;\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ROOT_OF_TRUST;\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.NONE;\n}\n\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    claims?: any[];\n\n    @IsDefined()\n    @IsArray()\n    credentials!: any[];\n\n    @IsOptional()\n    @IsArray()\n    credential_sets?: any[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ATTESTATION_BASED;\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n// Convenience union type if you use it elsewhere\nexport type AnyPolicy =\n    | NoneTrustPolicy\n    | AllowListPolicy\n    | RootOfTrustPolicy\n    | AttestationBasedPolicy;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApiKeyConfig.html":{"url":"classes/ApiKeyConfig.html","title":"class - ApiKeyConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiKeyConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for API key authentication in webhooks.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                headerName\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        headerName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:12\n                        \n                    \n\n            \n                \n                    The name of the header where the API key will be sent.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:17\n                        \n                    \n\n            \n                \n                    The value of the API key to be sent in the header.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsIn, IsObject, IsOptional, IsString } from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = \"apiKey\";\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn([\"apiKey\"])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                main\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        main\n                        \n                    \n                \n            \n            \n                \n                        \n                    main()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app/app.controller.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport { ApiExcludeController } from \"@nestjs/swagger\";\n\n@ApiExcludeController()\n@Controller()\nexport class AppController {\n    @Get()\n    main(): string {\n        return 'EUDIPLO is up and running, more information at https://openwallet-foundation-labs.github.io/eudiplo/latest/';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nMetricModule\n\nMetricModule\n\nAppModule -->\n\nMetricModule->AppModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nStorageModule\n\nStorageModule\n\nAppModule -->\n\nStorageModule->AppModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nWellKnownService\n\nWellKnownService\n\nAppModule -->\n\nWellKnownService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            WellKnownService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            WellKnownController\n                        \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CryptoModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            IssuerModule\n                        \n                        \n                            KeyModule\n                        \n                        \n                            MetricModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StorageModule\n                        \n                        \n                            VerifierModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { ScheduleModule } from \"@nestjs/schedule\";\nimport { ServeStaticModule } from \"@nestjs/serve-static\";\nimport * as Joi from \"joi\";\nimport { LoggerModule } from \"nestjs-pino\";\nimport { isAbsolute, join } from \"path\";\nimport { AppController } from \"./app/app.controller\";\nimport { AUTH_VALIDATION_SCHEMA, AuthModule } from \"./auth/auth.module\";\nimport { CryptoModule } from \"./crypto/crypto.module\";\nimport { CRYPTO_VALIDATION_SCHEMA } from \"./crypto/key/crypto-implementation/crypto-implementation.module\";\nimport { KEY_VALIDATION_SCHEMA, KeyModule } from \"./crypto/key/key.module\";\nimport { DatabaseModule } from \"./database/database.module\";\nimport { HealthModule } from \"./health/health.module\";\nimport { ISSUER_VALIDATION_SCHEMA, IssuerModule } from \"./issuer/issuer.module\";\nimport { MetricModule } from \"./metric/metric.module\";\nimport {\n    REGISTRAR_VALIDATION_SCHEMA,\n    RegistrarModule,\n} from \"./registrar/registrar.module\";\nimport {\n    SESSION_VALIDATION_SCHEMA,\n    SessionModule,\n} from \"./session/session.module\";\nimport { CONFIG_STORAGE_SCHEMA, StorageModule } from \"./storage/storage.module\";\nimport { VerifierModule } from \"./verifier/verifier.module\";\nimport { WellKnownController } from \"./well-known/well-known.controller\";\nimport { WellKnownService } from \"./well-known/well-known.service\";\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            validationSchema: Joi.object({\n                FOLDER: Joi.string().default(\"../../tmp\"),\n                RP_NAME: Joi.string().default(\"EUDIPLO\"),\n                LOG_LEVEL: Joi.string()\n                    .valid(\"trace\", \"debug\", \"info\", \"warn\", \"error\", \"fatal\")\n                    .default(\n                        process.env.NODE_ENV === \"production\"\n                            ? \"warn\"\n                            : \"debug\",\n                    ),\n                CONFIG_IMPORT: Joi.boolean().default(false),\n                CONFIG_IMPORT_FORCE: Joi.boolean().default(false),\n                CONFIG_FOLDER: Joi.string().default(\"../../assets/config\"),\n                ...AUTH_VALIDATION_SCHEMA,\n                ...REGISTRAR_VALIDATION_SCHEMA,\n                ...KEY_VALIDATION_SCHEMA,\n                ...CRYPTO_VALIDATION_SCHEMA,\n                ...ISSUER_VALIDATION_SCHEMA,\n                ...SESSION_VALIDATION_SCHEMA,\n                ...CONFIG_STORAGE_SCHEMA,\n                LOG_ENABLE_HTTP_LOGGER: Joi.boolean().default(false),\n                LOG_ENABLE_SESSION_LOGGER: Joi.boolean().default(false),\n                LOG_DEBUG_MODE: Joi.boolean().default(false),\n                LOG_FORMAT: Joi.string()\n                    .valid(\"json\", \"pretty\")\n                    .default(\n                        process.env.NODE_ENV === \"production\"\n                            ? \"json\"\n                            : \"pretty\",\n                    ),\n            }),\n            isGlobal: true,\n            expandVariables: true,\n        }),\n        LoggerModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const enableHttpLogger = configService.get(\n                    \"LOG_ENABLE_HTTP_LOGGER\",\n                    false,\n                );\n                //TODO: check if logging to file is needed: https://github.com/iamolegga/nestjs-pino?tab=readme-ov-file#asynchronous-logging\n                return {\n                    pinoHttp: {\n                        level: configService.get(\"LOG_LEVEL\", \"info\"),\n                        autoLogging: enableHttpLogger,\n                        transport: {\n                            target: \"pino-pretty\",\n                            options: {\n                                colorize: true,\n                                singleLine: false,\n                                translateTime: \"yyyy-mm-dd HH:MM:ss\",\n                                ignore: \"pid,hostname\",\n                            },\n                        },\n                        customProps: (req: any) => ({\n                            sessionId: req.params?.session,\n                        }),\n                        serializers: {\n                            req: (req: any) => ({\n                                method: req.method,\n                                url: req.url,\n                                headers: {\n                                    \"user-agent\": req.headers[\"user-agent\"],\n                                    \"content-type\": req.headers[\"content-type\"],\n                                },\n                                sessionId: req.params?.session,\n                                tenantId: req.params?.tenantId,\n                            }),\n                            res: (res: any) => ({\n                                statusCode: res.statusCode,\n                            }),\n                        },\n                    },\n                };\n            },\n        }),\n        KeyModule.forRoot(),\n        CryptoModule,\n        IssuerModule,\n        VerifierModule,\n        RegistrarModule,\n        ScheduleModule.forRoot(),\n        ServeStaticModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const folder = configService.getOrThrow(\"FOLDER\");\n                const rootPath = isAbsolute(folder)\n                    ? join(folder, \"public\")\n                    : join(__dirname, \"../\", folder, \"public\");\n                return [\n                    {\n                        rootPath,\n                    },\n                ];\n            },\n        }),\n        DatabaseModule,\n        SessionModule,\n        DatabaseModule,\n        HealthModule,\n        AuthModule,\n        MetricModule,\n        StorageModule.forRoot(),\n    ],\n    controllers: [WellKnownController, AppController],\n    providers: [WellKnownService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AttestationBasedPolicy.html":{"url":"classes/AttestationBasedPolicy.html","title":"class - AttestationBasedPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AttestationBasedPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                policy\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PolicyType.ATTESTATION_BASED\n\n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:64\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PolicyCredential[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.ts:70\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsEnum,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\nexport enum PolicyType {\n    NONE = \"none\",\n    ALLOW_LIST = \"allowList\",\n    ROOT_OF_TRUST = \"rootOfTrust\",\n    ATTESTATION_BASED = \"attestationBased\",\n}\n\nexport class EmbeddedDisclosurePolicy {\n    @IsDefined()\n    @IsEnum(PolicyType)\n    policy!: PolicyType;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ALLOW_LIST;\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ROOT_OF_TRUST;\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.NONE;\n}\n\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    claims?: any[];\n\n    @IsDefined()\n    @IsArray()\n    credentials!: any[];\n\n    @IsOptional()\n    @IsArray()\n    credential_sets?: any[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ATTESTATION_BASED;\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n// Convenience union type if you use it elsewhere\nexport type AnyPolicy =\n    | NoneTrustPolicy\n    | AllowListPolicy\n    | RootOfTrustPolicy\n    | AttestationBasedPolicy;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthConfigValidator.html":{"url":"classes/AuthConfigValidator.html","title":"class - AuthConfigValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthConfigValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom validator to ensure config type matches the authentication method\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.dto.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         \"config must be undefined when method is \\\"none\\\"\" | \"config must be of type AuthenticationUrlConfig when method is \\\"auth\\\"\" | \"config must be of type PresentationDuringIssuanceConfig when method is \\\"presentationDuringIssuance\\\"\" | \"config type does not match the specified method\"\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(config: any, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.dto.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUrl,\n    Validate,\n    ValidateNested,\n    ValidationArguments,\n    ValidatorConstraint,\n    ValidatorConstraintInterface,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Custom validator to ensure config type matches the authentication method\n */\n@ValidatorConstraint({ name: \"authConfigValidator\", async: false })\nexport class AuthConfigValidator implements ValidatorConstraintInterface {\n    validate(config: any, args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === \"none\") {\n            // For 'none' method, config should be undefined\n            return config === undefined;\n        }\n\n        if (obj.method === \"auth\") {\n            // For 'auth' method, config must be present and have 'url' property\n            return (\n                config &&\n                typeof config === \"object\" &&\n                typeof config.url === \"string\"\n            );\n        }\n\n        if (obj.method === \"presentationDuringIssuance\") {\n            // For 'presentationDuringIssuance' method, config must be present and have 'presentation' property\n            return (\n                config &&\n                typeof config === \"object\" &&\n                typeof config.type === \"string\"\n            );\n        }\n\n        return false;\n    }\n\n    defaultMessage(args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === \"none\") {\n            return 'config must be undefined when method is \"none\"';\n        }\n\n        if (obj.method === \"auth\") {\n            return 'config must be of type AuthenticationUrlConfig when method is \"auth\"';\n        }\n\n        if (obj.method === \"presentationDuringIssuance\") {\n            return 'config must be of type PresentationDuringIssuanceConfig when method is \"presentationDuringIssuance\"';\n        }\n\n        return \"config type does not match the specified method\";\n    }\n}\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsUrl()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\n/**\n * Base class for authentication configurations\n * Determines which OpenID4VC flow to use for the issuance process\n */\nexport class AuthenticationConfigDto {\n    /**\n     * The authentication method to use:\n     * - 'none': Pre-authorized code flow (no user authentication)\n     * - 'auth': OID4VCI authorized code flow (user redirect for authentication)\n     * - 'presentationDuringIssuance': OID4VP flow (credential presentation required)\n     */\n    @IsIn([\"none\", \"auth\", \"presentationDuringIssuance\"])\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n\n    /**\n     * Configuration specific to the selected authentication method\n     * - For 'none': no config needed (undefined) - uses pre-authorized code flow\n     * - For 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\n     * - For 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n     */\n    @IsOptional()\n    @Validate(AuthConfigValidator)\n    config?: AuthenticationUrlConfig | PresentationDuringIssuanceConfig;\n}\n\n/**\n * Union type for authentication configurations\n * Each method corresponds to a specific OpenID4VC flow\n */\nexport type AuthenticationConfig =\n    | { method: \"none\" } // Pre-authorized code flow\n    | { method: \"auth\"; config: AuthenticationUrlConfig } // OID4VCI authorized code flow\n    | {\n          method: \"presentationDuringIssuance\"; // OID4VP flow\n          config: PresentationDuringIssuanceConfig;\n      };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                getGlobalJwks\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOAuth2Token\n                            \n                            \n                                    \n                                    \n                                    \n                                getOidcDiscovery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getGlobalJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGlobalJwks()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('.well-known/jwks.json')@ApiOperation({summary: 'JSON Web Key Set', description: 'Returns the JSON Web Key Set for token verification.'})@ApiResponse({status: 200, description: 'JSON Web Key Set'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:206\n                        \n                    \n\n\n            \n                \n                        Global JWKS endpoint for client credentials flow.\nThis provides the JSON Web Key Set for verifying tokens issued by this server.\n\n\n                        \n                            Returns :         KeyResponseDto\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getOAuth2Token\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOAuth2Token(body: any, headers: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('oauth2/token')@ApiBody({type: ClientCredentialsDto, examples: undefined})@ApiResponse({status: 200, description: 'OAuth2 token response', type: TokenResponse, examples: undefined})@ApiResponse({status: 401, description: 'Invalid client credentials'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:75\n                        \n                    \n\n\n            \n                \n                        OAuth2 Token endpoint - supports client credentials flow only\nAccepts client credentials either in Authorization header (Basic auth) or request body\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getOidcDiscovery\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOidcDiscovery()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('.well-known/oauth-authorization-server')@ApiOperation({summary: 'OIDC Discovery Configuration', description: 'Returns the OpenID Connect discovery configuration for client credentials authentication.'})@ApiResponse({status: 200, description: 'OIDC Discovery Configuration'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:171\n                        \n                    \n\n\n            \n                \n                        OIDC Discovery endpoint for client credentials flow.\nThis endpoint provides the OpenID Connect configuration for applications\nthat need to authenticate using client_id and client_secret.\n\n\n                        \n                            Returns :         OidcDiscoveryDto\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    Headers,\n    Post,\n    UnauthorizedException,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    ApiBody,\n    ApiExcludeController,\n    ApiOperation,\n    ApiResponse,\n    ApiTags,\n} from \"@nestjs/swagger\";\nimport { KeyResponseDto } from \"../crypto/key/dto/key-response.dto\";\nimport { ClientService } from \"./client.service\";\nimport { ClientCredentialsDto } from \"./dto/client-credentials.dto\";\nimport { OidcDiscoveryDto } from \"./dto/oidc-discovery.dto\";\nimport { TokenResponse } from \"./dto/token-response.dto\";\nimport { JwtService } from \"./jwt.service\";\nimport { TokenPayload } from \"./token.decorator\";\n\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@ApiTags(\"Authentication\")\n@Controller(\"\")\nexport class AuthController {\n    constructor(\n        private jwtService: JwtService,\n        private clientService: ClientService,\n        private configService: ConfigService,\n    ) {}\n\n    /**\n     * OAuth2 Token endpoint - supports client credentials flow only\n     * Accepts client credentials either in Authorization header (Basic auth) or request body\n     * @param body\n     * @param headers\n     * @returns\n     */\n    @Post(\"oauth2/token\")\n    @ApiBody({\n        type: ClientCredentialsDto,\n        examples: {\n            client_credentials: {\n                summary: \"Client Credentials Flow\",\n                value: {\n                    grant_type: \"client_credentials\",\n                    client_id: \"root\",\n                    client_secret: \"root\",\n                },\n            },\n        },\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"OAuth2 token response\",\n        type: TokenResponse,\n        examples: {\n            success: {\n                summary: \"Successful response\",\n                value: {\n                    access_token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n                    token_type: \"Bearer\",\n                    expires_in: 86400,\n                },\n            },\n        },\n    })\n    @ApiResponse({\n        status: 401,\n        description: \"Invalid client credentials\",\n    })\n    async getOAuth2Token(\n        @Body() body: any,\n        @Headers() headers: any,\n    ): Promise {\n        if (this.jwtService.isUsingExternalOIDC()) {\n            throw new UnauthorizedException(\n                \"OAuth2 token endpoint is not available when using external OIDC provider. Use your external OIDC provider for authentication.\",\n            );\n        }\n\n        // Only support client credentials flow\n        if (body.grant_type !== \"client_credentials\") {\n            throw new UnauthorizedException(\n                \"Only client_credentials grant type is supported\",\n            );\n        }\n\n        let clientId: string;\n        let clientSecret: string;\n\n        // Try to extract credentials from Authorization header (Basic auth)\n        const authHeader = headers.authorization;\n        if (authHeader && authHeader.startsWith(\"Basic \")) {\n            try {\n                const base64Credentials = authHeader.substring(6);\n                const credentials = Buffer.from(\n                    base64Credentials,\n                    \"base64\",\n                ).toString(\"ascii\");\n                const [id, secret] = credentials.split(\":\");\n                clientId = id;\n                clientSecret = secret;\n            } catch {\n                throw new UnauthorizedException(\n                    \"Invalid Authorization header format\",\n                );\n            }\n        } else {\n            // Fall back to request body\n            clientId = body.client_id;\n            clientSecret = body.client_secret;\n        }\n\n        if (!clientId || !clientSecret) {\n            throw new UnauthorizedException(\n                \"Client credentials must be provided either in Authorization header (Basic auth) or request body\",\n            );\n        }\n\n        const client = this.clientService.validateClient(\n            clientId,\n            clientSecret,\n        );\n        if (!client) {\n            throw new UnauthorizedException(\"Invalid client credentials\");\n        }\n\n        //TODO: check if the access token should only include the session id or also e.g. the credentials that should be issued. I would think this is not required since we still need the claims for it.\n        const payload: TokenPayload = {\n            sub: client.id,\n        };\n\n        //TODO: make expiresIn configurable?\n        const access_token = await this.jwtService.generateToken(payload, {\n            expiresIn: \"24h\",\n            audience: \"eudiplo-service\",\n        });\n\n        const refresh_token = await this.jwtService.generateToken(payload, {\n            expiresIn: \"30d\",\n            audience: \"eudiplo-service\",\n        });\n\n        return {\n            access_token,\n            refresh_token,\n            token_type: \"Bearer\",\n            expires_in: 86400, // 24 hours in seconds\n        };\n    }\n\n    /**\n     * OIDC Discovery endpoint for client credentials flow.\n     * This endpoint provides the OpenID Connect configuration for applications\n     * that need to authenticate using client_id and client_secret.\n     */\n    @Get(\".well-known/oauth-authorization-server\")\n    @ApiOperation({\n        summary: \"OIDC Discovery Configuration\",\n        description:\n            \"Returns the OpenID Connect discovery configuration for client credentials authentication.\",\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"OIDC Discovery Configuration\",\n    })\n    getOidcDiscovery(): OidcDiscoveryDto {\n        const publicUrl = this.configService.getOrThrow(\"PUBLIC_URL\");\n\n        return {\n            issuer: publicUrl,\n            token_endpoint: `${publicUrl}/oauth2/token`,\n            jwks_uri: `${publicUrl}/.well-known/jwks.json`,\n            response_types_supported: [\"token\"],\n            grant_types_supported: [\"client_credentials\"],\n            token_endpoint_auth_methods_supported: [\n                \"client_secret_basic\",\n                \"client_secret_post\",\n            ],\n            subject_types_supported: [\"public\"],\n            id_token_signing_alg_values_supported: [\"ES256\"],\n            scopes_supported: [\"openid\"],\n            claims_supported: [\"iss\", \"sub\", \"aud\", \"exp\", \"iat\"],\n            service_documentation:\n                \"https://openwallet-foundation-labs.github.io/eudiplo/latest/\",\n        };\n    }\n\n    /**\n     * Global JWKS endpoint for client credentials flow.\n     * This provides the JSON Web Key Set for verifying tokens issued by this server.\n     */\n    @Get(\".well-known/jwks.json\")\n    @ApiOperation({\n        summary: \"JSON Web Key Set\",\n        description: \"Returns the JSON Web Key Set for token verification.\",\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"JSON Web Key Set\",\n    })\n    getGlobalJwks(): KeyResponseDto {\n        // For now, return an empty key set since the actual keys are tenant-specific\n        // This can be enhanced later to include global signing keys if needed\n        return {\n            keys: [],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCryptoModule->AuthModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nAuthModule -->\n\nIssuerModule->AuthModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nAuthModule -->\n\nRegistrarModule->AuthModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nAuthModule -->\n\nStatusListModule->AuthModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nClientService\n\nClientService\n\nAuthModule -->\n\nClientService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClientService\n                        \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            IssuerModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { makeGaugeProvider } from \"@willsoto/nestjs-prometheus\";\nimport * as Joi from \"joi\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { IssuerModule } from \"../issuer/issuer.module\";\nimport { StatusListModule } from \"../issuer/status-list/status-list.module\";\nimport { RegistrarModule } from \"../registrar/registrar.module\";\nimport { StorageModule } from \"../storage/storage.module\";\nimport { AuthController } from \"./auth.controller\";\nimport { JwtAuthGuard } from \"./auth.guard\";\nimport { ClientService } from \"./client.service\";\nimport { ClientEntry } from \"./entitites/client.entity\";\nimport { JwtService } from \"./jwt.service\";\nimport { JwtStrategy } from \"./jwt.strategy\";\n\nexport const DEFAULT_JWT_SECRET = \"supersecret\";\nexport const DEFAULT_AUTH_CLIENT_ID = \"root\";\nexport const DEFAULT_AUTH_CLIENT_SECRET = \"root\";\n\nexport const AUTH_VALIDATION_SCHEMA = {\n    OIDC: Joi.string().optional(),\n    KEYCLOAK_INTERNAL_ISSUER_URL: Joi.when(\"OIDC\", {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    KEYCLOAK_ALGORITHM: Joi.when(\"OIDC\", {\n        then: Joi.string().default(\"RS256\"),\n        otherwise: Joi.string().optional(),\n    }),\n    JWT_SECRET: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_JWT_SECRET),\n    }),\n    JWT_ISSUER: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().optional().default(\"eudiplo-service\"),\n    }),\n    JWT_EXPIRES_IN: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(\"24h\"),\n    }),\n    AUTH_CLIENT_SECRET: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_SECRET),\n    }),\n    AUTH_CLIENT_ID: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_ID),\n    }),\n};\n@Module({\n    imports: [\n        PassportModule,\n        ConfigModule,\n        CryptoModule,\n        StatusListModule,\n        RegistrarModule,\n        IssuerModule,\n        TypeOrmModule.forFeature([ClientEntry]),\n    ],\n    providers: [\n        JwtStrategy,\n        JwtAuthGuard,\n        JwtService,\n        ClientService,\n        makeGaugeProvider({\n            name: \"tenant_client_total\",\n            help: \"Total number of tenant clients\",\n        }),\n    ],\n    controllers: [AuthController],\n    exports: [PassportModule, JwtStrategy, JwtAuthGuard, JwtService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthResponse.html":{"url":"interfaces/AuthResponse.html","title":"interface - AuthResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/auth-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthResponse DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            state\n                                        \n                                \n                                \n                                        \n                                            vp_token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The state parameter to maintain state between the request and callback.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vp_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        vp_token:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The VP token containing the presentation data.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AuthResponse {\n    /**\n     * The VP token containing the presentation data.\n     */\n    vp_token: {\n        /**\n         * Key-value pairs representing the VP token data.\n         */\n        [key: string]: string;\n    };\n    /**\n     * The state parameter to maintain state between the request and callback.\n     */\n    state: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationConfigDto.html":{"url":"classes/AuthenticationConfigDto.html","title":"class - AuthenticationConfigDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationConfigDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Base class for authentication configurations\nDetermines which OpenID4VC flow to use for the issuance process\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                config\n                            \n                            \n                                    \n                                method\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationUrlConfig | PresentationDuringIssuanceConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Validate(AuthConfigValidator)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:125\n                        \n                    \n\n            \n                \n                    Configuration specific to the selected authentication method\n\nFor 'none': no config needed (undefined) - uses pre-authorized code flow\nFor 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\nFor 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"none\" | \"auth\" | \"presentationDuringIssuance\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['none', 'auth', 'presentationDuringIssuance'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:115\n                        \n                    \n\n            \n                \n                    The authentication method to use:\n\n'none': Pre-authorized code flow (no user authentication)\n'auth': OID4VCI authorized code flow (user redirect for authentication)\n'presentationDuringIssuance': OID4VP flow (credential presentation required)\n\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUrl,\n    Validate,\n    ValidateNested,\n    ValidationArguments,\n    ValidatorConstraint,\n    ValidatorConstraintInterface,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Custom validator to ensure config type matches the authentication method\n */\n@ValidatorConstraint({ name: \"authConfigValidator\", async: false })\nexport class AuthConfigValidator implements ValidatorConstraintInterface {\n    validate(config: any, args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === \"none\") {\n            // For 'none' method, config should be undefined\n            return config === undefined;\n        }\n\n        if (obj.method === \"auth\") {\n            // For 'auth' method, config must be present and have 'url' property\n            return (\n                config &&\n                typeof config === \"object\" &&\n                typeof config.url === \"string\"\n            );\n        }\n\n        if (obj.method === \"presentationDuringIssuance\") {\n            // For 'presentationDuringIssuance' method, config must be present and have 'presentation' property\n            return (\n                config &&\n                typeof config === \"object\" &&\n                typeof config.type === \"string\"\n            );\n        }\n\n        return false;\n    }\n\n    defaultMessage(args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === \"none\") {\n            return 'config must be undefined when method is \"none\"';\n        }\n\n        if (obj.method === \"auth\") {\n            return 'config must be of type AuthenticationUrlConfig when method is \"auth\"';\n        }\n\n        if (obj.method === \"presentationDuringIssuance\") {\n            return 'config must be of type PresentationDuringIssuanceConfig when method is \"presentationDuringIssuance\"';\n        }\n\n        return \"config type does not match the specified method\";\n    }\n}\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsUrl()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\n/**\n * Base class for authentication configurations\n * Determines which OpenID4VC flow to use for the issuance process\n */\nexport class AuthenticationConfigDto {\n    /**\n     * The authentication method to use:\n     * - 'none': Pre-authorized code flow (no user authentication)\n     * - 'auth': OID4VCI authorized code flow (user redirect for authentication)\n     * - 'presentationDuringIssuance': OID4VP flow (credential presentation required)\n     */\n    @IsIn([\"none\", \"auth\", \"presentationDuringIssuance\"])\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n\n    /**\n     * Configuration specific to the selected authentication method\n     * - For 'none': no config needed (undefined) - uses pre-authorized code flow\n     * - For 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\n     * - For 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n     */\n    @IsOptional()\n    @Validate(AuthConfigValidator)\n    config?: AuthenticationUrlConfig | PresentationDuringIssuanceConfig;\n}\n\n/**\n * Union type for authentication configurations\n * Each method corresponds to a specific OpenID4VC flow\n */\nexport type AuthenticationConfig =\n    | { method: \"none\" } // Pre-authorized code flow\n    | { method: \"auth\"; config: AuthenticationUrlConfig } // OID4VCI authorized code flow\n    | {\n          method: \"presentationDuringIssuance\"; // OID4VP flow\n          config: PresentationDuringIssuanceConfig;\n      };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationUrlConfig.html":{"url":"classes/AuthenticationUrlConfig.html","title":"class - AuthenticationUrlConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationUrlConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for authentication method 'auth'\nUsed for OID4VCI authorized code flow where the user will be redirected for authentication\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                url\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:79\n                        \n                    \n\n            \n                \n                    The URL used in the OID4VCI authorized code flow.\nThis URL is where users will be redirected for authentication.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:88\n                        \n                    \n\n            \n                \n                    Optional webhook configuration for authentication callbacks\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUrl,\n    Validate,\n    ValidateNested,\n    ValidationArguments,\n    ValidatorConstraint,\n    ValidatorConstraintInterface,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Custom validator to ensure config type matches the authentication method\n */\n@ValidatorConstraint({ name: \"authConfigValidator\", async: false })\nexport class AuthConfigValidator implements ValidatorConstraintInterface {\n    validate(config: any, args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === \"none\") {\n            // For 'none' method, config should be undefined\n            return config === undefined;\n        }\n\n        if (obj.method === \"auth\") {\n            // For 'auth' method, config must be present and have 'url' property\n            return (\n                config &&\n                typeof config === \"object\" &&\n                typeof config.url === \"string\"\n            );\n        }\n\n        if (obj.method === \"presentationDuringIssuance\") {\n            // For 'presentationDuringIssuance' method, config must be present and have 'presentation' property\n            return (\n                config &&\n                typeof config === \"object\" &&\n                typeof config.type === \"string\"\n            );\n        }\n\n        return false;\n    }\n\n    defaultMessage(args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === \"none\") {\n            return 'config must be undefined when method is \"none\"';\n        }\n\n        if (obj.method === \"auth\") {\n            return 'config must be of type AuthenticationUrlConfig when method is \"auth\"';\n        }\n\n        if (obj.method === \"presentationDuringIssuance\") {\n            return 'config must be of type PresentationDuringIssuanceConfig when method is \"presentationDuringIssuance\"';\n        }\n\n        return \"config type does not match the specified method\";\n    }\n}\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsUrl()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\n/**\n * Base class for authentication configurations\n * Determines which OpenID4VC flow to use for the issuance process\n */\nexport class AuthenticationConfigDto {\n    /**\n     * The authentication method to use:\n     * - 'none': Pre-authorized code flow (no user authentication)\n     * - 'auth': OID4VCI authorized code flow (user redirect for authentication)\n     * - 'presentationDuringIssuance': OID4VP flow (credential presentation required)\n     */\n    @IsIn([\"none\", \"auth\", \"presentationDuringIssuance\"])\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n\n    /**\n     * Configuration specific to the selected authentication method\n     * - For 'none': no config needed (undefined) - uses pre-authorized code flow\n     * - For 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\n     * - For 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n     */\n    @IsOptional()\n    @Validate(AuthConfigValidator)\n    config?: AuthenticationUrlConfig | PresentationDuringIssuanceConfig;\n}\n\n/**\n * Union type for authentication configurations\n * Each method corresponds to a specific OpenID4VC flow\n */\nexport type AuthenticationConfig =\n    | { method: \"none\" } // Pre-authorized code flow\n    | { method: \"auth\"; config: AuthenticationUrlConfig } // OID4VCI authorized code flow\n    | {\n          method: \"presentationDuringIssuance\"; // OID4VP flow\n          config: PresentationDuringIssuanceConfig;\n      };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizationResponse.html":{"url":"classes/AuthorizationResponse.html","title":"class - AuthorizationResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizationResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/authorization-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the authorization response containing the VP token.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                response\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/authorization-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The response string containing the authorization details.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from \"class-validator\";\n\n/**\n * DTO for the authorization response containing the VP token.\n */\nexport class AuthorizationResponse {\n    /**\n     * The response string containing the authorization details.\n     */\n    @IsString()\n    response: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthorizeController.html":{"url":"controllers/AuthorizeController.html","title":"controller - AuthorizeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthorizeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/authorize\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI authorization endpoints.\nThis controller handles the authorization requests, token requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                authorizationChallengeEndpoint\n                            \n                            \n                                    \n                                authorize\n                            \n                            \n                                    \n                                    \n                                    Async\n                                par\n                            \n                            \n                                    \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response, body: AuthorizeQueries, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Post('challenge')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:94\n                        \n                    \n\n\n            \n                \n                        Endpoint for the authorization challenge.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorize\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorize(queries: AuthorizeQueries, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:41\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Authorization Request.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        par\n                        \n                    \n                \n            \n            \n                \n                        \n                    par(body: AuthorizeQueries)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({description: 'Pushed Authorization Request', type: AuthorizeQueries})@Post('par')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:55\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Pushed Authorization Request (PAR).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        token\n                        \n                    \n                \n            \n            \n                \n                        \n                    token(body: any, req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Post('token')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:77\n                        \n                    \n\n\n            \n                \n                        Endpoint to validate the token request.\nThis endpoint is used to exchange the authorization code for an access token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport {\n    Body,\n    Controller,\n    Get,\n    Post,\n    Query,\n    Req,\n    Res,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiBody, ApiExcludeController } from \"@nestjs/swagger\";\nimport type { Request, Response } from \"express\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionEntity } from \"../../session/session.decorator\";\nimport { SessionGuard } from \"../../session/session.guard\";\nimport { SessionService } from \"../../session/session.service\";\nimport { AuthorizeService } from \"./authorize.service\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\nimport { ParResponseDto } from \"./dto/par-response.dto\";\n\n/**\n * Controller for the OpenID4VCI authorization endpoints.\n * This controller handles the authorization requests, token requests.\n */\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@UseGuards(SessionGuard)\n@Controller(\":session/authorize\")\nexport class AuthorizeController {\n    constructor(\n        private readonly authorizeService: AuthorizeService,\n        private sessionService: SessionService,\n    ) {}\n\n    /**\n     * Endpoint to handle the Authorization Request.\n     * @param queries\n     * @param res\n     */\n    @Get()\n    authorize(@Query() queries: AuthorizeQueries, @Res() res: Response) {\n        return this.authorizeService.sendAuthorizationResponse(queries, res);\n    }\n\n    /**\n     * Endpoint to handle the Pushed Authorization Request (PAR).\n     * @param body\n     * @returns\n     */\n    @ApiBody({\n        description: \"Pushed Authorization Request\",\n        type: AuthorizeQueries,\n    })\n    @Post(\"par\")\n    async par(@Body() body: AuthorizeQueries): Promise {\n        const request_uri = `urn:${randomUUID()}`;\n        // save both so we can retrieve the session also via the request_uri in the authorize step.\n        await this.sessionService.add(body.issuer_state!, {\n            request_uri,\n            auth_queries: body,\n        });\n        return {\n            expires_in: 500,\n            request_uri,\n        };\n    }\n\n    /**\n     * Endpoint to validate the token request.\n     * This endpoint is used to exchange the authorization code for an access token.\n     * @param body\n     * @param req\n     * @returns\n     */\n    @UseGuards(SessionGuard)\n    @Post(\"token\")\n    token(\n        @Body() body: any,\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ): Promise {\n        //TODO: define body\n        return this.authorizeService.validateTokenRequest(body, req, session);\n    }\n\n    /**\n     * Endpoint for the authorization challenge.\n     * @param res\n     * @param body\n     * @returns\n     */\n    @UseGuards(SessionGuard)\n    @Post(\"challenge\")\n    authorizationChallengeEndpoint(\n        @Res() res: Response,\n        @Body() body: AuthorizeQueries,\n        @SessionEntity() session: Session,\n    ) {\n        return this.authorizeService.authorizationChallengeEndpoint(\n            res,\n            body,\n            session,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizeQueries.html":{"url":"classes/AuthorizeQueries.html","title":"class - AuthorizeQueries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizeQueries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/authorize-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                auth_session\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                client_id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge_method\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                dpop_jkt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                issuer_state\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                redirect_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resource\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        auth_session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge_method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        dpop_jkt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        issuer_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        redirect_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\";\n\nexport class AuthorizeQueries {\n    @IsOptional()\n    @IsString()\n    issuer_state?: string;\n    @IsOptional()\n    @IsString()\n    response_type?: string;\n    @IsOptional()\n    @IsString()\n    client_id?: string;\n    @IsOptional()\n    @IsString()\n    redirect_uri?: string;\n    @IsOptional()\n    @IsString()\n    resource?: string;\n    @IsOptional()\n    @IsString()\n    scope?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge_method?: string;\n    @IsOptional()\n    @IsString()\n    dpop_jkt?: string;\n    @IsOptional()\n    @IsString()\n    request_uri?: string;\n    @IsOptional()\n    @IsString()\n    auth_session?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthorizeService.html":{"url":"injectables/AuthorizeService.html","title":"injectable - AuthorizeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthorizeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authorizationChallengeEndpoint\n                            \n                            \n                                authzMetadata\n                            \n                            \n                                getAuthorizationServer\n                            \n                            \n                                    Async\n                                parseChallengeRequest\n                            \n                            \n                                    Private\n                                    Async\n                                sendAuthorizationCode\n                            \n                            \n                                    Async\n                                sendAuthorizationResponse\n                            \n                            \n                                    Async\n                                setAuthCode\n                            \n                            \n                                    Async\n                                validateTokenRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, oid4vpService: Oid4vpService, sessionService: SessionService, issuanceService: IssuanceService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/authorize/authorize.service.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oid4vpService\n                                                  \n                                                        \n                                                                        Oid4vpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issuanceService\n                                                  \n                                                        \n                                                                        IssuanceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response>, body: AuthorizeQueries, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:226\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \nauthzMetadata(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     AuthorizationServerMetadata\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthorizationServer\n                        \n                    \n                \n            \n            \n                \ngetAuthorizationServer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Oauth2AuthorizationServer\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        parseChallengeRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseChallengeRequest(body: AuthorizeQueries, tenantId: string, webhook?: WebhookConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:208\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                webhook\n                                            \n                                                            WebhookConfig\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        sendAuthorizationCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationCode(res: Response, issuer_state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:298\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendAuthorizationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationResponse(queries: AuthorizeQueries, res: Response>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setAuthCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAuthCode(issuer_state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:305\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateTokenRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateTokenRequest(body: any, req: Request, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from \"@openid4vc/oauth2\";\nimport type { Request, Response } from \"express\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\nimport { Oid4vpService } from \"../../verifier/oid4vp/oid4vp.service\";\nimport { IssuanceService } from \"../issuance/issuance.service\";\nimport { getHeadersFromRequest } from \"../oid4vci/util\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow(\"PUBLIC_URL\") +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: [\"ES256\"],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        \"request_uri not found or not provided in the request\",\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                \"request_uri not found or not provided in the request\",\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow(\"PUBLIC_URL\")}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        /*         const session = await this.sessionService.getBy({\n            authorization_code: body.code ?? body['pre-authorized_code'],\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        } */\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.id}`,\n            signer: {\n                method: \"jwk\",\n                alg: \"ES256\",\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    \"jwk\",\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: \"wallet\", // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest(\"pid\", { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: \"insufficient_authorization\",\n            auth_session,\n            presentation,\n            error_description:\n                \"Presentation of credential required before issuance\",\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    \"Session does not have valid credentials for issuance\",\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                issuanceId,\n                session.tenantId,\n            );\n\n        // Use the new authentication configuration structure\n        const authConfig = issuanceConfig.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                \"No authentication configuration found for issuance config\",\n            );\n        }\n\n        switch (authConfig.method) {\n            case \"presentationDuringIssuance\": {\n                // OID4VP flow - credential presentation required\n                const webhook = issuanceConfig.claimsWebhook;\n                const response = await this.parseChallengeRequest(\n                    body,\n                    session.tenantId,\n                    webhook,\n                );\n                res.status(400).send(response);\n                break;\n            }\n            case \"auth\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            case \"none\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            default:\n                throw new Error(\n                    `Unsupported authentication method: ${(authConfig as any).method}`,\n                );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CertEntity.html":{"url":"entities/CertEntity.html","title":"entity - CertEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CertEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/entities/cert.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage certificates for keys.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                crt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:45\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:27\n                        \n                    \n\n            \n                \n                    Certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:39\n                        \n                    \n\n            \n                \n                    Description of the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:15\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:21\n                        \n                    \n\n            \n                \n                    Tenant ID for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CertificateType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {default: 'signing', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:33\n                        \n                    \n\n            \n                \n                    Type of the certificate (access or signing).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:51\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { IsEmpty } from \"class-validator\";\nimport { Column, CreateDateColumn, Entity, UpdateDateColumn } from \"typeorm\";\n\nexport type CertificateType = \"access\" | \"signing\";\n\n/**\n * Entity to manage certificates for keys.\n */\n@Entity()\nexport class CertEntity {\n    /**\n     * Unique identifier for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    id: string;\n\n    /**\n     * Tenant ID for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * Certificate in PEM format.\n     */\n    @Column(\"varchar\")\n    crt: string;\n\n    /**\n     * Type of the certificate (access or signing).\n     */\n    @Column(\"varchar\", { default: \"signing\", primary: true })\n    type: CertificateType;\n\n    /**\n     * Description of the key.\n     */\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Client.html":{"url":"interfaces/Client.html","title":"interface - Client","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Client\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    BadRequestException,\n    Injectable,\n    OnApplicationBootstrap,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { InjectMetric } from \"@willsoto/nestjs-prometheus\";\nimport { Gauge } from \"prom-client\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { EncryptionService } from \"../crypto/encryption/encryption.service\";\nimport { Oid4vciService } from \"../issuer/oid4vci/oid4vci.service\";\nimport { StatusListService } from \"../issuer/status-list/status-list.service\";\nimport { RegistrarService } from \"../registrar/registrar.service\";\nimport { ClientEntry } from \"./entitites/client.entity\";\n\n// Client interface for service integration\nexport interface Client {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class ClientService implements OnApplicationBootstrap {\n    private clients: Client[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private statutsListService: StatusListService,\n        private registrarService: RegistrarService,\n        private oid4vciService: Oid4vciService,\n        @InjectRepository(ClientEntry)\n        private clientRepository: Repository,\n        @InjectMetric(\"tenant_client_total\")\n        private tenantClientTotal: Gauge,\n    ) {}\n\n    async onApplicationBootstrap() {\n        // Initialize the client metrics\n        const count = await this.clientRepository.countBy({ status: \"set up\" });\n        this.tenantClientTotal.set({}, count);\n    }\n\n    /**\n     * Get clients from configuration\n     * @returns\n     */\n    private getClients(): Client[] {\n        if (!this.clients) {\n            this.clients = this.loadClients();\n        }\n        return this.clients;\n    }\n\n    /**\n     * Load clients from configuration\n     */\n    private loadClients(): Client[] {\n        // Default clients for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow(\"AUTH_CLIENT_ID\"),\n                secret: this.configService.getOrThrow(\n                    \"AUTH_CLIENT_SECRET\",\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate client credentials (OAuth2 Client Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateClient(clientId: string, clientSecret: string): Client | null {\n        const client = this.getClients().find((c) => c.id === clientId);\n\n        if (!client || client.secret !== clientSecret) {\n            return null;\n        }\n\n        return client;\n    }\n\n    /**\n     * Find client by ID\n     */\n    findClientById(clientId: string): Client | null {\n        return this.getClients().find((c) => c.id === clientId) || null;\n    }\n\n    /**\n     * Check if the client is set up, if not, set it up.\n     * @param id\n     * @returns\n     */\n    async isSetUp(id: string) {\n        void this.clientRepository\n            .countBy({ status: \"set up\" })\n            .then((count) => {\n                this.tenantClientTotal.set({}, count);\n            });\n\n        await this.clientRepository.findOneByOrFail({ id }).then(\n            (res) => {\n                if (res.status === \"set up\") {\n                    return true;\n                }\n                throw new BadRequestException(\n                    `Client ${id} is not set up. Please retry later.`,\n                );\n            },\n            async () => {\n                // create it to signl that the client getting set up\n                await this.clientRepository.save({ id });\n                await this.setUpClient(id).catch(async (err) => {\n                    console.error(err);\n                    // if there is an error, update the client status\"\n                    await this.clientRepository.update(\n                        { id },\n                        { status: \"error\", error: err.message },\n                    );\n                    throw new BadRequestException(\n                        `Error setting up client ${id}. Please retry later.`,\n                    );\n                });\n                // if everything is fine, update the client status\n                return this.clientRepository.update(\n                    { id },\n                    { status: \"set up\" },\n                );\n            },\n        );\n    }\n\n    /**\n     * Sends an event to set up a client, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    async setUpClient(id: string) {\n        await this.cryptoService.onTenantInit(id);\n        await this.encryptionService.onTenantInit(id);\n        await this.statutsListService.onTenantInit(id);\n        await this.registrarService.onTenantInit(id);\n        await this.oid4vciService.onTenantInit(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClientCredentialsDto.html":{"url":"classes/ClientCredentialsDto.html","title":"class - ClientCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClientCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/client-credentials.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                client_id\n                            \n                            \n                                    \n                                client_secret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from \"class-validator\";\n\nexport class ClientCredentialsDto {\n    @IsString()\n    client_id: string;\n    @IsString()\n    client_secret: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ClientEntry.html":{"url":"entities/ClientEntry.html","title":"entity - ClientEntry","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ClientEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entitites/client.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                error\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entitites/client.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entitites/client.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClientStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {default: 'init'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entitites/client.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryColumn } from \"typeorm\";\n\nexport type ClientStatus = \"init\" | \"set up\" | \"error\";\n\n@Entity()\nexport class ClientEntry {\n    @PrimaryColumn()\n    id: string;\n\n    @Column(\"varchar\", { default: \"init\" })\n    status: ClientStatus;\n\n    @Column(\"varchar\", { nullable: true })\n    error?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClientService.html":{"url":"injectables/ClientService.html","title":"injectable - ClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clients\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findClientById\n                            \n                            \n                                    Private\n                                getClients\n                            \n                            \n                                    Async\n                                isSetUp\n                            \n                            \n                                    Private\n                                loadClients\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                setUpClient\n                            \n                            \n                                validateClient\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, encryptionService: EncryptionService, statutsListService: StatusListService, registrarService: RegistrarService, oid4vciService: Oid4vciService, clientRepository: Repository, tenantClientTotal: Gauge)\n                    \n                \n                        \n                            \n                                Defined in src/auth/client.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statutsListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oid4vciService\n                                                  \n                                                        \n                                                                        Oid4vciService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        clientRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantClientTotal\n                                                  \n                                                        \n                                                                    Gauge\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findClientById\n                        \n                    \n                \n            \n            \n                \nfindClientById(clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Find client by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Client | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Get clients from configuration\n\n\n                        \n                            Returns :         Client[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isSetUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    isSetUp(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:99\n                        \n                    \n\n\n            \n                \n                        Check if the client is set up, if not, set it up.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Load clients from configuration\n\n\n                        \n                            Returns :         Client[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setUpClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    setUpClient(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:142\n                        \n                    \n\n\n            \n                \n                        Sends an event to set up a client, allowing all other services to listen and react accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateClient\n                        \n                    \n                \n            \n            \n                \nvalidateClient(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:77\n                        \n                    \n\n\n            \n                \n                        Validate client credentials (OAuth2 Client Credentials flow)\nThis is the primary authentication method for service integration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Client | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clients\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Client[] | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/auth/client.service.ts:26\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    BadRequestException,\n    Injectable,\n    OnApplicationBootstrap,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { InjectMetric } from \"@willsoto/nestjs-prometheus\";\nimport { Gauge } from \"prom-client\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { EncryptionService } from \"../crypto/encryption/encryption.service\";\nimport { Oid4vciService } from \"../issuer/oid4vci/oid4vci.service\";\nimport { StatusListService } from \"../issuer/status-list/status-list.service\";\nimport { RegistrarService } from \"../registrar/registrar.service\";\nimport { ClientEntry } from \"./entitites/client.entity\";\n\n// Client interface for service integration\nexport interface Client {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class ClientService implements OnApplicationBootstrap {\n    private clients: Client[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private statutsListService: StatusListService,\n        private registrarService: RegistrarService,\n        private oid4vciService: Oid4vciService,\n        @InjectRepository(ClientEntry)\n        private clientRepository: Repository,\n        @InjectMetric(\"tenant_client_total\")\n        private tenantClientTotal: Gauge,\n    ) {}\n\n    async onApplicationBootstrap() {\n        // Initialize the client metrics\n        const count = await this.clientRepository.countBy({ status: \"set up\" });\n        this.tenantClientTotal.set({}, count);\n    }\n\n    /**\n     * Get clients from configuration\n     * @returns\n     */\n    private getClients(): Client[] {\n        if (!this.clients) {\n            this.clients = this.loadClients();\n        }\n        return this.clients;\n    }\n\n    /**\n     * Load clients from configuration\n     */\n    private loadClients(): Client[] {\n        // Default clients for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow(\"AUTH_CLIENT_ID\"),\n                secret: this.configService.getOrThrow(\n                    \"AUTH_CLIENT_SECRET\",\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate client credentials (OAuth2 Client Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateClient(clientId: string, clientSecret: string): Client | null {\n        const client = this.getClients().find((c) => c.id === clientId);\n\n        if (!client || client.secret !== clientSecret) {\n            return null;\n        }\n\n        return client;\n    }\n\n    /**\n     * Find client by ID\n     */\n    findClientById(clientId: string): Client | null {\n        return this.getClients().find((c) => c.id === clientId) || null;\n    }\n\n    /**\n     * Check if the client is set up, if not, set it up.\n     * @param id\n     * @returns\n     */\n    async isSetUp(id: string) {\n        void this.clientRepository\n            .countBy({ status: \"set up\" })\n            .then((count) => {\n                this.tenantClientTotal.set({}, count);\n            });\n\n        await this.clientRepository.findOneByOrFail({ id }).then(\n            (res) => {\n                if (res.status === \"set up\") {\n                    return true;\n                }\n                throw new BadRequestException(\n                    `Client ${id} is not set up. Please retry later.`,\n                );\n            },\n            async () => {\n                // create it to signl that the client getting set up\n                await this.clientRepository.save({ id });\n                await this.setUpClient(id).catch(async (err) => {\n                    console.error(err);\n                    // if there is an error, update the client status\"\n                    await this.clientRepository.update(\n                        { id },\n                        { status: \"error\", error: err.message },\n                    );\n                    throw new BadRequestException(\n                        `Error setting up client ${id}. Please retry later.`,\n                    );\n                });\n                // if everything is fine, update the client status\n                return this.clientRepository.update(\n                    { id },\n                    { status: \"set up\" },\n                );\n            },\n        );\n    }\n\n    /**\n     * Sends an event to set up a client, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    async setUpClient(id: string) {\n        await this.cryptoService.onTenantInit(id);\n        await this.encryptionService.onTenantInit(id);\n        await this.statutsListService.onTenantInit(id);\n        await this.registrarService.onTenantInit(id);\n        await this.oid4vciService.onTenantInit(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CredentialConfig.html":{"url":"entities/CredentialConfig.html","title":"entity - CredentialConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CredentialConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                claims\n                            \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                credentialIssuanceBindings\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                disclosureFrame\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                embeddedDisclosurePolicy\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                key\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                keyBinding\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                keyId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lifeTime\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                statusManagement\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfigurationSupported\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialIssuanceBindings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialIssuanceBinding[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, binding => binding.credentialConfig, {cascade: undefined, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        disclosureFrame\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        embeddedDisclosurePolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AnyPolicy\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined, {discriminator: undefined, keepDiscriminatorProperty: true})@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:116\n                        \n                    \n\n            \n                \n                    Embedded disclosure policy (discriminated union by policy).\nThe discriminator makes class-transformer instantiate the right subclass,\nand then class-validator runs that subclass’s rules.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CertEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        keyBinding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Column('boolean', {default: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        keyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lifeTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Column('int', {nullable: true})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SchemaResponse\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        statusManagement\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Column('boolean', {default: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         VCT\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:63\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // --- credential-config.entity.ts ---\n\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { CredentialConfigurationSupported } from \"@openid4vc/openid4vci\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsBoolean,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToOne, OneToMany } from \"typeorm\";\n\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { VCT } from \"../../credentials-metadata/dto/credential-config.dto\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { CredentialIssuanceBinding } from \"../../issuance/entities/credential-issuance-binding.entity\";\n\nimport {\n    AllowListPolicy,\n    AnyPolicy,\n    AttestationBasedPolicy,\n    EmbeddedDisclosurePolicy,\n    NoneTrustPolicy,\n    PolicyType,\n    RootOfTrustPolicy,\n} from \"./policies\";\n\n@Entity()\nexport class CredentialConfig {\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id!: string;\n\n    @IsString()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId!: string;\n\n    @Column(\"json\")\n    @IsObject()\n    config!: CredentialConfigurationSupported;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    claims?: Record;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    disclosureFrame?: Record;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => VCT)\n    @Column(\"json\", { nullable: true })\n    vct?: VCT;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    keyBinding?: boolean;\n\n    @IsOptional()\n    @IsString()\n    keyId?: string;\n\n    @ManyToOne(() => CertEntity)\n    key!: CertEntity;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    statusManagement?: boolean;\n\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    @IsNumber()\n    lifeTime?: number;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => SchemaResponse)\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n\n    /**\n     * Embedded disclosure policy (discriminated union by `policy`).\n     * The discriminator makes class-transformer instantiate the right subclass,\n     * and then class-validator runs that subclass’s rules.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => EmbeddedDisclosurePolicy, {\n        discriminator: {\n            property: \"policy\",\n            subTypes: [\n                { name: PolicyType.NONE, value: NoneTrustPolicy },\n                { name: PolicyType.ALLOW_LIST, value: AllowListPolicy },\n                { name: PolicyType.ROOT_OF_TRUST, value: RootOfTrustPolicy },\n                {\n                    name: PolicyType.ATTESTATION_BASED,\n                    value: AttestationBasedPolicy,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true, // keep `policy` on the instance\n    })\n    @Column(\"json\", { nullable: true })\n    embeddedDisclosurePolicy?: AnyPolicy;\n\n    @OneToMany(\n        () => CredentialIssuanceBinding,\n        (binding) => binding.credentialConfig,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    credentialIssuanceBindings!: CredentialIssuanceBinding[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialConfigCreate.html":{"url":"classes/CredentialConfigCreate.html","title":"class - CredentialConfigCreate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialConfigCreate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/dto/credential-config-create.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(CredentialConfig, [\n    \"tenantId\",\n    \"key\",\n    \"credentialIssuanceBindings\",\n])\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { CredentialConfig } from \"../entities/credential.entity\";\n\nexport class CredentialConfigCreate extends OmitType(CredentialConfig, [\n    \"tenantId\",\n    \"key\",\n    \"credentialIssuanceBindings\",\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialConfigMapping.html":{"url":"classes/CredentialConfigMapping.html","title":"class - CredentialConfigMapping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialConfigMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/issuance.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for mapping credential configurations in issuance.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:23\n                        \n                    \n\n            \n                \n                    Unique identifier for the credential configuration.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { IssuanceConfig } from \"../entities/issuance-config.entity\";\nimport { AuthenticationConfigDto } from \"./authentication-config.dto\";\n\n/**\n * DTO for mapping credential configurations in issuance.\n */\nexport class CredentialConfigMapping {\n    /**\n     * Unique identifier for the credential configuration.\n     */\n    @IsString()\n    id: string;\n}\n\n/**\n * DTO for mapping issuance configurations.\n */\nexport class IssuanceDto extends OmitType(IssuanceConfig, [\n    \"tenantId\",\n    \"credentialIssuanceBindings\",\n    \"createdAt\",\n    \"updatedAt\",\n] as const) {\n    /**\n     * Ids of the credential configurations associated with this issuance configuration.\n     */\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialConfigMapping)\n    credentialConfigs: CredentialConfigMapping[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialConfigService.html":{"url":"injectables/CredentialConfigService.html","title":"injectable - CredentialConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credential-config/credential-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing credential configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                import\n                            \n                            \n                                store\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(credentialConfigRepository: Repository, configService: ConfigService, logger: PinoLogger, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credential-config/credential-config.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor for CredentialConfigService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        credentialConfigRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for CredentialConfig entity.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:178\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the CredentialConfig entity to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the result of the delete operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:138\n                        \n                    \n\n\n            \n                \n                        Retrieves all credential configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to an array of CredentialConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:151\n                        \n                    \n\n\n            \n                \n                        Retrieves a credential configuration by its ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Imports the configs\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n            \n                \nstore(tenantId: string, config: CredentialConfigCreate)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:165\n                        \n                    \n\n\n            \n                \n                        Stores a credential configuration for a given tenant.\nIf the configuration already exists, it will be overwritten.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                config\n                                            \n                                                            CredentialConfigCreate\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CredentialConfig entity to store.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored CredentialConfig entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../../crypto/crypto.service\";\nimport { CredentialConfigCreate } from \"../dto/credential-config-create.dto\";\nimport { CredentialConfig } from \"../entities/credential.entity\";\n\n/**\n * Service for managing credential configurations.\n */\n@Injectable()\nexport class CredentialConfigService {\n    /**\n     * Constructor for CredentialConfigService.\n     * @param credentialConfigRepository - Repository for CredentialConfig entity.\n     */\n    constructor(\n        @InjectRepository(CredentialConfig)\n        private readonly credentialConfigRepository: Repository,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Imports the configs\n     */\n    public async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"issuance/credentials\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    const payload = JSON.parse(\n                        readFileSync(join(path, file), \"utf8\"),\n                    );\n\n                    const id = file.replace(\".json\", \"\");\n                    payload.id = id;\n                    const exists = await this.getById(tenant.name, id).catch(\n                        () => false,\n                    );\n                    if (exists && !force) {\n                        continue; // Skip if config already exists and force is not set\n                    }\n\n                    // Validate the payload against CredentialConfig\n                    const config = plainToClass(\n                        CredentialConfigCreate,\n                        payload,\n                    );\n                    const validationErrors = await validate(config, {\n                        whitelist: true,\n                        forbidUnknownValues: false, // avoid false positives on plain objects\n                        forbidNonWhitelisted: false,\n                        stopAtFirstError: false,\n                    });\n\n                    // Check if keyId is provided and if the certificate exists\n                    if (config.keyId) {\n                        const cert = await this.cryptoService.getCertEntry(\n                            tenant.name,\n                            config.keyId,\n                        );\n                        if (!cert) {\n                            this.logger.error(\n                                {\n                                    event: \"ValidationError\",\n                                    file,\n                                    tenant: tenant.name,\n                                    errors: [\n                                        {\n                                            property: \"keyId\",\n                                            constraints: {\n                                                isDefined:\n                                                    \"Key ID must be defined in the crypto service.\",\n                                            },\n                                            value: config.keyId,\n                                        },\n                                    ],\n                                },\n                                `Validation failed for credentials config ${file} in tenant ${tenant.name}`,\n                            );\n                            continue; // Skip this invalid config\n                        }\n                        (config as CredentialConfig).key = cert;\n                    }\n\n                    if (validationErrors.length > 0) {\n                        this.logger.error(\n                            {\n                                event: \"ValidationError\",\n                                file,\n                                tenant: tenant.name,\n                                errors: validationErrors.map((error) => ({\n                                    property: error.property,\n                                    constraints: error.constraints,\n                                    value: error.value,\n                                })),\n                            },\n                            `Validation failed for credentials config ${file} in tenant ${tenant.name}`,\n                        );\n                        continue; // Skip this invalid config\n                    }\n\n                    await this.store(tenant.name, config);\n                    counter++;\n                }\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `${counter} credential configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    /**\n     * Retrieves all credential configurations for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @returns A promise that resolves to an array of CredentialConfig entities.\n     */\n    get(tenantId: string) {\n        return this.credentialConfigRepository.find({\n            where: { tenantId },\n            relations: [\"key\"],\n        });\n    }\n\n    /**\n     * Retrieves a credential configuration by its ID for a given tenant.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    getById(tenantId: string, id: string) {\n        return this.credentialConfigRepository.findOneByOrFail({\n            id,\n            tenantId,\n        });\n    }\n\n    /**\n     * Stores a credential configuration for a given tenant.\n     * If the configuration already exists, it will be overwritten.\n     * @param tenantId - The ID of the tenant.\n     * @param config - The CredentialConfig entity to store.\n     * @returns A promise that resolves to the stored CredentialConfig entity.\n     */\n    store(tenantId: string, config: CredentialConfigCreate) {\n        return this.credentialConfigRepository.save({\n            ...config,\n            tenantId,\n        });\n    }\n\n    /**\n     * Deletes a credential configuration for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @param id - The ID of the CredentialConfig entity to delete.\n     * @returns A promise that resolves to the result of the delete operation.\n     */\n    delete(tenantId: string, id: string) {\n        return this.credentialConfigRepository.delete({\n            id,\n            tenantId,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CredentialIssuanceBinding.html":{"url":"entities/CredentialIssuanceBinding.html","title":"entity - CredentialIssuanceBinding","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CredentialIssuanceBinding\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/entities/credential-issuance-binding.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Junction entity for the many-to-many relationship between CredentialConfig and IssuanceConfig\nwith additional keyID attribute for specifying which key should be used for signing.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                credentialConfig\n                            \n                            \n                                    \n                                credentialConfigId\n                            \n                            \n                                    \n                                issuanceConfig\n                            \n                            \n                                    \n                                issuanceConfigId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/credential-issuance-binding.entity.ts:54\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, credentialConfig => credentialConfig.credentialIssuanceBindings, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/credential-issuance-binding.entity.ts:38\n                        \n                    \n\n            \n                \n                    Reference to the credential configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/credential-issuance-binding.entity.ts:22\n                        \n                    \n\n            \n                \n                    Binding key for the credential configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IssuanceConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, issuanceConfig => issuanceConfig.credentialIssuanceBindings, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/credential-issuance-binding.entity.ts:48\n                        \n                    \n\n            \n                \n                    Reference to the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceConfigId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/credential-issuance-binding.entity.ts:28\n                        \n                    \n\n            \n                \n                    Binding key for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/credential-issuance-binding.entity.ts:60\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    PrimaryColumn,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { CredentialConfig } from \"../../credentials/entities/credential.entity\";\nimport { IssuanceConfig } from \"./issuance-config.entity\";\n\n//TODO: check if we really need this table and not just go with a many-to-many relationship\n/**\n * Junction entity for the many-to-many relationship between CredentialConfig and IssuanceConfig\n * with additional keyID attribute for specifying which key should be used for signing.\n */\n@Entity()\nexport class CredentialIssuanceBinding {\n    /**\n     * Binding key for the credential configuration.\n     */\n    @PrimaryColumn()\n    credentialConfigId: string;\n\n    /**\n     * Binding key for the issuance configuration.\n     */\n    @PrimaryColumn()\n    issuanceConfigId: string;\n\n    /**\n     * Reference to the credential configuration.\n     */\n    @ManyToOne(\n        () => CredentialConfig,\n        (credentialConfig) => credentialConfig.credentialIssuanceBindings,\n        { onDelete: \"CASCADE\" },\n    )\n    credentialConfig: CredentialConfig;\n\n    /**\n     * Reference to the issuance configuration.\n     */\n    @ManyToOne(\n        () => IssuanceConfig,\n        (issuanceConfig) => issuanceConfig.credentialIssuanceBindings,\n        { onDelete: \"CASCADE\" },\n    )\n    issuanceConfig: IssuanceConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialIssuerMetadataDto.html":{"url":"classes/CredentialIssuerMetadataDto.html","title":"class - CredentialIssuerMetadataDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialIssuerMetadataDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/credential-issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the metadata for a credential issuer.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_server\n                            \n                            \n                                authorization_servers\n                            \n                            \n                                batch_credential_issuance\n                            \n                            \n                                credential_configurations_supported\n                            \n                            \n                                credential_endpoint\n                            \n                            \n                                credential_issuer\n                            \n                            \n                                display\n                            \n                            \n                                notification_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_server\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:41\n                        \n                    \n\n            \n                \n                    The URL of the preferred authorization server.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_servers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:12\n                        \n                    \n\n            \n                \n                    List of authorization servers that support the credential issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        batch_credential_issuance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:24\n                        \n                    \n\n            \n                \n                    Information about batch credential issuance.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_configurations_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:37\n                        \n                    \n\n            \n                \n                    Object of credentials configurations supported by the issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:16\n                        \n                    \n\n            \n                \n                    The URL of the credential issuance endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:8\n                        \n                    \n\n            \n                \n                    The issuer identifier, typically a URL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        display\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:33\n                        \n                    \n\n            \n                \n                    Display information for the credentials that are getting issued.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notification_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:20\n                        \n                    \n\n            \n                \n                    The URL of the notification endpoint for credential issuance.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CredentialIssuerMetadataDto {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    credential_issuer: string;\n    /**\n     * List of authorization servers that support the credential issuer.\n     */\n    authorization_servers: string[];\n    /**\n     * The URL of the credential issuance endpoint.\n     */\n    credential_endpoint: string;\n    /**\n     * The URL of the notification endpoint for credential issuance.\n     */\n    notification_endpoint: string;\n    /**\n     * Information about batch credential issuance.\n     */\n    batch_credential_issuance: {\n        /**\n         * Amount of elements in a batch.\n         */\n        batch_size: number;\n    };\n    /**\n     * Display information for the credentials that are getting issued.\n     */\n    display: Array;\n    /**\n     * Object of credentials configurations supported by the issuer.\n     */\n    credential_configurations_supported: any;\n    /**\n     * The URL of the preferred authorization server.\n     */\n    authorization_server: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsController.html":{"url":"controllers/CredentialsController.html","title":"controller - CredentialsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management/credentials\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing credential configurations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getConfigs\n                            \n                            \n                                    \n                                storeCredentialConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:59\n                        \n                    \n\n\n            \n                \n                        Deletes an credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getConfigs\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfigs(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:36\n                        \n                    \n\n\n            \n                \n                        Returns the credential configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeCredentialConfiguration(config: CredentialConfigCreate, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:46\n                        \n                    \n\n\n            \n                \n                        Stores the credential configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            CredentialConfigCreate\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiSecurity, ApiTags } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { CredentialConfigService } from \"./credential-config/credential-config.service\";\nimport { CredentialConfigCreate } from \"./dto/credential-config-create.dto\";\nimport { CredentialConfig } from \"./entities/credential.entity\";\n\n/**\n * Controller for managing credential configurations.\n */\n@ApiTags(\"Issuer management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"issuer-management/credentials\")\nexport class CredentialsController {\n    /**\n     * Initializes the CredentialsController with the CredentialConfigService.\n     * @param credentialsService\n     */\n    constructor(private readonly credentialsService: CredentialConfigService) {}\n\n    /**\n     * Returns the credential configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getConfigs(@Token() user: TokenPayload) {\n        return this.credentialsService.get(user.sub);\n    }\n\n    /**\n     * Stores the credential configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeCredentialConfiguration(\n        @Body() config: CredentialConfigCreate,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.store(user.sub, config);\n    }\n\n    /**\n     * Deletes an credential configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteIssuanceConfiguration(\n        @Param(\"id\") id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.delete(user.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsMetadataController.html":{"url":"controllers/CredentialsMetadataController.html","title":"controller - CredentialsMetadataController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsMetadataController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/credentials-metadata.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/credentials-metadata\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n            \n                \n                        \n                    schema(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('schema/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n            \n                \n                        \n                    vct(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('vct/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:15\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the credential configuration.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from \"@nestjs/common\";\nimport { ApiExcludeController } from \"@nestjs/swagger\";\nimport { CredentialsService } from \"../credentials/credentials.service\";\n\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@Controller(\":tenantId/credentials-metadata\")\nexport class CredentialsMetadataController {\n    constructor(private readonly credentialsService: CredentialsService) {}\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n     * @param id - The identifier of the credential configuration.\n     */\n    @Get(\"vct/:id\")\n    vct(@Param(\"id\") id: string, @Param(\"tenantId\") tenantId: string) {\n        return this.credentialsService.getVCT(id, tenantId);\n    }\n\n    /**\n     * Retrieves the schema for a specific credential\n     * @param id\n     * @returns\n     */\n    @Get(\"schema/:id\")\n    schema(@Param(\"id\") id: string, @Param(\"tenantId\") tenantId: string) {\n        return this.credentialsService.getSchema(id, tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialsService.html":{"url":"injectables/CredentialsService.html","title":"injectable - CredentialsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing credentials and their configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCredential\n                            \n                            \n                                    Async\n                                getCredentialConfigurationSupported\n                            \n                            \n                                    Async\n                                getSchema\n                            \n                            \n                                    Async\n                                getVCT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, configService: ConfigService, statusListService: StatusListService, credentialConfigRepo: Repository, cryptoImplementationService: CryptoImplementationService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credentials.service.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for CredentialsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoImplementationService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredential\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredential(credentialConfigurationId: string, holderCnf: Jwk, session: Session, issuanceConfig: IssuanceConfig, claims?: Record>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Issues a credential based on the provided configuration and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                holderCnf\n                                            \n                                                        Jwk\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuanceConfig\n                                            \n                                                            IssuanceConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                claims\n                                            \n                                                        Record>\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredentialConfigurationSupported\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredentialConfigurationSupported(session: Session, issuanceConfig: IssuanceConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Returns the credential configuration that is required for oid4vci\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuanceConfig\n                                            \n                                                            IssuanceConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSchema\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSchema(credentialConfigurationId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:236\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getVCT\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVCT(credentialId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:210\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport type { Jwk } from \"@openid4vc/oauth2\";\nimport { CredentialConfigurationSupported } from \"@openid4vc/openid4vci\";\nimport { digest, generateSalt } from \"@sd-jwt/crypto-nodejs\";\nimport { JWTwithStatusListPayload } from \"@sd-jwt/jwt-status-list\";\nimport { SDJwtVcInstance } from \"@sd-jwt/sd-jwt-vc\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { CryptoImplementationService } from \"../../crypto/key/crypto-implementation/crypto-implementation.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { VCT } from \"../credentials-metadata/dto/credential-config.dto\";\nimport { SchemaResponse } from \"../credentials-metadata/dto/schema-response.dto\";\nimport { IssuanceConfig } from \"../issuance/entities/issuance-config.entity\";\nimport { StatusListService } from \"../status-list/status-list.service\";\nimport { CredentialConfig } from \"./entities/credential.entity\";\n\n/**\n * Service for managing credentials and their configurations.\n */\n@Injectable()\nexport class CredentialsService {\n    /**\n     * Constructor for CredentialsService.\n     * @param cryptoService\n     * @param configService\n     * @param statusListService\n     * @param credentialConfigRepo\n     * @param cryptoImplementationService\n     */\n    constructor(\n        private cryptoService: CryptoService,\n        private configService: ConfigService,\n        private statusListService: StatusListService,\n        @InjectRepository(CredentialConfig)\n        private credentialConfigRepo: Repository,\n        private cryptoImplementationService: CryptoImplementationService,\n    ) {}\n\n    /**\n     * Returns the credential configuration that is required for oid4vci\n     * @param tenantId\n     * @returns\n     */\n    async getCredentialConfigurationSupported(\n        session: Session,\n        issuanceConfig: IssuanceConfig,\n    ): Promise> {\n        const credential_configurations_supported: Record = {};\n\n        const configs = await this.credentialConfigRepo.findBy({\n            tenantId: session.tenantId,\n        });\n\n        //add key binding when required:\n        const kb = {\n            proof_types_supported: {\n                jwt: {\n                    proof_signing_alg_values_supported: [\n                        this.cryptoImplementationService.getAlg(),\n                    ],\n                },\n            },\n            credential_signing_alg_values_supported: [\n                this.cryptoImplementationService.getAlg(),\n            ],\n            cryptographic_binding_methods_supported: [\"jwk\"],\n        };\n\n        for (const value of configs) {\n            const isUsed = issuanceConfig.credentialIssuanceBindings.find(\n                (binding) => binding.credentialConfigId === value.id,\n            );\n            value.config.vct = `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.tenantId}/credentials/vct/${value.id}`;\n\n            if (value.embeddedDisclosurePolicy) {\n                delete (value.embeddedDisclosurePolicy as any).$schema;\n                value.config.disclosure_policy = value.embeddedDisclosurePolicy;\n            }\n\n            if (isUsed?.credentialConfig)\n                value.config = {\n                    ...value.config,\n                    ...kb,\n                };\n            credential_configurations_supported[value.id] = value.config;\n        }\n        return credential_configurations_supported;\n    }\n\n    /**\n     * Issues a credential based on the provided configuration and session.\n     * @param credentialConfigurationId\n     * @param holderCnf\n     * @param session\n     * @returns\n     */\n    async getCredential(\n        credentialConfigurationId: string,\n        holderCnf: Jwk,\n        session: Session,\n        issuanceConfig: IssuanceConfig,\n        claims?: Record>,\n    ) {\n        const credentialConfiguration = await this.credentialConfigRepo\n            .findOneByOrFail({\n                id: credentialConfigurationId,\n                tenantId: session.tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(\n                    `Credential configuration with id ${credentialConfigurationId} not found`,\n                );\n            });\n        //use passed claims, if not provided try the ones stored in the session and the use default ones from the config is provided\n        claims =\n            claims ??\n            session.credentialPayload?.claims?.[credentialConfigurationId] ??\n            credentialConfiguration.claims;\n        const disclosureFrame = credentialConfiguration.disclosureFrame;\n\n        const binding = issuanceConfig.credentialIssuanceBindings.find(\n            (binding) =>\n                binding.credentialConfigId === credentialConfigurationId,\n        );\n\n        const keyId =\n            binding?.credentialConfig?.keyId ??\n            (await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                \"signing\",\n            ));\n\n        const sdjwt = new SDJwtVcInstance({\n            signer: await this.cryptoService.keyService.signer(\n                session.tenantId,\n                keyId,\n            ),\n            signAlg: this.cryptoImplementationService.getAlg(),\n            hasher: digest,\n            hashAlg: \"sha-256\",\n            saltGenerator: generateSalt,\n            loadTypeMetadataFormat: true,\n        });\n\n        const credentialConfig =\n            await this.credentialConfigRepo.findOneByOrFail({\n                id: credentialConfigurationId,\n                tenantId: session.tenantId,\n            });\n\n        // If status management is enabled, create a status entry\n        let status: JWTwithStatusListPayload | undefined;\n        if (credentialConfig.statusManagement) {\n            status = await this.statusListService.createEntry(\n                session,\n                credentialConfigurationId,\n            );\n        }\n\n        const iat = Math.round(new Date().getTime() / 1000);\n        // Set expiration time if lifeTime is defined\n        let exp: number | undefined;\n        if (credentialConfig.lifeTime) {\n            exp = iat + credentialConfig.lifeTime;\n        }\n\n        // If key binding is enabled, include the JWK in the cnf\n        let cnf: { jwk: Jwk } | undefined;\n\n        if (credentialConfig.keyBinding) {\n            cnf = {\n                jwk: holderCnf,\n            };\n        }\n\n        return sdjwt.issue(\n            {\n                iss: this.configService.getOrThrow(\"PUBLIC_URL\"),\n                iat,\n                exp,\n                vct: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.tenantId}/credentials/vct/${credentialConfigurationId}`,\n                cnf,\n                ...claims,\n                ...status,\n            },\n            disclosureFrame,\n            {\n                header: {\n                    x5c: await this.cryptoService.getCertChain(\n                        \"signing\",\n                        session.tenantId,\n                    ),\n                    alg: this.cryptoImplementationService.getAlg(),\n                },\n            },\n        );\n    }\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n     * @param credentialId\n     * @param tenantId\n     * @returns\n     */\n    async getVCT(credentialId: string, tenantId: string): Promise {\n        const credentialConfig = await this.credentialConfigRepo\n            .findOneByOrFail({\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(\n                    `Credential configuration with id ${credentialId} not found`,\n                );\n            });\n        if (!credentialConfig.vct) {\n            throw new ConflictException(\n                `VCT for credential configuration with id ${credentialId} not found`,\n            );\n        }\n        const host = this.configService.getOrThrow(\"PUBLIC_URL\");\n        credentialConfig.vct.vct = `${host}/${tenantId}/credentials-metadata/vct/${credentialConfig.id}`;\n        return credentialConfig.vct;\n    }\n\n    /**\n     * Retrieves the schema for a specific credential configuration.\n     * @param id\n     * @param tenantId\n     * @returns\n     */\n    async getSchema(\n        credentialConfigurationId: string,\n        tenantId: string,\n    ): Promise {\n        const credentialConfig =\n            await this.credentialConfigRepo.findOneByOrFail({\n                tenantId,\n            });\n        if (!credentialConfig) {\n            throw new ConflictException(\n                `Credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        if (!credentialConfig.schema) {\n            throw new ConflictException(\n                `Schema for credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        return credentialConfig.schema;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoImplementatationModule.html":{"url":"modules/CryptoImplementatationModule.html","title":"module - CryptoImplementatationModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoImplementatationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoImplementatationModule\n\n\n\ncluster_CryptoImplementatationModule_exports\n\n\n\ncluster_CryptoImplementatationModule_providers\n\n\n\n\nCryptoImplementationService \n\nCryptoImplementationService \n\n\n\nCryptoImplementatationModule\n\nCryptoImplementatationModule\n\nCryptoImplementationService  -->\n\nCryptoImplementatationModule->CryptoImplementationService \n\n\n\n\n\nCryptoImplementationService\n\nCryptoImplementationService\n\nCryptoImplementatationModule -->\n\nCryptoImplementationService->CryptoImplementatationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoImplementationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptoImplementationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport * as Joi from \"joi\";\nimport { CryptoImplementationService } from \"./crypto-implementation.service\";\n\nexport const CRYPTO_VALIDATION_SCHEMA = {\n    CRYPTO_ALG: Joi.string().valid(\"ES256\").default(\"ES256\"),\n};\n\n@Global()\n@Module({\n    imports: [ConfigModule],\n    providers: [CryptoImplementationService],\n    exports: [CryptoImplementationService],\n})\nexport class CryptoImplementatationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptoImplementation.html":{"url":"interfaces/CryptoImplementation.html","title":"interface - CryptoImplementation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CryptoImplementation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface to imeplement different algorithms.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            alg\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        generateKeyPair\n                                    \n                                \n                                \n                                    \n                                        getSigner\n                                    \n                                \n                                \n                                    \n                                        getVerifier\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyPair\n                        \n                    \n                \n            \n            \n                \ngenerateKeyPair()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:19\n                        \n                    \n\n\n            \n                \n                        Generates a new keypair\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSigner\n                        \n                    \n                \n            \n            \n                \ngetSigner(privateKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:24\n                        \n                    \n\n\n            \n                \n                        creates a signer based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKeyJWK\n                                            \n                                                            JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getVerifier\n                        \n                    \n                \n            \n            \n                \ngetVerifier(publicKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:29\n                        \n                    \n\n\n            \n                \n                        creates a verifier based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                publicKeyJWK\n                                            \n                                                            JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        alg:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type KeyPair = {\n    publicKey: JsonWebKey;\n    privateKey: JsonWebKey;\n};\n\ntype Signer = (data: string) => Promise;\n\ntype Verifier = (data: string, signature: string) => Promise;\n\n/**\n * Generic interface to imeplement different algorithms.\n */\nexport interface CryptoImplementation {\n    //name of the algorithm\n    alg: string;\n    /**\n     * Generates a new keypair\n     */\n    generateKeyPair(): Promise;\n    /**\n     * creates a signer based on the passed key.\n     * @param privateKeyJWK\n     */\n    getSigner(privateKeyJWK: JsonWebKey): Promise;\n    /**\n     * creates a verifier based on the passed key.\n     * @param publicKeyJWK\n     */\n    getVerifier(publicKeyJWK: JsonWebKey): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoImplementationService.html":{"url":"injectables/CryptoImplementationService.html","title":"injectable - CryptoImplementationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoImplementationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAlg\n                            \n                            \n                                getCrypto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configServie: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configServie\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAlg\n                        \n                    \n                \n            \n            \n                \ngetAlg()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Return the algorithm that is used for the crypto operations like signing.\n\n\n                        \n                            Returns :         CryptoType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCrypto\n                        \n                    \n                \n            \n            \n                \ngetCrypto(alg)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Returns the crypto implementation based on the configured algorithm.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                alg\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    this.configServie.get(\"CRYPTO_ALG\")\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CryptoImplementation\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { ES256 } from \"@sd-jwt/crypto-nodejs\";\nimport { CryptoImplementation } from \"./crypto-implementation\";\nimport { ED25519 } from \"./ed25519\";\n\nexport type CryptoType = \"ES256\" | \"Ed25519\";\n\n@Injectable()\nexport class CryptoImplementationService {\n    constructor(private configServie: ConfigService) {}\n\n    /**\n     * Return the algorithm that is used for the crypto operations like signing.\n     * @returns\n     */\n    getAlg(): CryptoType {\n        return this.configServie.get(\"CRYPTO_ALG\") as CryptoType;\n    }\n\n    /**\n     * Returns the crypto implementation based on the configured algorithm.\n     * @param alg\n     * @returns\n     */\n    getCrypto(\n        alg = this.configServie.get(\"CRYPTO_ALG\"),\n    ): CryptoImplementation {\n        switch (alg) {\n            case \"Ed25519\":\n                return ED25519;\n            case \"ES256\":\n                return ES256;\n            default:\n                throw new Error(`Unsupported algorithm ${alg}`);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoModule.html":{"url":"modules/CryptoModule.html","title":"module - CryptoModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\n\nCryptoService \n\nCryptoService \n\n\n\nEncryptionService \n\nEncryptionService \n\n\n\nCryptoModule\n\nCryptoModule\n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/crypto.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            KeyController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { CryptoService } from \"./crypto.service\";\nimport { EncryptionService } from \"./encryption/encryption.service\";\nimport { CertEntity } from \"./key/entities/cert.entity\";\nimport { KeyEntity } from \"./key/entities/keys.entity\";\nimport { KeyController } from \"./key/key.controller\";\n\n@Module({\n    imports: [TypeOrmModule.forFeature([CertEntity, KeyEntity])],\n    controllers: [KeyController],\n    providers: [CryptoService, EncryptionService],\n    exports: [CryptoService, EncryptionService],\n})\nexport class CryptoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBKeyService.html":{"url":"classes/DBKeyService.html","title":"class - DBKeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBKeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/adapters/db-key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The key service is responsible for managing the keys of the issuer.\n\n            \n\n            \n                Extends\n            \n            \n                            KeyService\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                crypto\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                getKid\n                            \n                            \n                                    Private\n                                    Async\n                                getPrivateKey\n                            \n                            \n                                    Private\n                                getPubFromPrivateKey\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                import\n                            \n                            \n                                init\n                            \n                            \n                                    Async\n                                signer\n                            \n                            \n                                    Async\n                                signJWT\n                            \n                            \n                                    Protected\n                                getCertificate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoImplementationService, certRepository: Repository, keyRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/adapters/db-key.service.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        certRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        crypto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/adapters/db-key.service.ts:28\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:86\n\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair and wrtites the private key to the file system.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the generated key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getKid\n                        \n                    \n                \n            \n            \n                \ngetKid(tenantId: string, type: CertificateType)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:136\n\n                        \n                    \n\n\n            \n                \n                        Gets one key id for the tenant.\nIf no key exists, it will throw an error.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                type\n                                            \n                                                            CertificateType\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    \"signing\"\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getPrivateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPrivateKey(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Get the keys from the file system or generate them if they do not exist\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getPubFromPrivateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPubFromPrivateKey(privateKey: JWK_EC_Private)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:62\n                        \n                    \n\n\n            \n                \n                        Get the public key from the private key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKey\n                                            \n                                                        JWK_EC_Private\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         EC_Public\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:152\n\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:158\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        import\n                        \n                    \n                \n            \n            \n                \nimport(tenantId: string, body: KeyImportDto)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:46\n\n                        \n                    \n\n\n            \n                \n                        Import a key into the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        init\n                        \n                    \n                \n            \n            \n                \ninit(tenant: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:77\n\n                        \n                    \n\n\n            \n                \n                        Initialize the key service for a specific tenant.\nThis will create the keys if they do not exist.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenant\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:109\n\n                        \n                    \n\n\n            \n                \n                        Get the signer for the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JWTHeaderParameters, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:195\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWTHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCertificate(tenantId: string, keyId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:86\n\n                        \n                    \n\n\n            \n                \n                        Get the certificate for the given key id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConfigService } from \"@nestjs/config\";\nimport { Signer } from \"@sd-jwt/types\";\nimport {\n    CryptoKey,\n    exportJWK,\n    exportSPKI,\n    importJWK,\n    JWK,\n    JWK_EC_Private,\n    JWTHeaderParameters,\n    JWTPayload,\n    SignJWT,\n} from \"jose\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { v4 } from \"uuid\";\nimport { EC_Public } from \"../../../well-known/dto/jwks-response.dto\";\nimport { CryptoImplementation } from \"../crypto-implementation/crypto-implementation\";\nimport { CryptoImplementationService } from \"../crypto-implementation/crypto-implementation.service\";\nimport { KeyImportDto } from \"../dto/key-import.dto\";\nimport { CertEntity, CertificateType } from \"../entities/cert.entity\";\nimport { KeyEntity } from \"../entities/keys.entity\";\nimport { KeyService } from \"../key.service\";\n\n/**\n * The key service is responsible for managing the keys of the issuer.\n */\nexport class DBKeyService extends KeyService {\n    private crypto: CryptoImplementation;\n\n    constructor(\n        configService: ConfigService,\n        private cryptoService: CryptoImplementationService,\n        certRepository: Repository,\n        private keyRepository: Repository,\n    ) {\n        super(configService, certRepository);\n        this.crypto = cryptoService.getCrypto();\n    }\n\n    /**\n     * Import a key into the key service.\n     * @param tenantId\n     * @param body\n     * @returns\n     */\n    import(tenantId: string, body: KeyImportDto): Promise {\n        const privateKey = body.privateKey;\n        return this.keyRepository\n            .save({\n                id: privateKey.kid,\n                tenantId,\n                key: privateKey,\n            })\n            .then(() => privateKey.kid);\n    }\n\n    /**\n     * Get the public key from the private key.\n     * @param privateKey\n     * @returns\n     */\n    private getPubFromPrivateKey(privateKey: JWK_EC_Private): EC_Public {\n        const {\n            d: _d,\n            key_ops: _key_ops,\n            ext: _ext,\n            ...publicKey\n        } = privateKey;\n        return publicKey as EC_Public;\n    }\n\n    /**\n     * Initialize the key service for a specific tenant.\n     * This will create the keys if they do not exist.\n     * @param tenant\n     */\n    init(tenant: string): Promise {\n        return this.getKid(tenant).catch(async () => this.create(tenant));\n    }\n\n    /**\n     * Creates a new keypair and wrtites the private key to the file system.\n     * @param tenantId\n     * @returns key id of the generated key.\n     */\n    async create(tenantId: string): Promise {\n        const keys = await this.crypto.generateKeyPair();\n        const privateKey = keys.privateKey as JWK;\n        //add a random key id for reference\n        privateKey.kid = v4();\n        privateKey.alg = this.crypto.alg;\n\n        //remove exportable and key_ops from the private key\n        delete privateKey.ext;\n        delete privateKey.key_ops;\n\n        return this.keyRepository\n            .save({\n                id: privateKey.kid,\n                tenantId,\n                key: privateKey,\n            })\n            .then(() => privateKey.kid!);\n    }\n\n    /**\n     * Get the signer for the key service\n     */\n    async signer(tenantId: string, keyId?: string): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n        return this.crypto.getSigner(privateKey);\n    }\n\n    /**\n     * Get the keys from the file system or generate them if they do not exist\n     * @returns\n     */\n    private async getPrivateKey(tenantId: string, keyId?: string) {\n        keyId =\n            keyId ||\n            (await this.getKid(tenantId).catch(() => this.create(tenantId)));\n\n        return this.keyRepository\n            .findOneByOrFail({\n                id: keyId,\n                tenantId,\n            })\n            .then((key) => key.key);\n    }\n\n    /**\n     * Gets one key id for the tenant.\n     * If no key exists, it will throw an error.\n     * @returns\n     */\n    getKid(\n        tenantId: string,\n        type: CertificateType = \"signing\",\n    ): Promise {\n        return this.certRepository\n            .findOneByOrFail({\n                tenantId,\n                type,\n            })\n            .then((cert) => cert.id);\n    }\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    getPublicKey(type: \"jwk\", tenantId: string, keyId?: string): Promise;\n    getPublicKey(\n        type: \"pem\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    async getPublicKey(\n        type: \"pem\" | \"jwk\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n\n        // Convert the private key to a public key\n        // First import the private key as a CryptoKey\n        const privateKeyInstance = await importJWK(\n            privateKey,\n            this.cryptoService.getAlg(),\n            { extractable: true },\n        );\n\n        // Export it as a JWK to get the public key components\n        const privateKeyJWK = (await exportJWK(\n            privateKeyInstance,\n        )) as JWK_EC_Private;\n\n        // Remove private key components to get only the public key\n\n        const publicKey = this.getPubFromPrivateKey(privateKeyJWK);\n\n        if (type === \"pem\") {\n            // Import the public key and export as PEM\n            const publicKeyInstance = await importJWK(\n                publicKey,\n                this.cryptoService.getAlg(),\n                { extractable: true },\n            );\n            return exportSPKI(publicKeyInstance as CryptoKey);\n        } else {\n            return publicKey;\n        }\n    }\n\n    async signJWT(\n        payload: JWTPayload,\n        header: JWTHeaderParameters,\n        tenantId: string,\n        keyId?: string,\n    ): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n        const privateKeyInstance = (await importJWK(privateKey)) as CryptoKey;\n        return new SignJWT(payload)\n            .setProtectedHeader(header)\n            .sign(privateKeyInstance);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { TypeOrmModule, TypeOrmModuleOptions } from \"@nestjs/typeorm\";\nimport * as Joi from \"joi\";\nimport { join } from \"path\";\n\nexport const DB_VALIDATION_SCHEMA = {\n    DB_TYPE: Joi.string().valid(\"sqlite\", \"postgres\").default(\"sqlite\"),\n    DB_HOST: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PORT: Joi.number().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_USERNAME: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PASSWORD: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_DATABASE: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n};\n\n@Module({\n    imports: [\n        TypeOrmModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (\n                configService: ConfigService,\n            ): TypeOrmModuleOptions => {\n                const dbType = configService.get(\n                    \"DB_TYPE\",\n                );\n\n                const commonOptions = {\n                    synchronize: true,\n                    autoLoadEntities: true,\n                };\n\n                if (dbType === \"postgres\") {\n                    return {\n                        type: \"postgres\",\n                        host: configService.getOrThrow(\"DB_HOST\"),\n                        port: configService.getOrThrow(\"DB_PORT\"),\n                        username:\n                            configService.getOrThrow(\"DB_USERNAME\"),\n                        password:\n                            configService.getOrThrow(\"DB_PASSWORD\"),\n                        database:\n                            configService.getOrThrow(\"DB_DATABASE\"),\n                        ...commonOptions,\n                    };\n                }\n\n                return {\n                    type: \"sqlite\",\n                    database: join(\n                        configService.getOrThrow(\"FOLDER\"),\n                        \"service.db\",\n                    ),\n                    ...commonOptions,\n                };\n            },\n        }),\n    ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DisplayEntity.html":{"url":"entities/DisplayEntity.html","title":"entity - DisplayEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DisplayEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/entities/display.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/entities/display.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DisplayInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/entities/display.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from \"typeorm\";\n\ntype DisplayInfo = {\n    name: string;\n    locale: string;\n    logo: {\n        uri: string;\n        url: string;\n    };\n};\n\n@Entity()\nexport class DisplayEntity {\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    @Column(\"json\")\n    value: DisplayInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EC_Public.html":{"url":"classes/EC_Public.html","title":"class - EC_Public","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EC_Public\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\nThis class is used to define the structure of EC public keys in JWK format.\n\n            \n\n\n            \n                Implements\n            \n            \n                            JWK_EC_Public\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crv\n                            \n                            \n                                kty\n                            \n                            \n                                x\n                            \n                            \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:15\n                        \n                    \n\n            \n                \n                    The algorithm intended for use with the key, such as 'ES256'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        kty\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The key type, which is always 'EC' for Elliptic Curve keys.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:19\n                        \n                    \n\n            \n                \n                    The x coordinate of the EC public key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:23\n                        \n                    \n\n            \n                \n                    The y coordinate of the EC public key.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from \"jose\";\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: \"EC\";\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmbeddedDisclosurePolicy.html":{"url":"classes/EmbeddedDisclosurePolicy.html","title":"class - EmbeddedDisclosurePolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmbeddedDisclosurePolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                policy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PolicyType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsEnum(PolicyType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsEnum,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\nexport enum PolicyType {\n    NONE = \"none\",\n    ALLOW_LIST = \"allowList\",\n    ROOT_OF_TRUST = \"rootOfTrust\",\n    ATTESTATION_BASED = \"attestationBased\",\n}\n\nexport class EmbeddedDisclosurePolicy {\n    @IsDefined()\n    @IsEnum(PolicyType)\n    policy!: PolicyType;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ALLOW_LIST;\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ROOT_OF_TRUST;\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.NONE;\n}\n\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    claims?: any[];\n\n    @IsDefined()\n    @IsArray()\n    credentials!: any[];\n\n    @IsOptional()\n    @IsArray()\n    credential_sets?: any[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ATTESTATION_BASED;\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n// Convenience union type if you use it elsewhere\nexport type AnyPolicy =\n    | NoneTrustPolicy\n    | AllowListPolicy\n    | RootOfTrustPolicy\n    | AttestationBasedPolicy;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncryptionService.html":{"url":"injectables/EncryptionService.html","title":"injectable - EncryptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncryptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/encryption/encryption.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling encryption and decryption operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decryptJwe\n                            \n                            \n                                getEncryptionPublicKey\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(keyRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/encryption/encryption.service.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor for the EncryptionService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        keyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decryptJwe\n                        \n                    \n                \n            \n            \n                \n                        \n                    decryptJwe(response: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:47\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Encrypts a response using JWE (JSON Web Encryption).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe response to encrypt.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to encrypt the response.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The encrypted response as a JWE string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEncryptionPublicKey\n                        \n                    \n                \n            \n            \n                \ngetEncryptionPublicKey(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Retrieves the public encryption key for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the public key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The public encryption key as a JWK.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:27\n                        \n                    \n\n\n            \n                \n                        Initializes the encryption keys for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to initialize the keys.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport e from \"express\";\nimport { exportJWK, generateKeyPair, importJWK, JWK, jwtDecrypt } from \"jose\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { v4 } from \"uuid\";\nimport { KeyEntity } from \"../key/entities/keys.entity\";\n\n/**\n * Service for handling encryption and decryption operations.\n */\n@Injectable()\nexport class EncryptionService {\n    /**\n     * Constructor for the EncryptionService.\n     * @param configService\n     */\n    constructor(\n        @InjectRepository(KeyEntity)\n        private keyRepository: Repository,\n    ) {}\n\n    /**\n     * Initializes the encryption keys for a given tenant.\n     * @param tenantId - The ID of the tenant for which to initialize the keys.\n     */\n    async onTenantInit(tenantId: string) {\n        const privateKey = await generateKeyPair(\"ECDH-ES\", {\n            crv: \"P-256\",\n            extractable: true,\n        }).then(async (secret) => exportJWK(secret.privateKey));\n\n        this.keyRepository.save({\n            id: v4(),\n            tenantId,\n            key: privateKey,\n            usage: \"encrypt\",\n        });\n    }\n\n    /**\n     * Encrypts a response using JWE (JSON Web Encryption).\n     * @param response - The response to encrypt.\n     * @param tenantId - The ID of the tenant for which to encrypt the response.\n     * @returns The encrypted response as a JWE string.\n     */\n    async decryptJwe(response: string, tenantId: string): Promise {\n        const privateEncryptionKey = await this.keyRepository\n            .findOneByOrFail({\n                tenantId,\n                usage: \"encrypt\",\n            })\n            .then(\n                (keyEntity) =>\n                    importJWK(keyEntity.key, \"ECDH-ES\") as Promise,\n            );\n\n        const res = await jwtDecrypt(response, privateEncryptionKey);\n        return res.payload;\n    }\n\n    /**\n     * Retrieves the public encryption key for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve the public key.\n     * @returns The public encryption key as a JWK.\n     */\n    getEncryptionPublicKey(tenantId: string): Promise {\n        return this.keyRepository\n            .findOneByOrFail({\n                tenantId,\n                usage: \"encrypt\",\n            })\n            .then((entry) => {\n                delete entry.key.d;\n                return entry.key;\n            });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileStorage.html":{"url":"interfaces/FileStorage.html","title":"interface - FileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/storage.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        delete\n                                    \n                                \n                                \n                                    \n                                        exists\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        getSignedUrl\n                                    \n                                \n                                \n                                    \n                                        getStream\n                                    \n                                \n                                \n                                    \n                                        put\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        getSignedUrl\n                        \n                    \n                \n            \n            \n                \ngetSignedUrl(key: string, expiresInSec: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresInSec\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Readable } from \"stream\";\n\nexport type PutOptions = {\n    contentType?: string;\n    metadata?: Record;\n    acl?: \"private\" | \"public\";\n    checksum?: string; // e.g., sha256 base64\n};\n\nexport type StoredObject = {\n    key: string; // canonical key (e.g. \"tenant/2025/08/14/uuid.ext\")\n    etag?: string;\n    size?: number;\n    url?: string; // public URL if ACL=public or a presigned URL\n    contentType?: string;\n    metadata?: Record;\n};\n\nexport interface FileStorage {\n    put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise;\n\n    getStream(\n        key: string,\n    ): Promise;\n\n    delete(key: string): Promise;\n\n    exists(key: string): Promise;\n\n    getSignedUrl?(key: string, expiresInSec: number): Promise; // optional for local\n}\n\nexport const FILE_STORAGE = Symbol(\"FILE_STORAGE\");\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                getDownloadUrl\n                            \n                            \n                                getStream\n                            \n                            \n                                saveUserUpload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(storage: FileStorage)\n                    \n                \n                        \n                            \n                                Defined in src/storage/files.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        storage\n                                                  \n                                                        \n                                                                        FileStorage\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDownloadUrl\n                        \n                    \n                \n            \n            \n                \ngetDownloadUrl(key: string, ttlSeconds: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                ttlSeconds\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    300\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveUserUpload\n                        \n                    \n                \n            \n            \n                \nsaveUserUpload(tenantId: string, fileName: string, body: Buffer | Readable, contentType?: string, isPublic)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                fileName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                contentType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                isPublic\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@nestjs/common\";\nimport { randomUUID } from \"crypto\";\nimport { extname } from \"path\";\nimport { Readable } from \"stream\";\nimport {\n    FILE_STORAGE,\n    FileStorage,\n    StoredObject,\n} from \"../storage/storage.types\";\n\n@Injectable()\nexport class FilesService {\n    constructor(@Inject(FILE_STORAGE) private storage: FileStorage) {}\n\n    saveUserUpload(\n        tenantId: string,\n        fileName: string,\n        body: Buffer | Readable,\n        contentType?: string,\n        isPublic = false,\n    ): Promise {\n        const safeExt = extname(fileName || \"\")\n            .toLowerCase()\n            .slice(1);\n        const key = `${tenantId}/${new Date().toISOString().slice(0, 10)}/${randomUUID()}${safeExt ? \".\" + safeExt : \"\"}`;\n\n        // TODO: add checksum if you want tamper detection:\n        // const checksum = createHash('sha256').update(bufferOrStreamToBuffer(body)).digest('base64');\n\n        return this.storage.put(key, body, {\n            contentType,\n            acl: isPublic ? \"public\" : \"private\",\n            metadata: { originalName: fileName },\n        });\n    }\n\n    getStream(key: string) {\n        return Promise.resolve(this.storage.getStream(key));\n    }\n\n    delete(key: string) {\n        return Promise.resolve(this.storage.delete(key));\n    }\n\n    getDownloadUrl(key: string, ttlSeconds = 300) {\n        if (this.storage.getSignedUrl)\n            return this.storage.getSignedUrl(key, ttlSeconds);\n        // For local, expose via your HTTP controller at /files/:key\n        return Promise.resolve(undefined);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GenerateTokenOptions.html":{"url":"interfaces/GenerateTokenOptions.html","title":"interface - GenerateTokenOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GenerateTokenOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            audience\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresIn\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subject\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresIn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { decodeJwt, jwtVerify, SignJWT } from \"jose\";\nimport { DEFAULT_JWT_SECRET } from \"./auth.module\";\nimport { TokenPayload } from \"./token.decorator\";\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {\n        if (\n            this.configService.get(\"JWT_SECRET\") === DEFAULT_JWT_SECRET\n        ) {\n            console.warn(\n                \"Using default JWT secret. This is not secure for production environments.\",\n            );\n        }\n    }\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow(\"JWT_EXPIRES_IN\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: \"HS256\" })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token verification is handled by external OIDC provider.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = (await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: [\"HS256\"],\n            })) as { payload: TokenPayload };\n            return payload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Decode token without verification (for debugging)\n     */\n    decodeToken(token: string): TokenPayload | null {\n        try {\n            return decodeJwt(token) as TokenPayload;\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get(\"OIDC\") !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                HealthController is responsible for providing health check endpoints.\nIt uses the HealthCheckService to perform checks on the database connection.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Endpoint to check the health of the service.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {\n    HealthCheck,\n    HealthCheckService,\n    TypeOrmHealthIndicator,\n} from \"@nestjs/terminus\";\n\n/**\n * HealthController is responsible for providing health check endpoints.\n * It uses the HealthCheckService to perform checks on the database connection.\n */\n@Controller(\"health\")\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        private db: TypeOrmHealthIndicator,\n    ) {}\n\n    /**\n     * Endpoint to check the health of the service.\n     * @returns\n     */\n    @Get()\n    @HealthCheck()\n    check() {\n        return this.health.check([() => this.db.pingCheck(\"database\")]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n    imports: [TerminusModule],\n    controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/IssuanceConfig.html":{"url":"entities/IssuanceConfig.html","title":"entity - IssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  IssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/entities/issuance-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage issuance configs\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                authenticationConfig\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                batch_size\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                claimsWebhook\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                credentialIssuanceBindings\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                notifyWebhook\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        authenticationConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationConfigDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@Column('json')@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:73\n                        \n                    \n\n            \n                \n                    Authentication configuration for the issuance process.\nThis determines which OpenID4VC flow to use:\n\n'none': Pre-authorized code flow (no user authentication required)\n'auth': OID4VCI authorized code flow (user will be redirected for authentication)\n'presentationDuringIssuance': OID4VP request is sent (credential presentation required)\n\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        batch_size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@Column('int', {default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:114\n                        \n                    \n\n            \n                \n                    Value to determine the amount of credentials that are issued in a batch.\nDefault is 1.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        claimsWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:95\n                        \n                    \n\n            \n                \n                    Webhook to receive claims for the issuance process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:79\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialIssuanceBindings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialIssuanceBinding[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, binding => binding.issuanceConfig, {cascade: undefined, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:60\n                        \n                    \n\n            \n                \n                    Links to all credential config bindings that are included in this issuance config.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:50\n                        \n                    \n\n            \n                \n                    Description of the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:35\n                        \n                    \n\n            \n                \n                    Unique identifier for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:105\n                        \n                    \n\n            \n                \n                    Webhook to send the result of the notification response\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:42\n                        \n                    \n\n            \n                \n                    Tenant ID for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:85\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    OneToMany,\n    PrimaryGeneratedColumn,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport {\n    type AuthenticationConfig,\n    AuthenticationConfigDto,\n} from \"../dto/authentication-config.dto\";\nimport { CredentialIssuanceBinding } from \"./credential-issuance-binding.entity\";\n\n/**\n * Entity to manage issuance configs\n */\n@Entity()\nexport class IssuanceConfig {\n    /**\n     * Unique identifier for the issuance configuration.\n     */\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id: string;\n\n    /**\n     * Tenant ID for the issuance configuration.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * Description of the issuance configuration.\n     */\n    @IsString()\n    @IsOptional()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    /**\n     * Links to all credential config bindings that are included in this issuance config.\n     */\n    @OneToMany(\n        () => CredentialIssuanceBinding,\n        (binding) => binding.issuanceConfig,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    credentialIssuanceBindings: CredentialIssuanceBinding[];\n\n    /**\n     * Authentication configuration for the issuance process.\n     * This determines which OpenID4VC flow to use:\n     * - 'none': Pre-authorized code flow (no user authentication required)\n     * - 'auth': OID4VCI authorized code flow (user will be redirected for authentication)\n     * - 'presentationDuringIssuance': OID4VP request is sent (credential presentation required)\n     */\n    @IsObject()\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => AuthenticationConfigDto)\n    authenticationConfig: AuthenticationConfigDto;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Webhook to receive claims for the issuance process.\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    @Column(\"json\", { nullable: true })\n    claimsWebhook?: WebhookConfig;\n\n    /**\n     * Webhook to send the result of the notification response\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    @Column(\"json\", { nullable: true })\n    notifyWebhook?: WebhookConfig;\n\n    /**\n     * Value to determine the amount of credentials that are issued in a batch.\n     * Default is 1.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 1 })\n    batch_size?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuanceController.html":{"url":"controllers/IssuanceController.html","title":"controller - IssuanceController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuanceController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management/issuance\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getIssuanceConfigurations\n                            \n                            \n                                    \n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:54\n                        \n                    \n\n\n            \n                \n                        Deletes an issuance configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getIssuanceConfigurations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfigurations(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:28\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(config: IssuanceDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Stores the issuance configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiSecurity, ApiTags } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { IssuanceDto } from \"./dto/issuance.dto\";\nimport { IssuanceService } from \"./issuance.service\";\n\n@ApiTags(\"Issuer management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"issuer-management/issuance\")\nexport class IssuanceController {\n    constructor(private readonly issuanceService: IssuanceService) {}\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getIssuanceConfigurations(@Token() user: TokenPayload) {\n        return this.issuanceService.getIssuanceConfiguration(user.sub);\n    }\n\n    /**\n     * Stores the issuance configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeIssuanceConfiguration(\n        @Body() config: IssuanceDto,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.storeIssuanceConfiguration(\n            user.sub,\n            config,\n        );\n    }\n\n    /**\n     * Deletes an issuance configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteIssuanceConfiguration(\n        @Param(\"id\") id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.deleteIssuanceConfiguration(user.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IssuanceDto.html":{"url":"classes/IssuanceDto.html","title":"class - IssuanceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IssuanceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/issuance.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for mapping issuance configurations.\n\n            \n\n            \n                Extends\n            \n            \n                            OmitType(IssuanceConfig, [\n    \"tenantId\",\n    \"credentialIssuanceBindings\",\n    \"createdAt\",\n    \"updatedAt\",\n] as const)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                credentialConfigs\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        credentialConfigs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfigMapping[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:41\n                        \n                    \n\n            \n                \n                    Ids of the credential configurations associated with this issuance configuration.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { IssuanceConfig } from \"../entities/issuance-config.entity\";\nimport { AuthenticationConfigDto } from \"./authentication-config.dto\";\n\n/**\n * DTO for mapping credential configurations in issuance.\n */\nexport class CredentialConfigMapping {\n    /**\n     * Unique identifier for the credential configuration.\n     */\n    @IsString()\n    id: string;\n}\n\n/**\n * DTO for mapping issuance configurations.\n */\nexport class IssuanceDto extends OmitType(IssuanceConfig, [\n    \"tenantId\",\n    \"credentialIssuanceBindings\",\n    \"createdAt\",\n    \"updatedAt\",\n] as const) {\n    /**\n     * Ids of the credential configurations associated with this issuance configuration.\n     */\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialConfigMapping)\n    credentialConfigs: CredentialConfigMapping[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IssuanceService.html":{"url":"injectables/IssuanceService.html","title":"injectable - IssuanceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IssuanceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing issuance configurations.\nIt provides methods to get, store, and delete issuance configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    Public\n                                getIssuanceConfiguration\n                            \n                            \n                                getIssuanceConfigurationById\n                            \n                            \n                                    Private\n                                    Async\n                                import\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(issuanceConfigRepo: Repository, credentialIssuanceBindingRepo: Repository, credentialsConfigService: CredentialConfigService, configService: ConfigService, logger: PinoLogger, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/issuance/issuance.service.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for IssuanceService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        issuanceConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialIssuanceBindingRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialsConfigService\n                                                  \n                                                        \n                                                                        CredentialConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \ndeleteIssuanceConfiguration(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:261\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfiguration(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:162\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getIssuanceConfigurationById\n                        \n                    \n                \n            \n            \n                \ngetIssuanceConfigurationById(issuanceConfigId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:175\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configuration by ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuanceConfigId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Import issuance configurations from the configured folder.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Import issuance configurations and the credential configurations from the configured folder.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(tenantId: string, value: IssuanceDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:191\n                        \n                    \n\n\n            \n                \n                        Store the config. If it already exist, overwrite it.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, OnModuleInit } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { CredentialConfigService } from \"../credentials/credential-config/credential-config.service\";\nimport { CredentialConfig } from \"../credentials/entities/credential.entity\";\nimport { AuthenticationConfig } from \"./dto/authentication-config.dto\";\nimport { IssuanceDto } from \"./dto/issuance.dto\";\nimport { CredentialIssuanceBinding } from \"./entities/credential-issuance-binding.entity\";\nimport { IssuanceConfig } from \"./entities/issuance-config.entity\";\n\n/**\n * Service for managing issuance configurations.\n * It provides methods to get, store, and delete issuance configurations.\n */\n@Injectable()\nexport class IssuanceService implements OnModuleInit {\n    /**\n     * Constructor for IssuanceService.\n     * @param issuanceConfigRepo\n     * @param credentialsConfigService\n     */\n    constructor(\n        @InjectRepository(IssuanceConfig)\n        private issuanceConfigRepo: Repository,\n        @InjectRepository(CredentialIssuanceBinding)\n        private credentialIssuanceBindingRepo: Repository,\n        private credentialsConfigService: CredentialConfigService,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Import issuance configurations and the credential configurations from the configured folder.\n     */\n    async onModuleInit() {\n        await this.cryptoService.import();\n        await this.credentialsConfigService.import();\n        await this.import();\n    }\n\n    /**\n     * Import issuance configurations from the configured folder.\n     */\n    private async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"issuance/issuance\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    const payload = JSON.parse(\n                        readFileSync(join(path, file), \"utf8\"),\n                    );\n\n                    payload.id = file.replace(\".json\", \"\");\n                    const exists = await this.getIssuanceConfigurationById(\n                        payload.id,\n                        tenant.name,\n                    ).catch(() => false);\n                    if (exists && !force) {\n                        continue; // Skip if config already exists and force is not set.\n                    }\n\n                    // Validate the payload against IssuanceDto\n                    const issuanceDto = plainToClass(IssuanceDto, payload);\n                    //TOODO: it does not validate the different config options\n                    const validationErrors = await validate(issuanceDto, {\n                        whitelist: true,\n                        forbidUnknownValues: false, // avoid false positives on plain objects\n                        forbidNonWhitelisted: false,\n                        stopAtFirstError: false,\n                    });\n\n                    if (validationErrors.length > 0) {\n                        const extractErrorMessages = (error: any): string[] => {\n                            const messages: string[] = [];\n\n                            // Add constraints from the current level\n                            if (error.constraints) {\n                                messages.push(\n                                    ...Object.values(\n                                        error.constraints as Record,\n                                    ),\n                                );\n                            }\n\n                            // Recursively add constraints from children\n                            if (error.children && error.children.length > 0) {\n                                for (const child of error.children) {\n                                    messages.push(\n                                        ...extractErrorMessages(child),\n                                    );\n                                }\n                            }\n\n                            return messages;\n                        };\n\n                        const errorMessages = validationErrors\n                            .map((error) => {\n                                const messages = extractErrorMessages(error);\n                                return messages.length > 0\n                                    ? `${error.property}: ${messages.join(\", \")}`\n                                    : error.property;\n                            })\n                            .join(\"; \");\n\n                        this.logger.error(\n                            {\n                                event: \"ValidationError\",\n                                file,\n                                tenant: tenant.name,\n                                errors: validationErrors.map((error) => ({\n                                    property: error.property,\n                                    constraints: error.constraints,\n                                    value: error.value,\n                                })),\n                            },\n                            `Validation failed for issuance config ${file} in tenant ${tenant.name}: ${errorMessages}`,\n                        );\n                        continue; // Skip this invalid config\n                    }\n                    await this.storeIssuanceConfiguration(\n                        tenant.name,\n                        issuanceDto,\n                    );\n                    counter++;\n                }\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `${counter} issuance configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @param tenantId\n     * @returns\n     */\n    public getIssuanceConfiguration(tenantId: string) {\n        return this.issuanceConfigRepo.find({\n            where: { tenantId },\n            relations: [\"credentialIssuanceBindings\"],\n        });\n    }\n\n    /**\n     * Returns the issuance configuration by ID for a given tenant.\n     * @param issuanceConfigId\n     * @param tenantId\n     * @returns\n     */\n    getIssuanceConfigurationById(\n        issuanceConfigId: string,\n        tenantId: string,\n    ): Promise {\n        return this.issuanceConfigRepo.findOneOrFail({\n            where: { id: issuanceConfigId, tenantId },\n            relations: [\"credentialIssuanceBindings.credentialConfig\"],\n        });\n    }\n\n    /**\n     * Store the config. If it already exist, overwrite it.\n     * @param tenantId\n     * @param value\n     * @returns\n     */\n    async storeIssuanceConfiguration(tenantId: string, value: IssuanceDto) {\n        const credentials: { config: CredentialConfig; keyId?: string }[] = [];\n        //check if all credential configs exist\n        for (const credentialConfigId of value.credentialConfigs) {\n            const credential = await this.credentialsConfigService.getById(\n                tenantId,\n                credentialConfigId.id,\n            );\n            credentials.push({\n                config: credential,\n            });\n        }\n\n        // Convert AuthenticationConfigDto to AuthenticationConfig union type\n        let authenticationConfig: AuthenticationConfig;\n        if (value.authenticationConfig.method === \"none\") {\n            authenticationConfig = { method: \"none\" };\n        } else if (value.authenticationConfig.method === \"auth\") {\n            if (!value.authenticationConfig.config) {\n                throw new Error(\n                    \"AuthenticationConfig is required for auth method.\",\n                );\n            }\n            authenticationConfig = {\n                method: \"auth\",\n                config: value.authenticationConfig.config as any,\n            };\n        } else if (\n            value.authenticationConfig.method === \"presentationDuringIssuance\"\n        ) {\n            if (!value.authenticationConfig.config) {\n                throw new Error(\n                    \"AuthenticationConfig is required for presentationDuringIssuance method\",\n                );\n            }\n            authenticationConfig = {\n                method: \"presentationDuringIssuance\",\n                config: value.authenticationConfig.config as any,\n            };\n        } else {\n            throw new Error(\n                `Invalid authentication method: ${\n                    (value.authenticationConfig as any).method\n                }`,\n            );\n        }\n\n        const issuanceConfig = await this.issuanceConfigRepo.save({\n            ...value,\n            tenantId,\n            authenticationConfig,\n        });\n\n        //store the binding between credential and isuance\n        for (const credentialConfig of credentials) {\n            await this.credentialIssuanceBindingRepo.save({\n                credentialConfig: credentialConfig.config,\n                issuanceConfig,\n                keyID: credentialConfig.keyId,\n            });\n        }\n        return issuanceConfig;\n    }\n\n    /**\n     * Deletes a credential configuration.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    deleteIssuanceConfiguration(tenantId: string, id: string) {\n        return this.issuanceConfigRepo.delete({ tenantId, id });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuerManagementController.html":{"url":"controllers/IssuerManagementController.html","title":"controller - IssuerManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuerManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuer-management/issuer-management.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: OfferRequestDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@ApiBody({type: OfferRequestDto, examples: undefined})@Post('offer')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:83\n                        \n                    \n\n\n            \n                \n                        Create an offer for a credential.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            OfferRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Res, UseGuards } from \"@nestjs/common\";\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from \"@nestjs/swagger\";\nimport { Response } from \"express\";\nimport * as QRCode from \"qrcode\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { Oid4vciService } from \"../../issuer/oid4vci/oid4vci.service\";\nimport { ResponseType } from \"../../verifier/oid4vp/dto/presentation-request.dto\";\nimport {\n    OfferRequestDto,\n    OfferResponse,\n} from \"../oid4vci/dto/offer-request.dto\";\n\n@ApiTags(\"Issuer management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"issuer-management\")\nexport class IssuerManagementController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Create an offer for a credential.\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: \"JSON response\",\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            \"application/json\": { schema: { type: \"object\" } },\n            \"image/png\": { schema: { type: \"string\", format: \"binary\" } },\n        },\n    })\n    @ApiProduces(\"application/json\", \"image/png\")\n    @ApiBody({\n        type: OfferRequestDto,\n        examples: {\n            qrcode: {\n                summary: \"QR-Code Example\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: \"pid\",\n                } as OfferRequestDto,\n            },\n            uri: {\n                summary: \"URI\",\n                value: {\n                    response_type: ResponseType.URI,\n                    issuanceId: \"pid\",\n                } as OfferRequestDto,\n            },\n            authfixed: {\n                summary: \"Auth flow with fixed session\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: \"pid\",\n                    session: \"fd3ebf28-8ad6-4909-8a7a-a739c2c412c0\",\n                } as OfferRequestDto,\n            },\n            override: {\n                summary: \"Override\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: \"pid-none\",\n                    claims: {\n                        pid: {\n                            given_name: \"Max\",\n                        },\n                    },\n                } as OfferRequestDto,\n            },\n        },\n    })\n    @Post(\"offer\")\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: OfferRequestDto,\n        @Token() user: TokenPayload,\n    ) {\n        // For now, we'll just pass the body to the service as before\n        // You can modify the service later to accept user information if needed\n        const values = await this.oid4vciService.createOffer(\n            body,\n            user,\n            user.sub,\n        );\n\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader(\"Content-Type\", \"image/png\");\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IssuerMetadata.html":{"url":"interfaces/IssuerMetadata.html","title":"interface - IssuerMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IssuerMetadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/dto/issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the issuer metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            issuer\n                                        \n                                \n                                \n                                        \n                                            jwks\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        issuer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        issuer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The issuer identifier, typically a URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwks:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { JWK } from \"jose\";\n\n/**\n * Interface representing the issuer metadata.\n */\nexport interface IssuerMetadata {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    issuer: string;\n    /**\n     * The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n     */\n    jwks: {\n        /**\n         * List of keys in the JWKS.\n         */\n        keys: JWK[];\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IssuerModule.html":{"url":"modules/IssuerModule.html","title":"module - IssuerModule","body":"\n                   \n\n\n\n\n    Modules\n    IssuerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_exports\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nIssuerModule -->\n\nWebhookService->IssuerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/issuer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            CredentialConfigService\n                        \n                        \n                            CredentialsService\n                        \n                        \n                            IssuanceService\n                        \n                        \n                            Oid4vciService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                        \n                            WebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vciController\n                        \n                        \n                            AuthorizeController\n                        \n                        \n                            CredentialsController\n                        \n                        \n                            IssuerManagementController\n                        \n                        \n                            IssuanceController\n                        \n                        \n                            CredentialsMetadataController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            Oid4vciService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { setGlobalConfig } from \"@openid4vc/openid4vci\";\nimport * as Joi from \"joi\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { SessionModule } from \"../session/session.module\";\nimport { SessionLoggerInterceptor } from \"../utils/logger/session-logger.interceptor\";\nimport { SessionLoggerService } from \"../utils/logger/session-logger.service\";\nimport { WebhookService } from \"../utils/webhook/webhook.service\";\nimport { Oid4vpModule } from \"../verifier/oid4vp/oid4vp.module\";\nimport { AuthorizeController } from \"./authorize/authorize.controller\";\nimport { AuthorizeService } from \"./authorize/authorize.service\";\nimport { CredentialConfigService } from \"./credentials/credential-config/credential-config.service\";\nimport { CredentialsController } from \"./credentials/credentials.controller\";\nimport { CredentialsService } from \"./credentials/credentials.service\";\nimport { CredentialConfig } from \"./credentials/entities/credential.entity\";\nimport { CredentialsMetadataController } from \"./credentials-metadata/credentials-metadata.controller\";\nimport { CredentialIssuanceBinding } from \"./issuance/entities/credential-issuance-binding.entity\";\nimport { IssuanceConfig } from \"./issuance/entities/issuance-config.entity\";\nimport { IssuanceController } from \"./issuance/issuance.controller\";\nimport { IssuanceService } from \"./issuance/issuance.service\";\nimport { IssuerManagementController } from \"./issuer-management/issuer-management.controller\";\nimport { DisplayEntity } from \"./oid4vci/entities/display.entity\";\nimport { Oid4vciController } from \"./oid4vci/oid4vci.controller\";\nimport { Oid4vciService } from \"./oid4vci/oid4vci.service\";\nimport { StatusListModule } from \"./status-list/status-list.module\";\n\nexport const ISSUER_VALIDATION_SCHEMA = {\n    PUBLIC_URL: Joi.string().default(\"http://localhost:3000\"),\n};\n\n@Module({\n    imports: [\n        CryptoModule,\n        StatusListModule,\n        Oid4vpModule,\n        SessionModule,\n        HttpModule,\n        TypeOrmModule.forFeature([\n            IssuanceConfig,\n            CredentialConfig,\n            CredentialIssuanceBinding,\n            DisplayEntity,\n        ]),\n    ],\n    controllers: [\n        Oid4vciController,\n        AuthorizeController,\n        CredentialsController,\n        IssuerManagementController,\n        IssuanceController,\n        CredentialsMetadataController,\n    ],\n    providers: [\n        AuthorizeService,\n        CredentialsService,\n        Oid4vciService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n        IssuanceService,\n        CredentialConfigService,\n        WebhookService,\n    ],\n    exports: [AuthorizeService, Oid4vciService],\n})\nexport class IssuerModule {\n    constructor(configService: ConfigService) {\n        const unsecure = configService\n            .getOrThrow(\"PUBLIC_URL\")\n            .startsWith(\"http://\");\n        setGlobalConfig({ allowInsecureUrls: unsecure });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwksResponseDto.html":{"url":"classes/JwksResponseDto.html","title":"class - JwksResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwksResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keys\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    An array of EC public keys in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from \"jose\";\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: \"EC\";\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard(\"jwt\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { AuthGuard } from \"@nestjs/passport\";\nimport { IS_PUBLIC_KEY } from \"./public.decorator\";\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard(\"jwt\") {\n    constructor(private reflector: Reflector) {\n        super();\n    }\n\n    canActivate(context: ExecutionContext) {\n        const isPublic = this.reflector.getAllAndOverride(\n            IS_PUBLIC_KEY,\n            [context.getHandler(), context.getClass()],\n        );\n        if (isPublic) {\n            return true;\n        }\n        return super.canActivate(context);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtService.html":{"url":"injectables/JwtService.html","title":"injectable - JwtService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                decodeToken\n                            \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                isUsingExternalOIDC\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        decodeToken\n                        \n                    \n                \n            \n            \n                \ndecodeToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:91\n                        \n                    \n\n\n            \n                \n                        Decode token without verification (for debugging)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TokenPayload | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(payload: TokenPayload, options: GenerateTokenOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Generate a JWT token for integrated OAuth2 server\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                options\n                                            \n                                                            GenerateTokenOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUsingExternalOIDC\n                        \n                    \n                \n            \n            \n                \nisUsingExternalOIDC()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Check if the service is using external OIDC provider\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Verify a JWT token (for additional validation if needed)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { decodeJwt, jwtVerify, SignJWT } from \"jose\";\nimport { DEFAULT_JWT_SECRET } from \"./auth.module\";\nimport { TokenPayload } from \"./token.decorator\";\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {\n        if (\n            this.configService.get(\"JWT_SECRET\") === DEFAULT_JWT_SECRET\n        ) {\n            console.warn(\n                \"Using default JWT secret. This is not secure for production environments.\",\n            );\n        }\n    }\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow(\"JWT_EXPIRES_IN\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: \"HS256\" })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token verification is handled by external OIDC provider.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = (await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: [\"HS256\"],\n            })) as { payload: TokenPayload };\n            return payload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Decode token without verification (for debugging)\n     */\n    decodeToken(token: string): TokenPayload | null {\n        try {\n            return decodeJwt(token) as TokenPayload;\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get(\"OIDC\") !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, \"jwt\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Private\n                                    Static\n                                getExternalOIDCConfig\n                            \n                            \n                                    Private\n                                    Static\n                                getIntegratedOAuth2Config\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(req: any, options?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getExternalOIDCConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getExternalOIDCConfig(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         { secretOrKeyProvider: any; jwtFromRequest: any; algorithms: {}; issuer: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getIntegratedOAuth2Config\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIntegratedOAuth2Config(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: TokenPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:85\n                        \n                    \n\n\n            \n                \n                        Validate the JWT payload. It will also check if the client is set up.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The JWT payload\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise<>\n\n                        \n                            \n                                The validated payload or an error\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { passportJwtSecret } from \"jwks-rsa\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { ClientService } from \"./client.service\";\nimport { TokenPayload } from \"./token.decorator\";\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, \"jwt\") {\n    constructor(\n        private configService: ConfigService,\n        private clientService: ClientService,\n    ) {\n        const useExternalOIDC = configService.get(\"OIDC\");\n\n        const config = useExternalOIDC\n            ? JwtStrategy.getExternalOIDCConfig(configService)\n            : JwtStrategy.getIntegratedOAuth2Config(configService);\n        super(config);\n    }\n\n    // Override authenticate to add debugging\n    authenticate(req: any, options?: any) {\n        return super.authenticate(req, {\n            ...options,\n            failWithError: true, // This will throw errors instead of just returning 401\n        });\n    }\n\n    private static getExternalOIDCConfig(configService: ConfigService) {\n        const keycloakIssuerUrl = configService.get(\n            \"KEYCLOAK_INTERNAL_ISSUER_URL\",\n        );\n        const jwksUri = `${keycloakIssuerUrl}/protocol/openid-connect/certs`;\n\n        return {\n            secretOrKeyProvider: passportJwtSecret({\n                cache: true,\n                rateLimit: true,\n                jwksRequestsPerMinute: 5,\n                jwksUri: jwksUri,\n                handleSigningKeyError: (err, cb) => {\n                    console.error(\"❌ Keycloak JWKS error:\", err);\n                    if (err instanceof Error) {\n                        return cb(err);\n                    }\n                    return cb(\n                        new Error(\n                            \"Could not get the signing key from Keycloak\",\n                        ),\n                    );\n                },\n            }),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: [configService.get(\"KEYCLOAK_ALGORITHM\")],\n            issuer: keycloakIssuerUrl,\n        };\n    }\n\n    private static getIntegratedOAuth2Config(\n        configService: ConfigService,\n    ): any {\n        const config = {\n            secretOrKey: configService.get(\"JWT_SECRET\"),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: [\"HS256\"], // Using symmetric key for integrated OAuth2\n            ignoreExpiration: false, // Ensure tokens expire\n        };\n\n        // Add issuer validation only if JWT_ISSUER is configured\n        const issuer = configService.get(\"JWT_ISSUER\");\n        if (issuer) {\n            (config as any).issuer = issuer;\n        }\n\n        return config;\n    }\n\n    /**\n     * Validate the JWT payload. It will also check if the client is set up.\n     * @param payload The JWT payload\n     * @returns The validated payload or an error\n     */\n    async validate(payload: TokenPayload): Promise {\n        const useExternalOIDC =\n            this.configService.get(\"OIDC\") !== undefined;\n\n        const sub = useExternalOIDC ? (payload as any).azp : payload.sub;\n\n        await this.clientService.isSetUp(sub);\n\n        return { sub };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Key.html":{"url":"classes/Key.html","title":"class - Key","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Key\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-import.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        JWK\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                alg\n                            \n                            \n                                    \n                                crv\n                            \n                            \n                                    \n                                d\n                            \n                            \n                                    \n                                kid\n                            \n                            \n                                    \n                                kty\n                            \n                            \n                                    \n                                x\n                            \n                            \n                                    \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        alg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        d\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        kid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        kty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['EC'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsEnum, IsObject, IsOptional, IsString } from \"class-validator\";\nimport { JWK } from \"jose\";\n\nclass Key implements JWK {\n    @IsString()\n    kid: string; // Key ID\n    @IsEnum([\"EC\"])\n    kty: string; // Key Type\n    @IsString()\n    x: string; // X coordinate for EC keys\n    @IsString()\n    y: string; // Y coordinate for EC keys\n    @IsString()\n    crv: string; // Curve name for EC keys\n    @IsString()\n    d: string; // Private key value for EC keys\n    @IsString()\n    alg: string; // Algorithm used with the key\n}\n\n/**\n * DTO for importing a key.\n */\nexport class KeyImportDto {\n    /**\n     * The private key in JWK format.\n     */\n    @IsObject()\n    @Type(() => Key)\n    privateKey: Key;\n\n    /**\n     * Optional certificate in PEM format.\n     */\n    @IsString()\n    @IsOptional()\n    crt?: string;\n\n    /**\n     * Description of the key.\n     */\n    @IsString()\n    @IsOptional()\n    description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/KeyController.html":{"url":"controllers/KeyController.html","title":"controller - KeyController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  KeyController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                key\n            \n\n\n            \n                Description\n            \n            \n                KeyController is responsible for managing keys in the system.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                addKey\n                            \n                            \n                                    \n                                deleteKey\n                            \n                            \n                                    \n                                getKeys\n                            \n                            \n                                    \n                                    Async\n                                updateKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        addKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    addKey(token: TokenPayload, body: KeyImportDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:51\n                        \n                    \n\n\n            \n                \n                        Add a new key to the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteKey(token: TokenPayload, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:82\n                        \n                    \n\n\n            \n                \n                        Delete a key from the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKeys(token: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:39\n                        \n                    \n\n\n            \n                \n                        Get all keys for the tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateKey(token: TokenPayload, id: string, body: UpdateKeyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:67\n                        \n                    \n\n\n            \n                \n                        Updates an existing key in the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateKeyDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Inject,\n    Param,\n    Post,\n    Put,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiSecurity } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { CryptoService } from \"../crypto.service\";\nimport { KeyImportDto } from \"./dto/key-import.dto\";\nimport { UpdateKeyDto } from \"./dto/key-update.dto\";\nimport { CertEntity } from \"./entities/cert.entity\";\nimport { KeyService } from \"./key.service\";\n\n/**\n * KeyController is responsible for managing keys in the system.\n */\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"key\")\nexport class KeyController {\n    constructor(\n        @Inject(\"KeyService\") public readonly keyService: KeyService,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Get all keys for the tenant.\n     * @param token\n     * @returns\n     */\n    @Get()\n    getKeys(@Token() token: TokenPayload): Promise {\n        const tenantId = token.sub;\n        return this.cryptoService.getCerts(tenantId);\n    }\n\n    /**\n     * Add a new key to the key service.\n     * @param token\n     * @param body\n     * @returns\n     */\n    @Post()\n    async addKey(\n        @Token() token: TokenPayload,\n        @Body() body: KeyImportDto,\n    ): Promise {\n        const tenantId = token.sub;\n        const id = await this.cryptoService.importKey(tenantId, body);\n        return { id };\n    }\n\n    /**\n     * Updates an existing key in the key service.\n     * @param token\n     * @param id\n     * @param body\n     */\n    @Put(\":id\")\n    async updateKey(\n        @Token() token: TokenPayload,\n        @Param(\"id\") id: string,\n        @Body() body: UpdateKeyDto,\n    ): Promise {\n        const tenantId = token.sub;\n        await this.cryptoService.updateCert(tenantId, id, body);\n    }\n\n    /**\n     * Delete a key from the key service.\n     * @param token\n     * @param id\n     */\n    @Delete(\":id\")\n    deleteKey(@Token() token: TokenPayload, @Param(\"id\") id: string) {\n        return this.cryptoService.deleteKey(token.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/KeyEntity.html":{"url":"entities/KeyEntity.html","title":"entity - KeyEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  KeyEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/entities/keys.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                key\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                usage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:15\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JWK\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:27\n                        \n                    \n\n            \n                \n                    The key material.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:21\n                        \n                    \n\n            \n                \n                    Tenant ID for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        usage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KeyUsage\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {default: 'sign'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:33\n                        \n                    \n\n            \n                \n                    The usage type of the key.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { JWK } from \"jose\";\nimport { Column, Entity } from \"typeorm\";\n\n/**\n * Key usage types.\n */\nexport type KeyUsage = \"sign\" | \"encrypt\";\n\n@Entity()\nexport class KeyEntity {\n    /**\n     * Unique identifier for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    id: string;\n\n    /**\n     * Tenant ID for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The key material.\n     */\n    @Column(\"json\")\n    key: JWK;\n\n    /**\n     * The usage type of the key.\n     */\n    @Column(\"varchar\", { default: \"sign\" })\n    usage: KeyUsage;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyImportDto.html":{"url":"classes/KeyImportDto.html","title":"class - KeyImportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyImportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-import.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for importing a key.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                crt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                privateKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:38\n                        \n                    \n\n            \n                \n                    Optional certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:45\n                        \n                    \n\n            \n                \n                    Description of the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        privateKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Key\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:31\n                        \n                    \n\n            \n                \n                    The private key in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsEnum, IsObject, IsOptional, IsString } from \"class-validator\";\nimport { JWK } from \"jose\";\n\nclass Key implements JWK {\n    @IsString()\n    kid: string; // Key ID\n    @IsEnum([\"EC\"])\n    kty: string; // Key Type\n    @IsString()\n    x: string; // X coordinate for EC keys\n    @IsString()\n    y: string; // Y coordinate for EC keys\n    @IsString()\n    crv: string; // Curve name for EC keys\n    @IsString()\n    d: string; // Private key value for EC keys\n    @IsString()\n    alg: string; // Algorithm used with the key\n}\n\n/**\n * DTO for importing a key.\n */\nexport class KeyImportDto {\n    /**\n     * The private key in JWK format.\n     */\n    @IsObject()\n    @Type(() => Key)\n    privateKey: Key;\n\n    /**\n     * Optional certificate in PEM format.\n     */\n    @IsString()\n    @IsOptional()\n    crt?: string;\n\n    /**\n     * Description of the key.\n     */\n    @IsString()\n    @IsOptional()\n    description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeyModule.html":{"url":"modules/KeyModule.html","title":"module - KeyModule","body":"\n                   \n\n\n\n\n    Modules\n    KeyModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/key/key.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.module.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { HttpModule, HttpService } from \"@nestjs/axios\";\nimport { DynamicModule, Global, Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { getRepositoryToken, TypeOrmModule } from \"@nestjs/typeorm\";\nimport * as Joi from \"joi\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { DBKeyService } from \"./adapters/db-key.service\";\nimport { VaultKeyService } from \"./adapters/vault-key.service\";\nimport { CryptoImplementatationModule } from \"./crypto-implementation/crypto-implementation.module\";\nimport { CryptoImplementationService } from \"./crypto-implementation/crypto-implementation.service\";\nimport { CertEntity } from \"./entities/cert.entity\";\nimport { KeyEntity } from \"./entities/keys.entity\";\n\nexport const KEY_VALIDATION_SCHEMA = {\n    KM_TYPE: Joi.string().valid(\"db\", \"vault\").default(\"db\"),\n\n    // Vault-related config\n    VAULT_URL: Joi.string().uri().when(\"KM_TYPE\", {\n        is: \"vault\",\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_TOKEN: Joi.string().when(\"KM_TYPE\", {\n        is: \"vault\",\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n};\n\n@Global()\n@Module({})\nexport class KeyModule {\n    static forRoot(): DynamicModule {\n        return {\n            module: KeyModule,\n            imports: [\n                HttpModule,\n                ConfigModule,\n                CryptoImplementatationModule,\n                TypeOrmModule.forFeature([CertEntity, KeyEntity]),\n            ],\n            providers: [\n                {\n                    provide: \"KeyService\",\n                    useFactory: (\n                        configService: ConfigService,\n                        httpService: HttpService,\n                        cryptoService: CryptoImplementationService,\n                        certRepository: Repository,\n                        keyRepository: Repository,\n                    ) => {\n                        const kmType = configService.get(\n                            \"KM_TYPE\",\n                        );\n                        if (kmType === \"vault\") {\n                            return new VaultKeyService(\n                                httpService,\n                                configService,\n                                cryptoService,\n                                certRepository,\n                            );\n                        }\n\n                        return new DBKeyService(\n                            configService,\n                            cryptoService,\n                            certRepository,\n                            keyRepository,\n                        );\n                    },\n                    inject: [\n                        ConfigService,\n                        HttpService,\n                        CryptoImplementationService,\n                        getRepositoryToken(CertEntity),\n                        getRepositoryToken(KeyEntity),\n                    ],\n                },\n            ],\n            exports: [\"KeyService\"],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyObj.html":{"url":"classes/KeyObj.html","title":"class - KeyObj","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyObj\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-object.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a key entity with its unique identifier, public key, and certificate.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crt\n                            \n                            \n                                id\n                            \n                            \n                                publicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:19\n                        \n                    \n\n            \n                \n                    Certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:11\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        publicKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EC_Public\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:15\n                        \n                    \n\n            \n                \n                    Public key in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EC_Public } from \"../../../well-known/dto/jwks-response.dto\";\n\n/**\n * Represents a key entity with its unique identifier, public key, and certificate.\n */\n\nexport class KeyObj {\n    /**\n     * Unique identifier for the key.\n     */\n    id: string;\n    /**\n     * Public key in JWK format.\n     */\n    publicKey: EC_Public;\n    /**\n     * Certificate in PEM format.\n     */\n    crt: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyResponseDto.html":{"url":"classes/KeyResponseDto.html","title":"class - KeyResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keys\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EC_Public[]\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EC_Public } from \"../../../well-known/dto/jwks-response.dto\";\n\nexport class KeyResponseDto {\n    keys: EC_Public[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyService.html":{"url":"classes/KeyService.html","title":"class - KeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface for a key service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                create\n                            \n                            \n                                    Protected\n                                getCertificate\n                            \n                            \n                                    Abstract\n                                getKid\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                import\n                            \n                            \n                                    Abstract\n                                init\n                            \n                            \n                                    Abstract\n                                signer\n                            \n                            \n                                    Abstract\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, certRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/key.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        certRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the generated key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCertificate(tenantId: string, keyId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Get the certificate for the given key id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getKid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKid(tenantId: string, type?: CertificateType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Get the key id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                            CertificateType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import(tenantId: string, body: KeyImportDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Import a key into the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:24\n                        \n                    \n\n\n            \n                \n                        Initialize the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the initialized key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Get the callback for the signer function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JoseHeaderParameters, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JoseHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConflictException } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Signer } from \"@sd-jwt/types\";\nimport { JoseHeaderParameters, JWK, JWTPayload } from \"jose\";\nimport { Repository } from \"typeorm\";\nimport { KeyImportDto } from \"./dto/key-import.dto\";\nimport { KeyObj } from \"./dto/key-object.dto\";\nimport { CertEntity, CertificateType } from \"./entities/cert.entity\";\n\n/**\n * Generic interface for a key service\n */\nexport abstract class KeyService {\n    constructor(\n        protected configService: ConfigService,\n        protected certRepository: Repository,\n    ) {}\n\n    /**\n     * Initialize the key service\n     * @param tenantId\n     * @returns key id of the initialized key.\n     */\n    abstract init(tenantId): Promise;\n\n    /**\n     * Creates a new keypair\n     * @param tenantId\n     * @return key id of the generated key.\n     */\n    abstract create(tenantId): Promise;\n\n    /**\n     * Import a key into the key service.\n     * @param tenantId\n     * @param body\n     */\n    abstract import(tenantId: string, body: KeyImportDto): Promise;\n\n    /**\n     * Get the callback for the signer function\n     * @param tenantId\n     */\n    abstract signer(tenantId: string, keyId?: string): Promise;\n\n    /**\n     * Get the key id\n     * @returns\n     */\n    abstract getKid(tenantId: string, type?: CertificateType): Promise;\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    abstract getPublicKey(\n        type: \"jwk\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    abstract getPublicKey(\n        type: \"pem\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    abstract getPublicKey(\n        type: \"pem\" | \"jwk\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n\n    //TODO: this can be handled via the signer callback\n    abstract signJWT(\n        payload: JWTPayload,\n        header: JoseHeaderParameters,\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n\n    /**\n     * Get the certificate for the given key id.\n     * @param tenantId\n     * @param keyId\n     * @returns\n     */\n    protected getCertificate(tenantId: string, keyId: string): Promise {\n        return this.certRepository\n            .findOneByOrFail({\n                tenantId,\n                id: keyId,\n            })\n            .then(\n                (cert) => cert.crt,\n                () => {\n                    throw new ConflictException(\"Certificate not found\");\n                },\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalFileStorage.html":{"url":"classes/LocalFileStorage.html","title":"class - LocalFileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalFileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/adapters/local.storage.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            FileStorage\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                exists\n                            \n                            \n                                getStream\n                            \n                            \n                                    Async\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(baseDir: string)\n                    \n                \n                        \n                            \n                                Defined in src/storage/adapters/local.storage.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        baseDir\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        put\n                        \n                    \n                \n            \n            \n                \n                        \n                    put(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    createReadStream,\n    createWriteStream,\n    existsSync,\n    mkdirSync,\n    rmdirSync,\n    statSync,\n} from \"fs\";\nimport { dirname, join } from \"path\";\nimport { Readable } from \"stream\";\nimport { FileStorage, PutOptions, StoredObject } from \"../storage.types\";\n\nexport class LocalFileStorage implements FileStorage {\n    constructor(private baseDir: string) {}\n\n    async put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise {\n        const fullPath = join(this.baseDir, key);\n        mkdirSync(dirname(fullPath), { recursive: true });\n\n        await new Promise((resolve, reject) => {\n            const write = createWriteStream(fullPath);\n            const src = body instanceof Readable ? body : Readable.from(body);\n            src.pipe(write)\n                .on(\"finish\", () => resolve())\n                .on(\"error\", reject);\n        });\n\n        const st = statSync(fullPath);\n\n        return { key, size: st.size, contentType: opts?.contentType };\n    }\n\n    getStream(key: string) {\n        const fullPath = join(this.baseDir, key);\n        return Promise.resolve({ stream: createReadStream(fullPath) });\n    }\n\n    delete(key: string) {\n        return Promise.resolve(\n            rmdirSync(join(this.baseDir, key), { recursive: true }),\n        );\n    }\n\n    exists(key: string) {\n        return Promise.resolve(existsSync(join(this.baseDir, key)));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerConfigService.html":{"url":"injectables/LoggerConfigService.html","title":"injectable - LoggerConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/logger-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing logger configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getConfiguration\n                            \n                            \n                                getLogFormat\n                            \n                            \n                                getLogLevel\n                            \n                            \n                                isDebugModeEnabled\n                            \n                            \n                                isHttpLoggerEnabled\n                            \n                            \n                                isSessionLoggerEnabled\n                            \n                            \n                                    Private\n                                loadConfiguration\n                            \n                            \n                                    Private\n                                parseLogLevel\n                            \n                            \n                                reloadConfiguration\n                            \n                            \n                                shouldEnableAutoLogging\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/logger-config.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConfiguration\n                        \n                    \n                \n            \n            \n                \ngetConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         LoggerConfiguration\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogFormat\n                        \n                    \n                \n            \n            \n                \ngetLogFormat()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     \"json\" | \"pretty\"\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogLevel\n                        \n                    \n                \n            \n            \n                \ngetLogLevel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     LogLevel\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDebugModeEnabled\n                        \n                    \n                \n            \n            \n                \nisDebugModeEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isHttpLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisHttpLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSessionLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisSessionLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseLogLevel\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseLogLevel(level: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                level\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     LogLevel\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reloadConfiguration\n                        \n                    \n                \n            \n            \n                \nreloadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Hot reload configuration from environment\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        shouldEnableAutoLogging\n                        \n                    \n                \n            \n            \n                \nshouldEnableAutoLogging()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Check if automatic HTTP request/response logging should be enabled\nThis is used by the LoggerModule configuration\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoggerConfiguration\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/logger-config.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, LogLevel } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    enableSessionLogger: boolean;\n    enableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: \"json\" | \"pretty\";\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get(\"LOG_LEVEL\", \"info\"),\n            ),\n            enableSessionLogger: this.configService.get(\n                \"LOG_ENABLE_SESSION_LOGGER\",\n                false,\n            ),\n            enableHttpLogger: this.configService.get(\n                \"LOG_ENABLE_HTTP_LOGGER\",\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                \"LOG_DEBUG_MODE\",\n                false,\n            ),\n            logFormat: this.configService.get(\n                \"LOG_FORMAT\",\n                \"pretty\",\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: \"verbose\",\n            debug: \"debug\",\n            log: \"log\",\n            warn: \"warn\",\n            error: \"error\",\n            fatal: \"fatal\",\n        };\n        return levels[level.toLowerCase()] || \"log\";\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return this.config.enableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return this.config.enableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): \"json\" | \"pretty\" {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggerConfiguration.html":{"url":"interfaces/LoggerConfiguration.html","title":"interface - LoggerConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoggerConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/logger-config.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            enableDebugMode\n                                        \n                                \n                                \n                                        \n                                            enableHttpLogger\n                                        \n                                \n                                \n                                        \n                                            enableSessionLogger\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            logFormat\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enableDebugMode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableDebugMode:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableHttpLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableHttpLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableSessionLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableSessionLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:     LogLevel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     LogLevel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logFormat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logFormat:     \"json\" | \"pretty\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"json\" | \"pretty\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, LogLevel } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    enableSessionLogger: boolean;\n    enableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: \"json\" | \"pretty\";\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get(\"LOG_LEVEL\", \"info\"),\n            ),\n            enableSessionLogger: this.configService.get(\n                \"LOG_ENABLE_SESSION_LOGGER\",\n                false,\n            ),\n            enableHttpLogger: this.configService.get(\n                \"LOG_ENABLE_HTTP_LOGGER\",\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                \"LOG_DEBUG_MODE\",\n                false,\n            ),\n            logFormat: this.configService.get(\n                \"LOG_FORMAT\",\n                \"pretty\",\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: \"verbose\",\n            debug: \"debug\",\n            log: \"log\",\n            warn: \"warn\",\n            error: \"error\",\n            fatal: \"fatal\",\n        };\n        return levels[level.toLowerCase()] || \"log\";\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return this.config.enableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return this.config.enableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): \"json\" | \"pretty\" {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetricModule.html":{"url":"modules/MetricModule.html","title":"module - MetricModule","body":"\n                   \n\n\n\n\n    Modules\n    MetricModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/metric/metric.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PrometheusModule } from \"@willsoto/nestjs-prometheus\";\n\n@Module({\n    imports: [\n        //TODO: add a guard to protect the metrics endpoint\n        PrometheusModule.register({\n            defaultMetrics: {\n                enabled: false,\n            },\n        }),\n    ],\n})\nexport class MetricModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoneTrustPolicy.html":{"url":"classes/NoneTrustPolicy.html","title":"class - NoneTrustPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoneTrustPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.ts\n        \n\n\n            \n                Description\n            \n            \n                none\n\n            \n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                policy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PolicyType.NONE\n\n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:45\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsEnum,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\nexport enum PolicyType {\n    NONE = \"none\",\n    ALLOW_LIST = \"allowList\",\n    ROOT_OF_TRUST = \"rootOfTrust\",\n    ATTESTATION_BASED = \"attestationBased\",\n}\n\nexport class EmbeddedDisclosurePolicy {\n    @IsDefined()\n    @IsEnum(PolicyType)\n    policy!: PolicyType;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ALLOW_LIST;\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ROOT_OF_TRUST;\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.NONE;\n}\n\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    claims?: any[];\n\n    @IsDefined()\n    @IsArray()\n    credentials!: any[];\n\n    @IsOptional()\n    @IsArray()\n    credential_sets?: any[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ATTESTATION_BASED;\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n// Convenience union type if you use it elsewhere\nexport type AnyPolicy =\n    | NoneTrustPolicy\n    | AllowListPolicy\n    | RootOfTrustPolicy\n    | AttestationBasedPolicy;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotificationRequestDto.html":{"url":"classes/NotificationRequestDto.html","title":"class - NotificationRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotificationRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/notification-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                event\n                            \n                            \n                                    \n                                notification_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationEvent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['credential_accepted', 'credential_revoked'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notification_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotificationEvent } from \"@openid4vc/openid4vci\";\nimport { IsEnum, IsString } from \"class-validator\";\n\nexport class NotificationRequestDto {\n    @IsString()\n    notification_id: string;\n\n    @IsEnum([\"credential_accepted\", \"credential_revoked\"])\n    event: NotificationEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OAuthController.html":{"url":"controllers/OAuthController.html","title":"controller - OAuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OAuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/oauth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                oauth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                getToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    getToken(tokenRequest: TokenRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'OAuth 2.0 Token Endpoint', description: 'Obtain an access token using client credentials grant type.'})@Post('token')\n                \n            \n\n                    \n                        \n                            Defined in src/oauth/oauth.controller.ts:22\n                        \n                    \n\n\n            \n                \n                        OAuth 2.0 token endpoint for client credentials flow.\nThis endpoint allows clients to obtain access tokens using their client credentials.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tokenRequest\n                                            \n                                                            TokenRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from \"@nestjs/common\";\nimport { ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { TokenRequestDto } from \"./dto/token-request.dto\";\nimport { TokenResponseDto } from \"./dto/token-response.dto\";\nimport { OAuthService } from \"./oauth.service\";\n\n@ApiTags(\"OAuth 2.0\")\n@Controller(\"oauth\")\nexport class OAuthController {\n    constructor(private readonly oauthService: OAuthService) {}\n\n    /**\n     * OAuth 2.0 token endpoint for client credentials flow.\n     * This endpoint allows clients to obtain access tokens using their client credentials.\n     */\n    @ApiOperation({\n        summary: \"OAuth 2.0 Token Endpoint\",\n        description:\n            \"Obtain an access token using client credentials grant type.\",\n    })\n    @Post(\"token\")\n    async getToken(\n        @Body() tokenRequest: TokenRequestDto,\n    ): Promise {\n        return await this.oauthService.handleClientCredentialsGrant(\n            tokenRequest,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OAuthModule.html":{"url":"modules/OAuthModule.html","title":"module - OAuthModule","body":"\n                   \n\n\n\n\n    Modules\n    OAuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OAuthModule\n\n\n\ncluster_OAuthModule_imports\n\n\n\ncluster_OAuthModule_exports\n\n\n\ncluster_OAuthModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nOAuthModule\n\nOAuthModule\n\nOAuthModule -->\n\nCryptoModule->OAuthModule\n\n\n\n\n\nOAuthService \n\nOAuthService \n\nOAuthService  -->\n\nOAuthModule->OAuthService \n\n\n\n\n\nOAuthService\n\nOAuthService\n\nOAuthModule -->\n\nOAuthService->OAuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/oauth/oauth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OAuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OAuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OAuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport * as Joi from \"joi\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { OAuthController } from \"./oauth.controller\";\nimport { OAuthService } from \"./oauth.service\";\n\nexport const OAUTH_VALIDATION_SCHEMA = {\n    OAUTH_CLIENT_ID: Joi.string().optional(),\n    OAUTH_CLIENT_SECRET: Joi.string().optional(),\n};\n\n@Module({\n    imports: [CryptoModule],\n    controllers: [OAuthController],\n    providers: [OAuthService],\n    exports: [OAuthService],\n})\nexport class OAuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OAuthService.html":{"url":"injectables/OAuthService.html","title":"injectable - OAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/oauth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                clients\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addClient\n                            \n                            \n                                    Private\n                                    Async\n                                generateAccessToken\n                            \n                            \n                                    Async\n                                handleClientCredentialsGrant\n                            \n                            \n                                hasClient\n                            \n                            \n                                    Private\n                                initializeClients\n                            \n                            \n                                removeClient\n                            \n                            \n                                    Private\n                                validateClientCredentials\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/oauth/oauth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addClient\n                        \n                    \n                \n            \n            \n                \naddClient(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAccessToken(clientId: string, scope?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                scope\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleClientCredentialsGrant\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleClientCredentialsGrant(request: TokenRequestDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            TokenRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasClient\n                        \n                    \n                \n            \n            \n                \nhasClient(clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializeClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeClient\n                        \n                    \n                \n            \n            \n                \nremoveClient(clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        validateClientCredentials\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateClientCredentials(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        clients\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/oauth/oauth.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { TokenRequestDto } from \"./dto/token-request.dto\";\nimport { TokenResponseDto } from \"./dto/token-response.dto\";\n\n@Injectable()\nexport class OAuthService {\n    // In a real implementation, you'd store these securely in a database\n    private readonly clients = new Map();\n\n    constructor(\n        private readonly configService: ConfigService,\n        private readonly cryptoService: CryptoService,\n    ) {\n        // Initialize with some default clients - you can move this to configuration\n        this.initializeClients();\n    }\n\n    private initializeClients() {\n        // Add default client from environment variables if available\n        const defaultClientId =\n            this.configService.get(\"OAUTH_CLIENT_ID\");\n        const defaultClientSecret = this.configService.get(\n            \"OAUTH_CLIENT_SECRET\",\n        );\n\n        if (defaultClientId && defaultClientSecret) {\n            this.clients.set(defaultClientId, defaultClientSecret);\n        }\n    }\n\n    async handleClientCredentialsGrant(\n        request: TokenRequestDto,\n    ): Promise {\n        // Validate client credentials\n        if (\n            !this.validateClientCredentials(\n                request.client_id,\n                request.client_secret,\n            )\n        ) {\n            throw new UnauthorizedException(\"Invalid client credentials\");\n        }\n\n        // Generate access token\n        const accessToken = await this.generateAccessToken(\n            request.client_id,\n            request.scope,\n        );\n\n        return {\n            access_token: accessToken,\n            token_type: \"Bearer\",\n            expires_in: 3600, // 1 hour\n            scope: request.scope || \"openid\",\n        };\n    }\n\n    private validateClientCredentials(\n        clientId: string,\n        clientSecret: string,\n    ): boolean {\n        const storedSecret = this.clients.get(clientId);\n        return storedSecret === clientSecret;\n    }\n\n    private async generateAccessToken(\n        clientId: string,\n        scope?: string,\n    ): Promise {\n        const payload = {\n            sub: clientId,\n            aud: this.configService.getOrThrow(\"PUBLIC_URL\"),\n            iss: this.configService.getOrThrow(\"PUBLIC_URL\"),\n            scope: scope || \"openid\",\n            exp: Math.floor(Date.now() / 1000) + 3600, // 1 hour from now\n            iat: Math.floor(Date.now() / 1000),\n        };\n\n        // For now, we'll use the root tenant for signing\n        // In a real implementation, you might want to use a dedicated OAuth signing key\n        const tenantId = \"root\";\n        return await this.cryptoService.signJwt(\n            payload,\n            { alg: \"RS256\" },\n            tenantId,\n        );\n    }\n\n    // Methods to manage clients dynamically\n    addClient(clientId: string, clientSecret: string): void {\n        this.clients.set(clientId, clientSecret);\n    }\n\n    removeClient(clientId: string): void {\n        this.clients.delete(clientId);\n    }\n\n    hasClient(clientId: string): boolean {\n        return this.clients.has(clientId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Oauth2AuthorizationServerResponse.html":{"url":"classes/Oauth2AuthorizationServerResponse.html","title":"class - Oauth2AuthorizationServerResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Oauth2AuthorizationServerResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/oauth-authorization-server-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response from an OAuth2 authorization server.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_challenge_endpoint\n                            \n                            \n                                authorization_endpoint\n                            \n                            \n                                code_challenge_methods_supported\n                            \n                            \n                                dpop_signing_alg_values_supported\n                            \n                            \n                                issuer\n                            \n                            \n                                jwks_uri\n                            \n                            \n                                pushed_authorization_request_endpoint\n                            \n                            \n                                require_pushed_authorization_requests\n                            \n                            \n                                token_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_challenge_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:37\n                        \n                    \n\n            \n                \n                    The URL of the authorization challenge endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:13\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's authorization endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        code_challenge_methods_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:21\n                        \n                    \n\n            \n                \n                    List of supported algorithms to sign the challenge\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dpop_signing_alg_values_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:25\n                        \n                    \n\n            \n                \n                    List of supported algorithms for DPoP signing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwks_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:17\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushed_authorization_request_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    The URL of the pushed authorization request endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        require_pushed_authorization_requests\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:29\n                        \n                    \n\n            \n                \n                    Indicates whether the server requires pushed authorization requests.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's token endpoint.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Oauth2AuthorizationServerResponse {\n    issuer: string;\n    /**\n     * The URL of the OAuth2 authorization server's token endpoint.\n     */\n    token_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's authorization endpoint.\n     */\n    authorization_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n     */\n    jwks_uri: string;\n    /**\n     * List of supported algorithms to sign the challenge\n     */\n    code_challenge_methods_supported: string[];\n    /**\n     * List of supported algorithms for DPoP signing.\n     */\n    dpop_signing_alg_values_supported: string[];\n    /**\n     * Indicates whether the server requires pushed authorization requests.\n     */\n    require_pushed_authorization_requests: boolean;\n    /**\n     * The URL of the pushed authorization request endpoint.\n     */\n    pushed_authorization_request_endpoint: string;\n    /**\n     * The URL of the authorization challenge endpoint.\n     */\n    authorization_challenge_endpoint: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferRequestDto.html":{"url":"classes/OfferRequestDto.html","title":"class - OfferRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                claims\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                claimsWebhook\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationIds\n                            \n                            \n                                    \n                                issuanceId\n                            \n                            \n                                    \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                session\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record>\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'object', description: 'Override the default values for the credential claims.', properties: undefined, examples: undefined})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:56\n                        \n                    \n\n            \n                \n                    Override the default values for the credential claims.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        claimsWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:63\n                        \n                    \n\n            \n                \n                    Webhook configuration for claims\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:36\n                        \n                    \n\n            \n                \n                    Overrides the default values for the credential ids.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:29\n                        \n                    \n\n            \n                \n                    Issuance config id to reference the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({examples: undefined, description: 'The type of response expected for the offer request.'})@IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:70\n                        \n                    \n\n            \n                \n                    Pre defined session id\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUUID,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { ResponseType } from \"../../../verifier/oid4vp/dto/presentation-request.dto\";\n\nexport class OfferRequestDto {\n    @ApiProperty({\n        examples: [\n            {\n                value: \"qrcode\",\n            },\n        ],\n        description: \"The type of response expected for the offer request.\",\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Issuance config id to reference the issuance configuration.\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * Overrides the default values for the credential ids.\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    /**\n     * Override the default values for the credential claims.\n     */\n    @ApiProperty({\n        type: \"object\",\n        description: \"Override the default values for the credential claims.\",\n        properties: {},\n        examples: [\n            {\n                pid: {\n                    given_name: \"ERIKA\",\n                    family_name: \"MUSTERMANN\",\n                },\n            },\n        ],\n    })\n    @IsObject()\n    @IsOptional()\n    claims?: Record>;\n\n    /**\n     * Webhook configuration for claims\n     */\n    @IsObject()\n    @IsOptional()\n    claimsWebhook?: WebhookConfig;\n\n    /**\n     * Pre defined session id\n     */\n    @IsUUID()\n    @IsOptional()\n    session?: string;\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferResponse.html":{"url":"classes/OfferResponse.html","title":"class - OfferResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                session\n                            \n                            \n                                uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:74\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUUID,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { ResponseType } from \"../../../verifier/oid4vp/dto/presentation-request.dto\";\n\nexport class OfferRequestDto {\n    @ApiProperty({\n        examples: [\n            {\n                value: \"qrcode\",\n            },\n        ],\n        description: \"The type of response expected for the offer request.\",\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Issuance config id to reference the issuance configuration.\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * Overrides the default values for the credential ids.\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    /**\n     * Override the default values for the credential claims.\n     */\n    @ApiProperty({\n        type: \"object\",\n        description: \"Override the default values for the credential claims.\",\n        properties: {},\n        examples: [\n            {\n                pid: {\n                    given_name: \"ERIKA\",\n                    family_name: \"MUSTERMANN\",\n                },\n            },\n        ],\n    })\n    @IsObject()\n    @IsOptional()\n    claims?: Record>;\n\n    /**\n     * Webhook configuration for claims\n     */\n    @IsObject()\n    @IsOptional()\n    claimsWebhook?: WebhookConfig;\n\n    /**\n     * Pre defined session id\n     */\n    @IsUUID()\n    @IsOptional()\n    session?: string;\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vciController.html":{"url":"controllers/Oid4vciController.html","title":"controller - Oid4vciController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vciController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/oid4vci.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/vci\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VCI (OpenID for Verifiable Credential Issuance) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                credential\n                            \n                            \n                                    \n                                    \n                                nonce\n                            \n                            \n                                    \n                                    \n                                notifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credential\n                        \n                    \n                \n            \n            \n                \n                        \n                    credential(req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('credential')@SessionLogger('session', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:39\n                        \n                    \n\n\n            \n                \n                        Endpoint to issue credentials\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        nonce\n                        \n                    \n                \n            \n            \n                \n                        \n                    nonce(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('nonce')@SessionLogger('nonce', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        notifications\n                        \n                    \n                \n            \n            \n                \n                        \n                    notifications(body: NotificationRequestDto, req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('notification')@SessionLogger('notification_id', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Notification endpoint\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            NotificationRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    Post,\n    Req,\n    UseGuards,\n    UseInterceptors,\n} from \"@nestjs/common\";\nimport { ApiExcludeController, ApiParam } from \"@nestjs/swagger\";\nimport type { CredentialResponse } from \"@openid4vc/openid4vci\";\nimport type { Request } from \"express\";\nimport { Oid4vciService } from \"../../issuer/oid4vci/oid4vci.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionEntity } from \"../../session/session.decorator\";\nimport { SessionGuard } from \"../../session/session.guard\";\nimport { SessionLogger } from \"../../utils/logger//session-logger.decorator\";\nimport { SessionLoggerInterceptor } from \"../../utils/logger/session-logger.interceptor\";\nimport { NotificationRequestDto } from \"./dto/notification-request.dto\";\n\n/**\n * Controller for handling OID4VCI (OpenID for Verifiable Credential Issuance) requests.\n */\n@ApiParam({ name: \"session\", required: true })\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@UseGuards(SessionGuard)\n@Controller(\":session/vci\")\n@UseInterceptors(SessionLoggerInterceptor)\nexport class Oid4vciController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Endpoint to issue credentials\n     * @param req\n     * @returns\n     */\n    @Post(\"credential\")\n    @SessionLogger(\"session\", \"OID4VCI\")\n    credential(\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ): Promise {\n        return this.oid4vciService.getCredential(req, session);\n    }\n\n    /**\n     * Notification endpoint\n     * @param body\n     * @returns\n     */\n    @Post(\"notification\")\n    @SessionLogger(\"notification_id\", \"OID4VCI\")\n    notifications(\n        @Body() body: NotificationRequestDto,\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ) {\n        return this.oid4vciService.handleNotification(req, body, session);\n    }\n\n    @Post(\"nonce\")\n    @SessionLogger(\"nonce\", \"OID4VCI\")\n    nonce(@SessionEntity() session: Session) {\n        return this.oid4vciService.nonceRequest(session);\n    }\n\n    //TODO: this endpoint may be relevant for the wallet attestation.\n    /* @Get('session')\n  session() {\n    console.log('Session requested');\n    //TODO store session and created at\n    const session = randomUUID();\n    return {\n      session_id: session,\n    };\n  } */\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vpController.html":{"url":"controllers/Oid4vpController.html","title":"controller - Oid4vpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/oid4vp\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getRequestWithSession\n                            \n                            \n                                    \n                                    \n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getRequestWithSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRequestWithSession(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:41\n                        \n                    \n\n\n            \n                \n                        Returns the authorization request for a given requestId and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:52\n                        \n                    \n\n\n            \n                \n                        Endpoint to receive the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    Post,\n    UseGuards,\n    UseInterceptors,\n} from \"@nestjs/common\";\nimport { ApiExcludeController, ApiParam } from \"@nestjs/swagger\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionEntity } from \"../../session/session.decorator\";\nimport { SessionGuard } from \"../../session/session.guard\";\nimport { SessionLogger } from \"../../utils/logger/session-logger.decorator\";\nimport { SessionLoggerInterceptor } from \"../../utils/logger/session-logger.interceptor\";\nimport { AuthorizationResponse } from \"./dto/authorization-response.dto\";\nimport { Oid4vpService } from \"./oid4vp.service\";\n\n/**\n * Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n */\n@Controller(\":session/oid4vp\")\n@UseGuards(SessionGuard)\n@UseInterceptors(SessionLoggerInterceptor)\n@ApiParam({ name: \"session\", required: true })\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\nexport class Oid4vpController {\n    /**\n     * Constructor for the Oid4vpController.\n     * @param oid4vpService - Instance of Oid4vpService for handling OID4VP operations.\n     */\n    constructor(private readonly oid4vpService: Oid4vpService) {}\n\n    /**\n     * Returns the authorization request for a given requestId and session.\n     * @param requestId\n     * @param session\n     * @returns\n     */\n    @Get()\n    @SessionLogger(\"session\", \"OID4VP\")\n    getRequestWithSession(@SessionEntity() session: Session) {\n        return this.oid4vpService.createAuthorizationRequest(session);\n    }\n\n    /**\n     * Endpoint to receive the response from the wallet.\n     * @param body\n     * @returns\n     */\n    @Post()\n    @SessionLogger(\"session\", \"OID4VP\")\n    getResponse(\n        @Body() body: AuthorizationResponse,\n        @SessionEntity() session: Session,\n    ) {\n        return this.oid4vpService.getResponse(body, session);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/Oid4vpModule.html":{"url":"modules/Oid4vpModule.html","title":"module - Oid4vpModule","body":"\n                   \n\n\n\n\n    Modules\n    Oid4vpModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_imports\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nOid4vpModule -->\n\nWebhookService->Oid4vpModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            Oid4vpService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                        \n                            WebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vpController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            Oid4vpService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { forwardRef, Module } from \"@nestjs/common\";\nimport { CryptoModule } from \"../../crypto/crypto.module\";\nimport { RegistrarModule } from \"../../registrar/registrar.module\";\nimport { SessionModule } from \"../../session/session.module\";\nimport { SessionLoggerInterceptor } from \"../../utils/logger/session-logger.interceptor\";\nimport { SessionLoggerService } from \"../../utils/logger/session-logger.service\";\nimport { WebhookService } from \"../../utils/webhook/webhook.service\";\nimport { PresentationsModule } from \"../presentations/presentations.module\";\nimport { Oid4vpController } from \"./oid4vp.controller\";\nimport { Oid4vpService } from \"./oid4vp.service\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        forwardRef(() => RegistrarModule),\n        forwardRef(() => PresentationsModule),\n        SessionModule,\n        HttpModule,\n    ],\n    controllers: [Oid4vpController],\n    providers: [\n        Oid4vpService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n        WebhookService,\n    ],\n    exports: [Oid4vpService],\n})\nexport class Oid4vpModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Oid4vpService.html":{"url":"injectables/Oid4vpService.html","title":"injectable - Oid4vpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Oid4vpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAuthorizationRequest\n                            \n                            \n                                    Async\n                                createRequest\n                            \n                            \n                                    Async\n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, encryptionService: EncryptionService, configService: ConfigService, registrarService: RegistrarService, presentationsService: PresentationsService, sessionService: SessionService, sessionLogger: SessionLoggerService, webhookService: WebhookService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/oid4vp/oid4vp.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        webhookService\n                                                  \n                                                        \n                                                                        WebhookService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAuthorizationRequest(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:41\n                        \n                    \n\n\n            \n                \n                        Creates an authorization request for the OID4VP flow.\nThis method generates a JWT that includes the necessary parameters for the authorization request.\nIt initializes the session logging context and logs the start of the flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRequest(requestId: string, values: PresentationRequestOptions, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:205\n                        \n                    \n\n\n            \n                \n                        Creates a request for the OID4VP flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            PresentationRequestOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:264\n                        \n                    \n\n\n            \n                \n                        Processes the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { v4 } from \"uuid\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { EncryptionService } from \"../../crypto/encryption/encryption.service\";\nimport { OfferResponse } from \"../../issuer/oid4vci/dto/offer-request.dto\";\nimport { RegistrarService } from \"../../registrar/registrar.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { SessionLoggerService } from \"../../utils/logger/session-logger.service\";\nimport { SessionLogContext } from \"../../utils/logger/session-logger-context\";\nimport { WebhookService } from \"../../utils/webhook/webhook.service\";\nimport { AuthResponse } from \"../presentations/dto/auth-response.dto\";\nimport { PresentationsService } from \"../presentations/presentations.service\";\nimport { AuthorizationResponse } from \"./dto/authorization-response.dto\";\nimport { PresentationRequestOptions } from \"./dto/presentation-request-options.dto\";\n\n@Injectable()\nexport class Oid4vpService {\n    constructor(\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private configService: ConfigService,\n        private registrarService: RegistrarService,\n        private presentationsService: PresentationsService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n        private webhookService: WebhookService,\n    ) {}\n\n    /**\n     * Creates an authorization request for the OID4VP flow.\n     * This method generates a JWT that includes the necessary parameters for the authorization request.\n     * It initializes the session logging context and logs the start of the flow.\n     * @param requestId\n     * @param tenantId\n     * @param auth_session\n     * @returns\n     */\n    async createAuthorizationRequest(session: Session): Promise {\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId: session.tenantId,\n            flowType: \"OID4VP\",\n            stage: \"authorization_request\",\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            requestId: session.requestId,\n            action: \"create_authorization_request\",\n        });\n\n        try {\n            const host = this.configService.getOrThrow(\"PUBLIC_URL\");\n            const tenantHost = `${host}/${session.tenantId}`;\n\n            const presentationConfig =\n                await this.presentationsService.getPresentationConfig(\n                    session.requestId!,\n                    session.tenantId,\n                );\n            let regCert: string | undefined = undefined;\n\n            const dcql_query = JSON.parse(\n                JSON.stringify(presentationConfig.dcql_query).replace(\n                    //g,\n                    tenantHost,\n                ),\n            );\n\n            if (this.registrarService.isEnabled()) {\n                const registrationCert = JSON.parse(\n                    JSON.stringify(presentationConfig.registrationCert).replace(\n                        //g,\n                        tenantHost,\n                    ),\n                );\n                regCert =\n                    await this.registrarService.addRegistrationCertificate(\n                        registrationCert,\n                        dcql_query,\n                        session.requestId!,\n                        session.tenantId,\n                    );\n            }\n            const nonce = randomUUID();\n            await this.sessionService.add(session.id, {\n                vp_nonce: nonce,\n            });\n\n            this.sessionLogger.logAuthorizationRequest(logContext, {\n                requestId: session.requestId,\n                nonce,\n                regCert,\n                dcqlQueryCount: Array.isArray(dcql_query)\n                    ? dcql_query.length\n                    : 1,\n            });\n\n            const hostname = new URL(\n                this.configService.getOrThrow(\"PUBLIC_URL\"),\n            ).hostname;\n\n            const lifeTime = 60 * 60;\n\n            const request = {\n                payload: {\n                    response_type: \"vp_token\",\n                    client_id: \"x509_san_dns:\" + hostname,\n                    response_uri: `${host}/${session.id}/oid4vp`,\n                    response_mode: \"direct_post.jwt\",\n                    nonce,\n                    dcql_query,\n                    client_metadata: {\n                        jwks: {\n                            keys: [\n                                await this.encryptionService.getEncryptionPublicKey(\n                                    session.tenantId,\n                                ),\n                            ],\n                        },\n                        vp_formats: {\n                            mso_mdoc: {\n                                alg: [\"ES256\"],\n                            },\n                            \"dc+sd-jwt\": {\n                                \"kb-jwt_alg_values\": [\"ES256\"],\n                                \"sd-jwt_alg_values\": [\"ES256\"],\n                            },\n                        },\n                        authorization_encrypted_response_alg: \"ECDH-ES\",\n                        authorization_encrypted_response_enc: \"A128GCM\",\n                        client_name:\n                            this.configService.getOrThrow(\"RP_NAME\"),\n                        response_types_supported: [\"vp_token\"],\n                    },\n                    state: session.id,\n                    aud: host,\n                    exp: Math.floor(Date.now() / 1000) + lifeTime,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    verifier_attestations: regCert\n                        ? [\n                              {\n                                  format: \"jwt\",\n                                  data: regCert,\n                              },\n                          ]\n                        : undefined,\n                },\n                header: {\n                    typ: \"oauth-authz-req+jwt\",\n                },\n            };\n\n            const accessCert = await this.cryptoService.getCertChain(\n                \"access\",\n                session.tenantId,\n            );\n\n            const header = {\n                ...request.header,\n                alg: \"ES256\",\n                x5c: accessCert,\n            };\n\n            const keyId = await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                \"access\",\n            );\n            const signedJwt = await this.cryptoService.signJwt(\n                header,\n                request.payload,\n                session.tenantId,\n                keyId,\n            );\n\n            this.sessionLogger.logSession(\n                logContext,\n                \"Authorization request created successfully\",\n                {\n                    signedJwtLength: signedJwt.length,\n                    certificateChainLength: accessCert?.length || 0,\n                },\n            );\n\n            return signedJwt;\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                requestId: session.requestId,\n                action: \"create_authorization_request\",\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Creates a request for the OID4VP flow.\n     * @param requestId\n     * @param values\n     * @param tenantId\n     * @returns\n     */\n    async createRequest(\n        requestId: string,\n        values: PresentationRequestOptions,\n        tenantId: string,\n    ): Promise {\n        const presentationConfig =\n            await this.presentationsService.getPresentationConfig(\n                requestId,\n                tenantId,\n            );\n        const fresh = values.session === undefined;\n        values.session = values.session || v4();\n\n        const hostname = new URL(\n            this.configService.getOrThrow(\"PUBLIC_URL\"),\n        ).hostname;\n        const params = {\n            client_id: `x509_san_dns:${hostname}`,\n            request_uri: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${values.session}/oid4vp`,\n        };\n        const queryString = Object.entries(params)\n            .map(\n                ([key, value]) =>\n                    `${encodeURIComponent(key)}=${encodeURIComponent(value)}`,\n            )\n            .join(\"&\");\n\n        const expiresAt = new Date(\n            Date.now() + (presentationConfig.lifeTime ?? 300) * 1000,\n        );\n\n        if (fresh) {\n            await this.sessionService.create({\n                id: values.session,\n                claimsWebhook: values.webhook ?? presentationConfig.webhook,\n                tenantId,\n                requestId,\n                requestUrl: `openid4vp://?${queryString}`,\n                expiresAt,\n            });\n        } else {\n            await this.sessionService.add(values.session, {\n                claimsWebhook: values.webhook ?? presentationConfig.webhook,\n                requestUrl: `openid4vp://?${queryString}`,\n                expiresAt,\n            });\n        }\n\n        return {\n            uri: queryString,\n            session: values.session,\n        };\n    }\n\n    /**\n     * Processes the response from the wallet.\n     * @param body\n     * @param tenantId\n     */\n    async getResponse(body: AuthorizationResponse, session: Session) {\n        const res = await this.encryptionService.decryptJwe(\n            body.response,\n            session.tenantId,\n        );\n        if (!res.state) {\n            throw new ConflictException(\"No state found in the response\");\n        }\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: res.state,\n            tenantId: session.tenantId,\n            flowType: \"OID4VP\",\n            stage: \"response_processing\",\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            action: \"process_presentation_response\",\n            hasWebhook: !!session.claimsWebhook,\n        });\n\n        try {\n            //TODO: load required fields from the config\n            const credentials = await this.presentationsService.parseResponse(\n                res,\n                [],\n                session.vp_nonce as string,\n            );\n\n            this.sessionLogger.logCredentialVerification(\n                logContext,\n                !!credentials && credentials.length > 0,\n                {\n                    credentialCount: credentials?.length || 0,\n                    nonce: session.vp_nonce,\n                },\n            );\n\n            //tell the auth server the result of the session.\n            await this.sessionService.add(res.state, {\n                //TODO: not clear why it has to be any\n                credentials: credentials as any,\n            });\n            // if there a a webook URL, send the response there\n            //TODO: move to dedicated service to reuse it also in the oid4vci flow.\n            if (session.claimsWebhook) {\n                await this.webhookService.sendWebhook(\n                    session,\n                    logContext,\n                    credentials,\n                    false,\n                );\n            }\n\n            this.sessionLogger.logFlowComplete(logContext, {\n                credentialCount: credentials?.length || 0,\n                webhookSent: !!session.claimsWebhook,\n            });\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                action: \"process_presentation_response\",\n            });\n            throw error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParResponseDto.html":{"url":"classes/ParResponseDto.html","title":"class - ParResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/par-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expires_in\n                            \n                            \n                                request_uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The expiration time for the request URI in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:5\n                        \n                    \n\n            \n                \n                    The request URI for the Pushed Authorization Request.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ParResponseDto {\n    /**\n     * The request URI for the Pushed Authorization Request.\n     */\n    request_uri: string;\n    /**\n     * The expiration time for the request URI in seconds.\n     */\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html","title":"interface - ParsedAccessTokenAuthorizationCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenAuthorizationCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                        \n                                            grantType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:     AuthorizationCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AuthorizationCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from \"@openid4vc/oauth2\";\nimport type { Request, Response } from \"express\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\nimport { Oid4vpService } from \"../../verifier/oid4vp/oid4vp.service\";\nimport { IssuanceService } from \"../issuance/issuance.service\";\nimport { getHeadersFromRequest } from \"../oid4vci/util\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow(\"PUBLIC_URL\") +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: [\"ES256\"],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        \"request_uri not found or not provided in the request\",\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                \"request_uri not found or not provided in the request\",\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow(\"PUBLIC_URL\")}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        /*         const session = await this.sessionService.getBy({\n            authorization_code: body.code ?? body['pre-authorized_code'],\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        } */\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.id}`,\n            signer: {\n                method: \"jwk\",\n                alg: \"ES256\",\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    \"jwk\",\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: \"wallet\", // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest(\"pid\", { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: \"insufficient_authorization\",\n            auth_session,\n            presentation,\n            error_description:\n                \"Presentation of credential required before issuance\",\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    \"Session does not have valid credentials for issuance\",\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                issuanceId,\n                session.tenantId,\n            );\n\n        // Use the new authentication configuration structure\n        const authConfig = issuanceConfig.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                \"No authentication configuration found for issuance config\",\n            );\n        }\n\n        switch (authConfig.method) {\n            case \"presentationDuringIssuance\": {\n                // OID4VP flow - credential presentation required\n                const webhook = issuanceConfig.claimsWebhook;\n                const response = await this.parseChallengeRequest(\n                    body,\n                    session.tenantId,\n                    webhook,\n                );\n                res.status(400).send(response);\n                break;\n            }\n            case \"auth\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            case \"none\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            default:\n                throw new Error(\n                    `Unsupported authentication method: ${(authConfig as any).method}`,\n                );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html","title":"interface - ParsedAccessTokenPreAuthorizedCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenPreAuthorizedCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            grantType\n                                        \n                                \n                                \n                                        \n                                            preAuthorizedCode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            txCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:     PreAuthorizedCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PreAuthorizedCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        preAuthorizedCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        preAuthorizedCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        txCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        txCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from \"@openid4vc/oauth2\";\nimport type { Request, Response } from \"express\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\nimport { Oid4vpService } from \"../../verifier/oid4vp/oid4vp.service\";\nimport { IssuanceService } from \"../issuance/issuance.service\";\nimport { getHeadersFromRequest } from \"../oid4vci/util\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow(\"PUBLIC_URL\") +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: [\"ES256\"],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        \"request_uri not found or not provided in the request\",\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                \"request_uri not found or not provided in the request\",\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow(\"PUBLIC_URL\")}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        /*         const session = await this.sessionService.getBy({\n            authorization_code: body.code ?? body['pre-authorized_code'],\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        } */\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.id}`,\n            signer: {\n                method: \"jwk\",\n                alg: \"ES256\",\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    \"jwk\",\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: \"wallet\", // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest(\"pid\", { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: \"insufficient_authorization\",\n            auth_session,\n            presentation,\n            error_description:\n                \"Presentation of credential required before issuance\",\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    \"Session does not have valid credentials for issuance\",\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                issuanceId,\n                session.tenantId,\n            );\n\n        // Use the new authentication configuration structure\n        const authConfig = issuanceConfig.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                \"No authentication configuration found for issuance config\",\n            );\n        }\n\n        switch (authConfig.method) {\n            case \"presentationDuringIssuance\": {\n                // OID4VP flow - credential presentation required\n                const webhook = issuanceConfig.claimsWebhook;\n                const response = await this.parseChallengeRequest(\n                    body,\n                    session.tenantId,\n                    webhook,\n                );\n                res.status(400).send(response);\n                break;\n            }\n            case \"auth\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            case \"none\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            default:\n                throw new Error(\n                    `Unsupported authentication method: ${(authConfig as any).method}`,\n                );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PolicyCredential.html":{"url":"classes/PolicyCredential.html","title":"class - PolicyCredential","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PolicyCredential\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.ts\n        \n\n\n            \n                Description\n            \n            \n                attestationBased\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                claims\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                credential_sets\n                            \n                            \n                                    \n                                    \n                                credentials\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credential_sets\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.ts:56\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsEnum,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\nexport enum PolicyType {\n    NONE = \"none\",\n    ALLOW_LIST = \"allowList\",\n    ROOT_OF_TRUST = \"rootOfTrust\",\n    ATTESTATION_BASED = \"attestationBased\",\n}\n\nexport class EmbeddedDisclosurePolicy {\n    @IsDefined()\n    @IsEnum(PolicyType)\n    policy!: PolicyType;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ALLOW_LIST;\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ROOT_OF_TRUST;\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.NONE;\n}\n\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    claims?: any[];\n\n    @IsDefined()\n    @IsArray()\n    credentials!: any[];\n\n    @IsOptional()\n    @IsArray()\n    credential_sets?: any[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ATTESTATION_BASED;\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n// Convenience union type if you use it elsewhere\nexport type AnyPolicy =\n    | NoneTrustPolicy\n    | AllowListPolicy\n    | RootOfTrustPolicy\n    | AttestationBasedPolicy;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationAttachment.html":{"url":"classes/PresentationAttachment.html","title":"class - PresentationAttachment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationAttachment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Attached attestations\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credential_ids\n                            \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credential_ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        format\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, CreateDateColumn, Entity, UpdateDateColumn } from \"typeorm\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsNotEmpty()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @IsObject()\n    //TODO: define the structure of the DCQL query\n    dcql_query: any;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @IsObject()\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PresentationConfig.html":{"url":"entities/PresentationConfig.html","title":"entity - PresentationConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PresentationConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a configuration for a Verifiable Presentation (VP) request.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                attached\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                dcql_query\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lifeTime\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                registrationCert\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        attached\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PresentationAttachment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested()@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:110\n                        \n                    \n\n            \n                \n                    Attestation that should be attached\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:95\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        dcql_query\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:73\n                        \n                    \n\n            \n                \n                    The DCQL query to be used for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:57\n                        \n                    \n\n            \n                \n                    Description of the presentation configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:42\n                        \n                    \n\n            \n                \n                    Unique identifier for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lifeTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@Column('int', {default: 300})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:65\n                        \n                    \n\n            \n                \n                    Lifetime how long the presentation request is valid after creation, in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        registrationCert\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistrationCertificateRequest\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsObject()@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:80\n                        \n                    \n\n            \n                \n                    The registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:49\n                        \n                    \n\n            \n                \n                    The tenant ID for which the VP request is made.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:101\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsOptional()@IsObject()@Validate(WebhookConfig)@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:89\n                        \n                    \n\n            \n                \n                    Optional webhook URL to receive the response.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, CreateDateColumn, Entity, UpdateDateColumn } from \"typeorm\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsNotEmpty()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @IsObject()\n    //TODO: define the structure of the DCQL query\n    dcql_query: any;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @IsObject()\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationConfigCreateDto.html":{"url":"classes/PresentationConfigCreateDto.html","title":"class - PresentationConfigCreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationConfigCreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/presentation-config-create.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(PresentationConfig, [\n    \"tenantId\",\n    \"createdAt\",\n    \"updatedAt\",\n] as const)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { PresentationConfig } from \"../entities/presentation-config.entity\";\n\nexport class PresentationConfigCreateDto extends OmitType(PresentationConfig, [\n    \"tenantId\",\n    \"createdAt\",\n    \"updatedAt\",\n] as const) {\n    // Define the properties for the presentation config create DTO\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationDuringIssuanceConfig.html":{"url":"classes/PresentationDuringIssuanceConfig.html","title":"class - PresentationDuringIssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationDuringIssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for authentication method 'presentationDuringIssuance'\nUsed for OID4VP flow where a credential presentation request is sent\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:100\n                        \n                    \n\n            \n                \n                    Link to the presentation configuration that is relevant for the issuance process\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUrl,\n    Validate,\n    ValidateNested,\n    ValidationArguments,\n    ValidatorConstraint,\n    ValidatorConstraintInterface,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Custom validator to ensure config type matches the authentication method\n */\n@ValidatorConstraint({ name: \"authConfigValidator\", async: false })\nexport class AuthConfigValidator implements ValidatorConstraintInterface {\n    validate(config: any, args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === \"none\") {\n            // For 'none' method, config should be undefined\n            return config === undefined;\n        }\n\n        if (obj.method === \"auth\") {\n            // For 'auth' method, config must be present and have 'url' property\n            return (\n                config &&\n                typeof config === \"object\" &&\n                typeof config.url === \"string\"\n            );\n        }\n\n        if (obj.method === \"presentationDuringIssuance\") {\n            // For 'presentationDuringIssuance' method, config must be present and have 'presentation' property\n            return (\n                config &&\n                typeof config === \"object\" &&\n                typeof config.type === \"string\"\n            );\n        }\n\n        return false;\n    }\n\n    defaultMessage(args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === \"none\") {\n            return 'config must be undefined when method is \"none\"';\n        }\n\n        if (obj.method === \"auth\") {\n            return 'config must be of type AuthenticationUrlConfig when method is \"auth\"';\n        }\n\n        if (obj.method === \"presentationDuringIssuance\") {\n            return 'config must be of type PresentationDuringIssuanceConfig when method is \"presentationDuringIssuance\"';\n        }\n\n        return \"config type does not match the specified method\";\n    }\n}\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsUrl()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\n/**\n * Base class for authentication configurations\n * Determines which OpenID4VC flow to use for the issuance process\n */\nexport class AuthenticationConfigDto {\n    /**\n     * The authentication method to use:\n     * - 'none': Pre-authorized code flow (no user authentication)\n     * - 'auth': OID4VCI authorized code flow (user redirect for authentication)\n     * - 'presentationDuringIssuance': OID4VP flow (credential presentation required)\n     */\n    @IsIn([\"none\", \"auth\", \"presentationDuringIssuance\"])\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n\n    /**\n     * Configuration specific to the selected authentication method\n     * - For 'none': no config needed (undefined) - uses pre-authorized code flow\n     * - For 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\n     * - For 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n     */\n    @IsOptional()\n    @Validate(AuthConfigValidator)\n    config?: AuthenticationUrlConfig | PresentationDuringIssuanceConfig;\n}\n\n/**\n * Union type for authentication configurations\n * Each method corresponds to a specific OpenID4VC flow\n */\nexport type AuthenticationConfig =\n    | { method: \"none\" } // Pre-authorized code flow\n    | { method: \"auth\"; config: AuthenticationUrlConfig } // OID4VCI authorized code flow\n    | {\n          method: \"presentationDuringIssuance\"; // OID4VP flow\n          config: PresentationDuringIssuanceConfig;\n      };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PresentationManagementController.html":{"url":"controllers/PresentationManagementController.html","title":"controller - PresentationManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PresentationManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                presentation-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                configuration\n                            \n                            \n                                    \n                                deleteConfiguration\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                            \n                                    \n                                storePresentationConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        configuration\n                        \n                    \n                \n            \n            \n                \n                        \n                    configuration(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:112\n                        \n                    \n\n\n            \n                \n                        Returns the presentation request configurations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:138\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation request configuration by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: PresentationRequest, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@UseGuards(JwtAuthGuard)@ApiSecurity('oauth2')@ApiBody({type: PresentationRequest, examples: undefined})@Post('request')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:80\n                        \n                    \n\n\n            \n                \n                        Create an presentation request that can be sent to the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            PresentationRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    storePresentationConfig(config: PresentationConfigCreateDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:122\n                        \n                    \n\n\n            \n                \n                        Store a presentation request configuration. If it already exists, it will be updated.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            PresentationConfigCreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Res,\n    UseGuards,\n} from \"@nestjs/common\";\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from \"@nestjs/swagger\";\nimport { Response } from \"express\";\nimport * as QRCode from \"qrcode\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { OfferResponse } from \"../../issuer/oid4vci/dto/offer-request.dto\";\nimport {\n    PresentationRequest,\n    ResponseType,\n} from \"../oid4vp/dto/presentation-request.dto\";\nimport { Oid4vpService } from \"../oid4vp/oid4vp.service\";\nimport { PresentationConfigCreateDto } from \"./dto/presentation-config-create.dto\";\nimport { PresentationConfig } from \"./entities/presentation-config.entity\";\nimport { PresentationsService } from \"./presentations.service\";\n\n@ApiTags(\"Presentation management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\", [\"api:read\", \"api:write\"])\n@Controller(\"presentation-management\")\nexport class PresentationManagementController {\n    constructor(\n        private readonly presentationsService: PresentationsService,\n        private readonly oid4vpService: Oid4vpService,\n    ) {}\n\n    /**\n     * Create an presentation request that can be sent to the user\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: \"JSON response\",\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            \"application/json\": { schema: { type: \"object\" } },\n            \"image/png\": { schema: { type: \"string\", format: \"binary\" } },\n        },\n    })\n    @ApiProduces(\"application/json\", \"image/png\")\n    @UseGuards(JwtAuthGuard)\n    @ApiSecurity(\"oauth2\")\n    @ApiBody({\n        type: PresentationRequest,\n        examples: {\n            qrcode: {\n                summary: \"QR-Code Example\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    requestId: \"pid\",\n                },\n            },\n            uri: {\n                summary: \"URI\",\n                value: {\n                    response_type: ResponseType.URI,\n                    requestId: \"pid\",\n                },\n            },\n        },\n    })\n    @Post(\"request\")\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: PresentationRequest,\n        @Token() user: TokenPayload,\n    ) {\n        const values = await this.oid4vpService.createRequest(\n            body.requestId,\n            {\n                webhook: body.webhook,\n            },\n            user.sub,\n        );\n        values.uri = `openid4vp://?${values.uri}`;\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader(\"Content-Type\", \"image/png\");\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n\n    /**\n     * Returns the presentation request configurations.\n     * @returns\n     */\n    @Get()\n    configuration(@Token() user: TokenPayload) {\n        return this.presentationsService.getPresentationConfigs(user.sub);\n    }\n\n    /**\n     * Store a presentation request configuration. If it already exists, it will be updated.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storePresentationConfig(\n        @Body() config: PresentationConfigCreateDto,\n        @Token() user: TokenPayload,\n    ) {\n        return this.presentationsService.storePresentationConfig(\n            user.sub,\n            config,\n        );\n    }\n\n    /**\n     * Deletes a presentation request configuration by its ID.\n     * @param id\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteConfiguration(@Param(\"id\") id: string, @Token() user: TokenPayload) {\n        return this.presentationsService.deletePresentationConfig(id, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationRequest.html":{"url":"classes/PresentationRequest.html","title":"class - PresentationRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the presentation request containing the response type and request ID.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                requestId\n                            \n                            \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:32\n                        \n                    \n\n            \n                \n                    Identifier of the presentation configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:26\n                        \n                    \n\n            \n                \n                    The type of response expected from the presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:40\n                        \n                    \n\n            \n                \n                    Webhook configuration to receive the response.\nIf not provided, the configured webhook from the configuration will be used.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsObject, IsOptional, IsString } from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Enum for the type of response expected from the presentation request.\n */\nexport enum ResponseType {\n    /**\n     * Response type indicating a QR code will be returned.\n     */\n    QRCode = \"qrcode\",\n    /**\n     * Response type indicating a URI will be returned.\n     */\n    URI = \"uri\",\n}\n\n/**\n * DTO for the presentation request containing the response type and request ID.\n */\nexport class PresentationRequest {\n    /**\n     * The type of response expected from the presentation request.\n     */\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Identifier of the presentation configuration\n     */\n    @IsString()\n    requestId: string;\n\n    /**\n     * Webhook configuration to receive the response.\n     * If not provided, the configured webhook from the configuration will be used.\n     */\n    @IsObject()\n    @IsOptional()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PresentationRequestOptions.html":{"url":"interfaces/PresentationRequestOptions.html","title":"interface - PresentationRequestOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PresentationRequestOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PresentationRequestOptions DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            session\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            webhook\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        session\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        session:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional session identifier for tracking the request.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        webhook\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        webhook:         WebhookConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WebhookConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional webhook configuration to receive the response.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * PresentationRequestOptions DTO\n */\nexport interface PresentationRequestOptions {\n    /**\n     * Optional session identifier for tracking the request.\n     */\n    session?: string;\n    /**\n     * Optional webhook configuration to receive the response.\n     */\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PresentationsModule.html":{"url":"modules/PresentationsModule.html","title":"module - PresentationsModule","body":"\n                   \n\n\n\n\n    Modules\n    PresentationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_imports\n\n\n\n\nResolverModule\n\nResolverModule\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/presentations/presentations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PresentationManagementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ResolverModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { forwardRef, Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { Oid4vpModule } from \"../oid4vp/oid4vp.module\";\nimport { ResolverModule } from \"../resolver/resolver.module\";\nimport { PresentationConfig } from \"./entities/presentation-config.entity\";\nimport { PresentationManagementController } from \"./presentations.controller\";\nimport { PresentationsService } from \"./presentations.service\";\n\n@Module({\n    imports: [\n        ResolverModule,\n        HttpModule,\n        forwardRef(() => Oid4vpModule),\n        TypeOrmModule.forFeature([PresentationConfig]),\n    ],\n    controllers: [PresentationManagementController],\n    providers: [PresentationsService],\n    exports: [PresentationsService],\n})\nexport class PresentationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PresentationsService.html":{"url":"injectables/PresentationsService.html","title":"injectable - PresentationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PresentationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                kbVerifier\n                            \n                            \n                                sdjwtInstance\n                            \n                            \n                                    Private\n                                statusListFetcher\n                            \n                            \n                                verifier\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deletePresentationConfig\n                            \n                            \n                                getPresentationConfig\n                            \n                            \n                                getPresentationConfigs\n                            \n                            \n                                    Private\n                                    Async\n                                import\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                parseResponse\n                            \n                            \n                                storePresentationConfig\n                            \n                            \n                                    Public\n                                storeRCID\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, resolverService: ResolverService, vpRequestRepository: Repository, configService: ConfigService, logger: PinoLogger)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/presentations/presentations.service.ts:29\n                            \n                        \n\n                \n                    \n                            Constructor for the PresentationsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of HttpService for making HTTP requests.\n\n\n                                                        \n                                                \n                                                \n                                                        resolverService\n                                                  \n                                                        \n                                                                        ResolverService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ResolverService for resolving DID documents.\n\n\n                                                        \n                                                \n                                                \n                                                        vpRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for managing VP request configurations.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deletePresentationConfig\n                        \n                    \n                \n            \n            \n                \ndeletePresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:172\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to delete.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to delete the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the deletion is complete.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPresentationConfig\n                        \n                    \n                \n            \n            \n                \ngetPresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:182\n                        \n                    \n\n\n            \n                \n                        Retrieves a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the requested PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPresentationConfigs\n                        \n                    \n                \n            \n            \n                \ngetPresentationConfigs(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:143\n                        \n                    \n\n\n            \n                \n                        Retrieves all presentation configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve configurations.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of PresentationConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Imports presentation configurations from a predefined directory structure.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Imports presentation configurations from a predefined directory structure.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Initializes the SDJwtVcInstance with the necessary configurations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseResponse\n                        \n                    \n                \n            \n            \n                \nparseResponse(res: AuthResponse, requiredFields: string[], keyBindingNonce: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:271\n                        \n                    \n\n\n            \n                \n                        Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            AuthResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requiredFields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyBindingNonce\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \nstorePresentationConfig(tenantId: string, vprequest: PresentationConfigCreateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:156\n                        \n                    \n\n\n            \n                \n                        Stores a new presentation configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the configuration.\n\n\n                                            \n                                        \n                                        \n                                                vprequest\n                                            \n                                                            PresentationConfigCreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe PresentationConfig entity to store.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        storeRCID\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeRCID(registrationCertId: string, id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:203\n                        \n                    \n\n\n            \n                \n                        Stores the new registration certificate.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registrationCertId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the registration certificate to store.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to update.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the registration certificate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kbVerifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KbVerifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:254\n                        \n                    \n\n            \n                \n                    Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                            \n                                            \n                                                    signature\n                                            \n                                            \n                                                    payload\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sdjwtInstance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SDJwtVcInstance\n\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:29\n                        \n                    \n\n            \n                \n                    Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        statusListFetcher\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:239\n                        \n                    \n\n            \n                \n                    Fetch the status list from the uri.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    uri\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Verifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:216\n                        \n                    \n\n            \n                \n                    Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                                    \n                                                            \nThe data part of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                            \n                                                    signature\n                                                    \n                                                            \nThe signature of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport { ConflictException, Injectable, OnModuleInit } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { digest, ES256 } from \"@sd-jwt/crypto-nodejs\";\nimport { SDJwtVcInstance } from \"@sd-jwt/sd-jwt-vc\";\nimport { KbVerifier, Verifier } from \"@sd-jwt/types\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { importJWK, JWK, JWTPayload, jwtVerify } from \"jose\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { ResolverService } from \"../resolver/resolver.service\";\nimport { AuthResponse } from \"./dto/auth-response.dto\";\nimport { PresentationConfigCreateDto } from \"./dto/presentation-config-create.dto\";\nimport { PresentationConfig } from \"./entities/presentation-config.entity\";\n\n/**\n * Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n */\n@Injectable()\nexport class PresentationsService implements OnModuleInit {\n    /**\n     * Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n     */\n    sdjwtInstance: SDJwtVcInstance;\n\n    /**\n     * Constructor for the PresentationsService.\n     * @param httpService - Instance of HttpService for making HTTP requests.\n     * @param resolverService - Instance of ResolverService for resolving DID documents.\n     * @param vpRequestRepository - Repository for managing VP request configurations.\n     */\n    constructor(\n        private httpService: HttpService,\n        private resolverService: ResolverService,\n        @InjectRepository(PresentationConfig)\n        private vpRequestRepository: Repository,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n    ) {}\n\n    /**\n     * Initializes the SDJwtVcInstance with the necessary configurations.\n     */\n    onModuleInit() {\n        this.sdjwtInstance = new SDJwtVcInstance({\n            hasher: digest,\n            verifier: this.verifier.bind(this),\n            kbVerifier: this.kbVerifier.bind(this),\n            statusListFetcher: this.statusListFetcher.bind(this),\n        });\n    }\n\n    /**\n     * Imports presentation configurations from a predefined directory structure.\n     */\n    async onApplicationBootstrap() {\n        await this.import();\n    }\n\n    /**\n     * Imports presentation configurations from a predefined directory structure.\n     */\n    private async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"presentation\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    const payload = JSON.parse(\n                        readFileSync(join(path, file), \"utf8\"),\n                    );\n\n                    const id = file.replace(\".json\", \"\");\n                    payload.id = id;\n                    const presentationExists = await this.getPresentationConfig(\n                        id,\n                        tenant.name,\n                    ).catch(() => false);\n                    if (presentationExists && !force) {\n                        continue; // Skip if config already exists and force is not set\n                    }\n\n                    // Validate the payload against PresentationConfig\n                    const config = plainToClass(\n                        PresentationConfigCreateDto,\n                        payload,\n                    );\n                    const validationErrors = await validate(config, {\n                        whitelist: true,\n                        forbidUnknownValues: false, // avoid false positives on plain objects\n                        forbidNonWhitelisted: false,\n                        stopAtFirstError: false,\n                    });\n\n                    if (validationErrors.length > 0) {\n                        this.logger.error(\n                            {\n                                event: \"ValidationError\",\n                                file,\n                                tenant: tenant.name,\n                                errors: validationErrors.map((error) => ({\n                                    property: error.property,\n                                    constraints: error.constraints,\n                                    value: error.value,\n                                })),\n                            },\n                            `Validation failed for presentation config ${file} in tenant ${tenant.name}`,\n                        );\n                        continue; // Skip this invalid config\n                    }\n\n                    await this.storePresentationConfig(tenant.name, config);\n                    counter++;\n                }\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `${counter} presentation configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    /**\n     * Retrieves all presentation configurations for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve configurations.\n     * @returns A promise that resolves to an array of PresentationConfig entities.\n     */\n    getPresentationConfigs(tenantId: string): Promise {\n        return this.vpRequestRepository.find({\n            where: { tenantId },\n            order: { createdAt: \"DESC\" },\n        });\n    }\n\n    /**\n     * Stores a new presentation configuration.\n     * @param tenantId - The ID of the tenant for which to store the configuration.\n     * @param vprequest - The PresentationConfig entity to store.\n     * @returns A promise that resolves to the stored PresentationConfig entity.\n     */\n    storePresentationConfig(\n        tenantId: string,\n        vprequest: PresentationConfigCreateDto,\n    ) {\n        return this.vpRequestRepository.save({\n            ...vprequest,\n            tenantId,\n        });\n    }\n\n    /**\n     * Deletes a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to delete.\n     * @param tenantId - The ID of the tenant for which to delete the configuration.\n     * @returns A promise that resolves when the deletion is complete.\n     */\n    deletePresentationConfig(id: string, tenantId: string) {\n        return this.vpRequestRepository.delete({ id, tenantId });\n    }\n\n    /**\n     * Retrieves a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to retrieve.\n     * @param tenantId - The ID of the tenant for which to retrieve the configuration.\n     * @returns A promise that resolves to the requested PresentationConfig entity.\n     */\n    getPresentationConfig(\n        id: string,\n        tenantId: string,\n    ): Promise {\n        return this.vpRequestRepository\n            .findOneByOrFail({\n                id,\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(`Request ID ${id} not found`);\n            });\n    }\n\n    /**\n     * Stores the new registration certificate.\n     * @param registrationCertId - The ID of the registration certificate to store.\n     * @param id - The ID of the presentation configuration to update.\n     * @param tenantId - The ID of the tenant for which to store the registration certificate.\n     * @returns\n     */\n    public storeRCID(registrationCertId: string, id: string, tenantId: string) {\n        return this.vpRequestRepository.update(\n            { id, tenantId },\n            { registrationCert: { id: registrationCertId } },\n        );\n    }\n\n    /**\n     * Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n     * @param data - The data part of the SD-JWT-VC.\n     * @param signature - The signature of the SD-JWT-VC.\n     * @returns\n     */\n    verifier: Verifier = async (data, signature) => {\n        const instance = new SDJwtVcInstance({\n            hasher: digest,\n        });\n        const decodedVC = await instance.decode(`${data}.${signature}`);\n        const payload = decodedVC.jwt?.payload as JWTPayload;\n        const header = decodedVC.jwt?.header as JWK;\n        const publicKey = await this.resolverService.resolvePublicKey(\n            payload,\n            header,\n        );\n        const verify = await ES256.getVerifier(publicKey);\n        return verify(data, signature).catch((err) => {\n            console.log(err);\n            return false;\n        });\n    };\n\n    /**\n     * Fetch the status list from the uri.\n     * @param uri\n     * @returns\n     */\n    private statusListFetcher: (uri: string) => Promise = (\n        uri: string,\n    ) => {\n        return firstValueFrom(this.httpService.get(uri)).then(\n            (res) => res.data,\n        );\n    };\n\n    /**\n     * Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n     * @param data\n     * @param signature\n     * @param payload\n     * @returns\n     */\n    private kbVerifier: KbVerifier = async (data, signature, payload) => {\n        if (!payload.cnf) {\n            throw new Error(\"No cnf found in the payload\");\n        }\n        const key = await importJWK(payload.cnf.jwk as JWK, \"ES256\");\n        return jwtVerify(`${data}.${signature}`, key).then(\n            () => true,\n            () => false,\n        );\n    };\n\n    /**\n     * Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n     * @param res\n     * @param requiredFields\n     * @returns\n     */\n    parseResponse(\n        res: AuthResponse,\n        requiredFields: string[],\n        keyBindingNonce: string,\n    ) {\n        const attestations = Object.keys(res.vp_token);\n        const att = attestations.map((att) =>\n            this.sdjwtInstance\n                .verify(res.vp_token[att], {\n                    requiredClaimKeys: requiredFields,\n                    keyBindingNonce,\n                })\n                .then(\n                    (result) => {\n                        return {\n                            id: att,\n                            values: {\n                                ...result.payload,\n                                cnf: undefined, // remove cnf for simplicity\n                                status: undefined, // remove status for simplicity\n                            },\n                        };\n                    },\n                    /* (err) => {\n                        throw new Error\n                        //(console.log(err);\n                        return {\n                            id: att,\n                            error: err.message,\n                        };\n                    }, */\n                ),\n        );\n        return Promise.all(att);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RegistrarEntity.html":{"url":"entities/RegistrarEntity.html","title":"entity - RegistrarEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RegistrarEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/entities/registrar.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accessCertificateId\n                            \n                            \n                                    \n                                relyingPartyId\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accessCertificateId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        relyingPartyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from \"typeorm\";\n\n@Entity()\nexport class RegistrarEntity {\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    @Column(\"varchar\")\n    relyingPartyId: string;\n\n    @Column(\"varchar\")\n    accessCertificateId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RegistrarModule.html":{"url":"modules/RegistrarModule.html","title":"module - RegistrarModule","body":"\n                   \n\n\n\n\n    Modules\n    RegistrarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/registrar/registrar.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            RegistrarModule is responsible for managing the registrar service.\nIt provides the RegistrarService and imports necessary modules.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            PresentationsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport * as Joi from \"joi\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { PresentationsModule } from \"../verifier/presentations/presentations.module\";\nimport { RegistrarEntity } from \"./entities/registrar.entity\";\nimport { RegistrarService } from \"./registrar.service\";\n\n/**\n * Validation schema for the registrar module.\n * Defines the required environment variables and their types.\n */\nexport const REGISTRAR_VALIDATION_SCHEMA = {\n    REGISTRAR_URL: Joi.string(),\n    REGISTRAR_OIDC_URL: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_ID: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_SECRET: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n};\n\n/**\n * RegistrarModule is responsible for managing the registrar service.\n * It provides the RegistrarService and imports necessary modules.\n */\n@Module({\n    imports: [\n        CryptoModule,\n        PresentationsModule,\n        TypeOrmModule.forFeature([RegistrarEntity]),\n    ],\n    providers: [RegistrarService],\n    exports: [RegistrarService],\n})\nexport class RegistrarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RegistrarService.html":{"url":"injectables/RegistrarService.html","title":"injectable - RegistrarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RegistrarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar.service.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrarService is responsible for managing the interaction with the registrar,\nincluding adding relying parties, access certificates, and registration certificates.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                accessToken\n                            \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                oauth2Client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                addAccessCertificate\n                            \n                            \n                                    Async\n                                addRegistrationCertificate\n                            \n                            \n                                addRp\n                            \n                            \n                                    Private\n                                getExistingRp\n                            \n                            \n                                isEnabled\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Async\n                                refreshAccessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, presentationsService: PresentationsService, registrarRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/registrar/registrar.service.ts:40\n                            \n                        \n\n                \n                    \n                            Constructor for the RegistrarService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ConfigService for accessing configuration values.\n\n\n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of CryptoService for cryptographic operations.\n\n\n                                                        \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of PresentationsService for handling presentations.\n\n\n                                                        \n                                                \n                                                \n                                                        registrarRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        addAccessCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addAccessCertificate(tenantId: string, relyingPartyId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:190\n                        \n                    \n\n\n            \n                \n                        Add a new access certificate to the registrar.\nThis is only needed once, when the access certificate is created.\nIf the access certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                relyingPartyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addRegistrationCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addRegistrationCertificate(req: RegistrationCertificateRequest, dcql_query: any, requestId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:232\n                        \n                    \n\n\n            \n                \n                        Add a new registration certificate to the registrar.\nThis is only needed once, when the registration certificate is created.\nIf the registration certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RegistrationCertificateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dcql_query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addRp\n                        \n                    \n                \n            \n            \n                \naddRp(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:150\n                        \n                    \n\n\n            \n                \n                        Adds a new relying party to the registrar.\nThis is only needed once, when the relying party is created.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getExistingRp\n                        \n                    \n                \n            \n            \n                \n                        \n                    getExistingRp(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:173\n                        \n                    \n\n\n            \n                \n                        Stores the existing relying party ID based on the name.\nThis is used when the relying party already exists in the registrar.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the relying party.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The ID of the existing relying party.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnabled\n                        \n                    \n                \n            \n            \n                \nisEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Checks if the registrar service is enabled based on the configuration.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the registrar service is enabled, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:100\n                        \n                    \n\n\n            \n                \n                        This function is called when the application starts.\nIt will refresh the access token for the registrar.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Initializes the OAuth2 client and registrar client with the necessary configurations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:111\n                        \n                    \n\n\n            \n                \n                        This function is called when a tenant is initialized.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshAccessToken()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:133\n                        \n                    \n\n\n            \n                \n                        Refreshes the access token for the registrar using client credentials.\nThis method is called periodically to ensure the access token is valid.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:40\n                        \n                    \n\n            \n                \n                    Access token for authenticating requests to the registrar.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:36\n                        \n                    \n\n            \n                \n                    Client for interacting with the registrar API.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauth2Client\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:32\n                        \n                    \n\n            \n                \n                    OAuth2 client for interacting with the OIDC provider.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { OAuth2Client } from \"@badgateway/oauth2-client\";\nimport {\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { RegistrationCertificateRequest } from \"../verifier/presentations/dto/vp-request.dto\";\nimport { PresentationsService } from \"../verifier/presentations/presentations.service\";\nimport { RegistrarEntity } from \"./entities/registrar.entity\";\nimport {\n    accessCertificateControllerRegister,\n    registrationCertificateControllerAll,\n    registrationCertificateControllerRegister,\n    relyingPartyControllerFindAll,\n    relyingPartyControllerRegister,\n} from \"./generated\";\nimport { client } from \"./generated/client.gen\";\n\n/**\n * RegistrarService is responsible for managing the interaction with the registrar,\n * including adding relying parties, access certificates, and registration certificates.\n */\n@Injectable()\nexport class RegistrarService implements OnApplicationBootstrap, OnModuleInit {\n    /**\n     * OAuth2 client for interacting with the OIDC provider.\n     */\n    private oauth2Client: OAuth2Client;\n    /**\n     * Client for interacting with the registrar API.\n     */\n    private client: typeof client;\n    /**\n     * Access token for authenticating requests to the registrar.\n     */\n    private accessToken: string;\n\n    /**\n     * Constructor for the RegistrarService.\n     * @param configService - Instance of ConfigService for accessing configuration values.\n     * @param cryptoService - Instance of CryptoService for cryptographic operations.\n     * @param presentationsService - Instance of PresentationsService for handling presentations.\n     */\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private presentationsService: PresentationsService,\n        @InjectRepository(RegistrarEntity)\n        private registrarRepository: Repository,\n    ) {}\n\n    /**\n     * Initializes the OAuth2 client and registrar client with the necessary configurations.\n     */\n    onModuleInit() {\n        //when not set, we will not use the registrar\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const oidcIssuerUrl =\n            this.configService.getOrThrow(\"REGISTRAR_OIDC_URL\");\n        const clientId = this.configService.getOrThrow(\n            \"REGISTRAR_OIDC_CLIENT_ID\",\n        );\n        const clientSecret = this.configService.getOrThrow(\n            \"REGISTRAR_OIDC_CLIENT_SECRET\",\n        );\n\n        this.oauth2Client = new OAuth2Client({\n            server: `${oidcIssuerUrl}/protocol/openid-connect/token`,\n            clientId,\n            clientSecret,\n            discoveryEndpoint: `${oidcIssuerUrl}/.well-known/openid-configuration`,\n        });\n\n        this.client = client;\n        this.client.setConfig({\n            baseUrl: this.configService.getOrThrow(\"REGISTRAR_URL\"),\n            auth: () => this.accessToken,\n        });\n    }\n\n    /**\n     * Checks if the registrar service is enabled based on the configuration.\n     * @returns True if the registrar service is enabled, false otherwise.\n     */\n    isEnabled() {\n        return !!this.configService.get(\"REGISTRAR_URL\");\n    }\n\n    /**\n     * This function is called when the application starts.\n     * It will refresh the access token for the registrar.\n     */\n    async onApplicationBootstrap() {\n        if (!this.configService.get(\"REGISTRAR_URL\")) {\n            return;\n        }\n        await this.refreshAccessToken();\n    }\n\n    /**\n     * This function is called when a tenant is initialized.\n     * @param tenantId\n     */\n    async onTenantInit(tenantId: string) {\n        if (!this.isEnabled()) {\n            return;\n        }\n        //TODO: pass name by call\n        const name = this.configService.getOrThrow(\"RP_NAME\");\n        const relyingPartyId = await this.addRp(name);\n        const accessCertificateId = await this.addAccessCertificate(\n            tenantId,\n            relyingPartyId,\n        );\n        await this.registrarRepository.save({\n            tenantId,\n            relyingPartyId,\n            accessCertificateId,\n        });\n    }\n\n    /**\n     * Refreshes the access token for the registrar using client credentials.\n     * This method is called periodically to ensure the access token is valid.\n     */\n    async refreshAccessToken() {\n        await this.oauth2Client.clientCredentials().then((token) => {\n            this.accessToken = token.accessToken;\n            const date = new Date();\n            const expirationDate = new Date(token.expiresAt as number);\n            setTimeout(\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                () => this.refreshAccessToken(),\n                expirationDate.getTime() - date.getTime() - 1000,\n            );\n        });\n    }\n\n    /**\n     * Adds a new relying party to the registrar.\n     * This is only needed once, when the relying party is created.\n     */\n    addRp(name: string): Promise {\n        return relyingPartyControllerRegister({\n            client: this.client,\n            body: {\n                name,\n            },\n        }).then(async (response) => {\n            let rpId: string;\n            if (response.error) {\n                rpId = await this.getExistingRp(name);\n            } else {\n                rpId = response.data![\"id\"];\n            }\n            return rpId;\n        });\n    }\n\n    /**\n     * Stores the existing relying party ID based on the name.\n     * This is used when the relying party already exists in the registrar.\n     * @param name - The name of the relying party.\n     * @returns The ID of the existing relying party.\n     */\n    private getExistingRp(name: string) {\n        return relyingPartyControllerFindAll({\n            client: this.client,\n            query: {\n                name,\n            },\n        }).then((response) => {\n            return response.data!.find((item) => item.name === name)?.id!;\n        });\n    }\n\n    /**\n     * Add a new access certificate to the registrar.\n     * This is only needed once, when the access certificate is created.\n     * If the access certificate already exists, it will be returned.\n     * @returns\n     */\n    private async addAccessCertificate(\n        tenantId: string,\n        relyingPartyId: string,\n    ): Promise {\n        const keyId = await this.cryptoService.keyService.getKid(tenantId);\n        const host = this.configService\n            .getOrThrow(\"PUBLIC_URL\")\n            .replace(\"https://\", \"\");\n        return accessCertificateControllerRegister({\n            client: this.client,\n            body: {\n                publicKey: await this.cryptoService.keyService.getPublicKey(\n                    \"pem\",\n                    tenantId,\n                    keyId,\n                ),\n                dns: [host],\n            },\n            path: {\n                rp: relyingPartyId,\n            },\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\"Error adding access certificate:\", res.error);\n                throw new Error(\"Error adding access certificate\");\n            }\n            //store the cert\n            await this.cryptoService.storeAccessCertificate(\n                res.data![\"crt\"],\n                tenantId,\n                keyId,\n            );\n            return res.data![\"id\"];\n        });\n    }\n\n    /**\n     * Add a new registration certificate to the registrar.\n     * This is only needed once, when the registration certificate is created.\n     * If the registration certificate already exists, it will be returned.\n     * @returns\n     */\n    async addRegistrationCertificate(\n        req: RegistrationCertificateRequest,\n        //TODO: check if the dcql_query is covered by the registration certificate. If not, we need to throw an error since we do not know the new purpose for it.\n        dcql_query: any,\n        requestId: string,\n        tenantId: string,\n    ) {\n        const entry = await this.registrarRepository.findOneByOrFail({\n            tenantId,\n        });\n\n        //TODO: need to check if the access certificate is bound to the access certificate with the subject. Also that the requested fields are matching.\n\n        const certs =\n            (await registrationCertificateControllerAll({\n                client: this.client,\n                path: {\n                    rp: entry.relyingPartyId,\n                },\n            }).then((res) =>\n                res.data?.filter(\n                    (cert) =>\n                        cert.revoked == null && cert.id === (req.id as string),\n                ),\n            )) || [];\n\n        if (certs?.length > 0) {\n            return certs[0].jwt;\n        }\n\n        return registrationCertificateControllerRegister({\n            client: this.client,\n            path: {\n                rp: entry.relyingPartyId,\n            },\n            body: req.body,\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\n                    \"Error adding registration certificate:\",\n                    res.error,\n                );\n                throw new Error(\"Error adding registration certificate\");\n            }\n\n            //TODO: write the ID to the config so its easier to use it. Easier than writing the comparison algorithm (any maybe someone wants to use a different one)\n            await this.presentationsService.storeRCID(\n                res.data![\"id\"],\n                requestId,\n                tenantId,\n            );\n            return res.data![\"jwt\"];\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrationCertificateRequest.html":{"url":"classes/RegistrationCertificateRequest.html","title":"class - RegistrationCertificateRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrationCertificateRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/vp-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrationCertificateRequest DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                body\n                            \n                            \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RegistrationCertificateCreation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:17\n                        \n                    \n\n            \n                \n                    The body of the registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:12\n                        \n                    \n\n            \n                \n                    Identifier of the registration certificate that got issued.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from \"class-validator\";\nimport { RegistrationCertificateCreation } from \"../../../registrar/generated\";\n\n/**\n * RegistrationCertificateRequest DTO\n */\nexport class RegistrationCertificateRequest {\n    /**\n     * Identifier of the registration certificate that got issued.\n     */\n    @IsString()\n    id?: string;\n    /**\n     * The body of the registration certificate request containing the necessary details.\n     */\n    @IsObject()\n    body: RegistrationCertificateCreation;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResolverModule.html":{"url":"modules/ResolverModule.html","title":"module - ResolverModule","body":"\n                   \n\n\n\n\n    Modules\n    ResolverModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\n\nResolverService \n\nResolverService \n\n\n\nResolverModule\n\nResolverModule\n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/resolver/resolver.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { ResolverService } from \"./resolver.service\";\n\n@Module({\n    imports: [HttpModule],\n    providers: [ResolverService],\n    exports: [ResolverService],\n})\nexport class ResolverModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResolverService.html":{"url":"injectables/ResolverService.html","title":"injectable - ResolverService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResolverService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/resolver.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for resolving public keys from JWT payloads and headers.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                resolvePublicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/resolver/resolver.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resolvePublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolvePublicKey(payload: JWTPayload, header: JWK)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/resolver/resolver.service.ts:21\n                        \n                    \n\n\n            \n                \n                        Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWK\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { X509Certificate } from \"node:crypto\";\nimport { HttpService } from \"@nestjs/axios\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { JWK, JWTPayload } from \"jose\";\nimport { firstValueFrom } from \"rxjs\";\nimport { IssuerMetadata } from \"./dto/issuer-metadata.dto\";\n\n/**\n * Service for resolving public keys from JWT payloads and headers.\n */\n@Injectable()\nexport class ResolverService {\n    constructor(private httpService: HttpService) {}\n\n    /**\n     * Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n     * @param payload\n     * @param header\n     * @returns\n     */\n    async resolvePublicKey(payload: JWTPayload, header: JWK): Promise {\n        if (!payload.iss) {\n            throw new Error(\"Issuer not found\");\n        }\n\n        if (header.x5c) {\n            //TODO: validate the certificate and the chain of trust!\n            const certs = header.x5c.map(\n                (cert) => new X509Certificate(Buffer.from(cert, \"base64\")),\n            );\n            const cert = certs[0];\n            if (!cert.subjectAltName?.includes(new URL(payload.iss).hostname)) {\n                throw new Error(\"Subject and issuer do not match\");\n            }\n            return cert.publicKey.export({ format: \"jwk\" }) as JWK;\n        }\n        //checl if the key is in the header as jwk\n        if (header[\"jwk\"]) {\n            return header[\"jwk\"] as JWK;\n        }\n\n        const response = await firstValueFrom(\n            this.httpService.get(\n                `${payload.iss}/.well-known/jwt-vc-issuer`,\n            ),\n        ).then(\n            (r) => r.data,\n            () => {\n                throw new ConflictException(\"Issuer not reachable\");\n            },\n        );\n        const key = response.jwks.keys.find((key) => key.kid === header.kid);\n        if (!key) {\n            throw new Error(\"Key not found\");\n        }\n        return key;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RootOfTrustPolicy.html":{"url":"classes/RootOfTrustPolicy.html","title":"class - RootOfTrustPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RootOfTrustPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.ts\n        \n\n\n            \n                Description\n            \n            \n                rootOfTrust\n\n            \n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                policy\n                            \n                            \n                                    \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PolicyType.ROOT_OF_TRUST\n\n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsEnum,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\nexport enum PolicyType {\n    NONE = \"none\",\n    ALLOW_LIST = \"allowList\",\n    ROOT_OF_TRUST = \"rootOfTrust\",\n    ATTESTATION_BASED = \"attestationBased\",\n}\n\nexport class EmbeddedDisclosurePolicy {\n    @IsDefined()\n    @IsEnum(PolicyType)\n    policy!: PolicyType;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ALLOW_LIST;\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ROOT_OF_TRUST;\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.NONE;\n}\n\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    claims?: any[];\n\n    @IsDefined()\n    @IsArray()\n    credentials!: any[];\n\n    @IsOptional()\n    @IsArray()\n    credential_sets?: any[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ATTESTATION_BASED;\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n// Convenience union type if you use it elsewhere\nexport type AnyPolicy =\n    | NoneTrustPolicy\n    | AllowListPolicy\n    | RootOfTrustPolicy\n    | AttestationBasedPolicy;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/S3FileStorage.html":{"url":"classes/S3FileStorage.html","title":"class - S3FileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  S3FileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/adapters/s3.storage.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            FileStorage\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                exists\n                            \n                            \n                                getSignedUrl\n                            \n                            \n                                    Async\n                                getStream\n                            \n                            \n                                    Async\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(s3: S3Client, bucket: string, publicBaseUrl?: string)\n                    \n                \n                        \n                            \n                                Defined in src/storage/adapters/s3.storage.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        s3\n                                                  \n                                                        \n                                                                        S3Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        bucket\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        publicBaseUrl\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        exists\n                        \n                    \n                \n            \n            \n                \n                        \n                    exists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSignedUrl\n                        \n                    \n                \n            \n            \n                \ngetSignedUrl(key: string, expiresInSec: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresInSec\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStream\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        put\n                        \n                    \n                \n            \n            \n                \n                        \n                    put(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    DeleteObjectCommand,\n    GetObjectCommand,\n    HeadObjectCommand,\n    PutObjectCommand,\n    S3Client,\n} from \"@aws-sdk/client-s3\";\nimport { getSignedUrl as sign } from \"@aws-sdk/s3-request-presigner\";\nimport { Readable } from \"stream\";\nimport { FileStorage, PutOptions, StoredObject } from \"../storage.types\";\n\nexport class S3FileStorage implements FileStorage {\n    constructor(\n        private s3: S3Client,\n        private bucket: string,\n        private publicBaseUrl?: string, // e.g. CloudFront URL (optional)\n    ) {}\n\n    async put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise {\n        await this.s3.send(\n            new PutObjectCommand({\n                Bucket: this.bucket,\n                Key: key,\n                Body: body,\n                ContentType: opts?.contentType,\n                Metadata: opts?.metadata,\n                ACL: opts?.acl === \"public\" ? \"public-read\" : undefined,\n                ChecksumSHA256: opts?.checksum, // optional if you computed it\n            }),\n        );\n\n        const head = await this.s3.send(\n            new HeadObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n        const url =\n            opts?.acl === \"public\"\n                ? this.publicBaseUrl\n                    ? `${this.publicBaseUrl.replace(/\\/+$/, \"\")}/${encodeURI(key)}`\n                    : `https://${this.bucket}.s3.amazonaws.com/${encodeURI(key)}`\n                : undefined;\n\n        return {\n            key,\n            etag: head.ETag,\n            size: head.ContentLength,\n            url,\n            contentType: head.ContentType || opts?.contentType,\n        };\n    }\n\n    async getStream(key: string) {\n        const obj = await this.s3.send(\n            new GetObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n        const stream = obj.Body as Readable;\n        return {\n            stream,\n            contentType: obj.ContentType,\n            size: obj.ContentLength,\n        };\n    }\n\n    async delete(key: string) {\n        await this.s3.send(\n            new DeleteObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n    }\n\n    async exists(key: string) {\n        try {\n            await this.s3.send(\n                new HeadObjectCommand({ Bucket: this.bucket, Key: key }),\n            );\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    getSignedUrl(key: string, expiresInSec: number) {\n        return Promise.resolve(\n            sign(\n                this.s3,\n                new GetObjectCommand({ Bucket: this.bucket, Key: key }),\n                { expiresIn: expiresInSec },\n            ),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SchemaResponse.html":{"url":"classes/SchemaResponse.html","title":"class - SchemaResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SchemaResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/schema-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Schema to validate other json objects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                $schema\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                properties\n                            \n                            \n                                    \n                                    Optional\n                                required\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                title\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        $schema\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Equals('https://json-schema.org/draft/2020-12/schema')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Equals('object')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    Equals,\n    IsArray,\n    IsObject,\n    IsOptional,\n    IsString,\n} from \"class-validator\";\n\n/**\n * Schema to validate other json objects.\n */\nexport class SchemaResponse {\n    @Equals(\"https://json-schema.org/draft/2020-12/schema\")\n    $schema: \"https://json-schema.org/draft/2020-12/schema\";\n    @Equals(\"object\")\n    type: \"object\";\n    @IsObject()\n    properties: Record;\n    @IsArray()\n    required?: string[];\n    @IsOptional()\n    @IsString()\n    title?: string;\n    @IsOptional()\n    @IsString()\n    description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Session.html":{"url":"entities/Session.html","title":"entity - Session","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/entities/session.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a user session in the application.\nIt includes various properties such as credentials, authorization code,\nrequest URI, authorization queries, and more.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                auth_queries\n                            \n                            \n                                    \n                                    Optional\n                                authorization_code\n                            \n                            \n                                    \n                                    Optional\n                                claimsWebhook\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                credentialPayload\n                            \n                            \n                                    \n                                    Optional\n                                credentials\n                            \n                            \n                                    \n                                    Optional\n                                expiresAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                issuanceId\n                            \n                            \n                                    \n                                    Optional\n                                nonce\n                            \n                            \n                                    \n                                notifications\n                            \n                            \n                                    \n                                    Optional\n                                notifyWebhook\n                            \n                            \n                                    \n                                    Optional\n                                offer\n                            \n                            \n                                    \n                                    Optional\n                                offerUrl\n                            \n                            \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    Optional\n                                requestId\n                            \n                            \n                                    \n                                    Optional\n                                requestUrl\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    Optional\n                                vp_nonce\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        auth_queries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthorizeQueries\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:92\n                        \n                    \n\n            \n                \n                    Authorization queries associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        authorization_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:82\n                        \n                    \n\n            \n                \n                    Authorization code for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        claimsWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:141\n                        \n                    \n\n            \n                \n                    Webhook configuration to send result and may receive further information.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:109\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentialPayload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OfferRequestDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:136\n                        \n                    \n\n            \n                \n                    Credential payload containing the offer request details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :     VerificationResult[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:77\n                        \n                    \n\n            \n                \n                    Verified credentials from the verification process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        expiresAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('date', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:118\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:56\n                        \n                    \n\n            \n                \n                    Unique identifier for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:103\n                        \n                    \n\n            \n                \n                    Nonce used for the OID4VCI flow.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Notification[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:151\n                        \n                    \n\n            \n                \n                    Notifications associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:146\n                        \n                    \n\n            \n                \n                    Webhook configuration to send the result of the notification response.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        offer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CredentialOfferObject\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:124\n                        \n                    \n\n            \n                \n                    Credential offer object containing details about the credential offer or presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        offerUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:130\n                        \n                    \n\n            \n                \n                    Offer URL for the credential offer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:87\n                        \n                    \n\n            \n                \n                    Request URI from the authorization request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:65\n                        \n                    \n\n            \n                \n                    The ID of the presentation configuration associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        requestUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:71\n                        \n                    \n\n            \n                \n                    The URL of the presentation auth request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SessionStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: SessionStatus})@Column('varchar', {nullable: true, default: 'active'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:163\n                        \n                    \n\n            \n                \n                    Status of the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:156\n                        \n                    \n\n            \n                \n                    Tenant ID for multi-tenancy support.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:115\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        vp_nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:97\n                        \n                    \n\n            \n                \n                    Noncce from the Verifiable Presentation request.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n    CredentialOfferObject,\n    NotificationEvent,\n} from \"@openid4vc/openid4vci\";\nimport { VerificationResult } from \"@sd-jwt/sd-jwt-vc\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    PrimaryColumn,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { AuthorizeQueries } from \"../../issuer/authorize/dto/authorize-request.dto\";\nimport { OfferRequestDto } from \"../../issuer/oid4vci/dto/offer-request.dto\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\n\nexport enum SessionStatus {\n    Active = \"active\",\n    Fetched = \"fetched\",\n    Completed = \"completed\",\n    Expired = \"expired\",\n    Failed = \"failed\",\n}\n\n/**\n * Represents a session entity for managing user sessions in the application.\n */\nexport type Notification = {\n    /**\n     * Unique identifier for the notification.\n     */\n    id: string;\n    /**\n     * The type of notification.\n     */\n    event?: NotificationEvent;\n\n    /**\n     * The credential ID associated with the notification.\n     */\n    credentialConfigurationId: string;\n};\n\n/**\n * Entity representing a user session in the application.\n * It includes various properties such as credentials, authorization code,\n * request URI, authorization queries, and more.\n */\n@Entity()\nexport class Session {\n    /**\n     * Unique identifier for the session.\n     */\n    @PrimaryColumn(\"uuid\")\n    id: string;\n\n    @Column(\"varchar\", { nullable: true })\n    issuanceId?: string;\n\n    /**\n     * The ID of the presentation configuration associated with the session.\n     */\n    @Column(\"varchar\", { nullable: true })\n    requestId?: string;\n\n    /**\n     * The URL of the presentation auth request.\n     */\n    @Column(\"varchar\", { nullable: true })\n    requestUrl?: string;\n\n    /**\n     * Verified credentials from the verification process.\n     */\n    @Column(\"json\", { nullable: true })\n    credentials?: VerificationResult[];\n    /**\n     * Authorization code for the session.\n     */\n    @Column(\"varchar\", { nullable: true })\n    authorization_code?: string;\n    /**\n     * Request URI from the authorization request.\n     */\n    @Column(\"varchar\", { nullable: true })\n    request_uri?: string;\n    /**\n     * Authorization queries associated with the session.\n     */\n    @Column(\"json\", { nullable: true })\n    auth_queries?: AuthorizeQueries;\n    /**\n     * Noncce from the Verifiable Presentation request.\n     */\n    @Column(\"varchar\", { nullable: true })\n    vp_nonce?: string;\n\n    /**\n     * Nonce used for the OID4VCI flow.\n     */\n    @Column(\"varchar\", { nullable: true })\n    nonce?: string;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    @Column(\"date\", { nullable: true })\n    expiresAt?: Date;\n\n    /**\n     * Credential offer object containing details about the credential offer or presentation request.\n     */\n    @Column(\"json\", { nullable: true })\n    offer?: CredentialOfferObject;\n\n    /**\n     * Offer URL for the credential offer.\n     */\n    @Column(\"varchar\", { nullable: true })\n    offerUrl?: string;\n\n    /**\n     * Credential payload containing the offer request details.\n     */\n    @Column(\"json\", { nullable: true })\n    credentialPayload?: OfferRequestDto;\n    /**\n     * Webhook configuration to send result and may receive further information.\n     */\n    @Column(\"json\", { nullable: true })\n    claimsWebhook?: WebhookConfig;\n    /**\n     * Webhook configuration to send the result of the notification response.\n     */\n    @Column(\"json\", { nullable: true })\n    notifyWebhook?: WebhookConfig;\n    /**\n     * Notifications associated with the session.\n     */\n    @Column(\"json\", { default: JSON.stringify([]) })\n    notifications: Notification[];\n    /**\n     * Tenant ID for multi-tenancy support.\n     */\n    @Column(\"varchar\")\n    tenantId: string;\n\n    /**\n     * Status of the session.\n     */\n    @ApiProperty({ enum: SessionStatus })\n    @Column(\"varchar\", { nullable: true, default: \"active\" })\n    status: SessionStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionController.html":{"url":"controllers/SessionController.html","title":"controller - SessionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                session\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteSession\n                            \n                            \n                                    \n                                getAllSessions\n                            \n                            \n                                    \n                                getSession\n                            \n                            \n                                    \n                                revokeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteSession(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:52\n                        \n                    \n\n\n            \n                \n                        Deletes a session by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getAllSessions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllSessions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        Retrieves all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSession(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:41\n                        \n                    \n\n\n            \n                \n                        Retrieves the session information for a given session ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the session.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        revokeAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    revokeAll(value: StatusUpdateDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('revoke')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:65\n                        \n                    \n\n\n            \n                \n                        Update the status of the credentials of a specific session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiSecurity, ApiTags } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../auth/token.decorator\";\nimport { StatusUpdateDto } from \"../issuer/status-list/dto/status-update.dto\";\nimport { StatusListService } from \"../issuer/status-list/status-list.service\";\nimport { Session } from \"./entities/session.entity\";\nimport { SessionService } from \"./session.service\";\n\n@ApiTags(\"Session management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"session\")\nexport class SessionController {\n    constructor(\n        private readonly sessionService: SessionService,\n        private readonly statusListService: StatusListService,\n    ) {}\n\n    /**\n     * Retrieves all sessions.\n     */\n    @Get()\n    getAllSessions(): Promise {\n        return this.sessionService.getAll();\n    }\n\n    /**\n     * Retrieves the session information for a given session ID.\n     * @param id - The identifier of the session.\n     */\n    @Get(\":id\")\n    getSession(@Param(\"id\") id: string): Promise {\n        return this.sessionService.get(id);\n    }\n\n    /**\n     * Deletes a session by its ID.\n     * @param id\n     * @param user\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteSession(\n        @Param(\"id\") id: string,\n        @Token() user: TokenPayload,\n    ): Promise {\n        return this.sessionService.delete(id, user.sub);\n    }\n\n    /**\n     * Update the status of the credentials of a specific session.\n     * @param value\n     * @returns\n     */\n    @Post(\"revoke\")\n    revokeAll(@Body() value: StatusUpdateDto, @Token() user: TokenPayload) {\n        return this.statusListService.updateStatus(value, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/SessionGuard.html":{"url":"guards/SessionGuard.html","title":"guard - SessionGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    SessionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/session/session.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionService: SessionService)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.guard.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.guard.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext,\n    Injectable,\n    NotFoundException,\n} from \"@nestjs/common\";\nimport { SessionService } from \"./session.service\";\n\n@Injectable()\nexport class SessionGuard implements CanActivate {\n    constructor(private readonly sessionService: SessionService) {}\n\n    async canActivate(context: ExecutionContext): Promise {\n        const request = context.switchToHttp().getRequest();\n        const sessionId = request.params.session;\n        if (!sessionId) {\n            throw new NotFoundException(\n                \"Session ID not found in request parameters\",\n            );\n        }\n        const session = await this.sessionService.get(sessionId);\n        if (!session) {\n            throw new NotFoundException(\n                `Session with ID ${sessionId} not found`,\n            );\n        }\n        request.session = session;\n        return true;\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SessionLogContext.html":{"url":"interfaces/SessionLogContext.html","title":"interface - SessionLogContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SessionLogContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger-context.ts\n        \n\n\n            \n                Description\n            \n            \n                Context for session logging, including session ID, tenant ID, flow type, and optional stage.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            flowType\n                                        \n                                \n                                \n                                        \n                                            sessionId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stage\n                                        \n                                \n                                \n                                        \n                                            tenantId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger-context.ts:21\n                            \n                        \n                \n                    \n                        Additional context information for the session.\n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        flowType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flowType:     \"OID4VCI\" | \"OID4VP\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"OID4VCI\" | \"OID4VP\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Type of flow being logged (e.g., OID4VCI, OID4VP).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sessionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sessionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier for the session.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional stage of the flow, useful for tracking progress.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenantId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tenantId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier for the tenant associated with the session.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SessionLogContext {\n    /**\n     * Unique identifier for the session.\n     */\n    sessionId: string;\n    /**\n     * Identifier for the tenant associated with the session.\n     */\n    tenantId: string;\n    /**\n     * Type of flow being logged (e.g., OID4VCI, OID4VP).\n     */\n    flowType: \"OID4VCI\" | \"OID4VP\";\n    /**\n     * Optional stage of the flow, useful for tracking progress.\n     */\n    stage?: string;\n    /**\n     * Additional context information for the session.\n     */\n    [key: string]: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerInterceptor.html":{"url":"injectables/SessionLoggerInterceptor.html","title":"injectable - SessionLoggerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for logging session-related requests and responses.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                sanitizeBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, logger: PinoLogger, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger.interceptor.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerInterceptor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nReflector instance for accessing metadata.\n\n\n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfigService for accessing configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.interceptor.ts:44\n                        \n                    \n\n\n            \n                \n                        Intercepts the request and logs session-related information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExecution context of the request.\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCall handler to proceed with the request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that emits the response data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeBody(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.interceptor.ts:136\n                        \n                    \n\n\n            \n                \n                        Sanitizes the request body to remove sensitive information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request body to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Sanitized body.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/session-logger.interceptor.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Reflector } from \"@nestjs/core\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { Observable } from \"rxjs\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport { SESSION_LOGGER_KEY } from \"./session-logger.decorator\";\n\n/**\n * Interceptor for logging session-related requests and responses.\n */\n@Injectable()\nexport class SessionLoggerInterceptor implements NestInterceptor {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerInterceptor.\n     * @param reflector - Reflector instance for accessing metadata.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing configuration.\n     */\n    constructor(\n        private readonly reflector: Reflector,\n        private readonly logger: PinoLogger,\n        private readonly configService: ConfigService,\n    ) {\n        this.isEnabled = this.configService.get(\n            \"LOG_ENABLE_SESSION_LOGGER\",\n            false,\n        );\n    }\n\n    /**\n     * Intercepts the request and logs session-related information.\n     * @param context - Execution context of the request.\n     * @param next - Call handler to proceed with the request.\n     * @returns An observable that emits the response data.\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        const metadata = this.reflector.get(\n            SESSION_LOGGER_KEY,\n            context.getHandler(),\n        );\n\n        if (!metadata || !this.isEnabled) {\n            return next.handle();\n        }\n\n        const { sessionIdParam, flowType } = metadata;\n        const request = context.switchToHttp().getRequest();\n        const response = context.switchToHttp().getResponse();\n\n        const sessionId = request.params[sessionIdParam];\n\n        const tenantId = request.params?.tenantId;\n        const method = request.method;\n        const url = request.url;\n\n        // Set context for this logger instance\n        this.logger.setContext(\"SessionLogger\");\n\n        // Create log context\n        const logContext = {\n            sessionId,\n            tenantId,\n            flowType,\n            endpoint: `${method} ${url}`,\n        };\n\n        // Log the start of the request\n        this.logger.info(\n            {\n                ...logContext,\n                event: \"request_start\",\n                method,\n                url,\n                headers: {\n                    \"user-agent\": request.headers[\"user-agent\"],\n                    \"content-type\": request.headers[\"content-type\"],\n                },\n                body: this.sanitizeBody(request.body),\n            },\n            `[${flowType}] Starting ${method} ${url} for session ${sessionId}`,\n        );\n\n        const startTime = Date.now();\n\n        return next.handle().pipe(\n            tap((data) => {\n                const duration = Date.now() - startTime;\n                this.logger.info(\n                    {\n                        ...logContext,\n                        event: \"request_success\",\n                        method,\n                        url,\n                        statusCode: response.statusCode,\n                        duration,\n                        responseSize: JSON.stringify(data || {}).length,\n                    },\n                    `[${flowType}] Completed ${method} ${url} for session ${sessionId} in ${duration}ms`,\n                );\n            }),\n            catchError((error) => {\n                const duration = Date.now() - startTime;\n                this.logger.error(\n                    {\n                        ...logContext,\n                        event: \"request_error\",\n                        method,\n                        url,\n                        error: {\n                            name: error.name,\n                            message: error.message,\n                            stack: error.stack,\n                        },\n                        duration,\n                    },\n                    `[${flowType}] Error in ${method} ${url} for session ${sessionId}: ${error.message}`,\n                );\n                throw error;\n            }),\n        );\n    }\n\n    /**\n     * Sanitizes the request body to remove sensitive information.\n     * @param body - The request body to sanitize.\n     * @returns Sanitized body.\n     */\n    private sanitizeBody(body: any): any {\n        if (!body) return body;\n\n        // Create a copy to avoid modifying the original\n        const sanitized = { ...body };\n\n        // Remove sensitive fields\n        const sensitiveFields = [\n            \"password\",\n            \"token\",\n            \"secret\",\n            \"key\",\n            \"private_key\",\n            \"access_token\",\n            \"refresh_token\",\n        ];\n\n        sensitiveFields.forEach((field) => {\n            if (sanitized[field]) {\n                sanitized[field] = \"[REDACTED]\";\n            }\n        });\n\n        return sanitized;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerService.html":{"url":"injectables/SessionLoggerService.html","title":"injectable - SessionLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for logging session-related events and errors.\nUses PinoLogger for structured logging.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logAuthorizationRequest\n                            \n                            \n                                logCredentialIssuance\n                            \n                            \n                                logCredentialVerification\n                            \n                            \n                                logFlowComplete\n                            \n                            \n                                logFlowError\n                            \n                            \n                                logFlowStart\n                            \n                            \n                                logNotification\n                            \n                            \n                                logSession\n                            \n                            \n                                logSessionError\n                            \n                            \n                                logTokenExchange\n                            \n                            \n                                    Private\n                                shouldLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfigService for accessing environment configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \nlogAuthorizationRequest(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:146\n                        \n                    \n\n\n            \n                \n                        Log authorization request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialIssuance\n                        \n                    \n                \n            \n            \n                \nlogCredentialIssuance(context: SessionLogContext, credentialType: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Log credential issuance step\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialVerification\n                        \n                    \n                \n            \n            \n                \nlogCredentialVerification(context: SessionLogContext, verificationResult: boolean, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Log credential presentation verification\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                verificationResult\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowComplete\n                        \n                    \n                \n            \n            \n                \nlogFlowComplete(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Log session flow completion\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowError\n                        \n                    \n                \n            \n            \n                \nlogFlowError(context: SessionLogContext, error: Error, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Log session flow error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowStart\n                        \n                    \n                \n            \n            \n                \nlogFlowStart(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Log session flow start\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logNotification\n                        \n                    \n                \n            \n            \n                \nlogNotification(context: SessionLogContext, notificationEvent: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Log notification events\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notificationEvent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSession\n                        \n                    \n                \n            \n            \n                \nlogSession(context: SessionLogContext, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:202\n                        \n                    \n\n\n            \n                \n                        Generic session log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSessionError\n                        \n                    \n                \n            \n            \n                \nlogSessionError(context: SessionLogContext, error: Error, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:221\n                        \n                    \n\n\n            \n                \n                        Generic session error log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logTokenExchange\n                        \n                    \n                \n            \n            \n                \nlogTokenExchange(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Log token exchange\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldLog\n                        \n                    \n                \n            \n            \n                \n                        \n                    shouldLog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/session-logger.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { SessionLogContext } from \"./session-logger-context\";\n\n/**\n * Service for logging session-related events and errors.\n * Uses PinoLogger for structured logging.\n */\n@Injectable()\nexport class SessionLoggerService {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerService.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing environment configuration.\n     */\n    constructor(\n        private readonly logger: PinoLogger,\n        private readonly configService: ConfigService,\n    ) {\n        this.logger.setContext(\"SessionLoggerService\");\n        this.isEnabled = this.configService.get(\n            \"LOG_ENABLE_SESSION_LOGGER\",\n            false,\n        );\n    }\n\n    private shouldLog(): boolean {\n        return this.isEnabled;\n    }\n\n    /**\n     * Log session flow start\n     */\n    logFlowStart(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow started for session ${context.sessionId} in tenant ${context.tenantId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"flow_start\",\n                stage: \"initialization\",\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow completion\n     */\n    logFlowComplete(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow completed for session ${context.sessionId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"flow_complete\",\n                stage: \"completion\",\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow error\n     */\n    logFlowError(\n        context: SessionLogContext,\n        error: Error,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow error for session ${context.sessionId}: ${error.message}`;\n\n        this.logger.error(\n            {\n                ...context,\n                event: \"flow_error\",\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log credential issuance step\n     */\n    logCredentialIssuance(\n        context: SessionLogContext,\n        credentialType: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"credential_issuance\",\n                stage: \"credential_creation\",\n                credentialType,\n                ...additionalData,\n            },\n            `[${context.flowType}] Issuing credential of type ${credentialType} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log credential presentation verification\n     */\n    logCredentialVerification(\n        context: SessionLogContext,\n        verificationResult: boolean,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"credential_verification\",\n                stage: \"verification\",\n                verificationResult,\n                ...additionalData,\n            },\n            `[${context.flowType}] Credential verification ${verificationResult ? \"succeeded\" : \"failed\"} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log authorization request\n     */\n    logAuthorizationRequest(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"authorization_request\",\n                stage: \"authorization\",\n                ...additionalData,\n            },\n            `[${context.flowType}] Authorization request created for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log token exchange\n     */\n    logTokenExchange(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"token_exchange\",\n                stage: \"token_exchange\",\n                ...additionalData,\n            },\n            `[${context.flowType}] Token exchange for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log notification events\n     */\n    logNotification(\n        context: SessionLogContext,\n        notificationEvent: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"notification\",\n                stage: \"notification\",\n                notificationEvent,\n                ...additionalData,\n            },\n            `[${context.flowType}] Notification ${notificationEvent} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Generic session log method\n     */\n    logSession(\n        context: SessionLogContext,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}`,\n        );\n    }\n\n    /**\n     * Generic session error log method\n     */\n    logSessionError(\n        context: SessionLogContext,\n        error: Error,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.error(\n            {\n                ...context,\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}: ${error.message}`,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionModule.html":{"url":"modules/SessionModule.html","title":"module - SessionModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_imports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_SessionModule_exports\n\n\n\n\nStatusListModule\n\nStatusListModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/session/session.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            SessionModule is responsible for managing user sessions.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SessionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SessionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { makeGaugeProvider } from \"@willsoto/nestjs-prometheus\";\nimport * as Joi from \"joi\";\nimport { StatusListModule } from \"../issuer/status-list/status-list.module\";\nimport { Session } from \"./entities/session.entity\";\nimport { SessionController } from \"./session.controller\";\nimport { SessionService } from \"./session.service\";\n\n/**\n * Module for managing user sessions.\n */\nexport const SESSION_VALIDATION_SCHEMA = {\n    SESSION_TIDY_UP_INTERVAL: Joi.number().default(60 * 60), // default to every hour\n    SESSION_TTL: Joi.number().default(24 * 60 * 60), // default to 24 hours\n};\n\n/**\n * SessionModule is responsible for managing user sessions.\n */\n@Module({\n    imports: [TypeOrmModule.forFeature([Session]), StatusListModule],\n    providers: [\n        SessionService,\n        makeGaugeProvider({\n            name: \"sessions\",\n            help: \"Total number of sessions by status\",\n            labelNames: [\"tenant_id\", \"session_type\", \"status\"],\n        }),\n    ],\n    exports: [SessionService],\n    controllers: [SessionController],\n})\nexport class SessionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                getAll\n                            \n                            \n                                getBy\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                setState\n                            \n                            \n                                tidyUpSessions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionRepository: Repository, configService: ConfigService, schedulerRegistry: SchedulerRegistry, sessionsCounter: Gauge)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schedulerRegistry\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionsCounter\n                                                  \n                                                        \n                                                                    Gauge\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(issuer_state: string, values: QueryDeepPartialEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Update an existing session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            QueryDeepPartialEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(session: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Create a new session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string, sub: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:184\n                        \n                    \n\n\n            \n                \n                        Deletes a session by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                sub\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:155\n                        \n                    \n\n\n            \n                \n                        Get a session by its state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:144\n                        \n                    \n\n\n            \n                \n                        Get all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBy\n                        \n                    \n                \n            \n            \n                \ngetBy(where: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:164\n                        \n                    \n\n\n            \n                \n                        Get a session by a specific condition.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                            FindOptionsWhere\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Register the tidy up cron job on application bootstrap.\nThis will run every hour by default, but can be configured via the SESSION_TIDY_UP_INTERVAL config variable.\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setState\n                        \n                    \n                \n            \n            \n                \n                        \n                    setState(session: Session, status: SessionStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:110\n                        \n                    \n\n\n            \n                \n                        Marks the session as successful or failed.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            SessionStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tidyUpSessions\n                        \n                    \n                \n            \n            \n                \ntidyUpSessions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:171\n                        \n                    \n\n\n            \n                \n                        Tidy up sessions that are older than 1 day.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { SchedulerRegistry } from \"@nestjs/schedule\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { InjectMetric } from \"@willsoto/nestjs-prometheus/dist/injector\";\nimport { Gauge } from \"prom-client\";\nimport {\n    DeepPartial,\n    FindOptionsWhere,\n    IsNull,\n    LessThan,\n    Not,\n    Repository,\n} from \"typeorm\";\nimport { QueryDeepPartialEntity } from \"typeorm/query-builder/QueryPartialEntity\";\nimport { Session, SessionStatus } from \"./entities/session.entity\";\n\n@Injectable()\nexport class SessionService implements OnApplicationBootstrap {\n    constructor(\n        @InjectRepository(Session)\n        private sessionRepository: Repository,\n        private readonly configService: ConfigService,\n        private readonly schedulerRegistry: SchedulerRegistry,\n        @InjectMetric(\"sessions\")\n        private sessionsCounter: Gauge,\n    ) {}\n\n    /**\n     * Register the tidy up cron job on application bootstrap.\n     * This will run every hour by default, but can be configured via the `SESSION_TIDY_UP_INTERVAL` config variable.\n     * @returns\n     */\n    async onApplicationBootstrap() {\n        const callback = () => {\n            void this.tidyUpSessions();\n        };\n        const intervalTime =\n            this.configService.getOrThrow(\"SESSION_TIDY_UP_INTERVAL\") *\n            1000;\n        const interval = setInterval(callback, intervalTime);\n        this.schedulerRegistry.addInterval(\"tidyUpSessions\", interval);\n\n        //set default values for session metrics\n        const tenantId = \"root\";\n        const states: SessionStatus[] = [\n            SessionStatus.Active,\n            SessionStatus.Fetched,\n            SessionStatus.Completed,\n            SessionStatus.Expired,\n            SessionStatus.Failed,\n        ];\n        for (const state of states) {\n            const issuanceCounter = await this.sessionRepository.countBy({\n                tenantId,\n                issuanceId: Not(IsNull()),\n                status: state,\n            });\n            this.sessionsCounter.set(\n                {\n                    tenant_id: tenantId,\n                    session_type: \"issuance\",\n                    status: state,\n                },\n                issuanceCounter,\n            );\n            const verificationCounter = await this.sessionRepository.countBy({\n                tenantId,\n                issuanceId: IsNull(),\n                status: state,\n            });\n            this.sessionsCounter.set(\n                {\n                    tenant_id: tenantId,\n                    session_type: \"verification\",\n                    status: state,\n                },\n                verificationCounter,\n            );\n        }\n\n        return this.tidyUpSessions();\n    }\n\n    /**\n     * Create a new session.\n     * @param session\n     * @returns\n     */\n    async create(session: DeepPartial) {\n        const createdSession = await this.sessionRepository.save(session);\n\n        // Count total sessions created\n        this.sessionsCounter.inc({\n            tenant_id: createdSession.tenantId,\n            session_type: createdSession.issuanceId\n                ? \"issuance\"\n                : \"verification\",\n            status: \"active\",\n        });\n\n        return createdSession;\n    }\n\n    /**\n     * Marks the session as successful or failed.\n     * @param session\n     * @param status\n     */\n    async setState(session: Session, status: SessionStatus) {\n        const sessionType = session.issuanceId ? \"issuance\" : \"verification\";\n\n        await this.sessionRepository.update({ id: session.id }, { status });\n\n        // Count completed sessions (success or failure)\n        this.sessionsCounter.inc({\n            tenant_id: session.tenantId,\n            session_type: sessionType,\n            status,\n        });\n\n        // Decrease active sessions count\n        this.sessionsCounter.dec({\n            tenant_id: session.tenantId,\n            session_type: sessionType,\n            status: \"active\",\n        });\n    }\n\n    /**\n     * Update an existing session.\n     * @param issuer_state\n     * @param values\n     * @returns\n     */\n    add(issuer_state: string, values: QueryDeepPartialEntity) {\n        return this.sessionRepository.update({ id: issuer_state }, values);\n    }\n\n    /**\n     * Get all sessions.\n     * @returns\n     */\n    getAll(): Promise {\n        return this.sessionRepository.find({\n            order: { updatedAt: \"DESC\" },\n        });\n    }\n\n    /**\n     * Get a session by its state.\n     * @param state\n     * @returns\n     */\n    get(state: string) {\n        return this.sessionRepository.findOneByOrFail({ id: state });\n    }\n\n    /**\n     * Get a session by a specific condition.\n     * @param where\n     * @returns\n     */\n    getBy(where: FindOptionsWhere) {\n        return this.sessionRepository.findOneByOrFail(where);\n    }\n\n    /**\n     * Tidy up sessions that are older than 1 day.\n     */\n    tidyUpSessions() {\n        const ttl = this.configService.getOrThrow(\"SESSION_TTL\") * 1000;\n        return this.sessionRepository.delete({\n            createdAt: LessThan(new Date(Date.now() - ttl)),\n        });\n    }\n\n    /**\n     * Deletes a session by its ID and tenant ID.\n     * @param id\n     * @param sub\n     * @returns\n     */\n    delete(id: string, sub: string): Promise {\n        return this.sessionRepository.delete({ id, tenantId: sub });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StatusListController.html":{"url":"controllers/StatusListController.html","title":"controller - StatusListController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StatusListController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/status-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getList(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status-list')@Header('Content-Type', 'application/statuslist+jwt')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.controller.ts:17\n                        \n                    \n\n\n            \n                \n                        Get the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Param } from \"@nestjs/common\";\nimport { ApiExcludeController, ApiTags } from \"@nestjs/swagger\";\nimport { StatusListService } from \"./status-list.service\";\n\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@ApiTags(\"Status management\")\n@Controller(\":tenantId/status-management\")\nexport class StatusListController {\n    constructor(private statusListService: StatusListService) {}\n\n    /**\n     * Get the status list\n     * @returns\n     */\n    @Get(\"status-list\")\n    @Header(\"Content-Type\", \"application/statuslist+jwt\")\n    getList(@Param(\"tenantId\") tenantId: string) {\n        return this.statusListService.getList(tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusListEntity.html":{"url":"entities/StatusListEntity.html","title":"entity - StatusListEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StatusListEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/entities/status-list.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing the status list for a tenant.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                bits\n                            \n                            \n                                    \n                                elements\n                            \n                            \n                                    \n                                    Optional\n                                jwt\n                            \n                            \n                                    \n                                stack\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        bits\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BitsPerStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:31\n                        \n                    \n\n            \n                \n                    The number of bits used for each status in the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        elements\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:19\n                        \n                    \n\n            \n                \n                    The elements of the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        jwt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:37\n                        \n                    \n\n            \n                \n                    The JSON Web Token (JWT) for the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        stack\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:25\n                        \n                    \n\n            \n                \n                    The stack of available indexes for the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:13\n                        \n                    \n\n            \n                \n                    The ID of the tenant to which the status list belongs.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { BitsPerStatus } from \"@sd-jwt/jwt-status-list\";\nimport { Column, Entity } from \"typeorm\";\n\n/**\n * Entity representing the status list for a tenant.\n */\n@Entity()\nexport class StatusListEntity {\n    /**\n     * The ID of the tenant to which the status list belongs.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The elements of the status list.\n     */\n    @Column(\"json\")\n    elements: number[];\n\n    /**\n     * The stack of available indexes for the status list.\n     */\n    @Column(\"json\")\n    stack: number[];\n\n    /**\n     * The number of bits used for each status in the status list.\n     */\n    @Column(\"int\")\n    bits: BitsPerStatus;\n\n    /**\n     * The JSON Web Token (JWT) for the status list.\n     */\n    @Column(\"varchar\", { nullable: true })\n    jwt?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StatusListModule.html":{"url":"modules/StatusListModule.html","title":"module - StatusListModule","body":"\n                   \n\n\n\n\n    Modules\n    StatusListModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_providers\n\n\n\ncluster_StatusListModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/status-list/status-list.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StatusListController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { CryptoModule } from \"../../crypto/crypto.module\";\nimport { StatusListEntity } from \"./entities/status-list.entity\";\nimport { StatusMapping } from \"./entities/status-mapping.entity\";\nimport { StatusListController } from \"./status-list.controller\";\nimport { StatusListService } from \"./status-list.service\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        TypeOrmModule.forFeature([StatusMapping, StatusListEntity]),\n    ],\n    controllers: [StatusListController],\n    providers: [StatusListService],\n    exports: [StatusListService],\n})\nexport class StatusListModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StatusListService.html":{"url":"injectables/StatusListService.html","title":"injectable - StatusListService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StatusListService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEntry\n                            \n                            \n                                    Async\n                                createList\n                            \n                            \n                                getList\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Private\n                                    Async\n                                setEntry\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, statusMappingRepository: Repository, statusListRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/status-list/status-list.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusMappingRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEntry(session: Session, credentialConfigurationId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:115\n                        \n                    \n\n\n            \n                \n                        Get the next free entry in the status list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createList\n                        \n                    \n                \n            \n            \n                \n                        \n                    createList(entry: StatusListEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Create a new status list and stored it in the file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            StatusListEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getList\n                        \n                    \n                \n            \n            \n                \ngetList(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:105\n                        \n                    \n\n\n            \n                \n                        Get the JWT for the status list of a tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The JWT for the status list.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:36\n                        \n                    \n\n\n            \n                \n                        Initialize the status list service by checking if the status list file exists.\nIf it does not exist, create a new status list with 10,000 entries and a stack\nof 10,000 indexes. The stack is shuffled to ensure randomness in the order of\nentries. The status list is stored in the file system as a JSON file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        setEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    setEntry(id: number, value: number, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:157\n                        \n                    \n\n\n            \n                \n                        Update the value of an entry in the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(value: StatusUpdateDto, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:173\n                        \n                    \n\n\n            \n                \n                        Update the status of a session and its credential configuration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport {\n    createHeaderAndPayload,\n    JWTwithStatusListPayload,\n    StatusList,\n    StatusListJWTHeaderParameters,\n} from \"@sd-jwt/jwt-status-list\";\nimport { JwtPayload } from \"@sd-jwt/types\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { StatusUpdateDto } from \"./dto/status-update.dto\";\nimport { StatusListEntity } from \"./entities/status-list.entity\";\nimport { StatusMapping } from \"./entities/status-mapping.entity\";\n\n@Injectable()\nexport class StatusListService {\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        @InjectRepository(StatusMapping)\n        private statusMappingRepository: Repository,\n        @InjectRepository(StatusListEntity)\n        private statusListRepository: Repository,\n    ) {}\n\n    /**\n     * Initialize the status list service by checking if the status list file exists.\n     * If it does not exist, create a new status list with 10,000 entries and a stack\n     * of 10,000 indexes. The stack is shuffled to ensure randomness in the order of\n     * entries. The status list is stored in the file system as a JSON file.\n     */\n    async onTenantInit(tenantId: string) {\n        const size = 10000;\n        // create an empty array with the size of 1000\n        const elements = new Array(size).fill(0).map(() => 0);\n        // create a list of 1000 indexes and shuffel them\n        const stack = new Array(size)\n            .fill(0)\n            .map((_, i) => i)\n            .sort(() => 0.5 - Math.random());\n\n        const entry = await this.statusListRepository.save({\n            tenantId,\n            elements,\n            stack,\n            bits: 1,\n        });\n\n        await this.createList(entry);\n    }\n\n    /**\n     * Create a new status list and stored it in the file\n     */\n    async createList(entry: StatusListEntity) {\n        const list = new StatusList(entry.elements, entry.bits);\n        const iss = `${this.configService.getOrThrow(\"PUBLIC_URL\")}`;\n\n        const sub = join(\n            this.configService.getOrThrow(\"PUBLIC_URL\"),\n            entry.tenantId,\n            \"status-management\",\n            \"status-list\",\n        );\n\n        const prePayload: JwtPayload = {\n            iss,\n            sub,\n            iat: Math.floor(Date.now() / 1000),\n        };\n        const preHeader: StatusListJWTHeaderParameters = {\n            alg: \"ES256\",\n            typ: \"statuslist+jwt\",\n            x5c: await this.cryptoService.getCertChain(\n                \"signing\",\n                entry.tenantId,\n            ),\n        };\n        const { header, payload } = createHeaderAndPayload(\n            list,\n            prePayload,\n            preHeader,\n        );\n\n        const jwt = await this.cryptoService.signJwt(\n            header,\n            payload,\n            entry.tenantId,\n        );\n        await this.statusListRepository.update(\n            { tenantId: entry.tenantId },\n            { jwt },\n        );\n    }\n\n    /**\n     * Get the JWT for the status list of a tenant.\n     * @param tenantId The ID of the tenant.\n     * @returns The JWT for the status list.\n     */\n    getList(tenantId: string) {\n        return this.statusListRepository\n            .findOneByOrFail({ tenantId })\n            .then((file) => file.jwt);\n    }\n\n    /**\n     * Get the next free entry in the status list.\n     * @returns\n     */\n    async createEntry(\n        session: Session,\n        credentialConfigurationId: string,\n    ): Promise {\n        const file = await this.statusListRepository.findOneByOrFail({\n            tenantId: session.tenantId,\n        });\n        // get the last element from the stack\n        const idx = file.stack.pop();\n        //TODO: what to do if the stack is empty\n        if (idx === undefined) {\n            throw new Error(\"Stack for status list is empty!!!\");\n        }\n        const sub = join(\n            this.configService.getOrThrow(\"PUBLIC_URL\"),\n            session.tenantId,\n            \"status-management\",\n            \"status-list\",\n        );\n        // store the index in the status mapping\n        await this.statusMappingRepository.save({\n            sessionId: session.id,\n            index: idx,\n            list: sub,\n            credentialConfigurationId,\n        });\n\n        return {\n            status: {\n                status_list: {\n                    idx: idx,\n                    uri: sub,\n                },\n            },\n        };\n    }\n\n    /**\n     * Update the value of an entry in the status list\n     * @param id\n     * @param value\n     */\n    private async setEntry(id: number, value: number, tenantId: string) {\n        const entry = await this.statusListRepository.findOneByOrFail({\n            tenantId,\n        });\n        entry.elements[id] = value;\n        await this.statusListRepository.update(\n            { tenantId },\n            { elements: entry.elements },\n        );\n        return this.createList(entry);\n    }\n\n    /**\n     * Update the status of a session and its credential configuration\n     * @param value\n     */\n    async updateStatus(value: StatusUpdateDto, tenantId: string) {\n        const entries = await this.statusMappingRepository.findBy({\n            sessionId: value.sessionId,\n            credentialConfigurationId: value.credentialConfigurationId,\n        });\n        if (entries.length === 0) {\n            throw new ConflictException(\n                `No status mapping found for session ${value.sessionId} and credential configuration ${value.credentialConfigurationId}`,\n            );\n        }\n        for (const entry of entries) {\n            await this.setEntry(entry.index, value.status, tenantId);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusMapping.html":{"url":"entities/StatusMapping.html","title":"entity - StatusMapping","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StatusMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/entities/status-mapping.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                credentialConfigurationId\n                            \n                            \n                                    \n                                index\n                            \n                            \n                                    \n                                list\n                            \n                            \n                                    \n                                sessionId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from \"typeorm\";\n\n@Entity()\nexport class StatusMapping {\n    @Column({ type: \"varchar\", primary: true })\n    sessionId: string;\n\n    @Column({ type: \"varchar\", primary: true })\n    list: string;\n\n    @Column({ type: \"int\", primary: true })\n    index: number;\n\n    @Column({ type: \"varchar\", primary: true })\n    credentialConfigurationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StatusUpdateDto.html":{"url":"classes/StatusUpdateDto.html","title":"class - StatusUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StatusUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/dto/status-update.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationId\n                            \n                            \n                                    \n                                sessionId\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:16\n                        \n                    \n\n            \n                \n                    The ID of the credential configuration\nThis is optional, if not provided, all credentials will be revoked of the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:8\n                        \n                    \n\n            \n                \n                    The session ID of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsIn(['0', '1'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:24\n                        \n                    \n\n            \n                \n                    The status of the credential\n0 = valid, 1 = revoked\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNumber, IsOptional, IsString } from \"class-validator\";\n\nexport class StatusUpdateDto {\n    /**\n     * The session ID of the user\n     */\n    @IsString()\n    sessionId: string;\n\n    /**\n     * The ID of the credential configuration\n     * This is optional, if not provided, all credentials will be revoked of the session.\n     */\n    @IsString()\n    @IsOptional()\n    credentialConfigurationId?: string;\n\n    /**\n     * The status of the credential\n     * 0 = valid, 1 = revoked\n     */\n    @IsNumber()\n    @IsIn([0, 1])\n    status: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StorageModule.html":{"url":"modules/StorageModule.html","title":"module - StorageModule","body":"\n                   \n\n\n\n\n    Modules\n    StorageModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/storage/storage.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot()\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.module.ts:51\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { S3Client } from \"@aws-sdk/client-s3\";\nimport { DynamicModule, Global, Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport * as Joi from \"joi\";\nimport { LocalFileStorage } from \"./adapters/local.storage\";\nimport { S3FileStorage } from \"./adapters/s3.storage\";\nimport { FilesService } from \"./files.service\";\nimport { FILE_STORAGE, FileStorage } from \"./storage.types\";\n\ntype Driver = \"local\" | \"s3\";\n\nexport const CONFIG_STORAGE_SCHEMA = {\n    STORAGE_DRIVER: Joi.string().valid(\"local\", \"s3\").default(\"local\"),\n    LOCAL_STORAGE_DIR: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"local\",\n        then: Joi.string().default(\"uploads\"),\n    }),\n    S3_REGION: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_BUCKET: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_ACCESS_KEY_ID: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_SECRET_ACCESS_KEY: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_ENDPOINT: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.optional(),\n    }),\n    S3_FORCE_PATH_STYLE: Joi.boolean().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.boolean().default(false),\n    }),\n    S3_PUBLIC_BASE_URL: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n};\n\n@Global()\n@Module({})\nexport class StorageModule {\n    static forRoot(): DynamicModule {\n        return {\n            module: StorageModule,\n            imports: [ConfigModule.forRoot({ isGlobal: true })],\n            providers: [\n                {\n                    provide: FILE_STORAGE,\n                    inject: [ConfigService],\n                    useFactory: (cfg: ConfigService): FileStorage => {\n                        const driver = cfg.get(\"STORAGE_DRIVER\");\n                        if (driver === \"s3\") {\n                            return new S3FileStorage(\n                                new S3Client({\n                                    region: cfg.get(\"S3_REGION\"),\n                                    endpoint: cfg.get(\"S3_ENDPOINT\"),\n                                    forcePathStyle: cfg.get(\n                                        \"S3_FORCE_PATH_STYLE\",\n                                    ),\n                                    credentials: {\n                                        accessKeyId:\n                                            cfg.get(\n                                                \"S3_ACCESS_KEY_ID\",\n                                            )!,\n                                        secretAccessKey: cfg.get(\n                                            \"S3_SECRET_ACCESS_KEY\",\n                                        )!,\n                                    },\n                                }),\n                                cfg.get(\"S3_BUCKET\")!,\n                                cfg.get(\"S3_PUBLIC_BASE_URL\"),\n                            );\n                        }\n                        // local\n                        return new LocalFileStorage(\n                            cfg.getOrThrow(\"LOCAL_STORAGE_DIR\"),\n                        );\n                    },\n                },\n            ],\n            exports: [FILE_STORAGE],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.decorator.ts\n        \n\n\n            \n                Description\n            \n            \n                Values of the user token\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from \"@nestjs/common\";\n\nexport const Token = createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n);\n\n/**\n * Values of the user token\n */\nexport interface TokenPayload {\n    sub: string; // Subject (client_id for client credentials)\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenRequestDto.html":{"url":"classes/TokenRequestDto.html","title":"class - TokenRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/dto/token-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                client_id\n                            \n                            \n                                    \n                                    \n                                client_secret\n                            \n                            \n                                    \n                                    \n                                    \n                                grant_type\n                            \n                            \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The client identifier', examples: undefined})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-request.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        client_secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The client secret', examples: undefined})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-request.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        grant_type\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The grant type', enum: undefined, examples: undefined})@IsString()@IsIn(['client_credentials'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The scope of the access request', examples: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-request.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsString } from \"class-validator\";\n\nexport class TokenRequestDto {\n    @ApiProperty({\n        description: \"The grant type\",\n        enum: [\"client_credentials\"],\n        examples: [\"client_credentials\"],\n    })\n    @IsString()\n    @IsIn([\"client_credentials\"])\n    grant_type: \"client_credentials\";\n\n    @ApiProperty({\n        description: \"The client identifier\",\n        examples: [\"my-client-id\"],\n    })\n    @IsString()\n    client_id: string;\n\n    @ApiProperty({\n        description: \"The client secret\",\n        examples: [\"my-client-secret\"],\n    })\n    @IsString()\n    client_secret: string;\n\n    @ApiProperty({\n        description: \"The scope of the access request\",\n        examples: [\"openid\"],\n        required: false,\n    })\n    scope?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenResponse.html":{"url":"classes/TokenResponse.html","title":"class - TokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/token-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access_token\n                            \n                            \n                                expires_in\n                            \n                            \n                                    Optional\n                                refresh_token\n                            \n                            \n                                token_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        refresh_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TokenResponse {\n    access_token: string;\n    refresh_token?: string;\n    token_type: \"Bearer\";\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenResponseDto.html":{"url":"classes/TokenResponseDto.html","title":"class - TokenResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/dto/token-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                access_token\n                            \n                            \n                                    \n                                expires_in\n                            \n                            \n                                    \n                                    Optional\n                                scope\n                            \n                            \n                                    \n                                token_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The access token', examples: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The lifetime in seconds of the access token', examples: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The scope of the access token', examples: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-response.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token_type\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The type of the token', examples: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class TokenResponseDto {\n    @ApiProperty({\n        description: \"The access token\",\n        examples: [\"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...\"],\n    })\n    access_token: string;\n\n    @ApiProperty({\n        description: \"The type of the token\",\n        examples: [\"Bearer\"],\n    })\n    token_type: \"Bearer\";\n\n    @ApiProperty({\n        description: \"The lifetime in seconds of the access token\",\n        examples: [3600],\n    })\n    expires_in: number;\n\n    @ApiProperty({\n        description: \"The scope of the access token\",\n        examples: [\"openid\"],\n        required: false,\n    })\n    scope?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateKeyDto.html":{"url":"classes/UpdateKeyDto.html","title":"class - UpdateKeyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateKeyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-update.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        OmitType(KeyImportDto, [\n    \"privateKey\",\n] as const)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { KeyImportDto } from \"./key-import.dto\";\n\nexport class UpdateKeyDto extends OmitType(KeyImportDto, [\n    \"privateKey\",\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VCT.html":{"url":"classes/VCT.html","title":"class - VCT","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VCT\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/credential-config.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                extends\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                extends#integrity\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                schema_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                schema_uri#integrity\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        extends\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        extends#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        schema_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        schema_uri#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmpty, IsOptional, IsString } from \"class-validator\";\n\nexport class VCT {\n    @ApiProperty({\n        required: false,\n    })\n    @IsEmpty()\n    vct?: string;\n    @IsOptional()\n    @IsString()\n    name?: string;\n    @IsOptional()\n    @IsString()\n    description?: string;\n    @IsOptional()\n    @IsString()\n    extends?: string;\n    @IsOptional()\n    @IsString()\n    \"extends#integrity\"?: string;\n    @IsOptional()\n    @IsString()\n    schema_uri?: string;\n    @IsOptional()\n    @IsString()\n    \"schema_uri#integrity\"?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VerifierModule.html":{"url":"modules/VerifierModule.html","title":"module - VerifierModule","body":"\n                   \n\n\n\n\n    Modules\n    VerifierModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VerifierModule\n\n\n\ncluster_VerifierModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/verifier.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            PresentationsModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { RegistrarModule } from \"../registrar/registrar.module\";\nimport { SessionModule } from \"../session/session.module\";\nimport { Oid4vpModule } from \"./oid4vp/oid4vp.module\";\nimport { PresentationsModule } from \"./presentations/presentations.module\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        RegistrarModule,\n        SessionModule,\n        HttpModule,\n        PresentationsModule,\n        Oid4vpModule,\n    ],\n})\nexport class VerifierModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfig.html":{"url":"classes/WebHookAuthConfig.html","title":"class - WebHookAuthConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhook authentication.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApiKeyConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:41\n                        \n                    \n\n            \n                \n                    Configuration for API key authentication.\nThis is required if the type is 'apiKey'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['apiKey'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:34\n                        \n                    \n\n            \n                \n                    The type of authentication used for the webhook.\nCurrently, only 'apiKey' is supported.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsIn, IsObject, IsOptional, IsString } from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = \"apiKey\";\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn([\"apiKey\"])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebhookConfig.html":{"url":"classes/WebhookConfig.html","title":"class - WebhookConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebhookConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhooks used in various services.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                auth\n                            \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebHookAuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:60\n                        \n                    \n\n            \n                \n                    Optional authentication configuration for the webhook.\nIf not provided, no authentication will be used.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:52\n                        \n                    \n\n            \n                \n                    The URL to which the webhook will send notifications.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsIn, IsObject, IsOptional, IsString } from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = \"apiKey\";\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn([\"apiKey\"])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebhookResponse.html":{"url":"classes/WebhookResponse.html","title":"class - WebhookResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebhookResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Response from a webhook to receive credentials.\n\n            \n\n\n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    Record\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/webhook/webhook.service.ts:12\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport { Injectable } from \"@nestjs/common\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Notification, Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { SessionLoggerService } from \"../logger/session-logger.service\";\nimport { SessionLogContext } from \"../logger/session-logger-context\";\n\n/**\n * Response from a webhook to receive credentials.\n */\nexport class WebhookResponse {\n    [key: string]: Record;\n}\n\n/**\n * Service for handling webhooks in the application.\n */\n@Injectable()\nexport class WebhookService {\n    /**\n     * Constructor for WebhookService.\n     * @param httpService\n     * @param sessionService\n     * @param sessionLogger\n     */\n    constructor(\n        private httpService: HttpService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n    ) {}\n\n    /**\n     * Sends a webhook with the optional provided credentials, return the response data.\n     * @param session\n     * @param logContext\n     * @param credentials\n     * @param expectResponse Whether to expect a response from the webhook\n     */\n    sendWebhook(\n        session: Session,\n        logContext: SessionLogContext,\n        credentials?: any[],\n        expectResponse = true,\n    ) {\n        const headers: Record = {};\n        if (\n            session.claimsWebhook!.auth &&\n            session.claimsWebhook!.auth.type === \"apiKey\"\n        ) {\n            headers[session.claimsWebhook!.auth.config.headerName] =\n                session.claimsWebhook!.auth.config.value;\n        }\n        this.sessionLogger.logSession(logContext, \"Sending webhook\", {\n            webhookUrl: session.claimsWebhook!.url,\n            authType: session.claimsWebhook!.auth?.type || \"none\",\n        });\n\n        return firstValueFrom(\n            this.httpService.post(\n                session.claimsWebhook!.url,\n                {\n                    credentials,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data && expectResponse) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n                return webhookResponse.data;\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n\n    /**\n     * Sends a webhook notification for a session.\n     * @param session\n     * @param logContext\n     * @param notification\n     */\n    async sendWebhookNotification(\n        session: Session,\n        logContext: SessionLogContext,\n        notification: Notification,\n    ) {\n        const headers: Record = {};\n        const webhook = session.notifyWebhook!;\n\n        if (webhook.auth && webhook.auth.type === \"apiKey\") {\n            headers[webhook.auth.config.headerName] = webhook.auth.config.value;\n        }\n        this.sessionLogger.logSession(\n            logContext,\n            \"Sending webhook notification\",\n            {\n                webhookUrl: webhook.url,\n                authType: webhook.auth?.type || \"none\",\n            },\n        );\n\n        await firstValueFrom(\n            this.httpService.post(\n                webhook.url,\n                {\n                    notification,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook notification sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WebhookService.html":{"url":"injectables/WebhookService.html","title":"injectable - WebhookService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WebhookService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling webhooks in the application.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendWebhook\n                            \n                            \n                                    Async\n                                sendWebhookNotification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, sessionService: SessionService, sessionLogger: SessionLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/webhook/webhook.service.ts:20\n                            \n                        \n\n                \n                    \n                            Constructor for WebhookService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendWebhook\n                        \n                    \n                \n            \n            \n                \nsendWebhook(session: Session, logContext: SessionLogContext, credentials?: any[], expectResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/webhook/webhook.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Sends a webhook with the optional provided credentials, return the response data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                logContext\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                credentials\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                expectResponse\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    Whether to expect a response from the webhook\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendWebhookNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendWebhookNotification(session: Session, logContext: SessionLogContext, notification: Notification)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/webhook/webhook.service.ts:111\n                        \n                    \n\n\n            \n                \n                        Sends a webhook notification for a session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                logContext\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notification\n                                            \n                                                            Notification\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport { Injectable } from \"@nestjs/common\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Notification, Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { SessionLoggerService } from \"../logger/session-logger.service\";\nimport { SessionLogContext } from \"../logger/session-logger-context\";\n\n/**\n * Response from a webhook to receive credentials.\n */\nexport class WebhookResponse {\n    [key: string]: Record;\n}\n\n/**\n * Service for handling webhooks in the application.\n */\n@Injectable()\nexport class WebhookService {\n    /**\n     * Constructor for WebhookService.\n     * @param httpService\n     * @param sessionService\n     * @param sessionLogger\n     */\n    constructor(\n        private httpService: HttpService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n    ) {}\n\n    /**\n     * Sends a webhook with the optional provided credentials, return the response data.\n     * @param session\n     * @param logContext\n     * @param credentials\n     * @param expectResponse Whether to expect a response from the webhook\n     */\n    sendWebhook(\n        session: Session,\n        logContext: SessionLogContext,\n        credentials?: any[],\n        expectResponse = true,\n    ) {\n        const headers: Record = {};\n        if (\n            session.claimsWebhook!.auth &&\n            session.claimsWebhook!.auth.type === \"apiKey\"\n        ) {\n            headers[session.claimsWebhook!.auth.config.headerName] =\n                session.claimsWebhook!.auth.config.value;\n        }\n        this.sessionLogger.logSession(logContext, \"Sending webhook\", {\n            webhookUrl: session.claimsWebhook!.url,\n            authType: session.claimsWebhook!.auth?.type || \"none\",\n        });\n\n        return firstValueFrom(\n            this.httpService.post(\n                session.claimsWebhook!.url,\n                {\n                    credentials,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data && expectResponse) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n                return webhookResponse.data;\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n\n    /**\n     * Sends a webhook notification for a session.\n     * @param session\n     * @param logContext\n     * @param notification\n     */\n    async sendWebhookNotification(\n        session: Session,\n        logContext: SessionLogContext,\n        notification: Notification,\n    ) {\n        const headers: Record = {};\n        const webhook = session.notifyWebhook!;\n\n        if (webhook.auth && webhook.auth.type === \"apiKey\") {\n            headers[webhook.auth.config.headerName] = webhook.auth.config.value;\n        }\n        this.sessionLogger.logSession(\n            logContext,\n            \"Sending webhook notification\",\n            {\n                webhookUrl: webhook.url,\n                authType: webhook.auth?.type || \"none\",\n            },\n        );\n\n        await firstValueFrom(\n            this.httpService.post(\n                webhook.url,\n                {\n                    notification,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook notification sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WellKnownController.html":{"url":"controllers/WellKnownController.html","title":"controller - WellKnownController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WellKnownController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/.well-known\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI well-known endpoints.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authzMetadata\n                            \n                            \n                                    \n                                    \n                                getJwks\n                            \n                            \n                                    \n                                    \n                                    \n                                issuerMetadata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    authzMetadata(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('oauth-authorization-server')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:59\n                        \n                    \n\n\n            \n                \n                        Authorization Server Metadata\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServerResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJwks(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Header('Content-Type', 'application/jwk-set+json')@Get('jwks.json')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:71\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for the authorization server.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        issuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    issuerMetadata(session: Session, contentType: MediaType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get OpenID4VCI issuer metadata', description: 'Returns the OpenID4VCI issuer metadata.'})@ApiProduces(MediaType.APPLICATION_JSON, MediaType.APPLICATION_JWT)@Get('openid-credential-issuer')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:47\n                        \n                    \n\n\n            \n                \n                        Retrieves the OpenID4VCI issuer metadata for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                contentType\n                                            \n                                                            MediaType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, UseGuards } from \"@nestjs/common\";\nimport {\n    ApiExcludeController,\n    ApiOperation,\n    ApiParam,\n    ApiProduces,\n} from \"@nestjs/swagger\";\nimport { Session } from \"../session/entities/session.entity\";\nimport { SessionEntity } from \"../session/session.decorator\";\nimport { SessionGuard } from \"../session/session.guard\";\nimport { ContentType } from \"../utils/mediaType/media-type.decorator\";\nimport { MediaType } from \"../utils/mediaType/media-type.enum\";\nimport { JwksResponseDto } from \"./dto/jwks-response.dto\";\nimport { Oauth2AuthorizationServerResponse } from \"./dto/oauth-authorization-server-response.dto\";\nimport { WellKnownService } from \"./well-known.service\";\n\n/**\n * Controller for the OpenID4VCI well-known endpoints.\n */\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@UseGuards(SessionGuard)\n@ApiParam({\n    name: \"session\",\n    required: true,\n})\n@Controller(\":session/.well-known\")\nexport class WellKnownController {\n    /**\n     * Constructor for WellKnownController.\n     * @param wellKnownService\n     */\n    constructor(private readonly wellKnownService: WellKnownService) {}\n\n    /**\n     * Retrieves the OpenID4VCI issuer metadata for a given tenant.\n     * @param tenantId\n     * @param contentType\n     * @returns\n     */\n    @ApiOperation({\n        summary: \"Get OpenID4VCI issuer metadata\",\n        description: \"Returns the OpenID4VCI issuer metadata.\",\n    })\n    //we can not set the accept in the apiheader via swagger.\n    @ApiProduces(MediaType.APPLICATION_JSON, MediaType.APPLICATION_JWT)\n    @Get(\"openid-credential-issuer\")\n    issuerMetadata(\n        @SessionEntity() session: Session,\n        @ContentType() contentType: MediaType,\n    ) {\n        return this.wellKnownService.getIssuerMetadata(session, contentType);\n    }\n\n    /**\n     * Authorization Server Metadata\n     * @returns\n     */\n    @Get(\"oauth-authorization-server\")\n    authzMetadata(\n        @SessionEntity() session: Session,\n    ): Oauth2AuthorizationServerResponse {\n        return this.wellKnownService.getAuthzMetadata(session);\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for the authorization server.\n     * @returns\n     */\n    @Header(\"Content-Type\", \"application/jwk-set+json\")\n    @Get(\"jwks.json\")\n    getJwks(@SessionEntity() session: Session): Promise {\n        return this.wellKnownService.getJwks(session.tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WellKnownService.html":{"url":"injectables/WellKnownService.html","title":"injectable - WellKnownService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WellKnownService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to handle well-known endpoints and metadata retrieval.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAuthzMetadata\n                            \n                            \n                                    Async\n                                getIssuerMetadata\n                            \n                            \n                                getJwks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(oid4vciService: Oid4vciService, cryptoService: CryptoService, authorizeService: AuthorizeService, cryptoImplementationService: CryptoImplementationService)\n                    \n                \n                        \n                            \n                                Defined in src/well-known/well-known.service.ts:16\n                            \n                        \n\n                \n                    \n                            Constructor for WellKnownService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        oid4vciService\n                                                  \n                                                        \n                                                                        Oid4vciService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authorizeService\n                                                  \n                                                        \n                                                                        AuthorizeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoImplementationService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthzMetadata\n                        \n                    \n                \n            \n            \n                \ngetAuthzMetadata(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:77\n                        \n                    \n\n\n            \n                \n                        Returns the OAuth 2.0 Authorization Server metadata for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServerResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getIssuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuerMetadata(session: Session, contentType: MediaType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Retrieves the issuer metadata for a given tenant for the specified content type.\nThe metadata can be returned in two formats:\n\nan unsigned JSON document using the media type application/json, or\na signed JSON Web Token (JWT) containing the Credential Issuer Metadata in its payload using the media type application/jwt.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                contentType\n                                            \n                                                            MediaType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getJwks\n                        \n                    \n                \n            \n            \n                \ngetJwks(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:87\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { CryptoImplementationService } from \"../crypto/key/crypto-implementation/crypto-implementation.service\";\nimport { AuthorizeService } from \"../issuer/authorize/authorize.service\";\nimport { Oid4vciService } from \"../issuer/oid4vci/oid4vci.service\";\nimport { Session } from \"../session/entities/session.entity\";\nimport { MediaType } from \"../utils/mediaType/media-type.enum\";\nimport { CredentialIssuerMetadataDto } from \"./dto/credential-issuer-metadata.dto\";\nimport { JwksResponseDto } from \"./dto/jwks-response.dto\";\nimport { Oauth2AuthorizationServerResponse } from \"./dto/oauth-authorization-server-response.dto\";\n\n/**\n * Service to handle well-known endpoints and metadata retrieval.\n */\n@Injectable()\nexport class WellKnownService {\n    /**\n     * Constructor for WellKnownService.\n     * @param oid4vciService\n     * @param cryptoService\n     * @param authorizeService\n     */\n    constructor(\n        private readonly oid4vciService: Oid4vciService,\n        private readonly cryptoService: CryptoService,\n        private readonly authorizeService: AuthorizeService,\n        private readonly cryptoImplementationService: CryptoImplementationService,\n    ) {}\n\n    /**\n     * Retrieves the issuer metadata for a given tenant for the specified content type.\n     * The metadata can be returned in two formats:\n     * - an unsigned JSON document using the media type application/json, or\n     * - a signed JSON Web Token (JWT) containing the Credential Issuer Metadata in its payload using the media type application/jwt.\n     * @param tenantId\n     * @param contentType\n     * @returns\n     */\n    async getIssuerMetadata(session: Session, contentType: MediaType) {\n        const metadata = (await this.oid4vciService.issuerMetadata(session))\n            .credentialIssuer as unknown as CredentialIssuerMetadataDto;\n\n        if (contentType === MediaType.APPLICATION_JWT) {\n            const keyId = await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                \"access\",\n            );\n            return this.cryptoService.signJwt(\n                {\n                    typ: \"openidvci-issuer-metadata+jwt\",\n                    alg: this.cryptoImplementationService.getAlg(),\n                    x5c: await this.cryptoService.getCertChain(\n                        \"access\",\n                        session.tenantId,\n                    ),\n                },\n                {\n                    ...metadata,\n                    iss: metadata.credential_issuer,\n                    sub: metadata.credential_issuer,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    // [Review]: should we add `exp` value here?\n                    //MM: the value makes sense when we cache the issuer metadata so it must not be signed on every request. Like when it is issued every hour, its lifetime is 1 hour and the jwt is in the cache.\n                },\n                session.tenantId,\n                keyId,\n            );\n        }\n\n        return metadata;\n    }\n\n    /**\n     * Returns the OAuth 2.0 Authorization Server metadata for a given tenant.\n     * @returns\n     */\n    getAuthzMetadata(session: Session): Oauth2AuthorizationServerResponse {\n        return this.authorizeService.authzMetadata(\n            session,\n        ) as Oauth2AuthorizationServerResponse;\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for a given tenant.\n     * @returns\n     */\n    getJwks(tenantId: string): Promise {\n        return this.cryptoService.getJwks(tenantId).then((key) => ({\n            keys: [key],\n        }));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/dto/oidc-discovery.dto.ts\n            \n            interface\n            OidcDiscoveryDto\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            AUTH_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            DEFAULT_AUTH_CLIENT_ID\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            DEFAULT_AUTH_CLIENT_SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            DEFAULT_JWT_SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/client.service.ts\n            \n            injectable\n            ClientService\n            \n                60 %\n                (6/10)\n            \n        \n        \n            \n                \n                src/auth/client.service.ts\n            \n            interface\n            Client\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/client-credentials.dto.ts\n            \n            class\n            ClientCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/oidc-discovery.dto.ts\n            \n            interface\n            OidcDiscoveryDto\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                src/auth/dto/token-response.dto.ts\n            \n            class\n            TokenResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/entitites/client.entity.ts\n            \n            entity\n            ClientEntry\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/entitites/client.entity.ts\n            \n            type alias\n            ClientStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.service.ts\n            \n            injectable\n            JwtService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/auth/jwt.service.ts\n            \n            interface\n            GenerateTokenOptions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                        src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/token.decorator.ts\n            \n            interface\n            TokenPayload\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/auth/token.decorator.ts\n            \n            variable\n            Token\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/crypto.service.ts\n            \n            injectable\n            CryptoService\n            \n                90 %\n                (19/21)\n            \n        \n        \n            \n                \n                        src/crypto/crypto.service.ts\n            \n            variable\n            ECDSA_P256\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/encryption/encryption.service.ts\n            \n            injectable\n            EncryptionService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/crypto/key/adapters/db-key.service.ts\n            \n            class\n            DBKeyService\n            \n                66 %\n                (10/15)\n            \n        \n        \n            \n                \n                src/crypto/key/adapters/vault-key.service.ts\n            \n            class\n            VaultKeyService\n            \n                47 %\n                (9/19)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.module.ts\n            \n            variable\n            CRYPTO_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n            \n            injectable\n            CryptoImplementationService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n            \n            type alias\n            CryptoType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            interface\n            CryptoImplementation\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            KeyPair\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            Signer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            Verifier\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/ed25519.ts\n            \n            variable\n            ED25519\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-import.dto.ts\n            \n            class\n            Key\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-import.dto.ts\n            \n            class\n            KeyImportDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-object.dto.ts\n            \n            class\n            KeyObj\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-response.dto.ts\n            \n            class\n            KeyResponseDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-update.dto.ts\n            \n            class\n            UpdateKeyDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/entities/cert.entity.ts\n            \n            entity\n            CertEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/entities/cert.entity.ts\n            \n            type alias\n            CertificateType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/entities/keys.entity.ts\n            \n            entity\n            KeyEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/entities/keys.entity.ts\n            \n            type alias\n            KeyUsage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/crypto/key/key.controller.ts\n            \n            controller\n            KeyController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/crypto/key/key.module.ts\n            \n            variable\n            KEY_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/key.service.ts\n            \n            class\n            KeyService\n            \n                66 %\n                (8/12)\n            \n        \n        \n            \n                \n                        src/database/database.module.ts\n            \n            variable\n            DB_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.controller.ts\n            \n            controller\n            AuthorizeController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            injectable\n            AuthorizeService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            interface\n            ParsedAccessTokenAuthorizationCodeRequestGrant\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            interface\n            ParsedAccessTokenPreAuthorizedCodeRequestGrant\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/issuer/authorize/dto/authorize-request.dto.ts\n            \n            class\n            AuthorizeQueries\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/issuer/authorize/dto/par-response.dto.ts\n            \n            class\n            ParResponseDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/credentials-metadata.controller.ts\n            \n            controller\n            CredentialsMetadataController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/dto/credential-config.dto.ts\n            \n            class\n            VCT\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/dto/schema-response.dto.ts\n            \n            class\n            SchemaResponse\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credential-config/credential-config.service.ts\n            \n            injectable\n            CredentialConfigService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credentials.controller.ts\n            \n            controller\n            CredentialsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credentials.service.ts\n            \n            injectable\n            CredentialsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/issuer/credentials/dto/credential-config-create.dto.ts\n            \n            class\n            CredentialConfigCreate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            entity\n            CredentialConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.ts\n            \n            class\n            AllowListPolicy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.ts\n            \n            class\n            AttestationBasedPolicy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.ts\n            \n            class\n            EmbeddedDisclosurePolicy\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.ts\n            \n            class\n            NoneTrustPolicy\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.ts\n            \n            class\n            PolicyCredential\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.ts\n            \n            class\n            RootOfTrustPolicy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                        src/issuer/credentials/entities/policies.ts\n            \n            type alias\n            AnyPolicy\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthConfigValidator\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationConfigDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationUrlConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            PresentationDuringIssuanceConfig\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            type alias\n            AuthenticationConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/issuance.dto.ts\n            \n            class\n            CredentialConfigMapping\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/issuance.dto.ts\n            \n            class\n            IssuanceDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/entities/credential-issuance-binding.entity.ts\n            \n            entity\n            CredentialIssuanceBinding\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/issuance/entities/issuance-config.entity.ts\n            \n            entity\n            IssuanceConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/issuance/issuance.controller.ts\n            \n            controller\n            IssuanceController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/issuance/issuance.service.ts\n            \n            injectable\n            IssuanceService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/issuer/issuer-management/issuer-management.controller.ts\n            \n            controller\n            IssuerManagementController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/issuer/issuer.module.ts\n            \n            variable\n            ISSUER_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/notification-request.dto.ts\n            \n            class\n            NotificationRequestDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/offer-request.dto.ts\n            \n            class\n            OfferRequestDto\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/offer-request.dto.ts\n            \n            class\n            OfferResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/entities/display.entity.ts\n            \n            entity\n            DisplayEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/issuer/oid4vci/entities/display.entity.ts\n            \n            type alias\n            DisplayInfo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/oid4vci.controller.ts\n            \n            controller\n            Oid4vciController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/oid4vci.service.ts\n            \n            injectable\n            Oid4vciService\n            \n                81 %\n                (9/11)\n            \n        \n        \n            \n                \n                        src/issuer/oid4vci/util.ts\n            \n            function\n            getHeadersFromRequest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/dto/status-update.dto.ts\n            \n            class\n            StatusUpdateDto\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/status-list/entities/status-list.entity.ts\n            \n            entity\n            StatusListEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/entities/status-mapping.entity.ts\n            \n            entity\n            StatusMapping\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/status-list.controller.ts\n            \n            controller\n            StatusListController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/issuer/status-list/status-list.service.ts\n            \n            injectable\n            StatusListService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/oauth/dto/token-request.dto.ts\n            \n            class\n            TokenRequestDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/oauth/dto/token-response.dto.ts\n            \n            class\n            TokenResponseDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/oauth/oauth.controller.ts\n            \n            controller\n            OAuthController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/oauth/oauth.module.ts\n            \n            variable\n            OAUTH_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/oauth/oauth.service.ts\n            \n            injectable\n            OAuthService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/registrar/dto/access-certificate-response.ts\n            \n            interface\n            AccessCertificateResponse\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/registrar/entities/registrar.entity.ts\n            \n            entity\n            RegistrarEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/registrar/registrar.module.ts\n            \n            variable\n            REGISTRAR_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/registrar/registrar.service.ts\n            \n            injectable\n            RegistrarService\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/session/entities/session.entity.ts\n            \n            entity\n            Session\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/session/entities/session.entity.ts\n            \n            type alias\n            Notification\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/session/session.controller.ts\n            \n            controller\n            SessionController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                        src/session/session.decorator.ts\n            \n            variable\n            SessionEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/session/session.guard.ts\n            \n            guard\n            SessionGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/session/session.module.ts\n            \n            variable\n            SESSION_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/session/session.service.ts\n            \n            injectable\n            SessionService\n            \n                81 %\n                (9/11)\n            \n        \n        \n            \n                \n                src/storage/adapters/local.storage.ts\n            \n            class\n            LocalFileStorage\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/storage/adapters/s3.storage.ts\n            \n            class\n            S3FileStorage\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/storage/files.service.ts\n            \n            injectable\n            FilesService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/storage/storage.module.ts\n            \n            variable\n            CONFIG_STORAGE_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/storage.module.ts\n            \n            type alias\n            Driver\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/storage/storage.types.ts\n            \n            interface\n            FileStorage\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            variable\n            FILE_STORAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            type alias\n            PutOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            type alias\n            StoredObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/logger/logger-config.service.ts\n            \n            injectable\n            LoggerConfigService\n            \n                23 %\n                (3/13)\n            \n        \n        \n            \n                \n                src/utils/logger/logger-config.service.ts\n            \n            interface\n            LoggerConfiguration\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger-context.ts\n            \n            interface\n            SessionLogContext\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/utils/logger/session-logger.decorator.ts\n            \n            variable\n            SESSION_LOGGER_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/logger/session-logger.decorator.ts\n            \n            variable\n            SessionLogger\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger.interceptor.ts\n            \n            injectable\n            SessionLoggerInterceptor\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger.service.ts\n            \n            injectable\n            SessionLoggerService\n            \n                85 %\n                (12/14)\n            \n        \n        \n            \n                \n                        src/utils/mediaType/media-type.decorator.ts\n            \n            variable\n            ContentType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            ApiKeyConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebHookAuthConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebhookConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/utils/webhook/webhook.dto.ts\n            \n            type alias\n            AuthConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.service.ts\n            \n            class\n            WebhookResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.service.ts\n            \n            injectable\n            WebhookService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/authorization-response.dto.ts\n            \n            class\n            AuthorizationResponse\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n            \n            interface\n            PresentationRequestOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/presentation-request.dto.ts\n            \n            class\n            PresentationRequest\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/oid4vp.controller.ts\n            \n            controller\n            Oid4vpController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/oid4vp.service.ts\n            \n            injectable\n            Oid4vpService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/verifier/presentations/dto/auth-response.dto.ts\n            \n            interface\n            AuthResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/dto/presentation-config-create.dto.ts\n            \n            class\n            PresentationConfigCreateDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/verifier/presentations/dto/vp-request.dto.ts\n            \n            class\n            RegistrationCertificateRequest\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            entity\n            PresentationConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            PresentationAttachment\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/verifier/presentations/presentations.controller.ts\n            \n            controller\n            PresentationManagementController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/verifier/presentations/presentations.service.ts\n            \n            injectable\n            PresentationsService\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/verifier/resolver/dto/issuer-metadata.dto.ts\n            \n            interface\n            IssuerMetadata\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/resolver/resolver.service.ts\n            \n            injectable\n            ResolverService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/well-known/dto/credential-issuer-metadata.dto.ts\n            \n            class\n            CredentialIssuerMetadataDto\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/well-known/dto/jwks-response.dto.ts\n            \n            class\n            EC_Public\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/well-known/dto/jwks-response.dto.ts\n            \n            class\n            JwksResponseDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/well-known/dto/oauth-authorization-server-response.dto.ts\n            \n            class\n            Oauth2AuthorizationServerResponse\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/well-known/well-known.controller.ts\n            \n            controller\n            WellKnownController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/well-known/well-known.service.ts\n            \n            injectable\n            WellKnownService\n            \n                100 %\n                (5/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/client-s3 : ^3.864.0\n        \n            @aws-sdk/s3-request-presigner : ^3.864.0\n        \n            @badgateway/oauth2-client : ^3.3.0\n        \n            @nestjs/axios : ^4.0.1\n        \n            @nestjs/common : ^11.1.6\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.6\n        \n            @nestjs/event-emitter : ^3.0.1\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.6\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/serve-static : ^5.0.3\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/terminus : ^11.0.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @openid4vc/oauth2 : 0.3.0-alpha-20250714110838\n        \n            @openid4vc/openid4vci : 0.3.0-alpha-20250714110838\n        \n            @openid4vc/openid4vp : 0.3.0-alpha-20250714110838\n        \n            @openid4vc/utils : 0.3.0-alpha-20250714110838\n        \n            @peculiar/x509 : ^1.13.0\n        \n            @sd-jwt/crypto-nodejs : ^0.14.0\n        \n            @sd-jwt/jwt-status-list : ^0.14.0\n        \n            @sd-jwt/sd-jwt-vc : ^0.14.1\n        \n            @sd-jwt/types : ^0.14.0\n        \n            @willsoto/nestjs-prometheus : ^6.0.2\n        \n            axios : ^1.11.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            joi : ^18.0.0\n        \n            jose : ^6.0.12\n        \n            jwks-rsa : ^3.2.0\n        \n            mysql2 : ^3.14.3\n        \n            nestjs-pino : ^4.4.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.16.3\n        \n            pino-http : ^10.5.0\n        \n            pino-pretty : ^13.1.1\n        \n            prom-client : ^15.1.3\n        \n            qrcode : ^1.5.4\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            sqlite3 : ^5.1.7\n        \n            typeorm : ^0.3.25\n        \n            uuid : ^11.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MediaType   (src/.../media-type.enum.ts)\n                        \n                        \n                            PolicyType   (src/.../policies.ts)\n                        \n                        \n                            ResponseType   (src/.../presentation-request.dto.ts)\n                        \n                        \n                            SessionStatus   (src/.../session.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/mediaType/media-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        MediaType\n                    \n                \n                    \n                        \n                            Represents the media types used in the application.\n\n                        \n                    \n                        \n                            \n                                 APPLICATION_JSON\n                            \n                        \n                        \n                            \n                                Value : application/json\n                            \n                        \n                        \n                            \n                                 APPLICATION_JWT\n                            \n                        \n                        \n                            \n                                Value : application/jwt\n                            \n                        \n            \n        \n\n    src/issuer/credentials/entities/policies.ts\n    \n        \n            \n                \n                    \n                        \n                        PolicyType\n                    \n                \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n                        \n                            \n                                 ALLOW_LIST\n                            \n                        \n                        \n                            \n                                Value : allowList\n                            \n                        \n                        \n                            \n                                 ROOT_OF_TRUST\n                            \n                        \n                        \n                            \n                                Value : rootOfTrust\n                            \n                        \n                        \n                            \n                                 ATTESTATION_BASED\n                            \n                        \n                        \n                            \n                                Value : attestationBased\n                            \n                        \n            \n        \n\n    src/verifier/oid4vp/dto/presentation-request.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ResponseType\n                    \n                \n                    \n                        \n                            Enum for the type of response expected from the presentation request.\n\n                        \n                    \n                        \n                            \n                                 QRCode\n                            \n                        \n                        \n                            \n                                Value : qrcode\n                            \n                        \n                        \n                            \n                                 URI\n                            \n                        \n                        \n                            \n                                Value : uri\n                            \n                        \n            \n        \n\n    src/session/entities/session.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        SessionStatus\n                    \n                \n                        \n                            \n                                 Active\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 Fetched\n                            \n                        \n                        \n                            \n                                Value : fetched\n                            \n                        \n                        \n                            \n                                 Completed\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 Expired\n                            \n                        \n                        \n                            \n                                Value : expired\n                            \n                        \n                        \n                            \n                                 Failed\n                            \n                        \n                        \n                            \n                                Value : failed\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getHeadersFromRequest   (src/.../util.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Bootstrap function to initialize the NestJS application.\n\n\n                \n            \n        \n    \n    src/issuer/oid4vci/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getHeadersFromRequest\n                        \n                    \n                \n            \n            \n                \ngetHeadersFromRequest(req: Request)\n                \n            \n\n\n\n\n            \n                \n                        Utility function to extract headers from an Express request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     globalThis.Headers\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CryptoImplementatationModule\n\n\n\ncluster_CryptoImplementatationModule_exports\n\n\n\ncluster_CryptoImplementatationModule_providers\n\n\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_exports\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_OAuthModule\n\n\n\ncluster_OAuthModule_exports\n\n\n\ncluster_OAuthModule_providers\n\n\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nAuthModule -->\n\nCryptoModule->AuthModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nCryptoService \n\nCryptoService \n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\n\n\nEncryptionService \n\nEncryptionService \n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nOAuthModule\n\nOAuthModule\n\nOAuthModule -->\n\nCryptoModule->OAuthModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\nAuthModule -->\n\nIssuerModule->AuthModule\n\n\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nMetricModule\n\nMetricModule\n\nAppModule -->\n\nMetricModule->AppModule\n\n\n\nAuthModule -->\n\nRegistrarModule->AuthModule\n\n\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nStorageModule\n\nStorageModule\n\nAppModule -->\n\nStorageModule->AppModule\n\n\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nWellKnownService\n\nWellKnownService\n\nAppModule -->\n\nWellKnownService->AppModule\n\n\n\nAuthModule -->\n\nStatusListModule->AuthModule\n\n\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nClientService\n\nClientService\n\nAuthModule -->\n\nClientService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCryptoImplementationService \n\nCryptoImplementationService \n\n\n\nCryptoImplementatationModule\n\nCryptoImplementatationModule\n\nCryptoImplementationService  -->\n\nCryptoImplementatationModule->CryptoImplementationService \n\n\n\n\n\nCryptoImplementationService\n\nCryptoImplementationService\n\nCryptoImplementatationModule -->\n\nCryptoImplementationService->CryptoImplementatationModule\n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nIssuerModule -->\n\nWebhookService->IssuerModule\n\n\n\nOid4vpModule -->\n\nWebhookService->Oid4vpModule\n\n\n\n\n\nOAuthService \n\nOAuthService \n\nOAuthService  -->\n\nOAuthModule->OAuthService \n\n\n\n\n\nOAuthService\n\nOAuthService\n\nOAuthModule -->\n\nOAuthService->OAuthModule\n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nResolverModule\n\nResolverModule\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nResolverService \n\nResolverService \n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        18 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    16 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    25 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    48 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    15 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoImplementatationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IssuerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeyModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetricModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OAuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        Oid4vpModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PresentationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RegistrarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ResolverModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StatusListModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StorageModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VerifierModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : a middleware to interact with the EUDI Wallet\n        \n            Bugs : https://github.com/openwallet-foundation-labs/eudiplo/issues\n        \n            License : Apache-2.0\n        \n            Repository : https://github.com/openwallet-foundation-labs/eudiplo.git\n        \n            Author : Mirko Mollik \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AnyPolicy   (src/.../policies.ts)\n                        \n                        \n                            AuthConfig   (src/.../webhook.dto.ts)\n                        \n                        \n                            AuthenticationConfig   (src/.../authentication-config.dto.ts)\n                        \n                        \n                            CertificateType   (src/.../cert.entity.ts)\n                        \n                        \n                            ClientStatus   (src/.../client.entity.ts)\n                        \n                        \n                            CryptoType   (src/.../crypto-implementation.service.ts)\n                        \n                        \n                            DisplayInfo   (src/.../display.entity.ts)\n                        \n                        \n                            Driver   (src/.../storage.module.ts)\n                        \n                        \n                            KeyPair   (src/.../crypto-implementation.ts)\n                        \n                        \n                            KeyUsage   (src/.../keys.entity.ts)\n                        \n                        \n                            Notification   (src/.../session.entity.ts)\n                        \n                        \n                            PutOptions   (src/.../storage.types.ts)\n                        \n                        \n                            Signer   (src/.../crypto-implementation.ts)\n                        \n                        \n                            StoredObject   (src/.../storage.types.ts)\n                        \n                        \n                            Verifier   (src/.../crypto-implementation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/issuer/credentials/entities/policies.ts\n    \n    \n        \n            \n                \n                    \n                    AnyPolicy\n                \n            \n            \n                \n                        NoneTrustPolicy | AllowListPolicy | RootOfTrustPolicy | AttestationBasedPolicy\n\n                \n            \n        \n    \n    src/utils/webhook/webhook.dto.ts\n    \n    \n        \n            \n                \n                    \n                    AuthConfig\n                \n            \n            \n                \n                    Enum for the type of authentication used in webhooks.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/issuer/issuance/dto/authentication-config.dto.ts\n    \n    \n        \n            \n                \n                    \n                    AuthenticationConfig\n                \n            \n            \n                \n                    Union type for authentication configurations\nEach method corresponds to a specific OpenID4VC flow\n\n                \n            \n            \n                \n                        literal type | literal type | literal type\n\n                \n            \n        \n    \n    src/crypto/key/entities/cert.entity.ts\n    \n    \n        \n            \n                \n                    \n                    CertificateType\n                \n            \n            \n                \n                        \"access\" | \"signing\"\n\n                \n            \n        \n    \n    src/auth/entitites/client.entity.ts\n    \n    \n        \n            \n                \n                    \n                    ClientStatus\n                \n            \n            \n                \n                        \"init\" | \"set up\" | \"error\"\n\n                \n            \n        \n    \n    src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n    \n    \n        \n            \n                \n                    \n                    CryptoType\n                \n            \n            \n                \n                        \"ES256\" | \"Ed25519\"\n\n                \n            \n        \n    \n    src/issuer/oid4vci/entities/display.entity.ts\n    \n    \n        \n            \n                \n                    \n                    DisplayInfo\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/storage/storage.module.ts\n    \n    \n        \n            \n                \n                    \n                    Driver\n                \n            \n            \n                \n                        \"local\" | \"s3\"\n\n                \n            \n        \n    \n    src/crypto/key/crypto-implementation/crypto-implementation.ts\n    \n    \n        \n            \n                \n                    \n                    KeyPair\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Signer\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Verifier\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/crypto/key/entities/keys.entity.ts\n    \n    \n        \n            \n                \n                    \n                    KeyUsage\n                \n            \n            \n                \n                    Key usage types.\n\n                \n            \n            \n                \n                        \"sign\" | \"encrypt\"\n\n                \n            \n        \n    \n    src/session/entities/session.entity.ts\n    \n    \n        \n            \n                \n                    \n                    Notification\n                \n            \n            \n                \n                    Represents a session entity for managing user sessions in the application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/storage/storage.types.ts\n    \n    \n        \n            \n                \n                    \n                    PutOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StoredObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AUTH_VALIDATION_SCHEMA   (src/.../auth.module.ts)\n                        \n                        \n                            CONFIG_STORAGE_SCHEMA   (src/.../storage.module.ts)\n                        \n                        \n                            ContentType   (src/.../media-type.decorator.ts)\n                        \n                        \n                            CRYPTO_VALIDATION_SCHEMA   (src/.../crypto-implementation.module.ts)\n                        \n                        \n                            DB_VALIDATION_SCHEMA   (src/.../database.module.ts)\n                        \n                        \n                            DEFAULT_AUTH_CLIENT_ID   (src/.../auth.module.ts)\n                        \n                        \n                            DEFAULT_AUTH_CLIENT_SECRET   (src/.../auth.module.ts)\n                        \n                        \n                            DEFAULT_JWT_SECRET   (src/.../auth.module.ts)\n                        \n                        \n                            ECDSA_P256   (src/.../crypto.service.ts)\n                        \n                        \n                            ED25519   (src/.../ed25519.ts)\n                        \n                        \n                            FILE_STORAGE   (src/.../storage.types.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            ISSUER_VALIDATION_SCHEMA   (src/.../issuer.module.ts)\n                        \n                        \n                            KEY_VALIDATION_SCHEMA   (src/.../key.module.ts)\n                        \n                        \n                            OAUTH_VALIDATION_SCHEMA   (src/.../oauth.module.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            REGISTRAR_VALIDATION_SCHEMA   (src/.../registrar.module.ts)\n                        \n                        \n                            SESSION_LOGGER_KEY   (src/.../session-logger.decorator.ts)\n                        \n                        \n                            SESSION_VALIDATION_SCHEMA   (src/.../session.module.ts)\n                        \n                        \n                            SessionEntity   (src/.../session.decorator.ts)\n                        \n                        \n                            SessionLogger   (src/.../session-logger.decorator.ts)\n                        \n                        \n                            Token   (src/.../token.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    OIDC: Joi.string().optional(),\n    KEYCLOAK_INTERNAL_ISSUER_URL: Joi.when(\"OIDC\", {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    KEYCLOAK_ALGORITHM: Joi.when(\"OIDC\", {\n        then: Joi.string().default(\"RS256\"),\n        otherwise: Joi.string().optional(),\n    }),\n    JWT_SECRET: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_JWT_SECRET),\n    }),\n    JWT_ISSUER: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().optional().default(\"eudiplo-service\"),\n    }),\n    JWT_EXPIRES_IN: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(\"24h\"),\n    }),\n    AUTH_CLIENT_SECRET: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_SECRET),\n    }),\n    AUTH_CLIENT_ID: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_ID),\n    }),\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_AUTH_CLIENT_ID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"root\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_AUTH_CLIENT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"root\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_JWT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"supersecret\"\n                    \n                \n\n\n        \n    \n\n    src/storage/storage.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CONFIG_STORAGE_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    STORAGE_DRIVER: Joi.string().valid(\"local\", \"s3\").default(\"local\"),\n    LOCAL_STORAGE_DIR: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"local\",\n        then: Joi.string().default(\"uploads\"),\n    }),\n    S3_REGION: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_BUCKET: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_ACCESS_KEY_ID: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_SECRET_ACCESS_KEY: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_ENDPOINT: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.optional(),\n    }),\n    S3_FORCE_PATH_STYLE: Joi.boolean().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.boolean().default(false),\n    }),\n    S3_PUBLIC_BASE_URL: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/mediaType/media-type.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ContentType\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.headers[\"accept\"] as string | undefined;\n    },\n)\n                    \n                \n\n            \n                \n                    Decorator to extract the content type from the request headers.\nThis decorator can be used to determine the media type of the request.\n\n                \n            \n\n        \n    \n\n    src/crypto/key/crypto-implementation/crypto-implementation.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CRYPTO_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    CRYPTO_ALG: Joi.string().valid(\"ES256\").default(\"ES256\"),\n}\n                    \n                \n\n\n        \n    \n\n    src/database/database.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DB_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    DB_TYPE: Joi.string().valid(\"sqlite\", \"postgres\").default(\"sqlite\"),\n    DB_HOST: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PORT: Joi.number().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_USERNAME: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PASSWORD: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_DATABASE: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n}\n                    \n                \n\n\n        \n    \n\n    src/crypto/crypto.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ECDSA_P256\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    name: \"ECDSA\",\n    namedCurve: \"P-256\",\n    hash: \"SHA-256\" as const,\n}\n                    \n                \n\n\n        \n    \n\n    src/crypto/key/crypto-implementation/ed25519.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ED25519\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                \n                    \n                        Default value : {\n    alg: \"EdDSA\",\n    async generateKeyPair() {\n        const keyPair = await crypto.webcrypto.subtle.generateKey(\n            {\n                name: \"EdDSA\",\n                namedCurve: \"Ed25519\",\n            },\n            true,\n            [\"sign\", \"verify\"],\n        );\n\n        const publicKey = await crypto.webcrypto.subtle.exportKey(\n            \"jwk\",\n            keyPair.publicKey,\n        );\n        const privateKey = await crypto.webcrypto.subtle.exportKey(\n            \"jwk\",\n            keyPair.privateKey,\n        );\n\n        return { publicKey, privateKey };\n    },\n    async getSigner(privateKeyJWK: object) {\n        const privateKey = await crypto.webcrypto.subtle.importKey(\n            \"jwk\",\n            privateKeyJWK,\n            {\n                name: \"EdDSA\",\n                namedCurve: \"Ed25519\",\n            },\n            false,\n            [\"sign\"],\n        );\n\n        return async (data: string) => {\n            const signature = await crypto.webcrypto.subtle.sign(\n                \"EdDSA\",\n                privateKey,\n                new TextEncoder().encode(data),\n            );\n\n            return Buffer.from(signature).toString(\"base64url\");\n        };\n    },\n    async getVerifier(publicKeyJWK: object) {\n        const publicKey = await crypto.webcrypto.subtle.importKey(\n            \"jwk\",\n            publicKeyJWK,\n            {\n                name: \"EdDSA\",\n                namedCurve: \"Ed25519\",\n            },\n            false,\n            [\"verify\"],\n        );\n\n        return async (data: string, signatureBase64url: string) => {\n            const signature = Buffer.from(signatureBase64url, \"base64url\");\n            const isVerified = await crypto.webcrypto.subtle.verify(\n                \"EdDSA\",\n                publicKey,\n                signature,\n                new TextEncoder().encode(data),\n            );\n\n            return isVerified;\n        };\n    },\n}\n                    \n                \n\n\n        \n    \n\n    src/storage/storage.types.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FILE_STORAGE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol(\"FILE_STORAGE\")\n                    \n                \n\n\n        \n    \n\n    src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"isPublic\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/issuer/issuer.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ISSUER_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    PUBLIC_URL: Joi.string().default(\"http://localhost:3000\"),\n}\n                    \n                \n\n\n        \n    \n\n    src/crypto/key/key.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        KEY_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    KM_TYPE: Joi.string().valid(\"db\", \"vault\").default(\"db\"),\n\n    // Vault-related config\n    VAULT_URL: Joi.string().uri().when(\"KM_TYPE\", {\n        is: \"vault\",\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_TOKEN: Joi.string().when(\"KM_TYPE\", {\n        is: \"vault\",\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n}\n                    \n                \n\n\n        \n    \n\n    src/oauth/oauth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OAUTH_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    OAUTH_CLIENT_ID: Joi.string().optional(),\n    OAUTH_CLIENT_SECRET: Joi.string().optional(),\n}\n                    \n                \n\n\n        \n    \n\n    src/registrar/registrar.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REGISTRAR_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    REGISTRAR_URL: Joi.string(),\n    REGISTRAR_OIDC_URL: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_ID: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_SECRET: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n}\n                    \n                \n\n            \n                \n                    Validation schema for the registrar module.\nDefines the required environment variables and their types.\n\n                \n            \n\n        \n    \n\n    src/utils/logger/session-logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SESSION_LOGGER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"session-logger\"\n                    \n                \n\n            \n                \n                    Key for session logger metadata.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SessionLogger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n    sessionIdParam: string,\n    flowType: \"OID4VCI\" | \"OID4VP\",\n) => SetMetadata(SESSION_LOGGER_KEY, { sessionIdParam, flowType })\n                    \n                \n\n            \n                \n                    Decorator to mark methods that should have session-based logging\n\n                \n            \n\n        \n    \n\n    src/session/session.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SESSION_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    SESSION_TIDY_UP_INTERVAL: Joi.number().default(60 * 60), // default to every hour\n    SESSION_TTL: Joi.number().default(24 * 60 * 60), // default to 24 hours\n}\n                    \n                \n\n            \n                \n                    Module for managing user sessions.\n\n                \n            \n\n        \n    \n\n    src/session/session.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SessionEntity\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.session as Session;\n    },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/token.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Token\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
