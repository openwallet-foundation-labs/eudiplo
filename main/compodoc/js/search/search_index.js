var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AccessCertificateResponse.html",[0,0.545,1,3.576]],["body/interfaces/AccessCertificateResponse.html",[0,0.298,1,3.894,2,0.714,3,0.052,4,0.042,5,0.096,6,2.143,7,0.502,8,3.42,9,5.087,10,5.137,11,0.9,12,0.113,13,0.45,14,4.445,15,2.021,16,0.543,17,5.642,18,0.588,19,0.214,20,0.009,21,1.64,22,0.966,23,3.392,24,1.857,25,2.719,26,1.989,27,2.046,28,3.12,29,0.48,30,0.783,31,3.392,32,2.909,33,0.416,34,2.055,35,0.787,36,4.871,37,1.955,38,2.982,39,2.143,40,3.42,41,3.42,42,3.42,43,3.42,44,3.42,45,3.42,46,1.955,47,2.48,48,1.203,49,2.719,50,2.143,51,1.163,52,3.629,53,2.143,54,1.399,55,1.461,56,1.343,57,1.704,58,5.043,59,6.108,60,2.355,61,2.317,62,1.704,63,1.61,64,1.343,65,1.399,66,1.461,67,1.61,68,1.399,69,3.207,70,1.531,71,1.343,72,2.143,73,1.815,74,5.673,75,5.433,76,2.143,77,3.42,78,4.733,79,0.052,80,0.032,81,1.163,82,2.233,83,3.42,84,1.461,85,1.61,86,2.341,87,1.126,88,1.203,89,1.98,90,2.143,91,1.293,92,2.143,93,1.036,94,2.241,95,2.574,96,1.815,97,1.816,98,0.871,99,1.955,100,1.815,101,1.704,102,1.815,103,1.815,104,1.399,105,1.704,106,1.203,107,1.933,108,3.12,109,1.225,110,1.489,111,2.143,112,2.143,113,2.332,114,2.143,115,2.719,116,2.143,117,2.143,118,2.157,119,1.203,120,2.143,121,2.143,122,2.143,123,2.143,124,2.143,125,5.953,126,2.143,127,1.399,128,2.143,129,0.944,130,3.42,131,1.815,132,1.355,133,3.42,134,2.57,135,1.369,136,1.036,137,1.059,138,1.61,139,1.955,140,3.42,141,1.593,142,3.048,143,1.399,144,2.143,145,2.143,146,2.186,147,2.4,148,3.42,149,1.246,150,2.143,151,2.533,152,1.815,153,1.61,154,3.42,155,5.673,156,2.143,157,2.143,158,2.143,159,1.091,160,1.028,161,1.028,162,2.143,163,1.203,164,3.207,165,2.143,166,2.143,167,2.143,168,1.989,169,2.143,170,2.143,171,1.246,172,2.143,173,1.955,174,1.955,175,1.293,176,1.955,177,1.955,178,1.955,179,2.143,180,2.143,181,2.143,182,2.143,183,1.461,184,2.143,185,4.806,186,3.392,187,4.267,188,2.786,189,2.143,190,0.988,191,1.182,192,1.815,193,1.567,194,2.719,195,0.634,196,2.143,197,2.143,198,3.42,199,3.42,200,1.815,201,2.897,202,1.059,203,3.207,204,2.909,205,2.143,206,1.028,207,2.143,208,2.143,209,2.143,210,2.143,211,2.89,212,4.806,213,3.053,214,3.12,215,2.143,216,3.392,217,4.267,218,3.42,219,2.206,220,5.322,221,3.894,222,5.673,223,3.12,224,2.143,225,0.97,226,1.955,227,2.143,228,2.143,229,2.144,230,2.143,231,2.719,232,1.815,233,1.815,234,1.815,235,1.61,236,1.815,237,2.143,238,1.607,239,3.42,240,1.343,241,2.57,242,2.143,243,2.143,244,4.267,245,2.143,246,1.203,247,2.046,248,2.897,249,2.143,250,1.256,251,2.143,252,1.955,253,2.57,254,2.143,255,2.143,256,1.399,257,1.704,258,1.203,259,0.005,260,1.955,261,2.143,262,2.143,263,1.933,264,2.143,265,2.143,266,2.143,267,1.531,268,2.143,269,1.955,270,1.028,271,2.143,272,2.143,273,3.12,274,1.955,275,2.143,276,1.531,277,2.143,278,2.143,279,1.815,280,2.143,281,2.143,282,1.704,283,2.143,284,3.42,285,2.144,286,3.42,287,2.143,288,1.531,289,1.203,290,1.815,291,3.42,292,3.42,293,2.143,294,2.144,295,1.704,296,2.143,297,1.461,298,1.461,299,1.955,300,2.143,301,2.143,302,0.004]],["title/classes/ApiKeyConfig.html",[80,0.058,303,3.32]],["body/classes/ApiKeyConfig.html",[3,0.112,4,0.09,5,0.09,7,1.07,12,0.241,13,0.781,16,0.726,18,0.589,19,0.39,20,0.009,22,2.129,29,0.413,60,1.521,79,0.171,80,0.107,87,3.964,97,2.527,129,2.011,191,1.236,202,3.445,259,0.007,302,0.007,303,5.908,304,1.809,305,3.868,306,5.213,307,5.908,308,6.011,309,2.138,310,1.883,311,3.773,312,0.826,313,5.172,314,2.835,315,4.755,316,3.445,317,5.172,318,3.868,319,3.868,320,3.974,321,3.872,322,2.256,323,2.19,324,3.431,325,4.166,326,3.431,327,5.025,328,4.706,329,3.552,330,5.581,331,4.166,332,2.564,333,4.166,334,2.862,335,3.63,336,3.63,337,2.655,338,2.178,339,3.113,340,3.431,341,2.655]],["title/controllers/AppController.html",[342,1.593,343,3.576]],["body/controllers/AppController.html",[3,0.144,4,0.115,5,0.115,12,0.31,18,0.565,20,0.009,29,0.483,33,1.139,79,0.144,80,0.087,109,1.007,135,1.511,259,0.008,302,0.008,310,1.865,312,0.817,342,2.818,343,6.326,344,2.587,345,6.652,346,1.868,347,8.633,348,6.652,349,7.853,350,3.188,351,5.358,352,4.668,353,6.652,354,4.668,355,4.003,356,5.872]],["title/modules/AppModule.html",[357,1.404,358,3.32]],["body/modules/AppModule.html",[3,0.141,4,0.069,5,0.069,15,1.507,19,0.249,20,0.009,21,2.386,29,0.551,33,0.683,34,2.722,35,1.294,61,1.913,64,2.209,79,0.086,80,0.052,109,0.604,110,1.037,136,1.747,137,1.741,151,1.783,161,1.69,219,1.596,246,3.239,250,1.294,259,0.006,270,2.386,302,0.006,338,1.294,343,5.263,344,2.192,357,2.066,358,6.773,359,1.741,360,1.913,361,2.049,362,2.049,363,1.913,364,2.794,365,1.979,366,3.524,367,3.524,368,5.453,369,4.138,370,5.82,371,5.453,372,5.453,373,5.254,374,4.9,375,4.677,376,5.453,377,2.893,378,2.049,379,1.913,380,3.992,381,5.263,382,3.402,383,4.886,384,3.392,385,2.517,386,3.216,387,3.524,388,3.992,389,4.976,390,3.992,391,3.992,392,4.976,393,3.216,394,3.992,395,3.524,396,2.802,397,3.992,398,4.976,399,3.992,400,5.637,401,3.992,402,3.992,403,4.976,404,2.986,405,3.992,406,3.216,407,3.992,408,3.992,409,4.976,410,3.992,411,3.992,412,3.992,413,3.992,414,3.992,415,2.802,416,4.215,417,3.992,418,3.992,419,3.992,420,3.932,421,3.992,422,3.992,423,3.992,424,3.992,425,3.216,426,3.992,427,4.54,428,4.54,429,3.216,430,1.202,431,5.637,432,4.976,433,3.992,434,3.992,435,3.992,436,4.215,437,4.54,438,3.992,439,3.216,440,3.992,441,3.992,442,1.873,443,3.992,444,2.986,445,1.913,446,3.992,447,3.992,448,3.992,449,3.992,450,3.992,451,3.992,452,3.992,453,3.992,454,3.992,455,3.992,456,3.249,457,5.637,458,2.023,459,5.637,460,3.992,461,5.637,462,2.517,463,3.992,464,2.649,465,3.992,466,2.802,467,3.992,468,2.986,469,3.992,470,1.511,471,1.852,472,4.976,473,3.992,474,1.913,475,3.992,476,3.524,477,3.992,478,3.992,479,3.992,480,3.992,481,3.524,482,5.637,483,3.992,484,2.649,485,3.992,486,3.992]],["title/interfaces/Auth.html",[0,0.545,129,1.726]],["body/interfaces/Auth.html",[0,0.657,2,1.573,3,0.115,4,0.093,5,0.093,11,1.596,12,0.249,13,0.798,16,1.188,18,0.576,19,0.39,20,0.009,79,0.164,88,2.651,89,2.871,107,2.745,109,1.211,110,1.263,129,3.391,141,2.2,146,1.734,147,1.734,190,1.752,191,1.557,206,3.503,259,0.007,302,0.007,309,1.793,314,3.09,323,2.907,324,5.489,328,4.782,339,4.132,430,2.41,442,1.778,487,4.722,488,8.001,489,5.671,490,5.531,491,5.135,492,7.304,493,5.031,494,5.671,495,4,496,5.322,497,5.349,498,6.866,499,5.349]],["title/controllers/AuthController.html",[342,1.593,500,3.576]],["body/controllers/AuthController.html",[3,0.087,4,0.07,5,0.07,7,1.478,11,1.661,12,0.189,15,1.523,16,0.568,18,0.41,19,0.333,20,0.009,21,2.411,24,1.941,29,0.503,33,0.693,38,3.17,79,0.087,80,0.053,82,4.338,84,3.427,85,3.778,86,1.801,89,2.878,93,1.083,94,1.893,107,1.619,109,0.613,110,1.475,113,4.531,115,5.283,118,2.11,129,2.927,132,1.416,135,1.293,146,2.135,147,1.313,159,1.821,160,3.643,190,1.453,191,0.745,193,2.697,195,1.487,238,2.502,259,0.006,302,0.006,306,2.438,309,1.058,310,1.135,312,0.498,314,2.701,316,2.483,323,3.187,324,3.778,332,2.008,341,2.079,342,1.454,344,1.575,346,1.355,350,1.941,351,3.263,462,4.505,470,2.954,492,6.307,500,4.587,501,4.051,502,2.008,503,6.586,504,4.051,505,4.051,506,5.305,507,3.996,508,5.695,509,4.587,510,5.305,511,4.587,512,5.305,513,4.051,514,3.644,515,5.027,516,5.695,517,1.058,518,2.079,519,7.528,520,2.687,521,5.305,522,4.259,523,4.369,524,3.576,525,4.369,526,3.576,527,3.576,528,4.051,529,4.051,530,3.151,531,3.029,532,4.051,533,2.334,534,4.051,535,3.029,536,4.051,537,4.051,538,7.144,539,3.029,540,4.051,541,2.687,542,4.587,543,3.263,544,2.56,545,4.587,546,4.051,547,5.027,548,4.259,549,5.695,550,4.051,551,2.554,552,3.427,553,2.554,554,4.051,555,3.029,556,3.591,557,2.687,558,5.695,559,4.051,560,4.051,561,5.695,562,4.051,563,4.051,564,3.029,565,4.051,566,3.427,567,4.051,568,2.241,569,4.051,570,4.051,571,4.051,572,4.051,573,4.051,574,4.051,575,1.766,576,3.029,577,4.051,578,4.051,579,3.263,580,4.051,581,2.687,582,3.029,583,3.576,584,3.576]],["title/modules/AuthModule.html",[357,1.404,368,3.115]],["body/modules/AuthModule.html",[3,0.112,4,0.09,5,0.09,20,0.009,29,0.539,33,0.891,35,1.686,79,0.146,80,0.068,84,3.131,110,0.957,132,1.819,138,5.676,259,0.007,302,0.007,344,2.622,357,2.367,359,2.269,360,2.493,361,2.67,362,2.67,363,2.493,364,3.709,365,3.709,368,6.369,377,3.462,378,2.67,379,2.493,382,2.493,383,5.043,384,4.059,409,4.592,500,6.028,523,5.942,524,4.592,525,5.576,526,4.592,585,4.592,586,4.592,587,4.592,588,5.648,589,6.698,590,5.202,591,7.483,592,3.89,593,5.202,594,5.202,595,5.202,596,8.672,597,5.202,598,8.555,599,8.203,600,5.202,601,5.202,602,4.592,603,5.202,604,5.202,605,5.202,606,4.19,607,5.202]],["title/interfaces/AuthResponse.html",[0,0.545,608,3.32]],["body/interfaces/AuthResponse.html",[0,0.768,2,1.837,3,0.135,4,0.108,5,0.108,7,1.293,11,1.758,12,0.291,13,0.88,18,0.623,19,0.374,20,0.009,22,1.885,79,0.135,89,2.92,225,3.253,259,0.007,302,0.007,309,1.632,491,5.657,496,5.309,608,6.085,609,6.248,610,3.761,611,4.385,612,5.961,613,6.811,614,7.565,615,7.565,616,4.553,617,5.398,618,4.028,619,3.883,620,6.248,621,4.673]],["title/classes/AuthorizationResponse.html",[80,0.058,622,3.32]],["body/classes/AuthorizationResponse.html",[3,0.139,4,0.112,5,0.112,7,1.334,12,0.301,13,0.897,18,0.615,19,0.285,20,0.009,29,0.397,79,0.139,80,0.101,89,2.767,195,2.341,259,0.008,302,0.008,304,2.255,310,1.808,311,3.708,312,0.792,322,2.813,323,3.618,610,3.882,611,5.411,617,5.115,618,4.551,622,5.766,623,7.711,624,5.693,625,5.766]],["title/controllers/AuthorizeController.html",[342,1.593,626,3.576]],["body/controllers/AuthorizeController.html",[3,0.086,4,0.069,5,0.069,7,1.164,9,3.385,11,1.994,12,0.185,16,0.994,18,0.618,19,0.353,20,0.009,29,0.501,33,0.681,51,1.907,79,0.086,80,0.052,86,1.778,89,2.974,91,3.774,93,1.064,94,2.709,109,1.073,110,0.732,135,1.812,146,2.686,147,1.29,151,2.786,190,1.808,191,1.304,193,2.869,195,2.084,202,2.452,206,2.381,246,3.955,247,1.685,259,0.006,270,3.631,299,3.205,302,0.006,310,1.987,312,0.871,323,3.687,342,2.684,344,1.547,346,1.338,350,1.907,458,1.428,502,1.972,514,4.649,517,1.851,518,2.043,522,4.205,533,2.293,548,2.976,626,4.53,627,3.979,628,3.979,629,4.964,630,4.53,631,5.623,632,5.254,633,7.088,634,7.478,635,3.512,636,5.637,637,5.623,638,3.979,639,4.964,640,3.979,641,3.979,642,4.266,643,5.301,644,1.506,645,3.979,646,3.979,647,5.71,648,3.979,649,3.979,650,3.979,651,5.623,652,3.979,653,3.731,654,4.964,655,3.241,656,2.792,657,2.64,658,2.202,659,3.925,660,3.979,661,3.205,662,3.609,663,2.792,664,3.205,665,3.979,666,3.979,667,1.846,668,4.974,669,3.979,670,3.979,671,4.47,672,3.979,673,3.205,674,3.512,675,2.976,676,2.976,677,3.979,678,3.512,679,3.979,680,2.976,681,3.979,682,3.979]],["title/classes/AuthorizeQueries.html",[80,0.058,636,2.945]],["body/classes/AuthorizeQueries.html",[3,0.111,4,0.089,5,0.089,12,0.239,13,0.776,16,1.293,18,0.664,19,0.393,20,0.009,29,0.315,79,0.111,80,0.088,259,0.007,302,0.007,304,1.791,310,2.489,311,4.018,312,1.091,321,5.15,322,2.233,541,4.927,636,4.429,671,4.683,683,8.936,684,3.229,685,5.554,686,7.427,687,7.427,688,7.427,689,5.212,690,7.427,691,7.427,692,4.683,693,7.427,694,8.881,695,4.52,696,4.52,697,5.121,698,4.52,699,5.121,700,4.52,701,5.121,702,4.52,703,5.121,704,4.52,705,5.121]],["title/injectables/AuthorizeService.html",[30,0.897,659,2.672]],["body/injectables/AuthorizeService.html",[0,0.349,3,0.061,4,0.049,5,0.049,11,1.763,12,0.132,16,1.064,18,0.642,19,0.358,20,0.009,21,1.204,29,0.492,30,0.886,33,0.487,34,2.342,35,0.922,38,1.047,47,2.944,48,1.409,51,1.363,60,0.836,79,0.095,80,0.037,86,2.338,93,1.172,98,1.574,109,1.04,110,1.576,113,1.711,118,1.926,119,1.409,129,2.082,135,1.679,136,1.172,146,2.745,147,2.628,151,2.828,159,1.278,161,2.266,164,1.886,190,1.119,191,1.395,193,2.459,195,2.09,213,1.573,236,2.126,238,2.161,246,2.653,247,1.856,250,0.922,256,1.638,259,0.004,270,3.211,302,0.004,309,0.742,312,0.932,329,3.089,334,2.427,337,3.089,338,1.735,341,2.748,346,1.043,458,2.872,468,3.279,470,1.659,517,1.981,555,2.126,568,1.573,581,1.886,612,2.909,619,3.089,632,4.312,635,2.51,636,5.14,642,1.711,643,4.003,644,1.659,655,3.959,656,3.757,657,1.886,658,1.573,659,2.639,661,2.29,662,3.962,663,1.995,671,3.376,685,4.5,689,4.562,706,1.076,707,2.51,708,3.871,709,4.385,710,4.726,711,4.726,712,4.726,713,4.385,714,4.726,715,1.573,716,4.309,717,4.126,718,2.843,719,2.843,720,3.532,721,2.843,722,5.237,723,3.871,724,2.843,725,5.739,726,2.843,727,2.843,728,2.29,729,2.843,730,2.843,731,2.843,732,2.843,733,3.871,734,2.843,735,2.843,736,2.843,737,3.622,738,3.532,739,4.312,740,2.983,741,2.51,742,1.886,743,1.995,744,2.51,745,2.51,746,2.126,747,1.711,748,3.532,749,2.51,750,3.871,751,3.532,752,2.51,753,3.871,754,1.793,755,4.726,756,2.51,757,2.407,758,2.29,759,2.51,760,2.29,761,2.51,762,2.29,763,2.51,764,2.51,765,2.29,766,2.251,767,1.995,768,2.29,769,2.29,770,2.51,771,2.29,772,2.51,773,2.29,774,2.51,775,2.51,776,2.51,777,3.871,778,2.51,779,2.29,780,2.51,781,2.51,782,3.658,783,2.51,784,2.51,785,2.51,786,2.51,787,2.51,788,3.871,789,3.077,790,2.51,791,4.847,792,2.51,793,2.51,794,2.51,795,4.312,796,2.51,797,2.51,798,2.51,799,2.51,800,2.51,801,2.51,802,2.51,803,1.24,804,2.51,805,3.532,806,2.51,807,2.51,808,1.638,809,1.514,810,2.29,811,1.995,812,2.51,813,2.29,814,2.29,815,2.51,816,2.51,817,1.638,818,2.909,819,2.29,820,2.51,821,3.871,822,2.51,823,2.51,824,2.51,825,2.51,826,2.51,827,1.204,828,1.995,829,1.995,830,3.871,831,2.51,832,2.909,833,1.995,834,3.871,835,2.51,836,2.51,837,1.711,838,2.51,839,2.51,840,2.51,841,2.51,842,2.51,843,2.51,844,2.51,845,2.51,846,2.51,847,2.51,848,2.51]],["title/interfaces/Client.html",[0,0.545,38,1.635]],["body/interfaces/Client.html",[0,0.759,2,1.34,3,0.098,4,0.079,5,0.079,12,0.212,13,0.718,15,2.283,18,0.621,19,0.273,20,0.009,29,0.498,30,1.249,31,4.918,33,0.78,34,2.389,35,1.477,38,3.289,54,2.627,56,3.418,61,2.961,64,2.522,65,2.627,66,2.743,68,2.627,79,0.133,80,0.06,81,2.184,82,2.627,86,2.483,93,1.219,94,1.515,97,1.861,106,2.259,109,1.189,110,1.382,113,3.718,115,4.335,132,2.16,135,1.035,136,1.219,149,2.34,160,2.615,161,1.929,191,0.838,202,1.988,216,3.198,219,1.822,259,0.006,263,3.31,282,3.198,285,2.522,294,2.522,302,0.006,306,2.743,336,3.198,338,1.477,352,3.198,420,2.743,430,1.373,462,2.874,484,3.024,525,3.024,566,4.726,606,3.671,653,3.024,817,2.627,833,3.198,849,4.023,850,4.976,851,3.408,852,3.024,853,4.976,854,7.147,855,3.671,856,4.023,857,4.023,858,4.023,859,4.023,860,4.023,861,4.023,862,3.671,863,4.023,864,4.023,865,4.023,866,4.023,867,6.186,868,4.023,869,4.023,870,4.023,871,4.023,872,3.671,873,3.024,874,4.023,875,5.453,876,5.453,877,4.023,878,4.023,879,4.023,880,4.023,881,2.743,882,4.023,883,4.023,884,4.023,885,4.023,886,4.023,887,3.408,888,3.408,889,3.408,890,4.023,891,3.671,892,4.023,893,4.023,894,5.453,895,4.023,896,2.049,897,5.453,898,3.671,899,4.023,900,4.023]],["title/interfaces/Client-1.html",[0,0.455,38,1.364,901,1.718]],["body/interfaces/Client-1.html",[0,0.708,2,1.211,3,0.089,4,0.071,5,0.071,11,2.006,12,0.192,13,0.67,19,0.389,20,0.009,29,0.354,38,2.123,60,2.227,79,0.124,87,1.912,89,2.068,119,2.042,129,3.133,135,1.309,141,3.518,161,2.814,163,2.856,168,2.115,190,1.836,193,1.336,195,1.736,202,2.513,206,1.744,225,3.221,229,3.189,259,0.006,263,1.647,302,0.006,309,1.076,312,0.506,315,2.48,338,1.868,354,4.044,430,1.736,445,3.631,470,2.515,471,1.912,491,3.081,493,2.733,494,4.97,507,2.891,517,1.076,518,4.029,575,1.797,618,2.194,644,2.515,828,2.891,902,3.637,903,5.051,904,6.687,905,4.777,906,5.383,907,6.687,908,6.102,909,6.687,910,4.539,911,6.687,912,4.191,913,5.087,914,5.761,915,4.191,916,5.383,917,3.539,918,3.634,919,2.733,920,3.637,921,3.637,922,2.374,923,2.115,924,5.087,925,4.539,926,2.891,927,1.964,928,4,929,3.637,930,3.637,931,3.637,932,4.31,933,3.637,934,1.404,935,3.637,936,3.637,937,5.087,938,2.115,939,3.321,940,5.087,941,2.28,942,3.637,943,3.637,944,3.319,945,3.637,946,2.733,947,3.637,948,3.637,949,3.319,950,3.637,951,3.637,952,5.087,953,4,954,5.087,955,5.087,956,5.087,957,5.087,958,3.637,959,3.637,960,3.319,961,3.637,962,3.319,963,3.637,964,3.637,965,3.637,966,3.637,967,3.081,968,3.637,969,3.637]],["title/classes/ClientCredentialsDto.html",[80,0.058,506,3.576]],["body/classes/ClientCredentialsDto.html",[3,0.143,4,0.115,5,0.115,12,0.309,13,0.911,18,0.621,19,0.346,20,0.009,29,0.408,79,0.143,80,0.103,259,0.008,302,0.008,304,2.318,310,2.197,311,3.956,312,0.963,322,2.89,506,6.312,541,5.535,543,6.721,970,8.344,971,6.627,972,6.627,973,6.627]],["title/interfaces/ClientOptions.html",[0,0.545,974,2.558]],["body/interfaces/ClientOptions.html",[0,0.823,2,1.034,3,0.076,4,0.061,5,0.061,11,1.833,12,0.164,13,0.598,16,1.044,18,0.536,19,0.385,20,0.009,24,1.686,27,2.576,29,0.374,38,2.833,60,2.095,79,0.176,87,1.632,91,1.873,95,1.873,97,1.059,98,1.262,107,2.433,109,0.779,127,4.107,129,1.368,136,0.94,137,1.534,141,1.446,142,2.218,159,1.581,161,2.835,163,1.743,175,3.566,190,1.313,193,2.607,195,2.101,206,2.835,211,1.686,219,2.433,225,3.152,229,1.946,238,1.169,250,2.171,258,3.016,259,0.005,302,0.005,314,1.262,316,1.534,338,2.65,346,0.837,430,2.146,442,2.022,445,3.568,470,2.817,474,1.686,644,2.697,910,2.218,912,2.218,914,2.218,915,2.218,919,2.333,922,2.966,925,3.837,927,1.199,928,3.662,934,2.537,946,2.333,953,2.117,974,2.966,975,2.468,976,5.737,977,5.567,978,2.218,979,3.848,980,3.848,981,2.63,982,2.966,983,2.63,984,3.987,985,4.699,986,2.63,987,2.333,988,2.63,989,4.223,990,2.333,991,2.218,992,1.946,993,2.63,994,2.63,995,2.63,996,2.63,997,3.611,998,3.611,999,2.63,1000,2.63,1001,2.468,1002,2.63,1003,3.848,1004,2.63,1005,4.037,1006,2.63,1007,2.468,1008,2.63,1009,3.837,1010,2.63,1011,2.468,1012,3.245,1013,2.63,1014,2.63,1015,3.245,1016,2.468,1017,2.218,1018,2.63,1019,2.117,1020,2.117,1021,1.446,1022,2.117,1023,2.468,1024,2.468,1025,2.63,1026,2.117,1027,2.63,1028,2.63,1029,2.218,1030,4.27,1031,5.008,1032,6.507,1033,4.551,1034,2.63,1035,4.289,1036,2.117,1037,3.611,1038,2.333,1039,2.468,1040,2.468,1041,2.468,1042,1.946,1043,2.218,1044,2.333,1045,2.468,1046,2.218,1047,2.117,1048,1.743,1049,2.468,1050,5.224,1051,2.468]],["title/injectables/ClientService.html",[30,0.897,525,2.945]],["body/injectables/ClientService.html",[0,0.681,3,0.084,4,0.068,5,0.068,12,0.182,13,0.645,15,2.168,16,0.986,18,0.625,19,0.328,20,0.009,29,0.474,30,1.121,31,5.412,33,0.668,34,2.629,35,1.265,38,3.321,54,2.249,56,3.069,61,2.658,64,2.159,65,2.249,66,2.348,68,2.249,79,0.12,80,0.051,81,1.87,82,3.196,86,2.677,93,1.483,94,1.297,97,2.116,106,2.749,109,1.124,110,1.292,113,4.229,115,4.931,132,2.256,135,1.802,136,1.043,149,2.003,160,2.974,161,2.348,191,1.365,202,1.701,216,2.738,219,1.56,259,0.005,263,3.384,282,3.892,285,2.159,294,2.159,302,0.005,306,3.338,309,1.019,312,0.996,336,3.892,338,1.265,346,1.319,352,3.892,420,2.348,430,1.67,462,3.497,484,2.588,517,1.835,525,3.679,566,3.338,606,3.143,653,3.679,706,1.476,715,2.159,817,2.249,833,2.738,849,3.444,850,5.66,851,2.918,852,2.588,853,5.197,854,7.385,855,5.197,856,3.444,857,3.444,858,3.444,859,3.444,860,3.444,861,3.444,862,3.143,863,3.444,864,3.444,865,3.444,866,6.202,867,5.695,868,3.444,869,6.202,870,3.444,871,3.444,872,3.143,873,3.679,874,4.895,875,4.895,876,4.895,877,3.444,878,4.895,879,4.895,880,4.895,881,3.338,882,4.895,883,4.895,884,4.895,885,4.895,886,4.895,887,2.918,888,2.918,889,2.918,890,3.444,891,3.143,892,3.444,893,3.444,894,4.895,895,3.444,896,1.754,897,4.895,898,3.143,899,3.444,900,3.444,1052,5.546,1053,5.546,1054,5.546,1055,5.546,1056,3.901,1057,3.901,1058,3.901,1059,3.901,1060,2.847,1061,3.901,1062,3.901]],["title/interfaces/Config.html",[0,0.545,60,1.305]],["body/interfaces/Config.html",[0,0.773,2,0.911,3,0.067,4,0.054,5,0.054,11,1.766,12,0.144,13,0.544,16,1.145,18,0.453,19,0.385,20,0.009,24,2.244,27,1.311,29,0.347,38,2.865,60,2.089,79,0.171,87,2.172,91,2.493,95,2.493,97,0.933,98,1.111,107,2.7,109,0.952,127,3.893,129,1.204,136,0.828,137,2.042,141,2.321,142,1.953,159,1.392,161,2.86,163,1.535,175,4.14,190,1.194,193,2.569,195,2.177,206,2.663,211,1.484,219,2.256,225,3.262,229,1.714,238,1.556,250,2.303,258,3.348,259,0.005,302,0.005,309,1.643,314,1.68,316,1.351,338,2.61,346,1.114,430,2.387,442,1.876,445,3.536,470,2.688,474,2.244,644,2.556,910,1.953,912,1.953,914,1.953,915,1.953,919,3.106,922,2.698,925,3.559,927,1.056,928,3.786,934,2.422,946,3.106,953,1.864,974,1.785,975,2.173,976,5.561,977,5.313,978,1.953,979,3.501,980,4.221,981,2.316,982,2.698,983,2.316,984,3.928,985,4.74,986,3.501,987,3.106,988,2.316,989,4.997,990,3.106,991,2.952,992,2.59,993,3.501,994,3.501,995,2.316,996,3.501,997,4.414,998,3.961,999,3.501,1000,3.501,1001,3.285,1002,2.316,1003,4.221,1004,3.501,1005,4.481,1006,4.221,1007,3.285,1008,3.501,1009,4.652,1010,3.501,1011,3.285,1012,3.559,1013,3.501,1014,3.501,1015,4.259,1016,3.285,1017,3.967,1018,4.221,1019,3.397,1020,3.397,1021,2.321,1022,3.397,1023,3.285,1024,3.285,1025,2.316,1026,1.864,1027,2.316,1028,2.316,1029,1.953,1030,3.961,1031,4.704,1032,6.381,1033,4.221,1034,2.316,1035,4.065,1036,1.864,1037,3.285,1038,2.055,1039,2.173,1040,2.173,1041,2.173,1042,1.714,1043,1.953,1044,2.055,1045,2.173,1046,1.953,1047,1.864,1048,3.348,1049,2.173,1050,4.986,1051,2.173]],["title/interfaces/Config-1.html",[0,0.455,60,1.089,901,1.718]],["body/interfaces/Config-1.html",[0,0.64,2,1.05,3,0.077,4,0.062,5,0.062,11,1.989,12,0.167,13,0.605,16,1.217,19,0.363,20,0.009,29,0.32,38,1.316,60,2.201,79,0.112,87,2.415,89,2.421,119,2.58,129,3.269,135,0.811,141,3.636,161,3.353,163,3.344,168,2.672,190,1.721,193,1.687,195,1.955,202,2.942,206,2.204,225,3.323,229,3.733,259,0.005,263,2.455,302,0.005,309,1.359,312,0.64,315,3.133,338,1.158,354,4.735,430,2.032,445,3.233,470,2.997,471,2.415,491,3.893,493,3.453,494,5.363,507,3.653,517,1.359,518,3.843,575,2.27,618,2.772,644,2.324,828,3.653,902,3.154,903,2.507,904,5.956,905,4.254,906,2.672,907,5.956,908,5.435,909,5.956,910,2.253,911,5.956,912,2.253,913,3.154,914,5.092,915,2.253,916,6.039,917,4.217,918,4.254,919,3.453,920,4.595,921,4.595,922,3,923,2.672,924,5.956,925,4.254,926,3.653,927,2.3,928,4.505,929,4.595,930,4.595,931,3.154,932,5.045,933,3.154,934,2.093,935,3.154,936,4.595,937,5.956,938,2.672,939,3.888,940,5.956,941,2.88,942,4.595,943,4.595,944,4.193,945,4.595,946,3.453,947,4.595,948,4.595,949,4.193,950,3.154,951,4.595,952,5.956,953,4.505,954,5.956,955,5.956,956,5.956,957,5.956,958,5.956,959,4.595,960,4.193,961,4.595,962,4.193,963,4.595,964,4.595,965,4.595,966,5.956,967,3.893,968,4.595,969,5.956]],["title/classes/CredentialIssuerMetadataDto.html",[80,0.058,1063,3.576]],["body/classes/CredentialIssuerMetadataDto.html",[3,0.108,4,0.087,5,0.087,7,1.037,12,0.234,13,0.766,18,0.632,19,0.385,20,0.009,26,3.38,79,0.108,80,0.066,105,4.62,119,3.263,160,3.305,171,2.574,259,0.006,302,0.006,304,1.753,312,1.057,323,3.305,332,3.263,338,2.789,355,4.698,514,4.319,553,4.152,616,3.018,757,4.077,827,3.684,829,5.839,923,3.38,927,2.244,1063,5.303,1064,6.108,1065,8.703,1066,4.426,1067,3.162,1068,3.162,1069,6.489,1070,6.489,1071,6.489,1072,5.921,1073,6.489,1074,6.489,1075,6.53,1076,6.489,1077,5.014,1078,5.812,1079,5.014,1080,3.643,1081,6.584,1082,5.014,1083,7.351,1084,5.014,1085,5.014,1086,5.014,1087,5.812,1088,5.014,1089,4.924,1090,5.812,1091,5.014,1092,4.152,1093,5.014,1094,4.039,1095,4.426]],["title/controllers/CredentialsController.html",[342,1.593,1096,3.576]],["body/controllers/CredentialsController.html",[3,0.121,4,0.097,5,0.097,7,1.156,12,0.26,15,2.29,16,0.99,18,0.651,19,0.36,20,0.009,26,3.625,29,0.476,33,0.957,79,0.121,80,0.073,94,2.573,97,2.127,109,1.069,132,2.469,135,1.758,151,2.783,160,2.989,191,1.299,259,0.007,302,0.007,310,1.979,312,0.868,342,2.006,344,2.173,346,1.68,350,2.679,502,2.77,517,1.844,520,3.708,667,2.593,668,4.955,717,4.461,827,3.626,1096,5.688,1097,5.589,1098,5.589,1099,4.894,1100,5.395,1101,5.589,1102,7.061,1103,5.589,1104,6.081,1105,4.453,1106,5.589,1107,7.061,1108,5.589,1109,4.685,1110,5.589,1111,5.589,1112,5.589,1113,2.77,1114,5.589,1115,5.589,1116,5.589,1117,5.589]],["title/injectables/CredentialsService.html",[30,0.897,717,2.558]],["body/injectables/CredentialsService.html",[3,0.068,4,0.055,5,0.055,12,0.147,15,2.216,16,1.097,18,0.653,19,0.362,20,0.009,21,2.42,29,0.51,30,0.961,33,0.541,34,2.532,35,1.025,47,2.614,48,1.567,60,1.398,79,0.068,80,0.041,86,2.01,93,1.271,94,2.648,97,2.399,109,1.157,110,1.406,118,1.602,135,1.932,136,0.845,146,2.792,147,2.321,151,2.819,183,1.903,190,1.95,191,1.438,203,3.155,231,2.219,238,1.581,240,2.631,259,0.005,288,2.999,302,0.005,309,1.66,312,0.961,314,1.135,334,2.631,346,1.131,458,2.743,464,3.155,517,2.042,533,1.822,544,1.422,644,2.163,706,1.197,717,2.741,737,3.44,740,3.378,742,2.098,754,2.999,766,2.441,782,2.532,803,1.379,808,1.822,809,1.684,827,3.47,906,3.556,934,1.078,1072,3.831,1099,3.44,1100,4.217,1104,4.754,1105,4.009,1109,3.155,1118,3.162,1119,4.755,1120,5.715,1121,5.045,1122,5.715,1123,4.755,1124,4.755,1125,5.715,1126,3.162,1127,4.471,1128,5.715,1129,4.461,1130,3.162,1131,4.755,1132,4.755,1133,3.162,1134,3.556,1135,3.831,1136,3.162,1137,3.162,1138,3.162,1139,7.429,1140,3.162,1141,5.49,1142,3.162,1143,4.217,1144,3.162,1145,3.162,1146,4.755,1147,3.162,1148,4.755,1149,3.162,1150,3.162,1151,4.461,1152,3.162,1153,4.755,1154,3.831,1155,4.755,1156,2.441,1157,2.365,1158,2.365,1159,4.198,1160,2.365,1161,4.217,1162,1.903,1163,2.365,1164,2.791,1165,1.994,1166,2.547,1167,2.365,1168,2.791,1169,2.219,1170,1.684,1171,3.162,1172,2.098,1173,1.75,1174,3.162,1175,3.162,1176,5.715,1177,3.162,1178,3.162,1179,3.162,1180,3.162,1181,3.162,1182,3.162,1183,3.162,1184,4.604,1185,3.831,1186,3.162,1187,3.162,1188,4.198,1189,3.162,1190,3.162,1191,3.162,1192,3.162,1193,2.791,1194,3.162,1195,3.162,1196,2.791,1197,3.162,1198,3.162,1199,3.162,1200,2.547,1201,2.365,1202,3.162,1203,2.791,1204,3.162,1205,3.162,1206,2.219,1207,3.162,1208,1.903,1209,4.755,1210,3.162,1211,3.162,1212,4.755]],["title/interfaces/CryptoImplementation.html",[0,0.545,1213,3.32]],["body/interfaces/CryptoImplementation.html",[0,0.945,2,1.621,3,0.119,4,0.095,5,0.095,7,1.141,12,0.257,13,0.814,16,0.982,18,0.614,19,0.377,20,0.009,22,2.017,79,0.119,94,2.326,118,1.962,134,5.368,135,1.747,190,2.239,191,1.415,225,2.798,235,3.657,259,0.007,276,3.476,279,5.234,302,0.007,312,0.945,346,1.665,517,1.828,808,4.432,809,4.308,967,6.05,1213,5.234,1214,7.142,1215,4.866,1216,5.638,1217,6.999,1218,4.912,1219,7.142,1220,6.999,1221,6.999,1222,5.512,1223,6.179,1224,6.195,1225,6.999,1226,7.746,1227,5.512,1228,6.517,1229,6.999,1230,6.999,1231,5.512,1232,6.195,1233,6.999,1234,4.44,1235,4.44]],["title/modules/CryptoModule.html",[357,1.404,369,2.364]],["body/modules/CryptoModule.html",[3,0.135,4,0.108,5,0.108,20,0.009,29,0.501,33,1.071,47,3.775,79,0.135,80,0.082,259,0.007,302,0.007,357,2.575,359,2.73,360,3,361,3.213,362,3.213,363,3,364,4.036,365,4.036,369,4.846,377,3.887,378,3.213,379,3,382,3,1236,5.525,1237,5.525,1238,5.525,1239,6.441,1240,6.259,1241,6.259,1242,6.259]],["title/injectables/CryptoService.html",[30,0.897,47,1.826]],["body/injectables/CryptoService.html",[3,0.049,4,0.04,5,0.064,9,3.961,10,4.257,11,1.238,12,0.106,13,0.429,14,3.738,15,0.611,16,1.042,18,0.632,19,0.365,20,0.009,21,2.786,22,1.763,29,0.473,30,0.746,32,3.764,33,0.391,34,2.132,35,0.741,38,0.842,47,1.517,54,1.317,55,2.793,56,2.042,57,1.603,61,1.095,62,1.603,63,1.516,64,1.264,65,1.317,66,1.375,67,1.516,68,1.317,79,0.049,80,0.03,81,1.095,86,1.685,93,0.986,104,1.317,109,1.124,110,1.57,113,2.793,118,2.036,131,2.759,135,1.687,136,1.759,137,1.609,146,2.494,147,2.355,151,2.721,153,2.448,159,1.027,161,1.965,183,2.221,188,2.126,190,1.596,191,1.366,192,1.708,204,1.375,225,0.913,232,1.708,233,1.708,234,1.708,238,1.771,241,3.079,246,2.641,247,0.967,250,1.196,256,1.317,259,0.004,263,0.913,276,2.327,289,2.898,294,2.042,297,2.221,298,2.221,302,0.004,309,1.527,310,1.034,312,0.959,314,1.912,332,1.829,346,0.878,352,1.603,379,2.802,386,1.84,420,3.519,430,0.688,436,1.708,442,1.542,470,1.756,484,4.693,496,1.603,517,1.977,533,1.317,551,2.927,556,2.327,568,2.042,575,3.085,657,1.516,658,1.264,667,2.713,676,5.29,706,0.864,715,1.264,728,1.84,740,3.681,742,1.516,743,2.589,757,2.087,766,1.173,789,2.589,803,1.609,808,2.126,809,1.216,810,1.84,813,2.972,850,4.292,851,1.708,855,3.738,887,1.708,888,1.708,889,3.471,896,1.027,901,1.06,934,1.582,985,2.589,1044,1.516,1060,2.382,1154,1.84,1208,4.122,1243,2.017,1244,4.819,1245,4.641,1246,3.689,1247,3.257,1248,3.689,1249,3.689,1250,2.759,1251,3.879,1252,3.689,1253,5.328,1254,3.689,1255,2.284,1256,2.284,1257,3.689,1258,4.703,1259,2.284,1260,2.284,1261,3.257,1262,3.257,1263,2.284,1264,3.689,1265,2.284,1266,4.641,1267,3.689,1268,2.284,1269,2.284,1270,3.257,1271,2.284,1272,2.284,1273,2.284,1274,3.689,1275,2.284,1276,2.284,1277,2.284,1278,4.641,1279,3.689,1280,2.284,1281,2.284,1282,2.284,1283,2.017,1284,2.284,1285,2.284,1286,4.641,1287,4.641,1288,3.689,1289,2.759,1290,1.708,1291,1.132,1292,2.284,1293,1.708,1294,1.84,1295,2.284,1296,2.284,1297,2.017,1298,2.284,1299,2.284,1300,3.689,1301,5.328,1302,2.948,1303,2.284,1304,2.284,1305,2.284,1306,3.689,1307,1.84,1308,5.847,1309,2.284,1310,5.328,1311,2.284,1312,5.847,1313,2.284,1314,5.328,1315,2.284,1316,3.689,1317,6.254,1318,4.641,1319,2.284,1320,2.284,1321,2.284,1322,2.284,1323,2.284,1324,3.689,1325,4.921,1326,2.284,1327,2.284,1328,2.284,1329,2.284,1330,2.284,1331,2.284,1332,3.689,1333,2.284,1334,3.689,1335,3.689,1336,3.079,1337,2.284,1338,5.847,1339,3.689,1340,2.972,1341,3.689,1342,3.689,1343,1.84,1344,2.284,1345,2.284,1346,3.689,1347,3.689,1348,3.689,1349,3.689,1350,4.641,1351,3.689,1352,3.689,1353,2.017,1354,2.284,1355,1.708,1356,2.284,1357,2.284,1358,2.284,1359,2.017,1360,1.84,1361,2.284,1362,2.284,1363,2.284,1364,2.284,1365,2.284,1366,2.017,1367,2.017,1368,2.284,1369,2.284,1370,1.84,1371,2.284,1372,2.017,1373,3.689,1374,2.284,1375,2.284,1376,2.284,1377,3.257,1378,4.097,1379,2.284,1380,2.017,1381,2.284,1382,2.284,1383,2.284,1384,3.689,1385,2.284,1386,3.689,1387,3.689,1388,3.689,1389,3.689,1390,4.703,1391,2.284,1392,2.284,1393,2.284,1394,2.284,1395,2.284,1396,2.017,1397,2.284,1398,2.284,1399,3.257,1400,2.284,1401,2.284,1402,3.689,1403,3.689,1404,3.689,1405,5.328,1406,2.284,1407,3.689,1408,4.641,1409,2.284,1410,3.689,1411,3.689,1412,3.689,1413,3.689,1414,2.284,1415,2.284,1416,2.284,1417,2.284,1418,2.284,1419,1.603,1420,2.042,1421,2.284,1422,2.284]],["title/injectables/CryptoService-1.html",[30,0.748,47,1.523,901,1.718]],["body/injectables/CryptoService-1.html",[3,0.123,4,0.098,5,0.098,12,0.265,16,1,19,0.315,20,0.009,29,0.518,30,1.441,33,0.972,34,2.787,35,1.84,47,2.933,79,0.154,80,0.074,93,1.518,100,5.333,109,1.275,118,1.591,135,1.771,191,1.312,202,3.11,238,1.887,259,0.007,276,4.916,302,0.007,309,1.483,312,0.958,346,1.696,430,2.148,517,1.862,706,2.148,766,4.198,809,4.354,990,3.767,1113,2.814,1156,2.914,1157,4.246,1158,4.246,1208,4.292,1213,5.83,1423,5.012,1424,8.178,1425,7.796,1426,5.677,1427,5.677,1428,7.131,1429,5.677,1430,6.882,1431,6.587,1432,5.677,1433,5.677,1434,7.796,1435,6.787,1436,3.417,1437,4.11,1438,5.677]],["title/modules/DatabaseModule.html",[357,1.404,370,3.115]],["body/modules/DatabaseModule.html",[3,0.12,4,0.096,5,0.096,19,0.312,20,0.009,29,0.515,33,0.954,34,2.769,35,1.806,61,3.378,79,0.152,80,0.073,109,1.067,110,1.422,136,1.884,138,5.558,219,2.228,231,3.91,259,0.007,302,0.007,357,2.229,359,2.43,370,4.946,382,3.378,383,5.27,384,4.241,436,4.167,437,4.488,481,4.919,1170,2.967,1439,5.572,1440,3.697,1441,7.047,1442,5.572,1443,7.047,1444,5.572,1445,5.572,1446,5.572,1447,8.122,1448,8.558,1449,7.396,1450,6.749,1451,5.572,1452,5.572,1453,5.572,1454,5.572,1455,5.572,1456,5.572,1457,7.047,1458,4.919,1459,7.729,1460,5.572,1461,5.572,1462,7.047,1463,5.572,1464,5.572,1465,5.572,1466,5.572,1467,5.572,1468,4.919,1469,5.572,1470,5.677,1471,5.572,1472,5.572]],["title/classes/EC_Public.html",[80,0.058,1293,3.32]],["body/classes/EC_Public.html",[3,0.112,4,0.09,5,0.09,7,1.076,12,0.242,13,0.784,18,0.605,19,0.363,20,0.009,21,3.742,22,2.244,24,3.587,29,0.32,79,0.146,80,0.104,81,3.232,106,2.579,107,2.696,195,1.359,202,2.941,259,0.007,276,4.253,302,0.007,304,1.819,312,0.973,610,3.131,618,2.77,624,4.592,680,5.043,740,4.066,766,3.462,923,3.841,1021,3.078,1046,4.253,1064,5.756,1067,4.719,1291,2.579,1293,5.043,1294,6.607,1302,4.734,1340,7.251,1473,5.252,1474,6.989,1475,6.989,1476,5.432,1477,6.606,1478,6.028,1479,6.606,1480,6.134,1481,7.241,1482,5.202,1483,5.953,1484,5.043,1485,5.202,1486,6.989,1487,5.202,1488,3.131,1489,3.89]],["title/injectables/EncryptionService.html",[30,0.897,1239,3.115]],["body/injectables/EncryptionService.html",[3,0.098,4,0.078,5,0.078,12,0.211,13,0.715,16,1.051,18,0.635,19,0.377,20,0.009,21,1.917,22,1.129,29,0.508,30,1.243,33,0.775,34,2.755,35,1.468,54,2.61,55,2.726,56,3.865,61,2.948,63,3.005,64,2.506,65,2.61,66,2.726,67,3.005,68,2.61,79,0.098,80,0.059,86,2.791,93,1.211,109,0.931,110,1.131,135,1.702,136,1.868,146,2.821,147,2.429,151,2.209,153,4.081,190,1.569,191,1.378,194,3.178,195,1.183,219,1.811,259,0.006,263,2.459,270,1.917,285,2.506,294,3.404,295,3.178,297,3.702,298,3.702,302,0.006,310,1.269,312,1.048,346,1.463,420,2.726,484,4.081,517,2.046,566,2.726,706,1.714,715,2.506,740,3.884,852,3.005,1048,2.245,1113,2.245,1196,3.998,1219,3.998,1239,4.317,1250,4.6,1270,5.43,1289,4.6,1291,2.245,1302,2.506,1478,3.648,1490,4.529,1491,6.985,1492,6.985,1493,6.985,1494,6.985,1495,6.151,1496,7.493,1497,4.317,1498,6.151,1499,6.151,1500,4.529,1501,4.529,1502,4.317,1503,4.529,1504,4.529,1505,6.166,1506,4.529,1507,4.529,1508,4.529,1509,3.648,1510,4.529,1511,3.648,1512,6.151,1513,6.151,1514,6.151,1515,4.529,1516,4.529,1517,5.43,1518,3.998,1519,3.998,1520,6.151,1521,4.529,1522,4.529,1523,4.529,1524,3.998,1525,4.529,1526,6.151,1527,6.151,1528,4.529,1529,4.529,1530,4.529]],["title/interfaces/Fields.html",[0,0.545,258,2.2]],["body/interfaces/Fields.html",[0,0.74,2,1.291,3,0.095,4,0.076,5,0.076,12,0.281,13,0.7,16,1.038,18,0.533,19,0.354,20,0.009,22,1.932,60,2.354,79,0.16,88,2.176,109,0.912,110,1.654,118,1.231,191,1.108,193,2.398,206,3.132,219,2.957,258,3.842,259,0.006,302,0.006,309,2.141,442,1.459,470,2.799,502,2.176,557,2.913,644,1.662,905,2.769,927,1.497,934,2.729,1029,4.888,1531,3.537,1532,6.53,1533,6.842,1534,6.068,1535,6.449,1536,5.959,1537,3.082,1538,6.073,1539,5.537,1540,3.876,1541,3.876,1542,3.876,1543,3.876,1544,3.876,1545,3.876,1546,3.876,1547,5.537,1548,3.876,1549,6.068,1550,3.876,1551,3.876,1552,3.876,1553,3.876,1554,3.876,1555,5.987,1556,3.876,1557,3.537,1558,3.876,1559,6.068,1560,3.876,1561,3.876,1562,3.876,1563,6.068,1564,3.876,1565,5.317,1566,3.082,1567,3.876,1568,5.317,1569,5.317,1570,5.317,1571,3.876,1572,3.876,1573,3.876,1574,6.068,1575,3.876,1576,3.876,1577,3.876,1578,5.317,1579,3.876,1580,3.876,1581,3.082,1582,3.876]],["title/injectables/FileSystemKeyService.html",[30,0.897,1583,3.576]],["body/injectables/FileSystemKeyService.html",[3,0.067,4,0.054,5,0.098,7,0.646,12,0.146,13,0.548,15,1.689,16,1.093,18,0.639,19,0.378,20,0.009,21,2.675,22,1.98,23,4.758,29,0.488,30,0.952,32,3.802,33,0.535,34,2.43,35,1.013,47,3.043,48,1.548,54,1.8,55,1.88,56,3.139,57,2.192,61,2.258,62,2.192,70,2.971,71,2.607,79,0.067,80,0.041,81,1.497,86,2.684,93,1.26,109,1.153,110,1.311,118,1.321,132,2.371,135,1.857,136,1.26,146,2.787,147,2.681,149,2.419,151,2.684,190,2.131,191,1.434,211,1.497,235,4.498,238,1.038,241,2.072,259,0.005,285,1.729,288,3.578,289,1.548,297,2.836,298,2.836,302,0.005,309,1.231,312,1.016,314,2.036,346,1.121,420,1.88,430,1.419,484,3.126,517,2.035,575,2.055,644,1.182,706,1.182,715,1.729,740,3.863,757,2.119,782,1.663,808,3.908,851,2.336,887,2.336,888,2.336,889,2.336,990,2.072,1042,1.729,1105,1.97,1156,1.604,1213,4.243,1234,5.462,1244,3.126,1251,4.192,1289,4.243,1291,1.548,1302,4.395,1307,5.089,1336,3.126,1372,4.159,1399,2.758,1430,5.008,1497,3.307,1505,5.985,1509,4.57,1519,2.758,1583,3.796,1584,8.351,1585,2.758,1586,5.673,1587,5.673,1588,4.712,1589,3.796,1590,5.96,1591,4.712,1592,4.712,1593,3.124,1594,3.796,1595,3.796,1596,3.124,1597,5.462,1598,3.124,1599,3.124,1600,3.124,1601,4.712,1602,3.124,1603,3.124,1604,3.796,1605,3.124,1606,3.796,1607,3.984,1608,5.577,1609,3.124,1610,3.124,1611,3.124,1612,3.124,1613,4.712,1614,4.712,1615,4.159,1616,3.796,1617,2.336,1618,2.516,1619,1.97,1620,3.124,1621,3.124,1622,3.124,1623,3.124,1624,5.673,1625,3.124,1626,5.673,1627,5.673,1628,3.124,1629,4.712,1630,4.712,1631,2.758,1632,4.712,1633,3.124,1634,4.712,1635,6.78,1636,3.124,1637,3.124,1638,3.124,1639,3.124,1640,3.124,1641,4.712,1642,1.97,1643,3.124,1644,4.712,1645,2.758,1646,2.758,1647,3.124,1648,3.124,1649,3.124,1650,3.124]],["title/interfaces/GenerateTokenOptions.html",[0,0.545,1651,3.576]],["body/interfaces/GenerateTokenOptions.html",[0,0.575,2,1.377,3,0.101,4,0.081,5,0.081,12,0.218,13,0.731,16,1.145,18,0.63,19,0.314,20,0.009,27,1.982,29,0.467,30,1.272,33,0.801,34,2.422,35,1.518,79,0.136,80,0.061,82,2.698,84,4.572,85,5.039,89,2.992,107,1.872,109,1.2,110,1.579,118,2.287,119,2.321,132,1.637,146,2.039,147,2.039,159,2.828,186,3.286,190,1.605,213,2.591,238,2.361,250,2.303,256,4.378,259,0.006,263,2.515,302,0.006,442,1.556,445,2.244,523,3.106,530,4.385,531,3.501,551,2.952,552,4.572,556,3.967,566,3.786,568,3.481,575,3.313,579,6.384,581,5.039,757,3.194,767,3.286,803,3.098,809,2.493,1113,2.321,1218,3.286,1251,4.174,1290,3.501,1291,2.321,1336,3.106,1651,5.723,1652,4.133,1653,4.133,1654,3.771,1655,4.133,1656,5.553,1657,5.067,1658,5.553,1659,5.553,1660,4.133,1661,4.133,1662,6.272,1663,5.553,1664,4.133,1665,5.067,1666,4.133,1667,4.133,1668,4.133,1669,4.133,1670,4.133,1671,4.133,1672,4.133,1673,4.133,1674,3.501,1675,3.501,1676,4.133,1677,4.415,1678,3.771,1679,4.133,1680,4.133,1681,3.501,1682,4.133,1683,3.771,1684,4.133,1685,4.133,1686,4.133,1687,4.133,1688,3.771]],["title/controllers/HealthController.html",[342,1.593,1689,3.576]],["body/controllers/HealthController.html",[3,0.131,4,0.105,5,0.105,7,1.258,12,0.283,20,0.009,29,0.458,33,1.041,70,4.692,79,0.131,80,0.08,86,2.353,93,1.626,109,0.92,131,5.564,132,2.602,135,1.69,213,4.947,259,0.007,302,0.007,310,1.704,312,0.747,342,2.182,344,2.364,346,1.77,502,3.013,514,4.117,630,5.993,1470,5.993,1689,6.748,1690,6.08,1691,8.744,1692,6.568,1693,6.568,1694,8.377,1695,6.568,1696,7.44,1697,6.08,1698,6.08,1699,7.44,1700,7.44,1701,4.897,1702,6.08,1703,5.367,1704,6.08,1705,6.08]],["title/modules/HealthModule.html",[357,1.404,371,3.115]],["body/modules/HealthModule.html",[3,0.147,4,0.118,5,0.118,20,0.009,29,0.52,33,1.169,79,0.147,80,0.09,259,0.008,302,0.008,344,3.101,357,2.522,359,2.978,371,5.597,382,3.273,1689,6.805,1701,5.5,1706,6.828,1707,6.828,1708,7.975]],["title/classes/Interceptors.html",[80,0.058,1036,2.672]],["body/classes/Interceptors.html",[0,0.443,3,0.048,4,0.038,5,0.038,11,1.339,12,0.244,13,0.419,15,1.739,16,0.808,18,0.541,19,0.358,20,0.009,22,0.898,27,0.94,29,0.354,38,0.818,60,1.992,79,0.155,80,0.029,88,3.223,89,1.88,93,1.217,107,2.6,109,1.268,110,1.625,118,1.469,127,3.019,129,0.863,135,1.402,136,1.65,137,2.285,141,0.913,143,1.279,146,0.72,147,0.72,171,4.117,190,1.161,191,1.475,193,0.72,195,1.612,204,2.169,206,2.439,211,1.064,219,2.6,225,0.887,246,2.597,250,1.475,259,0.004,263,2.6,270,1.927,302,0.004,304,0.776,309,2.238,312,0.832,314,2.334,323,0.94,338,2.623,341,1.85,346,0.858,430,0.669,442,1.741,445,3.247,470,2.65,474,2.511,489,1.66,495,1.66,517,1.505,552,1.336,818,1.473,832,1.473,901,2.673,903,1.558,917,3.607,918,2.273,922,2.623,923,2.336,927,2.387,934,1.964,938,2.336,939,4.244,941,1.995,974,1.279,978,1.4,982,2.077,991,1.4,1009,1.4,1012,2.273,1015,2.273,1017,2.273,1019,1.336,1020,1.336,1021,1.482,1022,1.336,1026,1.336,1035,3.468,1036,3.468,1048,2.256,1060,1.85,1419,3.194,1420,1.995,1436,1.336,1437,2.623,1537,1.558,1566,4.563,1581,3.194,1709,1.66,1710,4.22,1711,3.918,1712,4.641,1713,3.605,1714,2.169,1715,3.605,1716,6.19,1717,2.22,1718,2.904,1719,2.22,1720,2.904,1721,2.22,1722,2.904,1723,2.22,1724,2.904,1725,4.971,1726,2.22,1727,2.904,1728,2.22,1729,2.904,1730,2.696,1731,2.87,1732,2.87,1733,2.739,1734,1.788,1735,1.473,1736,2.53,1737,1.788,1738,1.558,1739,2.077,1740,1.336,1741,1.336,1742,2.169,1743,2.739,1744,2.739,1745,2.169,1746,2.169,1747,2.904,1748,4.641,1749,3.666,1750,1.788,1751,3.918,1752,4.272,1753,1.788,1754,1.788,1755,1.788,1756,1.788,1757,1.788,1758,2.904,1759,2.904,1760,1.788,1761,3.666,1762,1.4,1763,2.904,1764,1.788,1765,1.788,1766,2.904,1767,3.468,1768,4.22,1769,4.641,1770,1.788,1771,2.904,1772,1.788,1773,2.904,1774,1.788,1775,2.904,1776,1.788,1777,1.788,1778,1.788,1779,1.788,1780,2.904,1781,1.788,1782,1.66,1783,1.788,1784,3.666,1785,1.788,1786,1.788,1787,1.788,1788,1.788,1789,1.788,1790,1.558,1791,1.788,1792,1.788,1793,1.788,1794,1.788,1795,1.788,1796,1.788,1797,1.788,1798,1.788,1799,3.666,1800,1.788,1801,1.788,1802,1.788,1803,1.788,1804,1.788,1805,2.904,1806,1.788,1807,1.788,1808,2.904,1809,1.788,1810,1.788,1811,2.904,1812,1.788,1813,1.788,1814,1.788,1815,1.788,1816,1.788,1817,2.696,1818,1.788,1819,1.788,1820,1.788,1821,1.788,1822,1.788,1823,1.788,1824,1.788,1825,1.788,1826,1.788,1827,2.904,1828,2.904,1829,1.279,1830,1.788,1831,1.788,1832,1.788,1833,1.788,1834,2.904,1835,1.788,1836,1.788,1837,1.788,1838,1.788,1839,2.391,1840,1.788,1841,1.66,1842,1.66,1843,2.391,1844,1.66,1845,1.66,1846,4.22,1847,1.788,1848,1.788,1849,3.666,1850,4.641,1851,1.788,1852,2.904,1853,1.788,1854,1.788,1855,1.788,1856,2.904,1857,2.904,1858,1.788]],["title/entities/IssuanceConfig.html",[1151,3.115,1859,2.2]],["body/entities/IssuanceConfig.html",[3,0.104,4,0.083,5,0.083,11,1.491,12,0.225,13,0.746,15,1.927,16,1.154,18,0.553,19,0.386,20,0.009,29,0.506,60,2.12,79,0.104,80,0.084,98,1.73,136,2.2,151,2.28,168,3.945,188,3.697,202,2.102,259,0.006,302,0.006,310,2.421,311,2.884,312,1.061,320,4.472,321,4.429,322,2.102,350,2.31,430,2.171,533,2.778,617,4.255,873,5.099,934,2.62,1099,4.339,1100,5.459,1151,4.501,1164,6.364,1165,3.039,1167,5.391,1168,4.255,1173,2.667,1185,5.807,1188,6.364,1859,3.179,1860,2.901,1861,8.722,1862,4.255,1863,5.059,1864,7.209,1865,6.364,1866,4.82,1867,4.82,1868,3.604,1869,5.167,1870,4.82,1871,5.662,1872,4.82,1873,5.391,1874,4.255,1875,4.82,1876,5.391,1877,6.458,1878,6.628,1879,7.209,1880,4.82,1881,4.82,1882,4.255,1883,4.82,1884,4.82,1885,4.501,1886,4.255,1887,4.82,1888,5.662]],["title/controllers/IssuerManagementController.html",[342,1.593,1889,3.576]],["body/controllers/IssuerManagementController.html",[3,0.08,4,0.065,5,0.065,7,0.771,12,0.174,15,2.031,16,0.965,18,0.495,19,0.375,20,0.009,24,1.787,29,0.516,33,0.638,51,2.573,60,2.023,79,0.08,80,0.049,86,1.698,89,2.47,93,0.997,94,2.424,97,2.413,98,1.338,106,1.848,107,1.49,109,0.952,110,0.987,132,1.877,135,1.853,146,2.039,147,1.74,160,2.273,186,2.616,191,1.266,193,2.645,195,2.131,200,4.014,203,3.561,204,3.231,247,1.578,259,0.005,270,3.088,289,2.661,302,0.005,309,1.402,310,1.929,312,0.846,316,1.626,332,2.661,339,2.244,342,1.338,344,1.45,346,1.277,350,1.787,355,2.244,471,3.967,474,3.015,502,1.848,507,3.767,514,2.97,517,1.797,518,3.229,520,2.473,521,4.324,522,4.014,530,4.732,535,2.788,539,4.014,544,2.414,588,2.351,655,3.625,658,2.063,667,2.491,673,3.003,692,3.385,717,3.625,746,2.788,757,1.676,827,3.392,828,2.616,833,2.616,837,3.231,862,3.003,896,2.414,905,2.351,927,1.271,1021,2.587,1099,3.231,1134,4.014,1151,4.83,1172,2.473,1336,2.473,1790,2.616,1839,2.473,1889,4.324,1890,7.293,1891,6.438,1892,3.728,1893,3.786,1894,4.739,1895,5.553,1896,6.291,1897,3.291,1898,3.728,1899,3.291,1900,5.368,1901,3.728,1902,3.291,1903,5.315,1904,3.291,1905,4.739,1906,3.967,1907,3.291,1908,3.728,1909,3.728,1910,3.728,1911,5.368,1912,3.728,1913,3.728,1914,4.739,1915,3.003,1916,3.291,1917,3.003,1918,3.003,1919,2.788,1920,3.728,1921,3.967,1922,3.003,1923,3.728,1924,2.473,1925,3.003,1926,3.967,1927,3.728,1928,3.003,1929,3.003,1930,3.728,1931,3.291,1932,3.291,1933,4.739,1934,6.075,1935,3.291,1936,3.291,1937,5.067,1938,4.739,1939,4.014,1940,3.561,1941,3.291,1942,3.728,1943,3.728,1944,3.728,1945,3.291,1946,3.728,1947,3.728,1948,4.704,1949,3.291,1950,3.003,1951,3.291,1952,3.291,1953,3.291,1954,3.291,1955,3.291,1956,3.291,1957,3.728,1958,3.728,1959,3.291,1960,3.728]],["title/interfaces/IssuerMetadata.html",[0,0.545,1961,3.115]],["body/interfaces/IssuerMetadata.html",[0,0.992,2,1.803,3,0.132,4,0.106,5,0.106,7,1.269,12,0.286,13,0.87,18,0.581,19,0.371,20,0.009,21,3.166,22,1.864,26,3.839,29,0.377,79,0.132,106,3.707,259,0.007,302,0.007,338,2.424,616,4.501,618,3.982,621,5.593,740,3.707,757,4.08,1021,3.076,1066,5.412,1068,4.716,1080,3.393,1087,6.602,1291,3.039,1302,4.649,1473,5.248,1488,5.339,1961,5.248,1962,6.131]],["title/modules/IssuerModule.html",[357,1.404,372,3.115]],["body/modules/IssuerModule.html",[3,0.106,4,0.085,5,0.085,20,0.009,29,0.558,33,0.841,79,0.14,80,0.064,110,0.903,259,0.006,302,0.006,344,2.526,357,2.301,359,2.142,360,2.354,361,2.521,362,2.521,363,2.354,364,3.607,365,3.607,369,4.405,372,6.47,375,4.979,377,3.334,378,2.521,379,2.354,382,3.113,384,3.909,385,3.097,389,4.336,404,3.673,425,3.956,544,2.208,626,5.862,659,5.345,717,4.768,746,3.673,757,2.208,1096,5.862,1151,3.447,1162,2.956,1170,2.615,1172,3.258,1440,3.258,1889,5.862,1891,4.336,1921,5.6,1963,4.336,1964,4.336,1965,4.336,1966,4.336,1967,5.217,1968,5.488,1969,5.217,1970,5.217,1971,4.912,1972,5.862,1973,4.336,1974,4.912,1975,4.912,1976,4.912,1977,4.336,1978,4.912,1979,4.912,1980,4.912,1981,4.912,1982,4.309,1983,3.673,1984,3.673,1985,4.336,1986,4.912]],["title/classes/JwksResponseDto.html",[80,0.058,1489,3.32]],["body/classes/JwksResponseDto.html",[3,0.121,4,0.097,5,0.097,7,1.16,12,0.261,13,0.823,18,0.558,19,0.313,20,0.009,21,3.727,22,2.194,24,3.715,29,0.345,79,0.153,80,0.102,81,2.687,106,3.507,107,2.242,195,1.848,202,2.445,259,0.007,276,3.536,302,0.007,304,1.961,312,0.689,610,3.374,618,3.767,680,4.193,740,4.035,766,2.878,923,4.4,1021,3.188,1046,3.536,1064,4.965,1067,4.888,1291,2.779,1293,4.193,1294,5.699,1302,4.916,1340,7.209,1473,5.44,1474,6.245,1475,6.245,1476,4.516,1477,6.245,1478,4.516,1479,4.949,1480,5.291,1481,6.245,1483,4.949,1484,4.193,1486,6.245,1488,4.258,1489,5.291,1987,4.949]],["title/injectables/JwtAuthGuard.html",[30,0.897,588,2.799]],["body/injectables/JwtAuthGuard.html",[3,0.133,4,0.106,5,0.106,12,0.286,16,1.05,19,0.331,20,0.009,29,0.517,30,1.513,33,1.051,79,0.133,80,0.081,93,1.642,109,1.133,110,1.13,135,1.395,136,1.642,191,1.377,259,0.007,302,0.007,312,0.92,346,1.781,517,1.955,527,5.422,588,4.721,592,4.593,706,2.324,984,3.711,1113,3.044,1988,6.142,1989,7.486,1990,7.486,1991,5.422,1992,7.738,1993,6.142,1994,7.486,1995,6.772,1996,6.142,1997,4.075,1998,4.947,1999,6.142,2000,7.486,2001,4.947,2002,7.486,2003,6.142,2004,5.422,2005,6.142,2006,6.142]],["title/injectables/JwtService.html",[30,0.897,523,2.945]],["body/injectables/JwtService.html",[0,0.523,3,0.092,4,0.074,5,0.074,12,0.198,16,1.024,18,0.606,19,0.323,20,0.009,27,2.496,29,0.449,30,1.191,33,0.729,34,2.703,35,1.38,79,0.127,80,0.056,82,3.397,84,4.613,85,5.085,89,3.115,93,1.138,107,1.702,109,1.16,110,1.548,118,2.223,119,2.922,132,2.061,135,1.658,146,2.571,147,1.911,159,3.041,186,4.137,190,1.862,191,1.343,213,3.262,238,2.248,250,2.192,256,2.453,259,0.006,263,2.704,302,0.006,309,1.112,312,0.942,346,1.402,430,1.282,442,1.415,445,3.241,517,1.907,523,3.911,530,4.586,531,3.183,551,2.684,552,4.613,556,3.717,566,3.548,568,3.262,575,3.343,579,4.748,581,2.824,706,1.611,715,2.355,757,3.041,767,4.137,803,3.343,809,2.266,1113,2.11,1218,2.987,1251,3.911,1290,3.183,1291,2.11,1336,3.911,1651,5.88,1652,3.757,1653,3.757,1654,4.748,1655,5.97,1656,5.204,1657,4.748,1658,5.204,1659,5.204,1660,3.757,1661,3.757,1662,5.97,1663,5.204,1664,3.757,1665,4.748,1666,3.757,1667,3.757,1668,3.757,1669,3.757,1670,3.757,1671,3.757,1672,3.757,1673,3.757,1674,4.408,1675,4.408,1676,5.204,1677,4.746,1678,3.428,1679,3.757,1680,3.757,1681,3.183,1682,5.204,1683,4.748,1684,5.204,1685,5.204,1686,3.757,1687,6.444,1688,3.428,2007,5.895,2008,5.895,2009,4.256,2010,4.256,2011,4.256,2012,4.256,2013,4.256,2014,4.256]],["title/injectables/JwtStrategy.html",[30,0.897,589,3.32]],["body/injectables/JwtStrategy.html",[3,0.134,4,0.08,5,0.08,12,0.214,16,1.057,19,0.333,20,0.009,22,1.548,29,0.499,30,1.255,33,0.786,34,3.046,35,1.489,60,2.069,79,0.099,80,0.06,82,3.579,84,2.764,85,3.047,86,2.566,89,2.228,93,1.228,107,1.836,109,1.228,110,1.386,118,1.287,119,2.276,135,1.41,136,1.66,137,2.003,159,2.065,163,2.276,191,1.386,211,2.976,247,1.944,250,2.281,259,0.006,302,0.006,312,0.926,346,1.477,396,5.695,442,1.526,471,2.131,517,1.968,530,4.17,531,3.434,552,3.737,557,3.047,575,3.068,581,4.12,589,4.644,592,3.434,602,4.054,644,1.738,653,4.12,706,1.738,715,2.541,757,3.648,803,3.068,928,2.764,984,3.078,1099,2.764,1113,2.276,1208,2.764,1218,4.937,1355,3.434,1488,3.737,1654,5.667,1665,3.699,1675,5.261,1688,3.699,1829,2.647,1843,4.667,2001,3.699,2015,4.592,2016,6.21,2017,6.21,2018,7.035,2019,4.592,2020,6.21,2021,4.592,2022,6.21,2023,7.035,2024,4.592,2025,4.592,2026,6.21,2027,4.592,2028,4.592,2029,4.592,2030,4.592,2031,4.054,2032,6.21,2033,4.054,2034,7.537,2035,4.592,2036,4.592,2037,4.592,2038,4.054,2039,4.592,2040,4.592,2041,4.592,2042,4.592,2043,4.592,2044,4.592,2045,4.592,2046,6.21,2047,4.592,2048,4.592,2049,4.054,2050,6.21,2051,4.592,2052,4.592,2053,4.592,2054,4.592,2055,4.592,2056,4.592,2057,4.592,2058,4.592,2059,4.592,2060,3.699,2061,4.592,2062,4.592]],["title/entities/KeyEntity.html",[1859,2.2,2063,3.576]],["body/entities/KeyEntity.html",[3,0.142,4,0.114,5,0.114,12,0.307,13,0.907,18,0.562,19,0.345,20,0.009,29,0.405,79,0.142,80,0.086,136,2.086,151,2.631,259,0.008,302,0.008,310,2.187,312,0.959,873,5.176,1173,3.64,1226,6.888,1234,6.7,1859,3.867,1860,3.96,1873,5.835,1877,5.835,1885,4.617,2063,6.285,2064,6.579,2065,6.579,2066,6.579]],["title/modules/KeyModule.html",[357,1.404,373,3.115]],["body/modules/KeyModule.html",[3,0.115,4,0.092,5,0.092,15,1.426,20,0.009,29,0.546,33,0.913,34,2.884,35,1.729,47,3.48,48,2.643,60,1.568,79,0.148,80,0.07,109,1.146,110,1.261,118,1.921,135,1.211,138,5.024,259,0.007,302,0.007,312,0.655,346,1.269,357,2.395,359,2.326,364,2.643,365,2.643,369,3.649,373,5.314,382,2.556,383,5.125,384,4.125,385,3.363,396,4.809,398,4.708,436,3.988,437,4.296,992,2.951,1244,4.546,1440,3.538,1449,6.685,1450,5.52,1458,4.708,1583,5.52,1618,5.52,2063,4.296,2067,5.333,2068,7.572,2069,5.333,2070,7.572,2071,6.853,2072,5.333,2073,5.52,2074,7.469,2075,4.809,2076,5.801,2077,2.951,2078,5.333,2079,5.333,2080,6.853,2081,5.333,2082,5.333,2083,4.296,2084,5.333,2085,5.333,2086,4.708,2087,6.853,2088,5.333,2089,5.333,2090,5.333,2091,6.853]],["title/classes/KeyService.html",[80,0.058,1244,2.945]],["body/classes/KeyService.html",[0,0.776,3,0.102,4,0.082,5,0.082,7,0.975,12,0.22,15,1.689,16,1.171,18,0.653,19,0.384,20,0.009,21,2.675,22,2.116,23,5.345,29,0.389,79,0.102,80,0.062,94,1.566,132,2.663,135,1.952,141,2.599,151,2.847,190,2.277,191,1.536,247,1.995,259,0.006,302,0.006,304,1.648,312,1.026,314,2.558,346,1.503,496,5.002,517,2.181,575,2.755,675,3.524,740,3.937,808,4.712,1042,3.496,1156,2.419,1216,5.09,1244,4.192,1251,4.729,1291,2.336,1497,4.434,1502,4.434,1589,5.09,1590,6.727,1595,5.09,1597,6.398,1604,5.09,1606,3.796,1607,4.803,1619,2.972,1678,3.796,2092,4.713,2093,9.155,2094,4.713,2095,4.713,2096,4.713,2097,4.713,2098,4.713,2099,4.713,2100,7.616,2101,4.713]],["title/injectables/LoggerConfigService.html",[30,0.897,2102,3.576]],["body/injectables/LoggerConfigService.html",[0,0.554,3,0.132,4,0.078,5,0.078,7,0.934,12,0.21,13,0.713,16,0.861,18,0.502,19,0.308,20,0.009,27,3.607,29,0.377,30,1.24,33,0.772,34,2.751,35,1.463,60,2.05,71,3.395,79,0.132,80,0.059,86,2.695,93,1.206,97,2.253,109,1.25,110,0.83,132,2.146,135,1.935,137,3.04,191,1.129,250,1.989,259,0.006,302,0.006,312,1.069,346,1.46,427,4.942,428,4.942,429,4.942,439,5.616,444,5.595,517,1.602,667,2.093,706,1.707,715,2.497,934,1.538,1021,2.867,1060,3.841,1113,2.236,2102,4.942,2103,7.736,2104,3.983,2105,3.693,2106,6.605,2107,6.605,2108,6.605,2109,6.605,2110,6.605,2111,6.605,2112,6.605,2113,6.136,2114,6.605,2115,6.136,2116,4.512,2117,6.303,2118,4.512,2119,4.512,2120,7.126,2121,4.512,2122,4.512,2123,4.512,2124,4.512,2125,5.416,2126,4.512,2127,4.512,2128,5.416,2129,5.416,2130,4.588,2131,5.416,2132,5.416,2133,5.416,2134,5.416,2135,5.416,2136,5.416,2137,3.983,2138,3.983,2139,5.595,2140,3.634,2141,3.983,2142,3.983,2143,3.983,2144,3.983,2145,5.416,2146,5.214,2147,3.983,2148,3.983,2149,3.983,2150,3.983,2151,3.983,2152,3.983]],["title/interfaces/LoggerConfiguration.html",[0,0.545,2117,3.576]],["body/interfaces/LoggerConfiguration.html",[0,0.625,2,1.495,3,0.143,4,0.088,5,0.088,12,0.237,13,0.773,18,0.366,19,0.36,20,0.009,27,3.779,29,0.409,30,1.343,33,0.87,34,2.523,35,1.648,60,1.495,71,2.814,79,0.143,80,0.067,86,2.341,97,2.001,109,1.288,110,0.935,132,1.778,137,3.228,250,2.154,259,0.007,302,0.007,427,5.352,428,5.352,429,5.352,439,6.56,444,6.09,667,2.359,934,1.733,1021,3.228,1060,3.411,1113,2.52,2102,4.096,2103,4.489,2104,4.489,2105,3.06,2106,4.489,2107,4.489,2108,4.489,2109,4.489,2110,4.489,2111,4.489,2112,4.489,2114,4.489,2117,6.322,2120,7.373,2125,4.489,2128,4.489,2129,4.489,2130,3.803,2131,7.189,2132,7.189,2133,7.189,2134,7.189,2135,5.865,2136,5.865,2137,4.489,2138,4.489,2139,5.869,2140,4.096,2141,4.489,2142,4.489,2143,4.489,2144,4.489,2145,5.865,2146,5.535,2147,4.489,2148,4.489,2149,4.489,2150,4.489,2151,4.489,2152,4.489]],["title/interfaces/Middleware.html",[0,0.545,982,2.558]],["body/interfaces/Middleware.html",[0,0.462,2,0.687,3,0.05,4,0.04,5,0.04,11,1.606,12,0.252,13,0.437,15,1.26,18,0.548,19,0.351,20,0.009,22,0.937,29,0.364,38,0.861,60,2.031,79,0.158,80,0.031,88,3.293,89,1.938,93,0.625,107,2.989,109,1.279,110,1.633,118,1.514,127,3.112,129,0.909,136,1.69,137,2.056,141,0.961,143,1.347,146,0.758,147,0.758,171,3.244,190,1.203,191,1.401,193,0.758,195,1.862,206,2.505,211,1.12,219,2.656,225,0.935,246,2.677,250,2.049,259,0.004,263,2.526,270,1.996,302,0.004,309,2.254,314,2.384,323,0.99,338,2.651,341,1.929,430,0.704,442,1.795,445,3.311,470,2.698,474,2.588,489,1.748,495,1.748,552,1.407,818,1.551,832,1.551,901,2.745,903,1.641,917,3.678,918,2.37,922,2.717,923,2.42,927,2.43,934,2.017,938,2.42,939,4.309,941,2.08,974,1.347,978,1.474,982,2.717,991,1.474,1009,1.474,1012,2.37,1015,2.37,1017,2.37,1019,1.407,1020,1.407,1021,1.546,1022,1.407,1026,1.407,1035,4.5,1036,3.25,1048,2.336,1419,3.308,1420,2.08,1436,1.407,1437,2.717,1537,1.641,1566,4.662,1581,3.308,1709,1.748,1710,3.028,1711,1.748,1712,5.743,1716,4.968,1718,1.883,1720,1.883,1722,1.883,1724,1.883,1725,3.797,1727,1.883,1729,3.028,1730,2.811,1731,2.972,1732,2.972,1733,2.837,1734,1.883,1735,1.551,1736,2.638,1737,1.883,1738,1.641,1739,2.166,1740,1.407,1741,1.407,1742,2.262,1743,2.837,1744,2.837,1745,2.262,1746,2.262,1747,3.028,1748,4.766,1749,3.797,1750,1.883,1751,4.038,1752,4.356,1753,1.883,1754,1.883,1755,1.883,1756,1.883,1757,1.883,1758,3.028,1759,3.028,1760,1.883,1761,3.797,1762,1.474,1763,3.028,1764,1.883,1765,1.883,1766,3.028,1767,3.561,1768,4.35,1769,4.766,1770,1.883,1771,3.028,1772,1.883,1773,3.028,1774,1.883,1775,3.028,1776,1.883,1777,1.883,1778,1.883,1779,1.883,1780,3.028,1781,1.883,1782,1.748,1783,1.883,1784,3.797,1785,1.883,1786,1.883,1787,1.883,1788,1.883,1789,1.883,1790,1.641,1791,1.883,1792,1.883,1793,1.883,1794,1.883,1795,1.883,1796,1.883,1797,1.883,1798,1.883,1799,3.797,1800,1.883,1801,1.883,1802,1.883,1803,1.883,1804,1.883,1805,3.028,1806,1.883,1807,1.883,1808,3.028,1809,1.883,1810,1.883,1811,3.028,1812,1.883,1813,1.883,1814,1.883,1815,1.883,1816,1.883,1817,2.811,1818,1.883,1819,1.883,1820,1.883,1821,1.883,1822,1.883,1823,1.883,1824,1.883,1825,1.883,1826,1.883,1827,3.028,1828,3.028,1829,1.347,1830,1.883,1831,1.883,1832,1.883,1833,1.883,1834,3.028,1835,1.883,1836,1.883,1837,1.883,1838,1.883,1839,2.494,1840,1.883,1841,1.748,1842,1.748,1843,2.494,1844,1.748,1845,1.748,1846,4.35,1847,1.883,1848,1.883,1849,3.797,1850,4.766,1851,1.883,1852,3.028,1853,1.883,1854,1.883,1855,1.883,1856,3.028,1857,3.028,1858,1.883]],["title/classes/NotificationRequestDto.html",[80,0.058,2153,3.32]],["body/classes/NotificationRequestDto.html",[3,0.141,4,0.113,5,0.113,12,0.304,13,0.903,18,0.559,19,0.343,20,0.009,29,0.478,79,0.141,80,0.102,259,0.008,302,0.008,304,2.284,310,2.178,311,3.728,312,0.955,322,2.848,684,4.119,700,5.765,704,5.765,881,4.991,1165,4.119,2153,5.81,2154,8.292,2155,8.292,2156,6.68,2157,7.769,2158,7.769,2159,4.884]],["title/classes/Oauth2AuthorizationServerResponse.html",[80,0.058,2160,3.576]],["body/classes/Oauth2AuthorizationServerResponse.html",[3,0.103,4,0.083,5,0.083,7,0.987,11,1.48,12,0.222,13,0.74,18,0.649,19,0.381,20,0.009,22,1.587,27,2.696,28,5.13,79,0.103,80,0.063,82,4.827,89,2.286,91,3.391,106,3.157,119,4.408,195,1.245,259,0.006,302,0.006,304,1.668,312,1.059,323,3.9,332,3.793,338,2.822,514,4.817,610,2.87,639,6.755,647,6.164,757,3.224,758,5.776,760,5.776,762,5.776,765,5.776,768,5.776,769,5.776,771,5.776,773,5.776,795,5.13,1021,2.619,1064,6.109,1067,3.007,1080,4.235,1208,3.833,1218,5.37,1360,5.13,1473,4.469,1488,3.833,1987,4.209,2160,5.13,2161,8.706,2162,4.769,2163,4.769,2164,8.204,2165,4.769,2166,4.769,2167,3.841,2168,4.769,2169,4.769,2170,5.622,2171,6.369,2172,4.209]],["title/classes/OfferRequest.html",[80,0.058,1903,2.945]],["body/classes/OfferRequest.html",[3,0.124,4,0.1,5,0.1,7,1.489,11,1.339,12,0.268,13,0.837,16,1.009,18,0.609,19,0.382,20,0.009,22,1.435,29,0.483,51,2.76,79,0.155,80,0.103,98,2.816,136,1.924,195,1.879,259,0.007,302,0.007,304,2.014,310,2.2,311,3.235,312,0.964,316,3.69,320,3.831,321,4.147,322,2.512,350,2.76,458,2.067,616,3.466,684,3.632,692,4.948,698,5.084,837,4.33,896,2.589,934,1.963,1903,4.773,1906,3.632,1924,5.206,1925,4.639,1926,4.948,1939,5.868,1940,3.821,2159,4.307,2173,7.256,2174,5.759,2175,5.759,2176,5.381,2177,5.759,2178,5.759,2179,5.084,2180,5.759,2181,6.351,2182,6.351,2183,4.639,2184,4.307]],["title/classes/OfferResponse.html",[80,0.058,1906,2.799]],["body/classes/OfferResponse.html",[3,0.131,4,0.105,5,0.105,7,1.256,11,1.411,12,0.283,13,0.864,18,0.629,19,0.355,20,0.009,22,1.513,29,0.494,51,2.909,79,0.16,80,0.105,98,2.178,136,1.623,195,1.585,259,0.007,302,0.007,304,2.122,311,3.342,312,0.913,316,3.504,320,3.958,321,4.283,322,2.647,350,2.909,458,2.883,684,3.827,692,3.827,695,5.358,837,3.653,896,3.612,934,2.069,1903,4.027,1906,4.687,1924,4.931,1925,4.889,1926,4.687,1939,4.539,1940,4.027,2159,4.539,2173,7.092,2176,4.539,2181,6.561,2182,6.561,2183,4.889,2184,4.539,2185,6.069]],["title/controllers/Oid4vciController.html",[342,1.593,1972,3.576]],["body/controllers/Oid4vciController.html",[3,0.111,4,0.089,5,0.089,11,1.982,12,0.239,16,0.937,18,0.603,19,0.348,20,0.009,29,0.524,33,0.878,51,2.458,79,0.111,80,0.067,94,2.47,109,1.125,110,0.943,135,1.788,151,2.734,160,2.829,188,2.955,190,1.705,191,1.229,193,2.714,240,2.838,246,4.333,247,2.829,257,3.599,259,0.007,302,0.007,310,1.873,312,0.821,340,4.931,342,1.84,344,1.994,346,1.59,458,2.826,464,5.224,502,2.542,514,4.518,517,1.745,518,2.632,656,3.599,658,2.838,667,2.379,668,4.689,817,2.955,819,4.131,827,3.146,1092,4.213,1113,2.542,1165,3.234,1921,4.686,1922,4.131,1969,3.234,1972,5.382,1982,4.433,1984,3.835,2153,5.888,2186,5.128,2187,5.128,2188,5.128,2189,5.128,2190,5.128,2191,5.898,2192,5.128,2193,5.128,2194,5.128,2195,4.527,2196,4.527,2197,4.527,2198,3.835,2199,4.131,2200,5.128,2201,4.527,2202,5.128,2203,4.527,2204,5.128,2205,5.128,2206,5.128,2207,5.128,2208,5.128,2209,5.128,2210,5.128,2211,5.128]],["title/injectables/Oid4vciService.html",[30,0.897,1921,2.799]],["body/injectables/Oid4vciService.html",[3,0.057,4,0.045,5,0.045,11,1.761,12,0.269,13,0.48,15,1.778,16,0.879,18,0.606,19,0.347,20,0.009,21,2.155,29,0.514,30,0.834,32,4.002,33,0.45,34,2.37,35,0.852,47,2.86,48,1.302,51,1.977,55,2.482,57,1.844,61,1.977,62,1.844,79,0.057,80,0.034,81,1.259,86,2.277,93,1.103,94,1.371,97,0.791,109,0.873,110,1.6,118,1.864,134,2.736,135,1.423,136,0.703,146,2.545,147,2.641,149,1.349,151,2.642,160,1.746,161,1.746,190,1.697,191,1.153,193,2.254,194,1.844,195,0.686,213,1.454,238,2.21,240,2.282,246,3.106,247,1.112,250,2.334,257,1.844,259,0.004,267,1.657,269,2.116,285,1.454,289,2.044,295,2.894,297,1.581,298,1.581,302,0.004,312,0.91,338,1.337,340,3.378,346,0.981,442,1.692,456,2.377,458,2.772,464,2.736,468,3.084,470,2.182,471,2.362,512,2.116,514,1.454,517,1.637,530,3.68,556,2.601,568,2.282,642,1.581,658,1.454,659,3.471,662,3.848,663,1.844,667,3.341,689,4.047,706,0.994,717,4.367,722,3.322,737,2.482,738,3.322,739,4.101,742,1.743,743,1.844,751,4.101,754,1.657,757,2.593,782,2.196,789,2.894,803,1.799,805,2.116,811,2.894,814,3.322,827,1.746,837,2.482,872,2.116,881,1.581,896,1.181,898,2.116,901,1.914,934,0.896,967,1.965,1023,1.844,1047,1.581,1060,1.349,1068,1.657,1069,2.319,1070,2.319,1071,2.319,1072,2.116,1073,2.319,1074,3.641,1075,3.322,1076,2.319,1092,3.951,1095,2.319,1121,4.494,1141,3.322,1143,2.736,1165,1.657,1378,2.319,1437,1.514,1616,4.101,1617,1.965,1642,1.657,1738,1.844,1903,3.826,1906,2.601,1919,1.965,1921,2.601,1939,1.965,1948,1.965,1961,5.054,1970,3.637,1973,2.319,1982,2.736,1983,1.965,1985,2.319,1997,3.378,2105,1.581,2153,4.313,2196,2.319,2197,2.319,2198,3.807,2212,2.627,2213,6.266,2214,5.091,2215,5.091,2216,2.627,2217,4.124,2218,4.124,2219,2.627,2220,2.627,2221,2.627,2222,2.627,2223,2.627,2224,2.627,2225,4.124,2226,3.641,2227,2.627,2228,2.627,2229,2.627,2230,5.767,2231,2.627,2232,5.767,2233,4.124,2234,2.627,2235,4.124,2236,2.627,2237,2.627,2238,2.627,2239,2.627,2240,3.573,2241,2.627,2242,2.627,2243,4.124,2244,2.627,2245,2.627,2246,4.494,2247,2.627,2248,2.627,2249,2.627,2250,2.627,2251,2.627,2252,2.627,2253,5.091,2254,2.627,2255,2.627,2256,2.627,2257,2.627,2258,2.627,2259,2.627,2260,2.627,2261,5.767,2262,2.627,2263,2.627,2264,2.319,2265,2.319,2266,2.627,2267,2.116,2268,2.627,2269,4.124,2270,2.627,2271,4.124,2272,2.627,2273,2.319,2274,4.124,2275,4.124,2276,4.124,2277,4.124,2278,4.124,2279,4.124,2280,4.124,2281,4.124,2282,2.894,2283,4.645,2284,3.084,2285,3.084,2286,2.627,2287,2.319,2288,5.767,2289,2.627,2290,2.627,2291,2.627,2292,2.627,2293,2.627,2294,2.319,2295,2.627,2296,2.627,2297,4.124,2298,2.627,2299,2.627,2300,2.627,2301,2.627,2302,2.627,2303,2.627,2304,2.627,2305,2.627,2306,6.65,2307,2.627,2308,4.124,2309,4.124,2310,2.319,2311,2.627,2312,2.319,2313,2.627,2314,2.627,2315,2.627,2316,2.627,2317,2.627,2318,2.319,2319,2.627,2320,2.627,2321,2.627,2322,5.767,2323,2.627,2324,4.124,2325,2.627,2326,2.627,2327,2.319,2328,2.319]],["title/controllers/Oid4vpController.html",[342,1.593,2329,3.576]],["body/controllers/Oid4vpController.html",[3,0.11,4,0.088,5,0.088,7,1.054,11,1.546,12,0.237,16,0.933,18,0.643,19,0.294,20,0.009,29,0.501,33,0.872,79,0.11,80,0.067,91,3.541,93,1.361,94,2.708,95,2.711,100,3.808,101,5.198,102,4.974,109,1.007,135,1.898,151,2.692,191,1.223,193,2.641,195,1.737,253,5.647,259,0.007,302,0.007,310,1.864,312,0.817,323,2.816,342,2.658,344,1.98,346,1.582,458,3.055,466,5.973,502,2.524,514,3.68,517,1.737,518,2.614,533,2.935,622,5.872,667,2.362,668,4.667,716,4.903,817,3.833,1109,4.412,1113,2.524,1969,3.211,1982,4.412,1984,3.808,2195,4.495,2198,3.808,2199,4.102,2201,4.495,2203,4.495,2329,5.966,2330,5.092,2331,5.092,2332,6.651,2333,7.406,2334,6.538,2335,5.092,2336,5.092,2337,5.092,2338,4.974,2339,4.495,2340,5.092,2341,5.092,2342,4.412,2343,4.495,2344,4.495,2345,5.092,2346,5.092,2347,5.092,2348,5.092,2349,5.092,2350,5.092,2351,5.092,2352,5.092]],["title/modules/Oid4vpModule.html",[357,1.404,1967,2.799]],["body/modules/Oid4vpModule.html",[3,0.119,4,0.096,5,0.096,20,0.009,29,0.549,33,0.945,79,0.119,80,0.072,259,0.007,302,0.007,344,2.724,357,2.434,359,2.408,360,2.646,361,2.834,362,2.834,363,2.646,364,3.815,365,3.815,369,4.546,374,5.384,375,5.138,377,3.597,378,2.834,379,2.646,382,3.358,385,3.481,393,4.447,404,4.129,716,5.435,1967,5.819,1969,5.384,1970,5.384,1982,4.648,1983,4.129,1984,4.129,2075,4.917,2077,3.055,2329,6.2,2343,4.874,2353,4.874,2354,4.874,2355,4.874,2356,4.874,2357,5.384,2358,5.521,2359,5.521,2360,4.874]],["title/injectables/Oid4vpService.html",[30,0.897,716,2.672]],["body/injectables/Oid4vpService.html",[3,0.053,4,0.043,5,0.043,9,1.489,11,1.689,12,0.115,15,0.662,16,0.782,18,0.607,19,0.247,20,0.009,22,0.617,24,1.186,29,0.504,30,0.795,33,0.424,34,2.316,35,0.802,47,2.665,48,1.226,51,1.186,52,4.09,60,0.727,61,1.186,69,4.508,79,0.053,80,0.032,86,2.23,93,1.052,94,2.344,98,2.184,103,2.941,104,2.267,109,0.595,110,1.531,118,0.694,119,1.226,129,0.962,135,1.382,146,2.413,147,2.544,151,2.719,160,2.577,161,1.665,173,1.993,174,1.993,175,1.317,176,1.993,177,1.993,178,1.993,183,2.367,188,1.426,190,1.423,191,1.026,192,1.85,193,1.275,195,1.457,225,0.989,231,3.435,232,1.85,233,1.85,234,1.85,238,1.627,240,2.176,247,2.072,248,3.661,250,2.463,253,5.13,258,1.226,259,0.004,267,3.517,270,1.665,282,1.736,289,1.949,295,2.76,302,0.004,309,0.646,312,0.685,314,1.757,315,1.489,323,2.577,328,1.56,329,3.055,334,1.369,338,0.802,339,1.489,346,0.936,442,2.023,456,2.267,458,2.531,462,4.087,466,4.548,470,1.488,517,1.693,533,2.267,541,2.609,556,3.087,568,2.709,575,1.079,608,1.85,612,1.641,613,3.168,619,1.27,622,4.171,656,2.76,657,1.641,662,3.76,663,1.736,671,1.56,685,4.846,692,1.56,706,0.936,716,2.367,754,1.56,766,2.863,803,2.432,809,2.094,817,2.267,829,1.736,896,1.112,901,1.148,934,0.843,960,1.993,1092,2.48,1156,1.27,1201,1.85,1203,2.184,1206,1.736,1208,1.489,1223,3.472,1228,4.493,1239,4.769,1302,1.369,1355,1.85,1488,1.489,1517,2.184,1524,2.184,1538,1.736,1555,1.85,1557,1.993,1616,3.168,1617,1.85,1711,1.85,1738,2.76,1843,3.7,1906,1.56,1970,3.517,1982,2.609,1983,1.85,1997,4.038,2076,4.769,2077,1.369,2105,1.489,2198,3.661,2240,3.435,2265,2.184,2267,1.993,2282,3.914,2283,5.473,2284,2.941,2285,2.941,2287,3.472,2294,5.373,2310,2.184,2312,2.184,2318,3.472,2327,2.184,2334,3.472,2339,3.472,2344,2.184,2361,2.474,2362,4.895,2363,4.895,2364,2.474,2365,2.474,2366,2.474,2367,2.474,2368,3.168,2369,3.168,2370,2.941,2371,2.474,2372,4.493,2373,2.474,2374,2.474,2375,3.933,2376,2.474,2377,2.474,2378,2.474,2379,2.474,2380,2.941,2381,1.641,2382,1.993,2383,2.474,2384,2.474,2385,2.184,2386,5.577,2387,3.933,2388,4.895,2389,2.474,2390,3.933,2391,6.086,2392,2.474,2393,2.474,2394,3.168,2395,2.474,2396,2.474,2397,2.474,2398,2.184,2399,2.474,2400,2.474,2401,2.474,2402,2.474,2403,2.474,2404,2.474,2405,2.474,2406,2.474,2407,2.474,2408,2.474,2409,2.474,2410,2.474,2411,2.474,2412,2.474,2413,4.895,2414,4.895,2415,2.474,2416,2.474,2417,3.933,2418,3.933,2419,2.474,2420,2.474,2421,2.474,2422,2.474,2423,2.474,2424,2.474,2425,2.474,2426,1.993,2427,2.184,2428,2.474,2429,2.474,2430,1.993,2431,2.184,2432,2.474,2433,2.474,2434,5.577,2435,3.933,2436,2.474,2437,2.474,2438,2.474,2439,3.933,2440,2.474,2441,2.474,2442,4.895,2443,3.933,2444,2.474,2445,2.474,2446,2.474,2447,2.474,2448,1.641,2449,5.577,2450,3.933,2451,3.933,2452,2.474,2453,2.474,2454,2.474,2455,3.933,2456,2.474,2457,2.474,2458,2.474,2459,2.474,2460,3.933,2461,2.474,2462,3.933,2463,2.474,2464,4.895,2465,2.474,2466,3.933,2467,2.474,2468,3.933,2469,3.933,2470,2.474,2471,1.85,2472,3.933,2473,2.474,2474,2.474,2475,2.474,2476,2.474,2477,2.474,2478,2.474,2479,4.895,2480,3.933,2481,3.933,2482,2.474,2483,2.474,2484,2.474,2485,2.184,2486,2.474,2487,2.474,2488,2.184,2489,4.895,2490,2.474,2491,2.184,2492,2.474,2493,2.474,2494,2.474,2495,2.474,2496,2.474,2497,2.184,2498,2.474]],["title/classes/ParResponseDto.html",[80,0.058,664,3.576]],["body/classes/ParResponseDto.html",[3,0.14,4,0.112,5,0.112,11,2.063,12,0.302,13,0.899,18,0.557,19,0.342,20,0.009,79,0.14,80,0.085,171,3.971,259,0.008,302,0.008,304,2.267,312,0.951,323,3.275,548,6.182,584,6.828,610,3.903,647,6.231,664,6.231,671,5.213,896,3.849,2167,5.223,2172,5.724,2499,8.267,2500,7.735,2501,7.735]],["title/interfaces/Params.html",[0,0.545,1555,3.32]],["body/interfaces/Params.html",[0,0.736,2,1.282,3,0.094,4,0.075,5,0.075,12,0.279,13,0.697,18,0.531,19,0.362,20,0.009,22,1.927,60,2.349,79,0.159,88,2.161,109,0.907,110,1.653,118,1.222,191,1.102,193,2.653,206,3.464,219,3.272,258,3.655,259,0.006,302,0.006,309,2.137,442,1.449,470,3.097,502,2.161,557,2.892,644,1.65,905,2.749,927,1.486,934,2.97,1029,4.318,1531,3.511,1532,3.848,1533,5.29,1534,3.848,1535,6.435,1536,5.94,1537,3.059,1538,6.065,1539,5.516,1540,3.848,1541,3.848,1542,3.848,1543,3.848,1544,3.848,1545,3.848,1546,3.848,1547,5.516,1548,3.848,1549,6.045,1550,3.848,1551,3.848,1552,3.848,1553,3.848,1554,3.848,1555,6.12,1556,3.848,1557,3.511,1558,3.848,1559,6.045,1560,3.848,1561,3.848,1562,3.848,1563,6.045,1564,3.848,1565,5.29,1566,3.059,1567,3.848,1568,5.29,1569,5.29,1570,5.29,1571,3.848,1572,3.848,1573,3.848,1574,6.045,1575,3.848,1576,3.848,1577,3.848,1578,5.29,1579,3.848,1580,3.848,1581,3.059,1582,3.848]],["title/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,0.545,748,3.576]],["body/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,0.413,2,0.989,3,0.073,4,0.058,5,0.058,11,1.762,12,0.157,13,0.579,18,0.609,19,0.324,20,0.009,21,1.424,29,0.511,30,1.006,33,0.576,34,2.021,35,1.09,38,1.239,47,2.438,48,1.667,51,1.612,60,0.989,79,0.107,80,0.044,86,2.317,93,0.899,98,1.787,109,1.109,110,1.614,113,2.024,118,2.053,119,1.667,129,2.305,136,1.331,146,2.375,147,2.72,151,2.762,159,1.512,161,2.51,164,2.231,190,0.858,193,2.268,195,1.913,213,1.861,236,2.515,238,2.325,246,1.667,247,2.108,250,1.09,256,1.938,259,0.005,270,2.962,302,0.005,309,0.878,329,2.946,334,2.755,337,2.556,338,1.922,341,3.043,458,2.98,468,3.723,470,1.884,555,2.515,568,1.861,581,2.231,612,3.303,619,3.364,632,2.709,636,4.348,642,2.024,643,3.723,655,4.582,656,4.16,657,2.231,658,1.861,659,2.024,661,2.709,662,3.281,663,2.36,671,3.738,685,4.901,689,3.494,707,2.969,710,2.969,711,2.969,712,2.969,714,2.969,716,3.568,717,3.417,720,2.709,722,5.279,723,2.969,725,5.785,733,2.969,737,3.944,738,5.279,739,4.775,740,3.248,741,2.969,742,2.231,743,2.36,744,2.969,745,2.969,746,2.515,747,2.024,748,4.775,749,5.785,750,4.395,751,4.011,752,2.969,753,4.395,754,2.121,755,5.233,756,2.969,757,2.665,758,2.709,759,2.969,760,2.709,761,2.969,762,2.709,763,2.969,764,2.969,765,2.709,766,2.556,767,2.36,768,2.709,769,2.709,770,2.969,771,2.709,772,2.969,773,2.709,774,2.969,775,2.969,776,2.969,777,4.395,778,2.969,779,2.709,780,2.969,781,2.969,782,3.901,783,2.969,784,2.969,785,2.969,786,2.969,787,2.969,788,4.395,789,3.494,790,2.969,791,5.279,792,2.969,793,2.969,794,2.969,795,4.775,796,2.969,797,2.969,798,2.969,799,2.969,800,2.969,801,2.969,802,2.969,803,1.467,804,2.969,805,4.011,806,2.969,807,2.969,808,1.938,809,1.791,810,2.709,811,2.36,812,2.969,813,2.709,814,2.709,815,2.969,816,2.969,817,1.938,818,3.303,819,2.709,820,2.969,821,4.395,822,2.969,823,2.969,824,2.969,825,2.969,826,2.969,827,1.424,828,2.36,829,2.36,830,4.395,831,2.969,832,3.303,833,2.36,834,4.395,835,2.969,836,2.969,837,2.024,838,2.969,839,2.969,840,2.969,841,2.969,842,2.969,843,2.969,844,2.969,845,2.969,846,2.969,847,2.969,848,2.969]],["title/interfaces/PathSerializer.html",[0,0.545,1736,3.115]],["body/interfaces/PathSerializer.html",[0,0.469,2,0.701,3,0.051,4,0.041,5,0.041,11,1.389,12,0.255,13,0.444,15,1.278,18,0.568,19,0.349,20,0.009,22,0.952,29,0.368,38,0.879,60,2.046,79,0.159,80,0.031,88,3.32,89,1.961,93,0.638,107,2.39,109,1.283,110,1.636,118,1.531,127,3.149,129,0.928,136,1.705,137,2.084,141,0.981,143,1.375,146,0.773,147,0.773,171,3.274,190,1.219,191,1.409,193,0.773,195,1.666,206,2.531,211,1.143,219,2.944,225,0.954,246,2.708,250,1.549,259,0.004,263,2.55,270,2.023,302,0.004,309,2.26,314,2.404,323,1.01,338,2.717,341,1.961,430,0.719,442,1.816,445,3.336,470,2.716,474,2.618,489,1.784,495,1.784,552,1.436,818,1.583,832,1.583,901,2.773,903,1.674,917,3.706,918,2.409,922,2.754,923,2.453,927,2.447,934,2.283,938,2.453,939,4.335,941,2.114,974,1.375,978,1.504,982,2.202,991,1.504,1009,1.504,1012,2.409,1015,2.409,1017,2.409,1019,1.436,1020,1.436,1021,1.571,1022,1.436,1026,1.436,1035,3.598,1036,3.288,1048,2.369,1419,3.353,1420,2.114,1436,1.436,1437,2.754,1537,1.674,1566,4.7,1581,3.353,1709,1.784,1710,3.077,1711,1.784,1712,3.849,1716,5.009,1718,1.922,1720,1.922,1722,1.922,1724,1.922,1725,3.849,1727,1.922,1729,3.077,1730,2.857,1731,3.013,1732,3.013,1733,2.876,1734,1.922,1735,1.583,1736,3.353,1737,1.922,1738,1.674,1739,2.202,1740,1.436,1741,1.436,1742,2.299,1743,2.876,1744,2.876,1745,2.299,1746,2.299,1747,3.077,1748,4.815,1749,3.849,1750,1.922,1751,4.086,1752,4.389,1753,1.922,1754,1.922,1755,1.922,1756,1.922,1757,1.922,1758,3.077,1759,3.077,1760,1.922,1761,3.849,1762,1.504,1763,3.077,1764,1.922,1765,1.922,1766,3.077,1767,3.598,1768,4.401,1769,4.815,1770,1.922,1771,3.077,1772,1.922,1773,3.077,1774,1.922,1775,3.077,1776,1.922,1777,1.922,1778,1.922,1779,1.922,1780,3.077,1781,1.922,1782,1.784,1783,1.922,1784,3.849,1785,1.922,1786,1.922,1787,1.922,1788,1.922,1789,1.922,1790,1.674,1791,1.922,1792,1.922,1793,1.922,1794,1.922,1795,1.922,1796,1.922,1797,1.922,1798,1.922,1799,3.849,1800,1.922,1801,1.922,1802,1.922,1803,1.922,1804,1.922,1805,3.077,1806,1.922,1807,1.922,1808,3.077,1809,1.922,1810,1.922,1811,3.077,1812,1.922,1813,1.922,1814,1.922,1815,1.922,1816,1.922,1817,2.857,1818,1.922,1819,1.922,1820,1.922,1821,1.922,1822,1.922,1823,1.922,1824,1.922,1825,1.922,1826,1.922,1827,3.077,1828,3.077,1829,1.375,1830,1.922,1831,1.922,1832,1.922,1833,1.922,1834,3.077,1835,1.922,1836,1.922,1837,1.922,1838,1.922,1839,2.535,1840,1.922,1841,1.784,1842,1.784,1843,2.535,1844,1.784,1845,1.784,1846,4.401,1847,1.922,1848,1.922,1849,3.849,1850,4.815,1851,1.922,1852,3.077,1853,1.922,1854,1.922,1855,1.922,1856,3.077,1857,3.077,1858,1.922]],["title/entities/PresentationConfig.html",[1859,2.2,2448,2.945]],["body/entities/PresentationConfig.html",[3,0.103,4,0.082,5,0.082,7,0.984,10,3.826,11,2.054,12,0.222,13,0.739,15,2.13,16,1.072,18,0.55,19,0.37,20,0.009,25,4.461,26,3.263,29,0.49,49,5.026,51,2.279,78,4.461,79,0.103,80,0.083,97,1.915,104,3.664,136,2.044,149,3.263,151,2.265,168,3.924,188,3.664,195,1.66,202,2.772,206,3.032,247,2.013,248,5.355,259,0.006,302,0.006,310,2.298,311,2.858,312,1.007,320,4.07,322,2.074,329,3.582,337,3.676,338,2.061,350,2.279,430,1.915,617,5.773,618,3.385,619,3.263,621,4.754,625,4.754,680,3.557,747,2.862,873,5.072,987,4.218,1109,4.218,1173,2.632,1476,3.831,1859,3.789,1860,2.862,1862,4.198,1863,5.026,1865,4.198,1868,3.557,1869,5.121,1871,5.612,1873,5.355,1874,4.198,1877,5.717,1878,5.121,1882,4.198,1885,4.461,1888,5.612,2342,4.218,2394,5.768,2448,4.218,2502,8.371,2503,4.756,2504,4.756,2505,7.161,2506,4.756,2507,4.756,2508,4.756,2509,4.756,2510,4.756,2511,4.756,2512,4.756]],["title/classes/PresentationDuringIssuance.html",[80,0.058,1876,3.32]],["body/classes/PresentationDuringIssuance.html",[3,0.135,4,0.108,5,0.108,7,1.291,12,0.291,13,0.879,16,1.06,18,0.651,19,0.383,20,0.009,29,0.465,79,0.163,80,0.107,191,1.147,259,0.007,302,0.007,304,2.181,310,2.118,311,4.09,312,0.929,320,4.329,322,2.72,329,3.655,337,4.174,747,3.754,984,3.092,1100,5.014,1876,5.651,2513,7.177,2514,5.506,2515,6.237,2516,6.237,2517,5.506,2518,5.506,2519,5.506]],["title/controllers/PresentationManagementController.html",[342,1.593,2520,3.576]],["body/controllers/PresentationManagementController.html",[3,0.082,4,0.066,5,0.066,7,0.785,11,1.871,12,0.177,15,1.964,16,0.973,18,0.5,19,0.376,20,0.009,24,1.819,29,0.518,33,0.65,51,2.606,52,3.824,60,2.04,79,0.082,80,0.05,86,1.719,89,2.49,93,1.015,94,2.441,97,2.302,98,1.362,105,3.815,106,1.881,107,1.517,109,0.962,110,1,135,1.861,146,2.06,147,1.762,191,1.276,193,2.551,195,2.14,203,3.607,204,3.272,240,3.009,247,1.606,253,3.607,259,0.005,270,3.109,289,2.695,302,0.005,309,1.42,310,1.945,312,0.853,315,3.272,316,1.655,329,1.706,339,2.284,342,1.362,344,1.476,346,1.293,350,1.819,471,3.98,474,3.045,502,1.881,507,3.815,517,1.812,518,3.261,520,2.518,521,4.38,522,4.066,530,4.747,535,2.838,539,4.066,544,2.444,588,2.393,619,4.207,655,3.662,658,2.1,667,2.522,673,3.057,692,3.428,716,3.824,896,2.444,905,2.393,927,1.293,1021,2.613,1099,3.272,1134,4.066,1172,2.518,1336,2.518,1790,2.663,1839,2.518,1893,3.824,1894,4.799,1895,5.608,1897,3.35,1899,3.35,1902,3.35,1904,3.35,1905,4.799,1906,4.006,1907,3.35,1914,4.799,1915,3.057,1916,3.35,1917,3.057,1918,3.057,1919,2.838,1924,2.518,1926,4.006,1928,4.38,1929,4.38,1931,3.35,1932,3.35,1933,4.799,1934,6.125,1935,3.35,1936,3.35,1937,5.118,1938,4.799,1940,3.607,1941,3.35,1948,4.751,1949,3.35,1950,3.057,1951,3.35,1952,3.35,1953,3.35,1954,3.35,1955,3.35,1956,3.35,1959,3.35,2382,3.057,2448,4.603,2520,4.38,2521,3.795,2522,5.608,2523,3.795,2524,5.437,2525,3.795,2526,6.155,2527,3.795,2528,3.795,2529,3.795,2530,3.795,2531,3.795,2532,3.35,2533,3.057,2534,3.795,2535,3.795,2536,3.795,2537,3.795,2538,3.795,2539,3.795,2540,3.795,2541,3.795,2542,3.795,2543,3.795,2544,3.795,2545,3.795,2546,3.795,2547,3.795,2548,3.795]],["title/classes/PresentationRequest.html",[80,0.058,2526,3.576]],["body/classes/PresentationRequest.html",[3,0.116,4,0.093,5,0.093,7,1.115,11,1.928,12,0.251,13,0.802,15,1.845,16,0.968,18,0.497,19,0.386,20,0.009,26,3.541,29,0.424,79,0.149,80,0.091,97,2.555,195,2.253,202,3.009,229,3.818,253,5.049,259,0.007,302,0.007,304,1.884,310,2.133,311,3.421,312,0.935,316,3.499,320,3.673,321,3.976,322,2.35,326,4.577,329,3.878,337,3.906,341,3.541,611,4.841,618,3.673,619,4.257,655,3.106,684,3.398,692,4.799,702,4.757,747,3.243,896,3.421,1924,5.049,1926,4.799,1937,4.341,1940,3.575,2060,5.557,2159,4.03,2176,4.03,2179,4.757,2183,5.557,2342,4.577,2526,5.557,2549,6.463,2550,5.389,2551,5.389,2552,6.899]],["title/interfaces/PresentationRequestOptions.html",[0,0.545,2372,3.576]],["body/interfaces/PresentationRequestOptions.html",[0,0.774,2,1.853,3,0.136,4,0.109,5,0.109,7,1.304,11,1.898,12,0.294,13,0.884,16,1.262,18,0.588,19,0.336,20,0.009,26,3.904,29,0.388,79,0.136,97,2.29,195,1.986,259,0.007,302,0.007,329,3.965,337,4.353,458,3.165,611,5.337,747,3.793,2342,5.045,2372,6.831,2549,5.077,2553,6.303,2554,6.126]],["title/modules/PresentationsModule.html",[357,1.404,2357,2.799]],["body/modules/PresentationsModule.html",[3,0.128,4,0.103,5,0.103,20,0.009,29,0.547,33,1.017,52,5.488,79,0.128,80,0.078,259,0.007,302,0.007,344,2.852,357,2.516,359,2.59,360,2.847,361,3.049,362,3.049,363,2.847,364,3.944,365,3.944,377,3.765,378,3.049,379,2.847,382,3.515,1170,3.163,1172,3.94,1440,3.94,1967,4.625,2075,5.147,2077,3.287,2357,5.658,2448,3.94,2520,6.409,2532,5.243,2533,4.784,2555,5.243,2556,5.243,2557,5.243,2558,5.243,2559,6.102,2560,5.939,2561,7.334,2562,5.939,2563,5.939,2564,5.243,2565,5.939]],["title/injectables/PresentationsService.html",[30,0.897,52,2.672]],["body/injectables/PresentationsService.html",[3,0.05,4,0.04,5,0.04,7,1.423,10,3.781,11,0.865,12,0.108,13,0.433,15,2.384,16,0.927,18,0.633,19,0.329,20,0.009,21,1.978,22,0.575,29,0.467,30,0.752,32,3.781,33,0.395,52,3.226,71,2.966,78,4.409,79,0.05,80,0.03,81,1.106,86,2.245,91,1.981,93,1.433,94,2.77,95,3.519,97,2.456,98,0.828,101,3.761,102,2.782,103,2.782,104,2.144,105,4.825,109,1.235,110,1.306,118,1.927,132,1.301,135,1.818,136,1.572,137,1.622,141,0.949,146,2.037,147,1.737,149,4.11,151,2.666,164,3.556,190,1.968,191,1.34,195,0.972,200,4.008,225,2.749,226,1.859,235,1.531,238,1.236,240,3.804,250,1.206,257,2.611,259,0.004,270,2.269,302,0.004,309,1.22,312,0.933,314,1.335,346,0.885,430,1.407,442,1.236,490,2.996,493,2.468,512,1.859,517,1.903,533,1.33,544,2.41,568,1.277,575,2.74,608,4.008,613,2.996,617,2.468,619,4.016,674,5.546,706,0.873,737,1.389,740,2.316,766,1.91,767,4.637,782,1.981,803,3.454,817,2.144,896,2.825,905,3.38,923,1.91,927,0.787,989,2.346,1007,2.611,1016,2.611,1060,1.185,1080,2.058,1104,4.008,1109,2.468,1129,4.409,1134,2.782,1141,3.764,1154,3.764,1156,4.15,1157,1.726,1158,1.726,1159,6.266,1160,1.726,1161,4.384,1169,1.62,1170,1.229,1172,1.531,1193,3.284,1232,6.001,1235,6.114,1289,1.726,1290,1.726,1291,1.144,1607,2.346,1619,1.455,1642,2.346,1677,1.62,1714,2.239,1843,2.468,1859,3.114,1860,2.239,1863,1.62,2076,4.981,2077,1.277,2338,2.782,2380,1.726,2381,1.531,2394,1.859,2448,5.036,2471,1.726,2497,2.037,2522,3.284,2533,1.859,2566,2.308,2567,3.72,2568,6.875,2569,6.608,2570,4.673,2571,5.36,2572,3.72,2573,4.673,2574,3.72,2575,4.673,2576,3.72,2577,1.859,2578,5.114,2579,5.36,2580,3.72,2581,3.284,2582,3.284,2583,3.72,2584,3.72,2585,2.308,2586,6.875,2587,3.72,2588,3.72,2589,2.308,2590,2.308,2591,3.72,2592,2.308,2593,2.308,2594,2.308,2595,5.878,2596,5.36,2597,2.308,2598,4.673,2599,3.72,2600,2.308,2601,3.72,2602,3.72,2603,2.308,2604,4.673,2605,2.308,2606,3.72,2607,3.72,2608,2.308,2609,2.308,2610,2.308,2611,2.308,2612,2.308,2613,2.308,2614,3.72,2615,2.308,2616,2.308,2617,2.308,2618,2.308,2619,1.859,2620,2.308,2621,2.308,2622,2.308,2623,2.308,2624,2.308,2625,2.308,2626,2.308,2627,2.308,2628,2.308,2629,2.308,2630,2.308,2631,2.308,2632,2.308,2633,2.308,2634,2.308,2635,2.308,2636,2.308,2637,2.308,2638,2.308,2639,2.308,2640,2.308,2641,2.308,2642,2.308,2643,2.308,2644,4.673,2645,2.308,2646,2.308,2647,2.308,2648,2.308,2649,2.996,2650,3.72,2651,2.308,2652,2.308]],["title/interfaces/PresentedData.html",[0,0.545,2653,3.576]],["body/interfaces/PresentedData.html",[0,0.849,2,1.589,3,0.117,4,0.094,5,0.094,7,1.118,11,1.256,12,0.252,13,0.804,15,1.445,18,0.549,19,0.337,20,0.009,22,1.347,79,0.117,87,2.508,98,1.94,109,1.216,110,1.562,118,2.251,141,2.223,146,1.752,147,2.241,160,3.514,190,1.379,195,1.412,259,0.007,263,2.161,270,2.288,294,2.991,302,0.007,328,4.359,329,2.43,338,1.752,430,1.628,509,5.568,511,4.354,518,3.548,544,3.611,616,4.16,782,2.878,827,2.288,989,3.408,1642,3.408,1940,3.586,2342,3.586,2653,6.138,2654,4.354,2655,5.405,2656,6.102,2657,5.405,2658,5.405,2659,4.771,2660,6.727,2661,5.568,2662,6.102,2663,4.354,2664,4.771,2665,5.568,2666,6.102,2667,4.354,2668,6.102,2669,6.102,2670,4.771,2671,4.771,2672,4.771,2673,6.102,2674,6.102,2675,4.771,2676,4.771,2677,4.771,2678,4.771,2679,4.771,2680,4.771,2681,4.771,2682,4.771,2683,4.771,2684,4.771,2685,4.771,2686,4.771,2687,4.354]],["title/interfaces/ProcessResponse.html",[0,0.545,2661,3.576]],["body/interfaces/ProcessResponse.html",[0,0.853,2,1.599,3,0.117,4,0.094,5,0.094,7,1.125,11,1.264,12,0.253,13,0.807,15,1.454,18,0.55,19,0.338,20,0.009,22,1.355,79,0.117,87,2.523,98,1.951,109,1.219,110,1.564,118,2.256,141,2.236,146,1.763,147,2.249,160,2.302,190,1.387,195,1.812,259,0.007,263,2.174,270,2.302,294,3.009,302,0.007,328,4.375,329,2.445,338,1.763,430,1.638,509,5.589,511,4.38,518,3.562,544,3.619,616,4.176,782,2.895,827,2.938,989,3.429,1642,3.429,2653,5.589,2654,4.38,2656,4.8,2659,4.8,2660,7.63,2661,6.156,2662,6.125,2663,4.38,2664,4.8,2665,5.589,2666,6.125,2667,4.38,2668,6.125,2669,6.125,2670,4.8,2671,4.8,2672,4.8,2673,6.125,2674,6.125,2675,4.8,2676,4.8,2677,4.8,2678,4.8,2679,4.8,2680,4.8,2681,4.8,2682,4.8,2683,4.8,2684,4.8,2685,4.8,2686,4.8,2687,4.38]],["title/interfaces/QuerySerializerOptions.html",[0,0.545,918,2.799]],["body/interfaces/QuerySerializerOptions.html",[0,0.59,2,1.411,3,0.104,4,0.083,5,0.083,12,0.224,13,0.744,16,1.153,18,0.604,19,0.363,20,0.009,22,2.049,27,3.046,29,0.295,79,0.177,88,3.566,109,1.162,110,1.543,118,1.793,193,2.487,206,2.032,225,3.195,259,0.006,263,2.557,302,0.006,309,2.372,442,2.126,644,2.421,916,5.738,917,2.556,918,4.034,923,4.219,927,2.615,934,1.636,1019,2.889,1020,4.33,1048,3.566,1060,3.284,1419,4.489,1420,3.54,1730,3.59,1736,3.369,1739,2.767,1767,4.618,1829,2.767,1841,4.784,2688,4.238,2689,5.566,2690,3.185,2691,4.8,2692,7.673,2693,4.8,2694,6.397,2695,4.8,2696,6.397,2697,6.397,2698,6.397,2699,4.8,2700,4.8,2701,4.8,2702,4.8,2703,4.8,2704,6.397,2705,4.8]],["title/classes/RegistrarConfig.html",[58,3.32,80,0.058]],["body/classes/RegistrarConfig.html",[3,0.139,4,0.112,5,0.112,7,1.334,9,4.641,10,4.641,12,0.301,13,0.897,15,2.396,16,1.199,18,0.615,19,0.341,20,0.009,58,6.168,59,4.823,75,6.211,79,0.139,80,0.101,97,1.942,132,2.255,185,5.766,259,0.008,302,0.008,304,2.255,312,0.947,1067,4.067,2706,8.248,2707,6.449,2708,8.248,2709,6.449,2710,6.449]],["title/modules/RegistrarModule.html",[357,1.404,374,2.799]],["body/modules/RegistrarModule.html",[3,0.12,4,0.096,5,0.096,7,1.148,20,0.009,29,0.515,33,0.949,59,5.768,69,6.044,70,4.431,71,3.888,79,0.152,80,0.073,104,4.05,110,1.02,132,2.457,259,0.007,302,0.007,334,3.069,357,2.564,359,3.364,360,2.658,361,2.847,362,2.847,363,2.658,364,3.823,365,3.823,369,4.551,374,5.723,377,3.607,378,2.847,379,2.658,382,3.886,384,4.229,385,3.497,392,4.896,425,4.468,1099,3.338,1450,6.213,1675,4.148,1735,3.68,2130,4.148,2357,5.39,2711,4.896,2712,4.896,2713,4.896,2714,5.546,2715,5.546,2716,6.203,2717,5.546,2718,5.546,2719,5.546,2720,5.546,2721,5.546,2722,5.546,2723,7.713,2724,7.713,2725,5.546,2726,5.546]],["title/injectables/RegistrarService.html",[30,0.897,69,2.945]],["body/injectables/RegistrarService.html",[0,0.237,1,2.583,3,0.042,4,0.033,5,0.1,6,1.7,7,0.853,8,1.7,9,5.073,10,5.073,11,0.448,12,0.09,13,0.373,14,1.551,15,1.925,16,0.932,17,4.3,18,0.614,19,0.311,20,0.009,21,0.815,22,0.48,23,2.251,24,0.923,25,1.351,26,0.988,27,1.358,28,1.551,29,0.451,30,0.648,31,4.045,32,3.469,33,0.33,34,2.266,35,0.624,36,5.395,37,1.551,38,3.011,39,1.7,40,2.831,41,2.831,42,2.831,43,2.831,44,2.831,45,2.831,46,1.551,47,2.82,48,0.954,49,3.373,50,1.7,51,0.923,52,4.127,53,1.7,54,1.11,55,1.159,56,1.066,57,1.351,58,5.582,59,6.375,60,2.369,61,1.975,62,1.351,63,1.278,64,1.066,65,1.11,66,1.159,67,1.278,68,1.11,69,3.824,70,2.022,71,1.775,72,2.831,73,2.398,74,5.395,75,6.013,76,2.831,77,4.242,78,4.94,79,0.042,80,0.025,81,0.923,82,2.77,83,4.242,84,1.93,85,2.128,86,2.6,87,1.488,88,0.954,89,2.297,90,2.831,91,1.708,92,3.638,93,1.285,94,2.031,95,3.069,96,2.398,97,2.002,98,1.151,99,2.583,100,2.398,101,2.251,102,2.398,103,2.398,104,1.848,105,2.251,106,0.954,107,1.648,108,2.583,109,1.162,110,1.412,111,1.7,112,1.7,113,1.93,114,1.7,115,2.251,116,1.7,117,1.7,118,2.177,119,0.954,120,1.7,121,1.7,122,1.7,123,1.7,124,1.7,125,5.395,126,1.7,127,1.11,128,1.7,129,0.749,130,2.831,131,2.398,132,1.681,133,4.242,134,3.188,135,1.764,136,1.285,137,1.399,138,2.128,139,3.871,140,2.831,141,1.976,142,3.635,143,1.848,144,2.831,145,2.831,146,2.592,147,2.223,148,2.831,149,1.646,150,2.831,151,2.629,152,2.398,153,2.128,154,2.831,155,5.088,156,1.7,157,1.7,158,2.831,159,1.442,160,1.358,161,1.358,162,2.831,163,1.59,164,3.542,165,4.242,166,1.7,167,1.7,168,1.646,169,1.7,170,1.7,171,0.988,172,1.7,173,1.551,174,1.551,175,1.025,176,1.551,177,1.551,178,1.551,179,1.7,180,1.7,181,1.7,182,1.7,183,1.159,184,2.831,185,5.383,186,4.045,187,5.088,188,3.322,189,2.831,190,1.226,191,1.444,192,1.44,193,1.336,194,2.251,195,0.503,196,1.7,197,1.7,198,2.831,199,2.831,200,2.398,201,3.594,202,1.399,203,3.824,204,3.469,205,2.831,206,0.815,207,1.7,208,1.7,209,1.7,210,1.7,211,3.186,212,4.971,213,2.954,214,3.32,215,2.831,216,2.892,217,3.638,218,2.831,219,1.921,220,4.712,221,3.32,222,5.088,223,2.583,224,1.7,225,0.77,226,1.551,227,1.7,228,1.7,229,2.659,230,3.638,231,2.251,232,1.44,233,1.44,234,1.44,235,1.278,236,1.44,237,1.7,238,1.37,239,2.831,240,1.066,241,2.128,242,1.7,243,1.7,244,3.638,245,3.638,246,1.59,247,1.745,248,3.594,249,1.7,250,1.04,251,1.7,252,1.551,253,3.188,254,1.7,255,1.7,256,1.11,257,1.351,258,0.954,259,0.004,260,1.551,261,1.7,262,1.7,263,1.648,264,1.7,265,1.7,266,1.7,267,1.214,268,1.7,269,1.551,270,0.815,271,1.7,272,1.7,273,2.583,274,1.551,275,1.7,276,1.214,277,1.7,278,1.7,279,1.44,280,1.7,281,1.7,282,2.251,283,2.831,284,2.831,285,1.775,286,2.831,287,1.7,288,1.214,289,0.954,290,1.44,291,2.831,292,2.831,293,1.7,294,1.775,295,1.351,296,1.7,297,1.159,298,1.159,299,2.583,300,2.831,301,1.7,302,0.003,310,0.54,312,0.943,346,0.763,517,1.736,644,0.729,706,0.729,715,1.066,1060,1.646,1250,2.398,2727,3.207,2728,3.207,2729,3.207,2730,3.207,2731,3.207,2732,3.207,2733,1.926,2734,1.926,2735,1.926,2736,1.926,2737,1.926,2738,1.926,2739,1.926,2740,1.926,2741,1.926,2742,1.926,2743,1.926,2744,1.926,2745,1.926,2746,1.926,2747,1.926,2748,1.926]],["title/classes/RegistrationCertificateRequest.html",[49,3.115,80,0.058]],["body/classes/RegistrationCertificateRequest.html",[3,0.132,4,0.106,5,0.106,7,1.269,10,5.057,11,1.738,12,0.286,13,0.87,15,2.158,16,1.049,18,0.538,19,0.331,20,0.009,26,3.839,29,0.46,49,5.896,78,5.896,79,0.132,80,0.098,104,4.31,193,2.792,259,0.007,302,0.007,304,2.144,310,2.096,311,3.628,312,0.919,320,4.297,322,2.674,611,5.248,618,3.982,625,5.593,684,3.866,696,5.412,1090,6.602,2749,8.07,2750,7.124,2751,6.131,2752,6.131]],["title/interfaces/RequestOptions.html",[0,0.545,1026,2.672]],["body/interfaces/RequestOptions.html",[0,0.814,2,1.011,3,0.074,4,0.06,5,0.06,11,1.89,12,0.16,13,0.589,16,1.099,18,0.477,19,0.386,20,0.009,24,1.649,27,1.456,29,0.369,38,2.813,60,2.172,79,0.176,87,1.596,91,1.832,95,1.832,97,1.036,98,1.234,107,2.649,109,0.766,127,2.918,129,1.338,136,0.92,137,1.5,141,1.415,142,2.169,159,1.547,161,2.805,163,1.705,175,3.528,190,1.292,193,2.732,195,2.089,206,3.233,211,2.426,219,2.953,225,3.132,229,1.903,238,1.143,250,2.148,258,2.978,259,0.005,302,0.005,314,1.234,316,1.5,338,2.776,346,0.818,430,2.127,442,1.997,445,3.54,470,2.795,474,1.649,644,2.672,910,2.169,912,2.169,914,2.169,915,2.169,919,2.282,922,4.257,925,3.788,927,1.172,928,3.988,934,2.772,946,2.282,953,2.07,974,1.982,975,2.414,976,4.956,977,4.493,978,2.169,979,3.786,980,3.786,981,2.572,982,2.918,983,2.572,984,4.031,985,4.65,986,2.572,987,2.282,988,2.572,989,4.178,990,2.282,991,2.169,992,1.903,993,2.572,994,2.572,995,2.572,996,2.572,997,3.553,998,3.553,999,2.572,1000,2.572,1001,2.414,1002,2.572,1003,3.786,1004,2.572,1005,3.986,1006,2.572,1007,2.414,1008,2.572,1009,3.788,1010,2.572,1011,2.414,1012,3.192,1013,2.572,1014,2.572,1015,3.192,1016,2.414,1017,2.169,1018,2.572,1019,2.07,1020,2.07,1021,1.415,1022,2.07,1023,2.414,1024,2.414,1025,2.572,1026,3.047,1027,3.786,1028,3.786,1029,3.788,1030,4.216,1031,4.955,1032,6.486,1033,4.493,1034,2.572,1035,4.25,1036,2.07,1037,3.553,1038,2.282,1039,2.414,1040,2.414,1041,2.414,1042,1.903,1043,2.169,1044,2.282,1045,2.414,1046,2.169,1047,2.07,1048,1.705,1049,2.414,1050,5.183,1051,2.414]],["title/modules/ResolverModule.html",[357,1.404,2559,3.115]],["body/modules/ResolverModule.html",[3,0.139,4,0.111,5,0.111,20,0.009,29,0.507,33,1.102,79,0.139,80,0.084,259,0.008,302,0.008,357,2.606,359,2.808,360,3.085,361,3.305,362,3.305,363,3.085,364,4.085,365,4.085,377,3.954,378,3.305,379,3.085,382,3.085,2075,5.405,2077,3.562,2559,6.287,2578,6.463,2753,5.683,2754,5.683,2755,5.683,2756,6.438,2757,6.438]],["title/injectables/ResolverService.html",[30,0.897,2578,3.115]],["body/injectables/ResolverService.html",[3,0.106,4,0.085,5,0.085,7,1.012,10,2.944,12,0.228,16,0.909,19,0.286,20,0.009,21,3.273,22,2.06,24,2.344,29,0.508,30,1.309,33,0.837,79,0.106,80,0.064,93,1.308,94,2.153,109,1.099,110,1.422,118,2.254,132,2.265,135,1.471,141,2.664,146,2.354,147,1.586,190,1.653,191,1.191,195,1.278,213,3.584,238,2.569,241,4.297,247,2.071,259,0.006,260,3.94,302,0.006,312,0.796,314,3.025,346,1.541,470,2.451,517,1.692,564,3.658,575,2.825,653,3.245,657,3.245,706,1.851,737,2.944,740,4.242,757,3.715,782,3.449,803,2.825,1068,4.085,1113,2.425,1161,3.245,1206,4.546,1283,4.318,1291,2.425,1302,3.584,1377,4.318,1607,4.875,1645,4.318,1751,3.658,1961,3.433,2076,5.799,2077,2.707,2380,4.844,2381,3.245,2577,3.94,2578,4.546,2582,5.718,2758,4.892,2759,6.477,2760,6.477,2761,4.892,2762,6.477,2763,4.892,2764,6.477,2765,6.477,2766,5.718,2767,6.477,2768,4.892,2769,4.318,2770,4.892,2771,4.892,2772,4.892,2773,4.892,2774,4.892,2775,4.892,2776,4.892,2777,4.892,2778,4.892,2779,4.892,2780,4.892,2781,6.477,2782,4.318,2783,4.892,2784,4.892,2785,4.318,2786,4.892,2787,4.892,2788,4.892,2789,4.892,2790,4.892,2791,4.892]],["title/classes/SchemaResponse.html",[80,0.058,1167,3.32]],["body/classes/SchemaResponse.html",[3,0.138,4,0.111,5,0.111,12,0.298,13,1.013,18,0.613,19,0.396,20,0.009,79,0.138,80,0.084,259,0.008,302,0.008,304,2.235,309,2.003,312,1.047,334,4.547,430,2.31,610,3.847,927,2.614,934,2.614,1099,4.945,1167,5.736,2167,5.149,2792,8.714,2793,7.67,2794,7.67,2795,7.67,2796,5.643,2797,5.643,2798,5.643]],["title/interfaces/SerializeOptions.html",[0,0.545,2799,3.115]],["body/interfaces/SerializeOptions.html",[0,0.855,2,1.123,3,0.082,4,0.066,5,0.066,18,0.591,19,0.325,20,0.009,22,1.361,27,2.699,79,0.18,88,1.893,98,2.288,109,1.374,110,1.566,118,1.07,136,1.021,168,2.804,191,1.409,238,1.269,250,1.238,259,0.005,263,1.527,302,0.005,309,2.274,332,1.893,430,2.306,442,1.269,642,2.298,644,1.445,917,2.033,927,1.302,934,1.302,938,3.572,939,5.117,941,3.528,984,3.16,992,2.113,1048,1.893,1420,4.237,1436,4.431,1437,5.019,1731,2.408,1732,2.408,1733,4.431,1739,3.148,1740,3.287,1741,3.287,1742,3.837,1743,4.853,1744,4.745,1745,4.431,1746,3.837,1752,4.642,1762,4.021,1767,4.94,1829,2.201,2689,4.23,2690,3.623,2799,4.883,2800,2.68,2801,4.883,2802,3.833,2803,2.856,2804,2.856,2805,2.68,2806,2.856,2807,6.367,2808,2.856,2809,4.768,2810,2.856,2811,5.204,2812,5.204,2813,2.856,2814,2.856,2815,4.084,2816,2.856,2817,2.856,2818,2.856,2819,2.856,2820,2.856,2821,2.856,2822,2.856,2823,2.856,2824,2.856,2825,2.856,2826,2.856,2827,2.856,2828,2.856,2829,2.856]],["title/interfaces/SerializePrimitiveOptions.html",[0,0.545,2801,3.115]],["body/interfaces/SerializePrimitiveOptions.html",[0,0.848,2,1.104,3,0.081,4,0.065,5,0.065,12,0.175,13,0.627,16,0.757,18,0.605,19,0.347,20,0.009,22,1.345,27,3.096,79,0.179,88,1.861,98,2.267,109,1.372,110,1.561,118,1.053,136,1.004,168,2.77,191,1.504,238,1.248,250,1.217,259,0.005,263,1.501,302,0.005,309,2.268,332,1.861,430,2.293,442,1.248,642,2.26,644,1.421,917,2,927,1.28,934,1.28,938,3.545,939,5.107,941,3.495,984,2.675,992,2.078,1048,1.861,1420,4.214,1436,4.402,1437,5.006,1731,2.368,1732,2.368,1733,4.402,1739,3.11,1740,3.248,1741,3.248,1742,3.801,1743,4.831,1744,4.722,1745,4.402,1746,3.801,1752,4.612,1762,3.983,1767,5.108,1829,2.164,2689,3.58,2690,3.58,2799,4.433,2800,2.635,2801,4.846,2802,3.787,2803,2.808,2804,2.808,2805,2.635,2806,2.808,2807,6.347,2808,2.808,2809,4.724,2810,2.808,2811,5.164,2812,5.164,2813,2.808,2814,2.808,2815,4.035,2816,2.808,2817,2.808,2818,2.808,2819,2.808,2820,2.808,2821,2.808,2822,2.808,2823,2.808,2824,2.808,2825,2.808,2826,2.808,2827,2.808,2828,2.808,2829,2.808]],["title/interfaces/SerializePrimitiveParam.html",[0,0.545,1733,2.672]],["body/interfaces/SerializePrimitiveParam.html",[0,0.851,2,1.112,3,0.082,4,0.065,5,0.065,12,0.176,13,0.631,18,0.606,19,0.338,20,0.009,22,1.352,27,2.685,79,0.179,88,1.875,98,2.276,109,1.373,110,1.563,118,1.06,136,1.011,168,2.785,191,1.404,238,1.257,250,1.226,259,0.005,263,1.512,302,0.005,309,2.307,332,1.875,430,2.299,442,1.257,642,2.277,644,1.431,917,2.014,927,1.289,934,1.289,938,3.556,939,5.111,941,3.509,984,3.144,992,2.093,1048,1.875,1420,4.224,1436,4.414,1437,5.011,1731,2.385,1732,2.385,1733,4.594,1739,3.126,1740,3.265,1741,3.265,1742,3.817,1743,4.841,1744,4.732,1745,4.414,1746,3.817,1752,4.625,1762,3.999,1767,4.929,1829,2.18,2689,3.599,2690,3.599,2799,4.451,2800,2.655,2801,4.862,2802,3.807,2803,2.829,2804,2.829,2805,2.655,2806,2.829,2807,6.355,2808,2.829,2809,4.743,2810,2.829,2811,5.181,2812,5.181,2813,2.829,2814,2.829,2815,4.057,2816,2.829,2817,2.829,2818,2.829,2819,2.829,2820,2.829,2821,2.829,2822,2.829,2823,2.829,2824,2.829,2825,2.829,2826,2.829,2827,2.829,2828,2.829,2829,2.829]],["title/interfaces/SerializerOptions.html",[0,0.545,2689,2.945]],["body/interfaces/SerializerOptions.html",[0,0.848,2,1.102,3,0.081,4,0.065,5,0.065,12,0.175,13,0.626,18,0.588,19,0.347,20,0.009,22,1.343,27,3.094,79,0.179,88,1.857,98,2.264,109,1.372,110,1.56,118,1.05,136,1.441,168,2.766,191,1.4,238,1.245,250,1.215,259,0.005,263,1.498,302,0.005,309,2.281,332,1.857,430,2.361,442,1.245,642,2.255,644,1.418,917,1.995,927,1.277,934,1.277,938,3.541,939,5.159,941,3.491,984,2.671,992,2.074,1048,3.127,1420,4.211,1436,4.398,1437,5.004,1731,2.363,1732,2.363,1733,4.398,1739,3.105,1740,3.243,1741,3.243,1742,3.797,1743,4.828,1744,4.719,1745,4.398,1746,3.797,1752,5.059,1762,3.978,1767,4.918,1829,2.16,2689,4.186,2690,3.575,2799,4.427,2800,2.63,2801,4.427,2802,3.781,2803,2.802,2804,2.802,2805,2.63,2806,2.802,2807,6.344,2808,2.802,2809,4.718,2810,2.802,2811,5.159,2812,5.159,2813,2.802,2814,2.802,2815,4.029,2816,2.802,2817,2.802,2818,2.802,2819,2.802,2820,2.802,2821,2.802,2822,2.802,2823,2.802,2824,2.802,2825,2.802,2826,2.802,2827,2.802,2828,2.802,2829,2.802]],["title/entities/Session.html",[458,1.593,1859,2.2]],["body/entities/Session.html",[3,0.077,4,0.062,5,0.062,7,0.736,11,1.987,12,0.166,13,0.783,15,1.998,16,1.216,18,0.598,19,0.381,20,0.009,25,4.297,26,3.143,29,0.46,51,2.486,71,1.967,79,0.077,80,0.047,97,1.562,136,2.317,143,3.529,149,2.662,151,1.936,160,3.266,168,3.455,259,0.005,302,0.005,310,2.354,312,1.032,323,3.469,329,3.218,335,3.64,337,3.143,339,3.122,340,4.748,354,3.64,355,3.122,430,2.027,442,1.182,458,3.043,471,2.841,553,3.271,575,2.262,618,3.979,619,3.836,621,3.879,625,5.588,636,4.062,643,5.034,655,3.879,671,3.861,678,5.405,747,2.14,791,4.932,803,1.55,827,3.469,837,5.103,881,2.14,896,3.026,926,2.495,927,2.294,1067,2.242,1092,4.513,1109,3.441,1156,1.825,1160,2.659,1161,2.359,1165,2.242,1173,1.967,1390,4.578,1484,3.879,1677,3.64,1859,3.548,1860,2.14,1863,4.297,1868,2.659,1869,4.178,1873,5.914,1877,6.28,1878,6.981,1885,3.64,1903,4.062,2156,4.178,2267,4.932,2342,3.441,2368,4.178,2382,2.864,2398,5.405,2471,3.879,2667,4.178,2830,3.138,2831,3.555,2832,5.422,2833,3.555,2834,3.555,2835,3.555,2836,5.405,2837,3.555,2838,5.187,2839,3.555,2840,3.555,2841,6.123,2842,3.555,2843,3.555,2844,3.555,2845,4.578,2846,5.187,2847,3.555,2848,5.187,2849,3.555,2850,5.187,2851,3.555,2852,3.555,2853,2.495]],["title/controllers/SessionController.html",[342,1.593,2854,3.576]],["body/controllers/SessionController.html",[3,0.111,4,0.089,5,0.089,7,1.06,12,0.239,15,2.182,16,0.936,18,0.535,19,0.295,20,0.009,26,3.427,29,0.532,33,0.877,79,0.111,80,0.067,86,2.111,89,2.396,93,1.369,94,2.468,109,1.124,135,1.787,160,2.826,190,2.008,191,1.228,193,1.66,259,0.007,302,0.007,309,1.94,310,2.082,312,0.913,342,1.838,344,1.991,346,1.588,350,2.454,355,4.018,458,3.164,471,3.446,502,2.538,517,1.743,518,2.629,520,3.397,530,4.355,535,3.83,544,3.001,588,3.229,662,4.11,667,3.097,1104,5.885,1105,4.209,1127,4.47,1162,3.082,1163,3.83,1714,4.018,1893,3.082,1915,4.125,1917,4.125,1918,4.125,1919,3.83,1928,4.125,1929,4.125,1948,3.83,2338,4.992,2853,4.685,2854,5.377,2855,5.121,2856,7.87,2857,6.675,2858,6.675,2859,5.121,2860,5.121,2861,6.675,2862,5.121,2863,5.121,2864,5.523,2865,6.675,2866,5.121,2867,4.52,2868,4.125,2869,5.893,2870,4.52,2871,4.125,2872,5.121,2873,5.121,2874,5.121,2875,5.121,2876,5.121,2877,5.121,2878,5.121]],["title/interfaces/SessionLogContext.html",[0,0.545,2240,3.115]],["body/interfaces/SessionLogContext.html",[0,0.692,2,1.656,3,0.122,4,0.098,5,0.098,7,1.166,12,0.263,13,0.825,15,1.897,16,1.179,18,0.649,19,0.385,20,0.009,22,1.769,25,4.98,26,4.186,73,4.213,79,0.122,149,3.988,151,2.579,259,0.007,302,0.007,312,0.692,355,4.271,456,4.7,458,3.162,462,5.3,464,5.576,466,5.899,953,4.271,962,5.716,1674,5.307,1997,5.154,2105,4.271,2240,4.98,2282,3.953,2284,6.098,2285,6.515,2554,5.716,2832,5.716,2879,5.716,2880,5.633,2881,5.633,2882,5.633,2883,7.096,2884,7.096,2885,7.096]],["title/injectables/SessionLoggerInterceptor.html",[30,0.897,1969,2.799]],["body/injectables/SessionLoggerInterceptor.html",[3,0.08,4,0.064,5,0.064,7,1.419,11,1.967,12,0.172,15,1.427,16,0.878,19,0.321,20,0.009,22,0.922,29,0.466,30,1.079,33,0.633,79,0.08,80,0.049,81,1.772,86,2.299,89,1.327,91,2.841,93,1.833,94,2.416,95,3.871,96,3.991,106,1.833,109,1.038,110,1.583,135,1.557,151,1.688,161,3.384,175,3.65,191,1.261,193,2.743,195,1.635,225,2.133,238,1.229,250,2.03,258,1.833,259,0.005,289,2.645,302,0.005,312,0.769,335,2.595,338,2.591,346,1.27,355,4.126,415,2.595,416,2.765,456,4.19,458,2.967,470,1.399,471,1.715,472,4.711,474,1.772,476,3.264,514,2.046,517,1.635,545,2.978,557,2.453,566,2.225,667,2.476,706,1.399,881,3.768,1068,4.584,1468,3.264,1681,3.991,1716,3.991,1969,4.323,1991,3.264,1992,7.189,1995,5.522,1997,5.025,1998,2.978,2004,3.264,2083,5.522,2105,4.375,2146,3.991,2199,2.978,2282,4.811,2283,5.522,2284,5.437,2369,4.298,2370,2.765,2381,2.453,2649,5.044,2665,2.978,2879,5.522,2886,3.697,2887,5.336,2888,5.336,2889,5.336,2890,6.686,2891,3.697,2892,5.336,2893,6.856,2894,3.697,2895,5.336,2896,5.336,2897,5.336,2898,5.336,2899,5.336,2900,7.27,2901,5.336,2902,5.336,2903,3.697,2904,5.336,2905,6.261,2906,5.336,2907,6.856,2908,5.336,2909,3.697,2910,3.697,2911,3.697,2912,5.336,2913,3.697,2914,3.697,2915,3.697,2916,3.697,2917,3.697,2918,3.697,2919,3.697,2920,3.697,2921,3.697,2922,3.697,2923,3.697,2924,3.697,2925,3.697,2926,4.711,2927,3.697,2928,3.697,2929,3.697,2930,3.697,2931,3.697,2932,6.261,2933,6.261,2934,3.697,2935,3.697,2936,6.856,2937,3.697,2938,3.697,2939,3.697,2940,3.697,2941,3.264,2942,3.264,2943,3.697,2944,3.697,2945,3.264,2946,3.697,2947,3.264,2948,3.264,2949,2.595,2950,3.264,2951,3.264,2952,3.697,2953,3.264,2954,3.264,2955,3.697,2956,3.697,2957,3.697,2958,3.697,2959,5.336,2960,3.697]],["title/injectables/SessionLoggerService.html",[30,0.897,1970,2.799]],["body/injectables/SessionLoggerService.html",[3,0.061,4,0.049,5,0.049,7,0.907,11,1.244,12,0.132,13,0.51,16,1.106,18,0.576,19,0.358,20,0.009,27,3.031,29,0.37,30,0.886,33,0.487,34,2.641,35,0.922,68,3.468,79,0.061,80,0.037,86,2.338,89,1.921,93,1.609,94,1.457,95,2.335,96,3.279,97,1.321,108,3.532,109,1.194,110,0.985,132,1.533,135,1.791,137,1.24,139,4.312,149,1.459,161,2.547,188,1.638,191,1.491,250,2.762,259,0.004,302,0.004,312,0.996,323,2.547,346,1.043,415,1.995,416,2.126,458,3.091,462,4.784,517,2.059,619,2.251,654,4.726,667,3.016,676,3.279,706,1.076,728,6.241,827,2.908,829,3.077,881,4.45,1038,1.886,1060,3.977,1092,4.1,1216,4.847,1677,4.223,1681,4.5,1693,3.871,1970,3.794,1997,5.845,2083,3.532,2105,3.622,2130,3.279,2139,2.126,2140,2.29,2146,6.408,2156,5.237,2240,6.248,2282,4.821,2285,5.354,2328,2.51,2370,3.279,2385,2.51,2836,5.739,2879,6.602,2890,6.526,2926,6.526,2942,2.51,2945,3.871,2947,3.871,2948,7.369,2949,3.077,2950,3.871,2961,2.843,2962,4.385,2963,4.385,2964,4.385,2965,5.353,2966,5.353,2967,4.385,2968,5.353,2969,4.385,2970,5.353,2971,5.353,2972,5.353,2973,4.385,2974,6.017,2975,2.843,2976,4.385,2977,4.385,2978,9.048,2979,2.843,2980,2.843,2981,6.501,2982,2.843,2983,2.843,2984,2.843,2985,4.385,2986,2.843,2987,5.353,2988,2.843,2989,2.843,2990,4.385,2991,2.843,2992,2.843,2993,2.843,2994,2.843,2995,2.843,2996,2.843,2997,2.843,2998,4.385,2999,2.843,3000,2.843,3001,2.843,3002,7.748,3003,7.748,3004,2.126,3005,7.393,3006,2.843,3007,2.843,3008,2.843,3009,2.843,3010,2.843,3011,2.843,3012,2.843,3013,2.843,3014,2.843,3015,4.385]],["title/modules/SessionModule.html",[357,1.404,375,2.672]],["body/modules/SessionModule.html",[3,0.122,4,0.098,5,0.098,7,1.167,20,0.009,29,0.536,33,0.966,70,4.479,71,4.302,79,0.153,80,0.074,110,1.038,259,0.007,302,0.007,344,2.762,357,2.58,359,2.46,360,2.704,361,2.896,362,2.896,363,2.704,364,3.853,365,3.853,375,5.424,377,3.646,378,2.896,379,2.704,382,3.404,384,4.275,403,4.98,430,2.139,458,2.025,471,3.607,582,4.219,583,4.98,662,5.012,1162,3.396,1170,3.004,1440,3.743,1968,5.695,1977,4.98,2427,6.862,2853,5.455,2854,6.262,2867,4.98,2868,4.545,2869,4.98,3016,4.98,3017,4.98,3018,5.642,3019,4.98,3020,5.642,3021,5.642,3022,4.98,3023,5.642,3024,4.98,3025,5.642,3026,5.642,3027,5.642]],["title/injectables/SessionService.html",[30,0.897,662,2.456]],["body/injectables/SessionService.html",[3,0.089,4,0.071,5,0.071,12,0.192,15,1.538,16,1.062,18,0.601,19,0.335,20,0.009,29,0.495,30,1.163,31,5.505,33,0.704,34,2.745,35,1.332,60,1.692,79,0.089,80,0.054,81,1.97,86,2.099,93,1.538,94,2.516,98,2.716,109,1.219,110,1.323,118,1.613,135,1.974,143,3.316,151,2.274,183,3.463,190,1.468,191,1.392,201,4.303,211,3.181,259,0.006,289,3.564,302,0.006,312,1.01,346,1.369,352,5.046,363,2.758,406,3.311,430,1.733,458,3.068,496,2.885,517,1.977,612,5.021,662,3.184,667,2.669,675,4.303,689,5.046,706,1.556,779,4.635,901,2.669,1060,2.11,1105,3.628,1129,5.046,1169,2.885,1170,2.189,1173,2.275,1325,4.303,1714,3.463,1863,2.885,2060,4.635,2853,5.046,2868,3.311,3022,5.079,3024,5.079,3028,4.111,3029,7.191,3030,7.191,3031,4.111,3032,8.053,3033,4.111,3034,5.754,3035,4.111,3036,7.191,3037,4.111,3038,5.754,3039,7.191,3040,4.111,3041,5.754,3042,4.111,3043,4.111,3044,5.754,3045,7.191,3046,4.111,3047,5.754,3048,4.111,3049,5.754,3050,7.191,3051,5.754,3052,5.754,3053,5.754,3054,4.111,3055,5.754,3056,5.754,3057,4.111,3058,4.111,3059,4.111,3060,4.111,3061,5.754,3062,5.754,3063,4.111,3064,5.754,3065,4.111,3066,4.111,3067,4.111,3068,4.111,3069,4.111,3070,4.111,3071,4.111,3072,5.754,3073,4.111,3074,4.111,3075,4.111,3076,4.111]],["title/controllers/StatusListController.html",[342,1.593,3077,3.576]],["body/controllers/StatusListController.html",[3,0.133,4,0.107,5,0.107,12,0.288,16,0.866,18,0.583,19,0.358,20,0.009,29,0.498,33,1.057,79,0.133,80,0.081,94,2.052,109,0.935,135,1.705,151,2.375,191,1.136,259,0.007,302,0.007,310,1.73,312,0.759,314,2.215,342,2.215,344,2.401,346,1.787,350,2.959,502,3.06,517,1.612,520,4.096,544,3.639,1080,4.479,1113,3.06,1127,4.871,1162,4.52,1163,4.617,1893,4.871,3077,6.049,3078,4.982,3079,6.173,3080,6.173,3081,6.629,3082,4.973,3083,7.51,3084,6.173,3085,7.51,3086,6.173,3087,6.173,3088,6.173,3089,5.449,3090,6.173,3091,6.173]],["title/interfaces/StatusListFile.html",[0,0.545,3092,3.576]],["body/interfaces/StatusListFile.html",[0,0.411,2,0.982,3,0.072,4,0.058,5,0.144,12,0.275,13,0.576,15,0.893,16,0.695,18,0.603,19,0.289,20,0.009,29,0.52,30,1.002,32,3.554,33,0.572,34,2.013,35,1.083,47,2.429,48,1.656,54,1.925,55,2.011,56,2.742,61,3.503,63,2.217,64,1.849,65,1.925,66,2.011,67,2.217,68,1.925,79,0.072,80,0.044,81,1.601,86,2.457,93,0.893,94,1.963,97,1.492,109,1.056,110,1.612,118,2.121,132,1.168,135,0.759,136,0.893,146,2.262,147,2.262,151,2.623,152,2.499,153,2.217,163,1.656,171,3.988,175,1.779,183,3.554,190,0.852,204,2.011,219,1.336,238,1.647,240,1.849,247,1.414,259,0.005,267,3.124,285,3.268,288,2.107,289,3.238,290,4.417,297,2.011,298,2.011,302,0.005,309,1.822,314,1.199,442,1.11,456,2.856,458,2.504,544,3.904,575,2.161,576,5.218,737,2.982,754,3.724,766,1.715,782,1.779,803,3.187,809,1.779,811,2.345,827,2.098,852,2.217,896,1.502,901,1.55,923,1.715,926,2.345,1021,1.374,1042,1.849,1080,4.716,1094,5.887,1127,2.011,1129,3.477,1135,2.691,1143,3.918,1156,2.543,1162,2.011,1166,2.691,1169,2.345,1170,1.779,1173,1.849,1184,3.991,1200,3.991,1201,2.499,1206,2.345,1370,2.691,1502,2.345,1511,2.691,1594,2.691,1607,3.124,1619,2.107,1642,3.124,1714,2.982,1893,2.982,2426,2.691,2430,2.691,2619,2.691,2864,3.477,2871,2.691,2949,5.667,3078,2.217,3082,2.691,3092,5.62,3093,2.949,3094,6.159,3095,5.767,3096,4.374,3097,2.949,3098,2.949,3099,4.374,3100,2.691,3101,2.345,3102,2.691,3103,2.691,3104,2.949,3105,2.949,3106,2.949,3107,2.949,3108,2.949,3109,2.949,3110,4.374,3111,5.767,3112,4.374,3113,2.949,3114,2.949,3115,5.213,3116,4.374,3117,2.949,3118,2.949,3119,2.949,3120,2.949,3121,2.949,3122,2.949,3123,2.949,3124,2.949,3125,2.949,3126,4.374,3127,2.949,3128,4.374,3129,2.949,3130,2.949,3131,4.374,3132,4.374,3133,2.949,3134,2.949,3135,2.949,3136,2.949,3137,5.213,3138,2.949,3139,2.949,3140,2.949,3141,2.949,3142,2.949,3143,2.691,3144,5.213,3145,2.949,3146,2.949,3147,2.949,3148,2.949,3149,6.159,3150,2.949,3151,2.949,3152,4.374,3153,2.949,3154,2.949,3155,2.949,3156,2.949,3157,2.949,3158,2.949,3159,4.374,3160,4.374,3161,2.949,3162,2.949,3163,2.949]],["title/modules/StatusListModule.html",[357,1.404,1968,2.945]],["body/modules/StatusListModule.html",[3,0.131,4,0.105,5,0.105,20,0.009,29,0.538,33,1.039,79,0.131,80,0.08,259,0.007,302,0.007,344,2.89,357,2.541,359,2.647,360,2.909,361,3.116,362,3.116,363,2.909,364,3.982,365,3.982,369,4.654,377,3.815,378,3.116,379,2.909,382,3.562,385,3.827,544,3.342,1127,5.503,1162,3.653,1163,4.539,1170,3.232,1440,4.027,1968,5.974,3077,6.471,3078,4.027,3101,4.259,3102,4.889,3103,4.889,3164,5.358,3165,6.069,3166,5.358,3167,5.358,3168,6.069,3169,6.069,3170,6.069]],["title/injectables/StatusListService.html",[30,0.897,1127,2.672]],["body/injectables/StatusListService.html",[0,0.328,3,0.058,4,0.046,5,0.143,12,0.24,13,0.486,15,1.117,16,1.068,18,0.637,19,0.343,20,0.009,29,0.497,30,0.844,32,4.03,33,0.457,34,2.282,35,0.866,47,2.877,48,1.324,54,1.539,55,1.607,56,2.311,61,3.209,63,1.772,64,1.478,65,1.539,66,1.607,67,1.772,68,1.539,79,0.058,80,0.035,81,1.28,86,2.65,93,1.117,94,1.71,97,1.549,109,0.956,110,1.561,118,2.086,132,1.461,135,1.762,136,1.117,146,2.622,147,2.047,151,2.724,152,3.124,153,2.771,163,2.07,171,3.717,175,2.224,183,3.096,190,1.066,191,1.4,204,2.514,219,1.068,238,1.388,240,1.478,247,1.13,259,0.004,267,2.634,285,2.847,288,2.634,289,3.319,290,3.847,297,1.607,298,1.607,302,0.004,309,1.988,310,0.748,312,0.969,314,0.958,346,0.994,430,0.804,442,0.887,456,2.407,458,2.671,474,1.28,517,1.988,544,3.932,575,1.822,576,4.722,706,1.01,715,1.478,737,2.514,754,3.244,766,1.371,782,1.422,803,2.243,809,1.422,811,1.874,827,2.178,852,1.772,896,1.201,901,1.239,906,3.124,923,1.371,926,1.874,1021,1.718,1042,2.311,1060,2.144,1080,4.745,1094,4.144,1127,2.514,1129,4.083,1135,3.365,1143,4.189,1156,2.144,1162,4.81,1166,2.151,1169,1.874,1170,1.422,1173,1.478,1184,3.365,1200,3.365,1201,1.997,1206,1.874,1250,3.124,1370,2.151,1497,2.931,1502,2.931,1511,2.151,1594,3.365,1607,2.634,1619,1.684,1642,3.669,1714,3.502,1893,2.514,2426,2.151,2430,2.151,2619,3.365,2864,4.083,2871,2.151,2949,5.223,3078,5.303,3081,3.687,3082,3.365,3092,5.636,3093,2.357,3094,3.687,3095,3.687,3096,3.687,3097,2.357,3098,2.357,3099,3.687,3100,2.151,3101,1.874,3102,2.151,3103,2.151,3104,2.357,3105,4.541,3106,3.687,3107,2.357,3108,4.541,3109,3.687,3110,5.136,3111,5.91,3112,4.541,3113,3.687,3114,3.687,3115,4.541,3116,3.687,3117,2.357,3118,2.357,3119,2.357,3120,2.357,3121,2.357,3122,2.357,3123,2.357,3124,2.357,3125,2.357,3126,3.687,3127,3.687,3128,3.687,3129,2.357,3130,2.357,3131,3.687,3132,3.687,3133,2.357,3134,2.357,3135,2.357,3136,2.357,3137,4.541,3138,2.357,3139,2.357,3140,3.687,3141,2.357,3142,2.357,3143,3.365,3144,5.574,3145,4.541,3146,2.357,3147,2.357,3148,2.357,3149,5.574,3150,2.357,3151,2.357,3152,3.687,3153,2.357,3154,2.357,3155,3.687,3156,2.357,3157,3.687,3158,2.357,3159,3.687,3160,3.687,3161,2.357,3162,2.357,3163,2.357,3171,4.177,3172,4.177,3173,4.177,3174,4.177,3175,4.177,3176,2.67,3177,2.67,3178,2.67,3179,2.67,3180,2.67,3181,2.67,3182,2.67,3183,2.67,3184,2.67,3185,2.67,3186,2.67]],["title/entities/StatusMapping.html",[1859,2.2,3101,3.115]],["body/entities/StatusMapping.html",[3,0.128,4,0.102,5,0.102,12,0.387,13,0.85,18,0.625,19,0.393,20,0.009,29,0.363,79,0.128,80,0.078,136,2.378,171,3.753,259,0.007,302,0.007,310,2.325,312,1.019,456,4.576,873,5.9,1080,4.393,1143,5.267,1173,3.27,1859,3.624,1860,3.557,1868,6.204,1885,5.982,3078,5.656,3101,5.131,3187,8.525,3188,5.91,3189,8.685,3190,5.91,3191,7.312,3192,5.91,3193,5.91,3194,5.91]],["title/classes/StatusUpdateDto.html",[80,0.058,2864,3.115]],["body/classes/StatusUpdateDto.html",[3,0.125,4,0.101,5,0.101,12,0.271,13,0.842,15,2.205,16,1.157,17,6.644,18,0.594,19,0.348,20,0.009,29,0.358,79,0.125,80,0.095,97,2.18,160,3.064,164,4.802,171,3.716,259,0.007,267,4.564,302,0.007,304,2.033,310,2.209,311,3.708,312,0.968,319,4.349,321,4.172,322,2.536,341,3.716,456,4.542,458,2.96,471,3.358,544,3.815,827,3.492,901,3.827,1143,5.229,2864,5.08,2870,7.281,3078,5.472,3195,5.815,3196,5.815,3197,5.815,3198,5.815,3199,5.815,3200,5.815,3201,7.238,3202,5.815]],["title/interfaces/TDataShape.html",[0,0.545,1049,3.115]],["body/interfaces/TDataShape.html",[0,0.823,2,1.034,3,0.076,4,0.061,5,0.061,11,1.833,12,0.164,13,0.598,16,1.106,18,0.536,19,0.38,20,0.009,24,1.686,27,1.489,29,0.374,38,2.833,60,2.095,79,0.176,87,1.632,91,1.873,95,1.873,97,1.059,98,1.262,107,2.433,109,0.779,127,2.966,129,1.368,136,0.94,137,1.534,141,1.446,142,2.218,159,1.581,161,2.835,163,1.743,175,3.566,190,1.313,193,2.716,195,2.101,206,3.255,211,1.686,219,2.976,225,3.152,229,1.946,238,1.169,250,2.171,258,3.016,259,0.005,302,0.005,314,1.262,316,1.534,338,2.743,346,0.837,430,2.146,442,2.022,445,3.568,470,3.044,474,1.686,644,2.697,910,2.218,912,2.218,914,2.218,915,2.218,919,2.333,922,2.966,925,3.837,927,1.199,928,3.662,934,2.537,946,2.333,953,2.117,974,2.027,975,2.468,976,5.001,977,4.551,978,2.218,979,3.848,980,3.848,981,2.63,982,2.966,983,2.63,984,3.987,985,4.699,986,2.63,987,2.333,988,2.63,989,4.223,990,2.333,991,2.218,992,1.946,993,2.63,994,2.63,995,2.63,996,2.63,997,3.611,998,3.611,999,2.63,1000,2.63,1001,2.468,1002,2.63,1003,3.848,1004,2.63,1005,4.037,1006,2.63,1007,2.468,1008,2.63,1009,3.837,1010,2.63,1011,2.468,1012,3.245,1013,2.63,1014,2.63,1015,3.245,1016,2.468,1017,2.218,1018,2.63,1019,2.117,1020,2.117,1021,1.446,1022,2.117,1023,2.468,1024,2.468,1025,2.63,1026,2.117,1027,2.63,1028,2.63,1029,2.218,1030,4.27,1031,5.008,1032,6.507,1033,4.551,1034,2.63,1035,4.289,1036,2.117,1037,3.611,1038,2.333,1039,2.468,1040,2.468,1041,2.468,1042,1.946,1043,2.218,1044,2.333,1045,2.468,1046,2.218,1047,2.117,1048,1.743,1049,3.611,1050,5.224,1051,2.468]],["title/interfaces/TokenPayload.html",[0,0.545,530,2.456]],["body/interfaces/TokenPayload.html",[0,0.784,2,1.876,3,0.138,4,0.11,5,0.11,7,1.32,9,3.84,11,1.781,12,0.297,13,0.891,18,0.591,19,0.282,20,0.009,29,0.392,33,1.092,38,2.351,79,0.165,89,3.056,98,2.749,109,0.966,110,1.409,160,2.701,225,2.551,256,3.678,259,0.008,302,0.008,471,3.555,530,4.543,541,4.233,575,2.783,576,6.368,644,2.415,927,2.175,1995,6.171,3203,6.381,3204,7.661,3205,6.381,3206,6.381,3207,6.381]],["title/classes/TokenResponse.html",[80,0.058,510,3.576]],["body/classes/TokenResponse.html",[3,0.145,4,0.116,5,0.116,12,0.313,13,0.918,18,0.568,19,0.349,20,0.009,79,0.145,80,0.088,171,4.053,259,0.008,302,0.008,304,2.348,312,1.031,324,4.454,510,6.361,545,6.757,547,7.405,548,6.274,610,4.041,2796,5.927,2797,5.927,2798,5.927,3208,8.659]],["title/classes/VCT.html",[80,0.058,1100,2.945]],["body/classes/VCT.html",[3,0.121,4,0.097,5,0.097,7,1.604,12,0.261,13,0.823,16,1.269,18,0.659,19,0.389,20,0.009,29,0.435,79,0.153,80,0.102,191,1.426,259,0.007,302,0.007,304,1.961,310,2.439,311,4.126,312,1.069,320,3.767,322,2.445,329,2.521,337,3.632,747,3.374,984,3.842,1100,5.569,1876,4.193,2513,7.772,2514,4.949,2517,6.843,2518,6.843,2519,6.843,3209,5.607,3210,5.607,3211,5.607,3212,5.607,3213,5.607,3214,5.607,3215,5.607]],["title/injectables/VaultKeyService.html",[30,0.897,2073,3.576]],["body/injectables/VaultKeyService.html",[3,0.053,4,0.043,5,0.043,11,0.571,12,0.115,13,0.455,15,1.728,16,1.083,18,0.651,19,0.374,20,0.009,21,2.063,22,1.852,23,4.257,29,0.457,30,0.791,33,0.421,34,2.31,35,0.797,47,2.787,48,1.218,56,1.36,61,1.875,79,0.053,80,0.032,86,2.54,87,1.14,89,1.404,93,1.046,94,2.409,95,1.308,104,1.416,109,1.125,110,1.441,118,1.7,132,1.368,135,1.824,137,1.072,146,2.676,147,2.094,151,2.737,163,1.939,188,1.416,190,2.07,191,1.42,194,2.745,213,2.697,216,1.724,219,0.982,221,3.151,223,1.979,235,1.63,238,1.62,241,1.63,247,2.063,250,1.58,259,0.004,270,2.063,285,1.36,289,1.939,294,2.697,302,0.004,309,1.584,312,0.987,314,1.994,338,0.797,346,0.931,420,2.933,470,2.445,471,2.261,517,2.016,556,1.55,557,1.63,564,2.925,568,1.36,575,2.125,616,1.479,644,0.93,653,1.63,676,4.155,706,0.93,740,3.593,803,2.645,808,3.496,852,1.63,901,1.14,927,1.333,938,1.261,984,1.939,1043,1.55,1047,1.479,1156,1.261,1208,2.933,1224,3.151,1228,4.475,1235,5.985,1244,4.667,1251,3.233,1291,1.218,1297,2.169,1302,1.36,1307,1.979,1343,1.979,1353,2.169,1360,3.151,1396,3.453,1431,1.979,1435,1.979,1480,2.925,1497,2.745,1502,2.745,1509,1.979,1538,2.745,1585,2.169,1589,3.151,1590,5.459,1595,3.151,1597,4.886,1604,3.151,1606,1.979,1607,3.503,1608,4.904,1615,2.169,1618,1.979,1619,1.55,1646,2.169,1714,1.479,1735,1.63,1782,2.925,1950,3.151,2001,1.979,2073,3.151,2074,7.009,2076,4.534,2077,1.36,2086,2.169,2139,1.838,2184,2.925,2273,3.453,2338,2.925,2380,4.155,2381,1.63,2485,3.453,2577,1.979,2782,2.169,2785,6.21,2941,5.355,3216,7.585,3217,4.873,3218,3.912,3219,3.912,3220,3.912,3221,3.912,3222,2.457,3223,3.912,3224,2.457,3225,5.556,3226,6.461,3227,3.912,3228,3.912,3229,2.457,3230,6.066,3231,2.457,3232,2.457,3233,3.912,3234,3.912,3235,2.457,3236,2.457,3237,2.457,3238,3.912,3239,2.457,3240,3.912,3241,2.457,3242,2.457,3243,3.912,3244,3.912,3245,2.457,3246,2.457,3247,2.457,3248,2.457,3249,5.556,3250,2.457,3251,2.457,3252,2.457,3253,2.457,3254,2.457,3255,2.457,3256,2.457,3257,2.457,3258,2.457,3259,2.457,3260,2.457,3261,3.912,3262,2.457,3263,2.457,3264,2.457,3265,2.457,3266,2.457,3267,2.457,3268,3.912,3269,2.457,3270,2.457,3271,2.457,3272,2.457,3273,2.457,3274,2.457,3275,2.457,3276,2.457,3277,2.457,3278,2.457,3279,2.457,3280,2.169,3281,2.457,3282,2.457,3283,4.873,3284,2.457,3285,2.457,3286,2.457,3287,2.457,3288,2.457,3289,2.457,3290,6.777,3291,2.457,3292,3.912,3293,2.457,3294,3.912,3295,4.873,3296,4.873,3297,2.457,3298,3.912,3299,3.912,3300,2.457,3301,4.904,3302,2.457,3303,2.457,3304,4.873,3305,5.556,3306,4.873,3307,3.912,3308,2.457,3309,3.912,3310,2.457,3311,3.912,3312,4.873,3313,2.457,3314,2.457,3315,2.457,3316,3.912,3317,2.457,3318,2.457,3319,2.457,3320,2.457,3321,2.457,3322,2.457,3323,2.457]],["title/modules/VerifierModule.html",[357,1.404,376,3.115]],["body/modules/VerifierModule.html",[3,0.129,4,0.104,5,0.104,20,0.009,29,0.543,33,1.025,79,0.129,80,0.079,259,0.007,302,0.007,357,2.526,359,2.612,360,2.87,361,3.074,362,3.074,363,2.87,364,2.968,365,2.968,369,4.639,374,5.494,375,5.244,376,6.45,377,3.784,378,3.074,379,2.87,382,3.533,385,3.776,393,4.824,404,4.479,1967,5.494,2075,5.173,2077,3.314,2357,5.494,2360,5.287,2564,5.287,3324,5.989,3325,5.989,3326,5.989]],["title/classes/WebHookAuthConfig.html",[80,0.058,330,3.32]],["body/classes/WebHookAuthConfig.html",[3,0.112,4,0.09,5,0.09,7,1.073,12,0.242,13,0.783,16,0.728,18,0.538,19,0.4,20,0.009,22,2.043,29,0.414,60,2.197,79,0.171,80,0.108,87,3.802,97,2.575,129,2.017,191,0.954,202,3.574,259,0.007,302,0.007,303,5.914,304,1.814,305,3.879,306,5.318,307,5.589,308,4.178,309,1.758,310,1.887,311,3.556,312,0.827,314,2.416,315,4.051,316,2.936,318,3.879,319,3.879,320,3.979,321,3.879,322,2.262,323,2.196,324,3.441,325,4.178,326,3.441,327,5.589,328,5.168,329,3.776,330,5.914,331,5.422,332,3.337,333,5.422,334,3.725,335,3.64,336,3.64,337,2.663,338,2.182,339,3.122,340,3.441,341,2.663,3327,5.187,3328,5.187,3329,5.187]],["title/classes/WebhookConfig.html",[80,0.058,337,2.279]],["body/classes/WebhookConfig.html",[3,0.112,4,0.09,5,0.09,7,1.072,12,0.241,13,0.782,16,1.109,18,0.569,19,0.391,20,0.009,22,1.97,29,0.414,60,1.523,79,0.171,80,0.107,87,3.667,97,2.574,129,2.904,191,0.953,202,3.661,259,0.007,302,0.007,303,5.585,304,1.811,305,3.874,306,5.271,307,5.911,308,4.172,309,1.756,310,1.885,311,3.683,312,0.826,314,2.413,315,4.048,316,2.933,318,3.874,319,3.874,320,3.976,321,3.876,322,2.259,323,2.193,324,3.436,325,4.172,326,3.436,327,5.029,328,4.709,329,3.774,330,5.911,331,4.172,332,2.567,333,4.172,334,2.866,335,4.72,336,4.72,337,3.452,338,2.655,339,4.048,340,4.462,341,3.452,3330,5.18,3331,5.18,3332,5.18]],["title/controllers/WellKnownController.html",[342,1.593,381,3.576]],["body/controllers/WellKnownController.html",[3,0.101,4,0.081,5,0.081,7,1.47,12,0.218,16,0.997,18,0.618,19,0.35,20,0.009,22,1.771,29,0.521,33,0.801,47,2.922,48,2.321,79,0.101,80,0.061,86,2.247,93,1.252,94,1.556,106,3.118,109,1.076,119,4.133,135,1.95,146,2.645,147,1.518,151,2.637,190,1.813,191,1.307,259,0.006,302,0.006,310,1.992,312,0.873,314,1.68,323,3.53,342,2.55,344,1.821,346,1.497,350,2.244,381,5.067,386,5.067,387,6.705,502,2.321,517,1.856,533,3.626,539,3.501,629,7.204,630,5.067,644,2.381,659,4.276,667,3.296,668,4.415,708,6.272,720,3.771,757,3.749,827,2.663,1021,2.587,1063,3.771,1064,5.331,1068,4.997,1247,6.272,1262,4.133,1302,2.591,1473,4.415,1488,3.786,1489,3.501,1886,4.133,1921,4.48,1922,3.771,1961,4.415,2160,6.119,2226,4.133,2246,4.133,2769,4.133,3089,5.553,3333,4.682,3334,4.682,3335,7.596,3336,6.291,3337,4.682,3338,6.291,3339,4.682,3340,4.682,3341,4.682,3342,4.682,3343,4.682,3344,4.682,3345,4.682,3346,4.682,3347,6.291,3348,4.682,3349,4.682,3350,4.682,3351,4.682,3352,4.682,3353,4.682,3354,4.682,3355,4.682]],["title/changelog.html",[1089,2.769,3004,2.769,3356,3.702]],["body/changelog.html",[5,0.091,20,0.007,22,1.306,60,1.541,84,3.154,101,3.677,106,3.722,107,2.095,129,2.038,149,2.69,211,4.162,212,3.919,259,0.007,294,2.9,302,0.007,316,2.285,329,3.046,338,2.196,396,3.677,420,3.154,445,2.511,542,4.221,553,3.304,617,3.476,619,2.69,1001,3.677,1005,3.476,1043,3.304,1047,4.52,1343,4.221,1359,4.626,1366,4.626,1657,4.221,1703,4.626,1714,3.154,2038,5.981,2049,4.626,2105,3.154,2369,4.221,2649,6.049,2805,3.677,2845,4.626,3357,5.24,3358,7.666,3359,8.685,3360,8.685,3361,8.685,3362,9.049,3363,6.776,3364,5.616,3365,5.24,3366,6.629,3367,6.776,3368,5.24,3369,6.776,3370,5.24,3371,5.24,3372,5.24,3373,5.24,3374,5.24,3375,5.24,3376,5.24,3377,6.776,3378,7.509,3379,5.24,3380,6.776,3381,5.24,3382,5.24,3383,5.24,3384,5.24,3385,5.24,3386,5.24,3387,5.24,3388,5.24,3389,5.24,3390,5.24,3391,5.24,3392,5.24,3393,5.981,3394,5.24,3395,5.24,3396,5.24,3397,5.24,3398,4.626,3399,5.24,3400,5.24,3401,5.24,3402,5.24,3403,5.24,3404,5.24,3405,5.24,3406,5.24,3407,5.24,3408,5.24,3409,5.24,3410,4.626,3411,5.24,3412,5.24,3413,5.24,3414,5.24,3415,5.24,3416,5.24,3417,5.24,3418,5.24,3419,5.24,3420,5.24,3421,5.24,3422,5.24,3423,5.24,3424,5.24,3425,5.24,3426,5.24,3427,5.24,3428,5.24,3429,5.24,3430,5.24,3431,4.626,3432,5.24,3433,4.626,3434,5.24,3435,4.626,3436,5.24,3437,5.24,3438,5.24,3439,5.24,3440,5.24]],["title/dependencies.html",[360,2.56,3441,3.268]],["body/dependencies.html",[20,0.009,33,0.961,35,1.82,37,4.523,38,2.069,64,3.107,65,3.236,80,0.093,259,0.007,302,0.007,318,4.199,322,2.449,350,2.691,360,2.691,384,3.38,395,4.957,396,3.941,406,4.523,415,3.941,416,5.801,444,4.199,493,3.725,544,2.525,592,4.199,658,3.107,742,3.725,803,3.088,949,4.523,1068,3.541,1080,3.107,1156,4.181,1157,4.199,1158,4.199,1160,4.199,1161,3.725,1165,3.541,1170,2.99,1173,3.107,1291,2.783,1488,3.38,1617,4.199,1619,3.541,1701,4.523,1926,3.541,1998,4.523,2031,4.957,2033,4.957,2077,3.107,2381,3.725,3100,4.523,3442,7.082,3443,5.616,3444,7.757,3445,5.616,3446,5.616,3447,5.616,3448,5.616,3449,5.616,3450,5.616,3451,5.616,3452,7.082,3453,8.145,3454,8.145,3455,8.145,3456,5.616,3457,5.616,3458,8.145,3459,5.616,3460,5.616,3461,5.616,3462,5.616,3463,5.616,3464,5.616,3465,5.616,3466,5.616,3467,5.616,3468,5.616,3469,5.616,3470,5.616,3471,5.616,3472,5.616,3473,5.616,3474,5.616,3475,5.616,3476,5.616,3477,5.616,3478,5.616,3479,5.616]],["title/miscellaneous/enumerations.html",[3480,2.456,3481,4.715]],["body/miscellaneous/enumerations.html",[11,1.618,12,0.324,19,0.308,20,0.009,195,1.818,259,0.008,302,0.008,309,2.106,326,4.617,619,3.573,684,5.085,896,3.626,1924,5.35,1926,5.085,2176,5.205,2549,5.606,3480,4.617,3481,6.144,3482,6.96]],["title/miscellaneous/functions.html",[3480,2.456,3483,4.715]],["body/miscellaneous/functions.html",[11,2.078,12,0.297,16,1.151,19,0.363,20,0.009,135,1.738,141,2.62,143,3.671,175,4.075,190,1.625,191,1.509,195,1.999,246,3.793,259,0.008,270,3.24,302,0.008,363,4.079,415,4.47,517,2.143,743,5.371,789,4.47,1042,3.525,1261,5.623,1325,6.136,2654,5.131,2663,5.131,2687,6.165,3480,4.226,3483,5.623,3484,6.37,3485,6.37,3486,6.37,3487,7.653,3488,6.37,3489,5.623,3490,6.37,3491,6.37,3492,6.37,3493,6.37,3494,7.653,3495,5.623]],["title/index.html",[12,0.173,1089,2.769,3004,2.769]],["body/index.html",[4,0.107,19,0.202,20,0.009,22,1.75,38,1.686,60,1.345,87,3.648,89,2.223,97,1.378,99,3.685,132,1.6,134,4.109,159,2.785,160,1.937,201,3.421,203,3.035,214,3.685,259,0.006,288,2.885,302,0.006,306,3.728,316,1.995,332,2.268,351,6.334,356,4.039,432,5.467,464,3.035,466,3.211,474,2.193,493,4.109,515,5.467,518,2.348,541,3.035,542,4.989,543,3.685,544,2.057,551,2.885,552,2.753,553,2.885,564,4.632,566,3.728,582,3.421,655,2.637,675,3.421,757,2.057,803,1.995,817,4.337,827,1.937,853,5.656,891,6.334,908,3.685,932,3.421,982,2.637,1021,1.882,1024,3.211,1080,2.532,1105,2.885,1156,2.348,1161,3.035,1325,3.421,1367,4.039,1420,2.532,1470,3.685,1480,3.421,1518,4.039,1631,4.039,1692,4.039,1839,3.035,1893,3.728,2370,5.251,2431,4.039,2488,4.039,2949,3.211,3301,5.467,3364,3.421,3366,4.039,3393,5.467,3398,6.642,3431,6.198,3433,4.039,3496,4.575,3497,6.194,3498,4.575,3499,4.575,3500,7.022,3501,6.194,3502,4.575,3503,4.575,3504,6.194,3505,3.685,3506,4.575,3507,4.575,3508,6.194,3509,4.575,3510,4.575,3511,4.575,3512,4.575,3513,6.194,3514,4.575,3515,4.575,3516,4.575,3517,4.575,3518,4.575,3519,4.575,3520,4.575,3521,4.575,3522,4.575,3523,4.575,3524,4.575,3525,4.575,3526,4.575,3527,4.575,3528,4.575,3529,4.575,3530,4.575,3531,4.575,3532,4.575,3533,4.575,3534,4.575,3535,4.039,3536,4.575,3537,4.575,3538,6.194,3539,4.039,3540,4.575,3541,4.575,3542,4.575,3543,4.575,3544,4.575,3545,6.194,3546,4.575,3547,6.194,3548,4.575,3549,4.575,3550,4.575,3551,4.575,3552,4.575,3553,6.194,3554,4.575,3555,4.575,3556,4.575,3557,4.575,3558,4.575,3559,4.575,3560,6.194,3561,6.194,3562,4.575,3563,4.575,3564,4.575,3565,4.575,3566,4.575,3567,6.194,3568,4.575,3569,6.194,3570,4.575,3571,4.575,3572,7.022,3573,4.575,3574,4.575,3575,4.039,3576,4.575,3577,4.575,3578,4.575,3579,4.575,3580,4.575,3581,4.575,3582,4.039,3583,4.575,3584,4.575,3585,4.575,3586,4.575,3587,4.575,3588,6.642,3589,4.039,3590,6.194,3591,4.575,3592,4.575,3593,4.575,3594,6.194,3595,4.575,3596,4.575,3597,4.575,3598,4.575,3599,4.575,3600,4.039,3601,4.575,3602,4.575,3603,4.575,3604,4.575,3605,4.575,3606,4.575,3607,4.575,3608,4.575,3609,4.575,3610,4.575,3611,4.575,3612,4.632,3613,4.039,3614,4.039,3615,3.685,3616,3.685]],["title/license.html",[1089,2.769,3004,2.769,3612,2.769]],["body/license.html",[2,0.759,4,0.135,5,0.124,7,0.534,20,0.006,24,1.237,29,0.159,46,3.275,70,1.627,73,5.507,80,0.034,97,0.777,107,3.014,132,0.902,134,1.712,138,4.378,159,1.16,168,1.325,185,3.041,191,0.748,211,1.949,212,1.93,252,4.053,256,2.343,258,1.279,259,0.004,273,2.079,274,4.599,279,1.93,302,0.004,312,0.317,315,1.553,316,2.49,334,3.16,341,3.189,354,1.811,355,1.553,379,1.237,474,1.237,490,4.599,551,1.627,553,1.627,555,3.763,612,1.712,655,2.9,658,2.25,818,1.712,832,1.712,837,2.447,881,1.553,901,1.197,925,1.627,927,2.249,932,1.93,938,4.07,944,2.079,987,2.698,992,1.428,997,1.811,1011,1.811,1022,3.437,1075,3.275,1078,2.278,1105,1.627,1185,3.275,1380,2.278,1484,6.229,1674,4.646,1683,5.004,1695,2.278,1735,1.712,1817,1.93,1859,3.737,1860,1.553,1893,1.553,1945,3.589,2170,5.04,2184,4.27,2191,2.278,2264,3.589,2368,2.079,2471,1.93,2491,2.278,2554,2.079,2581,2.278,2716,3.589,2766,2.278,2832,2.079,2951,4.442,2953,2.278,2954,3.589,3143,3.275,3280,2.278,3358,2.278,3364,3.763,3410,2.278,3435,2.278,3535,3.589,3539,2.278,3575,2.278,3582,2.278,3588,4.442,3589,2.278,3600,2.278,3612,6.638,3613,2.278,3614,6.5,3615,4.599,3616,4.053,3617,2.58,3618,2.58,3619,2.58,3620,7.364,3621,7.929,3622,5.71,3623,6.212,3624,2.58,3625,8.116,3626,7.538,3627,2.58,3628,2.58,3629,7.538,3630,7.817,3631,6.212,3632,4.066,3633,2.58,3634,6.212,3635,2.58,3636,2.58,3637,5.71,3638,2.58,3639,2.58,3640,5.71,3641,4.066,3642,4.066,3643,2.58,3644,5.032,3645,4.066,3646,4.066,3647,2.58,3648,4.066,3649,2.58,3650,4.066,3651,2.58,3652,2.58,3653,2.58,3654,2.58,3655,2.58,3656,2.58,3657,5.032,3658,2.58,3659,5.032,3660,4.066,3661,6.599,3662,5.71,3663,4.066,3664,5.032,3665,2.58,3666,2.58,3667,2.58,3668,2.58,3669,2.58,3670,2.58,3671,2.58,3672,8.876,3673,5.032,3674,2.58,3675,7.364,3676,4.066,3677,2.58,3678,4.066,3679,2.58,3680,8.329,3681,8.387,3682,2.58,3683,2.58,3684,2.58,3685,2.58,3686,2.58,3687,2.58,3688,4.066,3689,5.032,3690,2.58,3691,2.58,3692,2.58,3693,2.58,3694,5.71,3695,6.212,3696,2.58,3697,4.066,3698,5.71,3699,4.066,3700,2.58,3701,6.212,3702,2.58,3703,2.58,3704,5.032,3705,2.58,3706,2.58,3707,2.58,3708,4.066,3709,2.58,3710,2.58,3711,2.58,3712,5.032,3713,2.58,3714,2.58,3715,2.58,3716,7.538,3717,2.58,3718,4.066,3719,7.157,3720,4.066,3721,4.066,3722,4.066,3723,5.032,3724,4.066,3725,5.032,3726,4.066,3727,4.066,3728,4.066,3729,4.066,3730,2.58,3731,6.212,3732,6.907,3733,5.032,3734,4.066,3735,2.58,3736,4.066,3737,2.58,3738,2.58,3739,5.032,3740,2.58,3741,2.58,3742,2.58,3743,5.032,3744,2.58,3745,2.58,3746,2.58,3747,4.066,3748,4.066,3749,2.58,3750,2.58,3751,2.58,3752,2.58,3753,2.58,3754,2.58,3755,2.58,3756,4.066,3757,2.58,3758,2.58,3759,2.58,3760,2.58,3761,2.58,3762,2.58,3763,2.58,3764,5.032,3765,2.58,3766,2.58,3767,2.58,3768,2.58,3769,2.58,3770,7.157,3771,2.58,3772,2.58,3773,2.58,3774,2.58,3775,2.58,3776,5.71,3777,4.066,3778,2.58,3779,2.58,3780,2.58,3781,5.032,3782,2.58,3783,2.58,3784,4.066,3785,2.58,3786,2.58,3787,2.58,3788,2.58,3789,2.58,3790,2.58,3791,2.58,3792,2.58,3793,2.58,3794,2.58,3795,5.032,3796,5.71,3797,2.58,3798,2.58,3799,2.58,3800,2.58,3801,2.58,3802,2.58,3803,2.58,3804,2.58,3805,2.58,3806,2.58,3807,4.066,3808,2.58,3809,2.58,3810,4.066,3811,2.58,3812,2.58,3813,2.58,3814,2.58,3815,2.58,3816,2.58,3817,2.58,3818,2.58,3819,5.71,3820,5.032,3821,5.032,3822,5.032,3823,4.066,3824,5.032,3825,4.066,3826,4.066,3827,4.066,3828,2.58,3829,2.58,3830,2.58,3831,2.58,3832,2.58,3833,2.58,3834,2.58,3835,4.066,3836,2.58,3837,2.58,3838,6.212,3839,2.58,3840,2.58,3841,2.58,3842,2.58,3843,2.58,3844,2.58,3845,2.58,3846,2.58,3847,6.212,3848,2.58,3849,2.58,3850,2.58,3851,2.58,3852,2.58,3853,2.58,3854,2.58,3855,2.58,3856,2.58,3857,2.58,3858,2.58,3859,2.58,3860,2.58,3861,2.58,3862,2.58,3863,5.032,3864,2.58,3865,2.58,3866,2.58,3867,4.066,3868,2.58,3869,2.58,3870,2.58,3871,2.58,3872,2.58,3873,2.58,3874,2.58,3875,2.58,3876,2.58,3877,2.58,3878,2.58,3879,2.58,3880,2.58,3881,2.58,3882,4.066,3883,2.58,3884,2.58,3885,4.066,3886,4.066,3887,2.58,3888,2.58,3889,2.58,3890,2.58,3891,2.58,3892,2.58,3893,2.58,3894,2.58,3895,2.278,3896,2.278,3897,2.58,3898,2.58,3899,2.58,3900,2.58,3901,2.58,3902,2.58]],["title/modules.html",[359,2.646]],["body/modules.html",[20,0.008,259,0.008,302,0.008,358,4.747,359,2.768,368,4.454,369,4.067,370,4.454,371,4.454,372,4.454,373,4.454,374,4.002,375,3.82,376,4.454,551,5.166,553,5.798,1967,4.002,1968,4.211,2357,4.002,2559,4.454,3903,9.194,3904,9.194,3905,9.27,3906,8.192]],["title/overview.html",[3505,4.888]],["body/overview.html",[2,1.195,20,0.009,47,3.47,52,4.831,69,5.325,259,0.006,302,0.006,304,1.421,344,1.58,357,1.285,358,6.751,359,1.772,360,1.948,361,2.086,362,2.086,363,1.948,364,2.015,365,2.015,366,3.588,367,3.588,368,6.131,369,4.726,370,5.021,371,4.63,372,6.351,373,4.63,374,5.429,375,5.135,376,6.09,377,2.93,378,2.086,379,1.948,523,5.325,525,4.377,582,3.039,585,3.588,586,3.588,587,3.588,588,5.062,589,6.003,659,4.831,662,4.442,706,1.538,716,4.831,717,3.802,1127,4.831,1236,3.588,1237,3.588,1238,3.588,1239,5.633,1355,3.039,1860,2.446,1921,5.062,1963,3.588,1964,3.588,1965,3.588,1966,3.588,1967,5.641,1968,5.525,1969,4.512,1970,4.512,2353,3.588,2354,3.588,2355,3.588,2356,3.588,2357,5.321,2555,3.588,2556,3.588,2557,3.588,2558,3.588,2559,5.485,2578,5.633,2711,3.588,2712,3.588,2713,3.588,2753,3.588,2754,3.588,2755,3.588,3016,3.588,3017,3.588,3019,3.588,3164,3.588,3166,3.588,3167,3.588,3505,3.274,3907,4.064,3908,4.064,3909,4.064,3910,4.064]],["title/properties.html",[13,0.621,3441,3.268]],["body/properties.html",[7,1.466,13,0.824,20,0.009,259,0.008,302,0.008,3364,5.297,3612,5.297,3615,5.706,3616,5.706,3895,6.253,3896,6.253,3911,7.083,3912,7.083]],["title/miscellaneous/typealiases.html",[3480,2.456,3913,5.341]],["body/miscellaneous/typealiases.html",[9,1.859,12,0.144,18,0.222,19,0.411,20,0.009,38,2.796,71,1.709,97,1.407,98,1.677,141,3.427,142,2.946,143,1.78,159,2.101,163,2.316,193,1.001,202,1.347,206,1.308,219,1.235,225,1.235,229,2.585,258,1.531,259,0.005,302,0.005,305,2.31,306,1.859,307,2.31,316,2.038,326,2.049,327,3.494,442,1.027,445,3.011,458,1.109,470,1.169,471,1.433,487,2.727,494,3.494,616,5.593,766,1.586,808,2.693,827,1.978,910,2.946,912,2.946,914,2.946,915,2.946,916,3.494,917,2.488,927,1.593,928,2.812,938,2.893,941,1.709,953,2.812,974,2.693,975,2.168,976,3.279,998,3.279,1005,3.1,1029,1.948,1030,3.279,1035,1.859,1037,4.981,1038,3.1,1039,3.279,1040,3.279,1041,3.279,1042,2.585,1043,2.946,1044,3.1,1045,3.279,1046,2.946,1047,2.812,1050,3.279,1051,3.279,1067,1.948,1092,2.946,1208,1.859,1214,2.727,1215,5.546,1224,3.764,1232,3.764,1243,2.727,1258,4.124,1423,2.727,1431,3.764,1435,2.488,1531,2.488,1535,3.764,1536,3.764,1538,2.168,1539,3.764,1547,3.764,1709,2.31,1739,4.09,1740,2.812,1741,2.812,1742,4.436,1743,2.812,1744,2.812,1745,2.812,1746,3.781,1842,3.494,1844,3.494,1845,3.494,1859,1.531,2688,2.727,2690,3.738,2750,4.124,2800,2.168,2802,3.279,2830,2.727,2853,2.168,3480,2.049,3489,2.727,3495,2.727,3914,3.089,3915,4.672,3916,9.342,3917,4.672,3918,4.672,3919,5.635,3920,4.672,3921,4.672,3922,4.672,3923,4.672,3924,4.672,3925,5.635,3926,4.672,3927,4.672,3928,4.672,3929,5.635,3930,4.672,3931,4.672,3932,7.097,3933,6.747,3934,3.089,3935,3.089,3936,4.672,3937,7.919,3938,4.672,3939,4.672,3940,3.089,3941,4.672,3942,4.672,3943,4.672,3944,5.635,3945,4.672,3946,5.635,3947,4.672,3948,6.282,3949,4.672,3950,4.672,3951,5.635,3952,4.672,3953,5.635,3954,4.672,3955,5.635,3956,4.672,3957,4.672,3958,3.089,3959,4.672,3960,4.672,3961,4.672,3962,4.672,3963,5.635,3964,4.672,3965,4.672,3966,5.635,3967,4.672,3968,4.672,3969,4.672,3970,4.672,3971,5.635,3972,4.672,3973,3.089,3974,4.672,3975,4.672,3976,4.672,3977,5.635,3978,4.672,3979,4.672,3980,4.672,3981,4.672,3982,4.672,3983,5.635,3984,4.672,3985,5.635,3986,4.672,3987,5.635,3988,4.672,3989,4.672,3990,5.635,3991,4.672,3992,4.672,3993,4.672,3994,5.635,3995,4.672,3996,4.672,3997,5.635,3998,4.672,3999,4.672,4000,4.672,4001,4.672,4002,3.089,4003,4.672,4004,4.672,4005,5.635,4006,4.672,4007,4.672,4008,5.635,4009,3.089,4010,3.089,4011,3.089,4012,3.089]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":267,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{}}}],["0.0.1",{"_index":3911,"title":{},"body":{"properties.html":{}}}],["0.14.0",{"_index":3458,"title":{},"body":{"dependencies.html":{}}}],["0.14.2",{"_index":3461,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":3474,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":3453,"title":{},"body":{"dependencies.html":{}}}],["0.3.25",{"_index":3478,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":3124,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["0.5.1",{"_index":3460,"title":{},"body":{"dependencies.html":{}}}],["07",{"_index":3359,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":3414,"title":{},"body":{"changelog.html":{}}}],["0x00",{"_index":3309,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["1",{"_index":901,"title":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService-1.html":{}},"body":{"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/VaultKeyService.html":{},"license.html":{}}}],["1.0.0",{"_index":3413,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":3401,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":3395,"title":{},"body":{"changelog.html":{}}}],["1.10.0",{"_index":3459,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":3381,"title":{},"body":{"changelog.html":{}}}],["1.2.1",{"_index":3377,"title":{},"body":{"changelog.html":{}}}],["1.2.2",{"_index":3372,"title":{},"body":{"changelog.html":{}}}],["1.2.3",{"_index":3357,"title":{},"body":{"changelog.html":{}}}],["1.5.4",{"_index":3472,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":3402,"title":{},"body":{"changelog.html":{}}}],["10,000",{"_index":3110,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["10.5.0",{"_index":3470,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":816,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["1000",{"_index":183,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["10000",{"_index":3117,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["11",{"_index":3396,"title":{},"body":{"changelog.html":{}}}],["11.0.0",{"_index":3452,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":3447,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":3479,"title":{},"body":{"dependencies.html":{}}}],["11.1.3",{"_index":3444,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":3451,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":3908,"title":{},"body":{"overview.html":{}}}],["12/schema",{"_index":2795,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["12395c8",{"_index":3421,"title":{},"body":{"changelog.html":{}}}],["13.0.0",{"_index":3471,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":3907,"title":{},"body":{"overview.html":{}}}],["17.13.3",{"_index":3462,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":3378,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":3373,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":294,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["2.0",{"_index":3616,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["20",{"_index":2805,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"changelog.html":{}}}],["200",{"_index":509,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["2004",{"_index":3618,"title":{},"body":{"license.html":{}}}],["201",{"_index":1905,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["2025",{"_index":3358,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["20250602121005",{"_index":3455,"title":{},"body":{"dependencies.html":{}}}],["21",{"_index":3909,"title":{},"body":{"overview.html":{}}}],["24",{"_index":582,"title":{},"body":{"controllers/AuthController.html":{},"modules/SessionModule.html":{},"index.html":{},"overview.html":{}}}],["24h",{"_index":580,"title":{},"body":{"controllers/AuthController.html":{}}}],["256",{"_index":1196,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{}}}],["259ab39",{"_index":3365,"title":{},"body":{"changelog.html":{}}}],["2742ec4",{"_index":3440,"title":{},"body":{"changelog.html":{}}}],["2913417",{"_index":3371,"title":{},"body":{"changelog.html":{}}}],["295428b",{"_index":3376,"title":{},"body":{"changelog.html":{}}}],["2a71850",{"_index":3425,"title":{},"body":{"changelog.html":{}}}],["2aa727a",{"_index":3370,"title":{},"body":{"changelog.html":{}}}],["2f07af2",{"_index":3424,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":1343,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["3.0.1",{"_index":3446,"title":{},"body":{"dependencies.html":{}}}],["3.14.1",{"_index":3465,"title":{},"body":{"dependencies.html":{}}}],["3.2.0",{"_index":3442,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":3910,"title":{},"body":{"overview.html":{}}}],["300",{"_index":813,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["3000:3000",{"_index":3571,"title":{},"body":{"index.html":{}}}],["32",{"_index":3301,"title":{},"body":{"injectables/VaultKeyService.html":{},"index.html":{}}}],["32fbd8e",{"_index":3386,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":3307,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["33ac2c7",{"_index":3427,"title":{},"body":{"changelog.html":{}}}],["35f4d1e",{"_index":3399,"title":{},"body":{"changelog.html":{}}}],["3600",{"_index":2315,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["365",{"_index":1352,"title":{},"body":{"injectables/CryptoService.html":{}}}],["3ac47ec",{"_index":3418,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":1353,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{}}}],["4.0.0",{"_index":3443,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":3467,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":3445,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":3466,"title":{},"body":{"dependencies.html":{}}}],["401",{"_index":511,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["404",{"_index":2686,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["40ccd32",{"_index":3420,"title":{},"body":{"changelog.html":{}}}],["45f3f7f",{"_index":3422,"title":{},"body":{"changelog.html":{}}}],["46c9ce6",{"_index":3394,"title":{},"body":{"changelog.html":{}}}],["4be0171",{"_index":3423,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":1355,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vpService.html":{},"overview.html":{}}}],["5.0.3",{"_index":3450,"title":{},"body":{"dependencies.html":{}}}],["5.1.7",{"_index":3477,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":3652,"title":{},"body":{"license.html":{}}}],["500",{"_index":679,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["54e8a4e",{"_index":3430,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":1359,"title":{},"body":{"injectables/CryptoService.html":{},"changelog.html":{}}}],["6.0.0",{"_index":3449,"title":{},"body":{"dependencies.html":{}}}],["6.0.11",{"_index":3463,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":2427,"title":{},"body":{"injectables/Oid4vpService.html":{},"modules/SessionModule.html":{}}}],["6a6cdb6",{"_index":3411,"title":{},"body":{"changelog.html":{}}}],["6bb4aa9",{"_index":3375,"title":{},"body":{"changelog.html":{}}}],["6d31de0",{"_index":3406,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":1366,"title":{},"body":{"injectables/CryptoService.html":{},"changelog.html":{}}}],["7.8.2",{"_index":3475,"title":{},"body":{"dependencies.html":{}}}],["7a6a69c",{"_index":3368,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":298,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["8.16.3",{"_index":3469,"title":{},"body":{"dependencies.html":{}}}],["86400",{"_index":549,"title":{},"body":{"controllers/AuthController.html":{}}}],["892b30e",{"_index":3419,"title":{},"body":{"changelog.html":{}}}],["8f9498a",{"_index":3379,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":3628,"title":{},"body":{"license.html":{}}}],["905e17c",{"_index":3380,"title":{},"body":{"changelog.html":{}}}],["9104df3",{"_index":3383,"title":{},"body":{"changelog.html":{}}}],["91b5499",{"_index":3397,"title":{},"body":{"changelog.html":{}}}],["937603a",{"_index":3400,"title":{},"body":{"changelog.html":{}}}],["98303c1",{"_index":3432,"title":{},"body":{"changelog.html":{}}}],["_",{"_index":3322,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["_fns",{"_index":1710,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["_key",{"_index":2700,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["_url",{"_index":1748,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["_url.match(path_param_re",{"_index":1750,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["_url.startswith",{"_index":1812,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["a128gcm",{"_index":2421,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["above",{"_index":3799,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":2093,"title":{},"body":{"classes/KeyService.html":{}}}],["abstraction",{"_index":3523,"title":{},"body":{"index.html":{}}}],["ac4ee24",{"_index":3429,"title":{},"body":{"changelog.html":{}}}],["accept",{"_index":1946,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["acceptance",{"_index":3865,"title":{},"body":{"license.html":{}}}],["accepting",{"_index":3863,"title":{},"body":{"license.html":{}}}],["accepts",{"_index":516,"title":{},"body":{"controllers/AuthController.html":{}}}],["access",{"_index":9,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/typealiases.html":{}}}],["access_token",{"_index":545,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenResponse.html":{}}}],["accesscert",{"_index":2434,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscert?.length",{"_index":2447,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscertificate",{"_index":3915,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrolleraccesscertificatesdata",{"_index":3917,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrolleraccesscertificatesresponse",{"_index":3918,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrolleraccesscertificatesresponses",{"_index":3919,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerdeletedata",{"_index":3920,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerdeleteresponses",{"_index":3921,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerfindone",{"_index":40,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accesscertificatecontrollerfindonedata",{"_index":3922,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerfindoneparseddata",{"_index":3923,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerfindoneparsedresponse",{"_index":3924,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerfindoneparsedresponses",{"_index":3925,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerfindoneresponses",{"_index":3926,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerregister",{"_index":41,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accesscertificatecontrollerregisterdata",{"_index":3927,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerregisterresponse",{"_index":3928,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerregisterresponses",{"_index":3929,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificateid",{"_index":2708,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["accesscertificateregistration",{"_index":3930,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificateregistrationresponse",{"_index":3931,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificateresponse",{"_index":1,"title":{"interfaces/AccessCertificateResponse.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accessing",{"_index":96,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["accesstoken",{"_index":92,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accesstokenrequest",{"_index":788,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["accordingly",{"_index":885,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["act",{"_index":3871,"title":{},"body":{"license.html":{}}}],["acting",{"_index":3636,"title":{},"body":{"license.html":{}}}],["action",{"_index":2386,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["acts",{"_index":3845,"title":{},"body":{"license.html":{}}}],["add",{"_index":211,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionService.html":{},"interfaces/TDataShape.html":{},"changelog.html":{},"license.html":{}}}],["add(issuer_state",{"_index":3035,"title":{},"body":{"injectables/SessionService.html":{}}}],["addaccesscertificate",{"_index":230,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["addaccesscertificate(config",{"_index":2733,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["added",{"_index":921,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["addendum",{"_index":3790,"title":{},"body":{"license.html":{}}}],["addext",{"_index":1349,"title":{},"body":{"injectables/CryptoService.html":{}}}],["adding",{"_index":74,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["additional",{"_index":1674,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["additionaldata",{"_index":2978,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["additions",{"_index":3696,"title":{},"body":{"license.html":{}}}],["addregistrationcertificate",{"_index":245,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["addregistrationcertificate(req",{"_index":2735,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["address",{"_index":2656,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["addrp",{"_index":2727,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp(tenantid",{"_index":189,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["adds",{"_index":184,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["adjust",{"_index":3417,"title":{},"body":{"changelog.html":{}}}],["admin",{"_index":535,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["advancing",{"_index":3609,"title":{},"body":{"index.html":{}}}],["advised",{"_index":3861,"title":{},"body":{"license.html":{}}}],["against",{"_index":3748,"title":{},"body":{"license.html":{}}}],["agent",{"_index":472,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["agree",{"_index":3874,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":3822,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":3804,"title":{},"body":{"license.html":{}}}],["alg",{"_index":809,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["algorithm",{"_index":276,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/RegistrarService.html":{}}}],["algorithms",{"_index":1218,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["aliases",{"_index":3914,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":2241,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["alleging",{"_index":3753,"title":{},"body":{"license.html":{}}}],["allowed",{"_index":1578,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["allowedauthenticationschemes",{"_index":2278,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["allowedsigningalgs",{"_index":801,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["allowextra",{"_index":1532,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["allowing",{"_index":882,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["allowreserved",{"_index":1767,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["alone",{"_index":3744,"title":{},"body":{"license.html":{}}}],["along",{"_index":3782,"title":{},"body":{"license.html":{}}}],["alongside",{"_index":3789,"title":{},"body":{"license.html":{}}}],["alpha",{"_index":3454,"title":{},"body":{"dependencies.html":{}}}],["already",{"_index":203,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"index.html":{}}}],["always",{"_index":1046,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["amount",{"_index":1093,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["and/or",{"_index":3868,"title":{},"body":{"license.html":{}}}],["animo",{"_index":3543,"title":{},"body":{"index.html":{}}}],["annotations",{"_index":3685,"title":{},"body":{"license.html":{}}}],["any).issuer",{"_index":2062,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["anymore",{"_index":857,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["apache",{"_index":3615,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["api",{"_index":87,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{}}}],["api/client",{"_index":1003,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["api:read",{"_index":2537,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["api:write",{"_index":2538,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apibody",{"_index":522,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apibody({description",{"_index":646,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["apiexcludecontroller",{"_index":349,"title":{},"body":{"controllers/AppController.html":{}}}],["apihideproperty",{"_index":1888,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["apihideproperty()@column('varchar",{"_index":1882,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["apikey",{"_index":328,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"injectables/Oid4vpService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["apikeyconfig",{"_index":303,"title":{"classes/ApiKeyConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["apioperation",{"_index":3347,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apioperation({summary",{"_index":3341,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apiproduces",{"_index":1916,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiproduces('application/json",{"_index":1936,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiproperty",{"_index":2182,"title":{},"body":{"classes/OfferRequest.html":{},"classes/OfferResponse.html":{}}}],["apiproperty({example",{"_index":2175,"title":{},"body":{"classes/OfferRequest.html":{}}}],["apiresponse",{"_index":521,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiresponse({description",{"_index":1904,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apisecurity",{"_index":1917,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["apisecurity('oauth2",{"_index":1929,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["apitags",{"_index":520,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{}}}],["apitags('authentication",{"_index":534,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('credentials",{"_index":1111,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["apitags('issuer",{"_index":1927,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["apitags('presentation",{"_index":2536,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apitags('session",{"_index":2872,"title":{},"body":{"controllers/SessionController.html":{}}}],["apitags('status",{"_index":3087,"title":{},"body":{"controllers/StatusListController.html":{}}}],["app/app.controller",{"_index":402,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":343,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appear",{"_index":3786,"title":{},"body":{"license.html":{}}}],["appendix",{"_index":3678,"title":{},"body":{"license.html":{}}}],["applicable",{"_index":3820,"title":{},"body":{"license.html":{}}}],["application",{"_index":143,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["application/json",{"_index":1839,"title":{},"body":{"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"index.html":{}}}],["application/jwk",{"_index":3338,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["application/statuslist+jwt",{"_index":3085,"title":{},"body":{"controllers/StatusListController.html":{}}}],["applications",{"_index":999,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["applies",{"_index":3738,"title":{},"body":{"license.html":{}}}],["apply",{"_index":3882,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":358,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":1011,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["appropriateness",{"_index":3834,"title":{},"body":{"license.html":{}}}],["architecture",{"_index":3601,"title":{},"body":{"index.html":{}}}],["archives",{"_index":3894,"title":{},"body":{"license.html":{}}}],["aren’t",{"_index":2819,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["arg",{"_index":1563,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["args",{"_index":1533,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["args.entries",{"_index":1564,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["arising",{"_index":3851,"title":{},"body":{"license.html":{}}}],["array",{"_index":923,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/Interceptors.html":{},"classes/JwksResponseDto.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["array(size",{"_index":3120,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["array(size).fill(0).map",{"_index":3118,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["array.isarray(dcql_query",{"_index":2401,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["array.isarray(value",{"_index":1419,"title":{},"body":{"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["array['headers",{"_index":1826,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["arraybuffer",{"_index":1018,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["arraynotempty",{"_index":2181,"title":{},"body":{"classes/OfferRequest.html":{},"classes/OfferResponse.html":{}}}],["arraynotempty()@isstring({each",{"_index":2174,"title":{},"body":{"classes/OfferRequest.html":{}}}],["arrays",{"_index":936,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["arrays/objects",{"_index":2818,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["arrayseparatorstyle",{"_index":1746,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["arraystyle",{"_index":1739,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["asserted",{"_index":3880,"title":{},"body":{"license.html":{}}}],["associated",{"_index":2832,"title":{},"body":{"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["assume",{"_index":832,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"license.html":{}}}],["assuming",{"_index":2655,"title":{},"body":{"interfaces/PresentedData.html":{}}}],["async",{"_index":146,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["att",{"_index":2644,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attach",{"_index":3883,"title":{},"body":{"license.html":{}}}],["attached",{"_index":3677,"title":{},"body":{"license.html":{}}}],["attestation",{"_index":819,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["attestations",{"_index":2598,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attestations.map((att",{"_index":2645,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attestations—issuing",{"_index":3537,"title":{},"body":{"index.html":{}}}],["attribute",{"_index":3536,"title":{},"body":{"index.html":{}}}],["attribution",{"_index":3776,"title":{},"body":{"license.html":{}}}],["aud",{"_index":2424,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["audience",{"_index":581,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["audio",{"_index":1789,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["auth",{"_index":129,"title":{"interfaces/Auth.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{}}}],["auth.controller",{"_index":595,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":594,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.in",{"_index":1798,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["auth.name",{"_index":1797,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["auth.scheme",{"_index":498,"title":{},"body":{"interfaces/Auth.html":{}}}],["auth/auth.guard",{"_index":1918,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["auth/auth.module",{"_index":410,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/tenant",{"_index":67,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["auth/token.decorator",{"_index":1919,"title":{},"body":{"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["auth_client_id",{"_index":607,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth_client_secret",{"_index":606,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["auth_client_secret=$(openssl",{"_index":3570,"title":{},"body":{"index.html":{}}}],["auth_client_secret=your",{"_index":3576,"title":{},"body":{"index.html":{}}}],["auth_queries",{"_index":678,"title":{},"body":{"controllers/AuthorizeController.html":{},"entities/Session.html":{}}}],["auth_session",{"_index":685,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["auth_validation_schema",{"_index":409,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["authconfig",{"_index":327,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/typealiases.html":{}}}],["authcontroller",{"_index":500,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["authenticating",{"_index":90,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["authentication",{"_index":306,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["authguard",{"_index":1999,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":1989,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authheader",{"_index":558,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.startswith('basic",{"_index":560,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.substring(6",{"_index":562,"title":{},"body":{"controllers/AuthController.html":{}}}],["authmodule",{"_index":368,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":3912,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":323,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/PathSerializer.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["authorization_challenge_endpoint",{"_index":773,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorization_code",{"_index":791,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/Session.html":{}}}],["authorization_encrypted_response_alg",{"_index":2419,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_encrypted_response_enc",{"_index":2420,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_endpoint",{"_index":760,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorization_request",{"_index":2385,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{}}}],["authorization_server",{"_index":1069,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["authorization_servers",{"_index":1070,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["authorizationchallengeendpoint",{"_index":632,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationchallengeendpoint(res",{"_index":635,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{}}}],["authorizationcodegrantidentifier",{"_index":738,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationresponse",{"_index":622,"title":{"classes/AuthorizationResponse.html":{}},"body":{"classes/AuthorizationResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["authorizationserver",{"_index":750,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationservermetadata",{"_index":722,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationservermetadata.dpop_signing_alg_values_supported",{"_index":802,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationservermetadata.issuer",{"_index":814,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationservers",{"_index":2253,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["authorize",{"_index":633,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(queries",{"_index":640,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize.service",{"_index":660,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize/authorize.controller",{"_index":1976,"title":{},"body":{"modules/IssuerModule.html":{}}}],["authorize/authorize.service",{"_index":1973,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{}}}],["authorizecontroller",{"_index":626,"title":{"controllers/AuthorizeController.html":{}},"body":{"controllers/AuthorizeController.html":{},"modules/IssuerModule.html":{}}}],["authorized",{"_index":3632,"title":{},"body":{"license.html":{}}}],["authorizequeries",{"_index":636,"title":{"classes/AuthorizeQueries.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/Session.html":{}}}],["authorizequeries})@post('par",{"_index":648,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorizeservice",{"_index":659,"title":{"injectables/AuthorizeService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/WellKnownController.html":{},"overview.html":{}}}],["authorship",{"_index":3673,"title":{},"body":{"license.html":{}}}],["authresponse",{"_index":608,"title":{"interfaces/AuthResponse.html":{}},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["authserver",{"_index":753,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authserver}/.well",{"_index":763,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authserver}/authorize",{"_index":761,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authserver}/authorize/challenge",{"_index":774,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authserver}/authorize/par",{"_index":770,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authserver}/authorize/token",{"_index":759,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authtoken",{"_index":494,"title":{},"body":{"interfaces/Auth.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"miscellaneous/typealiases.html":{}}}],["authtype",{"_index":2482,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authz",{"_index":2432,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authzmetadata",{"_index":708,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/WellKnownController.html":{}}}],["authzmetadata(tenantid",{"_index":720,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/WellKnownController.html":{}}}],["authzservice",{"_index":2218,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["auto",{"_index":1009,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["autoloadentities",{"_index":1461,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["available",{"_index":551,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"index.html":{},"license.html":{},"modules.html":{}}}],["avoid",{"_index":2952,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["await",{"_index":147,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["axios",{"_index":949,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"dependencies.html":{}}}],["b",{"_index":1817,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"license.html":{}}}],["b.headers",{"_index":1824,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["b3abd57",{"_index":3437,"title":{},"body":{"changelog.html":{}}}],["b989c6c",{"_index":3388,"title":{},"body":{"changelog.html":{}}}],["back",{"_index":570,"title":{},"body":{"controllers/AuthController.html":{}}}],["backend",{"_index":3500,"title":{},"body":{"index.html":{}}}],["badgateway/oauth2",{"_index":37,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"dependencies.html":{}}}],["badrequestexception",{"_index":2233,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["badrequestexception('session",{"_index":2319,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["bar",{"_index":2676,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["base",{"_index":986,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["base64",{"_index":564,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"index.html":{}}}],["base64credentials",{"_index":561,"title":{},"body":{"controllers/AuthController.html":{}}}],["base64url",{"_index":3283,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["based",{"_index":134,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"index.html":{},"license.html":{}}}],["baseurl",{"_index":127,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["basic",{"_index":492,"title":{},"body":{"interfaces/Auth.html":{},"controllers/AuthController.html":{}}}],["basis",{"_index":3823,"title":{},"body":{"license.html":{}}}],["batch",{"_index":1083,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["batch_credential_issuance",{"_index":1071,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["batch_size",{"_index":1095,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["bearer",{"_index":324,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"classes/TokenResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["become",{"_index":1039,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["beef4d2",{"_index":3392,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":828,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["begin",{"_index":1379,"title":{},"body":{"injectables/CryptoService.html":{}}}],["behalf",{"_index":3701,"title":{},"body":{"license.html":{}}}],["behavior",{"_index":1013,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["being",{"_index":2883,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["below",{"_index":3679,"title":{},"body":{"license.html":{}}}],["beneficial",{"_index":3656,"title":{},"body":{"license.html":{}}}],["best",{"_index":1781,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["better",{"_index":2487,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["between",{"_index":615,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["bigint",{"_index":2701,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["binary",{"_index":1935,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["bind",{"_index":3693,"title":{},"body":{"license.html":{}}}],["bits",{"_index":3094,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["bitsperstatus",{"_index":3095,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["blob",{"_index":1019,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["body",{"_index":193,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["body.auth_session",{"_index":830,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["body.client_id",{"_index":571,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.client_secret",{"_index":572,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.code",{"_index":792,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["body.credentialconfigurationids",{"_index":2263,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.credentialconfigurationids.map((id",{"_index":2259,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.event",{"_index":2324,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.grant_type",{"_index":554,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.issuer_state",{"_index":821,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["body.notification_id",{"_index":2322,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.requestid",{"_index":2542,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body.response",{"_index":2458,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["body.response_type",{"_index":1949,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["body.webhook",{"_index":2543,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body_",{"_index":1541,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["bodyserializer",{"_index":916,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"interfaces/QuerySerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["boilerplate",{"_index":3884,"title":{},"body":{"license.html":{}}}],["boolean",{"_index":27,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{}}}],["bootstrap",{"_index":363,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":673,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["bound",{"_index":255,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["boundaries",{"_index":3549,"title":{},"body":{"index.html":{}}}],["brackets",{"_index":3886,"title":{},"body":{"license.html":{}}}],["branch",{"_index":3596,"title":{},"body":{"index.html":{}}}],["break",{"_index":1581,"title":{},"body":{"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{}}}],["bridges",{"_index":3499,"title":{},"body":{"index.html":{}}}],["browse",{"_index":3905,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3903,"title":{},"body":{"modules.html":{}}}],["btoa(token",{"_index":499,"title":{},"body":{"interfaces/Auth.html":{}}}],["buffer",{"_index":1950,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/VaultKeyService.html":{}}}],["buffer.concat([buffer.alloc(32",{"_index":3311,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.concat([rpadded",{"_index":3317,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from",{"_index":563,"title":{},"body":{"controllers/AuthController.html":{}}}],["buffer.from(dersignature",{"_index":3291,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from(json.stringify(header)).tostring",{"_index":3282,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from(json.stringify(payload)).tostring",{"_index":3285,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from(value).tostring('base64",{"_index":3277,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["bug",{"_index":3360,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":3436,"title":{},"body":{"changelog.html":{}}}],["buildclientparams",{"_index":1560,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["builder/querypartialentity",{"_index":3059,"title":{},"body":{"injectables/SessionService.html":{}}}],["buildkeymap",{"_index":1548,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["buildkeymap(config.args",{"_index":1554,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["buildkeymap(fields",{"_index":1561,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["buildurl",{"_index":903,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["buildurlfn",{"_index":912,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["built",{"_index":3546,"title":{},"body":{"index.html":{}}}],["business",{"_index":3530,"title":{},"body":{"index.html":{}}}],["byte",{"_index":3299,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["bytes",{"_index":1396,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{}}}],["c",{"_index":3773,"title":{},"body":{"license.html":{}}}],["c.id",{"_index":876,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["c3b1b48",{"_index":3403,"title":{},"body":{"changelog.html":{}}}],["c805439",{"_index":3416,"title":{},"body":{"changelog.html":{}}}],["ca",{"_index":1362,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cache",{"_index":2039,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cacreateserial",{"_index":1364,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cakey",{"_index":1363,"title":{},"body":{"injectables/CryptoService.html":{}}}],["calculatejwkthumbprint",{"_index":1287,"title":{},"body":{"injectables/CryptoService.html":{}}}],["call",{"_index":2897,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["callback",{"_index":496,"title":{},"body":{"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"injectables/CryptoService.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{}}}],["callback(auth",{"_index":497,"title":{},"body":{"interfaces/Auth.html":{}}}],["callbackcontext",{"_index":1285,"title":{},"body":{"injectables/CryptoService.html":{}}}],["callbacks",{"_index":751,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["called",{"_index":142,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["callhandler",{"_index":2893,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["calling",{"_index":1044,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["calls",{"_index":3556,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":1990,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":1994,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["carry",{"_index":3768,"title":{},"body":{"license.html":{}}}],["case",{"_index":1437,"title":{},"body":{"injectables/CryptoService-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["catch",{"_index":568,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/VaultKeyService.html":{}}}],["catch(async",{"_index":3252,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["catcherror",{"_index":2910,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["catcherror((error",{"_index":2944,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["cause",{"_index":3646,"title":{},"body":{"license.html":{}}}],["cb",{"_index":2046,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cb(err",{"_index":2048,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cd",{"_index":3564,"title":{},"body":{"index.html":{}}}],["cert",{"_index":241,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["cert.id",{"_index":264,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["cert.publickey.export",{"_index":2779,"title":{},"body":{"injectables/ResolverService.html":{}}}],["cert.revoked",{"_index":262,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["cert.subjectaltname?.includes(payload.iss.split('://')[1",{"_index":2777,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certificate",{"_index":10,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{}}}],["certificate.pem",{"_index":1317,"title":{},"body":{"injectables/CryptoService.html":{}}}],["certificatechainlength",{"_index":2446,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["certificates",{"_index":77,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["certificatetype",{"_index":1258,"title":{},"body":{"injectables/CryptoService.html":{},"miscellaneous/typealiases.html":{}}}],["certout",{"_index":1316,"title":{},"body":{"injectables/CryptoService.html":{}}}],["certs",{"_index":260,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["certs?.length",{"_index":266,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["certs[0",{"_index":2776,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certs[0].jwt",{"_index":268,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["chain",{"_index":1377,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/ResolverService.html":{}}}],["challenge",{"_index":639,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["changed",{"_index":3772,"title":{},"body":{"license.html":{}}}],["changelog",{"_index":3356,"title":{"changelog.html":{}},"body":{}}],["character",{"_index":3575,"title":{},"body":{"index.html":{},"license.html":{}}}],["characters",{"_index":943,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["charge",{"_index":3725,"title":{},"body":{"license.html":{}}}],["check",{"_index":213,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["checking",{"_index":3109,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["checks",{"_index":131,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"controllers/HealthController.html":{},"injectables/RegistrarService.html":{}}}],["checl",{"_index":2780,"title":{},"body":{"injectables/ResolverService.html":{}}}],["choice",{"_index":3511,"title":{},"body":{"index.html":{}}}],["choose",{"_index":3589,"title":{},"body":{"index.html":{},"license.html":{}}}],["ci",{"_index":3362,"title":{},"body":{"changelog.html":{}}}],["citizen",{"_index":2660,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["claim",{"_index":3750,"title":{},"body":{"license.html":{}}}],["claims",{"_index":1185,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"license.html":{}}}],["class",{"_index":80,"title":{"classes/ApiKeyConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/Interceptors.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrarConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{},"license.html":{}}}],["classes",{"_index":304,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/Interceptors.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrarConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"overview.html":{}}}],["clean",{"_index":1367,"title":{},"body":{"injectables/CryptoService.html":{},"index.html":{}}}],["cleancontent",{"_index":1784,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleancontent.endswith('+json",{"_index":1787,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleancontent.startswith('application/json",{"_index":1786,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleancontent.startswith('text",{"_index":1793,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleancontent.startswith(type",{"_index":1792,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleanup",{"_index":860,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["clear",{"_index":1711,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{}}}],["client",{"_index":38,"title":{"interfaces/Client.html":{},"interfaces/Client-1.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["client's",{"_index":1040,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["client.id",{"_index":577,"title":{},"body":{"controllers/AuthController.html":{}}}],["client.secret",{"_index":877,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["client.service",{"_index":526,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["client['buildurl",{"_index":1804,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["client_credentials",{"_index":538,"title":{},"body":{"controllers/AuthController.html":{}}}],["client_id",{"_index":541,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/TokenPayload.html":{},"index.html":{}}}],["client_metadata",{"_index":2409,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_name",{"_index":2422,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_secret",{"_index":543,"title":{},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{},"index.html":{}}}],["clientauthentication",{"_index":1398,"title":{},"body":{"injectables/CryptoService.html":{}}}],["clientauthenticationnone",{"_index":1288,"title":{},"body":{"injectables/CryptoService.html":{}}}],["clientcredentialsdto",{"_index":506,"title":{"classes/ClientCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{}}}],["clientid",{"_index":113,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["clientoptions",{"_index":974,"title":{"interfaces/ClientOptions.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["clients",{"_index":854,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["clients.foreach((client",{"_index":864,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["clientsecret",{"_index":115,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/RegistrarService.html":{}}}],["clientservice",{"_index":525,"title":{"injectables/ClientService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"overview.html":{}}}],["clone",{"_index":3560,"title":{},"body":{"index.html":{}}}],["cloudflare",{"_index":3404,"title":{},"body":{"changelog.html":{}}}],["cluster_appmodule",{"_index":366,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":367,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":585,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":586,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":587,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_cryptomodule",{"_index":1236,"title":{},"body":{"modules/CryptoModule.html":{},"overview.html":{}}}],["cluster_cryptomodule_exports",{"_index":1237,"title":{},"body":{"modules/CryptoModule.html":{},"overview.html":{}}}],["cluster_cryptomodule_providers",{"_index":1238,"title":{},"body":{"modules/CryptoModule.html":{},"overview.html":{}}}],["cluster_issuermodule",{"_index":1963,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_issuermodule_exports",{"_index":1966,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_issuermodule_imports",{"_index":1965,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_issuermodule_providers",{"_index":1964,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule",{"_index":2353,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule_exports",{"_index":2355,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule_imports",{"_index":2354,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule_providers",{"_index":2356,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule",{"_index":2555,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule_exports",{"_index":2558,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule_imports",{"_index":2556,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule_providers",{"_index":2557,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_registrarmodule",{"_index":2711,"title":{},"body":{"modules/RegistrarModule.html":{},"overview.html":{}}}],["cluster_registrarmodule_exports",{"_index":2713,"title":{},"body":{"modules/RegistrarModule.html":{},"overview.html":{}}}],["cluster_registrarmodule_imports",{"_index":2714,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["cluster_registrarmodule_providers",{"_index":2712,"title":{},"body":{"modules/RegistrarModule.html":{},"overview.html":{}}}],["cluster_resolvermodule",{"_index":2753,"title":{},"body":{"modules/ResolverModule.html":{},"overview.html":{}}}],["cluster_resolvermodule_exports",{"_index":2754,"title":{},"body":{"modules/ResolverModule.html":{},"overview.html":{}}}],["cluster_resolvermodule_providers",{"_index":2755,"title":{},"body":{"modules/ResolverModule.html":{},"overview.html":{}}}],["cluster_sessionmodule",{"_index":3016,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_sessionmodule_exports",{"_index":3017,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_sessionmodule_imports",{"_index":3018,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_sessionmodule_providers",{"_index":3019,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_statuslistmodule",{"_index":3164,"title":{},"body":{"modules/StatusListModule.html":{},"overview.html":{}}}],["cluster_statuslistmodule_exports",{"_index":3166,"title":{},"body":{"modules/StatusListModule.html":{},"overview.html":{}}}],["cluster_statuslistmodule_imports",{"_index":3165,"title":{},"body":{"modules/StatusListModule.html":{}}}],["cluster_statuslistmodule_providers",{"_index":3167,"title":{},"body":{"modules/StatusListModule.html":{},"overview.html":{}}}],["cluster_verifiermodule",{"_index":3324,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cluster_verifiermodule_imports",{"_index":3325,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cmd",{"_index":1328,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cn=${subject",{"_index":1348,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cnf",{"_index":1141,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{}}}],["cnonce",{"_index":805,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["cnonceexpiresin",{"_index":815,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["cnonceexpiresinseconds",{"_index":2314,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["code",{"_index":655,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/Session.html":{},"index.html":{},"license.html":{}}}],["code_challenge",{"_index":686,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_method",{"_index":687,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_methods_supported",{"_index":771,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["codecov",{"_index":3382,"title":{},"body":{"changelog.html":{}}}],["colorize",{"_index":446,"title":{},"body":{"modules/AppModule.html":{}}}],["column",{"_index":1885,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{}}}],["column('json",{"_index":1877,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["column('json')@isobject",{"_index":1865,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["column('varchar",{"_index":1873,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["column({type",{"_index":1868,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{}}}],["combination",{"_index":3745,"title":{},"body":{"license.html":{}}}],["commands",{"_index":1327,"title":{},"body":{"injectables/CryptoService.html":{}}}],["comment",{"_index":3889,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":3859,"title":{},"body":{"license.html":{}}}],["common",{"_index":3639,"title":{},"body":{"license.html":{}}}],["commonoptions",{"_index":1459,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["communicates",{"_index":3524,"title":{},"body":{"index.html":{}}}],["communication",{"_index":3704,"title":{},"body":{"license.html":{}}}],["compact",{"_index":1278,"title":{},"body":{"injectables/CryptoService.html":{}}}],["comparison",{"_index":275,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["compatible",{"_index":3541,"title":{},"body":{"index.html":{}}}],["compiled",{"_index":3669,"title":{},"body":{"license.html":{}}}],["complete",{"_index":2588,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["completed",{"_index":2942,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["completion",{"_index":2987,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["compliance",{"_index":3897,"title":{},"body":{"license.html":{}}}],["complies",{"_index":3793,"title":{},"body":{"license.html":{}}}],["computer",{"_index":3856,"title":{},"body":{"license.html":{}}}],["concatenate",{"_index":3315,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["condition",{"_index":3047,"title":{},"body":{"injectables/SessionService.html":{}}}],["conditions",{"_index":3621,"title":{},"body":{"license.html":{}}}],["config",{"_index":60,"title":{"interfaces/Config.html":{},"interfaces/Config-1.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CredentialsService.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionService.html":{},"interfaces/TDataShape.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{},"index.html":{}}}],["config.accesscertificateid",{"_index":217,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["config.allowextra",{"_index":1580,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.args",{"_index":1553,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.baseurl",{"_index":1819,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.baseurl.length",{"_index":1821,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.baseurl.substring(0",{"_index":1820,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.baseurl?.endswith",{"_index":1818,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.dto",{"_index":1887,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.dto.ts",{"_index":2514,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["config.dto.ts:10",{"_index":3209,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:12",{"_index":3210,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:14",{"_index":3211,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:16",{"_index":3213,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:18",{"_index":3214,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:23",{"_index":2515,"title":{},"body":{"classes/PresentationDuringIssuance.html":{}}}],["config.dto.ts:25",{"_index":2516,"title":{},"body":{"classes/PresentationDuringIssuance.html":{}}}],["config.dto.ts:6",{"_index":3215,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:8",{"_index":3212,"title":{},"body":{"classes/VCT.html":{}}}],["config.entity",{"_index":1172,"title":{},"body":{"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["config.entity.ts",{"_index":1862,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.entity.ts:12",{"_index":1875,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:15",{"_index":1883,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:17",{"_index":2506,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:18",{"_index":1867,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:22",{"_index":1866,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:24",{"_index":2509,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:25",{"_index":1872,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:29",{"_index":1884,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:32",{"_index":2504,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:33",{"_index":1880,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:37",{"_index":1881,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:38",{"_index":2508,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:42",{"_index":1870,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:44",{"_index":2511,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:50",{"_index":2503,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.headers",{"_index":1822,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.id",{"_index":155,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["config.in",{"_index":1551,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.key",{"_index":1549,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.map",{"_index":1552,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.presentation_during_issuance",{"_index":842,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["config.presentation_during_issuance.webhook",{"_index":843,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["config.service.ts",{"_index":2104,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["config.service.ts:17",{"_index":2115,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:23",{"_index":2124,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:47",{"_index":2126,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:59",{"_index":2116,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:63",{"_index":2123,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:67",{"_index":2122,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:71",{"_index":2121,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:75",{"_index":2119,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:79",{"_index":2118,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:86",{"_index":2127,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.ts",{"_index":2707,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["config.ts:12",{"_index":2709,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["config.ts:8",{"_index":2710,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["configmodule",{"_index":383,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["configmodule.forroot",{"_index":417,"title":{},"body":{"modules/AppModule.html":{}}}],["configs",{"_index":2257,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["configs[id",{"_index":2260,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["configservice",{"_index":34,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["configservice.get",{"_index":1458,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["configservice.get('jwt_issuer",{"_index":2061,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":2055,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('keycloak_client_id",{"_index":2053,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('keycloak_internal_issuer_url",{"_index":2052,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('keycloak_internal_issuer_url')}/protocol/openid",{"_index":2043,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('log_level",{"_index":440,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('oidc",{"_index":2035,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.getorthrow('db_database",{"_index":1471,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_host",{"_index":1463,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_password",{"_index":1469,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_port",{"_index":1465,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_username",{"_index":1467,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('folder",{"_index":481,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configservie",{"_index":1428,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["configurable",{"_index":1321,"title":{},"body":{"injectables/CryptoService.html":{}}}],["configuration",{"_index":97,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Client.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["configuration(@token",{"_index":1956,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["configuration(user",{"_index":1897,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["configurations",{"_index":105,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["configure",{"_index":3561,"title":{},"body":{"index.html":{}}}],["configured",{"_index":2060,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/PresentationRequest.html":{},"injectables/SessionService.html":{}}}],["conflictexception",{"_index":737,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["conflictexception('authorization",{"_index":793,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["conflictexception('issuer",{"_index":2787,"title":{},"body":{"injectables/ResolverService.html":{}}}],["conflictexception('request",{"_index":2626,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["conforms",{"_index":954,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["connect",{"_index":904,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["connect/certs",{"_index":2044,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["connect/token",{"_index":121,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["connection",{"_index":1696,"title":{},"body":{"controllers/HealthController.html":{}}}],["consequential",{"_index":3850,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":3870,"title":{},"body":{"license.html":{}}}],["console",{"_index":3385,"title":{},"body":{"changelog.html":{}}}],["console.error",{"_index":271,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["console.error('error",{"_index":223,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["console.log('keycloak",{"_index":2047,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["console.log('received",{"_index":2682,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["console.log('session",{"_index":2210,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["console.log(crt.subjectaltname",{"_index":1376,"title":{},"body":{"injectables/CryptoService.html":{}}}],["console.log(err",{"_index":2636,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["console.log(headers",{"_index":2478,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["console.log(json.stringify(presented",{"_index":2683,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["console.log(request.headers",{"_index":2679,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["console.warn('access",{"_index":228,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["conspicuously",{"_index":3713,"title":{},"body":{"license.html":{}}}],["const",{"_index":110,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{}}}],["constitutes",{"_index":3754,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":93,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["constructor(authzservice",{"_index":2216,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["constructor(configservice",{"_index":715,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["constructor(configservie",{"_index":1426,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["constructor(crpytoservice",{"_index":1126,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["constructor(cryptoservice",{"_index":2364,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["constructor(httpservice",{"_index":2577,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["constructor(logger",{"_index":2975,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["constructor(private",{"_index":1113,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/ResolverService.html":{},"controllers/StatusListController.html":{}}}],["constructor(reflector",{"_index":1991,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["constructor(sessionrepository",{"_index":3031,"title":{},"body":{"injectables/SessionService.html":{}}}],["construed",{"_index":3791,"title":{},"body":{"license.html":{}}}],["consume",{"_index":2673,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["contact",{"_index":3939,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["contained",{"_index":3779,"title":{},"body":{"license.html":{}}}],["containing",{"_index":618,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{}}}],["content",{"_index":474,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"index.html":{},"license.html":{}}}],["contents",{"_index":3787,"title":{},"body":{"license.html":{}}}],["contenttype",{"_index":1780,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["contenttype.split(';')[0]?.trim",{"_index":1785,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["context",{"_index":1997,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["context.flowtype",{"_index":3003,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.getclass",{"_index":2005,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":2004,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["context.sessionid",{"_index":3005,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.switchtohttp().getrequest",{"_index":2916,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":2917,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.tenantid",{"_index":3006,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.ts",{"_index":2880,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["context.ts:21",{"_index":2882,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["continue",{"_index":1566,"title":{},"body":{"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{}}}],["contract",{"_index":3648,"title":{},"body":{"license.html":{}}}],["contributing",{"_index":3602,"title":{},"body":{"index.html":{}}}],["contributing.md",{"_index":3610,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":3695,"title":{},"body":{"license.html":{}}}],["contribution(s",{"_index":3743,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":3795,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":3716,"title":{},"body":{"license.html":{}}}],["contributors",{"_index":3607,"title":{},"body":{"index.html":{}}}],["contributory",{"_index":3755,"title":{},"body":{"license.html":{}}}],["control",{"_index":3637,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":3638,"title":{},"body":{"license.html":{}}}],["controller",{"_index":342,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["controller(':tenantid/.well",{"_index":3348,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["controller(':tenantid/authorize",{"_index":666,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["controller(':tenantid/oid4vp",{"_index":2345,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["controller(':tenantid/status",{"_index":3088,"title":{},"body":{"controllers/StatusListController.html":{}}}],["controller(':tenantid/vci",{"_index":2200,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["controller('auth",{"_index":536,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('credentials/:tenantid",{"_index":1112,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["controller('health",{"_index":1702,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('issuer",{"_index":1930,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["controller('presentation",{"_index":2539,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["controller('session",{"_index":2873,"title":{},"body":{"controllers/SessionController.html":{}}}],["controllers",{"_index":344,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"controllers/WellKnownController.html":{},"overview.html":{}}}],["conversions",{"_index":3670,"title":{},"body":{"license.html":{}}}],["convert",{"_index":3279,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["converting",{"_index":963,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["converts",{"_index":3225,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["cookie",{"_index":489,"title":{},"body":{"interfaces/Auth.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["coordinate",{"_index":1486,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["copies",{"_index":3761,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2951,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["copyright",{"_index":3630,"title":{},"body":{"license.html":{}}}],["core",{"_index":3533,"title":{},"body":{"index.html":{}}}],["core/auth",{"_index":978,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["core/bodyserializer",{"_index":1729,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["core/pathserializer",{"_index":1734,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["core/types",{"_index":981,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["coreclient",{"_index":979,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["coreconfig",{"_index":980,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["correct",{"_index":1047,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/Oid4vciService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["counterclaim",{"_index":3751,"title":{},"body":{"license.html":{}}}],["covered",{"_index":249,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["cp",{"_index":3565,"title":{},"body":{"index.html":{}}}],["create",{"_index":289,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["create(session",{"_index":3038,"title":{},"body":{"injectables/SessionService.html":{}}}],["create(tenantid",{"_index":3221,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["create_authorization_request",{"_index":2387,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest",{"_index":2362,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest(requestid",{"_index":2366,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationservermetadata",{"_index":756,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["createclientconfig",{"_index":1037,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["createconfig",{"_index":1858,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["createcredentialoffer",{"_index":2262,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["created",{"_index":188,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/VaultKeyService.html":{}}}],["createdat",{"_index":1863,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{}}}],["createentry",{"_index":3145,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["createentry(session",{"_index":3176,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createhash",{"_index":1281,"title":{},"body":{"injectables/CryptoService.html":{}}}],["createhash(alg.replace",{"_index":1392,"title":{},"body":{"injectables/CryptoService.html":{}}}],["createheaderandpayload",{"_index":3096,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["createinterceptors",{"_index":1852,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["createkeydto",{"_index":3256,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["createlist",{"_index":3171,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createlist(tenantid",{"_index":3127,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["createoffer",{"_index":2214,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["createoffer(body",{"_index":2219,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["createparamdecorator",{"_index":3204,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["createqueryserializer",{"_index":1766,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["createqueryserializer(options.queryserializer",{"_index":1809,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["createrequest",{"_index":2363,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createrequest(requestid",{"_index":2371,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["creates",{"_index":1228,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{},"injectables/VaultKeyService.html":{}}}],["cred",{"_index":2299,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["cred.length",{"_index":2304,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential",{"_index":827,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"controllers/WellKnownController.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["credential(req",{"_index":2188,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["credential.config",{"_index":1182,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credential_configurations_supported",{"_index":1072,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{}}}],["credential_configurations_supported[credential.id",{"_index":1181,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credential_creation",{"_index":3011,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_endpoint",{"_index":1073,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["credential_issuance",{"_index":3010,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_issuer",{"_index":1074,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["credential_issuer}/vci/credential",{"_index":2249,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_issuer}/vci/notification",{"_index":2250,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_request",{"_index":2286,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_revoked",{"_index":2158,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["credential_verification",{"_index":3013,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credentialconfigurationid",{"_index":1143,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["credentialconfigurationids",{"_index":1939,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{}}}],["credentialconfigurationsupported",{"_index":1164,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{}}}],["credentialcount",{"_index":2468,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialid",{"_index":1139,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialissuer",{"_index":2246,"title":{},"body":{"injectables/Oid4vciService.html":{},"controllers/WellKnownController.html":{}}}],["credentialissuermetadatadto",{"_index":1063,"title":{"classes/CredentialIssuerMetadataDto.html":{}},"body":{"classes/CredentialIssuerMetadataDto.html":{},"controllers/WellKnownController.html":{}}}],["credentialofferobject",{"_index":2841,"title":{},"body":{"entities/Session.html":{}}}],["credentialpayload",{"_index":2267,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["credentialrequest",{"_index":2271,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialresponse",{"_index":2196,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{}}}],["credentials",{"_index":160,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"index.html":{}}}],["credentials.dto",{"_index":529,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":971,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.dto.ts:5",{"_index":972,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.dto.ts:7",{"_index":973,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.length",{"_index":2312,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["credentials.push(cred",{"_index":2301,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentials.service",{"_index":1110,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["credentials.split",{"_index":567,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials/:tenantid",{"_index":1098,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["credentials/credentials.controller",{"_index":1978,"title":{},"body":{"modules/IssuerModule.html":{}}}],["credentials/credentials.service",{"_index":746,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["credentials/entities/issuance",{"_index":1981,"title":{},"body":{"modules/IssuerModule.html":{}}}],["credentials?.length",{"_index":2469,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialscontroller",{"_index":1096,"title":{"controllers/CredentialsController.html":{}},"body":{"controllers/CredentialsController.html":{},"modules/IssuerModule.html":{}}}],["credentialsissued",{"_index":2311,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialsize",{"_index":2303,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialsservice",{"_index":717,"title":{"injectables/CredentialsService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"overview.html":{}}}],["credentialtype",{"_index":2981,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["cron",{"_index":3051,"title":{},"body":{"injectables/SessionService.html":{}}}],["cross",{"_index":3749,"title":{},"body":{"license.html":{}}}],["crpytoservice",{"_index":1131,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["crt",{"_index":14,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/RegistrarService.html":{}}}],["crv",{"_index":1478,"title":{},"body":{"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/JwksResponseDto.html":{}}}],["crypto",{"_index":1430,"title":{},"body":{"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{}}}],["crypto.service",{"_index":1241,"title":{},"body":{"modules/CryptoModule.html":{}}}],["crypto/crypto",{"_index":1620,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["crypto/crypto.module",{"_index":385,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}}}],["crypto/crypto.service",{"_index":48,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["crypto/encryption/encryption.service",{"_index":2379,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["crypto/key/crypto/crypto.module",{"_index":401,"title":{},"body":{"modules/AppModule.html":{}}}],["crypto/key/key.module",{"_index":399,"title":{},"body":{"modules/AppModule.html":{}}}],["crypto_validation_schema",{"_index":400,"title":{},"body":{"modules/AppModule.html":{}}}],["cryptocontrollerowncertdata",{"_index":3941,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cryptocontrollerowncertparseddata",{"_index":3942,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cryptocontrollerowncertparsedresponse",{"_index":3943,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cryptocontrollerowncertparsedresponses",{"_index":3944,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cryptocontrollerowncertresponse",{"_index":3945,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cryptocontrollerowncertresponses",{"_index":3946,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cryptographic",{"_index":99,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"index.html":{}}}],["cryptoimplementation",{"_index":1213,"title":{"interfaces/CryptoImplementation.html":{}},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{}}}],["cryptokey",{"_index":1505,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{}}}],["cryptomodule",{"_index":369,"title":{"modules/CryptoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["cryptoservice",{"_index":47,"title":{"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"overview.html":{}}}],["cryptotype",{"_index":1431,"title":{},"body":{"injectables/CryptoService-1.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["csr",{"_index":1354,"title":{},"body":{"injectables/CryptoService.html":{}}}],["ctx",{"_index":3205,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":3206,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["curl",{"_index":3579,"title":{},"body":{"index.html":{}}}],["current_timestamp",{"_index":1869,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["currentdate",{"_index":1387,"title":{},"body":{"injectables/CryptoService.html":{}}}],["currently",{"_index":331,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["curve",{"_index":1475,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["custom",{"_index":993,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["customary",{"_index":3814,"title":{},"body":{"license.html":{}}}],["customprops",{"_index":455,"title":{},"body":{"modules/AppModule.html":{}}}],["d",{"_index":3582,"title":{},"body":{"index.html":{},"license.html":{}}}],["d6205da",{"_index":3434,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":3847,"title":{},"body":{"license.html":{}}}],["data",{"_index":225,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/typealiases.html":{}}}],["data.append(key",{"_index":2692,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["data.revoked",{"_index":227,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["data.tostring",{"_index":2705,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["database",{"_index":1470,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"index.html":{}}}],["database/database.module",{"_index":407,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":370,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":168,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"license.html":{}}}],["date((payload.exp",{"_index":1389,"title":{},"body":{"injectables/CryptoService.html":{}}}],["date().gettime",{"_index":1203,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{}}}],["date(date.now",{"_index":3076,"title":{},"body":{"injectables/SessionService.html":{}}}],["date(token.expiresat",{"_index":170,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["date.gettime",{"_index":182,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["date.now",{"_index":2933,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["day",{"_index":3056,"title":{},"body":{"injectables/SessionService.html":{}}}],["days",{"_index":1351,"title":{},"body":{"injectables/CryptoService.html":{}}}],["db",{"_index":1703,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["db_database",{"_index":1455,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_host",{"_index":1446,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_password",{"_index":1454,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_port",{"_index":1451,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_type",{"_index":1443,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_username",{"_index":1453,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_validation_schema",{"_index":1442,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dbtype",{"_index":1457,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dc+sd",{"_index":2415,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcql",{"_index":2505,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["dcql_query",{"_index":248,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{}}}],["dcql_query.length",{"_index":2402,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcqlquerycount",{"_index":2400,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dd",{"_index":451,"title":{},"body":{"modules/AppModule.html":{}}}],["de",{"_index":894,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["deal",{"_index":1932,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["debug",{"_index":427,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["debugging",{"_index":1684,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["declarations",{"_index":362,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["decode",{"_index":1682,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodedjwt",{"_index":3947,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["decodedvc",{"_index":2628,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.header",{"_index":2631,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.payload",{"_index":2630,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodejwt",{"_index":1653,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodejwt(token",{"_index":1686,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodetoken",{"_index":2007,"title":{},"body":{"injectables/JwtService.html":{}}}],["decodetoken(token",{"_index":1685,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decorators",{"_index":310,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"controllers/CredentialsController.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"entities/KeyEntity.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequest.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["decryptjwe",{"_index":1495,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe(response",{"_index":1499,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["deeply",{"_index":2816,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["deepobject",{"_index":941,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["deeppartial",{"_index":3039,"title":{},"body":{"injectables/SessionService.html":{}}}],["default",{"_index":430,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Auth.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{}}}],["defaultheaders",{"_index":1857,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["defaultpathserializer",{"_index":1747,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["defaultqueryserializer",{"_index":1856,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["defend",{"_index":3876,"title":{},"body":{"license.html":{}}}],["define",{"_index":680,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/PresentationConfig.html":{}}}],["defined",{"_index":312,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"license.html":{}}}],["defines",{"_index":2719,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["definition",{"_index":3641,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":3624,"title":{},"body":{"license.html":{}}}],["delete",{"_index":905,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"interfaces/Fields.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Params.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["delete('/:id",{"_index":1900,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["delete(':id",{"_index":2524,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration",{"_index":1894,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(@param('id",{"_index":1959,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(id",{"_index":1899,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["deletecredentialconfiguration",{"_index":1119,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["deletecredentialconfiguration(tenantid",{"_index":1132,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["deletepresentationconfig",{"_index":2572,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletepresentationconfig(id",{"_index":2584,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletes",{"_index":1134,"title":{},"body":{"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["deletion",{"_index":2587,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deliberate",{"_index":3842,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":360,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":3363,"title":{},"body":{"changelog.html":{}}}],["deployment",{"_index":3369,"title":{},"body":{"changelog.html":{}}}],["der",{"_index":3226,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["der.slice(2",{"_index":3293,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["derivative",{"_index":3680,"title":{},"body":{"license.html":{}}}],["derived",{"_index":3682,"title":{},"body":{"license.html":{}}}],["dersignature",{"_index":3227,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["dertojwtsignature",{"_index":3218,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["dertojwtsignature(dersignature",{"_index":3223,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["desc",{"_index":2620,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["describing",{"_index":3815,"title":{},"body":{"license.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"interfaces/CryptoImplementation.html":{},"classes/EC_Public.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"interfaces/TokenPayload.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"license.html":{},"properties.html":{}}}],["designated",{"_index":3715,"title":{},"body":{"license.html":{}}}],["desired",{"_index":955,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["details",{"_index":625,"title":{},"body":{"classes/AuthorizationResponse.html":{},"entities/PresentationConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{}}}],["determining",{"_index":3833,"title":{},"body":{"license.html":{}}}],["dev",{"_index":892,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["developers",{"_index":3605,"title":{},"body":{"index.html":{}}}],["development",{"_index":3545,"title":{},"body":{"index.html":{}}}],["development/testing",{"_index":870,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["df29d1e",{"_index":3412,"title":{},"body":{"changelog.html":{}}}],["different",{"_index":279,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["differnt",{"_index":2317,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["digest",{"_index":1154,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/PresentationsService.html":{}}}],["diplomatic",{"_index":3496,"title":{},"body":{"index.html":{}}}],["direct",{"_index":3644,"title":{},"body":{"license.html":{}}}],["direct_post.jwt",{"_index":2408,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["direction",{"_index":3647,"title":{},"body":{"license.html":{}}}],["disable",{"_index":174,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["disablehttplogger",{"_index":2132,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["disablesessionlogger",{"_index":2131,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["disclaimer",{"_index":3818,"title":{},"body":{"license.html":{}}}],["disclosed",{"_index":2658,"title":{},"body":{"interfaces/PresentedData.html":{}}}],["disclosureframe",{"_index":1188,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{}}}],["discoveryendpoint",{"_index":122,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["discussing",{"_index":3710,"title":{},"body":{"license.html":{}}}],["display",{"_index":1075,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{},"license.html":{}}}],["display.json",{"_index":898,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vciService.html":{}}}],["displayinfo",{"_index":890,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["distribute",{"_index":3731,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":3781,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":3623,"title":{},"body":{"license.html":{}}}],["dns",{"_index":237,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["docker",{"_index":3431,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["document",{"_index":2766,"title":{},"body":{"injectables/ResolverService.html":{},"license.html":{}}}],["documentation",{"_index":3588,"title":{},"body":{"index.html":{},"license.html":{}}}],["documents",{"_index":2583,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["don't",{"_index":997,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["dpop",{"_index":795,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["dpop_jkt",{"_index":688,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["dpop_signing_alg_values_supported",{"_index":765,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["dto",{"_index":611,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["dto/auth",{"_index":2612,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dto/authorization",{"_index":2344,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["dto/authorize",{"_index":661,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["dto/client",{"_index":528,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/credential",{"_index":1886,"title":{},"body":{"entities/IssuanceConfig.html":{},"controllers/WellKnownController.html":{}}}],["dto/issuer",{"_index":2768,"title":{},"body":{"injectables/ResolverService.html":{}}}],["dto/jwks",{"_index":3345,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["dto/notification",{"_index":2197,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{}}}],["dto/oauth",{"_index":3346,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["dto/offer",{"_index":2239,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["dto/par",{"_index":665,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["dto/presentation",{"_index":2383,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dto/schema",{"_index":1168,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{}}}],["dto/status",{"_index":3104,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["dto/token",{"_index":532,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/vp",{"_index":2512,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["dummy",{"_index":1332,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummy.csr",{"_index":1311,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummy_key.pem",{"_index":1309,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummycsr",{"_index":1310,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummykey",{"_index":1308,"title":{},"body":{"injectables/CryptoService.html":{}}}],["duration",{"_index":2936,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["duration}ms",{"_index":2943,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["during",{"_index":2488,"title":{},"body":{"injectables/Oid4vpService.html":{},"index.html":{}}}],["dynamicmodule",{"_index":2070,"title":{},"body":{"modules/KeyModule.html":{}}}],["e",{"_index":3572,"title":{},"body":{"index.html":{}}}],["e.g",{"_index":962,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"interfaces/SessionLogContext.html":{}}}],["e3e5971",{"_index":3384,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":2184,"title":{},"body":{"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/VaultKeyService.html":{},"license.html":{}}}],["early",{"_index":3544,"title":{},"body":{"index.html":{}}}],["easier",{"_index":273,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["easily",{"_index":3527,"title":{},"body":{"index.html":{}}}],["easy",{"_index":3550,"title":{},"body":{"index.html":{}}}],["ec",{"_index":1340,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["ec_paramgen_curve:prime256v1",{"_index":1342,"title":{},"body":{"injectables/CryptoService.html":{}}}],["ec_public",{"_index":1293,"title":{"classes/EC_Public.html":{}},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["ecdh",{"_index":1524,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["ecdsa",{"_index":3258,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["echo",{"_index":3567,"title":{},"body":{"index.html":{}}}],["ecosystem",{"_index":3508,"title":{},"body":{"index.html":{}}}],["ed25519",{"_index":1435,"title":{},"body":{"injectables/CryptoService-1.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["eddsa",{"_index":2413,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["editorial",{"_index":3683,"title":{},"body":{"license.html":{}}}],["effect",{"_index":946,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["effectively",{"_index":1783,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["eject",{"_index":1712,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["eject(id",{"_index":1718,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["elaborations",{"_index":3686,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":3535,"title":{},"body":{"index.html":{},"license.html":{}}}],["element",{"_index":3148,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["elements",{"_index":1094,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["elliptic",{"_index":1474,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["emits",{"_index":2901,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["emitter",{"_index":65,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["emitter.module",{"_index":413,"title":{},"body":{"modules/AppModule.html":{}}}],["emitter/dist/event",{"_index":412,"title":{},"body":{"modules/AppModule.html":{}}}],["empty",{"_index":290,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["enabled",{"_index":133,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["enabledebugmode",{"_index":2133,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enclosed",{"_index":3885,"title":{},"body":{"license.html":{}}}],["encode",{"_index":3318,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encoded",{"_index":945,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["encodedheader",{"_index":3281,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodedheader}.${encodedpayload",{"_index":3287,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodedheader}.${encodedpayload}.${signature",{"_index":3289,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodedpayload",{"_index":3284,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodeuricomponent",{"_index":1764,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["encodeuricomponent(key)}=${encodeuricomponent(value",{"_index":2456,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["encodeuricomponent(v",{"_index":2809,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["encodeuricomponent(value",{"_index":2821,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["encryption.json",{"_index":1513,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption/encryption.service",{"_index":1242,"title":{},"body":{"modules/CryptoModule.html":{}}}],["encryptionservice",{"_index":1239,"title":{"injectables/EncryptionService.html":{}},"body":{"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"overview.html":{}}}],["end",{"_index":1380,"title":{},"body":{"injectables/CryptoService.html":{},"license.html":{}}}],["endpoint",{"_index":514,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["endpoints",{"_index":630,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/HealthController.html":{},"controllers/WellKnownController.html":{}}}],["ensure",{"_index":163,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["entities",{"_index":1860,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{},"license.html":{},"overview.html":{}}}],["entities/issuance",{"_index":1171,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["entities/key.entity",{"_index":2079,"title":{},"body":{"modules/KeyModule.html":{}}}],["entities/presentation",{"_index":2533,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["entities/session.entity",{"_index":2868,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["entities/status",{"_index":3102,"title":{},"body":{"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["entity",{"_index":1859,"title":{"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{}},"body":{"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["entries",{"_index":3111,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["entries.length",{"_index":3161,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["entry",{"_index":3144,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["enum",{"_index":326,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/PresentationRequest.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["enumerations",{"_index":3481,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":3398,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["env.example",{"_index":3566,"title":{},"body":{"index.html":{}}}],["environment",{"_index":2130,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/RegistrarModule.html":{},"injectables/SessionLoggerService.html":{}}}],["err",{"_index":1843,"title":{},"body":{"classes/Interceptors.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{}}}],["err.message",{"_index":2497,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["errinterceptor",{"_index":1842,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"miscellaneous/typealiases.html":{}}}],["error",{"_index":250,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{}}}],["error('credential",{"_index":836,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["error('error",{"_index":239,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["error('invalid",{"_index":2273,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/VaultKeyService.html":{}}}],["error('issuer",{"_index":2771,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error('key",{"_index":1645,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/ResolverService.html":{}}}],["error('no",{"_index":2639,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["error('signer",{"_index":1403,"title":{},"body":{"injectables/CryptoService.html":{}}}],["error('stack",{"_index":3151,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["error('subject",{"_index":2778,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error(`invalid",{"_index":1680,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["error(`unsupported",{"_index":1438,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["error.message",{"_index":1681,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.name",{"_index":2947,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.stack",{"_index":2950,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error_description",{"_index":826,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["errors",{"_index":2962,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["es",{"_index":1517,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["es256",{"_index":766,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"miscellaneous/typealiases.html":{}}}],["es256.getverifier(publickey",{"_index":2633,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["es256k",{"_index":2418,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["es384",{"_index":2414,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["eslint",{"_index":173,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["eslint/no",{"_index":178,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["etc",{"_index":1024,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"index.html":{}}}],["eudi",{"_index":891,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"index.html":{}}}],["eudiplo",{"_index":351,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"index.html":{}}}],["even",{"_index":3539,"title":{},"body":{"index.html":{},"license.html":{}}}],["event",{"_index":881,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/NotificationRequestDto.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"license.html":{}}}],["eventemitter",{"_index":855,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{}}}],["eventemitter2",{"_index":850,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{}}}],["eventemittermodule",{"_index":411,"title":{},"body":{"modules/AppModule.html":{}}}],["eventemittermodule.forroot",{"_index":486,"title":{},"body":{"modules/AppModule.html":{}}}],["events",{"_index":68,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["example",{"_index":316,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["examples",{"_index":507,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["except",{"_index":3733,"title":{},"body":{"license.html":{}}}],["exchange",{"_index":654,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["exclude",{"_index":1537,"title":{},"body":{"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{}}}],["excluding",{"_index":3712,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":3724,"title":{},"body":{"license.html":{}}}],["execsync",{"_index":1295,"title":{},"body":{"injectables/CryptoService.html":{}}}],["execsync(cmd",{"_index":1329,"title":{},"body":{"injectables/CryptoService.html":{}}}],["executed",{"_index":3805,"title":{},"body":{"license.html":{}}}],["execution",{"_index":2896,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["executioncontext",{"_index":1995,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TokenPayload.html":{}}}],["exercise",{"_index":3837,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":3658,"title":{},"body":{"license.html":{}}}],["exist",{"_index":288,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"index.html":{}}}],["existing",{"_index":201,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"index.html":{}}}],["exists",{"_index":204,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["exists(id",{"_index":1720,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["existssync",{"_index":54,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["existssync(certout",{"_index":1320,"title":{},"body":{"injectables/CryptoService.html":{}}}],["existssync(dummykey",{"_index":1335,"title":{},"body":{"injectables/CryptoService.html":{}}}],["existssync(file",{"_index":1370,"title":{},"body":{"injectables/CryptoService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["existssync(filepath",{"_index":287,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["existssync(folder",{"_index":887,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["existssync(join(folder",{"_index":1372,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["existssync(this.folder",{"_index":1299,"title":{},"body":{"injectables/CryptoService.html":{}}}],["existssync(this.privateenncryptionpath",{"_index":1515,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exp",{"_index":2425,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["expandvariables",{"_index":434,"title":{},"body":{"modules/AppModule.html":{}}}],["expected",{"_index":2176,"title":{},"body":{"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["expectedcode",{"_index":799,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["expectednonce",{"_index":2296,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["expextedapikey",{"_index":2674,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["expiration",{"_index":2500,"title":{},"body":{"classes/ParResponseDto.html":{}}}],["expirationdate",{"_index":169,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["expirationdate.gettime",{"_index":181,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["expire",{"_index":2059,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expires_in",{"_index":548,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{},"classes/TokenResponse.html":{}}}],["expiresin",{"_index":579,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["expiresinseconds",{"_index":812,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["explicitly",{"_index":3797,"title":{},"body":{"license.html":{}}}],["explode",{"_index":1752,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["exploded",{"_index":937,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["export",{"_index":79,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["exportable",{"_index":3262,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["exportjwk",{"_index":1509,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["exportjwk(cryptokey",{"_index":3272,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["exportjwk(secret.privatekey",{"_index":1521,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exportjwk(secret.publickey",{"_index":1522,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exportpkcs8",{"_index":1612,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["exportpkcs8((await",{"_index":1637,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["exports",{"_index":365,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["exportspki",{"_index":1613,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["exportspki((await",{"_index":1639,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["expose",{"_index":1853,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["express",{"_index":658,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"dependencies.html":{},"license.html":{}}}],["extends",{"_index":984,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationDuringIssuance.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{}}}],["extends#integrity",{"_index":2517,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["extension",{"_index":1357,"title":{},"body":{"injectables/CryptoService.html":{}}}],["external",{"_index":552,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"index.html":{}}}],["extfile",{"_index":1365,"title":{},"body":{"injectables/CryptoService.html":{}}}],["extra",{"_index":1574,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["extract",{"_index":557,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Fields.html":{},"injectables/JwtStrategy.html":{},"interfaces/Params.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{}}}],["extractable",{"_index":1519,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{}}}],["extractjwt",{"_index":2029,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":2050,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extraprefixes",{"_index":1545,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["extraprefixes.find(([prefix",{"_index":1575,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["extraprefixesmap",{"_index":1540,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":546,"title":{},"body":{"controllers/AuthController.html":{}}}],["f75298f",{"_index":3390,"title":{},"body":{"changelog.html":{}}}],["f7e7505",{"_index":3409,"title":{},"body":{"changelog.html":{}}}],["face",{"_index":3509,"title":{},"body":{"index.html":{}}}],["failed",{"_index":2328,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/SessionLoggerService.html":{}}}],["fails",{"_index":2651,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["failure",{"_index":3857,"title":{},"body":{"license.html":{}}}],["fall",{"_index":569,"title":{},"body":{"controllers/AuthController.html":{}}}],["false",{"_index":137,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{}}}],["fatal",{"_index":429,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["features",{"_index":3393,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["fee",{"_index":3864,"title":{},"body":{"license.html":{}}}],["fetch",{"_index":989,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["field",{"_index":1536,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{},"miscellaneous/typealiases.html":{}}}],["field.map",{"_index":1568,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["fields",{"_index":258,"title":{"interfaces/Fields.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Fields.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["fields[index",{"_index":1565,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["fieldsconfig",{"_index":1539,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{},"miscellaneous/typealiases.html":{}}}],["fieldsconfig[number",{"_index":1562,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["fifty",{"_index":3651,"title":{},"body":{"license.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"license.html":{}}}],["file.bits",{"_index":3130,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["file.elements[id",{"_index":3156,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["file.jwt",{"_index":3136,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["file.stack.pop",{"_index":3150,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["filed",{"_index":3759,"title":{},"body":{"license.html":{}}}],["filename",{"_index":3105,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["filepath",{"_index":284,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["files",{"_index":3664,"title":{},"body":{"license.html":{}}}],["filesystem",{"_index":2072,"title":{},"body":{"modules/KeyModule.html":{}}}],["filesystemkeyservice",{"_index":1583,"title":{"injectables/FileSystemKeyService.html":{}},"body":{"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{}}}],["fill(0",{"_index":3121,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["final",{"_index":913,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["finally",{"_index":2767,"title":{},"body":{"injectables/ResolverService.html":{}}}],["find",{"_index":878,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["findclientbyid",{"_index":1052,"title":{},"body":{"injectables/ClientService.html":{}}}],["findclientbyid(clientid",{"_index":879,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["finding",{"_index":224,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["findonebyorfail",{"_index":2625,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["findoptionswhere",{"_index":3045,"title":{},"body":{"injectables/SessionService.html":{}}}],["first",{"_index":2765,"title":{},"body":{"injectables/ResolverService.html":{}}}],["firstvaluefrom",{"_index":2380,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["firstvaluefrom(this.httpservice.get(uri)).then",{"_index":2637,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fitness",{"_index":3830,"title":{},"body":{"license.html":{}}}],["fixes",{"_index":3361,"title":{},"body":{"changelog.html":{}}}],["flow",{"_index":462,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["flow_complete",{"_index":3008,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_error",{"_index":3009,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_start",{"_index":3007,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flows",{"_index":3534,"title":{},"body":{"index.html":{}}}],["flowtype",{"_index":2284,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["fn",{"_index":1725,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["focus",{"_index":3529,"title":{},"body":{"index.html":{}}}],["folder",{"_index":420,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["following",{"_index":3764,"title":{},"body":{"license.html":{}}}],["foo",{"_index":2675,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["force_pubkey",{"_index":1361,"title":{},"body":{"injectables/CryptoService.html":{}}}],["foreach((file",{"_index":1369,"title":{},"body":{"injectables/CryptoService.html":{}}}],["form",{"_index":938,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/VaultKeyService.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["format",{"_index":24,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/EC_Public.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["formdata",{"_index":1020,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["formdatabodyserializer",{"_index":2695,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["forroot",{"_index":2068,"title":{},"body":{"modules/KeyModule.html":{}}}],["forwardref",{"_index":2561,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["found",{"_index":782,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["free",{"_index":3143,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"license.html":{}}}],["friendly",{"_index":3555,"title":{},"body":{"index.html":{}}}],["fs",{"_index":852,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["full",{"_index":3584,"title":{},"body":{"index.html":{}}}],["function",{"_index":141,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/TDataShape.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":3483,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":2850,"title":{},"body":{"entities/Session.html":{}}}],["g",{"_index":1738,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{}}}],["general",{"_index":3407,"title":{},"body":{"changelog.html":{}}}],["generate",{"_index":1336,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/PresentationManagementController.html":{}}}],["generated",{"_index":46,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["generated/client.gen",{"_index":39,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["generatekeypair",{"_index":1219,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/EncryptionService.html":{}}}],["generatekeypair('ecdh",{"_index":1516,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generaterandom",{"_index":1395,"title":{},"body":{"injectables/CryptoService.html":{}}}],["generates",{"_index":1223,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{}}}],["generatesalt",{"_index":1155,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["generatetoken",{"_index":1655,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generatetoken(payload",{"_index":2011,"title":{},"body":{"injectables/JwtService.html":{}}}],["generatetokenoptions",{"_index":1651,"title":{"interfaces/GenerateTokenOptions.html":{}},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generation",{"_index":1657,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"changelog.html":{}}}],["generic",{"_index":1216,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/KeyService.html":{},"injectables/SessionLoggerService.html":{}}}],["genpkey",{"_index":1339,"title":{},"body":{"injectables/CryptoService.html":{}}}],["get(':id",{"_index":2861,"title":{},"body":{"controllers/SessionController.html":{}}}],["get('jwks.json",{"_index":3354,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('oauth",{"_index":3336,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('openid",{"_index":3349,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('request/:requestid/:session",{"_index":2346,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["get('request/:requestid/:session')@sessionlogger('session",{"_index":2336,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["get('schema/:id",{"_index":1102,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["get('session",{"_index":2209,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["get('status",{"_index":3083,"title":{},"body":{"controllers/StatusListController.html":{}}}],["get('vct/:id",{"_index":1107,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["get()@healthcheck",{"_index":1697,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(state",{"_index":3041,"title":{},"body":{"injectables/SessionService.html":{}}}],["getaccesscertificateid",{"_index":2728,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["getaccesscertificateid(config",{"_index":215,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["getalg",{"_index":1424,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["getall",{"_index":3029,"title":{},"body":{"injectables/SessionService.html":{}}}],["getallsessions",{"_index":2856,"title":{},"body":{"controllers/SessionController.html":{}}}],["getauthorizationserver",{"_index":709,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["getauthorizationserver(tenantid",{"_index":723,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["getauthtoken",{"_index":495,"title":{},"body":{"interfaces/Auth.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getauthtoken(auth",{"_index":1795,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getby",{"_index":779,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["getby(where",{"_index":3044,"title":{},"body":{"injectables/SessionService.html":{}}}],["getcallbackcontext",{"_index":1245,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getcallbackcontext(tenantid",{"_index":1255,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getcertchain",{"_index":1246,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getcertchain(type",{"_index":1257,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getclients",{"_index":866,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["getconfig",{"_index":906,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/CredentialsService.html":{},"injectables/StatusListService.html":{}}}],["getconfig(tenantid",{"_index":1135,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["getconfigbyid",{"_index":1120,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getconfigbyid(credentialid",{"_index":1137,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getconfiguration",{"_index":2106,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getcredential",{"_index":1121,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{}}}],["getcredential(credentialconfigurationid",{"_index":1140,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredential(req",{"_index":2221,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["getcredentialconfiguration",{"_index":1122,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredentialconfiguration(tenantid",{"_index":1144,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcrypto",{"_index":1425,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["getcrypto(alg",{"_index":1432,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["getencryptionpublickey",{"_index":1496,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getexternaloidcconfig",{"_index":2017,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getexternaloidcconfig(configservice",{"_index":2020,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getheadersfromrequest",{"_index":743,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"miscellaneous/functions.html":{}}}],["getheadersfromrequest(req",{"_index":789,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"miscellaneous/functions.html":{}}}],["gethello",{"_index":347,"title":{},"body":{"controllers/AppController.html":{}}}],["getintegratedoauth2config",{"_index":2018,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getintegratedoauth2config(configservice",{"_index":2024,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getinterceptorindex",{"_index":1713,"title":{},"body":{"classes/Interceptors.html":{}}}],["getinterceptorindex(id",{"_index":1722,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getjwk",{"_index":3219,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["getjwk(key",{"_index":3228,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["getjwks",{"_index":1247,"title":{},"body":{"injectables/CryptoService.html":{},"controllers/WellKnownController.html":{}}}],["getjwks(tenantid",{"_index":1262,"title":{},"body":{"injectables/CryptoService.html":{},"controllers/WellKnownController.html":{}}}],["getkeys",{"_index":1588,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["getkeys(tenantid",{"_index":1592,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["getkid",{"_index":1589,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getkid(tenantid",{"_index":1595,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getlist",{"_index":3081,"title":{},"body":{"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["getlist(@param('tenantid",{"_index":3090,"title":{},"body":{"controllers/StatusListController.html":{}}}],["getlist(tenantid",{"_index":3082,"title":{},"body":{"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["getlogformat",{"_index":2107,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getloglevel",{"_index":2108,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getoauth2token",{"_index":503,"title":{},"body":{"controllers/AuthController.html":{}}}],["getoauth2token(body",{"_index":504,"title":{},"body":{"controllers/AuthController.html":{}}}],["getoffer",{"_index":1895,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getoffer(res",{"_index":1902,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getorthrow('public_url",{"_index":233,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["getparseas",{"_index":1779,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getpresentationconfig",{"_index":2573,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfig(id",{"_index":2589,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs",{"_index":2574,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs(tenantid",{"_index":2591,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpublickey",{"_index":1590,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getpublickey(type",{"_index":1597,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getrequestwithsession",{"_index":2333,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getrequestwithsession(tenantid",{"_index":2335,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getresponse",{"_index":2334,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["getresponse(body",{"_index":2339,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["gets",{"_index":3233,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["getschema",{"_index":1123,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getschema(id",{"_index":1146,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getsession",{"_index":2857,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(@param('id",{"_index":2875,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(id",{"_index":2860,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsigner",{"_index":1220,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getsigner(privatekeyjwk",{"_index":1225,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getsignjwtcallback",{"_index":1248,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getsignjwtcallback(tenantid",{"_index":1264,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getting",{"_index":1089,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["geturl",{"_index":1805,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getvct",{"_index":1124,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getvct(credentialid",{"_index":1148,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getverifier",{"_index":1221,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getverifier(publickeyjwk",{"_index":1230,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["ghcr.io/cre8/eudiplo:latest",{"_index":3578,"title":{},"body":{"index.html":{}}}],["git",{"_index":3562,"title":{},"body":{"index.html":{}}}],["give",{"_index":3765,"title":{},"body":{"license.html":{}}}],["given",{"_index":2338,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/VaultKeyService.html":{}}}],["global",{"_index":2071,"title":{},"body":{"modules/KeyModule.html":{}}}],["globalthis.fetch",{"_index":994,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["globalthis.headers",{"_index":1261,"title":{},"body":{"injectables/CryptoService.html":{},"miscellaneous/functions.html":{}}}],["goodwill",{"_index":3854,"title":{},"body":{"license.html":{}}}],["governing",{"_index":3901,"title":{},"body":{"license.html":{}}}],["grade",{"_index":3542,"title":{},"body":{"index.html":{}}}],["grant",{"_index":555,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"license.html":{}}}],["grant_type",{"_index":540,"title":{},"body":{"controllers/AuthController.html":{}}}],["granted",{"_index":3660,"title":{},"body":{"license.html":{}}}],["granting",{"_index":3633,"title":{},"body":{"license.html":{}}}],["grants",{"_index":2264,"title":{},"body":{"injectables/Oid4vciService.html":{},"license.html":{}}}],["granttype",{"_index":749,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["graph",{"_index":3906,"title":{},"body":{"modules.html":{}}}],["grossly",{"_index":3843,"title":{},"body":{"license.html":{}}}],["guide",{"_index":3587,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":3611,"title":{},"body":{"index.html":{}}}],["h",{"_index":3581,"title":{},"body":{"index.html":{}}}],["handle",{"_index":642,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["handled",{"_index":1678,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{}}}],["handlenotification",{"_index":2215,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["handlenotification(req",{"_index":2223,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["handler",{"_index":2898,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["handlerequest",{"_index":2687,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"miscellaneous/functions.html":{}}}],["handlerequest(request",{"_index":2663,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"miscellaneous/functions.html":{}}}],["handles",{"_index":631,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["handlesigningkeyerror",{"_index":2045,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["handling",{"_index":101,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"changelog.html":{}}}],["harmless",{"_index":3878,"title":{},"body":{"license.html":{}}}],["hascerts",{"_index":1249,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hascerts(tenantid",{"_index":1267,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hash",{"_index":1391,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hashalg",{"_index":1194,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["hashalgorithm",{"_index":1286,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hashalgorithm.sha256",{"_index":1411,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hashcallback",{"_index":1408,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hasher",{"_index":1193,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["hasresponsedata",{"_index":2495,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["haswebhook",{"_index":2463,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["head",{"_index":907,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["header",{"_index":314,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["header('content",{"_index":3089,"title":{},"body":{"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["header.entries",{"_index":1830,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["header.kid",{"_index":2791,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c",{"_index":2772,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c.map",{"_index":2774,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header['jwk",{"_index":2781,"title":{},"body":{"injectables/ResolverService.html":{}}}],["headername",{"_index":308,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["headers",{"_index":470,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["headers.append(key",{"_index":1421,"title":{},"body":{"injectables/CryptoService.html":{}}}],["headers.authorization",{"_index":559,"title":{},"body":{"controllers/AuthController.html":{}}}],["headers.set(key",{"_index":1422,"title":{},"body":{"injectables/CryptoService.html":{}}}],["headers[session.webhook.auth.config.headername",{"_index":2476,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["headers_",{"_index":1542,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["health",{"_index":1691,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":1707,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":408,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1699,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1694,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1689,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["healthcontrollercheckdata",{"_index":3949,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["healthcontrollercheckerror",{"_index":3950,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["healthcontrollercheckerrors",{"_index":3951,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["healthcontrollercheckresponse",{"_index":3952,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["healthcontrollercheckresponses",{"_index":3953,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["healthmodule",{"_index":371,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["helper",{"_index":1324,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hereby",{"_index":3720,"title":{},"body":{"license.html":{}}}],["herein",{"_index":3801,"title":{},"body":{"license.html":{}}}],["hey",{"_index":1004,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["hh:mm:ss",{"_index":452,"title":{},"body":{"modules/AppModule.html":{}}}],["hold",{"_index":3877,"title":{},"body":{"license.html":{}}}],["host",{"_index":231,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["host.replace('https",{"_index":2404,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${tenantid",{"_index":2389,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${tenantid}/credentials/vct/${vc.id",{"_index":1211,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["host}/${tenantid}/oid4vp/response",{"_index":2406,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["hot",{"_index":2128,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["hour",{"_index":3024,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["hours",{"_index":583,"title":{},"body":{"controllers/AuthController.html":{},"modules/SessionModule.html":{}}}],["hs256",{"_index":1665,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["http",{"_index":493,"title":{},"body":{"interfaces/Auth.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{},"index.html":{}}}],["http://localhost:3000/auth/oauth2/token",{"_index":3580,"title":{},"body":{"index.html":{}}}],["http://www.apache.org/licenses",{"_index":3619,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/license",{"_index":3899,"title":{},"body":{"license.html":{}}}],["httpmethod",{"_index":739,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["httpmodule",{"_index":2075,"title":{},"body":{"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"modules/VerifierModule.html":{}}}],["https://${req.host}${req.url",{"_index":2276,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["https://cre8.github.io/eudiplo/latest",{"_index":356,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["https://cre8.github.io/eudiplo/latest/api",{"_index":3583,"title":{},"body":{"index.html":{}}}],["https://cre8.github.io/eudiplo/main",{"_index":3595,"title":{},"body":{"index.html":{}}}],["https://developer.mozilla.org/docs/web/api/fetch#body",{"_index":1027,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["https://developer.mozilla.org/docs/web/api/fetch#method",{"_index":935,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["https://developer.mozilla.org/docs/web/api/headers/headers#init",{"_index":931,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["https://github.com/cre8/eudiplo.git",{"_index":3563,"title":{},"body":{"index.html":{}}}],["https://json",{"_index":2793,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["https://swagger.io/docs/specification/serialization/#query",{"_index":950,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["https://www.npmjs.com/package/@hey",{"_index":1002,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["httpservice",{"_index":2076,"title":{},"body":{"modules/KeyModule.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["i.e",{"_index":1836,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["iat",{"_index":1201,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["id",{"_index":15,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/VaultKeyService.html":{}}}],["identification",{"_index":3893,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":26,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"interfaces/IssuerMetadata.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{}}}],["identifying",{"_index":3888,"title":{},"body":{"license.html":{}}}],["ids",{"_index":838,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["ids[0",{"_index":841,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["idx",{"_index":3149,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["ignore",{"_index":453,"title":{},"body":{"modules/AppModule.html":{}}}],["ignoreexpiration",{"_index":2057,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ignoring",{"_index":856,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["ii",{"_index":3649,"title":{},"body":{"license.html":{}}}],["iii",{"_index":3655,"title":{},"body":{"license.html":{}}}],["image",{"_index":1790,"title":{},"body":{"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png",{"_index":1934,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png')@apibody({type",{"_index":1908,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["image/png')@useguards(jwtauthguard)@apisecurity('oauth2')@apibody({type",{"_index":2527,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["imeplement",{"_index":1217,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implement",{"_index":858,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["implementation",{"_index":990,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["implementation.ts",{"_index":1215,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/typealiases.html":{}}}],["implementation.ts:19",{"_index":1222,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:24",{"_index":1227,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:29",{"_index":1231,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implements",{"_index":81,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/FileSystemKeyService.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["implied",{"_index":3826,"title":{},"body":{"license.html":{}}}],["import",{"_index":29,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"license.html":{}}}],["importjwk",{"_index":1289,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/PresentationsService.html":{}}}],["importjwk(payload.cnf.jwk",{"_index":2640,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["importjwk(privatekey",{"_index":1638,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["importjwk(publicjwk",{"_index":1385,"title":{},"body":{"injectables/CryptoService.html":{}}}],["importjwk(publickey",{"_index":1640,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["importpkcs8",{"_index":1614,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["imports",{"_index":382,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}}}],["importspki",{"_index":1615,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["importspki(key",{"_index":3270,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["improvements",{"_index":3408,"title":{},"body":{"changelog.html":{}}}],["improving",{"_index":3711,"title":{},"body":{"license.html":{}}}],["inability",{"_index":3852,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":3849,"title":{},"body":{"license.html":{}}}],["include",{"_index":3689,"title":{},"body":{"license.html":{}}}],["included",{"_index":3676,"title":{},"body":{"license.html":{}}}],["includes",{"_index":2368,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{},"license.html":{}}}],["including",{"_index":73,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["inclusion",{"_index":3699,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":3718,"title":{},"body":{"license.html":{}}}],["incurred",{"_index":3879,"title":{},"body":{"license.html":{}}}],["indemnify",{"_index":3875,"title":{},"body":{"license.html":{}}}],["indemnity",{"_index":3866,"title":{},"body":{"license.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["indexable",{"_index":2881,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["indexes",{"_index":3112,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["indicated",{"_index":3674,"title":{},"body":{"license.html":{}}}],["indicates",{"_index":28,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{}}}],["indicating",{"_index":2552,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["indirect",{"_index":3645,"title":{},"body":{"license.html":{}}}],["individual",{"_index":3657,"title":{},"body":{"license.html":{}}}],["infer",{"_index":1010,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["infers",{"_index":1778,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["information",{"_index":355,"title":{},"body":{"controllers/AppController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/IssuerManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["informational",{"_index":3788,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":3742,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":3756,"title":{},"body":{"license.html":{}}}],["inherit",{"_index":1331,"title":{},"body":{"injectables/CryptoService.html":{}}}],["inherited",{"_index":3230,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["init",{"_index":1497,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["init(tenant",{"_index":1601,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["init(tenantid",{"_index":1502,"title":{},"body":{"injectables/EncryptionService.html":{},"classes/KeyService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["initial",{"_index":1041,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["initialconfig",{"_index":291,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["initialization",{"_index":1038,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["initialize",{"_index":1042,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"interfaces/RequestOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["initialized",{"_index":150,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["initializes",{"_index":103,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["inject",{"_index":436,"title":{},"body":{"modules/AppModule.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["inject('keyservice",{"_index":1279,"title":{},"body":{"injectables/CryptoService.html":{}}}],["injectable",{"_index":30,"title":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["injectables",{"_index":706,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"overview.html":{}}}],["injectrepository",{"_index":1169,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["injectrepository(issuanceconfig",{"_index":1174,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["injectrepository(presentationconfig",{"_index":2613,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["injectrepository(session",{"_index":3060,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectrepository(statusmapping",{"_index":3107,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["input",{"_index":3276,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["install",{"_index":1001,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"changelog.html":{}}}],["instance",{"_index":95,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{}}}],["instance.decode(`${data}.${signature",{"_index":2629,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["instanceof",{"_index":1829,"title":{},"body":{"classes/Interceptors.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["instead",{"_index":1005,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["institute",{"_index":3746,"title":{},"body":{"license.html":{}}}],["institutions",{"_index":3606,"title":{},"body":{"index.html":{}}}],["insufficient_authorization",{"_index":825,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["int",{"_index":3191,"title":{},"body":{"entities/StatusMapping.html":{}}}],["integrated",{"_index":1654,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["integrates",{"_index":3526,"title":{},"body":{"index.html":{}}}],["integration",{"_index":853,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"index.html":{}}}],["intended",{"_index":1483,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["intendeduse",{"_index":3954,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["intentionally",{"_index":3697,"title":{},"body":{"license.html":{}}}],["interacting",{"_index":83,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["interaction",{"_index":72,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["intercept",{"_index":2888,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercept(context",{"_index":2892,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interceptor",{"_index":1716,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["interceptors",{"_index":1036,"title":{"classes/Interceptors.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["intercepts",{"_index":2895,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interested",{"_index":3608,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/Fields.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/StatusListFile.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/Fields.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"interfaces/IssuerMetadata.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/Fields.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/StatusListFile.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"license.html":{},"overview.html":{}}}],["internally",{"_index":1855,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["internals",{"_index":1854,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["interval",{"_index":3064,"title":{},"body":{"injectables/SessionService.html":{}}}],["intervaltime",{"_index":3062,"title":{},"body":{"injectables/SessionService.html":{}}}],["invalid",{"_index":512,"title":{},"body":{"controllers/AuthController.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{}}}],["irrevocable",{"_index":3727,"title":{},"body":{"license.html":{}}}],["is_public_key",{"_index":2000,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["isabsolute",{"_index":397,"title":{},"body":{"modules/AppModule.html":{}}}],["isabsolute(folder",{"_index":483,"title":{},"body":{"modules/AppModule.html":{}}}],["isdebugmodeenabled",{"_index":2109,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isenabled",{"_index":139,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{}}}],["isenum",{"_index":2159,"title":{},"body":{"classes/NotificationRequestDto.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["isenum(['credential_issued",{"_index":2157,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["isenum(responsetype",{"_index":2183,"title":{},"body":{"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["isglobal",{"_index":433,"title":{},"body":{"modules/AppModule.html":{}}}],["ishttploggerenabled",{"_index":2110,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isin",{"_index":319,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isin(['apikey",{"_index":333,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isin([0",{"_index":3202,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnumber",{"_index":3201,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnumber()@isin(['0",{"_index":3199,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["iso",{"_index":964,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["isobject",{"_index":320,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isobject()@column('json",{"_index":2507,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["isobject()@isoptional",{"_index":2179,"title":{},"body":{"classes/OfferRequest.html":{},"classes/PresentationRequest.html":{}}}],["isoptional",{"_index":321,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthorizeQueries.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isoptional()@isstring",{"_index":694,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["ispublic",{"_index":2002,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["iss",{"_index":1200,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["issessionloggerenabled",{"_index":2111,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isstring",{"_index":311,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"entities/IssuanceConfig.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isstring()@isoptional",{"_index":3196,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["issuance",{"_index":829,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/SessionLoggerService.html":{}}}],["issuanceconfig",{"_index":1151,"title":{"entities/IssuanceConfig.html":{}},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{}}}],["issuanceconfigrepo",{"_index":1128,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["issuance—and",{"_index":3540,"title":{},"body":{"index.html":{}}}],["issue",{"_index":2191,"title":{},"body":{"controllers/Oid4vciController.html":{},"license.html":{}}}],["issued",{"_index":1090,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["issuer",{"_index":757,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"index.html":{}}}],["issuer.png",{"_index":897,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["issuer/authorize/authorize.service",{"_index":3344,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["issuer/authorize/dto/authorize",{"_index":2851,"title":{},"body":{"entities/Session.html":{}}}],["issuer/credentials/credentials.service",{"_index":2237,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuer/credentials/entities/issuance",{"_index":1920,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["issuer/issuer.module",{"_index":390,"title":{},"body":{"modules/AppModule.html":{}}}],["issuer/oid4vci/dto/offer",{"_index":2382,"title":{},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{}}}],["issuer/oid4vci/oid4vci.service",{"_index":1922,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/WellKnownController.html":{}}}],["issuer/status",{"_index":2869,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["issuer_cert.pem",{"_index":1315,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuer_cert.srl",{"_index":1368,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuer_key.pem",{"_index":1313,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuer_state",{"_index":689,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["issuer_validation_schema",{"_index":389,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{}}}],["issuercert",{"_index":1314,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuerkey",{"_index":1312,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuermanagementcontroller",{"_index":1889,"title":{"controllers/IssuerManagementController.html":{}},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{}}}],["issuermetadata",{"_index":1961,"title":{"interfaces/IssuerMetadata.html":{}},"body":{"interfaces/IssuerMetadata.html":{},"injectables/Oid4vciService.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{}}}],["issuermetadata(@param('tenantid",{"_index":3350,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["issuermetadata(tenantid",{"_index":2226,"title":{},"body":{"injectables/Oid4vciService.html":{},"controllers/WellKnownController.html":{}}}],["issuermetadata.authorizationservers",{"_index":2275,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermetadata.credentialissuer.credential_issuer",{"_index":2277,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermetadataresult",{"_index":2235,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermodule",{"_index":372,"title":{"modules/IssuerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules.html":{},"overview.html":{}}}],["issuing",{"_index":3012,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["isusingexternaloidc",{"_index":1687,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["it's",{"_index":960,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/Oid4vpService.html":{}}}],["item.name",{"_index":209,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["iterator",{"_index":1828,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["january",{"_index":3617,"title":{},"body":{"license.html":{}}}],["job",{"_index":3052,"title":{},"body":{"injectables/SessionService.html":{}}}],["jobs",{"_index":3439,"title":{},"body":{"changelog.html":{}}}],["joi",{"_index":384,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/RegistrarModule.html":{},"modules/SessionModule.html":{},"dependencies.html":{}}}],["joi.exist",{"_index":2724,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["joi.number().default(24",{"_index":3026,"title":{},"body":{"modules/SessionModule.html":{}}}],["joi.number().default(60",{"_index":3023,"title":{},"body":{"modules/SessionModule.html":{}}}],["joi.number().when('db_type",{"_index":1452,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["joi.object",{"_index":419,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.optional",{"_index":1449,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["joi.required",{"_index":1450,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/RegistrarModule.html":{}}}],["joi.string",{"_index":425,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/RegistrarModule.html":{}}}],["joi.string().default('./tmp",{"_index":421,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('24h",{"_index":605,"title":{},"body":{"modules/AuthModule.html":{}}}],["joi.string().default('eudiplo",{"_index":423,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('key",{"_index":2089,"title":{},"body":{"modules/KeyModule.html":{}}}],["joi.string().optional",{"_index":596,"title":{},"body":{"modules/AuthModule.html":{}}}],["joi.string().optional().default('eudiplo",{"_index":603,"title":{},"body":{"modules/AuthModule.html":{}}}],["joi.string().required",{"_index":599,"title":{},"body":{"modules/AuthModule.html":{}}}],["joi.string().uri().when('km_type",{"_index":2085,"title":{},"body":{"modules/KeyModule.html":{}}}],["joi.string().valid('file",{"_index":2081,"title":{},"body":{"modules/KeyModule.html":{}}}],["joi.string().valid('sqlite",{"_index":1444,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["joi.string().when('db_type",{"_index":1447,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["joi.string().when('km_type",{"_index":2087,"title":{},"body":{"modules/KeyModule.html":{}}}],["joi.string().when('registrar_url",{"_index":2723,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["joi.when('oidc",{"_index":598,"title":{},"body":{"modules/AuthModule.html":{}}}],["join",{"_index":61,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["join(__dirname",{"_index":485,"title":{},"body":{"modules/AppModule.html":{}}}],["join(folder",{"_index":484,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{}}}],["join(separator",{"_index":2815,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["join(separatorarraynoexplode(style",{"_index":2810,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["join(this.configservice.getorthrow('folder",{"_index":1298,"title":{},"body":{"injectables/CryptoService.html":{}}}],["join(this.folder",{"_index":1301,"title":{},"body":{"injectables/CryptoService.html":{}}}],["joinedvalues",{"_index":2807,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["joining",{"_index":3507,"title":{},"body":{"index.html":{}}}],["jose",{"_index":1291,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{}}}],["joseheaderparameters",{"_index":2100,"title":{},"body":{"classes/KeyService.html":{}}}],["josepublickey",{"_index":1404,"title":{},"body":{"injectables/CryptoService.html":{}}}],["json",{"_index":1021,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/EC_Public.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"interfaces/RequestOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"controllers/WellKnownController.html":{},"index.html":{}}}],["json.parse",{"_index":295,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["json.parse(readfilesync(file",{"_index":3139,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["json.parse(readfilesync(this.privateenncryptionpath",{"_index":1523,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["json.stringify",{"_index":926,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["json.stringify(await",{"_index":1520,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["json.stringify(body",{"_index":2699,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["json.stringify(config",{"_index":301,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["json.stringify(content",{"_index":3142,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["json.stringify(credentialissuer).replace",{"_index":2252,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["json.stringify(data",{"_index":2940,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["json.stringify(displayinfo",{"_index":899,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["json.stringify(initialconfig",{"_index":293,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["json.stringify(value",{"_index":1841,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["json.stringify(values.dcql_query).replace",{"_index":2392,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["json.stringify(values.registrationcert).replace",{"_index":2395,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jsonbodyserializer",{"_index":1730,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["jsonwebkey",{"_index":1226,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"entities/KeyEntity.html":{}}}],["jwk",{"_index":740,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["jwk.kid",{"_index":3273,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["jwk_ec_public",{"_index":1477,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["jwks",{"_index":1488,"title":{},"body":{"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["jwks_uri",{"_index":762,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["jwksrequestsperminute",{"_index":2041,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwksresponsedto",{"_index":1489,"title":{"classes/JwksResponseDto.html":{}},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"controllers/WellKnownController.html":{}}}],["jwksuri",{"_index":2042,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwkthumbprint",{"_index":1410,"title":{},"body":{"injectables/CryptoService.html":{}}}],["jwt",{"_index":803,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.service",{"_index":524,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["jwt.setaudience(options.audience",{"_index":1672,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.sign(secretkey",{"_index":1673,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.strategy",{"_index":593,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt/crypto",{"_index":1157,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService-1.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["jwt/jwt",{"_index":3100,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["jwt/sd",{"_index":1160,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["jwt/types",{"_index":1619,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{}}}],["jwt_alg_values",{"_index":2417,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jwt_expires_in",{"_index":604,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_issuer",{"_index":602,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwt_secret",{"_index":601,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_secret=$(openssl",{"_index":3568,"title":{},"body":{"index.html":{}}}],["jwt_secret=your",{"_index":3574,"title":{},"body":{"index.html":{}}}],["jwtauthguard",{"_index":588,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"overview.html":{}}}],["jwtdecrypt",{"_index":1510,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtdecrypt(response",{"_index":1529,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtfromrequest",{"_index":2023,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtheaderparameters",{"_index":1608,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["jwtpayload",{"_index":1607,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["jwtservice",{"_index":523,"title":{"injectables/JwtService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"overview.html":{}}}],["jwtstrategy",{"_index":589,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"overview.html":{}}}],["jwtstrategy.getexternaloidcconfig(configservice",{"_index":2036,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy.getintegratedoauth2config(configservice",{"_index":2037,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtverify",{"_index":1290,"title":{},"body":{"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/PresentationsService.html":{}}}],["jwtverify(`${data}.${signature",{"_index":2641,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["jwtverify(compact",{"_index":1386,"title":{},"body":{"injectables/CryptoService.html":{}}}],["jwtverify(token",{"_index":1679,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwtwithstatuslistpayload",{"_index":3097,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["kb",{"_index":2416,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["kbverifier",{"_index":2569,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["key",{"_index":22,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/AuthResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"index.html":{}}}],["key).then",{"_index":2642,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["key.kid",{"_index":2790,"title":{},"body":{"injectables/ResolverService.html":{}}}],["key.pem",{"_index":1307,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["key.service",{"_index":1618,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{}}}],["key.service.ts",{"_index":1585,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["key.service.ts:101",{"_index":3235,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:102",{"_index":3236,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:118",{"_index":1596,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:121",{"_index":3229,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:131",{"_index":1598,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:132",{"_index":1599,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:133",{"_index":1600,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:137",{"_index":3239,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:15",{"_index":3246,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:150",{"_index":1609,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:17",{"_index":3245,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:185",{"_index":3224,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:19",{"_index":3220,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:29",{"_index":1610,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:31",{"_index":1611,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:32",{"_index":1591,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:41",{"_index":1603,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:42",{"_index":1602,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:51",{"_index":1605,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:60",{"_index":1593,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:68",{"_index":3222,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.slice(prefix.length",{"_index":1577,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["key.startswith(prefix",{"_index":1576,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["key/key.service",{"_index":1292,"title":{},"body":{"injectables/CryptoService.html":{}}}],["key_validation_schema",{"_index":398,"title":{},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{}}}],["keybinding",{"_index":2607,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keybindingnonce",{"_index":2596,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keybindings",{"_index":2606,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keycloak",{"_index":2049,"title":{},"body":{"injectables/JwtStrategy.html":{},"changelog.html":{}}}],["keycloak_client_id",{"_index":600,"title":{},"body":{"modules/AuthModule.html":{}}}],["keycloak_internal_issuer_url",{"_index":597,"title":{},"body":{"modules/AuthModule.html":{}}}],["keyentity",{"_index":2063,"title":{"entities/KeyEntity.html":{}},"body":{"entities/KeyEntity.html":{},"modules/KeyModule.html":{}}}],["keylike",{"_index":3234,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keymap",{"_index":1547,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{},"miscellaneous/typealiases.html":{}}}],["keymodule",{"_index":373,"title":{"modules/KeyModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{},"modules.html":{},"overview.html":{}}}],["keymodule.forroot",{"_index":478,"title":{},"body":{"modules/AppModule.html":{}}}],["keypair",{"_index":1224,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["keys",{"_index":1302,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["keys.privatekey",{"_index":1629,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["keys.publickey",{"_index":1630,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["keys.publickey.kid",{"_index":1644,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["keyservice",{"_index":1244,"title":{"classes/KeyService.html":{}},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["keyservice:100",{"_index":3232,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:156",{"_index":3242,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:45",{"_index":3237,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:57",{"_index":3241,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:90",{"_index":3231,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["kind",{"_index":3825,"title":{},"body":{"license.html":{}}}],["km_type",{"_index":2080,"title":{},"body":{"modules/KeyModule.html":{}}}],["kmtype",{"_index":2091,"title":{},"body":{"modules/KeyModule.html":{}}}],["know",{"_index":251,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["known",{"_index":3335,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller",{"_index":388,"title":{},"body":{"modules/AppModule.html":{}}}],["known.controller.ts",{"_index":3333,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:26",{"_index":3343,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:36",{"_index":3337,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:50",{"_index":3340,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known/dto/credential",{"_index":1065,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["known/dto/jwks",{"_index":1294,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["known/dto/oauth",{"_index":2161,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["known/jwks.json",{"_index":764,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["known/jwt",{"_index":2784,"title":{},"body":{"injectables/ResolverService.html":{}}}],["known/openid",{"_index":124,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["known/well",{"_index":387,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{}}}],["kty",{"_index":1479,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["label",{"_index":1743,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["language",{"_index":3900,"title":{},"body":{"license.html":{}}}],["last",{"_index":3147,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["later",{"_index":862,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{}}}],["latest",{"_index":3590,"title":{},"body":{"index.html":{}}}],["law",{"_index":3821,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":3752,"title":{},"body":{"license.html":{}}}],["layer",{"_index":3497,"title":{},"body":{"index.html":{}}}],["legal",{"_index":3634,"title":{},"body":{"license.html":{}}}],["legend",{"_index":361,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["length",{"_index":2941,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{}}}],["lessthan",{"_index":3057,"title":{},"body":{"injectables/SessionService.html":{}}}],["lessthan(new",{"_index":3075,"title":{},"body":{"injectables/SessionService.html":{}}}],["level",{"_index":439,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["levels",{"_index":2144,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["levels[level.tolowercase",{"_index":2147,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["liability",{"_index":3838,"title":{},"body":{"license.html":{}}}],["liable",{"_index":3846,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":3514,"title":{},"body":{"index.html":{}}}],["licensable",{"_index":3740,"title":{},"body":{"license.html":{}}}],["license",{"_index":3612,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":3613,"title":{},"body":{"index.html":{},"license.html":{}}}],["licenses",{"_index":3757,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":3629,"title":{},"body":{"license.html":{}}}],["lightweight",{"_index":3522,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":3827,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":3902,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3662,"title":{},"body":{"license.html":{}}}],["line",{"_index":176,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["link",{"_index":925,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["list",{"_index":1080,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/PresentationsService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"dependencies.html":{},"index.html":{}}}],["list')@header('content",{"_index":3084,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.controller",{"_index":3169,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.controller.ts",{"_index":3079,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.controller.ts:16",{"_index":3086,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.json",{"_index":3106,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["list.module",{"_index":1977,"title":{},"body":{"modules/IssuerModule.html":{},"modules/SessionModule.html":{}}}],["list.module.ts",{"_index":3168,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.service",{"_index":1163,"title":{},"body":{"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{}}}],["list.service.ts",{"_index":3093,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["list.service.ts:112",{"_index":3180,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:116",{"_index":3179,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:125",{"_index":3185,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:138",{"_index":3177,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:178",{"_index":3184,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:189",{"_index":3186,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:31",{"_index":3175,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:39",{"_index":3182,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:42",{"_index":3183,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:52",{"_index":3181,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:79",{"_index":3178,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list/dto/status",{"_index":2870,"title":{},"body":{"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{}}}],["list/entities/status",{"_index":3187,"title":{},"body":{"entities/StatusMapping.html":{}}}],["list/status",{"_index":1162,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["listen",{"_index":883,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["lists",{"_index":3707,"title":{},"body":{"license.html":{}}}],["literal",{"_index":616,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/OfferRequest.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["litigation",{"_index":3747,"title":{},"body":{"license.html":{}}}],["live",{"_index":2670,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["load",{"_index":282,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["loadclients",{"_index":869,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["loadconfig",{"_index":2729,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["loadconfig(tenantid",{"_index":283,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["loadconfiguration",{"_index":2112,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loadtypemetadataformat",{"_index":1198,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["locale",{"_index":893,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["locality",{"_index":2659,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["lock",{"_index":3520,"title":{},"body":{"index.html":{}}}],["log",{"_index":2146,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["log_debug_mode",{"_index":2142,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_disable_http_logger",{"_index":2141,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_disable_session_logger",{"_index":2140,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerService.html":{}}}],["log_format",{"_index":2143,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_level",{"_index":424,"title":{},"body":{"modules/AppModule.html":{}}}],["logauthorizationrequest",{"_index":2964,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logauthorizationrequest(context",{"_index":2977,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcontext",{"_index":2283,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logcredentialissuance",{"_index":2965,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialissuance(context",{"_index":2980,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification",{"_index":2966,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification(context",{"_index":2983,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete",{"_index":2967,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete(context",{"_index":2985,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror",{"_index":2968,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror(context",{"_index":2988,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart",{"_index":2969,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart(context",{"_index":2990,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logformat",{"_index":2134,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["logged",{"_index":2884,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["logger",{"_index":2105,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"changelog.html":{}}}],["logger.decorator",{"_index":2199,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor",{"_index":1984,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["logger.interceptor.ts",{"_index":2886,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:131",{"_index":2903,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:17",{"_index":2891,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:34",{"_index":2894,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.service",{"_index":1983,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["logger.service.ts",{"_index":2961,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:102",{"_index":2982,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:12",{"_index":2976,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:124",{"_index":2984,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:146",{"_index":2979,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:163",{"_index":2999,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:180",{"_index":2993,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:202",{"_index":2995,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:221",{"_index":2997,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:30",{"_index":3000,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:37",{"_index":2991,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:56",{"_index":2986,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:75",{"_index":2989,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["loggerconfigservice",{"_index":2102,"title":{"injectables/LoggerConfigService.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loggerconfiguration",{"_index":2117,"title":{"interfaces/LoggerConfiguration.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loggermiddleware",{"_index":3487,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loggermiddleware(req",{"_index":3493,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loggermodule",{"_index":414,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule.forrootasync",{"_index":435,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":2282,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["logic",{"_index":3531,"title":{},"body":{"index.html":{}}}],["loginreponse",{"_index":3956,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["loglevel",{"_index":2120,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["lognotification",{"_index":2970,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["lognotification(context",{"_index":2992,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logo",{"_index":895,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["logs",{"_index":2369,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"changelog.html":{}}}],["logsession",{"_index":2971,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsession(context",{"_index":2994,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror",{"_index":2972,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror(context",{"_index":2996,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange",{"_index":2973,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange(context",{"_index":2998,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["long",{"_index":3557,"title":{},"body":{"index.html":{}}}],["loss",{"_index":3853,"title":{},"body":{"license.html":{}}}],["losses",{"_index":3860,"title":{},"body":{"license.html":{}}}],["made",{"_index":987,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"entities/PresentationConfig.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["mailing",{"_index":3706,"title":{},"body":{"license.html":{}}}],["main",{"_index":3433,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["maintain",{"_index":614,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["major",{"_index":3594,"title":{},"body":{"index.html":{}}}],["make",{"_index":3410,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["making",{"_index":2581,"title":{},"body":{"injectables/PresentationsService.html":{},"license.html":{}}}],["malfunction",{"_index":3858,"title":{},"body":{"license.html":{}}}],["managed",{"_index":3709,"title":{},"body":{"license.html":{}}}],["management",{"_index":1893,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"index.html":{},"license.html":{}}}],["management.controller",{"_index":1979,"title":{},"body":{"modules/IssuerModule.html":{}}}],["management.controller.ts",{"_index":1892,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management.controller.ts:106",{"_index":1898,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management.controller.ts:116",{"_index":1913,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management.controller.ts:132",{"_index":1901,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management.controller.ts:74",{"_index":1910,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management/issuer",{"_index":1891,"title":{},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{}}}],["managing",{"_index":71,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/FileSystemKeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"miscellaneous/typealiases.html":{}}}],["map",{"_index":1538,"title":{},"body":{"interfaces/Fields.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["map(([key",{"_index":2828,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["map((_",{"_index":3122,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["map((v",{"_index":2814,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["map.get(config.key",{"_index":1567,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["map.get(key",{"_index":1573,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["map.set(config.key",{"_index":1550,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["mapping",{"_index":3152,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity",{"_index":3103,"title":{},"body":{"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity.ts",{"_index":3188,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:12",{"_index":3192,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:15",{"_index":3190,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:6",{"_index":3194,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:9",{"_index":3193,"title":{},"body":{"entities/StatusMapping.html":{}}}],["marked",{"_index":3714,"title":{},"body":{"license.html":{}}}],["marks",{"_index":3811,"title":{},"body":{"license.html":{}}}],["match",{"_index":1751,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/ResolverService.html":{}}}],["match.length",{"_index":1754,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["match.substring(1",{"_index":1753,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["matches",{"_index":1749,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["matching",{"_index":259,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["math.floor(date.now",{"_index":2426,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["math.floor(new",{"_index":2428,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["math.random",{"_index":3125,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["math.round(new",{"_index":1202,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["matrix",{"_index":1744,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["matrixstyle",{"_index":1742,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["maybe",{"_index":277,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["mean",{"_index":3626,"title":{},"body":{"license.html":{}}}],["means",{"_index":3642,"title":{},"body":{"license.html":{}}}],["meant",{"_index":1834,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mechanical",{"_index":3666,"title":{},"body":{"license.html":{}}}],["mechanism",{"_index":861,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["mechanism(s",{"_index":1028,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["media",{"_index":3671,"title":{},"body":{"license.html":{}}}],["medium",{"_index":3762,"title":{},"body":{"license.html":{}}}],["meet",{"_index":3763,"title":{},"body":{"license.html":{}}}],["merchantability",{"_index":3829,"title":{},"body":{"license.html":{}}}],["merely",{"_index":3692,"title":{},"body":{"license.html":{}}}],["mergeconfigs",{"_index":1816,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergedheaders",{"_index":1827,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergedheaders.append(key",{"_index":1833,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergedheaders.delete(key",{"_index":1832,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergedheaders.set",{"_index":1840,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergeheaders",{"_index":1825,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergeheaders(a.headers",{"_index":1823,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["message",{"_index":2948,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["metadata",{"_index":1068,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"injectables/Oid4vciService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["metadata.'})@get('openid",{"_index":3342,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["metadata.dto",{"_index":2769,"title":{},"body":{"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{}}}],["metadata.dto.ts",{"_index":1066,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{}}}],["metadata.dto.ts:12",{"_index":1079,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:16",{"_index":1085,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:20",{"_index":1091,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:24",{"_index":1082,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:33",{"_index":1088,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:37",{"_index":1084,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:41",{"_index":1077,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:8",{"_index":1086,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["method",{"_index":161,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{}}}],["methodfn",{"_index":914,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["methods",{"_index":346,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["middleware",{"_index":982,"title":{"interfaces/Middleware.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"index.html":{}}}],["mirko",{"_index":3895,"title":{},"body":{"license.html":{},"properties.html":{}}}],["miscellaneous",{"_index":3480,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["missing",{"_index":1334,"title":{},"body":{"injectables/CryptoService.html":{}}}],["misused",{"_index":179,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["mkdirsync",{"_index":851,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["mkdirsync(folder",{"_index":888,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["mkdirsync(this.folder",{"_index":1300,"title":{},"body":{"injectables/CryptoService.html":{}}}],["mm",{"_index":450,"title":{},"body":{"modules/AppModule.html":{}}}],["modifications",{"_index":3661,"title":{},"body":{"license.html":{}}}],["modified",{"_index":3767,"title":{},"body":{"license.html":{}}}],["modify",{"_index":1945,"title":{},"body":{"controllers/IssuerManagementController.html":{},"license.html":{}}}],["modifying",{"_index":2953,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["module",{"_index":357,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["modules",{"_index":359,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["mollik",{"_index":3896,"title":{},"body":{"license.html":{},"properties.html":{}}}],["more",{"_index":354,"title":{},"body":{"controllers/AppController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"entities/Session.html":{},"license.html":{}}}],["mso_mdoc",{"_index":2412,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["multi",{"_index":2845,"title":{},"body":{"entities/Session.html":{},"changelog.html":{}}}],["multilang",{"_index":3957,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["multipart/form",{"_index":1788,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["multiple",{"_index":1023,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/Oid4vciService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["mysql2",{"_index":3464,"title":{},"body":{"dependencies.html":{}}}],["n${json.stringify(signer.publicjwk",{"_index":1414,"title":{},"body":{"injectables/CryptoService.html":{}}}],["name",{"_index":191,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["name)?.id",{"_index":210,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["name.endswith",{"_index":1755,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name.length",{"_index":1757,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name.startswith",{"_index":1758,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name.substring(0",{"_index":1756,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name.substring(1",{"_index":1759,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["nameing",{"_index":3426,"title":{},"body":{"changelog.html":{}}}],["names",{"_index":3810,"title":{},"body":{"license.html":{}}}],["name}=${allowreserved",{"_index":2820,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["name}=${joinedvalues",{"_index":2811,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["name}=${token",{"_index":1802,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name}=${value.toisostring",{"_index":2823,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["name}[${key",{"_index":2829,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["native",{"_index":947,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["necessarily",{"_index":3741,"title":{},"body":{"license.html":{}}}],["necessary",{"_index":104,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/VaultKeyService.html":{}}}],["need",{"_index":216,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["needed",{"_index":186,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/RegistrarService.html":{}}}],["negligence",{"_index":3841,"title":{},"body":{"license.html":{}}}],["negligent",{"_index":3844,"title":{},"body":{"license.html":{}}}],["nested",{"_index":2817,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["nestinterceptor",{"_index":2908,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["nestjs",{"_index":415,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["nestjs/axios",{"_index":2077,"title":{},"body":{"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":33,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":35,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1998,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":64,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":592,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":3448,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":406,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionService.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":395,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":350,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1701,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":1170,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["nestjs/typeorm/dist/typeorm.module",{"_index":2078,"title":{},"body":{"modules/KeyModule.html":{}}}],["never",{"_index":1006,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["new",{"_index":118,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["next",{"_index":175,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"miscellaneous/functions.html":{}}}],["next.handle",{"_index":2914,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["next.handle().pipe",{"_index":2934,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["next.js",{"_index":998,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["nextfunction",{"_index":3494,"title":{},"body":{"miscellaneous/functions.html":{}}}],["node:child_process",{"_index":1296,"title":{},"body":{"injectables/CryptoService.html":{}}}],["node:crypto",{"_index":657,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/ResolverService.html":{}}}],["node:fs",{"_index":57,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["node:path",{"_index":62,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["nodejs",{"_index":1158,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService-1.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["non",{"_index":3723,"title":{},"body":{"license.html":{}}}],["noncce",{"_index":2848,"title":{},"body":{"entities/Session.html":{}}}],["nonce",{"_index":2294,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["none",{"_index":2484,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["normally",{"_index":3785,"title":{},"body":{"license.html":{}}}],["nothing",{"_index":3800,"title":{},"body":{"license.html":{}}}],["notice",{"_index":3675,"title":{},"body":{"license.html":{}}}],["notices",{"_index":3770,"title":{},"body":{"license.html":{}}}],["notification",{"_index":1092,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/typealiases.html":{}}}],["notification.id",{"_index":2321,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notification_endpoint",{"_index":1076,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["notification_id",{"_index":2155,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["notificationevent",{"_index":2156,"title":{},"body":{"classes/NotificationRequestDto.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["notificationid",{"_index":2306,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notificationindex",{"_index":2326,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notificationrequestdto",{"_index":2153,"title":{"classes/NotificationRequestDto.html":{}},"body":{"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{}}}],["notifications",{"_index":340,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["notifications(body",{"_index":2192,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["notitification",{"_index":2225,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notwithstanding",{"_index":3798,"title":{},"body":{"license.html":{}}}],["now",{"_index":833,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["null",{"_index":263,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["nullable",{"_index":1878,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["number",{"_index":171,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"classes/ParResponseDto.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{}}}],["oauth",{"_index":2431,"title":{},"body":{"injectables/Oid4vpService.html":{},"index.html":{}}}],["oauth2",{"_index":82,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{}}}],["oauth2authorizationserver",{"_index":725,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["oauth2authorizationserverresponse",{"_index":2160,"title":{"classes/Oauth2AuthorizationServerResponse.html":{}},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{}}}],["oauth2client",{"_index":36,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["oauth2resourceserver",{"_index":2232,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["object",{"_index":927,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["object.entries",{"_index":1579,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["object.entries(arg",{"_index":1572,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["object.entries(body).foreach(([key",{"_index":2696,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["object.entries(extraprefixesmap",{"_index":1546,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["object.entries(header",{"_index":1831,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["object.entries(params",{"_index":1557,"title":{},"body":{"interfaces/Fields.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{}}}],["object.entries(req.headers",{"_index":1418,"title":{},"body":{"injectables/CryptoService.html":{}}}],["object.entries(value",{"_index":2827,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["object.entries(value).foreach(([key",{"_index":2824,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["object.keys(res.vp_token",{"_index":2643,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["object.keys(value).length",{"_index":1558,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["objects",{"_index":940,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["objectseparatorstyle",{"_index":2802,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["objectstyle",{"_index":2690,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["obligations",{"_index":3867,"title":{},"body":{"license.html":{}}}],["observable",{"_index":2900,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["obtain",{"_index":3898,"title":{},"body":{"license.html":{}}}],["offer",{"_index":837,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/Session.html":{},"license.html":{}}}],["offer.credentialoffer",{"_index":2268,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["offer.credentialofferobject",{"_index":2266,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["offerrequest",{"_index":1903,"title":{"classes/OfferRequest.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{}}}],["offerresponse",{"_index":1906,"title":{"classes/OfferResponse.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{}}}],["oid4vci",{"_index":464,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/SessionLogContext.html":{},"index.html":{}}}],["oid4vci/dto/offer",{"_index":1923,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["oid4vci/oid4vci.controller",{"_index":1975,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/oid4vci.service",{"_index":1974,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/util",{"_index":744,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["oid4vcicontroller",{"_index":1972,"title":{"controllers/Oid4vciController.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{}}}],["oid4vciservice",{"_index":1921,"title":{"injectables/Oid4vciService.html":{}},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/WellKnownController.html":{},"overview.html":{}}}],["oid4vp",{"_index":466,"title":{},"body":{"modules/AppModule.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"index.html":{}}}],["oid4vp.controller",{"_index":2359,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["oid4vp.service",{"_index":2343,"title":{},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["oid4vp/dto/presentation",{"_index":2534,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vp/oid4vp.module",{"_index":2564,"title":{},"body":{"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{}}}],["oid4vp/oid4vp.service",{"_index":2535,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vpcontroller",{"_index":2329,"title":{"controllers/Oid4vpController.html":{}},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["oid4vpcontrollergetvalidpiddata",{"_index":3959,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollergetvalidpidresponses",{"_index":3960,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollergetvalidrequestdata",{"_index":3961,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollergetvalidrequestresponse",{"_index":3962,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollergetvalidrequestresponses",{"_index":3963,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollergetvalidrequestwithquerydata",{"_index":3964,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollergetvalidrequestwithqueryresponse",{"_index":3965,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollergetvalidrequestwithqueryresponses",{"_index":3966,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollerresponsedata",{"_index":3967,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollerresponseresponses",{"_index":3968,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollersuccessdata",{"_index":3969,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollersuccessresponse",{"_index":3970,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollersuccessresponses",{"_index":3971,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpmodule",{"_index":1967,"title":{"modules/Oid4vpModule.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["oid4vpservice",{"_index":716,"title":{"injectables/Oid4vpService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"overview.html":{}}}],["oidc",{"_index":84,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"changelog.html":{}}}],["oidc_client_id",{"_index":2725,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["oidc_client_secret",{"_index":2726,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["oidc_issuer_url",{"_index":2722,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["oidcissuerurl",{"_index":111,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/.well",{"_index":123,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/protocol/openid",{"_index":120,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["older",{"_index":3055,"title":{},"body":{"injectables/SessionService.html":{}}}],["omit",{"_index":985,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["omitkeys",{"_index":1050,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["omittypeclass",{"_index":3972,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["onapplicationbootstrap",{"_index":31,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{}}}],["once",{"_index":187,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["one",{"_index":212,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"changelog.html":{},"license.html":{}}}],["onevent",{"_index":63,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["onevent(tenant_events.tenant_init",{"_index":1270,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{}}}],["onevent(tenant_events.tenant_keys",{"_index":152,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["onmoduleinit",{"_index":32,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit",{"_index":1250,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit(tenantid",{"_index":153,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["open",{"_index":3498,"title":{},"body":{"index.html":{}}}],["openapi",{"_index":1837,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["openid",{"_index":2332,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["openid4vc/oauth2",{"_index":742,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"dependencies.html":{}}}],["openid4vc/openid4vci",{"_index":1165,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["openid4vc/openid4vp",{"_index":3456,"title":{},"body":{"dependencies.html":{}}}],["openid4vc/utils",{"_index":3457,"title":{},"body":{"dependencies.html":{}}}],["openid4vci",{"_index":629,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/WellKnownController.html":{}}}],["openid4vcidraftversion",{"_index":2236,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vcidraftversion.draft14",{"_index":2255,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vciissuer",{"_index":2230,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vp://?${(await",{"_index":822,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["openid4vp://?${values.uri",{"_index":2545,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["openssl",{"_index":1338,"title":{},"body":{"injectables/CryptoService.html":{}}}],["operations",{"_index":100,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService-1.html":{},"controllers/Oid4vpController.html":{},"injectables/RegistrarService.html":{}}}],["option",{"_index":991,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["optional",{"_index":16,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"classes/OfferRequest.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/SerializePrimitiveOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":445,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["options.audience",{"_index":1671,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["options.auth",{"_index":1796,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.baseurl",{"_index":1806,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.dto",{"_index":2384,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["options.dto.ts",{"_index":2553,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{}}}],["options.expiresin",{"_index":1660,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["options.headers.append('cookie",{"_index":1801,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.headers.set(name",{"_index":1803,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.path",{"_index":1807,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.query",{"_index":1799,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.query[name",{"_index":1800,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.queryserializer",{"_index":1808,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.url",{"_index":1810,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["optionslegacyparser",{"_index":1051,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["order",{"_index":2619,"title":{},"body":{"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["organizations",{"_index":3506,"title":{},"body":{"index.html":{}}}],["origin",{"_index":3816,"title":{},"body":{"license.html":{}}}],["original",{"_index":2954,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["originaldraftversion",{"_index":2254,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["otherwhise",{"_index":1931,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["otherwise",{"_index":138,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["out",{"_index":379,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"license.html":{},"overview.html":{}}}],["outstanding",{"_index":3653,"title":{},"body":{"license.html":{}}}],["over",{"_index":3525,"title":{},"body":{"index.html":{}}}],["override",{"_index":1012,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["overview",{"_index":3505,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["overwrite",{"_index":1153,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["owner",{"_index":3631,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":3650,"title":{},"body":{"license.html":{}}}],["p",{"_index":1518,"title":{},"body":{"injectables/EncryptionService.html":{},"index.html":{}}}],["p256",{"_index":3259,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["package",{"_index":3441,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pad",{"_index":3302,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["page",{"_index":3435,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["pair",{"_index":1333,"title":{},"body":{"injectables/CryptoService.html":{}}}],["pairs",{"_index":620,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["par",{"_index":634,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(body",{"_index":645,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["param",{"_index":94,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"controllers/IssuerManagementController.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["param('requestid",{"_index":2348,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["param('session",{"_index":2349,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["param('tenantid",{"_index":668,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["parameter",{"_index":491,"title":{},"body":{"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["parameterize",{"_index":1322,"title":{},"body":{"injectables/CryptoService.html":{}}}],["parameters",{"_index":517,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":1555,"title":{"interfaces/Params.html":{}},"body":{"interfaces/Fields.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{}}}],["params.body",{"_index":1571,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["params[field.in",{"_index":1569,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["params[slot",{"_index":1559,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["paramsserializer",{"_index":948,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["parresponsedto",{"_index":664,"title":{"classes/ParResponseDto.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{}}}],["parse",{"_index":1016,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/PresentationsService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["parseaccesstokenrequest",{"_index":787,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parseas",{"_index":1017,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["parsechallengerequest",{"_index":710,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsechallengerequest(body",{"_index":726,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["parsed",{"_index":1007,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/PresentationsService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["parsedaccesstokenauthorizationcoderequestgrant",{"_index":748,"title":{"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest",{"_index":786,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.accesstokenrequest",{"_index":798,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.dpop?.jwt",{"_index":804,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant",{"_index":797,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsedcredentialrequest",{"_index":2269,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.credentialconfigurationid",{"_index":2288,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.proofs.jwt",{"_index":2291,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.proofs?.jwt?.length",{"_index":2290,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest?.proofs?.jwt",{"_index":2272,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parseloglevel",{"_index":2113,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["parseloglevel(level",{"_index":2125,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["parseresponse",{"_index":2575,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseresponse(res",{"_index":2594,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["part",{"_index":490,"title":{},"body":{"interfaces/Auth.html":{},"injectables/PresentationsService.html":{},"license.html":{}}}],["partial",{"_index":1534,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["particular",{"_index":3831,"title":{},"body":{"license.html":{}}}],["parties",{"_index":76,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["party",{"_index":185,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["pass",{"_index":1944,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["passed",{"_index":967,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"injectables/Oid4vciService.html":{}}}],["passport",{"_index":2031,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportjwtsecret",{"_index":2032,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportmodule",{"_index":591,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":2028,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":2016,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":1468,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["patch",{"_index":908,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"index.html":{}}}],["patent",{"_index":3732,"title":{},"body":{"license.html":{}}}],["path",{"_index":219,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Client.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["path[name",{"_index":1760,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["path_",{"_index":1543,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["path_param_re",{"_index":1737,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["pathserializer",{"_index":1736,"title":{"interfaces/PathSerializer.html":{}},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["pathurl",{"_index":1811,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["payload",{"_index":575,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{}}}],["payload.cnf",{"_index":2638,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["payload.iss",{"_index":2770,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.iss}/.well",{"_index":2783,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.sub",{"_index":1669,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["payload?.exp",{"_index":1388,"title":{},"body":{"injectables/CryptoService.html":{}}}],["payloads",{"_index":2759,"title":{},"body":{"injectables/ResolverService.html":{}}}],["pem",{"_index":23,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["percent",{"_index":944,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"license.html":{}}}],["perform",{"_index":1695,"title":{},"body":{"controllers/HealthController.html":{},"license.html":{}}}],["periodically",{"_index":162,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["permission",{"_index":3808,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":3659,"title":{},"body":{"license.html":{}}}],["perpetual",{"_index":3721,"title":{},"body":{"license.html":{}}}],["pertain",{"_index":3777,"title":{},"body":{"license.html":{}}}],["pg",{"_index":3468,"title":{},"body":{"dependencies.html":{}}}],["pick",{"_index":1035,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["pid",{"_index":1940,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentedData.html":{}}}],["pid,hostname",{"_index":454,"title":{},"body":{"modules/AppModule.html":{}}}],["pino",{"_index":416,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{}}}],["pinohttp",{"_index":438,"title":{},"body":{"modules/AppModule.html":{}}}],["pinologger",{"_index":2890,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["pipedelimited",{"_index":1741,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["pipeline",{"_index":3367,"title":{},"body":{"changelog.html":{}}}],["pkcecodechallengemethod",{"_index":741,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["pkcecodechallengemethod.s256",{"_index":772,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["pkcs#8",{"_index":1337,"title":{},"body":{"injectables/CryptoService.html":{}}}],["pkeyopt",{"_index":1341,"title":{},"body":{"injectables/CryptoService.html":{}}}],["placeholders",{"_index":2251,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["places",{"_index":3780,"title":{},"body":{"license.html":{}}}],["please",{"_index":996,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["pluggable",{"_index":3552,"title":{},"body":{"index.html":{}}}],["plumbing",{"_index":3532,"title":{},"body":{"index.html":{}}}],["png",{"_index":1933,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["pnpm",{"_index":3428,"title":{},"body":{"changelog.html":{}}}],["populate",{"_index":930,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["port",{"_index":1464,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["possession",{"_index":3244,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["possibility",{"_index":3862,"title":{},"body":{"license.html":{}}}],["post",{"_index":518,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"controllers/SessionController.html":{},"index.html":{}}}],["post('challenge",{"_index":637,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('credential",{"_index":2202,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('credential')@sessionlogger('state",{"_index":2189,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('notification",{"_index":2205,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('notification')@sessionlogger('notification_id",{"_index":2193,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('oauth2/token",{"_index":537,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('offer",{"_index":1942,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["post('par",{"_index":670,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('request",{"_index":2540,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["post('response",{"_index":2351,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["post('response')@sessionlogger('state",{"_index":2340,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["post('revoke",{"_index":2865,"title":{},"body":{"controllers/SessionController.html":{}}}],["post('token",{"_index":651,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["postgres",{"_index":1462,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres').default('sqlite",{"_index":1445,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["power",{"_index":3643,"title":{},"body":{"license.html":{}}}],["pre",{"_index":929,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["preferred",{"_index":1078,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"license.html":{}}}],["prefix",{"_index":502,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"interfaces/Fields.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"interfaces/Params.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["preheader",{"_index":3132,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["prepare",{"_index":3280,"title":{},"body":{"injectables/VaultKeyService.html":{},"license.html":{}}}],["prepayload",{"_index":3131,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["presentation",{"_index":619,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["presentation_during_issuance",{"_index":1864,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["presentationconfig",{"_index":2448,"title":{"entities/PresentationConfig.html":{}},"body":{"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["presentationconfig.webhook",{"_index":2451,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationduringissuance",{"_index":1876,"title":{"classes/PresentationDuringIssuance.html":{}},"body":{"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["presentationmanagementcontroller",{"_index":2520,"title":{"controllers/PresentationManagementController.html":{}},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{}}}],["presentationrequest",{"_index":2526,"title":{"classes/PresentationRequest.html":{}},"body":{"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["presentationrequestoptions",{"_index":2372,"title":{"interfaces/PresentationRequestOptions.html":{}},"body":{"injectables/Oid4vpService.html":{},"interfaces/PresentationRequestOptions.html":{}}}],["presentations",{"_index":102,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["presentations.controller",{"_index":2562,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["presentations.service",{"_index":2532,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{}}}],["presentations/dto/auth",{"_index":2378,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentations/presentations.module",{"_index":2360,"title":{},"body":{"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["presentations/presentations.service",{"_index":2377,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationsmodule",{"_index":2357,"title":{"modules/PresentationsModule.html":{}},"body":{"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["presentationsservice",{"_index":52,"title":{"injectables/PresentationsService.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"overview.html":{}}}],["presented",{"_index":2668,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["presented.credentials[0].values.address.locality",{"_index":2671,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["presenteddata",{"_index":2653,"title":{"interfaces/PresentedData.html":{}},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["pretty",{"_index":444,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"dependencies.html":{}}}],["primary",{"_index":873,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/StatusMapping.html":{}}}],["primarycolumn",{"_index":2852,"title":{},"body":{"entities/Session.html":{}}}],["primarycolumn('uuid",{"_index":2838,"title":{},"body":{"entities/Session.html":{}}}],["printed",{"_index":3892,"title":{},"body":{"license.html":{}}}],["privacy",{"_index":3554,"title":{},"body":{"index.html":{}}}],["private",{"_index":86,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["private_key",{"_index":2956,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["privateencryptionkey",{"_index":1491,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["privateenncryptionpath",{"_index":1492,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["privatekey",{"_index":1234,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/FileSystemKeyService.html":{},"entities/KeyEntity.html":{}}}],["privatekey.alg",{"_index":1634,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatekey.kid",{"_index":1633,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatekeyinstance",{"_index":1648,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatekeyjwk",{"_index":1229,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["privatekeypath",{"_index":1586,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatethumbprint",{"_index":1412,"title":{},"body":{"injectables/CryptoService.html":{}}}],["proceed",{"_index":2899,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["process",{"_index":2667,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"entities/Session.html":{}}}],["process.env.node_env",{"_index":431,"title":{},"body":{"modules/AppModule.html":{}}}],["process_presentation_response",{"_index":2462,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["processes",{"_index":2375,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["processing",{"_index":961,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["processresponse",{"_index":2661,"title":{"interfaces/ProcessResponse.html":{}},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["product",{"_index":3812,"title":{},"body":{"license.html":{}}}],["production",{"_index":432,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["progress",{"_index":2885,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["prominent",{"_index":3769,"title":{},"body":{"license.html":{}}}],["promise",{"_index":190,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["promise.all(att",{"_index":2652,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["promise.resolve((input",{"_index":3254,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["promise.resolve(keys.publickey",{"_index":1647,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["promise.resolve(tenantid",{"_index":3267,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["promises",{"_index":180,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["proof",{"_index":3243,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["proofcount",{"_index":2289,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["proofverified",{"_index":2305,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["proper",{"_index":859,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["properties",{"_index":13,"title":{"properties.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"entities/KeyEntity.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"properties.html":{}}}],["proprietary",{"_index":3516,"title":{},"body":{"index.html":{}}}],["protected",{"_index":1911,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["protocol",{"_index":3513,"title":{},"body":{"index.html":{}}}],["protocols",{"_index":3504,"title":{},"body":{"index.html":{}}}],["provide",{"_index":992,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"modules/KeyModule.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["provided",{"_index":341,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"classes/PresentationRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"license.html":{}}}],["provider",{"_index":85,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{}}}],["providers",{"_index":364,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["provides",{"_index":2716,"title":{},"body":{"modules/RegistrarModule.html":{},"license.html":{}}}],["providing",{"_index":1692,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["prs",{"_index":3604,"title":{},"body":{"index.html":{}}}],["pubkey",{"_index":1306,"title":{},"body":{"injectables/CryptoService.html":{}}}],["public",{"_index":21,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["public()@post('oauth2/token')@apibody({type",{"_index":505,"title":{},"body":{"controllers/AuthController.html":{}}}],["public.decorator",{"_index":527,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["public_url",{"_index":1985,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{}}}],["public_url=https://example.com",{"_index":3573,"title":{},"body":{"index.html":{}}}],["publiccryptokey",{"_index":1384,"title":{},"body":{"injectables/CryptoService.html":{}}}],["publicencryptionkey",{"_index":1493,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["publicencryptionpath",{"_index":1494,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["publicjwk",{"_index":810,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["publickey",{"_index":235,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/FileSystemKeyService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["publickey.alg",{"_index":1636,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["publickey.kid",{"_index":1632,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["publickeyjwk",{"_index":1233,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["publickeypath",{"_index":1587,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["publicly",{"_index":3729,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":252,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["purposes",{"_index":3640,"title":{},"body":{"license.html":{}}}],["pushed",{"_index":647,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["pushed_authorization_request_endpoint",{"_index":769,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["put",{"_index":909,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["pwd)/config:/app/config",{"_index":3577,"title":{},"body":{"index.html":{}}}],["qr",{"_index":1937,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["qrcode",{"_index":1926,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["qrcode.tobuffer(values.uri",{"_index":1952,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["qrcodebuffer",{"_index":1951,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["queries",{"_index":643,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/Session.html":{}}}],["queries.request_uri",{"_index":777,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["query",{"_index":206,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["query_",{"_index":1544,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["querydeeppartialentity",{"_index":3036,"title":{},"body":{"injectables/SessionService.html":{}}}],["queryparams",{"_index":1768,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["queryparams[name",{"_index":1770,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["queryserializer",{"_index":917,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["queryserializer(query",{"_index":1813,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["queryserializeroptions",{"_index":918,"title":{"interfaces/QuerySerializerOptions.html":{}},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["querystring",{"_index":2455,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["quick",{"_index":3559,"title":{},"body":{"index.html":{}}}],["quickstart",{"_index":3586,"title":{},"body":{"index.html":{}}}],["r",{"_index":2785,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["r.data",{"_index":2786,"title":{},"body":{"injectables/ResolverService.html":{}}}],["r.length",{"_index":3306,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["r.slice(1",{"_index":3310,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["r[0",{"_index":3308,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["rand",{"_index":3569,"title":{},"body":{"index.html":{}}}],["random",{"_index":1399,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["randombytes",{"_index":1282,"title":{},"body":{"injectables/CryptoService.html":{}}}],["randombytes(bytes",{"_index":1397,"title":{},"body":{"injectables/CryptoService.html":{}}}],["randomness",{"_index":3114,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["randomuuid",{"_index":656,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["ratelimit",{"_index":2040,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["raw",{"_index":1782,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/VaultKeyService.html":{}}}],["rawsignature",{"_index":3316,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["re",{"_index":820,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["reachable",{"_index":2788,"title":{},"body":{"injectables/ResolverService.html":{}}}],["react",{"_index":884,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["readable",{"_index":3778,"title":{},"body":{"license.html":{}}}],["readfilesync",{"_index":55,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["readfilesync(filepath",{"_index":296,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["readfilesync(join(folder",{"_index":1641,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["readfilesync(this.publicencryptionpath",{"_index":1528,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["readonly",{"_index":667,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"injectables/CryptoService.html":{},"controllers/IssuerManagementController.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/WellKnownController.html":{}}}],["readonlyarray",{"_index":1029,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Fields.html":{},"interfaces/Params.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["real",{"_index":1400,"title":{},"body":{"injectables/CryptoService.html":{}}}],["reason",{"_index":3881,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":3813,"title":{},"body":{"license.html":{}}}],["receive",{"_index":2342,"title":{},"body":{"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"entities/Session.html":{}}}],["received",{"_index":2491,"title":{},"body":{"injectables/Oid4vpService.html":{},"license.html":{}}}],["recent",{"_index":3593,"title":{},"body":{"index.html":{}}}],["recipients",{"_index":3766,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":3891,"title":{},"body":{"license.html":{}}}],["recommended",{"_index":3592,"title":{},"body":{"index.html":{}}}],["record",{"_index":934,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{}}}],["record)[name",{"_index":1570,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["recursive",{"_index":889,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["redacted",{"_index":2960,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["redirect_uri",{"_index":690,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["redistributing",{"_index":3835,"title":{},"body":{"license.html":{}}}],["redistribution",{"_index":3760,"title":{},"body":{"license.html":{}}}],["reference",{"_index":1631,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"index.html":{}}}],["reflect",{"_index":3473,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1992,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["refresh",{"_index":145,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["refresh_token",{"_index":2957,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["refreshaccesstoken",{"_index":165,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["refreshes",{"_index":158,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["regarding",{"_index":3806,"title":{},"body":{"license.html":{}}}],["regcert",{"_index":2391,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["register",{"_index":3049,"title":{},"body":{"injectables/SessionService.html":{}}}],["registrar",{"_index":59,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{}}}],["registrar.json",{"_index":286,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["registrar.service",{"_index":2717,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["registrar/generated",{"_index":2752,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrar/registrar.module",{"_index":393,"title":{},"body":{"modules/AppModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["registrar/registrar.service",{"_index":2376,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["registrar_url",{"_index":2721,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["registrar_validation_schema",{"_index":392,"title":{},"body":{"modules/AppModule.html":{},"modules/RegistrarModule.html":{}}}],["registrarconfig",{"_index":58,"title":{"classes/RegistrarConfig.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{}}}],["registrarmodule",{"_index":374,"title":{"modules/RegistrarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["registrarservice",{"_index":69,"title":{"injectables/RegistrarService.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"overview.html":{}}}],["registration",{"_index":78,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["registrationcert",{"_index":2394,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{}}}],["registrationcertid",{"_index":2604,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["registrationcertificate",{"_index":3974,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerall",{"_index":42,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["registrationcertificatecontrolleralldata",{"_index":3975,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerallresponse",{"_index":3976,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerallresponses",{"_index":3977,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerdeletedata",{"_index":3978,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerdeleteresponses",{"_index":3979,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindonedata",{"_index":3980,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindonedecodeddata",{"_index":3981,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindonedecodedresponse",{"_index":3982,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindonedecodedresponses",{"_index":3983,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindoneerror",{"_index":3984,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindoneerrors",{"_index":3985,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindoneresponse",{"_index":3986,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindoneresponses",{"_index":3987,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerregister",{"_index":43,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["registrationcertificatecontrollerregisterdata",{"_index":3988,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerregisterresponse",{"_index":3989,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerregisterresponses",{"_index":3990,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecreation",{"_index":2750,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{},"miscellaneous/typealiases.html":{}}}],["registrationcertificaterequest",{"_index":49,"title":{"classes/RegistrationCertificateRequest.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["related",{"_index":2083,"title":{},"body":{"modules/KeyModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["release",{"_index":3366,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["relevant",{"_index":2208,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["reload",{"_index":2129,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["reloadconfiguration",{"_index":2114,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["rely",{"_index":3515,"title":{},"body":{"index.html":{}}}],["relying",{"_index":75,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{}}}],["relyingparty",{"_index":3991,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerfindall",{"_index":44,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerfindalldata",{"_index":3992,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerfindallresponse",{"_index":3993,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerfindallresponses",{"_index":3994,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerregister",{"_index":45,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerregisterdata",{"_index":3995,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerregisterresponse",{"_index":3996,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerregisterresponses",{"_index":3997,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerremovedata",{"_index":3998,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerremoveresponses",{"_index":3999,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartyregistration",{"_index":4000,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["remain",{"_index":3690,"title":{},"body":{"license.html":{}}}],["remove",{"_index":2649,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"changelog.html":{}}}],["replace",{"_index":1378,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{}}}],["replace('https",{"_index":234,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["replace(/=/g",{"_index":3323,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["replace(/\\+/g",{"_index":3320,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["replace(/\\//g",{"_index":3321,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["replace(/\\r?\\n|\\r/g",{"_index":1381,"title":{},"body":{"injectables/CryptoService.html":{}}}],["replaced",{"_index":3887,"title":{},"body":{"license.html":{}}}],["replacevalue",{"_index":1763,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["repository",{"_index":1129,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["represent",{"_index":3687,"title":{},"body":{"license.html":{}}}],["representatives",{"_index":3705,"title":{},"body":{"license.html":{}}}],["representing",{"_index":621,"title":{},"body":{"interfaces/AuthResponse.html":{},"interfaces/IssuerMetadata.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["represents",{"_index":1067,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/RegistrarConfig.html":{},"entities/Session.html":{},"miscellaneous/typealiases.html":{}}}],["reproduce",{"_index":3728,"title":{},"body":{"license.html":{}}}],["reproducing",{"_index":3817,"title":{},"body":{"license.html":{}}}],["reproduction",{"_index":3622,"title":{},"body":{"license.html":{}}}],["repsonse",{"_index":8,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["req",{"_index":246,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"miscellaneous/functions.html":{}}}],["req+jwt",{"_index":2433,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["req.body",{"_index":269,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["req.body?.session_id",{"_index":460,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers['content",{"_index":475,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers['user",{"_index":473,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers['x",{"_index":457,"title":{},"body":{"modules/AppModule.html":{}}}],["req.id",{"_index":265,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["req.method",{"_index":468,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["req.params?.session",{"_index":459,"title":{},"body":{"modules/AppModule.html":{}}}],["req.params?.tenantid",{"_index":461,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url",{"_index":469,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url?.includes('/oid4vp",{"_index":465,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url?.includes('/vci",{"_index":463,"title":{},"body":{"modules/AppModule.html":{}}}],["reqinit",{"_index":4001,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["reqinterceptor",{"_index":1844,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"miscellaneous/typealiases.html":{}}}],["request",{"_index":11,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["request.'})@isenum(responsetype",{"_index":2177,"title":{},"body":{"classes/OfferRequest.html":{}}}],["request.body?.[sessionidparam",{"_index":2920,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.dto",{"_index":51,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{}}}],["request.dto.ts",{"_index":684,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"miscellaneous/enumerations.html":{}}}],["request.dto.ts:12",{"_index":696,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:15",{"_index":701,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:17",{"_index":2751,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:18",{"_index":703,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:20",{"_index":2178,"title":{},"body":{"classes/OfferRequest.html":{}}}],["request.dto.ts:21",{"_index":705,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:24",{"_index":697,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:26",{"_index":2550,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["request.dto.ts:27",{"_index":698,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/OfferRequest.html":{}}}],["request.dto.ts:30",{"_index":699,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:31",{"_index":2180,"title":{},"body":{"classes/OfferRequest.html":{}}}],["request.dto.ts:33",{"_index":702,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/PresentationRequest.html":{}}}],["request.dto.ts:35",{"_index":2185,"title":{},"body":{"classes/OfferResponse.html":{}}}],["request.dto.ts:36",{"_index":695,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/OfferResponse.html":{}}}],["request.dto.ts:41",{"_index":2551,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["request.dto.ts:6",{"_index":700,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.dto.ts:9",{"_index":704,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.header",{"_index":2438,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.headers.get('x",{"_index":2680,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["request.headers['content",{"_index":2929,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.headers['user",{"_index":2928,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.headers['x",{"_index":2921,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.json",{"_index":2669,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["request.method",{"_index":2665,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["request.params?.[sessionidparam",{"_index":2919,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params?.tenantid",{"_index":2923,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.payload",{"_index":2441,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.query?.[sessionidparam",{"_index":2922,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.url",{"_index":2924,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.user",{"_index":3207,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["request_error",{"_index":2946,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_start",{"_index":2927,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_success",{"_index":2937,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_uri",{"_index":671,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/Session.html":{}}}],["requested",{"_index":257,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["requestfn",{"_index":915,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["requestid",{"_index":253,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{}}}],["requesting",{"_index":3538,"title":{},"body":{"index.html":{}}}],["requestinit['headers",{"_index":933,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["requestoptions",{"_index":1026,"title":{"interfaces/RequestOptions.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["requestresult",{"_index":1030,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["requests",{"_index":91,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{}}}],["requestvalidator",{"_index":958,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["require_pushed_authorization_requests",{"_index":768,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["required",{"_index":334,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"modules/RegistrarModule.html":{},"classes/SchemaResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"license.html":{}}}],["requiredclaimkeys",{"_index":2647,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requiredfields",{"_index":2595,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requires",{"_index":2171,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["res",{"_index":270,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/EncryptionService.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/functions.html":{}}}],["res.data",{"_index":226,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["res.data!['crt",{"_index":243,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.data!['id",{"_index":244,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.data!['jwt",{"_index":281,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.data.data.keys['1'].public_key",{"_index":3268,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["res.data.id",{"_index":3265,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["res.data?.filter",{"_index":261,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.error",{"_index":222,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.payload",{"_index":1530,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["res.redirect(`${values.redirect_uri}?code=${code",{"_index":784,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["res.send",{"_index":847,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["res.send(qrcodebuffer",{"_index":1954,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.send(values",{"_index":1955,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.setheader('content",{"_index":1953,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.state",{"_index":2460,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["res.status(400).send(response",{"_index":845,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["res.statuscode",{"_index":477,"title":{},"body":{"modules/AppModule.html":{}}}],["reserved",{"_index":942,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["reset",{"_index":378,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["resinterceptor",{"_index":1845,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"miscellaneous/typealiases.html":{}}}],["resolve",{"_index":2764,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolved",{"_index":920,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["resolvepublickey",{"_index":2760,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolvepublickey(payload",{"_index":2762,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolver.service",{"_index":2757,"title":{},"body":{"modules/ResolverModule.html":{}}}],["resolver/resolver.module",{"_index":2563,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["resolver/resolver.service",{"_index":2610,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resolvermodule",{"_index":2559,"title":{"modules/ResolverModule.html":{}},"body":{"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"modules.html":{},"overview.html":{}}}],["resolverservice",{"_index":2578,"title":{"injectables/ResolverService.html":{}},"body":{"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"overview.html":{}}}],["resolves",{"_index":2586,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resolving",{"_index":2582,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{}}}],["resource",{"_index":691,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["resourceserver",{"_index":2213,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["response",{"_index":195,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["response('not",{"_index":2685,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["response('unauthorized",{"_index":2681,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["response(null",{"_index":2684,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["response.data!.find((item",{"_index":208,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["response.data!['id",{"_index":198,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["response.dto",{"_index":533,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"controllers/WellKnownController.html":{}}}],["response.dto.ts",{"_index":610,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:11",{"_index":624,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{}}}],["response.dto.ts:13",{"_index":2163,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:15",{"_index":1482,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:17",{"_index":2168,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:19",{"_index":1485,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:2",{"_index":2796,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:21",{"_index":2165,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:23",{"_index":1487,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:25",{"_index":2166,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:29",{"_index":2169,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:3",{"_index":2798,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:33",{"_index":1987,"title":{},"body":{"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:37",{"_index":2162,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:4",{"_index":2797,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:5",{"_index":2167,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{}}}],["response.dto.ts:9",{"_index":2172,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["response.error",{"_index":196,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["response.json(res",{"_index":2672,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["response.jwks.keys.find((key",{"_index":2789,"title":{},"body":{"injectables/ResolverService.html":{}}}],["response.statuscode",{"_index":2938,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["response_mode",{"_index":2407,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_processing",{"_index":2461,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_type",{"_index":692,"title":{},"body":{"classes/AuthorizeQueries.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["response_types_supported",{"_index":2423,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_uri",{"_index":2405,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["responses",{"_index":2887,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsesize",{"_index":2939,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsestatus",{"_index":2493,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["responsestyle",{"_index":976,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["responsetransformer",{"_index":966,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["responsetype",{"_index":1924,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["responsetype.qrcode",{"_index":1938,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsetype.uri",{"_index":1941,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsevalidator",{"_index":969,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["responsibility",{"_index":3873,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":70,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{},"license.html":{}}}],["result",{"_index":2471,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"license.html":{}}}],["result.payload",{"_index":2648,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resulting",{"_index":3665,"title":{},"body":{"license.html":{}}}],["results",{"_index":302,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["retain",{"_index":3774,"title":{},"body":{"license.html":{}}}],["retrieve",{"_index":674,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/PresentationsService.html":{}}}],["retrieved",{"_index":2678,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["retrieves",{"_index":1104,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{}}}],["return",{"_index":109,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["returned",{"_index":229,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["returning",{"_index":919,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["returns",{"_index":135,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["returntype",{"_index":995,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["revisions",{"_index":3684,"title":{},"body":{"license.html":{}}}],["revokeall",{"_index":2858,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(@body",{"_index":2877,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(value",{"_index":2863,"title":{},"body":{"controllers/SessionController.html":{}}}],["revoked",{"_index":17,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"classes/StatusUpdateDto.html":{}}}],["right",{"_index":3266,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["rights",{"_index":3869,"title":{},"body":{"license.html":{}}}],["risk",{"_index":3518,"title":{},"body":{"index.html":{}}}],["risks",{"_index":3836,"title":{},"body":{"license.html":{}}}],["rlength",{"_index":3296,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["root",{"_index":542,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{},"index.html":{}}}],["rootpath",{"_index":482,"title":{},"body":{"modules/AppModule.html":{}}}],["royalty",{"_index":3726,"title":{},"body":{"license.html":{}}}],["rp",{"_index":220,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["rp_name",{"_index":422,"title":{},"body":{"modules/AppModule.html":{}}}],["rpadded",{"_index":3304,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["rs256",{"_index":2051,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["rsa",{"_index":2033,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["run",{"_index":1325,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/SessionService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["running",{"_index":353,"title":{},"body":{"controllers/AppController.html":{}}}],["runs",{"_index":3551,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":2381,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":2911,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["s",{"_index":3290,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s's",{"_index":3300,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s.length",{"_index":3312,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s.slice(1",{"_index":3314,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s[0",{"_index":3313,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["safely",{"_index":957,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["saltgenerator",{"_index":1197,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["same",{"_index":818,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"license.html":{}}}],["san",{"_index":1356,"title":{},"body":{"injectables/CryptoService.html":{}}}],["san.ext",{"_index":1319,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sanext",{"_index":1318,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sanitize",{"_index":2906,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody",{"_index":2889,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody(body",{"_index":2902,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized",{"_index":2907,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized[field",{"_index":2959,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizes",{"_index":2904,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["satisfies",{"_index":2256,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["save",{"_index":299,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/RegistrarService.html":{}}}],["saveconfig",{"_index":2730,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["saveconfig(config",{"_index":300,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["scalable",{"_index":3548,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":405,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":479,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":3032,"title":{},"body":{"injectables/SessionService.html":{}}}],["schema",{"_index":1099,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"controllers/PresentationManagementController.html":{},"modules/RegistrarModule.html":{},"classes/SchemaResponse.html":{}}}],["schema(@param('id",{"_index":1116,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["schema(id",{"_index":1101,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["schema.org/draft/2020",{"_index":2794,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["schema_uri",{"_index":2518,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["schema_uri#integrity",{"_index":2519,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["schemaresponse",{"_index":1167,"title":{"classes/SchemaResponse.html":{}},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/SchemaResponse.html":{}}}],["scheme",{"_index":488,"title":{},"body":{"interfaces/Auth.html":{}}}],["scope",{"_index":693,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["script",{"_index":1323,"title":{},"body":{"injectables/CryptoService.html":{}}}],["scripts/.../import.ts",{"_index":3489,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["scripts/import.ts",{"_index":3495,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["sd",{"_index":1156,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{},"index.html":{}}}],["sdjwt",{"_index":1190,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwt.issue",{"_index":1199,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwtinstance",{"_index":2570,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["sdjwtvcinstance",{"_index":1159,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["search",{"_index":1769,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.join",{"_index":1777,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.push(serializedarray",{"_index":1772,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.push(serializedobject",{"_index":1774,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.push(serializedprimitive",{"_index":1776,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.startswith",{"_index":1814,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.substring(1",{"_index":1815,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["seconds",{"_index":584,"title":{},"body":{"controllers/AuthController.html":{},"classes/ParResponseDto.html":{}}}],["secret",{"_index":566,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"index.html":{}}}],["secretkey",{"_index":1662,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["secretorkey",{"_index":2054,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secretorkeyprovider",{"_index":2022,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":3735,"title":{},"body":{"license.html":{}}}],["sections",{"_index":3600,"title":{},"body":{"index.html":{},"license.html":{}}}],["secure",{"_index":3547,"title":{},"body":{"index.html":{}}}],["securely",{"_index":2677,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["security",{"_index":922,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["see",{"_index":932,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"index.html":{},"license.html":{}}}],["select",{"_index":1014,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["selectivly",{"_index":2657,"title":{},"body":{"interfaces/PresentedData.html":{}}}],["self",{"_index":1344,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sell",{"_index":3736,"title":{},"body":{"license.html":{}}}],["semantic",{"_index":3415,"title":{},"body":{"changelog.html":{}}}],["send",{"_index":339,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["sendauthorizationcode",{"_index":711,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["sendauthorizationcode(res",{"_index":729,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sendauthorizationresponse",{"_index":712,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["sendauthorizationresponse(queries",{"_index":731,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sending",{"_index":2479,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["sends",{"_index":880,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["sensitive",{"_index":2905,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields",{"_index":2955,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields.foreach((field",{"_index":2958,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sent",{"_index":315,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"license.html":{}}}],["separable",{"_index":3691,"title":{},"body":{"license.html":{}}}],["separate",{"_index":3803,"title":{},"body":{"license.html":{}}}],["separator",{"_index":2812,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorarrayexplode",{"_index":2803,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorarrayexplode(style",{"_index":2813,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorarraynoexplode",{"_index":2804,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorobjectexplode",{"_index":2806,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorobjectexplode(style",{"_index":2826,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["sequence",{"_index":3292,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["sequence.slice(2",{"_index":3298,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["sequence[1",{"_index":3297,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["serializearrayparam",{"_index":1731,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializedarray",{"_index":1771,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["serializedobject",{"_index":1773,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["serializedprimitive",{"_index":1775,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["serializeformdatapair",{"_index":2691,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["serializeformdatapair(data",{"_index":2698,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["serializeobjectparam",{"_index":1732,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializeoptions",{"_index":2799,"title":{"interfaces/SerializeOptions.html":{}},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializeprimitiveoptions",{"_index":2801,"title":{"interfaces/SerializePrimitiveOptions.html":{}},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializeprimitiveparam",{"_index":1733,"title":{"interfaces/SerializePrimitiveParam.html":{}},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializeroptions",{"_index":2689,"title":{"interfaces/SerializerOptions.html":{}},"body":{"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializers",{"_index":467,"title":{},"body":{"modules/AppModule.html":{}}}],["serializeurlsearchparamspair",{"_index":2693,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["serializeurlsearchparamspair(data",{"_index":2704,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["serializing",{"_index":924,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["server",{"_index":119,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"controllers/WellKnownController.html":{}}}],["server's",{"_index":2164,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["servers",{"_index":1081,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["servestaticmodule",{"_index":394,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forrootasync",{"_index":480,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":132,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/CredentialsController.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"index.html":{},"license.html":{}}}],["service.db",{"_index":1472,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["services",{"_index":336,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["session",{"_index":458,"title":{"entities/Session.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"miscellaneous/typealiases.html":{}}}],["session.auth_queries",{"_index":781,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["session.authorization_code",{"_index":800,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["session.controller",{"_index":3021,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.credentialpayload",{"_index":2492,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.credentialpayload!.values",{"_index":2490,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.credentialpayload?.values?.[credentialconfigurationid",{"_index":1186,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["session.id",{"_index":811,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["session.notifications",{"_index":2309,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications.findindex",{"_index":2320,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications.push",{"_index":2307,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications[index",{"_index":2323,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.offer!.credential_configuration_ids",{"_index":839,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["session.service",{"_index":2867,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["session.tenantid",{"_index":1184,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["session.vp_nonce",{"_index":2466,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook",{"_index":2464,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook!.url",{"_index":2496,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook.auth",{"_index":2474,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook.auth.config.value",{"_index":2477,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook.auth.type",{"_index":2475,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook.auth?.type",{"_index":2483,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook.url",{"_index":2481,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session/entities/session.entity",{"_index":1166,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["session/session.module",{"_index":404,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["session/session.service",{"_index":663,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["session_id",{"_index":2211,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_logger_key",{"_index":2912,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["session_tidy_up_interval",{"_index":3022,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["session_ttl",{"_index":3025,"title":{},"body":{"modules/SessionModule.html":{}}}],["session_validation_schema",{"_index":403,"title":{},"body":{"modules/AppModule.html":{},"modules/SessionModule.html":{}}}],["sessioncontroller",{"_index":2854,"title":{"controllers/SessionController.html":{}},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["sessionid",{"_index":456,"title":{},"body":{"modules/AppModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["sessionidparam",{"_index":2915,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sessionlogcontext",{"_index":2240,"title":{"interfaces/SessionLogContext.html":{}},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["sessionlogger",{"_index":2198,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["sessionlogger('notification_id",{"_index":2206,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["sessionlogger('session",{"_index":2347,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["sessionlogger('state",{"_index":2203,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["sessionloggerinterceptor",{"_index":1969,"title":{"injectables/SessionLoggerInterceptor.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"overview.html":{}}}],["sessionloggerservice",{"_index":1970,"title":{"injectables/SessionLoggerService.html":{}},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{},"overview.html":{}}}],["sessionmodule",{"_index":375,"title":{"modules/SessionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/SessionModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["sessionrepository",{"_index":3034,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessions",{"_index":2853,"title":{},"body":{"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{}}}],["sessionservice",{"_index":662,"title":{"injectables/SessionService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"overview.html":{}}}],["set",{"_index":106,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/EC_Public.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/WellKnownController.html":{},"changelog.html":{}}}],["set+json",{"_index":3353,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["set+json')@get('jwks.json",{"_index":3339,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["setauthcode",{"_index":713,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["setauthcode(issuer_state",{"_index":733,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["setauthparams",{"_index":1794,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["setconfig",{"_index":910,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["setentry",{"_index":3172,"title":{},"body":{"injectables/StatusListService.html":{}}}],["setentry(id",{"_index":3155,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["setexpirationtime(expiresin",{"_index":1670,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setinterval(callback",{"_index":3065,"title":{},"body":{"injectables/SessionService.html":{}}}],["setissuedat",{"_index":1666,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setissuer(issuer",{"_index":1667,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setprotectedheader",{"_index":1664,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setprotectedheader(header",{"_index":1649,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["setsubject(options.subject",{"_index":1668,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["settimeout",{"_index":172,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["setup",{"_index":3585,"title":{},"body":{"index.html":{}}}],["setupclient",{"_index":1053,"title":{},"body":{"injectables/ClientService.html":{}}}],["setupclient(id",{"_index":886,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["sha",{"_index":1195,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["shall",{"_index":3625,"title":{},"body":{"license.html":{}}}],["shape",{"_index":956,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["shares",{"_index":3654,"title":{},"body":{"license.html":{}}}],["shell",{"_index":1326,"title":{},"body":{"injectables/CryptoService.html":{}}}],["shouldlog",{"_index":2974,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["shuffel",{"_index":3119,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["shuffled",{"_index":3113,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["sign",{"_index":1360,"title":{},"body":{"injectables/CryptoService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/VaultKeyService.html":{}}}],["sign(privatekeyinstance",{"_index":1650,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["sign(value",{"_index":3238,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["signalg",{"_index":1192,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["signature",{"_index":1235,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"injectables/VaultKeyService.html":{}}}],["signature).catch((err",{"_index":2635,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["signed",{"_index":1345,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signedjwt",{"_index":2439,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwt.length",{"_index":2445,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwtlength",{"_index":2444,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signer",{"_index":808,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["signer(tenantid",{"_index":1604,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["signer.alg",{"_index":1406,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signer.method",{"_index":1402,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signer.publicjwk",{"_index":1405,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signerjwk",{"_index":1407,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signing",{"_index":1208,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["signingcert",{"_index":1373,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signinginput",{"_index":3286,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["signjwt",{"_index":1251,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["signjwt(header",{"_index":1272,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signjwt(payload",{"_index":1606,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["signjwtcallback",{"_index":1266,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signs",{"_index":3240,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["simple",{"_index":1745,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["simplicity",{"_index":2650,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["singleline",{"_index":447,"title":{},"body":{"modules/AppModule.html":{}}}],["size",{"_index":3116,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["skip",{"_index":3294,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["slot",{"_index":1535,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{},"miscellaneous/typealiases.html":{}}}],["software",{"_index":3663,"title":{},"body":{"license.html":{}}}],["sole",{"_index":3872,"title":{},"body":{"license.html":{}}}],["solely",{"_index":3832,"title":{},"body":{"license.html":{}}}],["solutions",{"_index":3517,"title":{},"body":{"index.html":{}}}],["solves",{"_index":3521,"title":{},"body":{"index.html":{}}}],["someone",{"_index":278,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["sort",{"_index":3123,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"index.html":{},"license.html":{}}}],["sources",{"_index":2918,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["spacedelimited",{"_index":1740,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["spadded",{"_index":3305,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["special",{"_index":3848,"title":{},"body":{"license.html":{}}}],["specific",{"_index":1105,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"index.html":{},"license.html":{}}}],["specification",{"_index":1838,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["specified",{"_index":1008,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["split",{"_index":3438,"title":{},"body":{"changelog.html":{}}}],["sqlite",{"_index":1448,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["sqlite3",{"_index":3476,"title":{},"body":{"dependencies.html":{}}}],["src/.../auth.ts",{"_index":3935,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../bodyserializer.ts",{"_index":3936,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../client.gen.ts",{"_index":3940,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../client.ts",{"_index":4002,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../crypto",{"_index":3955,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../crypto.service.ts",{"_index":3938,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":3484,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../params.ts",{"_index":3948,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../pathserializer.ts",{"_index":3933,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../presentation",{"_index":3482,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../sdk.gen.ts",{"_index":3973,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../session.entity.ts",{"_index":3958,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../types.gen.ts",{"_index":3916,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../types.ts",{"_index":3937,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../util.ts",{"_index":3485,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../utils.ts",{"_index":3932,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../webhook.dto.ts",{"_index":3934,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.module.ts",{"_index":380,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/app.controller.ts",{"_index":345,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/app.controller.ts:8",{"_index":348,"title":{},"body":{"controllers/AppController.html":{}}}],["src/auth/auth.controller.ts",{"_index":501,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:60",{"_index":513,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard.ts",{"_index":1988,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.guard.ts:12",{"_index":1996,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.guard.ts:7",{"_index":1993,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":590,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/client.service.ts",{"_index":849,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:16",{"_index":1055,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:23",{"_index":1059,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:35",{"_index":1057,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:45",{"_index":1058,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:61",{"_index":1062,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:74",{"_index":1056,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:82",{"_index":1061,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/dto/client",{"_index":970,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["src/auth/dto/token",{"_index":3208,"title":{},"body":{"classes/TokenResponse.html":{}}}],["src/auth/jwt.service.ts",{"_index":1652,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:13",{"_index":2009,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:19",{"_index":2012,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:56",{"_index":2014,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:83",{"_index":2010,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:94",{"_index":2013,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":2015,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:20",{"_index":2021,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:47",{"_index":2025,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:66",{"_index":2027,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:9",{"_index":2019,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/token.decorator.ts",{"_index":3203,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["src/crypto/crypto.module.ts",{"_index":1240,"title":{},"body":{"modules/CryptoModule.html":{}}}],["src/crypto/crypto.service.ts",{"_index":1243,"title":{},"body":{"injectables/CryptoService.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/crypto.service.ts:144",{"_index":1259,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:159",{"_index":1275,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:166",{"_index":1273,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:174",{"_index":1277,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:193",{"_index":1256,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:231",{"_index":1265,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:268",{"_index":1260,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:282",{"_index":1263,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:32",{"_index":1254,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:36",{"_index":1280,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:39",{"_index":1269,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:47",{"_index":1271,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:61",{"_index":1268,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/encryption/encryption.service.ts",{"_index":1490,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:11",{"_index":1506,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:12",{"_index":1508,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:13",{"_index":1507,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:14",{"_index":1498,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:19",{"_index":1504,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:23",{"_index":1503,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:58",{"_index":1500,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:63",{"_index":1501,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/key/crypto/crypto",{"_index":1214,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/crypto/crypto.service.ts",{"_index":1423,"title":{},"body":{"injectables/CryptoService-1.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/crypto/crypto.service.ts:10",{"_index":1427,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["src/crypto/key/crypto/crypto.service.ts:17",{"_index":1429,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["src/crypto/key/crypto/crypto.service.ts:21",{"_index":1433,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["src/crypto/key/entities/key.entity.ts",{"_index":2064,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/key.entity.ts:6",{"_index":2066,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/key.entity.ts:8",{"_index":2065,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/filesystem",{"_index":1584,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["src/crypto/key/key.module.ts",{"_index":2067,"title":{},"body":{"modules/KeyModule.html":{}}}],["src/crypto/key/key.module.ts:36",{"_index":2069,"title":{},"body":{"modules/KeyModule.html":{}}}],["src/crypto/key/key.service.ts",{"_index":2092,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:11",{"_index":2098,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:17",{"_index":2099,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:23",{"_index":2094,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:29",{"_index":2095,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:30",{"_index":2096,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:31",{"_index":2097,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:37",{"_index":2101,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/vault",{"_index":3216,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["src/database/database.module.ts",{"_index":1439,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/health/health.controller.ts",{"_index":1690,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:25",{"_index":1698,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1706,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/issuer/authorize/authorize.controller.ts",{"_index":627,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:36",{"_index":641,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:58",{"_index":649,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:82",{"_index":652,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:98",{"_index":638,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.service.ts",{"_index":707,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["src/issuer/authorize/authorize.service.ts:163",{"_index":727,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:181",{"_index":719,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:222",{"_index":730,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:236",{"_index":734,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:27",{"_index":718,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:38",{"_index":724,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:45",{"_index":721,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:68",{"_index":732,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:94",{"_index":736,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/dto/authorize",{"_index":683,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["src/issuer/authorize/dto/par",{"_index":2499,"title":{},"body":{"classes/ParResponseDto.html":{}}}],["src/issuer/credentials/credentials.controller.ts",{"_index":1097,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:15",{"_index":1108,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:25",{"_index":1103,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.service.ts",{"_index":1118,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:145",{"_index":1149,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:16",{"_index":1130,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:166",{"_index":1147,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:30",{"_index":1136,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:34",{"_index":1138,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:50",{"_index":1152,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:64",{"_index":1133,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:73",{"_index":1145,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:87",{"_index":1142,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/dto/credential",{"_index":2513,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["src/issuer/credentials/dto/schema",{"_index":2792,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["src/issuer/credentials/entities/issuance",{"_index":1861,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["src/issuer/issuer",{"_index":1890,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["src/issuer/issuer.module.ts",{"_index":1971,"title":{},"body":{"modules/IssuerModule.html":{}}}],["src/issuer/oid4vci/dto/notification",{"_index":2154,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["src/issuer/oid4vci/dto/offer",{"_index":2173,"title":{},"body":{"classes/OfferRequest.html":{},"classes/OfferResponse.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts",{"_index":2186,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:28",{"_index":2190,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:42",{"_index":2194,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts",{"_index":2212,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:110",{"_index":2220,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:151",{"_index":2222,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:262",{"_index":2224,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:37",{"_index":2231,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:39",{"_index":2217,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:44",{"_index":2229,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:49",{"_index":2228,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:60",{"_index":2227,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/util.ts",{"_index":3491,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/issuer/status",{"_index":3078,"title":{},"body":{"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["src/main.ts",{"_index":3490,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/registrar/generated/client.gen.ts",{"_index":4010,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/client/client.ts",{"_index":4012,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/client/types.ts",{"_index":975,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/client/utils.ts",{"_index":1709,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/client/utils.ts:331",{"_index":1715,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:337",{"_index":1717,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:341",{"_index":1723,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:348",{"_index":1721,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:353",{"_index":1719,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:360",{"_index":1726,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:370",{"_index":1728,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/core/auth.ts",{"_index":487,"title":{},"body":{"interfaces/Auth.html":{},"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/core/bodyserializer.ts",{"_index":2688,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/core/params.ts",{"_index":1531,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{},"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/core/pathserializer.ts",{"_index":2800,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/core/types.ts",{"_index":902,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["src/registrar/generated/sdk.gen.ts",{"_index":4011,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/types.gen.ts",{"_index":4009,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/registrar/registrar",{"_index":2706,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["src/registrar/registrar.module.ts",{"_index":2715,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["src/registrar/registrar.service.ts",{"_index":6,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:109",{"_index":2739,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:117",{"_index":2741,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:129",{"_index":2743,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:144",{"_index":2744,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:161",{"_index":2737,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:186",{"_index":2746,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:204",{"_index":2738,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:231",{"_index":2734,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:272",{"_index":2736,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:329",{"_index":2740,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:352",{"_index":2745,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:53",{"_index":2748,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:57",{"_index":2747,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:61",{"_index":2732,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:78",{"_index":2742,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/session/entities/session.entity.ts",{"_index":2830,"title":{},"body":{"entities/Session.html":{},"miscellaneous/typealiases.html":{}}}],["src/session/entities/session.entity.ts:36",{"_index":2839,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:41",{"_index":2837,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:46",{"_index":2833,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:51",{"_index":2843,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:56",{"_index":2831,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:61",{"_index":2847,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:66",{"_index":2834,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:71",{"_index":2842,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:76",{"_index":2835,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:81",{"_index":2849,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:86",{"_index":2840,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:91",{"_index":2844,"title":{},"body":{"entities/Session.html":{}}}],["src/session/session.controller.ts",{"_index":2855,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:23",{"_index":2859,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:32",{"_index":2862,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:42",{"_index":2866,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.module.ts",{"_index":3020,"title":{},"body":{"modules/SessionModule.html":{}}}],["src/session/session.service.ts",{"_index":3028,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:10",{"_index":3033,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:23",{"_index":3048,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:40",{"_index":3040,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:50",{"_index":3037,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:65",{"_index":3043,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:74",{"_index":3042,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:83",{"_index":3046,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:90",{"_index":3054,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/utils/logger",{"_index":2103,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["src/utils/session",{"_index":2879,"title":{},"body":{"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["src/utils/webhook.dto.ts",{"_index":305,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/typealiases.html":{}}}],["src/utils/webhook.dto.ts:13",{"_index":313,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook.dto.ts:19",{"_index":317,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook.dto.ts:36",{"_index":3329,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook.dto.ts:43",{"_index":3328,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook.dto.ts:54",{"_index":3332,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook.dto.ts:62",{"_index":3331,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/verifier/oid4vp/dto/authorization",{"_index":623,"title":{},"body":{"classes/AuthorizationResponse.html":{}}}],["src/verifier/oid4vp/dto/presentation",{"_index":2549,"title":{},"body":{"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"miscellaneous/enumerations.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts",{"_index":2330,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:34",{"_index":2337,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:53",{"_index":2341,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.module.ts",{"_index":2358,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts",{"_index":2361,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:20",{"_index":2365,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:215",{"_index":2373,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:264",{"_index":2374,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:41",{"_index":2367,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/presentations/dto/auth",{"_index":609,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["src/verifier/presentations/dto/vp",{"_index":2749,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["src/verifier/presentations/entities/presentation",{"_index":2502,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["src/verifier/presentations/presentations.controller.ts",{"_index":2521,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:111",{"_index":2523,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:121",{"_index":2531,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:137",{"_index":2525,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:79",{"_index":2529,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.module.ts",{"_index":2560,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["src/verifier/presentations/presentations.service.ts",{"_index":2566,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:109",{"_index":2603,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:122",{"_index":2609,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:145",{"_index":2608,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:160",{"_index":2605,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:177",{"_index":2597,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:22",{"_index":2580,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:40",{"_index":2593,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:54",{"_index":2592,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:67",{"_index":2600,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:78",{"_index":2585,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:88",{"_index":2590,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/resolver/dto/issuer",{"_index":1962,"title":{},"body":{"interfaces/IssuerMetadata.html":{}}}],["src/verifier/resolver/resolver.module.ts",{"_index":2756,"title":{},"body":{"modules/ResolverModule.html":{}}}],["src/verifier/resolver/resolver.service.ts",{"_index":2758,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/resolver/resolver.service.ts:12",{"_index":2761,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/resolver/resolver.service.ts:21",{"_index":2763,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/verifier.module.ts",{"_index":3326,"title":{},"body":{"modules/VerifierModule.html":{}}}],["src/well",{"_index":1064,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{}}}],["stable",{"_index":3591,"title":{},"body":{"index.html":{}}}],["stack",{"_index":2949,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"index.html":{}}}],["stack—so",{"_index":3528,"title":{},"body":{"index.html":{}}}],["stage",{"_index":2285,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["standardized",{"_index":3503,"title":{},"body":{"index.html":{}}}],["start",{"_index":2370,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"index.html":{}}}],["started",{"_index":3004,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"injectables/SessionLoggerService.html":{}}}],["starting",{"_index":2931,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["starts",{"_index":144,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["starttime",{"_index":2932,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["state",{"_index":612,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/SessionService.html":{},"license.html":{}}}],["stated",{"_index":3734,"title":{},"body":{"license.html":{}}}],["statement",{"_index":3792,"title":{},"body":{"license.html":{}}}],["static",{"_index":396,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"changelog.html":{},"dependencies.html":{}}}],["stating",{"_index":3771,"title":{},"body":{"license.html":{}}}],["status",{"_index":544,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"dependencies.html":{},"index.html":{}}}],["status_list",{"_index":3154,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuscode",{"_index":476,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["statuslist",{"_index":3098,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslist(file.elements",{"_index":3129,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslist+jwt",{"_index":3133,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslistcontroller",{"_index":3077,"title":{"controllers/StatusListController.html":{}},"body":{"controllers/StatusListController.html":{},"modules/StatusListModule.html":{}}}],["statuslistcontrollercrlfiledata",{"_index":4003,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["statuslistcontrollercrlfileresponse",{"_index":4004,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["statuslistcontrollercrlfileresponses",{"_index":4005,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["statuslistcontrollergetlistdata",{"_index":4006,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["statuslistcontrollergetlistresponse",{"_index":4007,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["statuslistcontrollergetlistresponses",{"_index":4008,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["statuslistfetcher",{"_index":2571,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["statuslistfile",{"_index":3092,"title":{"interfaces/StatusListFile.html":{}},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslistjwtheaderparameters",{"_index":3099,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslistmodule",{"_index":1968,"title":{"modules/StatusListModule.html":{}},"body":{"modules/IssuerModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules.html":{},"overview.html":{}}}],["statuslistservice",{"_index":1127,"title":{"injectables/StatusListService.html":{}},"body":{"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"overview.html":{}}}],["statusmapping",{"_index":3101,"title":{"entities/StatusMapping.html":{}},"body":{"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{}}}],["statusmappingrepository",{"_index":3108,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statusupdatedto",{"_index":2864,"title":{"classes/StatusUpdateDto.html":{}},"body":{"controllers/SessionController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{}}}],["stdio",{"_index":1330,"title":{},"body":{"injectables/CryptoService.html":{}}}],["step",{"_index":676,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/CryptoService.html":{},"injectables/SessionLoggerService.html":{},"injectables/VaultKeyService.html":{}}}],["still",{"_index":214,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"index.html":{}}}],["stoppage",{"_index":3855,"title":{},"body":{"license.html":{}}}],["storage",{"_index":3553,"title":{},"body":{"index.html":{}}}],["store",{"_index":240,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["storeaccesscertificate",{"_index":1252,"title":{},"body":{"injectables/CryptoService.html":{}}}],["storeaccesscertificate(crt",{"_index":1274,"title":{},"body":{"injectables/CryptoService.html":{}}}],["storeconfig",{"_index":3173,"title":{},"body":{"injectables/StatusListService.html":{}}}],["storeconfig(content",{"_index":3140,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["storeconfiguration",{"_index":1896,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["storeconfiguration(config",{"_index":1912,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["storecredentialconfiguration",{"_index":1125,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["storecredentialconfiguration(tenantid",{"_index":1150,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["stored",{"_index":1642,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["storeexistingrp",{"_index":2731,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["storeexistingrp(name",{"_index":205,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["storepresentationconfig",{"_index":2522,"title":{},"body":{"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["storepresentationconfig(config",{"_index":2530,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["storepresentationconfig(vprequest",{"_index":2599,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid",{"_index":2576,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid(registrationcertid",{"_index":2602,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["stores",{"_index":200,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/IssuerManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["strategy",{"_index":2030,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["stream",{"_index":1015,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["string",{"_index":18,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/typealiases.html":{}}}],["stringified",{"_index":1835,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["strings",{"_index":965,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["stripemptyslots",{"_index":1556,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["stripemptyslots(params",{"_index":1582,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["structure",{"_index":1476,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/PresentationConfig.html":{}}}],["structured",{"_index":2963,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["style",{"_index":939,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["sub",{"_index":576,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{}}}],["subj",{"_index":1347,"title":{},"body":{"injectables/CryptoService.html":{}}}],["subject",{"_index":256,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{},"license.html":{}}}],["subjectaltname=dns:${uri",{"_index":1350,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sublicense",{"_index":3730,"title":{},"body":{"license.html":{}}}],["submission",{"_index":3794,"title":{},"body":{"license.html":{}}}],["submit",{"_index":3700,"title":{},"body":{"license.html":{}}}],["submitted",{"_index":3698,"title":{},"body":{"license.html":{}}}],["subsequently",{"_index":3717,"title":{},"body":{"license.html":{}}}],["succeeded",{"_index":3014,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["successfully",{"_index":2443,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["such",{"_index":1484,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/Session.html":{},"license.html":{}}}],["summary",{"_index":539,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["super",{"_index":2001,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/VaultKeyService.html":{}}}],["super.canactivate(context",{"_index":2006,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["supersede",{"_index":3802,"title":{},"body":{"license.html":{}}}],["support",{"_index":553,"title":{},"body":{"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/Session.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{}}}],["supported",{"_index":332,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/CryptoService.html":{},"controllers/IssuerManagementController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{}}}],["supportedauthenticationscheme",{"_index":2234,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["supportedauthenticationscheme.clientattestationjwt",{"_index":776,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["supportedauthenticationscheme.dpop",{"_index":2279,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["supports",{"_index":515,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["svg",{"_index":3904,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":1436,"title":{},"body":{"injectables/CryptoService-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["symmetric",{"_index":2056,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["synchronize",{"_index":1460,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["syntax",{"_index":3890,"title":{},"body":{"license.html":{}}}],["system",{"_index":1594,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["systems",{"_index":3708,"title":{},"body":{"license.html":{}}}],["t",{"_index":1048,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/EncryptionService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{}}}],["t['baseurl",{"_index":988,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["t['throwonerror",{"_index":1025,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tag",{"_index":3295,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["tap",{"_index":2909,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["tap((data",{"_index":2935,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["target",{"_index":443,"title":{},"body":{"modules/AppModule.html":{}}}],["tdata",{"_index":1032,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tdata[keyof",{"_index":1031,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tdatashape",{"_index":1049,"title":{"interfaces/TDataShape.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tell",{"_index":2470,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["tenancy",{"_index":2846,"title":{},"body":{"entities/Session.html":{}}}],["tenant",{"_index":149,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"changelog.html":{}}}],["tenant_events",{"_index":66,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["tenantid",{"_index":151,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["tenantid)).uri",{"_index":824,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["tenantid/.well",{"_index":3334,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["tenantid/authorize",{"_index":628,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["tenantid/oid4vp",{"_index":2331,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["tenantid/status",{"_index":3080,"title":{},"body":{"controllers/StatusListController.html":{}}}],["tenantid/vci",{"_index":2187,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["tenanturl",{"_index":2388,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["term",{"_index":3558,"title":{},"body":{"index.html":{}}}],["terminate",{"_index":3758,"title":{},"body":{"license.html":{}}}],["terminusmodule",{"_index":1708,"title":{},"body":{"modules/HealthModule.html":{}}}],["terms",{"_index":3620,"title":{},"body":{"license.html":{}}}],["terror",{"_index":1033,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["terror[keyof",{"_index":1034,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["test",{"_index":2038,"title":{},"body":{"injectables/JwtStrategy.html":{},"changelog.html":{}}}],["test/.../index.ts",{"_index":3486,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../utils.ts",{"_index":3488,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/utils.ts",{"_index":3492,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/webhook/src/index.ts",{"_index":2654,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"miscellaneous/functions.html":{}}}],["text",{"_index":1022,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["textencoder().encode(secret",{"_index":1663,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["then((cryptokey",{"_index":3271,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["then((key",{"_index":1525,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["then((res",{"_index":221,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["then((response",{"_index":207,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["then((session",{"_index":780,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["then(async",{"_index":194,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["theory",{"_index":3839,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":3694,"title":{},"body":{"license.html":{}}}],["third",{"_index":3784,"title":{},"body":{"license.html":{}}}],["this._fns",{"_index":1846,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this._fns.indexof(id",{"_index":1848,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this._fns.length",{"_index":1851,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this._fns[id",{"_index":1847,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this._fns[index",{"_index":1850,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this.accesstoken",{"_index":130,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.addaccesscertificate(config",{"_index":218,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.addrp(tenantid",{"_index":156,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.authorizeservice.authorizationchallengeendpoint",{"_index":682,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.authzmetadata",{"_index":3352,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.authorizeservice.sendauthorizationresponse",{"_index":669,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.validatetokenrequest(body",{"_index":681,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authzmetadata(tenantid",{"_index":794,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.authzservice.authzmetadata(tenantid",{"_index":2245,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.client",{"_index":125,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.client.setconfig",{"_index":126,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.clients",{"_index":867,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clientservice.validateclient",{"_index":573,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.config",{"_index":2136,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.disablehttplogger",{"_index":2149,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.disablesessionlogger",{"_index":2148,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enabledebugmode",{"_index":2150,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.level",{"_index":2151,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.logformat",{"_index":2152,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice",{"_index":232,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.get",{"_index":2139,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerService.html":{},"injectables/VaultKeyService.html":{}}}],["this.configservice.get('log_level",{"_index":2138,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice.get('oidc",{"_index":1688,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["this.configservice.get('registrar_url",{"_index":140,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.get('vault_url",{"_index":3248,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.configservice.getorthrow",{"_index":872,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vciService.html":{}}}],["this.configservice.getorthrow('auth_client_id",{"_index":871,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.configservice.getorthrow('folder",{"_index":285,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["this.configservice.getorthrow('jwt_expires_in",{"_index":1661,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('jwt_issuer",{"_index":1659,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('jwt_secret",{"_index":1658,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('oidc_client_id",{"_index":114,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('oidc_client_secret",{"_index":116,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('oidc_issuer_url",{"_index":112,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('public_url",{"_index":754,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.configservice.getorthrow('public_url')}${req.url",{"_index":785,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.configservice.getorthrow('public_url')}/${session.tenantid}/credentials/vct/${vc.id",{"_index":1204,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.configservice.getorthrow('public_url')}/${tenantid",{"_index":807,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.configservice.getorthrow('public_url')}/${tenantid}/oid4vp/request/${requestid}/${values.session",{"_index":2454,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.configservice.getorthrow('registrar_url",{"_index":128,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('rp_name",{"_index":192,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('session_tidy_up_interval",{"_index":3063,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservice.getorthrow('session_ttl",{"_index":3073,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservie.get('crypto_alg",{"_index":1434,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["this.create(tenantid",{"_index":3253,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.createlist(tenantid",{"_index":3126,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.credentialsservice.deletecredentialconfiguration",{"_index":1960,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.credentialsservice.getconfig(user.sub",{"_index":1957,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.credentialsservice.getconfigbyid",{"_index":840,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.credentialsservice.getcredential",{"_index":2300,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.credentialsservice.getcredentialconfiguration",{"_index":2248,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.credentialsservice.getcredentialconfiguration(user.sub",{"_index":2258,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.credentialsservice.getschema(id",{"_index":1117,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.getvct(id",{"_index":1115,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.storecredentialconfiguration",{"_index":1958,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.crpytoservice.getcertchain",{"_index":1207,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.crpytoservice.keyservice.signer",{"_index":1191,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.crypto",{"_index":1621,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.crypto.alg",{"_index":1635,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.crypto.generatekeypair",{"_index":1628,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.crypto.getsigner(keys.privatekey",{"_index":1625,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.cryptoservice.getalg",{"_index":1646,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["this.cryptoservice.getcallbackcontext",{"_index":2242,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.cryptoservice.getcallbackcontext(tenantid",{"_index":752,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.cryptoservice.getcertchain",{"_index":2435,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.cryptoservice.getcertchain('signing",{"_index":3134,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.cryptoservice.getcrypto",{"_index":1622,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.cryptoservice.getjwks(tenantid).then((key",{"_index":3355,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.cryptoservice.keyservice.getpublickey",{"_index":236,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["this.cryptoservice.signjwt",{"_index":2440,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.cryptoservice.signjwt(header",{"_index":3135,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.cryptoservice.storeaccesscertificate",{"_index":242,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.db.pingcheck('database",{"_index":1705,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.dertojwtsignature(res.data.data.signature.split(':')[2",{"_index":3278,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.encryptionservice.decryptjwe",{"_index":2457,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.getencryptionpublickey",{"_index":2410,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.eventemitter.emit(tenant_events.tenant_init",{"_index":900,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.eventemitter.emit(tenant_events.tenant_keys",{"_index":1305,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.filename",{"_index":3115,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.folder",{"_index":1297,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{}}}],["this.getaccesscertificateid(config",{"_index":157,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.getauthorizationserver",{"_index":755,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.getauthorizationserver(tenantid).createaccesstokenresponse",{"_index":806,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.getcallbackcontext(tenantid).hash",{"_index":1409,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.getclients",{"_index":863,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.getclients().find((c",{"_index":875,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.getconfig(session.tenantid",{"_index":3146,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.getconfig(tenantid",{"_index":3128,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.getconfig(tenantid)).foreach((credential",{"_index":1180,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.getconfig(tenantid).jwt",{"_index":3138,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.getconfigbyid",{"_index":1183,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.getinterceptorindex(id",{"_index":1849,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this.getjwk",{"_index":3269,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getkeys(tenant",{"_index":1623,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.getkeys(tenantid",{"_index":1624,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.getkeys(tenantid).then((keys",{"_index":1643,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.getkid(tenantid",{"_index":3274,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getpublickey('jwk",{"_index":3264,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getpublickey('pem",{"_index":3250,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getsignjwtcallback(tenantid",{"_index":1401,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.hascerts(tenantid",{"_index":1304,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.headers",{"_index":3249,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.health.check",{"_index":1704,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httpservice.get",{"_index":2782,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["this.httpservice.post",{"_index":2485,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/VaultKeyService.html":{}}}],["this.init(tenantid",{"_index":1511,"title":{},"body":{"injectables/EncryptionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.isenabled",{"_index":108,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{}}}],["this.issuanceconfigrepo.delete",{"_index":1179,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.issuanceconfigrepo.findby",{"_index":1175,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.issuanceconfigrepo.findonebyorfail",{"_index":1176,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.issuanceconfigrepo.save(value",{"_index":1178,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.issuer",{"_index":2243,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.createcredentialissuermetadata",{"_index":2247,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.createcredentialresponse",{"_index":2313,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.parsecredentialrequest",{"_index":2270,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.verifycredentialrequestjwtproof",{"_index":2293,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuermetadata(tenantid",{"_index":2261,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.isusingexternaloidc",{"_index":1656,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.jwtservice.generatetoken(payload",{"_index":578,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwtservice.isusingexternaloidc",{"_index":550,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.kbverifier.bind(this",{"_index":2616,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.keyservice.getpublickey",{"_index":1413,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.keyservice.getpublickey('jwk",{"_index":1383,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.keyservice.init(tenantid",{"_index":1303,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.keyservice.signjwt(payload",{"_index":1382,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.loadclients",{"_index":868,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.loadconfig(tenantid",{"_index":154,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.loadconfig(tenantid).id",{"_index":254,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.loadconfiguration",{"_index":2135,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.logger.error",{"_index":2945,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.info",{"_index":2926,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.setcontext('sessionlogger",{"_index":2925,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.logger.setcontext('sessionloggerservice",{"_index":3001,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.oauth2client",{"_index":117,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.oauth2client.clientcredentials().then((token",{"_index":166,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.oid4vciservice.createoffer",{"_index":1947,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.oid4vciservice.getcredential(req",{"_index":2204,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.handlenotification(req",{"_index":2207,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.issuermetadata(tenantid",{"_index":3351,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.oid4vpservice.createauthorizationrequest",{"_index":2350,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.oid4vpservice.createrequest",{"_index":2541,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.oid4vpservice.createrequest('pid",{"_index":823,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.oid4vpservice.getresponse(body",{"_index":2352,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.parsechallengerequest",{"_index":844,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.parseloglevel",{"_index":2137,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.presentationsservice.deletepresentationconfig(id",{"_index":2548,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.getpresentationconfig",{"_index":2390,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.getpresentationconfigs(user.sub",{"_index":2546,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.parseresponse",{"_index":2465,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.storepresentationconfig",{"_index":2547,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.storercid",{"_index":280,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.privateencryptionkey",{"_index":1526,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.privateenncryptionpath",{"_index":1512,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.privatekeypath",{"_index":1626,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.publicencryptionkey",{"_index":1527,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.publicencryptionpath",{"_index":1514,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.publickeypath",{"_index":1627,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.reflector.get",{"_index":2913,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.reflector.getallandoverride",{"_index":2003,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.refreshaccesstoken",{"_index":148,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.registrarservice.addregistrationcertificate",{"_index":2396,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.isenabled",{"_index":2393,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.resolverservice.resolvepublickey",{"_index":2632,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.resourceserver",{"_index":2244,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.resourceserver.verifyresourcerequest",{"_index":2274,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sanitizebody(request.body",{"_index":2930,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.saveconfig(config",{"_index":199,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.schedulerregistry.addinterval('tidyupsessions",{"_index":3066,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sdjwtinstance",{"_index":2614,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.sendauthorizationcode(res",{"_index":834,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.sessionlogger.logauthorizationrequest(logcontext",{"_index":2399,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logcredentialissuance",{"_index":2302,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionlogger.logcredentialverification",{"_index":2467,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowcomplete(logcontext",{"_index":2310,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowerror(logcontext",{"_index":2318,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowstart(logcontext",{"_index":2287,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.lognotification(logcontext",{"_index":2325,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionlogger.logsession",{"_index":2442,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logsessionerror",{"_index":2327,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionrepository.delete",{"_index":3074,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.find",{"_index":3069,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail",{"_index":3070,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail(where",{"_index":3071,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.save(session",{"_index":3067,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.update",{"_index":3068,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionservice",{"_index":778,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.sessionservice.add(auth_session",{"_index":2397,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.add(body.issuer_state",{"_index":677,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.sessionservice.add(issuer_state",{"_index":848,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.sessionservice.add(res.state",{"_index":2472,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.add(session.id",{"_index":2308,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionservice.add(values.session",{"_index":2452,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.create",{"_index":2265,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionservice.get",{"_index":2280,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionservice.get(body.auth_session",{"_index":831,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.sessionservice.get(body.issuer_state",{"_index":835,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.sessionservice.get(id",{"_index":2876,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.get(res.state",{"_index":2459,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.getall",{"_index":2874,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.getby",{"_index":790,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.setauthcode",{"_index":846,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.setauthcode(values.issuer_state",{"_index":783,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.setentry(entry.index",{"_index":3162,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.setupclient(client.id",{"_index":865,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.shouldlog",{"_index":3002,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.sign(input",{"_index":3255,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.sign(signinginput",{"_index":3288,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.signjwt(header",{"_index":1415,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.statuslistfetcher.bind(this",{"_index":2617,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.statuslistservice.createentry",{"_index":1205,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.statuslistservice.getlist(tenantid",{"_index":3091,"title":{},"body":{"controllers/StatusListController.html":{}}}],["this.statuslistservice.updatestatus(value",{"_index":2878,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.statusmappingrepository.findby",{"_index":3158,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.statusmappingrepository.save",{"_index":3153,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.storeconfig(file",{"_index":3137,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.storeexistingrp(name",{"_index":197,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.tidyupsessions",{"_index":3061,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.vaulturl",{"_index":3247,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.vaulturl}/keys/${tenantid",{"_index":3261,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.vaulturl}/sign/${tenantid",{"_index":3275,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.verifier.bind(this",{"_index":2615,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository",{"_index":2624,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.delete",{"_index":2623,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.find",{"_index":2618,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.save(vprequest",{"_index":2622,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.update",{"_index":2627,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["those",{"_index":3739,"title":{},"body":{"license.html":{}}}],["through",{"_index":3627,"title":{},"body":{"license.html":{}}}],["throw",{"_index":238,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{}}}],["throwonerror",{"_index":977,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tidy",{"_index":3050,"title":{},"body":{"injectables/SessionService.html":{}}}],["tidyupsessions",{"_index":3030,"title":{},"body":{"injectables/SessionService.html":{}}}],["time",{"_index":2501,"title":{},"body":{"classes/ParResponseDto.html":{}}}],["times",{"_index":2316,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["timestamp",{"_index":1871,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["title",{"_index":3828,"title":{},"body":{"license.html":{}}}],["tmp",{"_index":3374,"title":{},"body":{"changelog.html":{}}}],["todo",{"_index":247,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["together",{"_index":3512,"title":{},"body":{"index.html":{}}}],["token",{"_index":89,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"index.html":{}}}],["token(body",{"_index":650,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["token.accesstoken",{"_index":167,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["token.decorator",{"_index":531,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["token_endpoint",{"_index":758,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["token_endpoint_auth_methods_supported",{"_index":775,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["token_exchange",{"_index":3015,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["token_type",{"_index":547,"title":{},"body":{"controllers/AuthController.html":{},"classes/TokenResponse.html":{}}}],["tokenpayload",{"_index":530,"title":{"interfaces/TokenPayload.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"interfaces/TokenPayload.html":{}}}],["tokenpayload.nonce",{"_index":2297,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["tokenpayload.sub",{"_index":2281,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["tokenresponse",{"_index":510,"title":{"classes/TokenResponse.html":{}},"body":{"controllers/AuthController.html":{},"classes/TokenResponse.html":{}}}],["tokens",{"_index":2058,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["tolowercase",{"_index":1393,"title":{},"body":{"injectables/CryptoService.html":{}}}],["tort",{"_index":3840,"title":{},"body":{"license.html":{}}}],["tostring('ascii",{"_index":565,"title":{},"body":{"controllers/AuthController.html":{}}}],["tostring('base64",{"_index":3319,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["tough",{"_index":3510,"title":{},"body":{"index.html":{}}}],["town",{"_index":2662,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["trace",{"_index":911,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["tracking",{"_index":2554,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["trade",{"_index":3809,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":3775,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":3807,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":3737,"title":{},"body":{"license.html":{}}}],["transformation",{"_index":3667,"title":{},"body":{"license.html":{}}}],["transformer",{"_index":318,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["transformers",{"_index":968,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["transforming",{"_index":959,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["translatetime",{"_index":448,"title":{},"body":{"modules/AppModule.html":{}}}],["translation",{"_index":3668,"title":{},"body":{"license.html":{}}}],["transport",{"_index":441,"title":{},"body":{"modules/AppModule.html":{}}}],["true",{"_index":136,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"interfaces/Middleware.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"interfaces/TDataShape.html":{}}}],["true})@isobject",{"_index":2510,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@isobject()@isoptional",{"_index":1879,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["true})@isstring",{"_index":1874,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["trust",{"_index":2773,"title":{},"body":{"injectables/ResolverService.html":{}}}],["try",{"_index":556,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/VaultKeyService.html":{}}}],["ts",{"_index":3387,"title":{},"body":{"changelog.html":{}}}],["ttl",{"_index":3072,"title":{},"body":{"injectables/SessionService.html":{}}}],["typ",{"_index":2430,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["type",{"_index":19,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["type(undefined)@isobject",{"_index":3327,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["type(undefined)@isoptional()@isobject",{"_index":3330,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["typealiases",{"_index":3913,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":88,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["typeorm",{"_index":1173,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"dependencies.html":{}}}],["typeorm/query",{"_index":3058,"title":{},"body":{"injectables/SessionService.html":{}}}],["typeorm/repository/repository",{"_index":2611,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["typeormhealthindicator",{"_index":1700,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormmodule",{"_index":1440,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/PresentationsModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{}}}],["typeormmodule.forfeature([issuanceconfig",{"_index":1986,"title":{},"body":{"modules/IssuerModule.html":{}}}],["typeormmodule.forfeature([keyentity",{"_index":2090,"title":{},"body":{"modules/KeyModule.html":{}}}],["typeormmodule.forfeature([presentationconfig",{"_index":2565,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["typeormmodule.forfeature([session",{"_index":3027,"title":{},"body":{"modules/SessionModule.html":{}}}],["typeormmodule.forfeature([statusmapping",{"_index":3170,"title":{},"body":{"modules/StatusListModule.html":{}}}],["typeormmodule.forrootasync",{"_index":1456,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleoptions",{"_index":1441,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":1735,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"modules/RegistrarModule.html":{},"injectables/VaultKeyService.html":{},"license.html":{}}}],["types.get(this.cryptoservice.getalg",{"_index":3263,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["types.set('ed25519",{"_index":3260,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["types.set('es256",{"_index":3257,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["typescript",{"_index":177,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["typically",{"_index":1087,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{}}}],["unauthorizedexception",{"_index":519,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception('invalid",{"_index":574,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined",{"_index":442,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Auth.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"interfaces/Fields.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["undefined})@apiproduces('application/json",{"_index":1907,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["undefined})@apiresponse({status",{"_index":508,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@post('offer",{"_index":1909,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["undefined})@post('request",{"_index":2528,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["under",{"_index":3614,"title":{},"body":{"index.html":{},"license.html":{}}}],["unified",{"_index":3502,"title":{},"body":{"index.html":{}}}],["union",{"_index":3635,"title":{},"body":{"license.html":{}}}],["unique",{"_index":25,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{}}}],["unknown",{"_index":644,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CredentialsService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Params.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["unless",{"_index":3796,"title":{},"body":{"license.html":{}}}],["unlinksync",{"_index":1284,"title":{},"body":{"injectables/CryptoService.html":{}}}],["unlinksync(file",{"_index":1371,"title":{},"body":{"injectables/CryptoService.html":{}}}],["unused",{"_index":2436,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["up",{"_index":352,"title":{},"body":{"controllers/AppController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/SessionService.html":{}}}],["update",{"_index":1714,"title":{},"body":{"classes/Interceptors.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["update(data",{"_index":1394,"title":{},"body":{"injectables/CryptoService.html":{}}}],["update(id",{"_index":1724,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["update.dto",{"_index":2871,"title":{},"body":{"controllers/SessionController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["update.dto.ts",{"_index":3195,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:16",{"_index":3197,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:24",{"_index":3200,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:8",{"_index":3198,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["updated",{"_index":1914,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["updatestatus",{"_index":3174,"title":{},"body":{"injectables/StatusListService.html":{}}}],["updatestatus(value",{"_index":3157,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["upload",{"_index":3389,"title":{},"body":{"changelog.html":{}}}],["uri",{"_index":896,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"miscellaneous/enumerations.html":{}}}],["url",{"_index":338,"title":{},"body":{"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Interceptors.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{}}}],["url(request.url",{"_index":2664,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["url.pathname",{"_index":2666,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["url.replace",{"_index":1761,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["url.replace(match",{"_index":1765,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["urlsearchparams",{"_index":2694,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["urlsearchparamsbodyserializer",{"_index":2703,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["urn:${randomuuid",{"_index":672,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["use",{"_index":107,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/EC_Public.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"changelog.html":{},"license.html":{}}}],["use(fn",{"_index":1727,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["used",{"_index":202,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"entities/IssuanceConfig.html":{},"classes/JwksResponseDto.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/typealiases.html":{}}}],["useexternaloidc",{"_index":2034,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usefactory",{"_index":437,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["useful",{"_index":953,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["useguards",{"_index":1915,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["useguards(jwtauthguard",{"_index":1928,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["useinterceptors",{"_index":2195,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["useinterceptors(sessionloggerinterceptor",{"_index":2201,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["user",{"_index":471,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"modules/SessionModule.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["user.sub",{"_index":1948,"title":{},"body":{"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["username",{"_index":1466,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["uses",{"_index":1693,"title":{},"body":{"controllers/HealthController.html":{},"injectables/SessionLoggerService.html":{}}}],["using",{"_index":159,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["utf",{"_index":297,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["util",{"_index":2238,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["utility",{"_index":1416,"title":{},"body":{"injectables/CryptoService.html":{}}}],["utils",{"_index":983,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["utils.ts",{"_index":1417,"title":{},"body":{"injectables/CryptoService.html":{}}}],["utils/session",{"_index":1982,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["utils/webhook.dto",{"_index":747,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/VCT.html":{}}}],["uuid",{"_index":1617,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"dependencies.html":{}}}],["v",{"_index":1420,"title":{},"body":{"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"index.html":{}}}],["v1",{"_index":3598,"title":{},"body":{"index.html":{}}}],["v2",{"_index":3599,"title":{},"body":{"index.html":{}}}],["v4",{"_index":1616,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["valid",{"_index":164,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/StatusUpdateDto.html":{}}}],["valid('trace",{"_index":426,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":653,"title":{},"body":{"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["validate(payload",{"_index":2026,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateclient",{"_index":1054,"title":{},"body":{"injectables/ClientService.html":{}}}],["validateclient(clientid",{"_index":874,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["validated",{"_index":2295,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["validatetokenrequest",{"_index":714,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["validatetokenrequest(body",{"_index":735,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["validating",{"_index":952,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["validation",{"_index":1675,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/RegistrarModule.html":{}}}],["validationschema",{"_index":418,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":322,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"entities/IssuanceConfig.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["value",{"_index":309,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"controllers/SessionController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["value.credentialconfigurationid",{"_index":3160,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["value.foreach((v",{"_index":2697,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["value.map((v",{"_index":2808,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["value.sessionid",{"_index":3159,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["value.status",{"_index":3163,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["value.tenantid",{"_index":1177,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.toisostring",{"_index":2822,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["value.tostring",{"_index":2702,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["valueonly",{"_index":1762,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["values",{"_index":98,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionService.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/typealiases.html":{}}}],["values.join",{"_index":2825,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["values.session",{"_index":2449,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["values.uri",{"_index":2544,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["values.webhook",{"_index":2450,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["varchar",{"_index":3189,"title":{},"body":{"entities/StatusMapping.html":{}}}],["variable",{"_index":3053,"title":{},"body":{"injectables/SessionService.html":{}}}],["variables",{"_index":2720,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["various",{"_index":335,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["vars",{"_index":2437,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["vault",{"_index":2074,"title":{},"body":{"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{}}}],["vault').default('file",{"_index":2082,"title":{},"body":{"modules/KeyModule.html":{}}}],["vault_key_id",{"_index":2088,"title":{},"body":{"modules/KeyModule.html":{}}}],["vault_token",{"_index":2086,"title":{},"body":{"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{}}}],["vault_url",{"_index":2084,"title":{},"body":{"modules/KeyModule.html":{}}}],["vaultkeyservice",{"_index":2073,"title":{"injectables/VaultKeyService.html":{}},"body":{"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{}}}],["vaulturl",{"_index":3217,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["vc",{"_index":1161,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"dependencies.html":{},"index.html":{}}}],["vc.claims",{"_index":1187,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["vc.disclosureframe",{"_index":1189,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["vc.schema",{"_index":1212,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["vc.vct",{"_index":1209,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["vc.vct.vct",{"_index":1210,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["vcs",{"_index":2568,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vct",{"_index":1100,"title":{"classes/VCT.html":{}},"body":{"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["vct(@param('id",{"_index":1114,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["vct(id",{"_index":1106,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["vendor",{"_index":3519,"title":{},"body":{"index.html":{}}}],["verbal",{"_index":3702,"title":{},"body":{"license.html":{}}}],["verbose",{"_index":2145,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["verifiable",{"_index":1109,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{}}}],["verification",{"_index":1677,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["verificationresult",{"_index":2836,"title":{},"body":{"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["verified",{"_index":1390,"title":{},"body":{"injectables/CryptoService.html":{},"entities/Session.html":{}}}],["verifiedproof",{"_index":2292,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["verifiedproof.signer.publicjwk",{"_index":2298,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["verifier",{"_index":1232,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"miscellaneous/typealiases.html":{}}}],["verifier/oid4vp/dto/presentation",{"_index":1925,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{}}}],["verifier/oid4vp/oid4vp.module",{"_index":1980,"title":{},"body":{"modules/IssuerModule.html":{}}}],["verifier/oid4vp/oid4vp.service",{"_index":745,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["verifier/presentations/dto/vp",{"_index":50,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["verifier/presentations/presentations.module",{"_index":2718,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["verifier/presentations/presentations.service",{"_index":53,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["verifier/verifier.module",{"_index":391,"title":{},"body":{"modules/AppModule.html":{}}}],["verifier_attestations",{"_index":2429,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["verifiermodule",{"_index":376,"title":{"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["verify",{"_index":767,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{}}}],["verify(data",{"_index":2634,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verify(res.vp_token[att",{"_index":2646,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verifyauthorizationcodeaccesstokenrequest",{"_index":796,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["verifyjwt",{"_index":1253,"title":{},"body":{"injectables/CryptoService.html":{}}}],["verifyjwt(compact",{"_index":1276,"title":{},"body":{"injectables/CryptoService.html":{}}}],["verifytoken",{"_index":2008,"title":{},"body":{"injectables/JwtService.html":{}}}],["verifytoken(token",{"_index":1676,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["version",{"_index":3364,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["versions",{"_index":3597,"title":{},"body":{"index.html":{}}}],["via",{"_index":675,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{},"index.html":{}}}],["video/'].some((type",{"_index":1791,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["view",{"_index":951,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["vitest",{"_index":3391,"title":{},"body":{"changelog.html":{}}}],["void",{"_index":1060,"title":{},"body":{"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["vp",{"_index":617,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"changelog.html":{}}}],["vp_formats",{"_index":2411,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["vp_nonce",{"_index":2398,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["vp_token",{"_index":613,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["vprequest",{"_index":2601,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequest.tenantid",{"_index":2621,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequestrepository",{"_index":2579,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vps",{"_index":2567,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["wallet",{"_index":817,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"index.html":{}}}],["wallets",{"_index":3501,"title":{},"body":{"index.html":{}}}],["want",{"_index":928,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["warn",{"_index":428,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["warranties",{"_index":3824,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":3819,"title":{},"body":{"license.html":{}}}],["way",{"_index":1043,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["we'll",{"_index":1943,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["web",{"_index":1473,"title":{},"body":{"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{}}}],["webhook",{"_index":329,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"entities/Session.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{}}}],["webhookauthconfig",{"_index":330,"title":{"classes/WebHookAuthConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["webhookconfig",{"_index":337,"title":{"classes/WebhookConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["webhookresponse",{"_index":2486,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhookresponse.data",{"_index":2489,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhookresponse.status",{"_index":2494,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhooks",{"_index":307,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/typealiases.html":{}}}],["webhooksent",{"_index":2498,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhookurl",{"_index":2480,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webook",{"_index":2473,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["welcome",{"_index":3603,"title":{},"body":{"index.html":{}}}],["well",{"_index":386,"title":{},"body":{"modules/AppModule.html":{},"injectables/CryptoService.html":{},"controllers/WellKnownController.html":{}}}],["wellknowncontroller",{"_index":381,"title":{"controllers/WellKnownController.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{}}}],["wherever",{"_index":3783,"title":{},"body":{"license.html":{}}}],["whether",{"_index":2170,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"license.html":{}}}],["whole",{"_index":3688,"title":{},"body":{"license.html":{}}}],["within",{"_index":3719,"title":{},"body":{"license.html":{}}}],["without",{"_index":1683,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"license.html":{}}}],["won't",{"_index":1000,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["work",{"_index":3672,"title":{},"body":{"license.html":{}}}],["worker",{"_index":3405,"title":{},"body":{"changelog.html":{}}}],["works",{"_index":3681,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":3722,"title":{},"body":{"license.html":{}}}],["write",{"_index":272,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["writefilesync",{"_index":56,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["writefilesync(file",{"_index":3141,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["writefilesync(filepath",{"_index":292,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["writefilesync(join(folder",{"_index":1374,"title":{},"body":{"injectables/CryptoService.html":{}}}],["writefilesync(join(this.folder",{"_index":3251,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["writefilesync(sanext",{"_index":1358,"title":{},"body":{"injectables/CryptoService.html":{}}}],["writing",{"_index":274,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["written",{"_index":3703,"title":{},"body":{"license.html":{}}}],["x",{"_index":1480,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/VaultKeyService.html":{},"index.html":{}}}],["x509",{"_index":1346,"title":{},"body":{"injectables/CryptoService.html":{}}}],["x509_san_dns",{"_index":2403,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509_san_dns:${host",{"_index":2453,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509certificate",{"_index":1283,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/ResolverService.html":{}}}],["x509certificate(buffer.from(cert",{"_index":2775,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x509certificate(cert",{"_index":1375,"title":{},"body":{"injectables/CryptoService.html":{}}}],["x5c",{"_index":1206,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["y",{"_index":1481,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["yes",{"_index":728,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/SessionLoggerService.html":{}}}],["you're",{"_index":1045,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["your_api_key_here",{"_index":325,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["yyyy",{"_index":449,"title":{},"body":{"modules/AppModule.html":{}}}],["zeros",{"_index":3303,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["zoom",{"_index":377,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AccessCertificateResponse.html":{"url":"interfaces/AccessCertificateResponse.html","title":"interface - AccessCertificateResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccessCertificateResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Repsonse of access certificate request.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            crt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            revoked\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        crt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        crt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The public key in PEM format.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier of the access certificate.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        revoked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        revoked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates if the access certificate is revoked.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { OAuth2Client } from '@badgateway/oauth2-client';\nimport { client } from './generated/client.gen';\nimport {\n    accessCertificateControllerFindOne,\n    accessCertificateControllerRegister,\n    registrationCertificateControllerAll,\n    registrationCertificateControllerRegister,\n    relyingPartyControllerFindAll,\n    relyingPartyControllerRegister,\n} from './generated';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { RegistrationCertificateRequest } from '../verifier/presentations/dto/vp-request.dto';\nimport { PresentationsService } from '../verifier/presentations/presentations.service';\nimport { existsSync, readFileSync, writeFileSync } from 'node:fs';\nimport { RegistrarConfig } from './registrar-config';\nimport { join } from 'node:path';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { TENANT_EVENTS } from '../auth/tenant-events';\n\n/**\n * Repsonse of access certificate request.\n */\ninterface AccessCertificateResponse {\n    /**\n     * Unique identifier of the access certificate.\n     */\n    id: string;\n    /**\n     * The public key in PEM format.\n     */\n    crt: string;\n    /**\n     * Indicates if the access certificate is revoked.\n     */\n    revoked?: boolean;\n}\n\n/**\n * RegistrarService is responsible for managing the interaction with the registrar,\n * including adding relying parties, access certificates, and registration certificates.\n */\n@Injectable()\nexport class RegistrarService implements OnApplicationBootstrap, OnModuleInit {\n    /**\n     * OAuth2 client for interacting with the OIDC provider.\n     */\n    private oauth2Client: OAuth2Client;\n    /**\n     * Client for interacting with the registrar API.\n     */\n    private client: typeof client;\n    /**\n     * Access token for authenticating requests to the registrar.\n     */\n    private accessToken: string;\n\n    /**\n     * Constructor for the RegistrarService.\n     * @param configService - Instance of ConfigService for accessing configuration values.\n     * @param cryptoService - Instance of CryptoService for cryptographic operations.\n     * @param presentationsService - Instance of PresentationsService for handling presentations.\n     */\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private presentationsService: PresentationsService,\n    ) {}\n\n    /**\n     * Initializes the OAuth2 client and registrar client with the necessary configurations.\n     */\n    onModuleInit() {\n        //when not set, we will not use the registrar\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const oidcIssuerUrl =\n            this.configService.getOrThrow('OIDC_ISSUER_URL');\n        const clientId =\n            this.configService.getOrThrow('OIDC_CLIENT_ID');\n        const clientSecret =\n            this.configService.getOrThrow('OIDC_CLIENT_SECRET');\n\n        this.oauth2Client = new OAuth2Client({\n            server: `${oidcIssuerUrl}/protocol/openid-connect/token`,\n            clientId,\n            clientSecret,\n            discoveryEndpoint: `${oidcIssuerUrl}/.well-known/openid-configuration`,\n        });\n\n        this.client = client;\n        this.client.setConfig({\n            baseUrl: this.configService.getOrThrow('REGISTRAR_URL'),\n            auth: () => this.accessToken,\n        });\n    }\n\n    /**\n     * Checks if the registrar service is enabled based on the configuration.\n     * @returns True if the registrar service is enabled, false otherwise.\n     */\n    isEnabled() {\n        return !!this.configService.get('REGISTRAR_URL');\n    }\n\n    /**\n     * This function is called when the application starts.\n     * It will refresh the access token for the registrar.\n     */\n    async onApplicationBootstrap() {\n        if (!this.configService.get('REGISTRAR_URL')) {\n            return;\n        }\n        await this.refreshAccessToken();\n    }\n\n    /**\n     * This function is called when a tenant is initialized.\n     * @param tenantId\n     */\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    async onTenantInit(tenantId: string) {\n        if (!this.isEnabled()) {\n            return;\n        }\n        const config = this.loadConfig(tenantId);\n        if (!config.id) {\n            config.id = await this.addRp(tenantId);\n        }\n        await this.getAccessCertificateId(config, tenantId);\n    }\n\n    /**\n     * Refreshes the access token for the registrar using client credentials.\n     * This method is called periodically to ensure the access token is valid.\n     */\n    async refreshAccessToken() {\n        await this.oauth2Client.clientCredentials().then((token) => {\n            this.accessToken = token.accessToken;\n            const date = new Date();\n            const expirationDate = new Date(token.expiresAt as number);\n            setTimeout(\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                () => this.refreshAccessToken(),\n                expirationDate.getTime() - date.getTime() - 1000,\n            );\n        });\n    }\n\n    /**\n     * Adds a new relying party to the registrar.\n     * This is only needed once, when the relying party is created.\n     */\n    addRp(tenantId: string): Promise {\n        const name = this.configService.getOrThrow('RP_NAME');\n        return relyingPartyControllerRegister({\n            client: this.client,\n            body: {\n                name,\n            },\n        }).then(async (response) => {\n            const config = this.loadConfig(tenantId);\n            if (response.error) {\n                config.id = await this.storeExistingRp(name);\n            } else {\n                config.id = response.data!['id'];\n            }\n            this.saveConfig(config, tenantId);\n            return response.data!['id'];\n        });\n    }\n\n    /**\n     * Stores the existing relying party ID based on the name.\n     * This is used when the relying party already exists in the registrar.\n     * @param name - The name of the relying party.\n     * @returns The ID of the existing relying party.\n     */\n    private storeExistingRp(name: string) {\n        return relyingPartyControllerFindAll({\n            client: this.client,\n            query: {\n                name,\n            },\n        }).then((response) => {\n            return response.data!.find((item) => item.name === name)?.id;\n        });\n    }\n\n    /**\n     * Get the access certificate ID from the registrar.\n     * If there is no access certificate ID in the config, it will add a new one.\n     * If there is one, it will check if it is still valid.\n     * If it is revoked, it will add a new one.\n     * @param config\n     */\n    async getAccessCertificateId(config: RegistrarConfig, tenantId: string) {\n        // if there is no access certificate ID in the config, we need to add it\n        if (!config.accessCertificateId) {\n            await this.addAccessCertificate(config, tenantId);\n        }\n        // if there is one, check if it is still valid\n        await accessCertificateControllerFindOne({\n            client: this.client,\n            path: { rp: config.id, id: config.accessCertificateId! },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error finding access certificate:', res.error);\n            }\n            const data = res.data as AccessCertificateResponse;\n            if (data.revoked) {\n                console.warn('Access certificate is revoked, adding a new one');\n                return this.addAccessCertificate(config, tenantId);\n            }\n        });\n    }\n\n    /**\n     * Add a new access certificate to the registrar.\n     * This is only needed once, when the access certificate is created.\n     * If the access certificate already exists, it will be returned.\n     * @returns\n     */\n    private async addAccessCertificate(\n        config: RegistrarConfig,\n        tenantId: string,\n    ): Promise {\n        const host = this.configService\n            .getOrThrow('PUBLIC_URL')\n            .replace('https://', '');\n        return accessCertificateControllerRegister({\n            client: this.client,\n            body: {\n                publicKey: await this.cryptoService.keyService.getPublicKey(\n                    'pem',\n                    tenantId,\n                ),\n                dns: [host],\n            },\n            path: {\n                rp: config.id,\n            },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error adding access certificate:', res.error);\n                throw new Error('Error adding access certificate');\n            }\n            //store the cert\n            this.cryptoService.storeAccessCertificate(\n                res.data!['crt'],\n                tenantId,\n            );\n            config.accessCertificateId = res.data!['id'];\n            this.saveConfig(config, tenantId);\n            return res.data!['id'];\n        });\n    }\n\n    /**\n     * Add a new registration certificate to the registrar.\n     * This is only needed once, when the registration certificate is created.\n     * If the registration certificate already exists, it will be returned.\n     * @returns\n     */\n    async addRegistrationCertificate(\n        req: RegistrationCertificateRequest,\n        //TODO: check if the dcql_query is covered by the registration certificate. If not, we need to throw an error since we do not know the new purpose for it.\n        dcql_query: any,\n        requestId: string,\n        tenantId: string,\n    ) {\n        const rp = this.loadConfig(tenantId).id;\n\n        //TODO: need to check if the access certificate is bound to the access certificate with the subject. Also that the requested fields are matching.\n\n        const certs =\n            (await registrationCertificateControllerAll({\n                client: this.client,\n                path: {\n                    rp,\n                },\n            }).then((res) =>\n                res.data?.filter(\n                    (cert) =>\n                        cert.revoked == null && cert.id === (req.id as string),\n                ),\n            )) || [];\n\n        if (certs?.length > 0) {\n            return certs[0].jwt;\n        }\n\n        return registrationCertificateControllerRegister({\n            client: this.client,\n            path: {\n                rp,\n            },\n            body: req.body,\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\n                    'Error adding registration certificate:',\n                    res.error,\n                );\n                throw new Error('Error adding registration certificate');\n            }\n\n            //TODO: write the ID to the config so its easier to use it. Easier than writing the comparison algorithm (any maybe someone wants to use a different one)\n            await this.presentationsService.storeRCID(\n                res.data!['id'],\n                requestId,\n                tenantId,\n            );\n            return res.data!['jwt'];\n        });\n    }\n\n    /**\n     * Load the registrar configuration from the config file.\n     * @returns\n     */\n    private loadConfig(tenantId: string): RegistrarConfig {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n\n        if (!existsSync(filePath)) {\n            // If the config file does not exist, create an empty config\n            const initialConfig: RegistrarConfig = {};\n            writeFileSync(filePath, JSON.stringify(initialConfig, null, 2));\n            return initialConfig;\n        }\n        const config = JSON.parse(\n            readFileSync(filePath, 'utf-8'),\n        ) as RegistrarConfig;\n        return config;\n    }\n\n    /**\n     * Save the registrar configuration to the config file.\n     * @param config\n     */\n    private saveConfig(config: RegistrarConfig, tenantId: string) {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n        writeFileSync(filePath, JSON.stringify(config, null, 2));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApiKeyConfig.html":{"url":"classes/ApiKeyConfig.html","title":"class - ApiKeyConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiKeyConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for API key authentication in webhooks.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                headerName\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        headerName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:13\n                        \n                    \n\n            \n                \n                    The name of the header where the API key will be sent.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:19\n                        \n                    \n\n            \n                \n                    The value of the API key to be sent in the header.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app/app.controller.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiExcludeController } from '@nestjs/swagger';\n\n@ApiExcludeController()\n@Controller()\nexport class AppController {\n    @Get()\n    getHello(): string {\n        return 'EUDIPLO is up and running, more information at https://cre8.github.io/eudiplo/latest/';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            WellKnownController\n                        \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CryptoModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            IssuerModule\n                        \n                        \n                            KeyModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            VerifierModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as Joi from 'joi';\nimport { CryptoModule } from './crypto/crypto.module';\nimport { WellKnownController } from './well-known/well-known.controller';\nimport { ISSUER_VALIDATION_SCHEMA, IssuerModule } from './issuer/issuer.module';\nimport { VerifierModule } from './verifier/verifier.module';\nimport {\n    REGISTRAR_VALIDATION_SCHEMA,\n    RegistrarModule,\n} from './registrar/registrar.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join, isAbsolute } from 'path';\nimport { KEY_VALIDATION_SCHEMA, KeyModule } from './crypto/key/key.module';\nimport { CRYPTO_VALIDATION_SCHEMA } from './crypto/key/crypto/crypto.module';\nimport { AppController } from './app/app.controller';\nimport {\n    SESSION_VALIDATION_SCHEMA,\n    SessionModule,\n} from './session/session.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { DatabaseModule } from './database/database.module';\nimport { HealthModule } from './health/health.module';\nimport { AUTH_VALIDATION_SCHEMA, AuthModule } from './auth/auth.module';\nimport { EventEmitterModule } from '@nestjs/event-emitter/dist/event-emitter.module';\nimport { LoggerModule } from 'nestjs-pino';\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            validationSchema: Joi.object({\n                FOLDER: Joi.string().default('./tmp'),\n                RP_NAME: Joi.string().default('EUDIPLO'),\n                LOG_LEVEL: Joi.string()\n                    .valid('trace', 'debug', 'info', 'warn', 'error', 'fatal')\n                    .default(\n                        process.env.NODE_ENV === 'production'\n                            ? 'warn'\n                            : 'debug',\n                    ),\n                ...AUTH_VALIDATION_SCHEMA,\n                ...REGISTRAR_VALIDATION_SCHEMA,\n                ...KEY_VALIDATION_SCHEMA,\n                ...CRYPTO_VALIDATION_SCHEMA,\n                ...ISSUER_VALIDATION_SCHEMA,\n                ...SESSION_VALIDATION_SCHEMA,\n            }),\n            isGlobal: true,\n            expandVariables: true,\n        }),\n        LoggerModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => ({\n                pinoHttp: {\n                    level: configService.get('LOG_LEVEL', 'info'),\n                    transport:\n                        process.env.NODE_ENV === 'production'\n                            ? undefined\n                            : {\n                                  target: 'pino-pretty',\n                                  options: {\n                                      colorize: true,\n                                      singleLine: false,\n                                      translateTime: 'yyyy-mm-dd HH:MM:ss',\n                                      ignore: 'pid,hostname',\n                                  },\n                              },\n                    customProps: (req: any) => ({\n                        sessionId:\n                            req.headers['x-session-id'] ||\n                            req.params?.session ||\n                            req.body?.session_id,\n                        tenantId: req.params?.tenantId,\n                        flow: req.url?.includes('/vci')\n                            ? 'OID4VCI'\n                            : req.url?.includes('/oid4vp')\n                              ? 'OID4VP'\n                              : undefined,\n                    }),\n                    serializers: {\n                        req: (req: any) => ({\n                            method: req.method,\n                            url: req.url,\n                            headers: {\n                                'user-agent': req.headers['user-agent'],\n                                'content-type': req.headers['content-type'],\n                            },\n                            sessionId:\n                                req.headers['x-session-id'] ||\n                                req.params?.session,\n                            tenantId: req.params?.tenantId,\n                        }),\n                        res: (res: any) => ({\n                            statusCode: res.statusCode,\n                        }),\n                    },\n                },\n            }),\n        }),\n        KeyModule.forRoot(),\n        CryptoModule,\n        IssuerModule,\n        VerifierModule,\n        RegistrarModule,\n        ScheduleModule.forRoot(),\n        ServeStaticModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const folder = configService.getOrThrow('FOLDER');\n                const rootPath = isAbsolute(folder)\n                    ? join(folder, 'public')\n                    : join(__dirname, '../', folder, 'public');\n                return [\n                    {\n                        rootPath,\n                    },\n                ];\n            },\n        }),\n        EventEmitterModule.forRoot(),\n        DatabaseModule,\n        SessionModule,\n        DatabaseModule,\n        HealthModule,\n        AuthModule,\n    ],\n    controllers: [WellKnownController, AppController],\n    providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Auth.html":{"url":"interfaces/Auth.html","title":"interface - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/auth.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            in\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            scheme\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        in\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        in:     \"header\" | \"query\" | \"cookie\"\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 'header'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :     \"header\" | \"query\" | \"cookie\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Which part of the request do we use to send the auth?\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 'Authorization'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Header or query parameter name.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scheme\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scheme:     \"basic\" | \"bearer\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"basic\" | \"bearer\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"apiKey\" | \"http\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"apiKey\" | \"http\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type AuthToken = string | undefined;\n\nexport interface Auth {\n    /**\n     * Which part of the request do we use to send the auth?\n     *\n     * @default 'header'\n     */\n    in?: 'header' | 'query' | 'cookie';\n    /**\n     * Header or query parameter name.\n     *\n     * @default 'Authorization'\n     */\n    name?: string;\n    scheme?: 'basic' | 'bearer';\n    type: 'apiKey' | 'http';\n}\n\nexport const getAuthToken = async (\n    auth: Auth,\n    callback: ((auth: Auth) => Promise | AuthToken) | AuthToken,\n): Promise => {\n    const token =\n        typeof callback === 'function' ? await callback(auth) : callback;\n\n    if (!token) {\n        return;\n    }\n\n    if (auth.scheme === 'bearer') {\n        return `Bearer ${token}`;\n    }\n\n    if (auth.scheme === 'basic') {\n        return `Basic ${btoa(token)}`;\n    }\n\n    return token;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOAuth2Token\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getOAuth2Token\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOAuth2Token(body: any, headers: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('oauth2/token')@ApiBody({type: ClientCredentialsDto, examples: undefined})@ApiResponse({status: 200, description: 'OAuth2 token response', type: TokenResponse, example: undefined})@ApiResponse({status: 401, description: 'Invalid client credentials'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:60\n                        \n                    \n\n\n            \n                \n                        OAuth2 Token endpoint - supports client credentials flow only\nAccepts client credentials either in Authorization header (Basic auth) or request body\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Post,\n    Body,\n    UnauthorizedException,\n    Headers,\n} from '@nestjs/common';\nimport { ApiTags, ApiResponse, ApiBody } from '@nestjs/swagger';\nimport { JwtService } from './jwt.service';\nimport { ClientService } from './client.service';\nimport { Public } from './public.decorator';\nimport { ClientCredentialsDto } from './dto/client-credentials.dto';\nimport { TokenPayload } from './token.decorator';\nimport { TokenResponse } from './dto/token-response.dto';\n\n@ApiTags('Authentication', 'Admin')\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        private jwtService: JwtService,\n        private clientService: ClientService,\n    ) {}\n\n    /**\n     * OAuth2 Token endpoint - supports client credentials flow only\n     * Accepts client credentials either in Authorization header (Basic auth) or request body\n     * @param body\n     * @param headers\n     * @returns\n     */\n    @Public()\n    @Post('oauth2/token')\n    @ApiBody({\n        type: ClientCredentialsDto,\n        examples: {\n            client_credentials: {\n                summary: 'Client Credentials Flow',\n                value: {\n                    grant_type: 'client_credentials',\n                    client_id: 'root',\n                    client_secret: 'root',\n                },\n            },\n        },\n    })\n    @ApiResponse({\n        status: 200,\n        description: 'OAuth2 token response',\n        type: TokenResponse,\n        example: {\n            access_token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n            token_type: 'Bearer',\n            expires_in: 86400,\n        },\n    })\n    @ApiResponse({\n        status: 401,\n        description: 'Invalid client credentials',\n    })\n    async getOAuth2Token(\n        @Body() body: any,\n        @Headers() headers: any,\n    ): Promise {\n        if (this.jwtService.isUsingExternalOIDC()) {\n            throw new UnauthorizedException(\n                'OAuth2 token endpoint is not available when using external OIDC provider. Use your external OIDC provider for authentication.',\n            );\n        }\n\n        // Only support client credentials flow\n        if (body.grant_type !== 'client_credentials') {\n            throw new UnauthorizedException(\n                'Only client_credentials grant type is supported',\n            );\n        }\n\n        let clientId: string;\n        let clientSecret: string;\n\n        // Try to extract credentials from Authorization header (Basic auth)\n        const authHeader = headers.authorization;\n        if (authHeader && authHeader.startsWith('Basic ')) {\n            try {\n                const base64Credentials = authHeader.substring(6);\n                const credentials = Buffer.from(\n                    base64Credentials,\n                    'base64',\n                ).toString('ascii');\n                const [id, secret] = credentials.split(':');\n                clientId = id;\n                clientSecret = secret;\n            } catch {\n                throw new UnauthorizedException(\n                    'Invalid Authorization header format',\n                );\n            }\n        } else {\n            // Fall back to request body\n            clientId = body.client_id;\n            clientSecret = body.client_secret;\n        }\n\n        if (!clientId || !clientSecret) {\n            throw new UnauthorizedException(\n                'Client credentials must be provided either in Authorization header (Basic auth) or request body',\n            );\n        }\n\n        const client = this.clientService.validateClient(\n            clientId,\n            clientSecret,\n        );\n        if (!client) {\n            throw new UnauthorizedException('Invalid client credentials');\n        }\n\n        const payload: TokenPayload = {\n            sub: client.id,\n        };\n\n        const token = await this.jwtService.generateToken(payload, {\n            expiresIn: '24h',\n            audience: 'eudiplo-service',\n        });\n\n        return {\n            access_token: token,\n            token_type: 'Bearer',\n            expires_in: 86400, // 24 hours in seconds\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\n\n\nJwtService \n\nJwtService \n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nClientService\n\nClientService\n\nAuthModule -->\n\nClientService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClientService\n                        \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './jwt.strategy';\nimport { JwtAuthGuard } from './auth.guard';\nimport { JwtService } from './jwt.service';\nimport { AuthController } from './auth.controller';\nimport { ClientService } from './client.service';\nimport * as Joi from 'joi';\nimport { ConfigModule } from '@nestjs/config';\n\nexport const AUTH_VALIDATION_SCHEMA = {\n    OIDC: Joi.string().optional(),\n    KEYCLOAK_INTERNAL_ISSUER_URL: Joi.when('OIDC', {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    KEYCLOAK_CLIENT_ID: Joi.when('OIDC', {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    JWT_SECRET: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n    JWT_ISSUER: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().optional().default('eudiplo-service'),\n    }),\n    JWT_EXPIRES_IN: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default('24h'),\n    }),\n    AUTH_CLIENT_SECRET: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n    AUTH_CLIENT_ID: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n};\n\n@Module({\n    imports: [PassportModule, ConfigModule],\n    providers: [JwtStrategy, JwtAuthGuard, JwtService, ClientService],\n    controllers: [AuthController],\n    exports: [PassportModule, JwtStrategy, JwtAuthGuard, JwtService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthResponse.html":{"url":"interfaces/AuthResponse.html","title":"interface - AuthResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/auth-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthResponse DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            state\n                                        \n                                \n                                \n                                        \n                                            vp_token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The state parameter to maintain state between the request and callback.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vp_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        vp_token:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The VP token containing the presentation data.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AuthResponse {\n    /**\n     * The VP token containing the presentation data.\n     */\n    vp_token: {\n        /**\n         * Key-value pairs representing the VP token data.\n         */\n        [key: string]: string;\n    };\n    /**\n     * The state parameter to maintain state between the request and callback.\n     */\n    state: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizationResponse.html":{"url":"classes/AuthorizationResponse.html","title":"class - AuthorizationResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizationResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/authorization-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the authorization response containing the VP token.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                response\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/authorization-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The response string containing the authorization details.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\n/**\n * DTO for the authorization response containing the VP token.\n */\nexport class AuthorizationResponse {\n    /**\n     * The response string containing the authorization details.\n     */\n    @IsString()\n    response: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthorizeController.html":{"url":"controllers/AuthorizeController.html","title":"controller - AuthorizeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthorizeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/authorize\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI authorization endpoints.\nThis controller handles the authorization requests, token requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authorizationChallengeEndpoint\n                            \n                            \n                                    \n                                    Async\n                                authorize\n                            \n                            \n                                    \n                                    \n                                    Async\n                                par\n                            \n                            \n                                    \n                                    Async\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response, body: AuthorizeQueries, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('challenge')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:98\n                        \n                    \n\n\n            \n                \n                        Endpoint for the authorization challenge.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        authorize\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorize(queries: AuthorizeQueries, res: Response, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:36\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Authorization Request.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        par\n                        \n                    \n                \n            \n            \n                \n                        \n                    par(body: AuthorizeQueries, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({description: 'Pushed Authorization Request', type: AuthorizeQueries})@Post('par')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Pushed Authorization Request (PAR).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        token\n                        \n                    \n                \n            \n            \n                \n                        \n                    token(body: any, req: Request, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('token')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:82\n                        \n                    \n\n\n            \n                \n                        Endpoint to validate the token request.\nThis endpoint is used to exchange the authorization code for an access token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport {\n    Body,\n    Controller,\n    Get,\n    Param,\n    Post,\n    Query,\n    Req,\n    Res,\n} from '@nestjs/common';\nimport type { Request, Response } from 'express';\nimport { AuthorizeService } from './authorize.service';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { SessionService } from '../../session/session.service';\nimport { ParResponseDto } from './dto/par-response.dto';\nimport { ApiBody } from '@nestjs/swagger';\n\n/**\n * Controller for the OpenID4VCI authorization endpoints.\n * This controller handles the authorization requests, token requests.\n */\n@Controller(':tenantId/authorize')\nexport class AuthorizeController {\n    constructor(\n        private readonly authorizeService: AuthorizeService,\n        private sessionService: SessionService,\n    ) {}\n\n    /**\n     * Endpoint to handle the Authorization Request.\n     * @param queries\n     * @param res\n     */\n    @Get()\n    async authorize(\n        @Query() queries: AuthorizeQueries,\n        @Res() res: Response,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.authorizeService.sendAuthorizationResponse(\n            queries,\n            res,\n            tenantId,\n        );\n    }\n\n    /**\n     * Endpoint to handle the Pushed Authorization Request (PAR).\n     * @param body\n     * @returns\n     */\n    @ApiBody({\n        description: 'Pushed Authorization Request',\n        type: AuthorizeQueries,\n    })\n    @Post('par')\n    async par(\n        @Body() body: AuthorizeQueries,\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        const request_uri = `urn:${randomUUID()}`;\n        // save both so we can retrieve the session also via the request_uri in the authorize step.\n        await this.sessionService.add(body.issuer_state!, tenantId, {\n            request_uri,\n            auth_queries: body,\n        });\n        return {\n            expires_in: 500,\n            request_uri,\n        };\n    }\n\n    /**\n     * Endpoint to validate the token request.\n     * This endpoint is used to exchange the authorization code for an access token.\n     * @param body\n     * @param req\n     * @returns\n     */\n    @Post('token')\n    async token(\n        @Body() body: any,\n        @Req() req: Request,\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        //TODO: define body\n        return this.authorizeService.validateTokenRequest(body, req, tenantId);\n    }\n\n    /**\n     * Endpoint for the authorization challenge.\n     * @param res\n     * @param body\n     * @returns\n     */\n    @Post('challenge')\n    authorizationChallengeEndpoint(\n        @Res() res: Response,\n        @Body() body: AuthorizeQueries,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.authorizeService.authorizationChallengeEndpoint(\n            res,\n            body,\n            tenantId,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizeQueries.html":{"url":"classes/AuthorizeQueries.html","title":"class - AuthorizeQueries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizeQueries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/authorize-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                auth_session\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                client_id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge_method\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                dpop_jkt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                issuer_state\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                redirect_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resource\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        auth_session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge_method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        dpop_jkt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        issuer_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        redirect_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from 'class-validator';\n\nexport class AuthorizeQueries {\n    @IsOptional()\n    @IsString()\n    issuer_state?: string;\n    @IsOptional()\n    @IsString()\n    response_type?: string;\n    @IsOptional()\n    @IsString()\n    client_id?: string;\n    @IsOptional()\n    @IsString()\n    redirect_uri?: string;\n    @IsOptional()\n    @IsString()\n    resource?: string;\n    @IsOptional()\n    @IsString()\n    scope?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge_method?: string;\n    @IsOptional()\n    @IsString()\n    dpop_jkt?: string;\n    @IsOptional()\n    @IsString()\n    request_uri?: string;\n    @IsOptional()\n    @IsString()\n    auth_session?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthorizeService.html":{"url":"injectables/AuthorizeService.html","title":"injectable - AuthorizeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthorizeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authorizationChallengeEndpoint\n                            \n                            \n                                authzMetadata\n                            \n                            \n                                getAuthorizationServer\n                            \n                            \n                                    Async\n                                parseChallengeRequest\n                            \n                            \n                                    Private\n                                    Async\n                                sendAuthorizationCode\n                            \n                            \n                                    Async\n                                sendAuthorizationResponse\n                            \n                            \n                                    Async\n                                setAuthCode\n                            \n                            \n                                    Async\n                                validateTokenRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, oid4vpService: Oid4vpService, sessionService: SessionService, credentialsService: CredentialsService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/authorize/authorize.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oid4vpService\n                                                  \n                                                        \n                                                                        Oid4vpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialsService\n                                                  \n                                                        \n                                                                        CredentialsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response>, body: AuthorizeQueries, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:181\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \nauthzMetadata(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         AuthorizationServerMetadata\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthorizationServer\n                        \n                    \n                \n            \n            \n                \ngetAuthorizationServer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServer\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        parseChallengeRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseChallengeRequest(body: AuthorizeQueries, tenantId: string, webhook?: WebhookConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:163\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                webhook\n                                            \n                                                            WebhookConfig\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        sendAuthorizationCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationCode(res: Response, issuer_state: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:222\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendAuthorizationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationResponse(queries: AuthorizeQueries, res: Response>, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setAuthCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAuthCode(issuer_state: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:236\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateTokenRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateTokenRequest(body: any, req: Request, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n} from '@openid4vc/oauth2';\nimport type { Request, Response } from 'express';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { getHeadersFromRequest } from '../oid4vci/util';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { Oid4vpService } from '../../verifier/oid4vp/oid4vp.service';\nimport { SessionService } from '../../session/session.service';\nimport { CredentialsService } from '../credentials/credentials.service';\nimport { WebhookConfig } from '../../utils/webhook.dto';\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private credentialsService: CredentialsService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(tenantId: string): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow('PUBLIC_URL') +\n            `/${tenantId}`;\n        return this.getAuthorizationServer(\n            tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: ['ES256'],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n        tenantId: string,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        'request_uri not found or not provided in the request',\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                'request_uri not found or not provided in the request',\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!, tenantId);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        tenantId: string,\n    ): Promise {\n        const url = `${this.configService.getOrThrow('PUBLIC_URL')}${req.url}`;\n\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const session = await this.sessionService.getBy({\n            authorization_code: body.code,\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        }\n        const authorizationServerMetadata = this.authzMetadata(tenantId);\n        //TODO: handle response\n        const { dpop } = await this.getAuthorizationServer(\n            tenantId,\n        ).verifyAuthorizationCodeAccessTokenRequest({\n            grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n            accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n            expectedCode: session.authorization_code as string,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n            dpop: {\n                required: true,\n                allowedSigningAlgs:\n                    authorizationServerMetadata.dpop_signing_alg_values_supported,\n                jwt: parsedAccessTokenRequest.dpop?.jwt,\n            },\n            authorizationServerMetadata,\n        });\n\n        const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow('PUBLIC_URL')}/${tenantId}`,\n            signer: {\n                method: 'jwk',\n                alg: 'ES256',\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            cNonce,\n            cNonceExpiresIn: 100,\n            clientId: 'wallet', // must be same as the client attestation\n            dpop,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest('pid', { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: 'insufficient_authorization',\n            auth_session,\n            presentation,\n            error_description:\n                'Presentation of credential required before issuance',\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        tenantId: string,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n            //check if session has valid presentation, we assume for now\n            await this.sendAuthorizationCode(res, body.auth_session, tenantId);\n            return;\n        }\n\n        const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        }\n        const ids = session.offer!.credential_configuration_ids;\n        const config = await this.credentialsService.getConfigById(\n            ids[0],\n            tenantId,\n        );\n        if (config.presentation_during_issuance) {\n            const webhook = config.presentation_during_issuance.webhook;\n            const response = await this.parseChallengeRequest(\n                body,\n                tenantId,\n                webhook,\n            );\n            res.status(400).send(response);\n        } else {\n            await this.sendAuthorizationCode(res, body.issuer_state!, tenantId);\n        }\n    }\n\n    private async sendAuthorizationCode(\n        res: Response,\n        issuer_state: string,\n        tenantId: string,\n    ) {\n        const authorization_code = await this.setAuthCode(\n            issuer_state,\n            tenantId,\n        );\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string, tenantId: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, tenantId, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Client.html":{"url":"interfaces/Client.html","title":"interface - Client","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Client\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { existsSync, mkdirSync, writeFileSync } from 'fs';\nimport { join } from 'path';\nimport { TENANT_EVENTS } from './tenant-events';\n\n// Client interface for service integration\nexport interface Client {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class ClientService implements OnApplicationBootstrap {\n    private clients: Client[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private eventEmitter: EventEmitter2,\n    ) {}\n\n    onApplicationBootstrap() {\n        // were are ignoring clients that are not used anymore for now. Need to implement a proper cleanup mechanism later\n        const clients = this.getClients();\n        clients.forEach((client) => {\n            this.setUpClient(client.id);\n        });\n    }\n\n    /**\n     * Get clients from configuration\n     * @returns\n     */\n    private getClients(): Client[] {\n        if (!this.clients) {\n            this.clients = this.loadClients();\n        }\n        return this.clients;\n    }\n\n    /**\n     * Load clients from configuration\n     */\n    private loadClients(): Client[] {\n        // Default clients for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow('AUTH_CLIENT_ID'),\n                secret: this.configService.getOrThrow(\n                    'AUTH_CLIENT_SECRET',\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate client credentials (OAuth2 Client Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateClient(clientId: string, clientSecret: string): Client | null {\n        const client = this.getClients().find((c) => c.id === clientId);\n\n        if (!client || client.secret !== clientSecret) {\n            return null;\n        }\n\n        return client;\n    }\n\n    /**\n     * Find client by ID\n     */\n    findClientById(clientId: string): Client | null {\n        return this.getClients().find((c) => c.id === clientId) || null;\n    }\n\n    /**\n     * Sends an event to set up a client, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    setUpClient(id: string) {\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            id,\n        );\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n\n        const displayInfo = [\n            {\n                name: 'EUDI Wallet dev',\n                locale: 'de-DE',\n                logo: {\n                    uri: '/issuer.png',\n                    url: '/issuer.png',\n                },\n            },\n        ];\n        writeFileSync(\n            join(folder, 'display.json'),\n            JSON.stringify(displayInfo, null, 2),\n        );\n\n        this.eventEmitter.emit(TENANT_EVENTS.TENANT_INIT, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Client-1.html":{"url":"interfaces/Client-1.html","title":"interface - Client-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Client\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            buildUrl\n                                        \n                                \n                                \n                                        \n                                            connect\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                        \n                                            get\n                                        \n                                \n                                \n                                        \n                                            getConfig\n                                        \n                                \n                                \n                                        \n                                            head\n                                        \n                                \n                                \n                                        \n                                            options\n                                        \n                                \n                                \n                                        \n                                            patch\n                                        \n                                \n                                \n                                        \n                                            post\n                                        \n                                \n                                \n                                        \n                                            put\n                                        \n                                \n                                \n                                        \n                                            request\n                                        \n                                \n                                \n                                        \n                                            setConfig\n                                        \n                                \n                                \n                                        \n                                            trace\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buildUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        buildUrl:         BuildUrlFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BuildUrlFn\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Returns the final request URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        connect\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        connect:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        get\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        get:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getConfig\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getConfig:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        head\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        head:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        patch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        patch:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        post\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        post:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        put\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        put:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        request\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        request:         RequestFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RequestFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        setConfig\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        setConfig:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trace\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trace:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type { Auth, AuthToken } from './auth';\nimport type {\n    BodySerializer,\n    QuerySerializer,\n    QuerySerializerOptions,\n} from './bodySerializer';\n\nexport interface Client {\n    /**\n     * Returns the final request URL.\n     */\n    buildUrl: BuildUrlFn;\n    connect: MethodFn;\n    delete: MethodFn;\n    get: MethodFn;\n    getConfig: () => Config;\n    head: MethodFn;\n    options: MethodFn;\n    patch: MethodFn;\n    post: MethodFn;\n    put: MethodFn;\n    request: RequestFn;\n    setConfig: (config: Config) => Config;\n    trace: MethodFn;\n}\n\nexport interface Config {\n    /**\n     * Auth token or a function returning auth token. The resolved value will be\n     * added to the request payload as defined by its `security` array.\n     */\n    auth?: ((auth: Auth) => Promise | AuthToken) | AuthToken;\n    /**\n     * A function for serializing request body parameter. By default,\n     * {@link JSON.stringify()} will be used.\n     */\n    bodySerializer?: BodySerializer | null;\n    /**\n     * An object containing any HTTP headers that you want to pre-populate your\n     * `Headers` object with.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/Headers/Headers#init See more}\n     */\n    headers?:\n        | RequestInit['headers']\n        | Record;\n    /**\n     * The request method.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#method See more}\n     */\n    method?:\n        | 'CONNECT'\n        | 'DELETE'\n        | 'GET'\n        | 'HEAD'\n        | 'OPTIONS'\n        | 'PATCH'\n        | 'POST'\n        | 'PUT'\n        | 'TRACE';\n    /**\n     * A function for serializing request query parameters. By default, arrays\n     * will be exploded in form style, objects will be exploded in deepObject\n     * style, and reserved characters are percent-encoded.\n     *\n     * This method will have no effect if the native `paramsSerializer()` Axios\n     * API function is used.\n     *\n     * {@link https://swagger.io/docs/specification/serialization/#query View examples}\n     */\n    querySerializer?: QuerySerializer | QuerySerializerOptions;\n    /**\n     * A function validating request data. This is useful if you want to ensure\n     * the request conforms to the desired shape, so it can be safely sent to\n     * the server.\n     */\n    requestValidator?: (data: unknown) => Promise;\n    /**\n     * A function transforming response data before it's returned. This is useful\n     * for post-processing data, e.g. converting ISO strings into Date objects.\n     */\n    responseTransformer?: (data: unknown) => Promise;\n    /**\n     * A function validating response data. This is useful if you want to ensure\n     * the response conforms to the desired shape, so it can be safely passed to\n     * the transformers and returned to the user.\n     */\n    responseValidator?: (data: unknown) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClientCredentialsDto.html":{"url":"classes/ClientCredentialsDto.html","title":"class - ClientCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClientCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/client-credentials.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                client_id\n                            \n                            \n                                    \n                                client_secret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class ClientCredentialsDto {\n    @IsString()\n    client_id: string;\n    @IsString()\n    client_secret: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClientOptions.html":{"url":"interfaces/ClientOptions.html","title":"interface - ClientOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ClientOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            baseUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            responseStyle\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            throwOnError\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        baseUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseStyle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseStyle:         ResponseStyle\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ResponseStyle\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        throwOnError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        throwOnError:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type { Auth } from '../core/auth';\nimport type { Client as CoreClient, Config as CoreConfig } from '../core/types';\nimport type { Middleware } from './utils';\n\nexport type ResponseStyle = 'data' | 'fields';\n\nexport interface Config\n    extends Omit,\n        CoreConfig {\n    /**\n     * Base URL for all requests made by this client.\n     */\n    baseUrl?: T['baseUrl'];\n    /**\n     * Fetch API implementation. You can use this option to provide a custom\n     * fetch instance.\n     *\n     * @default globalThis.fetch\n     */\n    fetch?: (request: Request) => ReturnType;\n    /**\n     * Please don't use the Fetch client for Next.js applications. The `next`\n     * options won't have any effect.\n     *\n     * Install {@link https://www.npmjs.com/package/@hey-api/client-next `@hey-api/client-next`} instead.\n     */\n    next?: never;\n    /**\n     * Return the response data parsed in a specified format. By default, `auto`\n     * will infer the appropriate method from the `Content-Type` response header.\n     * You can override this behavior with any of the {@link Body} methods.\n     * Select `stream` if you don't want to parse response data at all.\n     *\n     * @default 'auto'\n     */\n    parseAs?:\n        | 'arrayBuffer'\n        | 'auto'\n        | 'blob'\n        | 'formData'\n        | 'json'\n        | 'stream'\n        | 'text';\n    /**\n     * Should we return only data or multiple fields (data, error, response, etc.)?\n     *\n     * @default 'fields'\n     */\n    responseStyle?: ResponseStyle;\n    /**\n     * Throw an error instead of returning it in the response?\n     *\n     * @default false\n     */\n    throwOnError?: T['throwOnError'];\n}\n\nexport interface RequestOptions extends Config {\n    /**\n     * Any body that you want to add to your request.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#body}\n     */\n    body?: unknown;\n    path?: Record;\n    query?: Record;\n    /**\n     * Security mechanism(s) to use for the request.\n     */\n    security?: ReadonlyArray;\n    url: Url;\n}\n\nexport type RequestResult = ThrowOnError extends true\n    ? Promise\n                  ? TData[keyof TData]\n                  : TData\n              : {\n                    data: TData extends Record\n                        ? TData[keyof TData]\n                        : TData;\n                    request: Request;\n                    response: Response;\n                }\n      >\n    : Promise\n                          ? TData[keyof TData]\n                          : TData)\n                    | undefined\n              : (\n                    | {\n                          data: TData extends Record\n                              ? TData[keyof TData]\n                              : TData;\n                          error: undefined;\n                      }\n                    | {\n                          data: undefined;\n                          error: TError extends Record\n                              ? TError[keyof TError]\n                              : TError;\n                      }\n                ) & {\n                    request: Request;\n                    response: Response;\n                }\n      >;\n\nexport interface ClientOptions {\n    baseUrl?: string;\n    responseStyle?: ResponseStyle;\n    throwOnError?: boolean;\n}\n\ntype MethodFn = (\n    options: Omit, 'method'>,\n) => RequestResult;\n\ntype RequestFn = (\n    options: Omit, 'method'> &\n        Pick>, 'method'>,\n) => RequestResult;\n\ntype BuildUrlFn = ;\n        query?: Record;\n        url: string;\n    },\n>(\n    options: Pick & Options,\n) => string;\n\nexport type Client = CoreClient & {\n    interceptors: Middleware;\n};\n\n/**\n * The `createClientConfig()` function will be called on client initialization\n * and the returned object will become the client's initial configuration.\n *\n * You may want to initialize your client this way instead of calling\n * `setConfig()`. This is useful for example if you're using Next.js\n * to ensure your client always has the correct values.\n */\nexport type CreateClientConfig = (\n    override?: Config,\n) => Config & T>;\n\nexport interface TDataShape {\n    body?: unknown;\n    headers?: unknown;\n    path?: unknown;\n    query?: unknown;\n    url: string;\n}\n\ntype OmitKeys = Pick>;\n\nexport type Options = OmitKeys,\n    'body' | 'path' | 'query' | 'url'\n> &\n    Omit;\n\nexport type OptionsLegacyParser = TData extends { body?: any }\n    ? TData extends { headers?: any }\n        ? OmitKeys,\n              'body' | 'headers' | 'url'\n          > &\n              TData\n        : OmitKeys,\n              'body' | 'url'\n          > &\n              TData &\n              Pick, 'headers'>\n    : TData extends { headers?: any }\n      ? OmitKeys,\n            'headers' | 'url'\n        > &\n            TData &\n            Pick, 'body'>\n      : OmitKeys, 'url'> & TData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClientService.html":{"url":"injectables/ClientService.html","title":"injectable - ClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clients\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findClientById\n                            \n                            \n                                    Private\n                                getClients\n                            \n                            \n                                    Private\n                                loadClients\n                            \n                            \n                                onApplicationBootstrap\n                            \n                            \n                                setUpClient\n                            \n                            \n                                validateClient\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/auth/client.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findClientById\n                        \n                    \n                \n            \n            \n                \nfindClientById(clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Find client by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Client | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Get clients from configuration\n\n\n                        \n                            Returns :         Client[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Load clients from configuration\n\n\n                        \n                            Returns :         Client[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \nonApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setUpClient\n                        \n                    \n                \n            \n            \n                \nsetUpClient(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Sends an event to set up a client, allowing all other services to listen and react accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateClient\n                        \n                    \n                \n            \n            \n                \nvalidateClient(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Validate client credentials (OAuth2 Client Credentials flow)\nThis is the primary authentication method for service integration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Client | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clients\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Client[] | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/auth/client.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { existsSync, mkdirSync, writeFileSync } from 'fs';\nimport { join } from 'path';\nimport { TENANT_EVENTS } from './tenant-events';\n\n// Client interface for service integration\nexport interface Client {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class ClientService implements OnApplicationBootstrap {\n    private clients: Client[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private eventEmitter: EventEmitter2,\n    ) {}\n\n    onApplicationBootstrap() {\n        // were are ignoring clients that are not used anymore for now. Need to implement a proper cleanup mechanism later\n        const clients = this.getClients();\n        clients.forEach((client) => {\n            this.setUpClient(client.id);\n        });\n    }\n\n    /**\n     * Get clients from configuration\n     * @returns\n     */\n    private getClients(): Client[] {\n        if (!this.clients) {\n            this.clients = this.loadClients();\n        }\n        return this.clients;\n    }\n\n    /**\n     * Load clients from configuration\n     */\n    private loadClients(): Client[] {\n        // Default clients for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow('AUTH_CLIENT_ID'),\n                secret: this.configService.getOrThrow(\n                    'AUTH_CLIENT_SECRET',\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate client credentials (OAuth2 Client Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateClient(clientId: string, clientSecret: string): Client | null {\n        const client = this.getClients().find((c) => c.id === clientId);\n\n        if (!client || client.secret !== clientSecret) {\n            return null;\n        }\n\n        return client;\n    }\n\n    /**\n     * Find client by ID\n     */\n    findClientById(clientId: string): Client | null {\n        return this.getClients().find((c) => c.id === clientId) || null;\n    }\n\n    /**\n     * Sends an event to set up a client, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    setUpClient(id: string) {\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            id,\n        );\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n\n        const displayInfo = [\n            {\n                name: 'EUDI Wallet dev',\n                locale: 'de-DE',\n                logo: {\n                    uri: '/issuer.png',\n                    url: '/issuer.png',\n                },\n            },\n        ];\n        writeFileSync(\n            join(folder, 'display.json'),\n            JSON.stringify(displayInfo, null, 2),\n        );\n\n        this.eventEmitter.emit(TENANT_EVENTS.TENANT_INIT, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Config.html":{"url":"interfaces/Config.html","title":"interface - Config","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Omit\n                            CoreConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            baseUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fetch\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            next\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            parseAs\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            responseStyle\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            throwOnError\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        baseUrl:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Base URL for all requests made by this client.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fetch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fetch:         function\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : globalThis.fetch\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Fetch API implementation. You can use this option to provide a custom\nfetch instance.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        next\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        next:     never\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     never\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Please don't use the Fetch client for Next.js applications. The next\noptions won't have any effect.\nInstall @hey-api/client-next instead.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parseAs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        parseAs:     \"arrayBuffer\" | \"auto\" | \"blob\" | \"formData\" | \"json\" | \"stream\" | \"text\"\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 'auto'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :     \"arrayBuffer\" | \"auto\" | \"blob\" | \"formData\" | \"json\" | \"stream\" | \"text\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Return the response data parsed in a specified format. By default, auto\nwill infer the appropriate method from the Content-Type response header.\nYou can override this behavior with any of the Body methods.\nSelect stream if you don't want to parse response data at all.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseStyle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseStyle:         ResponseStyle\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 'fields'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         ResponseStyle\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Should we return only data or multiple fields (data, error, response, etc.)?\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        throwOnError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        throwOnError:     T\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : false\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Throw an error instead of returning it in the response?\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import type { Auth } from '../core/auth';\nimport type { Client as CoreClient, Config as CoreConfig } from '../core/types';\nimport type { Middleware } from './utils';\n\nexport type ResponseStyle = 'data' | 'fields';\n\nexport interface Config\n    extends Omit,\n        CoreConfig {\n    /**\n     * Base URL for all requests made by this client.\n     */\n    baseUrl?: T['baseUrl'];\n    /**\n     * Fetch API implementation. You can use this option to provide a custom\n     * fetch instance.\n     *\n     * @default globalThis.fetch\n     */\n    fetch?: (request: Request) => ReturnType;\n    /**\n     * Please don't use the Fetch client for Next.js applications. The `next`\n     * options won't have any effect.\n     *\n     * Install {@link https://www.npmjs.com/package/@hey-api/client-next `@hey-api/client-next`} instead.\n     */\n    next?: never;\n    /**\n     * Return the response data parsed in a specified format. By default, `auto`\n     * will infer the appropriate method from the `Content-Type` response header.\n     * You can override this behavior with any of the {@link Body} methods.\n     * Select `stream` if you don't want to parse response data at all.\n     *\n     * @default 'auto'\n     */\n    parseAs?:\n        | 'arrayBuffer'\n        | 'auto'\n        | 'blob'\n        | 'formData'\n        | 'json'\n        | 'stream'\n        | 'text';\n    /**\n     * Should we return only data or multiple fields (data, error, response, etc.)?\n     *\n     * @default 'fields'\n     */\n    responseStyle?: ResponseStyle;\n    /**\n     * Throw an error instead of returning it in the response?\n     *\n     * @default false\n     */\n    throwOnError?: T['throwOnError'];\n}\n\nexport interface RequestOptions extends Config {\n    /**\n     * Any body that you want to add to your request.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#body}\n     */\n    body?: unknown;\n    path?: Record;\n    query?: Record;\n    /**\n     * Security mechanism(s) to use for the request.\n     */\n    security?: ReadonlyArray;\n    url: Url;\n}\n\nexport type RequestResult = ThrowOnError extends true\n    ? Promise\n                  ? TData[keyof TData]\n                  : TData\n              : {\n                    data: TData extends Record\n                        ? TData[keyof TData]\n                        : TData;\n                    request: Request;\n                    response: Response;\n                }\n      >\n    : Promise\n                          ? TData[keyof TData]\n                          : TData)\n                    | undefined\n              : (\n                    | {\n                          data: TData extends Record\n                              ? TData[keyof TData]\n                              : TData;\n                          error: undefined;\n                      }\n                    | {\n                          data: undefined;\n                          error: TError extends Record\n                              ? TError[keyof TError]\n                              : TError;\n                      }\n                ) & {\n                    request: Request;\n                    response: Response;\n                }\n      >;\n\nexport interface ClientOptions {\n    baseUrl?: string;\n    responseStyle?: ResponseStyle;\n    throwOnError?: boolean;\n}\n\ntype MethodFn = (\n    options: Omit, 'method'>,\n) => RequestResult;\n\ntype RequestFn = (\n    options: Omit, 'method'> &\n        Pick>, 'method'>,\n) => RequestResult;\n\ntype BuildUrlFn = ;\n        query?: Record;\n        url: string;\n    },\n>(\n    options: Pick & Options,\n) => string;\n\nexport type Client = CoreClient & {\n    interceptors: Middleware;\n};\n\n/**\n * The `createClientConfig()` function will be called on client initialization\n * and the returned object will become the client's initial configuration.\n *\n * You may want to initialize your client this way instead of calling\n * `setConfig()`. This is useful for example if you're using Next.js\n * to ensure your client always has the correct values.\n */\nexport type CreateClientConfig = (\n    override?: Config,\n) => Config & T>;\n\nexport interface TDataShape {\n    body?: unknown;\n    headers?: unknown;\n    path?: unknown;\n    query?: unknown;\n    url: string;\n}\n\ntype OmitKeys = Pick>;\n\nexport type Options = OmitKeys,\n    'body' | 'path' | 'query' | 'url'\n> &\n    Omit;\n\nexport type OptionsLegacyParser = TData extends { body?: any }\n    ? TData extends { headers?: any }\n        ? OmitKeys,\n              'body' | 'headers' | 'url'\n          > &\n              TData\n        : OmitKeys,\n              'body' | 'url'\n          > &\n              TData &\n              Pick, 'headers'>\n    : TData extends { headers?: any }\n      ? OmitKeys,\n            'headers' | 'url'\n        > &\n            TData &\n            Pick, 'body'>\n      : OmitKeys, 'url'> & TData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Config-1.html":{"url":"interfaces/Config-1.html","title":"interface - Config-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            auth\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            bodySerializer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            method\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            querySerializer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            requestValidator\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            responseTransformer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            responseValidator\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        auth\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        auth:          | AuthToken\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :          | AuthToken\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Auth token or a function returning auth token. The resolved value will be\nadded to the request payload as defined by its security array.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bodySerializer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bodySerializer:         BodySerializer | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BodySerializer | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function for serializing request body parameter. By default,\nJSON.stringify() will be used.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:      | Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :      | Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An object containing any HTTP headers that you want to pre-populate your\nHeaders object with.\nSee more\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:     \"CONNECT\" | \"DELETE\" | \"GET\" | \"HEAD\" | \"OPTIONS\" | \"PATCH\" | \"POST\" | \"PUT\" | \"TRACE\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"CONNECT\" | \"DELETE\" | \"GET\" | \"HEAD\" | \"OPTIONS\" | \"PATCH\" | \"POST\" | \"PUT\" | \"TRACE\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The request method.\nSee more\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        querySerializer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        querySerializer:     QuerySerializer | QuerySerializerOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     QuerySerializer | QuerySerializerOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function for serializing request query parameters. By default, arrays\nwill be exploded in form style, objects will be exploded in deepObject\nstyle, and reserved characters are percent-encoded.\nThis method will have no effect if the native paramsSerializer() Axios\nAPI function is used.\nView examples\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requestValidator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        requestValidator:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function validating request data. This is useful if you want to ensure\nthe request conforms to the desired shape, so it can be safely sent to\nthe server.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseTransformer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseTransformer:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function transforming response data before it's returned. This is useful\nfor post-processing data, e.g. converting ISO strings into Date objects.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseValidator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseValidator:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function validating response data. This is useful if you want to ensure\nthe response conforms to the desired shape, so it can be safely passed to\nthe transformers and returned to the user.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import type { Auth, AuthToken } from './auth';\nimport type {\n    BodySerializer,\n    QuerySerializer,\n    QuerySerializerOptions,\n} from './bodySerializer';\n\nexport interface Client {\n    /**\n     * Returns the final request URL.\n     */\n    buildUrl: BuildUrlFn;\n    connect: MethodFn;\n    delete: MethodFn;\n    get: MethodFn;\n    getConfig: () => Config;\n    head: MethodFn;\n    options: MethodFn;\n    patch: MethodFn;\n    post: MethodFn;\n    put: MethodFn;\n    request: RequestFn;\n    setConfig: (config: Config) => Config;\n    trace: MethodFn;\n}\n\nexport interface Config {\n    /**\n     * Auth token or a function returning auth token. The resolved value will be\n     * added to the request payload as defined by its `security` array.\n     */\n    auth?: ((auth: Auth) => Promise | AuthToken) | AuthToken;\n    /**\n     * A function for serializing request body parameter. By default,\n     * {@link JSON.stringify()} will be used.\n     */\n    bodySerializer?: BodySerializer | null;\n    /**\n     * An object containing any HTTP headers that you want to pre-populate your\n     * `Headers` object with.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/Headers/Headers#init See more}\n     */\n    headers?:\n        | RequestInit['headers']\n        | Record;\n    /**\n     * The request method.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#method See more}\n     */\n    method?:\n        | 'CONNECT'\n        | 'DELETE'\n        | 'GET'\n        | 'HEAD'\n        | 'OPTIONS'\n        | 'PATCH'\n        | 'POST'\n        | 'PUT'\n        | 'TRACE';\n    /**\n     * A function for serializing request query parameters. By default, arrays\n     * will be exploded in form style, objects will be exploded in deepObject\n     * style, and reserved characters are percent-encoded.\n     *\n     * This method will have no effect if the native `paramsSerializer()` Axios\n     * API function is used.\n     *\n     * {@link https://swagger.io/docs/specification/serialization/#query View examples}\n     */\n    querySerializer?: QuerySerializer | QuerySerializerOptions;\n    /**\n     * A function validating request data. This is useful if you want to ensure\n     * the request conforms to the desired shape, so it can be safely sent to\n     * the server.\n     */\n    requestValidator?: (data: unknown) => Promise;\n    /**\n     * A function transforming response data before it's returned. This is useful\n     * for post-processing data, e.g. converting ISO strings into Date objects.\n     */\n    responseTransformer?: (data: unknown) => Promise;\n    /**\n     * A function validating response data. This is useful if you want to ensure\n     * the response conforms to the desired shape, so it can be safely passed to\n     * the transformers and returned to the user.\n     */\n    responseValidator?: (data: unknown) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialIssuerMetadataDto.html":{"url":"classes/CredentialIssuerMetadataDto.html","title":"class - CredentialIssuerMetadataDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialIssuerMetadataDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/credential-issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the metadata for a credential issuer.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_server\n                            \n                            \n                                authorization_servers\n                            \n                            \n                                batch_credential_issuance\n                            \n                            \n                                credential_configurations_supported\n                            \n                            \n                                credential_endpoint\n                            \n                            \n                                credential_issuer\n                            \n                            \n                                display\n                            \n                            \n                                notification_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_server\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:41\n                        \n                    \n\n            \n                \n                    The URL of the preferred authorization server.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_servers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:12\n                        \n                    \n\n            \n                \n                    List of authorization servers that support the credential issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        batch_credential_issuance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:24\n                        \n                    \n\n            \n                \n                    Information about batch credential issuance.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_configurations_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:37\n                        \n                    \n\n            \n                \n                    Object of credentials configurations supported by the issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:16\n                        \n                    \n\n            \n                \n                    The URL of the credential issuance endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:8\n                        \n                    \n\n            \n                \n                    The issuer identifier, typically a URL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        display\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:33\n                        \n                    \n\n            \n                \n                    Display information for the credentials that are getting issued.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notification_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:20\n                        \n                    \n\n            \n                \n                    The URL of the notification endpoint for credential issuance.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CredentialIssuerMetadataDto {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    credential_issuer: string;\n    /**\n     * List of authorization servers that support the credential issuer.\n     */\n    authorization_servers: string[];\n    /**\n     * The URL of the credential issuance endpoint.\n     */\n    credential_endpoint: string;\n    /**\n     * The URL of the notification endpoint for credential issuance.\n     */\n    notification_endpoint: string;\n    /**\n     * Information about batch credential issuance.\n     */\n    batch_credential_issuance: {\n        /**\n         * Amount of elements in a batch.\n         */\n        batch_size: number;\n    };\n    /**\n     * Display information for the credentials that are getting issued.\n     */\n    display: Array;\n    /**\n     * Object of credentials configurations supported by the issuer.\n     */\n    credential_configurations_supported: any;\n    /**\n     * The URL of the preferred authorization server.\n     */\n    authorization_server: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsController.html":{"url":"controllers/CredentialsController.html","title":"controller - CredentialsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                credentials/:tenantId\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n            \n                \n                        \n                    schema(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('schema/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n            \n                \n                        \n                    vct(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('vct/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:15\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the credential configuration.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from '@nestjs/common';\nimport { CredentialsService } from './credentials.service';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Credentials')\n@Controller('credentials/:tenantId')\nexport class CredentialsController {\n    constructor(private readonly credentialsService: CredentialsService) {}\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n     * @param id - The identifier of the credential configuration.\n     */\n    @Get('vct/:id')\n    vct(@Param('id') id: string, @Param('tenantId') tenantId: string) {\n        return this.credentialsService.getVCT(id, tenantId);\n    }\n\n    /**\n     * Retrieves the schema for a specific credential\n     * @param id\n     * @returns\n     */\n    @Get('schema/:id')\n    schema(@Param('id') id: string, @Param('tenantId') tenantId: string) {\n        return this.credentialsService.getSchema(id, tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialsService.html":{"url":"injectables/CredentialsService.html","title":"injectable - CredentialsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteCredentialConfiguration\n                            \n                            \n                                    Public\n                                getConfig\n                            \n                            \n                                    Async\n                                getConfigById\n                            \n                            \n                                    Async\n                                getCredential\n                            \n                            \n                                    Async\n                                getCredentialConfiguration\n                            \n                            \n                                    Async\n                                getSchema\n                            \n                            \n                                    Async\n                                getVCT\n                            \n                            \n                                    Async\n                                storeCredentialConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(crpytoService: CryptoService, configService: ConfigService, statusListService: StatusListService, issuanceConfigRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credentials.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        crpytoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issuanceConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \ndeleteCredentialConfiguration(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfig(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getConfigById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfigById(credentialId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredential\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredential(credentialConfigurationId: string, cnf: Jwk, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cnf\n                                            \n                                                        Jwk\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredentialConfiguration(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:73\n                        \n                    \n\n\n            \n                \n                        Returns the credential configuration that is required for oid4vci\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSchema\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSchema(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:166\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getVCT\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVCT(credentialId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:145\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        storeCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeCredentialConfiguration(tenantId: string, value: IssuanceConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Store the config. If it already exist, overwrite it.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            IssuanceConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport type { Jwk } from '@openid4vc/oauth2';\nimport { digest, generateSalt } from '@sd-jwt/crypto-nodejs';\nimport { SDJwtVcInstance } from '@sd-jwt/sd-jwt-vc';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { StatusListService } from '../status-list/status-list.service';\nimport { CredentialConfigurationSupported } from '@openid4vc/openid4vci';\nimport { Session } from '../../session/entities/session.entity';\nimport { SchemaResponse } from './dto/schema-response.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { IssuanceConfig } from './entities/issuance-config.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class CredentialsService {\n    constructor(\n        private crpytoService: CryptoService,\n        private configService: ConfigService,\n        private statusListService: StatusListService,\n        @InjectRepository(IssuanceConfig)\n        private issuanceConfigRepo: Repository,\n    ) {}\n\n    /**\n     *\n     * @param tenantId\n     * @returns\n     */\n    public getConfig(tenantId: string): Promise {\n        return this.issuanceConfigRepo.findBy({ tenantId });\n    }\n\n    async getConfigById(\n        credentialId: string,\n        tenantId: string,\n    ): Promise {\n        return this.issuanceConfigRepo.findOneByOrFail({\n            id: credentialId,\n            tenantId,\n        });\n    }\n\n    /**\n     * Store the config. If it already exist, overwrite it.\n     * @param tenantId\n     * @param value\n     * @returns\n     */\n    async storeCredentialConfiguration(\n        tenantId: string,\n        value: IssuanceConfig,\n    ) {\n        value.tenantId = tenantId;\n        return this.issuanceConfigRepo.save(value);\n    }\n\n    /**\n     * Deletes a credential configuration.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    deleteCredentialConfiguration(tenantId: string, id: string) {\n        return this.issuanceConfigRepo.delete({ tenantId, id });\n    }\n\n    /**\n     * Returns the credential configuration that is required for oid4vci\n     * @param tenantId\n     * @returns\n     */\n    async getCredentialConfiguration(\n        tenantId: string,\n    ): Promise> {\n        const credential_configurations_supported: Record = {};\n        (await this.getConfig(tenantId)).forEach((credential) => {\n            credential_configurations_supported[credential.id] =\n                credential.config;\n        });\n        return credential_configurations_supported;\n    }\n\n    async getCredential(\n        credentialConfigurationId: string,\n        cnf: Jwk,\n        session: Session,\n    ) {\n        const vc = await this.getConfigById(\n            credentialConfigurationId,\n            session.tenantId,\n        );\n        const claims =\n            session.credentialPayload?.values?.[credentialConfigurationId] ??\n            vc.claims;\n        const disclosureFrame = vc.disclosureFrame;\n\n        const sdjwt = new SDJwtVcInstance({\n            signer: await this.crpytoService.keyService.signer(\n                session.tenantId,\n            ),\n            signAlg: 'ES256',\n            hasher: digest,\n            hashAlg: 'sha-256',\n            saltGenerator: generateSalt,\n            loadTypeMetadataFormat: true,\n        });\n\n        return sdjwt.issue(\n            {\n                iss: this.configService.getOrThrow('PUBLIC_URL'),\n                iat: Math.round(new Date().getTime() / 1000),\n                vct: `${this.configService.getOrThrow('PUBLIC_URL')}/${session.tenantId}/credentials/vct/${vc.id}`,\n                cnf: {\n                    jwk: cnf,\n                },\n                ...(await this.statusListService.createEntry(\n                    session,\n                    credentialConfigurationId,\n                )),\n                ...claims,\n            },\n            disclosureFrame,\n            {\n                header: {\n                    x5c: this.crpytoService.getCertChain(\n                        'signing',\n                        session.tenantId,\n                    ),\n                    alg: 'ES256',\n                },\n            },\n        );\n    }\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n     * @param credentialId\n     * @param tenantId\n     * @returns\n     */\n    async getVCT(credentialId: string, tenantId: string) {\n        const vc = await this.issuanceConfigRepo.findOneByOrFail({\n            id: credentialId,\n            tenantId,\n        });\n        if (!vc.vct) {\n            throw new ConflictException(\n                `VCT for credential configuration with id ${credentialId} not found`,\n            );\n        }\n        const host = this.configService.getOrThrow('PUBLIC_URL');\n        vc.vct.vct = `${host}/${tenantId}/credentials/vct/${vc.id}`;\n        return vc.vct;\n    }\n\n    /**\n     * Retrieves the schema for a specific credential configuration.\n     * @param id\n     * @param tenantId\n     * @returns\n     */\n    async getSchema(id: string, tenantId: string): Promise {\n        const vc = await this.issuanceConfigRepo.findOneByOrFail({\n            id,\n            tenantId,\n        });\n        if (!vc.schema) {\n            throw new ConflictException(\n                `Schema for credential configuration with id ${id} not found`,\n            );\n        }\n        return vc.schema;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptoImplementation.html":{"url":"interfaces/CryptoImplementation.html","title":"interface - CryptoImplementation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CryptoImplementation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto/crypto-implementation.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface to imeplement different algorithms.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            alg\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        generateKeyPair\n                                    \n                                \n                                \n                                    \n                                        getSigner\n                                    \n                                \n                                \n                                    \n                                        getVerifier\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyPair\n                        \n                    \n                \n            \n            \n                \ngenerateKeyPair()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto-implementation.ts:19\n                        \n                    \n\n\n            \n                \n                        Generates a new keypair\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSigner\n                        \n                    \n                \n            \n            \n                \ngetSigner(privateKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto-implementation.ts:24\n                        \n                    \n\n\n            \n                \n                        creates a signer based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKeyJWK\n                                            \n                                                        JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getVerifier\n                        \n                    \n                \n            \n            \n                \ngetVerifier(publicKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto-implementation.ts:29\n                        \n                    \n\n\n            \n                \n                        creates a verifier based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                publicKeyJWK\n                                            \n                                                        JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        alg:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type KeyPair = {\n    publicKey: JsonWebKey;\n    privateKey: JsonWebKey;\n};\n\ntype Signer = (data: string) => Promise;\n\ntype Verifier = (data: string, signature: string) => Promise;\n\n/**\n * Generic interface to imeplement different algorithms.\n */\nexport interface CryptoImplementation {\n    //name of the algorithm\n    alg: string;\n    /**\n     * Generates a new keypair\n     */\n    generateKeyPair(): Promise;\n    /**\n     * creates a signer based on the passed key.\n     * @param privateKeyJWK\n     */\n    getSigner(privateKeyJWK: JsonWebKey): Promise;\n    /**\n     * creates a verifier based on the passed key.\n     * @param publicKeyJWK\n     */\n    getVerifier(publicKeyJWK: JsonWebKey): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoModule.html":{"url":"modules/CryptoModule.html","title":"module - CryptoModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\n\nCryptoService \n\nCryptoService \n\n\n\nEncryptionService \n\nEncryptionService \n\n\n\nCryptoModule\n\nCryptoModule\n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/crypto.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CryptoService } from './crypto.service';\nimport { EncryptionService } from './encryption/encryption.service';\n\n@Module({\n    imports: [],\n    providers: [CryptoService, EncryptionService],\n    exports: [CryptoService, EncryptionService],\n})\nexport class CryptoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoService.html":{"url":"injectables/CryptoService.html","title":"injectable - CryptoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/crypto.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                folder\n                            \n                            \n                                    \n                                    Public\n                                    Readonly\n                                keyService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCallbackContext\n                            \n                            \n                                getCertChain\n                            \n                            \n                                getHeadersFromRequest\n                            \n                            \n                                getJwks\n                            \n                            \n                                getSignJwtCallback\n                            \n                            \n                                hasCerts\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Async\n                                signJwt\n                            \n                            \n                                storeAccessCertificate\n                            \n                            \n                                    Async\n                                verifyJwt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, keyService: KeyService, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/crypto.service.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keyService\n                                                  \n                                                        \n                                                                        KeyService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCallbackContext\n                        \n                    \n                \n            \n            \n                \ngetCallbackContext(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:193\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Omit\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCertChain\n                        \n                    \n                \n            \n            \n                \ngetCertChain(type: certificateType, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:144\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            certificateType\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'signing'\n                                            \n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHeadersFromRequest\n                        \n                    \n                \n            \n            \n                \ngetHeadersFromRequest(req: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:268\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     globalThis.Headers\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getJwks\n                        \n                    \n                \n            \n            \n                \ngetJwks(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:282\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSignJwtCallback\n                        \n                    \n                \n            \n            \n                \ngetSignJwtCallback(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:231\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SignJwtCallback\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasCerts\n                        \n                    \n                \n            \n            \n                \nhasCerts(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Checks if there is a signing certificate and access certificate available.\nIf not it will be created.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_INIT, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJwt\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJwt(header: any, payload: any, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:166\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                header\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storeAccessCertificate\n                        \n                    \n                \n            \n            \n                \nstoreAccessCertificate(crt: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:159\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                crt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyJwt\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyJwt(compact: string, tenantId: string, payload?: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:174\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                compact\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        folder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/crypto.service.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Readonly\n                        keyService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KeyService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject('KeyService')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/crypto.service.ts:36\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { createHash, randomBytes, X509Certificate } from 'node:crypto';\nimport {\n    existsSync,\n    mkdirSync,\n    readFileSync,\n    unlinkSync,\n    writeFileSync,\n} from 'node:fs';\nimport { Inject, Injectable, OnModuleInit } from '@nestjs/common';\nimport {\n    type CallbackContext,\n    HashAlgorithm,\n    type Jwk,\n    SignJwtCallback,\n    calculateJwkThumbprint,\n    clientAuthenticationNone,\n} from '@openid4vc/oauth2';\nimport type { Request } from 'express';\nimport { type JWK, importJWK, jwtVerify } from 'jose';\nimport { ConfigService } from '@nestjs/config';\nimport { join } from 'node:path';\nimport { KeyService } from './key/key.service';\nimport { EC_Public } from '../well-known/dto/jwks-response.dto';\nimport { execSync } from 'node:child_process';\nimport { EventEmitter2, OnEvent } from '@nestjs/event-emitter';\nimport { TENANT_EVENTS } from '../auth/tenant-events';\n\ntype certificateType = 'access' | 'signing';\n\n@Injectable()\nexport class CryptoService implements OnModuleInit {\n    folder: string;\n\n    constructor(\n        private readonly configService: ConfigService,\n        @Inject('KeyService') public readonly keyService: KeyService,\n        private readonly eventEmitter: EventEmitter2,\n    ) {}\n    onModuleInit() {\n        this.folder = join(this.configService.getOrThrow('FOLDER'));\n        if (!existsSync(this.folder)) {\n            mkdirSync(this.folder, { recursive: true });\n        }\n    }\n\n    @OnEvent(TENANT_EVENTS.TENANT_INIT, { async: true })\n    async onTenantInit(tenantId: string) {\n        const folder = join(this.folder, tenantId, 'keys');\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n        await this.keyService.init(tenantId);\n        this.hasCerts(tenantId);\n        this.eventEmitter.emit(TENANT_EVENTS.TENANT_KEYS, tenantId);\n    }\n\n    /**\n     * Checks if there is a signing certificate and access certificate available.\n     * If not it will be created.\n     */\n    hasCerts(tenantId: string) {\n        const folder = join(this.folder, tenantId, 'keys');\n        const pubkey = join(folder, 'public-key.pem');\n        const dummyKey = join(folder, 'dummy_key.pem');\n        const dummyCsr = join(folder, 'dummy.csr');\n        const issuerKey = join(folder, 'issuer_key.pem');\n        const issuerCert = join(folder, 'issuer_cert.pem');\n        const certOut = join(folder, 'signing-certificate.pem');\n        const sanExt = join(folder, 'san.ext');\n        if (!existsSync(certOut)) {\n            // === Configurable parameters (you can parameterize these when calling the script) ===\n            const subject = this.configService.getOrThrow('RP_NAME');\n            const uri = this.configService\n                .getOrThrow('PUBLIC_URL')\n                .replace('https://', '');\n\n            // === Helper to run shell commands ===\n            const run = (cmd) => {\n                execSync(cmd, { stdio: 'inherit' });\n            };\n\n            // === Step-by-step ===\n            mkdirSync(this.folder, { recursive: true });\n\n            // Step 1: Create dummy key pair if public key is missing\n            if (!existsSync(dummyKey)) {\n                // Generate private key (PKCS#8)\n                run(\n                    `openssl genpkey -algorithm EC -pkeyopt ec_paramgen_curve:prime256v1 -out \"${dummyKey}\"`,\n                );\n            } else {\n                if (!existsSync(dummyKey)) {\n                    throw new Error(\n                        `Public key exists but ${dummyKey} is missing.`,\n                    );\n                }\n            }\n\n            // Step 2: Generate issuer key\n            run(\n                `openssl genpkey -algorithm EC -pkeyopt ec_paramgen_curve:prime256v1 -out \"${issuerKey}\"`,\n            );\n\n            // Step 3: Create self-signed issuer cert\n            run(\n                `openssl req -x509 -new -key \"${issuerKey}\" -subj \"/CN=${subject}\" -addext \"subjectAltName=DNS:${uri}\" -days 365 -out \"${issuerCert}\"`,\n            );\n\n            // Step 4: Create dummy CSR\n            run(\n                `openssl req -new -key \"${dummyKey}\" -subj \"/CN=${subject}\" -addext \"subjectAltName=DNS:${uri}\" -out \"${dummyCsr}\"`,\n            );\n\n            // Step 5: Create SAN extension file\n            writeFileSync(sanExt, `subjectAltName=DNS:${uri}`);\n\n            // Step 6: Sign certificate using issuer\n            run(\n                `openssl x509 -req -in \"${dummyCsr}\" -force_pubkey \"${pubkey}\" -CA \"${issuerCert}\" -CAkey \"${issuerKey}\" -CAcreateserial -days 365 -extfile \"${sanExt}\" -out \"${certOut}\"`,\n            );\n\n            // Step 7: Clean up\n            [\n                issuerKey,\n                issuerCert,\n                dummyCsr,\n                dummyKey,\n                join(folder, 'issuer_cert.srl'),\n                sanExt,\n            ].forEach((file) => {\n                if (existsSync(file)) unlinkSync(file);\n            });\n        }\n        if (!existsSync(join(folder, 'access-certificate.pem'))) {\n            // Create access certificate from signing certificate\n            const signingCert = readFileSync(\n                join(folder, 'signing-certificate.pem'),\n                'utf-8',\n            );\n            writeFileSync(join(folder, 'access-certificate.pem'), signingCert);\n        }\n    }\n\n    getCertChain(type: certificateType = 'signing', tenantId: string) {\n        const cert = readFileSync(\n            join(this.folder, tenantId, 'keys', `${type}-certificate.pem`),\n            'utf-8',\n        );\n        const crt = new X509Certificate(cert);\n        console.log(crt.subjectAltName);\n\n        const chain = cert\n            .replace('-----BEGIN CERTIFICATE-----', '')\n            .replace('-----END CERTIFICATE-----', '')\n            .replace(/\\r?\\n|\\r/g, '');\n        return [chain];\n    }\n\n    storeAccessCertificate(crt: string, tenantId: string) {\n        writeFileSync(\n            join(this.folder, tenantId, 'keys', `access-certificate.pem`),\n            crt,\n        );\n    }\n\n    async signJwt(\n        header: any,\n        payload: any,\n        tenantId: string,\n    ): Promise {\n        return this.keyService.signJWT(payload, header, tenantId);\n    }\n\n    async verifyJwt(\n        compact: string,\n        tenantId: string,\n        payload?: Record,\n    ): Promise {\n        const publicJwk = await this.keyService.getPublicKey('jwk', tenantId);\n        const publicCryptoKey = await importJWK(publicJwk, 'ES256');\n\n        try {\n            await jwtVerify(compact, publicCryptoKey, {\n                currentDate: payload?.exp\n                    ? new Date((payload.exp - 300) * 1000)\n                    : undefined,\n            });\n            return { verified: true };\n        } catch {\n            return { verified: false };\n        }\n    }\n    getCallbackContext(\n        tenantId: string,\n    ): Omit {\n        return {\n            hash: (data, alg) =>\n                createHash(alg.replace('-', '').toLowerCase())\n                    .update(data)\n                    .digest(),\n            generateRandom: (bytes) => randomBytes(bytes),\n            clientAuthentication: clientAuthenticationNone({\n                clientId: 'some-random',\n            }),\n            //clientId: 'some-random-client-id', // TODO: Replace with your real clientId if necessary\n            signJwt: this.getSignJwtCallback(tenantId),\n            verifyJwt: async (signer, { compact, payload }) => {\n                if (signer.method !== 'jwk') {\n                    throw new Error('Signer method not supported');\n                }\n\n                const josePublicKey = await importJWK(\n                    signer.publicJwk as JWK,\n                    signer.alg,\n                );\n                try {\n                    await jwtVerify(compact, josePublicKey, {\n                        currentDate: payload?.exp\n                            ? new Date((payload.exp - 300) * 1000)\n                            : undefined,\n                    });\n                    return { verified: true, signerJwk: signer.publicJwk };\n                } catch {\n                    return { verified: false };\n                }\n            },\n        };\n    }\n\n    // Helper to generate signJwt callback\n    getSignJwtCallback(tenantId: string): SignJwtCallback {\n        return async (signer, { header, payload }) => {\n            if (signer.method !== 'jwk') {\n                throw new Error('Signer method not supported');\n            }\n            const hashCallback = this.getCallbackContext(tenantId).hash;\n            const jwkThumbprint = await calculateJwkThumbprint({\n                jwk: signer.publicJwk,\n                hashAlgorithm: HashAlgorithm.Sha256,\n                hashCallback,\n            });\n\n            const privateThumbprint = await calculateJwkThumbprint({\n                jwk: (await this.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n                hashAlgorithm: HashAlgorithm.Sha256,\n                hashCallback,\n            });\n\n            if (jwkThumbprint !== privateThumbprint) {\n                throw new Error(\n                    `No private key available for public jwk \\n${JSON.stringify(signer.publicJwk, null, 2)}`,\n                );\n            }\n\n            const jwt = await this.signJwt(header, payload, tenantId);\n\n            return {\n                jwt,\n                signerJwk: signer.publicJwk,\n            };\n        };\n    }\n\n    // Utility method like in your utils.ts\n    getHeadersFromRequest(req: Request): globalThis.Headers {\n        const headers = new Headers();\n        for (const [key, value] of Object.entries(req.headers)) {\n            if (Array.isArray(value)) {\n                for (const v of value) {\n                    headers.append(key, v);\n                }\n            } else if (value !== undefined) {\n                headers.set(key, value);\n            }\n        }\n        return headers;\n    }\n\n    getJwks(tenantId: string) {\n        return this.keyService.getPublicKey(\n            'jwk',\n            tenantId,\n        ) as Promise;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoService-1.html":{"url":"injectables/CryptoService-1.html","title":"injectable - CryptoService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto/crypto.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAlg\n                            \n                            \n                                getCrypto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configServie: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/crypto/crypto.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configServie\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAlg\n                        \n                    \n                \n            \n            \n                \ngetAlg()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Return the algorithm that is used for the crypto operations like signing.\n\n\n                        \n                            Returns :         CryptoType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCrypto\n                        \n                    \n                \n            \n            \n                \ngetCrypto(alg)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                alg\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    this.configServie.get('CRYPTO_ALG')\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CryptoImplementation\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config';\nimport { ES256 } from '@sd-jwt/crypto-nodejs';\nimport { ED25519 } from './ed25519';\nimport { CryptoImplementation } from './crypto-implementation';\nimport { Injectable } from '@nestjs/common';\n\nexport type CryptoType = 'ES256' | 'Ed25519';\n\n@Injectable()\nexport class CryptoService {\n    constructor(private configServie: ConfigService) {}\n\n    /**\n     * Return the algorithm that is used for the crypto operations like signing.\n     * @returns\n     */\n    getAlg(): CryptoType {\n        return this.configServie.get('CRYPTO_ALG') as CryptoType;\n    }\n\n    getCrypto(\n        alg = this.configServie.get('CRYPTO_ALG'),\n    ): CryptoImplementation {\n        switch (alg) {\n            case 'Ed25519':\n                return ED25519;\n            case 'ES256':\n                return ES256;\n            default:\n                throw new Error(`Unsupported algorithm ${alg}`);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport { join } from 'path';\nimport * as Joi from 'joi';\n\nexport const DB_VALIDATION_SCHEMA = {\n    DB_TYPE: Joi.string().valid('sqlite', 'postgres').default('sqlite'),\n    DB_HOST: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PORT: Joi.number().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_USERNAME: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PASSWORD: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_DATABASE: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n};\n\n@Module({\n    imports: [\n        TypeOrmModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (\n                configService: ConfigService,\n            ): TypeOrmModuleOptions => {\n                const dbType = configService.get(\n                    'DB_TYPE',\n                );\n\n                const commonOptions = {\n                    synchronize: true,\n                    autoLoadEntities: true,\n                };\n\n                if (dbType === 'postgres') {\n                    return {\n                        type: 'postgres',\n                        host: configService.getOrThrow('DB_HOST'),\n                        port: configService.getOrThrow('DB_PORT'),\n                        username:\n                            configService.getOrThrow('DB_USERNAME'),\n                        password:\n                            configService.getOrThrow('DB_PASSWORD'),\n                        database:\n                            configService.getOrThrow('DB_DATABASE'),\n                        ...commonOptions,\n                    };\n                }\n\n                return {\n                    type: 'sqlite',\n                    database: join(\n                        configService.getOrThrow('FOLDER'),\n                        'service.db',\n                    ),\n                    ...commonOptions,\n                };\n            },\n        }),\n    ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EC_Public.html":{"url":"classes/EC_Public.html","title":"class - EC_Public","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EC_Public\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\nThis class is used to define the structure of EC public keys in JWK format.\n\n            \n\n\n            \n                Implements\n            \n            \n                            JWK_EC_Public\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crv\n                            \n                            \n                                kty\n                            \n                            \n                                x\n                            \n                            \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:15\n                        \n                    \n\n            \n                \n                    The algorithm intended for use with the key, such as 'ES256'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        kty\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The key type, which is always 'EC' for Elliptic Curve keys.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:19\n                        \n                    \n\n            \n                \n                    The x coordinate of the EC public key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:23\n                        \n                    \n\n            \n                \n                    The y coordinate of the EC public key.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from 'jose';\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: 'EC';\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncryptionService.html":{"url":"injectables/EncryptionService.html","title":"injectable - EncryptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncryptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/encryption/encryption.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                privateEncryptionKey\n                            \n                            \n                                    Private\n                                privateEnncryptionPath\n                            \n                            \n                                    Private\n                                publicEncryptionKey\n                            \n                            \n                                    Private\n                                publicEncryptionPath\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decryptJwe\n                            \n                            \n                                getEncryptionPublicKey\n                            \n                            \n                                    Async\n                                init\n                            \n                            \n                                    \n                                    Async\n                                onTenantInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/encryption/encryption.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decryptJwe\n                        \n                    \n                \n            \n            \n                \n                        \n                    decryptJwe(response: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:58\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEncryptionPublicKey\n                        \n                    \n                \n            \n            \n                \ngetEncryptionPublicKey()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     JWK\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_INIT, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        privateEncryptionKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CryptoKey\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        privateEnncryptionPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        publicEncryptionKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JWK\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        publicEncryptionPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport { importJWK, exportJWK, generateKeyPair, jwtDecrypt, JWK } from 'jose';\nimport { join } from 'path';\nimport { TENANT_EVENTS } from '../../auth/tenant-events';\nimport { OnEvent } from '@nestjs/event-emitter';\n\n@Injectable()\nexport class EncryptionService {\n    private privateEncryptionKey: CryptoKey;\n    private publicEncryptionKey: JWK;\n    private privateEnncryptionPath: string;\n    private publicEncryptionPath: string;\n\n    constructor(private configService: ConfigService) {}\n\n    @OnEvent(TENANT_EVENTS.TENANT_INIT, { async: true })\n    async onTenantInit(tenantId: string) {\n        await this.init(tenantId);\n    }\n\n    async init(tenantId: string) {\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'keys',\n        );\n        this.privateEnncryptionPath = join(folder, 'private-encryption.json');\n        this.publicEncryptionPath = join(folder, 'public-encryption.json');\n        if (!existsSync(this.privateEnncryptionPath)) {\n            await generateKeyPair('ECDH-ES', {\n                crv: 'P-256',\n                extractable: true,\n            }).then(async (secret) => {\n                writeFileSync(\n                    this.privateEnncryptionPath,\n                    JSON.stringify(await exportJWK(secret.privateKey), null, 2),\n                );\n                writeFileSync(\n                    this.publicEncryptionPath,\n                    JSON.stringify(await exportJWK(secret.publicKey), null, 2),\n                );\n            });\n        }\n\n        await importJWK(\n            JSON.parse(readFileSync(this.privateEnncryptionPath, 'utf-8')),\n            'ECDH-ES',\n        ).then((key) => {\n            this.privateEncryptionKey = key as CryptoKey;\n        });\n        this.publicEncryptionKey = JSON.parse(\n            readFileSync(this.publicEncryptionPath, 'utf-8'),\n        ) as JWK;\n    }\n\n    async decryptJwe(response: string): Promise {\n        const res = await jwtDecrypt(response, this.privateEncryptionKey);\n        return res.payload;\n    }\n\n    getEncryptionPublicKey() {\n        return this.publicEncryptionKey;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Fields.html":{"url":"interfaces/Fields.html","title":"interface - Fields","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Fields\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/params.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowExtra\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            args\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowExtra\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowExtra:         Partial>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Partial>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        args\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        args:         ReadonlyArray\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ReadonlyArray\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type Slot = 'body' | 'headers' | 'path' | 'query';\n\nexport type Field =\n    | {\n          in: Exclude;\n          key: string;\n          map?: string;\n      }\n    | {\n          in: Extract;\n          key?: string;\n          map?: string;\n      };\n\nexport interface Fields {\n    allowExtra?: Partial>;\n    args?: ReadonlyArray;\n}\n\nexport type FieldsConfig = ReadonlyArray;\n\nconst extraPrefixesMap: Record = {\n    $body_: 'body',\n    $headers_: 'headers',\n    $path_: 'path',\n    $query_: 'query',\n};\nconst extraPrefixes = Object.entries(extraPrefixesMap);\n\ntype KeyMap = Map;\n\nconst buildKeyMap = (fields: FieldsConfig, map?: KeyMap): KeyMap => {\n    if (!map) {\n        map = new Map();\n    }\n\n    for (const config of fields) {\n        if ('in' in config) {\n            if (config.key) {\n                map.set(config.key, {\n                    in: config.in,\n                    map: config.map,\n                });\n            }\n        } else if (config.args) {\n            buildKeyMap(config.args, map);\n        }\n    }\n\n    return map;\n};\n\ninterface Params {\n    body: unknown;\n    headers: Record;\n    path: Record;\n    query: Record;\n}\n\nconst stripEmptySlots = (params: Params) => {\n    for (const [slot, value] of Object.entries(params)) {\n        if (value && typeof value === 'object' && !Object.keys(value).length) {\n            delete params[slot as Slot];\n        }\n    }\n};\n\nexport const buildClientParams = (\n    args: ReadonlyArray,\n    fields: FieldsConfig,\n) => {\n    const params: Params = {\n        body: {},\n        headers: {},\n        path: {},\n        query: {},\n    };\n\n    const map = buildKeyMap(fields);\n\n    let config: FieldsConfig[number] | undefined;\n\n    for (const [index, arg] of args.entries()) {\n        if (fields[index]) {\n            config = fields[index];\n        }\n\n        if (!config) {\n            continue;\n        }\n\n        if ('in' in config) {\n            if (config.key) {\n                const field = map.get(config.key)!;\n                const name = field.map || config.key;\n                (params[field.in] as Record)[name] = arg;\n            } else {\n                params.body = arg;\n            }\n        } else {\n            for (const [key, value] of Object.entries(arg ?? {})) {\n                const field = map.get(key);\n\n                if (field) {\n                    const name = field.map || key;\n                    (params[field.in] as Record)[name] = value;\n                } else {\n                    const extra = extraPrefixes.find(([prefix]) =>\n                        key.startsWith(prefix),\n                    );\n\n                    if (extra) {\n                        const [prefix, slot] = extra;\n                        (params[slot] as Record)[\n                            key.slice(prefix.length)\n                        ] = value;\n                    } else {\n                        for (const [slot, allowed] of Object.entries(\n                            config.allowExtra ?? {},\n                        )) {\n                            if (allowed) {\n                                (\n                                    params[slot as Slot] as Record\n                                )[key] = value;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    stripEmptySlots(params);\n\n    return params;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileSystemKeyService.html":{"url":"injectables/FileSystemKeyService.html","title":"injectable - FileSystemKeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileSystemKeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/filesystem-key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The key service is responsible for managing the keys of the issuer.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                crypto\n                            \n                            \n                                    Private\n                                privateKeyPath\n                            \n                            \n                                    Private\n                                publicKeyPath\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                getKeys\n                            \n                            \n                                getKid\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                init\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                signer\n                            \n                            \n                                    Async\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/filesystem-key.service.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKeys(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Get the keys from the file system or generate them if they do not exist\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getKid\n                        \n                    \n                \n            \n            \n                \ngetKid(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Get the key id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:131\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:133\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenant: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenant\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Get the signer for the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JWTHeaderParameters, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWTHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        crypto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/filesystem-key.service.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        privateKeyPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'private-key.pem'\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/filesystem-key.service.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        publicKeyPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'public-key.pem'\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/filesystem-key.service.ts:32\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { existsSync, mkdirSync, writeFileSync, readFileSync } from 'node:fs';\nimport {\n    JWK,\n    JWTHeaderParameters,\n    JWTPayload,\n    CryptoKey,\n    SignJWT,\n    importJWK,\n    exportPKCS8,\n    exportSPKI,\n    importPKCS8,\n    importSPKI,\n    exportJWK,\n} from 'jose';\nimport { v4 } from 'uuid';\nimport { KeyService } from './key.service';\nimport { Injectable } from '@nestjs/common';\nimport { Signer } from '@sd-jwt/types';\nimport { ConfigService } from '@nestjs/config';\nimport { CryptoImplementation } from './crypto/crypto-implementation';\nimport { CryptoService } from './crypto/crypto.service';\nimport { join } from 'node:path';\n\n/**\n * The key service is responsible for managing the keys of the issuer.\n */\n@Injectable()\nexport class FileSystemKeyService implements KeyService {\n    private crypto: CryptoImplementation;\n\n    private privateKeyPath = 'private-key.pem';\n    private publicKeyPath = 'public-key.pem';\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n    ) {\n        this.crypto = this.cryptoService.getCrypto();\n    }\n\n    async onModuleInit(): Promise {}\n    async init(tenant: string) {\n        // Initialize the key service for a specific tenant\n        // This will create the keys if they do not exist\n        await this.getKeys(tenant);\n    }\n\n    /**\n     * Get the signer for the key service\n     */\n    async signer(tenantId: string): Promise {\n        const keys = await this.getKeys(tenantId);\n        return this.crypto.getSigner(keys.privateKey);\n    }\n\n    /**\n     * Get the keys from the file system or generate them if they do not exist\n     * @returns\n     */\n    private async getKeys(tenantId: string) {\n        let privateKey: JWK;\n        let publicKey: JWK;\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'keys',\n        );\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n        if (\n            !existsSync(join(folder, this.privateKeyPath)) &&\n            !existsSync(join(folder, this.publicKeyPath))\n        ) {\n            const keys = await this.crypto.generateKeyPair();\n            privateKey = keys.privateKey as JWK;\n            publicKey = keys.publicKey as JWK;\n            //add a random key id for reference\n            publicKey.kid = v4();\n            privateKey.kid = publicKey.kid;\n            privateKey.alg = this.crypto.alg;\n            publicKey.alg = this.crypto.alg;\n            writeFileSync(\n                join(folder, this.privateKeyPath),\n                await exportPKCS8((await importJWK(privateKey)) as CryptoKey),\n            );\n            writeFileSync(\n                join(folder, this.publicKeyPath),\n                await exportSPKI((await importJWK(publicKey)) as CryptoKey),\n            );\n            return { privateKey, publicKey };\n        }\n\n        privateKey = await exportJWK(\n            await importPKCS8(\n                readFileSync(join(folder, this.privateKeyPath), 'utf-8'),\n                this.crypto.alg,\n                {\n                    extractable: true,\n                },\n            ),\n        );\n        //should be stored the cert\n        privateKey.alg = this.crypto.alg;\n        publicKey = await exportJWK(\n            await importSPKI(\n                readFileSync(join(folder, this.publicKeyPath), 'utf-8'),\n                this.crypto.alg,\n            ),\n        );\n        return { privateKey, publicKey };\n    }\n\n    /**\n     * Get the key id\n     * @returns\n     */\n    getKid(tenantId: string): Promise {\n        return this.getKeys(tenantId).then((keys) => {\n            if (keys.publicKey.kid) {\n                return keys.publicKey.kid;\n            }\n            throw new Error('Key id not found');\n        });\n    }\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    getPublicKey(type: 'jwk', tenantId: string): Promise;\n    getPublicKey(type: 'pem', tenantId: string): Promise;\n    async getPublicKey(\n        type: 'pem' | 'jwk',\n        tenantId: string,\n    ): Promise {\n        const keys = await this.getKeys(tenantId);\n        if (type === 'pem') {\n            return exportSPKI(\n                (await importJWK(\n                    keys.publicKey,\n                    this.cryptoService.getAlg(),\n                )) as CryptoKey,\n            );\n        } else {\n            return Promise.resolve(keys.publicKey);\n        }\n    }\n\n    async signJWT(\n        payload: JWTPayload,\n        header: JWTHeaderParameters,\n        tenantId: string,\n    ): Promise {\n        const keys = await this.getKeys(tenantId);\n        const privateKeyInstance = (await importJWK(\n            keys.privateKey,\n        )) as CryptoKey;\n        return new SignJWT(payload)\n            .setProtectedHeader(header)\n            .sign(privateKeyInstance);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GenerateTokenOptions.html":{"url":"interfaces/GenerateTokenOptions.html","title":"interface - GenerateTokenOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GenerateTokenOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            audience\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresIn\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subject\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresIn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SignJWT, jwtVerify, decodeJwt } from 'jose';\nimport { TokenPayload } from './token.decorator';\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {}\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow('JWT_EXPIRES_IN');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: 'HS256' })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token verification is handled by external OIDC provider.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: ['HS256'],\n            });\n\n            return payload as TokenPayload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Decode token without verification (for debugging)\n     */\n    decodeToken(token: string): TokenPayload | null {\n        try {\n            return decodeJwt(token) as TokenPayload;\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get('OIDC') !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                HealthController is responsible for providing health check endpoints.\nIt uses the HealthCheckService to perform checks on the database connection.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Endpoint to check the health of the service.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport {\n    HealthCheck,\n    HealthCheckService,\n    TypeOrmHealthIndicator,\n} from '@nestjs/terminus';\n\n/**\n * HealthController is responsible for providing health check endpoints.\n * It uses the HealthCheckService to perform checks on the database connection.\n */\n@Controller('health')\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        private db: TypeOrmHealthIndicator,\n    ) {}\n\n    /**\n     * Endpoint to check the health of the service.\n     * @returns\n     */\n    @Get()\n    @HealthCheck()\n    check() {\n        return this.health.check([() => this.db.pingCheck('database')]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HealthController } from './health.controller';\nimport { TerminusModule } from '@nestjs/terminus';\n\n@Module({\n    imports: [TerminusModule],\n    controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Interceptors.html":{"url":"classes/Interceptors.html","title":"class - Interceptors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Interceptors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/utils.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _fns\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clear\n                            \n                            \n                                eject\n                            \n                            \n                                exists\n                            \n                            \n                                getInterceptorIndex\n                            \n                            \n                                update\n                            \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/registrar/generated/client/utils.ts:331\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _fns\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (Interceptor | null)[]\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/generated/client/utils.ts:331\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:337\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eject\n                        \n                    \n                \n            \n            \n                \neject(id: number | Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:353\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(id: number | Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:348\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInterceptorIndex\n                        \n                    \n                \n            \n            \n                \ngetInterceptorIndex(id: number | Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:341\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number | Interceptor, fn: Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:360\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fn\n                                            \n                                                        Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     number | false | Interceptor\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(fn: Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:370\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                        Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { getAuthToken } from '../core/auth';\nimport type {\n    QuerySerializer,\n    QuerySerializerOptions,\n} from '../core/bodySerializer';\nimport { jsonBodySerializer } from '../core/bodySerializer';\nimport {\n    serializeArrayParam,\n    serializeObjectParam,\n    serializePrimitiveParam,\n} from '../core/pathSerializer';\nimport type { Client, ClientOptions, Config, RequestOptions } from './types';\n\ninterface PathSerializer {\n    path: Record;\n    url: string;\n}\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\ntype ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\ntype ArraySeparatorStyle = ArrayStyle | MatrixStyle;\n\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n    let url = _url;\n    const matches = _url.match(PATH_PARAM_RE);\n    if (matches) {\n        for (const match of matches) {\n            let explode = false;\n            let name = match.substring(1, match.length - 1);\n            let style: ArraySeparatorStyle = 'simple';\n\n            if (name.endsWith('*')) {\n                explode = true;\n                name = name.substring(0, name.length - 1);\n            }\n\n            if (name.startsWith('.')) {\n                name = name.substring(1);\n                style = 'label';\n            } else if (name.startsWith(';')) {\n                name = name.substring(1);\n                style = 'matrix';\n            }\n\n            const value = path[name];\n\n            if (value === undefined || value === null) {\n                continue;\n            }\n\n            if (Array.isArray(value)) {\n                url = url.replace(\n                    match,\n                    serializeArrayParam({ explode, name, style, value }),\n                );\n                continue;\n            }\n\n            if (typeof value === 'object') {\n                url = url.replace(\n                    match,\n                    serializeObjectParam({\n                        explode,\n                        name,\n                        style,\n                        value: value as Record,\n                        valueOnly: true,\n                    }),\n                );\n                continue;\n            }\n\n            if (style === 'matrix') {\n                url = url.replace(\n                    match,\n                    `;${serializePrimitiveParam({\n                        name,\n                        value: value as string,\n                    })}`,\n                );\n                continue;\n            }\n\n            const replaceValue = encodeURIComponent(\n                style === 'label' ? `.${value as string}` : (value as string),\n            );\n            url = url.replace(match, replaceValue);\n        }\n    }\n    return url;\n};\n\nexport const createQuerySerializer = ({\n    allowReserved,\n    array,\n    object,\n}: QuerySerializerOptions = {}) => {\n    const querySerializer = (queryParams: T) => {\n        const search: string[] = [];\n        if (queryParams && typeof queryParams === 'object') {\n            for (const name in queryParams) {\n                const value = queryParams[name];\n\n                if (value === undefined || value === null) {\n                    continue;\n                }\n\n                if (Array.isArray(value)) {\n                    const serializedArray = serializeArrayParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'form',\n                        value,\n                        ...array,\n                    });\n                    if (serializedArray) search.push(serializedArray);\n                } else if (typeof value === 'object') {\n                    const serializedObject = serializeObjectParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'deepObject',\n                        value: value as Record,\n                        ...object,\n                    });\n                    if (serializedObject) search.push(serializedObject);\n                } else {\n                    const serializedPrimitive = serializePrimitiveParam({\n                        allowReserved,\n                        name,\n                        value: value as string,\n                    });\n                    if (serializedPrimitive) search.push(serializedPrimitive);\n                }\n            }\n        }\n        return search.join('&');\n    };\n    return querySerializer;\n};\n\n/**\n * Infers parseAs value from provided Content-Type header.\n */\nexport const getParseAs = (\n    contentType: string | null,\n): Exclude => {\n    if (!contentType) {\n        // If no Content-Type header is provided, the best we can do is return the raw response body,\n        // which is effectively the same as the 'stream' option.\n        return 'stream';\n    }\n\n    const cleanContent = contentType.split(';')[0]?.trim();\n\n    if (!cleanContent) {\n        return;\n    }\n\n    if (\n        cleanContent.startsWith('application/json') ||\n        cleanContent.endsWith('+json')\n    ) {\n        return 'json';\n    }\n\n    if (cleanContent === 'multipart/form-data') {\n        return 'formData';\n    }\n\n    if (\n        ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n            cleanContent.startsWith(type),\n        )\n    ) {\n        return 'blob';\n    }\n\n    if (cleanContent.startsWith('text/')) {\n        return 'text';\n    }\n\n    return;\n};\n\nexport const setAuthParams = async ({\n    security,\n    ...options\n}: Pick, 'security'> &\n    Pick & {\n        headers: Headers;\n    }) => {\n    for (const auth of security) {\n        const token = await getAuthToken(auth, options.auth);\n\n        if (!token) {\n            continue;\n        }\n\n        const name = auth.name ?? 'Authorization';\n\n        switch (auth.in) {\n            case 'query':\n                if (!options.query) {\n                    options.query = {};\n                }\n                options.query[name] = token;\n                break;\n            case 'cookie':\n                options.headers.append('Cookie', `${name}=${token}`);\n                break;\n            case 'header':\n            default:\n                options.headers.set(name, token);\n                break;\n        }\n\n        return;\n    }\n};\n\nexport const buildUrl: Client['buildUrl'] = (options) => {\n    const url = getUrl({\n        baseUrl: options.baseUrl as string,\n        path: options.path,\n        query: options.query,\n        querySerializer:\n            typeof options.querySerializer === 'function'\n                ? options.querySerializer\n                : createQuerySerializer(options.querySerializer),\n        url: options.url,\n    });\n    return url;\n};\n\nexport const getUrl = ({\n    baseUrl,\n    path,\n    query,\n    querySerializer,\n    url: _url,\n}: {\n    baseUrl?: string;\n    path?: Record;\n    query?: Record;\n    querySerializer: QuerySerializer;\n    url: string;\n}) => {\n    const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n    let url = (baseUrl ?? '') + pathUrl;\n    if (path) {\n        url = defaultPathSerializer({ path, url });\n    }\n    let search = query ? querySerializer(query) : '';\n    if (search.startsWith('?')) {\n        search = search.substring(1);\n    }\n    if (search) {\n        url += `?${search}`;\n    }\n    return url;\n};\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n    const config = { ...a, ...b };\n    if (config.baseUrl?.endsWith('/')) {\n        config.baseUrl = config.baseUrl.substring(0, config.baseUrl.length - 1);\n    }\n    config.headers = mergeHeaders(a.headers, b.headers);\n    return config;\n};\n\nexport const mergeHeaders = (\n    ...headers: Array['headers'] | undefined>\n): Headers => {\n    const mergedHeaders = new Headers();\n    for (const header of headers) {\n        if (!header || typeof header !== 'object') {\n            continue;\n        }\n\n        const iterator =\n            header instanceof Headers\n                ? header.entries()\n                : Object.entries(header);\n\n        for (const [key, value] of iterator) {\n            if (value === null) {\n                mergedHeaders.delete(key);\n            } else if (Array.isArray(value)) {\n                for (const v of value) {\n                    mergedHeaders.append(key, v as string);\n                }\n            } else if (value !== undefined) {\n                // assume object headers are meant to be JSON stringified, i.e. their\n                // content value in OpenAPI specification is 'application/json'\n                mergedHeaders.set(\n                    key,\n                    typeof value === 'object'\n                        ? JSON.stringify(value)\n                        : (value as string),\n                );\n            }\n        }\n    }\n    return mergedHeaders;\n};\n\ntype ErrInterceptor = (\n    error: Err,\n    response: Res,\n    request: Req,\n    options: Options,\n) => Err | Promise;\n\ntype ReqInterceptor = (\n    request: Req,\n    options: Options,\n) => Req | Promise;\n\ntype ResInterceptor = (\n    response: Res,\n    request: Req,\n    options: Options,\n) => Res | Promise;\n\nclass Interceptors {\n    _fns: (Interceptor | null)[];\n\n    constructor() {\n        this._fns = [];\n    }\n\n    clear() {\n        this._fns = [];\n    }\n\n    getInterceptorIndex(id: number | Interceptor): number {\n        if (typeof id === 'number') {\n            return this._fns[id] ? id : -1;\n        } else {\n            return this._fns.indexOf(id);\n        }\n    }\n    exists(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        return !!this._fns[index];\n    }\n\n    eject(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = null;\n        }\n    }\n\n    update(id: number | Interceptor, fn: Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = fn;\n            return id;\n        } else {\n            return false;\n        }\n    }\n\n    use(fn: Interceptor) {\n        this._fns = [...this._fns, fn];\n        return this._fns.length - 1;\n    }\n}\n\n// `createInterceptors()` response, meant for external use as it does not\n// expose internals\nexport interface Middleware {\n    error: Pick>,\n        'eject' | 'use'\n    >;\n    request: Pick>, 'eject' | 'use'>;\n    response: Pick>,\n        'eject' | 'use'\n    >;\n}\n\n// do not add `Middleware` as return type so we can use _fns internally\nexport const createInterceptors = () => ({\n    error: new Interceptors>(),\n    request: new Interceptors>(),\n    response: new Interceptors>(),\n});\n\nconst defaultQuerySerializer = createQuerySerializer({\n    allowReserved: false,\n    array: {\n        explode: true,\n        style: 'form',\n    },\n    object: {\n        explode: true,\n        style: 'deepObject',\n    },\n});\n\nconst defaultHeaders = {\n    'Content-Type': 'application/json',\n};\n\nexport const createConfig = (\n    override: Config & T> = {},\n): Config & T> => ({\n    ...jsonBodySerializer,\n    headers: defaultHeaders,\n    parseAs: 'auto',\n    querySerializer: defaultQuerySerializer,\n    ...override,\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/IssuanceConfig.html":{"url":"entities/IssuanceConfig.html","title":"entity - IssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  IssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/issuance-config.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                claims\n                            \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                disclosureFrame\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                presentation_during_issuance\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfigurationSupported\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:42\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        disclosureFrame\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        presentation_during_issuance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PresentationDuringIssuance\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SchemaResponse\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         VCT\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { CredentialConfigurationSupported } from '@openid4vc/openid4vci';\nimport { IsString, IsOptional, IsObject } from 'class-validator';\nimport { Column, Entity } from 'typeorm';\nimport { VCT, PresentationDuringIssuance } from '../dto/credential-config.dto';\nimport { SchemaResponse } from '../dto/schema-response.dto';\nimport { ApiHideProperty } from '@nestjs/swagger';\n\n@Entity()\nexport class IssuanceConfig {\n    @Column('varchar', { primary: true })\n    @IsString()\n    id: string;\n    @ApiHideProperty()\n    @Column('varchar', { primary: true })\n    tenantId: string;\n    @Column('json')\n    @IsObject()\n    config: CredentialConfigurationSupported;\n    @Column('json')\n    // default values to be used\n    @IsObject()\n    claims: Record;\n    @Column('json')\n    @IsObject()\n    disclosureFrame: Record;\n    @Column('json', { nullable: true })\n    @IsObject()\n    @IsOptional()\n    vct?: VCT;\n    @Column('json', { nullable: true })\n    @IsObject()\n    @IsOptional()\n    presentation_during_issuance?: PresentationDuringIssuance;\n    @Column('json', { nullable: true })\n    @IsObject()\n    @IsOptional()\n    schema?: SchemaResponse;\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuerManagementController.html":{"url":"controllers/IssuerManagementController.html","title":"controller - IssuerManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuerManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuer-management/issuer-management.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                configuration\n                            \n                            \n                                    \n                                deleteConfiguration\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                            \n                                    \n                                storeConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        configuration\n                        \n                    \n                \n            \n            \n                \n                        \n                    configuration(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:106\n                        \n                    \n\n\n            \n                \n                        Returns the credential configuration for all supported credentials.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:132\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: OfferRequest, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@ApiBody({type: OfferRequest, examples: undefined})@Post('offer')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:74\n                        \n                    \n\n\n            \n                \n                        Create an offer for a credential. This endpoint may be protected\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            OfferRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeConfiguration(config: IssuanceConfig, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:116\n                        \n                    \n\n\n            \n                \n                        Stores a credential configuration. If it already exists, it will be updated.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            IssuanceConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Res,\n    UseGuards,\n} from '@nestjs/common';\nimport { CredentialsService } from '../credentials/credentials.service';\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { IssuanceConfig } from '../../issuer/credentials/entities/issuance-config.entity';\nimport { Oid4vciService } from '../../issuer/oid4vci/oid4vci.service';\nimport { OfferResponse, OfferRequest } from '../oid4vci/dto/offer-request.dto';\nimport { ResponseType } from '../../verifier/oid4vp/dto/presentation-request.dto';\nimport * as QRCode from 'qrcode';\nimport { Response } from 'express';\n\n@ApiTags('Issuer management', 'Admin')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('issuer-management')\nexport class IssuerManagementController {\n    constructor(\n        private readonly credentialsService: CredentialsService,\n        private readonly oid4vciService: Oid4vciService,\n    ) {}\n\n    /**\n     * Create an offer for a credential. This endpoint may be protected\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: 'JSON response',\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            'application/json': { schema: { type: 'object' } },\n            'image/png': { schema: { type: 'string', format: 'binary' } },\n        },\n    })\n    @ApiProduces('application/json', 'image/png')\n    @ApiBody({\n        type: OfferRequest,\n        examples: {\n            qrcode: {\n                summary: 'QR-Code Example',\n                value: {\n                    response_type: ResponseType.QRCode,\n                    credentialConfigurationIds: ['pid'],\n                } as OfferRequest,\n            },\n            uri: {\n                summary: 'URI',\n                value: {\n                    response_type: ResponseType.URI,\n                    credentialConfigurationIds: ['pid'],\n                } as OfferRequest,\n            },\n        },\n    })\n    @Post('offer')\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: OfferRequest,\n        @Token() user: TokenPayload,\n    ) {\n        // For now, we'll just pass the body to the service as before\n        // You can modify the service later to accept user information if needed\n        const values = await this.oid4vciService.createOffer(\n            body,\n            user,\n            user.sub,\n        );\n\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader('Content-Type', 'image/png');\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n\n    /**\n     * Returns the credential configuration for all supported credentials.\n     * @returns\n     */\n    @Get()\n    configuration(@Token() user: TokenPayload) {\n        return this.credentialsService.getConfig(user.sub);\n    }\n\n    /**\n     * Stores a credential configuration. If it already exists, it will be updated.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeConfiguration(\n        @Body() config: IssuanceConfig,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.storeCredentialConfiguration(\n            user.sub,\n            config,\n        );\n    }\n\n    /**\n     * Deletes a credential configuration by its ID.\n     * @param id\n     * @returns\n     */\n    @Delete('/:id')\n    deleteConfiguration(@Param('id') id: string, @Token() user: TokenPayload) {\n        return this.credentialsService.deleteCredentialConfiguration(\n            user.sub,\n            id,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IssuerMetadata.html":{"url":"interfaces/IssuerMetadata.html","title":"interface - IssuerMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IssuerMetadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/dto/issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the issuer metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            issuer\n                                        \n                                \n                                \n                                        \n                                            jwks\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        issuer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        issuer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The issuer identifier, typically a URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwks:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { JWK } from 'jose';\n\n/**\n * Interface representing the issuer metadata.\n */\nexport interface IssuerMetadata {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    issuer: string;\n    /**\n     * The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n     */\n    jwks: {\n        /**\n         * List of keys in the JWKS.\n         */\n        keys: JWK[];\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IssuerModule.html":{"url":"modules/IssuerModule.html","title":"module - IssuerModule","body":"\n                   \n\n\n\n\n    Modules\n    IssuerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_exports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/issuer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            CredentialsService\n                        \n                        \n                            Oid4vciService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vciController\n                        \n                        \n                            AuthorizeController\n                        \n                        \n                            CredentialsController\n                        \n                        \n                            IssuerManagementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            Oid4vciService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthorizeService } from './authorize/authorize.service';\nimport { CredentialsService } from './credentials/credentials.service';\nimport { Oid4vciService } from './oid4vci/oid4vci.service';\nimport { Oid4vciController } from './oid4vci/oid4vci.controller';\nimport { AuthorizeController } from './authorize/authorize.controller';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport { StatusListModule } from './status-list/status-list.module';\nimport { CredentialsController } from './credentials/credentials.controller';\nimport * as Joi from 'joi';\nimport { SessionModule } from '../session/session.module';\nimport { IssuerManagementController } from './issuer-management/issuer-management.controller';\nimport { Oid4vpModule } from '../verifier/oid4vp/oid4vp.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { IssuanceConfig } from './credentials/entities/issuance-config.entity';\nimport { SessionLoggerService } from '../utils/session-logger.service';\nimport { SessionLoggerInterceptor } from '../utils/session-logger.interceptor';\n\nexport const ISSUER_VALIDATION_SCHEMA = {\n    PUBLIC_URL: Joi.string(),\n};\n\n@Module({\n    imports: [\n        CryptoModule,\n        StatusListModule,\n        Oid4vpModule,\n        SessionModule,\n        TypeOrmModule.forFeature([IssuanceConfig]),\n    ],\n    controllers: [\n        Oid4vciController,\n        AuthorizeController,\n        CredentialsController,\n        IssuerManagementController,\n    ],\n    providers: [\n        AuthorizeService,\n        CredentialsService,\n        Oid4vciService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n    ],\n    exports: [AuthorizeService, Oid4vciService],\n})\nexport class IssuerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwksResponseDto.html":{"url":"classes/JwksResponseDto.html","title":"class - JwksResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwksResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keys\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    An array of EC public keys in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from 'jose';\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: 'EC';\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n    constructor(private reflector: Reflector) {\n        super();\n    }\n\n    canActivate(context: ExecutionContext) {\n        const isPublic = this.reflector.getAllAndOverride(\n            IS_PUBLIC_KEY,\n            [context.getHandler(), context.getClass()],\n        );\n        if (isPublic) {\n            return true;\n        }\n        return super.canActivate(context);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtService.html":{"url":"injectables/JwtService.html","title":"injectable - JwtService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                decodeToken\n                            \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                isUsingExternalOIDC\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        decodeToken\n                        \n                    \n                \n            \n            \n                \ndecodeToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:83\n                        \n                    \n\n\n            \n                \n                        Decode token without verification (for debugging)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TokenPayload | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(payload: TokenPayload, options: GenerateTokenOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:19\n                        \n                    \n\n\n            \n                \n                        Generate a JWT token for integrated OAuth2 server\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                options\n                                            \n                                                            GenerateTokenOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUsingExternalOIDC\n                        \n                    \n                \n            \n            \n                \nisUsingExternalOIDC()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Check if the service is using external OIDC provider\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Verify a JWT token (for additional validation if needed)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SignJWT, jwtVerify, decodeJwt } from 'jose';\nimport { TokenPayload } from './token.decorator';\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {}\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow('JWT_EXPIRES_IN');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: 'HS256' })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token verification is handled by external OIDC provider.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: ['HS256'],\n            });\n\n            return payload as TokenPayload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Decode token without verification (for debugging)\n     */\n    decodeToken(token: string): TokenPayload | null {\n        try {\n            return decodeJwt(token) as TokenPayload;\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get('OIDC') !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                getExternalOIDCConfig\n                            \n                            \n                                    Private\n                                    Static\n                                getIntegratedOAuth2Config\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getExternalOIDCConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getExternalOIDCConfig(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { secretOrKeyProvider: any; jwtFromRequest: any; algorithms: {}; issuer: any; audience: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getIntegratedOAuth2Config\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIntegratedOAuth2Config(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: TokenPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { passportJwtSecret } from 'jwks-rsa';\nimport { ConfigService } from '@nestjs/config';\nimport { TokenPayload } from './token.decorator';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n    constructor(private configService: ConfigService) {\n        const useExternalOIDC = configService.get('OIDC');\n\n        super(\n            useExternalOIDC\n                ? JwtStrategy.getExternalOIDCConfig(configService)\n                : JwtStrategy.getIntegratedOAuth2Config(configService),\n        );\n    }\n\n    private static getExternalOIDCConfig(configService: ConfigService) {\n        //TODO: test it\n        return {\n            secretOrKeyProvider: passportJwtSecret({\n                cache: true,\n                rateLimit: true,\n                jwksRequestsPerMinute: 5,\n                jwksUri: `${configService.get('KEYCLOAK_INTERNAL_ISSUER_URL')}/protocol/openid-connect/certs`,\n                handleSigningKeyError: (err, cb) => {\n                    console.log('Keycloak JWKS error:', err);\n                    if (err instanceof Error) {\n                        return cb(err);\n                    }\n                    return cb(\n                        new Error(\n                            'Could not get the signing key from Keycloak',\n                        ),\n                    );\n                },\n            }),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: ['RS256'],\n            issuer: configService.get('KEYCLOAK_INTERNAL_ISSUER_URL'),\n            audience: configService.get('KEYCLOAK_CLIENT_ID'), // You may want to add this to validation schema\n        };\n    }\n\n    private static getIntegratedOAuth2Config(\n        configService: ConfigService,\n    ): any {\n        const config = {\n            secretOrKey: configService.get('JWT_SECRET'),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: ['HS256'], // Using symmetric key for integrated OAuth2\n            ignoreExpiration: false, // Ensure tokens expire\n        };\n\n        // Add issuer validation only if JWT_ISSUER is configured\n        const issuer = configService.get('JWT_ISSUER');\n        if (issuer) {\n            (config as any).issuer = issuer;\n        }\n\n        return config;\n    }\n\n    validate(payload: TokenPayload): unknown {\n        const useExternalOIDC =\n            this.configService.get('OIDC') !== undefined;\n\n        if (useExternalOIDC) {\n            // External OIDC: Extract user info from external provider token\n            return payload;\n        } else {\n            // Integrated OAuth2: Use integrated server token validation\n            return payload;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/KeyEntity.html":{"url":"entities/KeyEntity.html","title":"entity - KeyEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  KeyEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/entities/key.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                privateKey\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        privateKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JsonWebKey\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/key.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/key.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\n\n@Entity()\nexport class KeyEntity {\n    @Column('varchar', { primary: true })\n    tenantId: string;\n    @Column('json')\n    privateKey: JsonWebKey;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeyModule.html":{"url":"modules/KeyModule.html","title":"module - KeyModule","body":"\n                   \n\n\n\n\n    Modules\n    KeyModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/key/key.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.module.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Global, Module } from '@nestjs/common';\nimport { FileSystemKeyService } from './filesystem-key.service';\nimport { VaultKeyService } from './vault-key.service';\nimport { CryptoModule } from './crypto/crypto.module';\nimport { CryptoService } from './crypto/crypto.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { HttpModule, HttpService } from '@nestjs/axios';\nimport * as Joi from 'joi';\nimport { TypeOrmModule } from '@nestjs/typeorm/dist/typeorm.module';\nimport { KeyEntity } from './entities/key.entity';\n\nexport const KEY_VALIDATION_SCHEMA = {\n    KM_TYPE: Joi.string().valid('file', 'vault').default('file'),\n\n    // Vault-related config\n    VAULT_URL: Joi.string().uri().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_TOKEN: Joi.string().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_KEY_ID: Joi.string().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.string().default('key-id'),\n        otherwise: Joi.optional(),\n    }),\n};\n\n@Global()\n@Module({})\nexport class KeyModule {\n    static forRoot(): DynamicModule {\n        return {\n            module: KeyModule,\n            imports: [\n                HttpModule,\n                ConfigModule,\n                CryptoModule,\n                TypeOrmModule.forFeature([KeyEntity]),\n            ],\n            providers: [\n                {\n                    provide: 'KeyService',\n                    useFactory: (\n                        configService: ConfigService,\n                        httpService: HttpService,\n                        cryptoService: CryptoService,\n                    ) => {\n                        const kmType = configService.get(\n                            'KM_TYPE',\n                        );\n                        if (kmType === 'vault') {\n                            return new VaultKeyService(\n                                httpService,\n                                configService,\n                                cryptoService,\n                            );\n                        }\n\n                        return new FileSystemKeyService(\n                            configService,\n                            cryptoService,\n                        );\n                    },\n                    inject: [ConfigService, HttpService, CryptoService],\n                },\n            ],\n            exports: ['KeyService'],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyService.html":{"url":"classes/KeyService.html","title":"class - KeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface for a key service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                getKid\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                init\n                            \n                            \n                                    Abstract\n                                signer\n                            \n                            \n                                    Abstract\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getKid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKid(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Get the key id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:11\n                        \n                    \n\n\n            \n                \n                        Initialize the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Get the callback for the signer function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JoseHeaderParameters, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JoseHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Signer } from '@sd-jwt/types';\nimport { JWK, JWTPayload, JoseHeaderParameters } from 'jose';\n\n/**\n * Generic interface for a key service\n */\nexport abstract class KeyService {\n    /**\n     * Initialize the key service\n     */\n    abstract init(tenantId): Promise;\n\n    /**\n     * Get the callback for the signer function\n     * @param tenantId\n     */\n    abstract signer(tenantId: string): Promise;\n\n    /**\n     * Get the key id\n     * @returns\n     */\n    abstract getKid(tenantId: string): Promise;\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    abstract getPublicKey(type: 'jwk', tenantId: string): Promise;\n    abstract getPublicKey(type: 'pem', tenantId: string): Promise;\n    abstract getPublicKey(\n        type: 'pem' | 'jwk',\n        tenantId: string,\n    ): Promise;\n\n    //TODO: this can be handled via the signer callback\n    abstract signJWT(\n        payload: JWTPayload,\n        header: JoseHeaderParameters,\n        tenantId: string,\n    ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerConfigService.html":{"url":"injectables/LoggerConfigService.html","title":"injectable - LoggerConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing logger configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getConfiguration\n                            \n                            \n                                getLogFormat\n                            \n                            \n                                getLogLevel\n                            \n                            \n                                isDebugModeEnabled\n                            \n                            \n                                isHttpLoggerEnabled\n                            \n                            \n                                isSessionLoggerEnabled\n                            \n                            \n                                    Private\n                                loadConfiguration\n                            \n                            \n                                    Private\n                                parseLogLevel\n                            \n                            \n                                reloadConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger-config.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConfiguration\n                        \n                    \n                \n            \n            \n                \ngetConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger-config.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         LoggerConfiguration\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogFormat\n                        \n                    \n                \n            \n            \n                \ngetLogFormat()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger-config.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     \"json\" | \"pretty\"\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogLevel\n                        \n                    \n                \n            \n            \n                \ngetLogLevel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger-config.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     LogLevel\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDebugModeEnabled\n                        \n                    \n                \n            \n            \n                \nisDebugModeEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger-config.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isHttpLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisHttpLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger-config.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSessionLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisSessionLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger-config.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger-config.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseLogLevel\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseLogLevel(level: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger-config.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                level\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     LogLevel\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reloadConfiguration\n                        \n                    \n                \n            \n            \n                \nreloadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger-config.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Hot reload configuration from environment\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoggerConfiguration\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger-config.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, LogLevel } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    disableSessionLogger: boolean;\n    disableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: 'json' | 'pretty';\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get('LOG_LEVEL', 'info'),\n            ),\n            disableSessionLogger: this.configService.get(\n                'LOG_DISABLE_SESSION_LOGGER',\n                false,\n            ),\n            disableHttpLogger: this.configService.get(\n                'LOG_DISABLE_HTTP_LOGGER',\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                'LOG_DEBUG_MODE',\n                false,\n            ),\n            logFormat: this.configService.get(\n                'LOG_FORMAT',\n                'pretty',\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: 'verbose',\n            debug: 'debug',\n            log: 'log',\n            warn: 'warn',\n            error: 'error',\n            fatal: 'fatal',\n        };\n        return levels[level.toLowerCase()] || 'log';\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return !this.config.disableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return !this.config.disableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): 'json' | 'pretty' {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggerConfiguration.html":{"url":"interfaces/LoggerConfiguration.html","title":"interface - LoggerConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoggerConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger-config.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            disableHttpLogger\n                                        \n                                \n                                \n                                        \n                                            disableSessionLogger\n                                        \n                                \n                                \n                                        \n                                            enableDebugMode\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            logFormat\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disableHttpLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableHttpLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableSessionLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableSessionLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableDebugMode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableDebugMode:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:     LogLevel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     LogLevel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logFormat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logFormat:     \"json\" | \"pretty\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"json\" | \"pretty\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, LogLevel } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    disableSessionLogger: boolean;\n    disableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: 'json' | 'pretty';\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get('LOG_LEVEL', 'info'),\n            ),\n            disableSessionLogger: this.configService.get(\n                'LOG_DISABLE_SESSION_LOGGER',\n                false,\n            ),\n            disableHttpLogger: this.configService.get(\n                'LOG_DISABLE_HTTP_LOGGER',\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                'LOG_DEBUG_MODE',\n                false,\n            ),\n            logFormat: this.configService.get(\n                'LOG_FORMAT',\n                'pretty',\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: 'verbose',\n            debug: 'debug',\n            log: 'log',\n            warn: 'warn',\n            error: 'error',\n            fatal: 'fatal',\n        };\n        return levels[level.toLowerCase()] || 'log';\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return !this.config.disableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return !this.config.disableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): 'json' | 'pretty' {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Middleware.html":{"url":"interfaces/Middleware.html","title":"interface - Middleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Middleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/utils.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            request\n                                        \n                                \n                                \n                                        \n                                            response\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         Pick> | \"eject\" | \"use\">\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Pick> | \"eject\" | \"use\">\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        request\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        request:         Pick> | \"eject\" | \"use\">\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Pick> | \"eject\" | \"use\">\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        response:         Pick> | \"eject\" | \"use\">\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Pick> | \"eject\" | \"use\">\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { getAuthToken } from '../core/auth';\nimport type {\n    QuerySerializer,\n    QuerySerializerOptions,\n} from '../core/bodySerializer';\nimport { jsonBodySerializer } from '../core/bodySerializer';\nimport {\n    serializeArrayParam,\n    serializeObjectParam,\n    serializePrimitiveParam,\n} from '../core/pathSerializer';\nimport type { Client, ClientOptions, Config, RequestOptions } from './types';\n\ninterface PathSerializer {\n    path: Record;\n    url: string;\n}\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\ntype ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\ntype ArraySeparatorStyle = ArrayStyle | MatrixStyle;\n\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n    let url = _url;\n    const matches = _url.match(PATH_PARAM_RE);\n    if (matches) {\n        for (const match of matches) {\n            let explode = false;\n            let name = match.substring(1, match.length - 1);\n            let style: ArraySeparatorStyle = 'simple';\n\n            if (name.endsWith('*')) {\n                explode = true;\n                name = name.substring(0, name.length - 1);\n            }\n\n            if (name.startsWith('.')) {\n                name = name.substring(1);\n                style = 'label';\n            } else if (name.startsWith(';')) {\n                name = name.substring(1);\n                style = 'matrix';\n            }\n\n            const value = path[name];\n\n            if (value === undefined || value === null) {\n                continue;\n            }\n\n            if (Array.isArray(value)) {\n                url = url.replace(\n                    match,\n                    serializeArrayParam({ explode, name, style, value }),\n                );\n                continue;\n            }\n\n            if (typeof value === 'object') {\n                url = url.replace(\n                    match,\n                    serializeObjectParam({\n                        explode,\n                        name,\n                        style,\n                        value: value as Record,\n                        valueOnly: true,\n                    }),\n                );\n                continue;\n            }\n\n            if (style === 'matrix') {\n                url = url.replace(\n                    match,\n                    `;${serializePrimitiveParam({\n                        name,\n                        value: value as string,\n                    })}`,\n                );\n                continue;\n            }\n\n            const replaceValue = encodeURIComponent(\n                style === 'label' ? `.${value as string}` : (value as string),\n            );\n            url = url.replace(match, replaceValue);\n        }\n    }\n    return url;\n};\n\nexport const createQuerySerializer = ({\n    allowReserved,\n    array,\n    object,\n}: QuerySerializerOptions = {}) => {\n    const querySerializer = (queryParams: T) => {\n        const search: string[] = [];\n        if (queryParams && typeof queryParams === 'object') {\n            for (const name in queryParams) {\n                const value = queryParams[name];\n\n                if (value === undefined || value === null) {\n                    continue;\n                }\n\n                if (Array.isArray(value)) {\n                    const serializedArray = serializeArrayParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'form',\n                        value,\n                        ...array,\n                    });\n                    if (serializedArray) search.push(serializedArray);\n                } else if (typeof value === 'object') {\n                    const serializedObject = serializeObjectParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'deepObject',\n                        value: value as Record,\n                        ...object,\n                    });\n                    if (serializedObject) search.push(serializedObject);\n                } else {\n                    const serializedPrimitive = serializePrimitiveParam({\n                        allowReserved,\n                        name,\n                        value: value as string,\n                    });\n                    if (serializedPrimitive) search.push(serializedPrimitive);\n                }\n            }\n        }\n        return search.join('&');\n    };\n    return querySerializer;\n};\n\n/**\n * Infers parseAs value from provided Content-Type header.\n */\nexport const getParseAs = (\n    contentType: string | null,\n): Exclude => {\n    if (!contentType) {\n        // If no Content-Type header is provided, the best we can do is return the raw response body,\n        // which is effectively the same as the 'stream' option.\n        return 'stream';\n    }\n\n    const cleanContent = contentType.split(';')[0]?.trim();\n\n    if (!cleanContent) {\n        return;\n    }\n\n    if (\n        cleanContent.startsWith('application/json') ||\n        cleanContent.endsWith('+json')\n    ) {\n        return 'json';\n    }\n\n    if (cleanContent === 'multipart/form-data') {\n        return 'formData';\n    }\n\n    if (\n        ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n            cleanContent.startsWith(type),\n        )\n    ) {\n        return 'blob';\n    }\n\n    if (cleanContent.startsWith('text/')) {\n        return 'text';\n    }\n\n    return;\n};\n\nexport const setAuthParams = async ({\n    security,\n    ...options\n}: Pick, 'security'> &\n    Pick & {\n        headers: Headers;\n    }) => {\n    for (const auth of security) {\n        const token = await getAuthToken(auth, options.auth);\n\n        if (!token) {\n            continue;\n        }\n\n        const name = auth.name ?? 'Authorization';\n\n        switch (auth.in) {\n            case 'query':\n                if (!options.query) {\n                    options.query = {};\n                }\n                options.query[name] = token;\n                break;\n            case 'cookie':\n                options.headers.append('Cookie', `${name}=${token}`);\n                break;\n            case 'header':\n            default:\n                options.headers.set(name, token);\n                break;\n        }\n\n        return;\n    }\n};\n\nexport const buildUrl: Client['buildUrl'] = (options) => {\n    const url = getUrl({\n        baseUrl: options.baseUrl as string,\n        path: options.path,\n        query: options.query,\n        querySerializer:\n            typeof options.querySerializer === 'function'\n                ? options.querySerializer\n                : createQuerySerializer(options.querySerializer),\n        url: options.url,\n    });\n    return url;\n};\n\nexport const getUrl = ({\n    baseUrl,\n    path,\n    query,\n    querySerializer,\n    url: _url,\n}: {\n    baseUrl?: string;\n    path?: Record;\n    query?: Record;\n    querySerializer: QuerySerializer;\n    url: string;\n}) => {\n    const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n    let url = (baseUrl ?? '') + pathUrl;\n    if (path) {\n        url = defaultPathSerializer({ path, url });\n    }\n    let search = query ? querySerializer(query) : '';\n    if (search.startsWith('?')) {\n        search = search.substring(1);\n    }\n    if (search) {\n        url += `?${search}`;\n    }\n    return url;\n};\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n    const config = { ...a, ...b };\n    if (config.baseUrl?.endsWith('/')) {\n        config.baseUrl = config.baseUrl.substring(0, config.baseUrl.length - 1);\n    }\n    config.headers = mergeHeaders(a.headers, b.headers);\n    return config;\n};\n\nexport const mergeHeaders = (\n    ...headers: Array['headers'] | undefined>\n): Headers => {\n    const mergedHeaders = new Headers();\n    for (const header of headers) {\n        if (!header || typeof header !== 'object') {\n            continue;\n        }\n\n        const iterator =\n            header instanceof Headers\n                ? header.entries()\n                : Object.entries(header);\n\n        for (const [key, value] of iterator) {\n            if (value === null) {\n                mergedHeaders.delete(key);\n            } else if (Array.isArray(value)) {\n                for (const v of value) {\n                    mergedHeaders.append(key, v as string);\n                }\n            } else if (value !== undefined) {\n                // assume object headers are meant to be JSON stringified, i.e. their\n                // content value in OpenAPI specification is 'application/json'\n                mergedHeaders.set(\n                    key,\n                    typeof value === 'object'\n                        ? JSON.stringify(value)\n                        : (value as string),\n                );\n            }\n        }\n    }\n    return mergedHeaders;\n};\n\ntype ErrInterceptor = (\n    error: Err,\n    response: Res,\n    request: Req,\n    options: Options,\n) => Err | Promise;\n\ntype ReqInterceptor = (\n    request: Req,\n    options: Options,\n) => Req | Promise;\n\ntype ResInterceptor = (\n    response: Res,\n    request: Req,\n    options: Options,\n) => Res | Promise;\n\nclass Interceptors {\n    _fns: (Interceptor | null)[];\n\n    constructor() {\n        this._fns = [];\n    }\n\n    clear() {\n        this._fns = [];\n    }\n\n    getInterceptorIndex(id: number | Interceptor): number {\n        if (typeof id === 'number') {\n            return this._fns[id] ? id : -1;\n        } else {\n            return this._fns.indexOf(id);\n        }\n    }\n    exists(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        return !!this._fns[index];\n    }\n\n    eject(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = null;\n        }\n    }\n\n    update(id: number | Interceptor, fn: Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = fn;\n            return id;\n        } else {\n            return false;\n        }\n    }\n\n    use(fn: Interceptor) {\n        this._fns = [...this._fns, fn];\n        return this._fns.length - 1;\n    }\n}\n\n// `createInterceptors()` response, meant for external use as it does not\n// expose internals\nexport interface Middleware {\n    error: Pick>,\n        'eject' | 'use'\n    >;\n    request: Pick>, 'eject' | 'use'>;\n    response: Pick>,\n        'eject' | 'use'\n    >;\n}\n\n// do not add `Middleware` as return type so we can use _fns internally\nexport const createInterceptors = () => ({\n    error: new Interceptors>(),\n    request: new Interceptors>(),\n    response: new Interceptors>(),\n});\n\nconst defaultQuerySerializer = createQuerySerializer({\n    allowReserved: false,\n    array: {\n        explode: true,\n        style: 'form',\n    },\n    object: {\n        explode: true,\n        style: 'deepObject',\n    },\n});\n\nconst defaultHeaders = {\n    'Content-Type': 'application/json',\n};\n\nexport const createConfig = (\n    override: Config & T> = {},\n): Config & T> => ({\n    ...jsonBodySerializer,\n    headers: defaultHeaders,\n    parseAs: 'auto',\n    querySerializer: defaultQuerySerializer,\n    ...override,\n});\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotificationRequestDto.html":{"url":"classes/NotificationRequestDto.html","title":"class - NotificationRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotificationRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/notification-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                event\n                            \n                            \n                                    \n                                notification_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationEvent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['credential_issued', 'credential_revoked'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notification_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotificationEvent } from '@openid4vc/openid4vci';\nimport { IsEnum, IsString } from 'class-validator';\n\nexport class NotificationRequestDto {\n    @IsString()\n    notification_id: string;\n\n    @IsEnum(['credential_issued', 'credential_revoked'])\n    event: NotificationEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Oauth2AuthorizationServerResponse.html":{"url":"classes/Oauth2AuthorizationServerResponse.html","title":"class - Oauth2AuthorizationServerResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Oauth2AuthorizationServerResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/oauth-authorization-server-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response from an OAuth2 authorization server.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_challenge_endpoint\n                            \n                            \n                                authorization_endpoint\n                            \n                            \n                                code_challenge_methods_supported\n                            \n                            \n                                dpop_signing_alg_values_supported\n                            \n                            \n                                issuer\n                            \n                            \n                                jwks_uri\n                            \n                            \n                                pushed_authorization_request_endpoint\n                            \n                            \n                                require_pushed_authorization_requests\n                            \n                            \n                                token_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_challenge_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:37\n                        \n                    \n\n            \n                \n                    The URL of the authorization challenge endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:13\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's authorization endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        code_challenge_methods_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:21\n                        \n                    \n\n            \n                \n                    List of supported algorithms to sign the challenge\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dpop_signing_alg_values_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:25\n                        \n                    \n\n            \n                \n                    List of supported algorithms for DPoP signing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwks_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:17\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushed_authorization_request_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    The URL of the pushed authorization request endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        require_pushed_authorization_requests\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:29\n                        \n                    \n\n            \n                \n                    Indicates whether the server requires pushed authorization requests.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's token endpoint.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Oauth2AuthorizationServerResponse {\n    issuer: string;\n    /**\n     * The URL of the OAuth2 authorization server's token endpoint.\n     */\n    token_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's authorization endpoint.\n     */\n    authorization_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n     */\n    jwks_uri: string;\n    /**\n     * List of supported algorithms to sign the challenge\n     */\n    code_challenge_methods_supported: string[];\n    /**\n     * List of supported algorithms for DPoP signing.\n     */\n    dpop_signing_alg_values_supported: string[];\n    /**\n     * Indicates whether the server requires pushed authorization requests.\n     */\n    require_pushed_authorization_requests: boolean;\n    /**\n     * The URL of the pushed authorization request endpoint.\n     */\n    pushed_authorization_request_endpoint: string;\n    /**\n     * The URL of the authorization challenge endpoint.\n     */\n    authorization_challenge_endpoint: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferRequest.html":{"url":"classes/OfferRequest.html","title":"class - OfferRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                credentialConfigurationIds\n                            \n                            \n                                    \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credentialConfigurationIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ArrayNotEmpty()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:27\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'qrcode', description: 'The type of response expected for the offer request.'})@IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:20\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ArrayNotEmpty,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n} from 'class-validator';\nimport { ResponseType } from '../../../verifier/oid4vp/dto/presentation-request.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class OfferRequest {\n    /**\n     * @example \"qrcode\"\n     */\n    @ApiProperty({\n        example: 'qrcode',\n        description: 'The type of response expected for the offer request.',\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * @example [\"pid\"]\n     */\n    @ArrayNotEmpty()\n    @IsString({ each: true })\n    credentialConfigurationIds: string[];\n\n    @IsObject()\n    @IsOptional()\n    values?: { [key: string]: Record };\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferResponse.html":{"url":"classes/OfferResponse.html","title":"class - OfferResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                session\n                            \n                            \n                                uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ArrayNotEmpty,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n} from 'class-validator';\nimport { ResponseType } from '../../../verifier/oid4vp/dto/presentation-request.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class OfferRequest {\n    /**\n     * @example \"qrcode\"\n     */\n    @ApiProperty({\n        example: 'qrcode',\n        description: 'The type of response expected for the offer request.',\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * @example [\"pid\"]\n     */\n    @ArrayNotEmpty()\n    @IsString({ each: true })\n    credentialConfigurationIds: string[];\n\n    @IsObject()\n    @IsOptional()\n    values?: { [key: string]: Record };\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vciController.html":{"url":"controllers/Oid4vciController.html","title":"controller - Oid4vciController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vciController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/oid4vci.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/vci\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                credential\n                            \n                            \n                                    \n                                    \n                                notifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credential\n                        \n                    \n                \n            \n            \n                \n                        \n                    credential(req: Request, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('credential')@SessionLogger('state', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:28\n                        \n                    \n\n\n            \n                \n                        Endpoint to issue credentials\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        notifications\n                        \n                    \n                \n            \n            \n                \n                        \n                    notifications(body: NotificationRequestDto, req: Request, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('notification')@SessionLogger('notification_id', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:42\n                        \n                    \n\n\n            \n                \n                        Notification endpoint\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            NotificationRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Param,\n    Post,\n    Req,\n    UseInterceptors,\n} from '@nestjs/common';\nimport type { CredentialResponse } from '@openid4vc/openid4vci';\nimport type { Request } from 'express';\nimport { Oid4vciService } from '../../issuer/oid4vci/oid4vci.service';\nimport { NotificationRequestDto } from './dto/notification-request.dto';\nimport { SessionLogger } from '../../utils/session-logger.decorator';\nimport { SessionLoggerInterceptor } from '../../utils/session-logger.interceptor';\n\n@Controller(':tenantId/vci')\n@UseInterceptors(SessionLoggerInterceptor)\nexport class Oid4vciController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Endpoint to issue credentials\n     * @param req\n     * @returns\n     */\n    @Post('credential')\n    @SessionLogger('state', 'OID4VCI')\n    credential(\n        @Req() req: Request,\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        return this.oid4vciService.getCredential(req, tenantId);\n    }\n\n    /**\n     * Notification endpoint\n     * @param body\n     * @returns\n     */\n    @Post('notification')\n    @SessionLogger('notification_id', 'OID4VCI')\n    notifications(\n        @Body() body: NotificationRequestDto,\n        @Req() req: Request,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.oid4vciService.handleNotification(req, body, tenantId);\n    }\n\n    //TODO: this endpoint may be relevant for the wallet attestation.\n    /* @Get('session')\n  session() {\n    console.log('Session requested');\n    //TODO store session and created at\n    const session = randomUUID();\n    return {\n      session_id: session,\n    };\n  } */\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Oid4vciService.html":{"url":"injectables/Oid4vciService.html","title":"injectable - Oid4vciService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Oid4vciService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/oid4vci.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                credentialsService\n                            \n                            \n                                    Private\n                                issuer\n                            \n                            \n                                resourceServer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createOffer\n                            \n                            \n                                    Async\n                                getCredential\n                            \n                            \n                                    Async\n                                handleNotification\n                            \n                            \n                                    Async\n                                issuerMetadata\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authzService: AuthorizeService, cryptoService: CryptoService, credentialsService: CredentialsService, configService: ConfigService, sessionService: SessionService, sessionLogger: SessionLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authzService\n                                                  \n                                                        \n                                                                        AuthorizeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialsService\n                                                  \n                                                        \n                                                                        CredentialsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOffer(body: OfferRequest, user: TokenPayload, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            OfferRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredential\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredential(req: Request, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:151\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleNotification(req: Request, body: NotificationRequestDto, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:262\n                        \n                    \n\n\n            \n                \n                        Store the notification in the session based on the notitification id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            NotificationRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        issuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    issuerMetadata(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        credentialsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialsService\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Openid4vciIssuer\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resourceServer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Oauth2ResourceServer\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:39\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    BadRequestException,\n    ConflictException,\n    Injectable,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    type HttpMethod,\n    Oauth2ResourceServer,\n    SupportedAuthenticationScheme,\n    authorizationCodeGrantIdentifier,\n} from '@openid4vc/oauth2';\nimport {\n    type CredentialResponse,\n    type IssuerMetadataResult,\n    Openid4vciDraftVersion,\n    Openid4vciIssuer,\n} from '@openid4vc/openid4vci';\nimport type { Request } from 'express';\nimport { CredentialsService } from '../../issuer/credentials/credentials.service';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { AuthorizeService } from '../authorize/authorize.service';\nimport { getHeadersFromRequest } from './util';\nimport { readFileSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { SessionService } from '../../session/session.service';\nimport { v4 } from 'uuid';\nimport { OfferRequest, OfferResponse } from './dto/offer-request.dto';\nimport { NotificationRequestDto } from './dto/notification-request.dto';\nimport { SessionLoggerService } from '../../utils/session-logger.service';\nimport { SessionLogContext } from '../../utils/session-logger-context';\nimport { TokenPayload } from '../../auth/token.decorator';\n\n@Injectable()\nexport class Oid4vciService implements OnModuleInit {\n    private issuer: Openid4vciIssuer;\n\n    resourceServer: Oauth2ResourceServer;\n\n    constructor(\n        private readonly authzService: AuthorizeService,\n        private readonly cryptoService: CryptoService,\n        public readonly credentialsService: CredentialsService,\n        private readonly configService: ConfigService,\n        private readonly sessionService: SessionService,\n        private readonly sessionLogger: SessionLoggerService,\n    ) {}\n    onModuleInit() {\n        //TODO: align for tenant\n        const callbacks = this.cryptoService.getCallbackContext('');\n        this.issuer = new Openid4vciIssuer({\n            callbacks,\n        });\n        this.resourceServer = new Oauth2ResourceServer({\n            callbacks,\n        });\n    }\n\n    async issuerMetadata(tenantId: string): Promise {\n        const credential_issuer = `${this.configService.getOrThrow(\n            'PUBLIC_URL',\n        )}/${tenantId}`;\n\n        const display = JSON.parse(\n            readFileSync(\n                join(\n                    this.configService.getOrThrow('FOLDER'),\n                    tenantId,\n                    'display.json',\n                ),\n                'utf-8',\n            ),\n        );\n\n        const authorizationServerMetadata =\n            this.authzService.authzMetadata(tenantId);\n\n        let credentialIssuer = this.issuer.createCredentialIssuerMetadata({\n            credential_issuer,\n            credential_configurations_supported:\n                await this.credentialsService.getCredentialConfiguration(\n                    tenantId,\n                ),\n            credential_endpoint: `${credential_issuer}/vci/credential`,\n            authorization_servers: [authorizationServerMetadata.issuer],\n            authorization_server: authorizationServerMetadata.issuer,\n            notification_endpoint: `${credential_issuer}/vci/notification`,\n            batch_credential_issuance: {\n                batch_size: 1,\n            },\n            display,\n        });\n\n        //replace placeholders in the issuer metadata\n        credentialIssuer = JSON.parse(\n            JSON.stringify(credentialIssuer).replace(\n                //g,\n                this.configService.getOrThrow('PUBLIC_URL'),\n            ),\n        );\n\n        return {\n            credentialIssuer,\n            authorizationServers: [authorizationServerMetadata],\n            originalDraftVersion: Openid4vciDraftVersion.Draft14,\n        } as const satisfies IssuerMetadataResult;\n    }\n\n    async createOffer(\n        body: OfferRequest,\n        user: TokenPayload,\n        tenantId: string,\n    ): Promise {\n        const configs =\n            await this.credentialsService.getCredentialConfiguration(user.sub);\n        body.credentialConfigurationIds.map((id) => {\n            if (configs[id] === undefined) {\n                throw new ConflictException(\n                    'Invalid credential configuration ID',\n                );\n            }\n        });\n\n        const issuerMetadata = await this.issuerMetadata(tenantId);\n        const issuer_state = v4();\n        return this.issuer\n            .createCredentialOffer({\n                credentialConfigurationIds: body.credentialConfigurationIds,\n                grants: {\n                    [authorizationCodeGrantIdentifier]: {\n                        issuer_state,\n                    },\n                },\n                issuerMetadata,\n            })\n            .then(async (offer) => {\n                await this.sessionService.create({\n                    id: issuer_state,\n                    offer: offer.credentialOfferObject,\n                    credentialPayload: body,\n                    tenantId: user.sub,\n                });\n                return {\n                    session: issuer_state,\n                    uri: offer.credentialOffer,\n                } as OfferResponse;\n            });\n    }\n\n    async getCredential(\n        req: Request,\n        tenantId: string,\n    ): Promise {\n        const issuerMetadata = await this.issuerMetadata(tenantId);\n        const parsedCredentialRequest = this.issuer.parseCredentialRequest({\n            issuerMetadata,\n            credentialRequest: req.body as Record,\n        });\n\n        if (parsedCredentialRequest?.proofs?.jwt === undefined) {\n            throw new Error('Invalid credential request');\n        }\n\n        const headers = getHeadersFromRequest(req);\n        const { tokenPayload } =\n            await this.resourceServer.verifyResourceRequest({\n                authorizationServers: issuerMetadata.authorizationServers,\n                request: {\n                    url: `https://${req.host}${req.url}`,\n                    method: req.method as HttpMethod,\n                    headers,\n                },\n                resourceServer:\n                    issuerMetadata.credentialIssuer.credential_issuer,\n                allowedAuthenticationSchemes: [\n                    SupportedAuthenticationScheme.DPoP,\n                ],\n            });\n\n        const session = await this.sessionService.get(\n            tokenPayload.sub as string,\n        );\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId,\n            flowType: 'OID4VCI',\n            stage: 'credential_request',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            credentialConfigurationId:\n                parsedCredentialRequest.credentialConfigurationId,\n            proofCount: parsedCredentialRequest.proofs?.jwt?.length || 0,\n        });\n\n        try {\n            const credentials: string[] = [];\n            for (const jwt of parsedCredentialRequest.proofs.jwt) {\n                const verifiedProof =\n                    await this.issuer.verifyCredentialRequestJwtProof({\n                        //check if this is correct or if the passed nonce is validated.\n                        expectedNonce: tokenPayload.nonce as string,\n                        issuerMetadata: await this.issuerMetadata(tenantId),\n                        jwt,\n                    });\n                const cnf = verifiedProof.signer.publicJwk;\n                const cred = await this.credentialsService.getCredential(\n                    parsedCredentialRequest.credentialConfigurationId as string,\n                    cnf as any,\n                    session,\n                );\n                credentials.push(cred);\n\n                this.sessionLogger.logCredentialIssuance(\n                    logContext,\n                    parsedCredentialRequest.credentialConfigurationId as string,\n                    {\n                        credentialSize: cred.length,\n                        proofVerified: true,\n                    },\n                );\n            }\n\n            const notificationId = v4();\n            session.notifications.push({\n                id: notificationId,\n            });\n            await this.sessionService.add(session.id, tenantId, {\n                notifications: session.notifications,\n            });\n\n            this.sessionLogger.logFlowComplete(logContext, {\n                credentialsIssued: credentials.length,\n                notificationId,\n            });\n\n            return this.issuer.createCredentialResponse({\n                credentials,\n                credentialRequest: parsedCredentialRequest,\n                cNonce: tokenPayload.nonce as string,\n                cNonceExpiresInSeconds: 3600,\n                //this should be stored in the session in case this endpoint is requested multiple times, but the response is differnt.\n                notificationId,\n            });\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                credentialConfigurationId:\n                    parsedCredentialRequest.credentialConfigurationId,\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Store the notification in the session based on the notitification id.\n     * @param req\n     * @param body\n     */\n    async handleNotification(\n        req: Request,\n        body: NotificationRequestDto,\n        tenantId: string,\n    ) {\n        const issuerMetadata = await this.issuerMetadata(tenantId);\n        const headers = getHeadersFromRequest(req);\n        const { tokenPayload } =\n            await this.resourceServer.verifyResourceRequest({\n                authorizationServers: issuerMetadata.authorizationServers,\n                request: {\n                    url: `https://${req.host}${req.url}`,\n                    method: req.method as HttpMethod,\n                    headers,\n                },\n                resourceServer:\n                    issuerMetadata.credentialIssuer.credential_issuer,\n                allowedAuthenticationSchemes: [\n                    SupportedAuthenticationScheme.DPoP,\n                ],\n            });\n\n        const session = await this.sessionService.get(\n            tokenPayload.sub as string,\n        );\n        if (session === undefined) {\n            throw new BadRequestException('Session not found');\n        }\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId,\n            flowType: 'OID4VCI',\n            stage: 'notification',\n        };\n\n        try {\n            const index = session.notifications.findIndex(\n                (notification) => notification.id === body.notification_id,\n            );\n            if (index === -1) {\n                throw new BadRequestException(\n                    'No notifications found in session',\n                );\n            }\n            session.notifications[index] = {\n                id: body.notification_id,\n                event: body.event,\n            };\n            await this.sessionService.add(session.id, tenantId, {\n                notifications: session.notifications,\n            });\n\n            this.sessionLogger.logNotification(logContext, body.event || '', {\n                notificationId: body.notification_id,\n                notificationIndex: index,\n            });\n        } catch (error) {\n            this.sessionLogger.logSessionError(\n                logContext,\n                error as Error,\n                'Failed to handle notification',\n                {\n                    notificationId: body.notification_id,\n                },\n            );\n            throw error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vpController.html":{"url":"controllers/Oid4vpController.html","title":"controller - Oid4vpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/oid4vp\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getRequestWithSession\n                            \n                            \n                                    \n                                    \n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getRequestWithSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRequestWithSession(tenantId: string, requestId: string, session: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('request/:requestId/:session')@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:34\n                        \n                    \n\n\n            \n                \n                        Returns the authorization request for a given requestId and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('response')@SessionLogger('state', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Endpoint to receive the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    Param,\n    Post,\n    UseInterceptors,\n} from '@nestjs/common';\nimport { Oid4vpService } from './oid4vp.service';\nimport { AuthorizationResponse } from './dto/authorization-response.dto';\nimport { SessionLogger } from '../../utils/session-logger.decorator';\nimport { SessionLoggerInterceptor } from '../../utils/session-logger.interceptor';\n\n/**\n * Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n */\n@Controller(':tenantId/oid4vp')\n@UseInterceptors(SessionLoggerInterceptor)\nexport class Oid4vpController {\n    /**\n     * Constructor for the Oid4vpController.\n     * @param oid4vpService - Instance of Oid4vpService for handling OID4VP operations.\n     */\n    constructor(private readonly oid4vpService: Oid4vpService) {}\n\n    /**\n     * Returns the authorization request for a given requestId and session.\n     * @param requestId\n     * @param session\n     * @returns\n     */\n    @Get('request/:requestId/:session')\n    @SessionLogger('session', 'OID4VP')\n    getRequestWithSession(\n        @Param('tenantId') tenantId: string,\n        @Param('requestId') requestId: string,\n        @Param('session') session: string,\n    ) {\n        return this.oid4vpService.createAuthorizationRequest(\n            requestId,\n            tenantId,\n            session,\n        );\n    }\n\n    /**\n     * Endpoint to receive the response from the wallet.\n     * @param body\n     * @returns\n     */\n    @Post('response')\n    @SessionLogger('state', 'OID4VP')\n    getResponse(\n        @Body() body: AuthorizationResponse,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.oid4vpService.getResponse(body, tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/Oid4vpModule.html":{"url":"modules/Oid4vpModule.html","title":"module - Oid4vpModule","body":"\n                   \n\n\n\n\n    Modules\n    Oid4vpModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_imports\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nOid4vpModule -->\n\nPresentationsModule->Oid4vpModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nOid4vpModule -->\n\nRegistrarModule->Oid4vpModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            Oid4vpService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vpController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            PresentationsModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            Oid4vpService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { Oid4vpService } from './oid4vp.service';\nimport { Oid4vpController } from './oid4vp.controller';\nimport { CryptoModule } from '../../crypto/crypto.module';\nimport { RegistrarModule } from '../../registrar/registrar.module';\nimport { PresentationsModule } from '../presentations/presentations.module';\nimport { SessionModule } from '../../session/session.module';\nimport { HttpModule } from '@nestjs/axios';\nimport { SessionLoggerService } from '../../utils/session-logger.service';\nimport { SessionLoggerInterceptor } from '../../utils/session-logger.interceptor';\n\n@Module({\n    imports: [\n        CryptoModule,\n        RegistrarModule,\n        PresentationsModule,\n        SessionModule,\n        HttpModule,\n    ],\n    controllers: [Oid4vpController],\n    providers: [Oid4vpService, SessionLoggerService, SessionLoggerInterceptor],\n    exports: [Oid4vpService],\n})\nexport class Oid4vpModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Oid4vpService.html":{"url":"injectables/Oid4vpService.html","title":"injectable - Oid4vpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Oid4vpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAuthorizationRequest\n                            \n                            \n                                    Async\n                                createRequest\n                            \n                            \n                                    Async\n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, encryptionService: EncryptionService, configService: ConfigService, registrarService: RegistrarService, presentationsService: PresentationsService, sessionService: SessionService, httpService: HttpService, sessionLogger: SessionLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/oid4vp/oid4vp.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAuthorizationRequest(requestId: string, tenantId: string, auth_session: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:41\n                        \n                    \n\n\n            \n                \n                        Creates an authorization request for the OID4VP flow.\nThis method generates a JWT that includes the necessary parameters for the authorization request.\nIt initializes the session logging context and logs the start of the flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                auth_session\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRequest(requestId: string, values: PresentationRequestOptions, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:215\n                        \n                    \n\n\n            \n                \n                        Creates a request for the OID4VP flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            PresentationRequestOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:264\n                        \n                    \n\n\n            \n                \n                        Processes the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { randomUUID } from 'node:crypto';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { AuthorizationResponse } from './dto/authorization-response.dto';\nimport { RegistrarService } from '../../registrar/registrar.service';\nimport { PresentationsService } from '../presentations/presentations.service';\nimport { AuthResponse } from '../presentations/dto/auth-response.dto';\nimport { EncryptionService } from '../../crypto/encryption/encryption.service';\nimport { v4 } from 'uuid';\nimport { SessionService } from '../../session/session.service';\nimport { HttpService } from '@nestjs/axios';\nimport { firstValueFrom } from 'rxjs';\nimport { OfferResponse } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport { SessionLoggerService } from '../../utils/session-logger.service';\nimport { SessionLogContext } from '../../utils/session-logger-context';\nimport { PresentationRequestOptions } from './dto/presentation-request-options.dto';\n\n@Injectable()\nexport class Oid4vpService {\n    constructor(\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private configService: ConfigService,\n        private registrarService: RegistrarService,\n        private presentationsService: PresentationsService,\n        private sessionService: SessionService,\n        private httpService: HttpService,\n        private sessionLogger: SessionLoggerService,\n    ) {}\n\n    /**\n     * Creates an authorization request for the OID4VP flow.\n     * This method generates a JWT that includes the necessary parameters for the authorization request.\n     * It initializes the session logging context and logs the start of the flow.\n     * @param requestId\n     * @param tenantId\n     * @param auth_session\n     * @returns\n     */\n    async createAuthorizationRequest(\n        requestId: string,\n        tenantId: string,\n        auth_session: string,\n    ): Promise {\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: auth_session,\n            tenantId,\n            flowType: 'OID4VP',\n            stage: 'authorization_request',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            requestId,\n            action: 'create_authorization_request',\n        });\n\n        try {\n            const host = this.configService.getOrThrow('PUBLIC_URL');\n            const tenantUrl = `${host}/${tenantId}`;\n\n            const values =\n                await this.presentationsService.getPresentationConfig(\n                    requestId,\n                    tenantId,\n                );\n            let regCert: string | undefined = undefined;\n\n            const dcql_query = JSON.parse(\n                JSON.stringify(values.dcql_query).replace(\n                    //g,\n                    tenantUrl,\n                ),\n            );\n\n            if (this.registrarService.isEnabled()) {\n                const registrationCert = JSON.parse(\n                    JSON.stringify(values.registrationCert).replace(\n                        //g,\n                        tenantUrl,\n                    ),\n                );\n                regCert =\n                    await this.registrarService.addRegistrationCertificate(\n                        registrationCert,\n                        dcql_query,\n                        requestId,\n                        tenantId,\n                    );\n            }\n            const nonce = randomUUID();\n            await this.sessionService.add(auth_session, tenantId, {\n                vp_nonce: nonce,\n            });\n\n            this.sessionLogger.logAuthorizationRequest(logContext, {\n                requestId,\n                nonce,\n                regCert,\n                dcqlQueryCount: Array.isArray(dcql_query)\n                    ? dcql_query.length\n                    : 1,\n            });\n\n            const request = {\n                payload: {\n                    response_type: 'vp_token',\n                    client_id: 'x509_san_dns:' + host.replace('https://', ''),\n                    response_uri: `${host}/${tenantId}/oid4vp/response`,\n                    response_mode: 'direct_post.jwt',\n                    nonce,\n                    dcql_query,\n                    client_metadata: {\n                        jwks: {\n                            keys: [\n                                this.encryptionService.getEncryptionPublicKey(),\n                            ],\n                        },\n                        vp_formats: {\n                            mso_mdoc: {\n                                alg: ['EdDSA', 'ES256', 'ES384'],\n                            },\n                            'dc+sd-jwt': {\n                                'kb-jwt_alg_values': [\n                                    'EdDSA',\n                                    'ES256',\n                                    'ES384',\n                                    'ES256K',\n                                ],\n                                'sd-jwt_alg_values': [\n                                    'EdDSA',\n                                    'ES256',\n                                    'ES384',\n                                    'ES256K',\n                                ],\n                            },\n                        },\n                        authorization_encrypted_response_alg: 'ECDH-ES',\n                        authorization_encrypted_response_enc: 'A128GCM',\n                        client_name:\n                            this.configService.getOrThrow('RP_NAME'),\n                        response_types_supported: ['vp_token'],\n                    },\n                    state: auth_session,\n                    aud: host,\n                    exp: Math.floor(Date.now() / 1000) + 60 * 5,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    verifier_attestations: regCert\n                        ? [\n                              {\n                                  format: 'jwt',\n                                  data: regCert,\n                              },\n                          ]\n                        : undefined,\n                },\n                header: {\n                    typ: 'oauth-authz-req+jwt',\n                },\n            };\n\n            let accessCert: string[] | undefined = undefined;\n            try {\n                accessCert = this.cryptoService.getCertChain(\n                    'access',\n                    tenantId,\n                );\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            } catch (err: any) {\n                accessCert = this.cryptoService.getCertChain(\n                    'signing',\n                    tenantId,\n                );\n            }\n\n            const header = {\n                ...request.header,\n                alg: 'ES256',\n                x5c: accessCert,\n            };\n\n            const signedJwt = await this.cryptoService.signJwt(\n                header,\n                request.payload,\n                tenantId,\n            );\n\n            this.sessionLogger.logSession(\n                logContext,\n                'Authorization request created successfully',\n                {\n                    signedJwtLength: signedJwt.length,\n                    certificateChainLength: accessCert?.length || 0,\n                },\n            );\n\n            return signedJwt;\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                requestId,\n                action: 'create_authorization_request',\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Creates a request for the OID4VP flow.\n     * @param requestId\n     * @param values\n     * @param tenantId\n     * @returns\n     */\n    async createRequest(\n        requestId: string,\n        values: PresentationRequestOptions,\n        tenantId: string,\n    ): Promise {\n        const presentationConfig =\n            await this.presentationsService.getPresentationConfig(\n                requestId,\n                tenantId,\n            );\n\n        if (!values.session) {\n            values.session = v4();\n            await this.sessionService.create({\n                id: values.session,\n                webhook: values.webhook ?? presentationConfig.webhook,\n                tenantId,\n            });\n        } else {\n            await this.sessionService.add(values.session, tenantId, {\n                webhook: values.webhook ?? presentationConfig.webhook,\n            });\n        }\n\n        const host = this.configService\n            .getOrThrow('PUBLIC_URL')\n            .replace('https://', '');\n        const params = {\n            client_id: `x509_san_dns:${host}`,\n            request_uri: `${this.configService.getOrThrow('PUBLIC_URL')}/${tenantId}/oid4vp/request/${requestId}/${values.session}`,\n        };\n        const queryString = Object.entries(params)\n            .map(\n                ([key, value]) =>\n                    `${encodeURIComponent(key)}=${encodeURIComponent(value)}`,\n            )\n            .join('&');\n\n        return {\n            uri: queryString,\n            session: values.session,\n        };\n    }\n\n    /**\n     * Processes the response from the wallet.\n     * @param body\n     * @param tenantId\n     */\n    async getResponse(body: AuthorizationResponse, tenantId: string) {\n        const res = await this.encryptionService.decryptJwe(\n            body.response,\n        );\n        const session = await this.sessionService.get(res.state);\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: res.state,\n            tenantId,\n            flowType: 'OID4VP',\n            stage: 'response_processing',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            action: 'process_presentation_response',\n            hasWebhook: !!session.webhook,\n        });\n\n        try {\n            //TODO: load required fields from the config\n            const credentials = await this.presentationsService.parseResponse(\n                res,\n                [],\n                session.vp_nonce as string,\n            );\n\n            this.sessionLogger.logCredentialVerification(\n                logContext,\n                !!credentials && credentials.length > 0,\n                {\n                    credentialCount: credentials?.length || 0,\n                    nonce: session.vp_nonce,\n                },\n            );\n\n            //tell the auth server the result of the session.\n            await this.sessionService.add(res.state, tenantId, {\n                //TODO: not clear why it has to be any\n                credentials: credentials as any,\n            });\n            // if there a a webook URL, send the response there\n            if (session.webhook) {\n                const headers: Record = {};\n                if (\n                    session.webhook.auth &&\n                    session.webhook.auth.type === 'apiKey'\n                ) {\n                    headers[session.webhook.auth.config.headerName] =\n                        session.webhook.auth.config.value;\n                }\n\n                console.log(headers);\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    'Sending webhook notification',\n                    {\n                        webhookUrl: session.webhook.url,\n                        authType: session.webhook.auth?.type || 'none',\n                    },\n                );\n\n                await firstValueFrom(\n                    this.httpService.post(\n                        session.webhook.url,\n                        {\n                            credentials,\n                            session: res.state,\n                        },\n                        {\n                            headers,\n                        },\n                    ),\n                ).then(\n                    async (webhookResponse) => {\n                        //TODO: better: just store it when it's a presentation during issuance\n                        if (webhookResponse.data) {\n                            session.credentialPayload!.values =\n                                webhookResponse.data;\n                            //store received webhook response\n                            await this.sessionService.add(res.state, tenantId, {\n                                credentialPayload: session.credentialPayload,\n                            });\n                        }\n\n                        this.sessionLogger.logSession(\n                            logContext,\n                            'Webhook notification sent successfully',\n                            {\n                                responseStatus: webhookResponse.status,\n                                hasResponseData: !!webhookResponse.data,\n                            },\n                        );\n                    },\n                    (err) => {\n                        this.sessionLogger.logSessionError(\n                            logContext,\n                            err,\n                            'Error sending webhook',\n                            {\n                                webhookUrl: session.webhook!.url,\n                            },\n                        );\n                        throw new Error(\n                            `Error sending webhook: ${err.message || err}`,\n                        );\n                    },\n                );\n            }\n\n            this.sessionLogger.logFlowComplete(logContext, {\n                credentialCount: credentials?.length || 0,\n                webhookSent: !!session.webhook,\n            });\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                action: 'process_presentation_response',\n            });\n            throw error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParResponseDto.html":{"url":"classes/ParResponseDto.html","title":"class - ParResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/par-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expires_in\n                            \n                            \n                                request_uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The expiration time for the request URI in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:5\n                        \n                    \n\n            \n                \n                    The request URI for the Pushed Authorization Request.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ParResponseDto {\n    /**\n     * The request URI for the Pushed Authorization Request.\n     */\n    request_uri: string;\n    /**\n     * The expiration time for the request URI in seconds.\n     */\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Params.html":{"url":"interfaces/Params.html","title":"interface - Params","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Params\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/params.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            headers\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            query\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type Slot = 'body' | 'headers' | 'path' | 'query';\n\nexport type Field =\n    | {\n          in: Exclude;\n          key: string;\n          map?: string;\n      }\n    | {\n          in: Extract;\n          key?: string;\n          map?: string;\n      };\n\nexport interface Fields {\n    allowExtra?: Partial>;\n    args?: ReadonlyArray;\n}\n\nexport type FieldsConfig = ReadonlyArray;\n\nconst extraPrefixesMap: Record = {\n    $body_: 'body',\n    $headers_: 'headers',\n    $path_: 'path',\n    $query_: 'query',\n};\nconst extraPrefixes = Object.entries(extraPrefixesMap);\n\ntype KeyMap = Map;\n\nconst buildKeyMap = (fields: FieldsConfig, map?: KeyMap): KeyMap => {\n    if (!map) {\n        map = new Map();\n    }\n\n    for (const config of fields) {\n        if ('in' in config) {\n            if (config.key) {\n                map.set(config.key, {\n                    in: config.in,\n                    map: config.map,\n                });\n            }\n        } else if (config.args) {\n            buildKeyMap(config.args, map);\n        }\n    }\n\n    return map;\n};\n\ninterface Params {\n    body: unknown;\n    headers: Record;\n    path: Record;\n    query: Record;\n}\n\nconst stripEmptySlots = (params: Params) => {\n    for (const [slot, value] of Object.entries(params)) {\n        if (value && typeof value === 'object' && !Object.keys(value).length) {\n            delete params[slot as Slot];\n        }\n    }\n};\n\nexport const buildClientParams = (\n    args: ReadonlyArray,\n    fields: FieldsConfig,\n) => {\n    const params: Params = {\n        body: {},\n        headers: {},\n        path: {},\n        query: {},\n    };\n\n    const map = buildKeyMap(fields);\n\n    let config: FieldsConfig[number] | undefined;\n\n    for (const [index, arg] of args.entries()) {\n        if (fields[index]) {\n            config = fields[index];\n        }\n\n        if (!config) {\n            continue;\n        }\n\n        if ('in' in config) {\n            if (config.key) {\n                const field = map.get(config.key)!;\n                const name = field.map || config.key;\n                (params[field.in] as Record)[name] = arg;\n            } else {\n                params.body = arg;\n            }\n        } else {\n            for (const [key, value] of Object.entries(arg ?? {})) {\n                const field = map.get(key);\n\n                if (field) {\n                    const name = field.map || key;\n                    (params[field.in] as Record)[name] = value;\n                } else {\n                    const extra = extraPrefixes.find(([prefix]) =>\n                        key.startsWith(prefix),\n                    );\n\n                    if (extra) {\n                        const [prefix, slot] = extra;\n                        (params[slot] as Record)[\n                            key.slice(prefix.length)\n                        ] = value;\n                    } else {\n                        for (const [slot, allowed] of Object.entries(\n                            config.allowExtra ?? {},\n                        )) {\n                            if (allowed) {\n                                (\n                                    params[slot as Slot] as Record\n                                )[key] = value;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    stripEmptySlots(params);\n\n    return params;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html","title":"interface - ParsedAccessTokenAuthorizationCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenAuthorizationCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                        \n                                            grantType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:         AuthorizationCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AuthorizationCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n} from '@openid4vc/oauth2';\nimport type { Request, Response } from 'express';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { getHeadersFromRequest } from '../oid4vci/util';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { Oid4vpService } from '../../verifier/oid4vp/oid4vp.service';\nimport { SessionService } from '../../session/session.service';\nimport { CredentialsService } from '../credentials/credentials.service';\nimport { WebhookConfig } from '../../utils/webhook.dto';\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private credentialsService: CredentialsService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(tenantId: string): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow('PUBLIC_URL') +\n            `/${tenantId}`;\n        return this.getAuthorizationServer(\n            tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: ['ES256'],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n        tenantId: string,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        'request_uri not found or not provided in the request',\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                'request_uri not found or not provided in the request',\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!, tenantId);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        tenantId: string,\n    ): Promise {\n        const url = `${this.configService.getOrThrow('PUBLIC_URL')}${req.url}`;\n\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const session = await this.sessionService.getBy({\n            authorization_code: body.code,\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        }\n        const authorizationServerMetadata = this.authzMetadata(tenantId);\n        //TODO: handle response\n        const { dpop } = await this.getAuthorizationServer(\n            tenantId,\n        ).verifyAuthorizationCodeAccessTokenRequest({\n            grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n            accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n            expectedCode: session.authorization_code as string,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n            dpop: {\n                required: true,\n                allowedSigningAlgs:\n                    authorizationServerMetadata.dpop_signing_alg_values_supported,\n                jwt: parsedAccessTokenRequest.dpop?.jwt,\n            },\n            authorizationServerMetadata,\n        });\n\n        const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow('PUBLIC_URL')}/${tenantId}`,\n            signer: {\n                method: 'jwk',\n                alg: 'ES256',\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            cNonce,\n            cNonceExpiresIn: 100,\n            clientId: 'wallet', // must be same as the client attestation\n            dpop,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest('pid', { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: 'insufficient_authorization',\n            auth_session,\n            presentation,\n            error_description:\n                'Presentation of credential required before issuance',\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        tenantId: string,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n            //check if session has valid presentation, we assume for now\n            await this.sendAuthorizationCode(res, body.auth_session, tenantId);\n            return;\n        }\n\n        const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        }\n        const ids = session.offer!.credential_configuration_ids;\n        const config = await this.credentialsService.getConfigById(\n            ids[0],\n            tenantId,\n        );\n        if (config.presentation_during_issuance) {\n            const webhook = config.presentation_during_issuance.webhook;\n            const response = await this.parseChallengeRequest(\n                body,\n                tenantId,\n                webhook,\n            );\n            res.status(400).send(response);\n        } else {\n            await this.sendAuthorizationCode(res, body.issuer_state!, tenantId);\n        }\n    }\n\n    private async sendAuthorizationCode(\n        res: Response,\n        issuer_state: string,\n        tenantId: string,\n    ) {\n        const authorization_code = await this.setAuthCode(\n            issuer_state,\n            tenantId,\n        );\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string, tenantId: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, tenantId, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PathSerializer.html":{"url":"interfaces/PathSerializer.html","title":"interface - PathSerializer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PathSerializer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/utils.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { getAuthToken } from '../core/auth';\nimport type {\n    QuerySerializer,\n    QuerySerializerOptions,\n} from '../core/bodySerializer';\nimport { jsonBodySerializer } from '../core/bodySerializer';\nimport {\n    serializeArrayParam,\n    serializeObjectParam,\n    serializePrimitiveParam,\n} from '../core/pathSerializer';\nimport type { Client, ClientOptions, Config, RequestOptions } from './types';\n\ninterface PathSerializer {\n    path: Record;\n    url: string;\n}\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\ntype ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\ntype ArraySeparatorStyle = ArrayStyle | MatrixStyle;\n\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n    let url = _url;\n    const matches = _url.match(PATH_PARAM_RE);\n    if (matches) {\n        for (const match of matches) {\n            let explode = false;\n            let name = match.substring(1, match.length - 1);\n            let style: ArraySeparatorStyle = 'simple';\n\n            if (name.endsWith('*')) {\n                explode = true;\n                name = name.substring(0, name.length - 1);\n            }\n\n            if (name.startsWith('.')) {\n                name = name.substring(1);\n                style = 'label';\n            } else if (name.startsWith(';')) {\n                name = name.substring(1);\n                style = 'matrix';\n            }\n\n            const value = path[name];\n\n            if (value === undefined || value === null) {\n                continue;\n            }\n\n            if (Array.isArray(value)) {\n                url = url.replace(\n                    match,\n                    serializeArrayParam({ explode, name, style, value }),\n                );\n                continue;\n            }\n\n            if (typeof value === 'object') {\n                url = url.replace(\n                    match,\n                    serializeObjectParam({\n                        explode,\n                        name,\n                        style,\n                        value: value as Record,\n                        valueOnly: true,\n                    }),\n                );\n                continue;\n            }\n\n            if (style === 'matrix') {\n                url = url.replace(\n                    match,\n                    `;${serializePrimitiveParam({\n                        name,\n                        value: value as string,\n                    })}`,\n                );\n                continue;\n            }\n\n            const replaceValue = encodeURIComponent(\n                style === 'label' ? `.${value as string}` : (value as string),\n            );\n            url = url.replace(match, replaceValue);\n        }\n    }\n    return url;\n};\n\nexport const createQuerySerializer = ({\n    allowReserved,\n    array,\n    object,\n}: QuerySerializerOptions = {}) => {\n    const querySerializer = (queryParams: T) => {\n        const search: string[] = [];\n        if (queryParams && typeof queryParams === 'object') {\n            for (const name in queryParams) {\n                const value = queryParams[name];\n\n                if (value === undefined || value === null) {\n                    continue;\n                }\n\n                if (Array.isArray(value)) {\n                    const serializedArray = serializeArrayParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'form',\n                        value,\n                        ...array,\n                    });\n                    if (serializedArray) search.push(serializedArray);\n                } else if (typeof value === 'object') {\n                    const serializedObject = serializeObjectParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'deepObject',\n                        value: value as Record,\n                        ...object,\n                    });\n                    if (serializedObject) search.push(serializedObject);\n                } else {\n                    const serializedPrimitive = serializePrimitiveParam({\n                        allowReserved,\n                        name,\n                        value: value as string,\n                    });\n                    if (serializedPrimitive) search.push(serializedPrimitive);\n                }\n            }\n        }\n        return search.join('&');\n    };\n    return querySerializer;\n};\n\n/**\n * Infers parseAs value from provided Content-Type header.\n */\nexport const getParseAs = (\n    contentType: string | null,\n): Exclude => {\n    if (!contentType) {\n        // If no Content-Type header is provided, the best we can do is return the raw response body,\n        // which is effectively the same as the 'stream' option.\n        return 'stream';\n    }\n\n    const cleanContent = contentType.split(';')[0]?.trim();\n\n    if (!cleanContent) {\n        return;\n    }\n\n    if (\n        cleanContent.startsWith('application/json') ||\n        cleanContent.endsWith('+json')\n    ) {\n        return 'json';\n    }\n\n    if (cleanContent === 'multipart/form-data') {\n        return 'formData';\n    }\n\n    if (\n        ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n            cleanContent.startsWith(type),\n        )\n    ) {\n        return 'blob';\n    }\n\n    if (cleanContent.startsWith('text/')) {\n        return 'text';\n    }\n\n    return;\n};\n\nexport const setAuthParams = async ({\n    security,\n    ...options\n}: Pick, 'security'> &\n    Pick & {\n        headers: Headers;\n    }) => {\n    for (const auth of security) {\n        const token = await getAuthToken(auth, options.auth);\n\n        if (!token) {\n            continue;\n        }\n\n        const name = auth.name ?? 'Authorization';\n\n        switch (auth.in) {\n            case 'query':\n                if (!options.query) {\n                    options.query = {};\n                }\n                options.query[name] = token;\n                break;\n            case 'cookie':\n                options.headers.append('Cookie', `${name}=${token}`);\n                break;\n            case 'header':\n            default:\n                options.headers.set(name, token);\n                break;\n        }\n\n        return;\n    }\n};\n\nexport const buildUrl: Client['buildUrl'] = (options) => {\n    const url = getUrl({\n        baseUrl: options.baseUrl as string,\n        path: options.path,\n        query: options.query,\n        querySerializer:\n            typeof options.querySerializer === 'function'\n                ? options.querySerializer\n                : createQuerySerializer(options.querySerializer),\n        url: options.url,\n    });\n    return url;\n};\n\nexport const getUrl = ({\n    baseUrl,\n    path,\n    query,\n    querySerializer,\n    url: _url,\n}: {\n    baseUrl?: string;\n    path?: Record;\n    query?: Record;\n    querySerializer: QuerySerializer;\n    url: string;\n}) => {\n    const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n    let url = (baseUrl ?? '') + pathUrl;\n    if (path) {\n        url = defaultPathSerializer({ path, url });\n    }\n    let search = query ? querySerializer(query) : '';\n    if (search.startsWith('?')) {\n        search = search.substring(1);\n    }\n    if (search) {\n        url += `?${search}`;\n    }\n    return url;\n};\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n    const config = { ...a, ...b };\n    if (config.baseUrl?.endsWith('/')) {\n        config.baseUrl = config.baseUrl.substring(0, config.baseUrl.length - 1);\n    }\n    config.headers = mergeHeaders(a.headers, b.headers);\n    return config;\n};\n\nexport const mergeHeaders = (\n    ...headers: Array['headers'] | undefined>\n): Headers => {\n    const mergedHeaders = new Headers();\n    for (const header of headers) {\n        if (!header || typeof header !== 'object') {\n            continue;\n        }\n\n        const iterator =\n            header instanceof Headers\n                ? header.entries()\n                : Object.entries(header);\n\n        for (const [key, value] of iterator) {\n            if (value === null) {\n                mergedHeaders.delete(key);\n            } else if (Array.isArray(value)) {\n                for (const v of value) {\n                    mergedHeaders.append(key, v as string);\n                }\n            } else if (value !== undefined) {\n                // assume object headers are meant to be JSON stringified, i.e. their\n                // content value in OpenAPI specification is 'application/json'\n                mergedHeaders.set(\n                    key,\n                    typeof value === 'object'\n                        ? JSON.stringify(value)\n                        : (value as string),\n                );\n            }\n        }\n    }\n    return mergedHeaders;\n};\n\ntype ErrInterceptor = (\n    error: Err,\n    response: Res,\n    request: Req,\n    options: Options,\n) => Err | Promise;\n\ntype ReqInterceptor = (\n    request: Req,\n    options: Options,\n) => Req | Promise;\n\ntype ResInterceptor = (\n    response: Res,\n    request: Req,\n    options: Options,\n) => Res | Promise;\n\nclass Interceptors {\n    _fns: (Interceptor | null)[];\n\n    constructor() {\n        this._fns = [];\n    }\n\n    clear() {\n        this._fns = [];\n    }\n\n    getInterceptorIndex(id: number | Interceptor): number {\n        if (typeof id === 'number') {\n            return this._fns[id] ? id : -1;\n        } else {\n            return this._fns.indexOf(id);\n        }\n    }\n    exists(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        return !!this._fns[index];\n    }\n\n    eject(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = null;\n        }\n    }\n\n    update(id: number | Interceptor, fn: Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = fn;\n            return id;\n        } else {\n            return false;\n        }\n    }\n\n    use(fn: Interceptor) {\n        this._fns = [...this._fns, fn];\n        return this._fns.length - 1;\n    }\n}\n\n// `createInterceptors()` response, meant for external use as it does not\n// expose internals\nexport interface Middleware {\n    error: Pick>,\n        'eject' | 'use'\n    >;\n    request: Pick>, 'eject' | 'use'>;\n    response: Pick>,\n        'eject' | 'use'\n    >;\n}\n\n// do not add `Middleware` as return type so we can use _fns internally\nexport const createInterceptors = () => ({\n    error: new Interceptors>(),\n    request: new Interceptors>(),\n    response: new Interceptors>(),\n});\n\nconst defaultQuerySerializer = createQuerySerializer({\n    allowReserved: false,\n    array: {\n        explode: true,\n        style: 'form',\n    },\n    object: {\n        explode: true,\n        style: 'deepObject',\n    },\n});\n\nconst defaultHeaders = {\n    'Content-Type': 'application/json',\n};\n\nexport const createConfig = (\n    override: Config & T> = {},\n): Config & T> => ({\n    ...jsonBodySerializer,\n    headers: defaultHeaders,\n    parseAs: 'auto',\n    querySerializer: defaultQuerySerializer,\n    ...override,\n});\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PresentationConfig.html":{"url":"entities/PresentationConfig.html","title":"entity - PresentationConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PresentationConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a configuration for a Verifiable Presentation (VP) request.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                dcql_query\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                registrationCert\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:50\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        dcql_query\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:32\n                        \n                    \n\n            \n                \n                    The DCQL query to be used for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:17\n                        \n                    \n\n            \n                \n                    Unique identifier for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        registrationCert\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistrationCertificateRequest\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:38\n                        \n                    \n\n            \n                \n                    The registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:24\n                        \n                    \n\n            \n                \n                    The tenant ID for which the VP request is made.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:44\n                        \n                    \n\n            \n                \n                    Optional webhook URL to receive the response.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { IsString, IsObject } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook.dto';\nimport { RegistrationCertificateRequest } from '../dto/vp-request.dto';\nimport { Column, Entity } from 'typeorm';\nimport { ApiHideProperty } from '@nestjs/swagger';\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column('varchar', { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column('varchar', { primary: true })\n    tenantId: string;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column('json')\n    @IsObject()\n    //TODO: define the structure of the DCQL query\n    dcql_query: any;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsObject()\n    @Column('json')\n    registrationCert: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column('json', { nullable: true })\n    @IsObject()\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationDuringIssuance.html":{"url":"classes/PresentationDuringIssuance.html","title":"class - PresentationDuringIssuance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationDuringIssuance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/dto/credential-config.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook.dto';\n\nexport class VCT {\n    @IsString()\n    vct: string;\n    @IsString()\n    name?: string;\n    @IsString()\n    description?: string;\n    @IsString()\n    extends?: string;\n    @IsString()\n    'extends#integrity'?: string;\n    @IsString()\n    schema_uri?: string;\n    @IsString()\n    'schema_uri#integrity'?: string;\n}\n\nexport class PresentationDuringIssuance {\n    @IsString()\n    type: string;\n    @IsObject()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PresentationManagementController.html":{"url":"controllers/PresentationManagementController.html","title":"controller - PresentationManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PresentationManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                presentation-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                configuration\n                            \n                            \n                                    \n                                deleteConfiguration\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                            \n                                    \n                                storePresentationConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        configuration\n                        \n                    \n                \n            \n            \n                \n                        \n                    configuration(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:111\n                        \n                    \n\n\n            \n                \n                        Returns the presentation request configurations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:137\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation request configuration by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: PresentationRequest, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@UseGuards(JwtAuthGuard)@ApiSecurity('oauth2')@ApiBody({type: PresentationRequest, examples: undefined})@Post('request')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:79\n                        \n                    \n\n\n            \n                \n                        Create an presentation request that can be sent to the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            PresentationRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    storePresentationConfig(config: PresentationConfig, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:121\n                        \n                    \n\n\n            \n                \n                        Store a presentation request configuration. If it already exists, it will be updated.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            PresentationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Res,\n    UseGuards,\n} from '@nestjs/common';\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from '@nestjs/swagger';\nimport { PresentationsService } from './presentations.service';\nimport { PresentationConfig } from './entities/presentation-config.entity';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { OfferResponse } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport {\n    PresentationRequest,\n    ResponseType,\n} from '../oid4vp/dto/presentation-request.dto';\nimport { Oid4vpService } from '../oid4vp/oid4vp.service';\nimport * as QRCode from 'qrcode';\nimport { Response } from 'express';\n\n@ApiTags('Presentation management', 'Admin')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2', ['api:read', 'api:write'])\n@Controller('presentation-management')\nexport class PresentationManagementController {\n    constructor(\n        private readonly presentationsService: PresentationsService,\n        private readonly oid4vpService: Oid4vpService,\n    ) {}\n\n    /**\n     * Create an presentation request that can be sent to the user\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: 'JSON response',\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            'application/json': { schema: { type: 'object' } },\n            'image/png': { schema: { type: 'string', format: 'binary' } },\n        },\n    })\n    @ApiProduces('application/json', 'image/png')\n    @UseGuards(JwtAuthGuard)\n    @ApiSecurity('oauth2')\n    @ApiBody({\n        type: PresentationRequest,\n        examples: {\n            qrcode: {\n                summary: 'QR-Code Example',\n                value: {\n                    response_type: ResponseType.QRCode,\n                    requestId: 'pid',\n                },\n            },\n            uri: {\n                summary: 'URI',\n                value: {\n                    response_type: ResponseType.URI,\n                    requestId: 'pid',\n                },\n            },\n        },\n    })\n    @Post('request')\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: PresentationRequest,\n        @Token() user: TokenPayload,\n    ) {\n        const values = await this.oid4vpService.createRequest(\n            body.requestId,\n            {\n                webhook: body.webhook,\n            },\n            user.sub,\n        );\n        values.uri = `openid4vp://?${values.uri}`;\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader('Content-Type', 'image/png');\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n\n    /**\n     * Returns the presentation request configurations.\n     * @returns\n     */\n    @Get()\n    configuration(@Token() user: TokenPayload) {\n        return this.presentationsService.getPresentationConfigs(user.sub);\n    }\n\n    /**\n     * Store a presentation request configuration. If it already exists, it will be updated.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storePresentationConfig(\n        @Body() config: PresentationConfig,\n        @Token() user: TokenPayload,\n    ) {\n        return this.presentationsService.storePresentationConfig(\n            config,\n            user.sub,\n        );\n    }\n\n    /**\n     * Deletes a presentation request configuration by its ID.\n     * @param id\n     * @returns\n     */\n    @Delete(':id')\n    deleteConfiguration(@Param('id') id: string, @Token() user: TokenPayload) {\n        return this.presentationsService.deletePresentationConfig(id, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationRequest.html":{"url":"classes/PresentationRequest.html","title":"class - PresentationRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the presentation request containing the response type and request ID.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                requestId\n                            \n                            \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:33\n                        \n                    \n\n            \n                \n                    Identifier of the presentation configuration\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:26\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:41\n                        \n                    \n\n            \n                \n                    Webhook configuration to receive the response.\nIf not provided, the configured webhook from the configuration will be used.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsObject, IsOptional, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook.dto';\n\n/**\n * Enum for the type of response expected from the presentation request.\n */\nexport enum ResponseType {\n    /**\n     * Response type indicating a QR code will be returned.\n     */\n    QRCode = 'qrcode',\n    /**\n     * Response type indicating a URI will be returned.\n     */\n    URI = 'uri',\n}\n\n/**\n * DTO for the presentation request containing the response type and request ID.\n */\nexport class PresentationRequest {\n    /**\n     * @example qrcode\n     */\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Identifier of the presentation configuration\n     * @example pid\n     */\n    @IsString()\n    requestId: string;\n\n    /**\n     * Webhook configuration to receive the response.\n     * If not provided, the configured webhook from the configuration will be used.\n     */\n    @IsObject()\n    @IsOptional()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PresentationRequestOptions.html":{"url":"interfaces/PresentationRequestOptions.html","title":"interface - PresentationRequestOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PresentationRequestOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PresentationRequestOptions DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            session\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            webhook\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        session\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        session:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional session identifier for tracking the request.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        webhook\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        webhook:         WebhookConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WebhookConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional webhook configuration to receive the response.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { WebhookConfig } from '../../../utils/webhook.dto';\n\n/**\n * PresentationRequestOptions DTO\n */\nexport interface PresentationRequestOptions {\n    /**\n     * Optional session identifier for tracking the request.\n     */\n    session?: string;\n    /**\n     * Optional webhook configuration to receive the response.\n     */\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PresentationsModule.html":{"url":"modules/PresentationsModule.html","title":"module - PresentationsModule","body":"\n                   \n\n\n\n\n    Modules\n    PresentationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_PresentationsModule_exports\n\n\n\n\nResolverModule\n\nResolverModule\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/presentations/presentations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PresentationManagementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ResolverModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { PresentationManagementController } from './presentations.controller';\nimport { PresentationsService } from './presentations.service';\nimport { ResolverModule } from '../resolver/resolver.module';\nimport { HttpModule } from '@nestjs/axios';\nimport { Oid4vpModule } from '../oid4vp/oid4vp.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PresentationConfig } from './entities/presentation-config.entity';\n\n@Module({\n    imports: [\n        ResolverModule,\n        HttpModule,\n        forwardRef(() => Oid4vpModule),\n        TypeOrmModule.forFeature([PresentationConfig]),\n    ],\n    controllers: [PresentationManagementController],\n    providers: [PresentationsService],\n    exports: [PresentationsService],\n})\nexport class PresentationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PresentationsService.html":{"url":"injectables/PresentationsService.html","title":"injectable - PresentationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PresentationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                kbVerifier\n                            \n                            \n                                sdjwtInstance\n                            \n                            \n                                    Private\n                                statusListFetcher\n                            \n                            \n                                verifier\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deletePresentationConfig\n                            \n                            \n                                    Async\n                                getPresentationConfig\n                            \n                            \n                                getPresentationConfigs\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                parseResponse\n                            \n                            \n                                storePresentationConfig\n                            \n                            \n                                    Public\n                                storeRCID\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, resolverService: ResolverService, vpRequestRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/presentations/presentations.service.ts:22\n                            \n                        \n\n                \n                    \n                            Constructor for the PresentationsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of HttpService for making HTTP requests.\n\n\n                                                        \n                                                \n                                                \n                                                        resolverService\n                                                  \n                                                        \n                                                                        ResolverService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ResolverService for resolving DID documents.\n\n\n                                                        \n                                                \n                                                \n                                                        vpRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for managing VP request configurations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deletePresentationConfig\n                        \n                    \n                \n            \n            \n                \ndeletePresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to delete.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to delete the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the deletion is complete.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Retrieves a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the requested PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPresentationConfigs\n                        \n                    \n                \n            \n            \n                \ngetPresentationConfigs(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:54\n                        \n                    \n\n\n            \n                \n                        Retrieves all presentation configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve configurations.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of PresentationConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Initializes the SDJwtVcInstance with the necessary configurations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseResponse\n                        \n                    \n                \n            \n            \n                \nparseResponse(res: AuthResponse, requiredFields: string[], keyBindingNonce: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:177\n                        \n                    \n\n\n            \n                \n                        Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            AuthResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requiredFields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyBindingNonce\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \nstorePresentationConfig(vprequest: PresentationConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Stores a new presentation configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                vprequest\n                                            \n                                                            PresentationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe PresentationConfig entity to store.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        storeRCID\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeRCID(registrationCertId: string, id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Stores the new registration certificate.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registrationCertId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the registration certificate to store.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to update.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the registration certificate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kbVerifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KbVerifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:160\n                        \n                    \n\n            \n                \n                    Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                            \n                                            \n                                                    signature\n                                            \n                                            \n                                                    payload\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sdjwtInstance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SDJwtVcInstance\n\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:22\n                        \n                    \n\n            \n                \n                    Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        statusListFetcher\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:145\n                        \n                    \n\n            \n                \n                    Fetch the status list from the uri.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    uri\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Verifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:122\n                        \n                    \n\n            \n                \n                    Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                                    \n                                                            \nThe data part of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                            \n                                                    signature\n                                                    \n                                                            \nThe signature of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { ConflictException, Injectable, OnModuleInit } from '@nestjs/common';\nimport { digest, ES256 } from '@sd-jwt/crypto-nodejs';\nimport { SDJwtVcInstance } from '@sd-jwt/sd-jwt-vc';\nimport { KbVerifier, Verifier } from '@sd-jwt/types';\nimport { importJWK, JWK, JWTPayload, jwtVerify } from 'jose';\nimport { firstValueFrom } from 'rxjs';\nimport { ResolverService } from '../resolver/resolver.service';\nimport { PresentationConfig } from './entities/presentation-config.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm/repository/Repository';\nimport { AuthResponse } from './dto/auth-response.dto';\n\n/**\n * Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n */\n@Injectable()\nexport class PresentationsService implements OnModuleInit {\n    /**\n     * Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n     */\n    sdjwtInstance: SDJwtVcInstance;\n\n    /**\n     * Constructor for the PresentationsService.\n     * @param httpService - Instance of HttpService for making HTTP requests.\n     * @param resolverService - Instance of ResolverService for resolving DID documents.\n     * @param vpRequestRepository - Repository for managing VP request configurations.\n     */\n    constructor(\n        private httpService: HttpService,\n        private resolverService: ResolverService,\n        @InjectRepository(PresentationConfig)\n        private vpRequestRepository: Repository,\n    ) {}\n\n    /**\n     * Initializes the SDJwtVcInstance with the necessary configurations.\n     */\n    onModuleInit() {\n        this.sdjwtInstance = new SDJwtVcInstance({\n            hasher: digest,\n            verifier: this.verifier.bind(this),\n            kbVerifier: this.kbVerifier.bind(this),\n            statusListFetcher: this.statusListFetcher.bind(this),\n        });\n    }\n\n    /**\n     * Retrieves all presentation configurations for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve configurations.\n     * @returns A promise that resolves to an array of PresentationConfig entities.\n     */\n    getPresentationConfigs(tenantId: string): Promise {\n        return this.vpRequestRepository.find({\n            where: { tenantId },\n            order: { createdAt: 'DESC' },\n        });\n    }\n\n    /**\n     * Stores a new presentation configuration.\n     * @param vprequest - The PresentationConfig entity to store.\n     * @param tenantId - The ID of the tenant for which to store the configuration.\n     * @returns A promise that resolves to the stored PresentationConfig entity.\n     */\n    storePresentationConfig(vprequest: PresentationConfig, tenantId: string) {\n        vprequest.tenantId = tenantId;\n        return this.vpRequestRepository.save(vprequest);\n    }\n\n    /**\n     * Deletes a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to delete.\n     * @param tenantId - The ID of the tenant for which to delete the configuration.\n     * @returns A promise that resolves when the deletion is complete.\n     */\n    deletePresentationConfig(id: string, tenantId: string) {\n        return this.vpRequestRepository.delete({ id, tenantId });\n    }\n\n    /**\n     * Retrieves a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to retrieve.\n     * @param tenantId - The ID of the tenant for which to retrieve the configuration.\n     * @returns A promise that resolves to the requested PresentationConfig entity.\n     */\n    async getPresentationConfig(\n        id: string,\n        tenantId: string,\n    ): Promise {\n        return this.vpRequestRepository\n            .findOneByOrFail({\n                id,\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException('Request ID invalid not found');\n            });\n    }\n\n    /**\n     * Stores the new registration certificate.\n     * @param registrationCertId - The ID of the registration certificate to store.\n     * @param id - The ID of the presentation configuration to update.\n     * @param tenantId - The ID of the tenant for which to store the registration certificate.\n     * @returns\n     */\n    public storeRCID(registrationCertId: string, id: string, tenantId: string) {\n        return this.vpRequestRepository.update(\n            { id, tenantId },\n            { registrationCert: { id: registrationCertId } },\n        );\n    }\n\n    /**\n     * Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n     * @param data - The data part of the SD-JWT-VC.\n     * @param signature - The signature of the SD-JWT-VC.\n     * @returns\n     */\n    verifier: Verifier = async (data, signature) => {\n        const instance = new SDJwtVcInstance({\n            hasher: digest,\n        });\n        const decodedVC = await instance.decode(`${data}.${signature}`);\n        const payload = decodedVC.jwt?.payload as JWTPayload;\n        const header = decodedVC.jwt?.header as JWK;\n        const publicKey = await this.resolverService.resolvePublicKey(\n            payload,\n            header,\n        );\n        const verify = await ES256.getVerifier(publicKey);\n        return verify(data, signature).catch((err) => {\n            console.log(err);\n            return false;\n        });\n    };\n\n    /**\n     * Fetch the status list from the uri.\n     * @param uri\n     * @returns\n     */\n    private statusListFetcher: (uri: string) => Promise = async (\n        uri: string,\n    ) => {\n        return firstValueFrom(this.httpService.get(uri)).then(\n            (res) => res.data,\n        );\n    };\n\n    /**\n     * Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n     * @param data\n     * @param signature\n     * @param payload\n     * @returns\n     */\n    private kbVerifier: KbVerifier = async (data, signature, payload) => {\n        if (!payload.cnf) {\n            throw new Error('No cnf found in the payload');\n        }\n        const key = await importJWK(payload.cnf.jwk as JWK, 'ES256');\n        return jwtVerify(`${data}.${signature}`, key).then(\n            () => true,\n            () => false,\n        );\n    };\n\n    /**\n     * Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n     * @param res\n     * @param requiredFields\n     * @returns\n     */\n    parseResponse(\n        res: AuthResponse,\n        requiredFields: string[],\n        keyBindingNonce: string,\n    ) {\n        const attestations = Object.keys(res.vp_token);\n        const att = attestations.map((att) =>\n            this.sdjwtInstance\n                .verify(res.vp_token[att], {\n                    requiredClaimKeys: requiredFields,\n                    keyBindingNonce,\n                })\n                .then(\n                    (result) => {\n                        return {\n                            id: att,\n                            values: {\n                                ...result.payload,\n                                cnf: undefined, // remove cnf for simplicity\n                                status: undefined, // remove status for simplicity\n                            },\n                        };\n                    },\n                    (err) => ({\n                        // when the verification fails, it will return an error object                (err) => ({\n                        id: att,\n                        error: err.message,\n                    }),\n                ),\n        );\n        return Promise.all(att);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PresentedData.html":{"url":"interfaces/PresentedData.html","title":"interface - PresentedData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PresentedData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            test/webhook/src/index.ts\n        \n\n\n            \n                Description\n            \n            \n                Assuming we receive a PID credentials with the address selectivly disclosed\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            credentials\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        credentials\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        credentials:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface PresentedData {\n\tcredentials: {\n\t\tid: string;\n\t\tvalues: {\n\t\t\taddress: {\n\t\t\t\tlocality: string;\n\t\t\t};\n\t\t};\n\t}[];\n}\n\n/**\n * Response for the citizen credential.\n */\ninterface ProcessResponse {\n\tcitizen: {\n\t\ttown: string;\n\t};\n}\n\nasync function handleRequest(request: Request): Promise {\n\tconst url = new URL(request.url);\n\n\tif (request.method === 'POST' && url.pathname === '/process') {\n\t\tconst presented: PresentedData = await request.json();\n\t\tconst res: ProcessResponse = {\n\t\t\tcitizen: {\n\t\t\t\ttown: `You live in ${presented.credentials[0].values.address.locality}`,\n\t\t\t},\n\t\t};\n\t\treturn Response.json(res, { status: 200 });\n\t}\n\n\tif (request.method === 'POST' && url.pathname === '/consume') {\n\t\tconst expextedApiKey = 'foo-bar'; // This should be securely stored and retrieved\n\t\tconsole.log(request.headers);\n\t\tconst apiKey = request.headers.get('x-api-key');\n\t\tif (apiKey !== expextedApiKey) {\n\t\t\treturn new Response('Unauthorized', { status: 401 });\n\t\t}\n\n\t\tconst presented = await request.json();\n\t\tconsole.log('Received consume webhook:');\n\t\tconsole.log(JSON.stringify(presented, null, 2));\n\t\treturn new Response(null, { status: 200 });\n\t}\n\n\treturn new Response('Not found', { status: 404 });\n}\n\nexport default {\n\tfetch: handleRequest,\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProcessResponse.html":{"url":"interfaces/ProcessResponse.html","title":"interface - ProcessResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProcessResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            test/webhook/src/index.ts\n        \n\n\n            \n                Description\n            \n            \n                Response for the citizen credential.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            citizen\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        citizen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        citizen:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface PresentedData {\n\tcredentials: {\n\t\tid: string;\n\t\tvalues: {\n\t\t\taddress: {\n\t\t\t\tlocality: string;\n\t\t\t};\n\t\t};\n\t}[];\n}\n\n/**\n * Response for the citizen credential.\n */\ninterface ProcessResponse {\n\tcitizen: {\n\t\ttown: string;\n\t};\n}\n\nasync function handleRequest(request: Request): Promise {\n\tconst url = new URL(request.url);\n\n\tif (request.method === 'POST' && url.pathname === '/process') {\n\t\tconst presented: PresentedData = await request.json();\n\t\tconst res: ProcessResponse = {\n\t\t\tcitizen: {\n\t\t\t\ttown: `You live in ${presented.credentials[0].values.address.locality}`,\n\t\t\t},\n\t\t};\n\t\treturn Response.json(res, { status: 200 });\n\t}\n\n\tif (request.method === 'POST' && url.pathname === '/consume') {\n\t\tconst expextedApiKey = 'foo-bar'; // This should be securely stored and retrieved\n\t\tconsole.log(request.headers);\n\t\tconst apiKey = request.headers.get('x-api-key');\n\t\tif (apiKey !== expextedApiKey) {\n\t\t\treturn new Response('Unauthorized', { status: 401 });\n\t\t}\n\n\t\tconst presented = await request.json();\n\t\tconsole.log('Received consume webhook:');\n\t\tconsole.log(JSON.stringify(presented, null, 2));\n\t\treturn new Response(null, { status: 200 });\n\t}\n\n\treturn new Response('Not found', { status: 404 });\n}\n\nexport default {\n\tfetch: handleRequest,\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuerySerializerOptions.html":{"url":"interfaces/QuerySerializerOptions.html","title":"interface - QuerySerializerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QuerySerializerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/bodySerializer.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowReserved\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            array\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            object\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowReserved\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowReserved:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        array\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        array:         SerializerOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SerializerOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        object\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        object:         SerializerOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SerializerOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type {\n    ArrayStyle,\n    ObjectStyle,\n    SerializerOptions,\n} from './pathSerializer';\n\nexport type QuerySerializer = (query: Record) => string;\n\nexport type BodySerializer = (body: any) => any;\n\nexport interface QuerySerializerOptions {\n    allowReserved?: boolean;\n    array?: SerializerOptions;\n    object?: SerializerOptions;\n}\n\nconst serializeFormDataPair = (\n    data: FormData,\n    key: string,\n    value: unknown,\n): void => {\n    if (typeof value === 'string' || value instanceof Blob) {\n        data.append(key, value);\n    } else {\n        data.append(key, JSON.stringify(value));\n    }\n};\n\nconst serializeUrlSearchParamsPair = (\n    data: URLSearchParams,\n    key: string,\n    value: unknown,\n): void => {\n    if (typeof value === 'string') {\n        data.append(key, value);\n    } else {\n        data.append(key, JSON.stringify(value));\n    }\n};\n\nexport const formDataBodySerializer = {\n    bodySerializer:  | Array>,\n    >(\n        body: T,\n    ): FormData => {\n        const data = new FormData();\n\n        Object.entries(body).forEach(([key, value]) => {\n            if (value === undefined || value === null) {\n                return;\n            }\n            if (Array.isArray(value)) {\n                value.forEach((v) => serializeFormDataPair(data, key, v));\n            } else {\n                serializeFormDataPair(data, key, value);\n            }\n        });\n\n        return data;\n    },\n};\n\nexport const jsonBodySerializer = {\n    bodySerializer: (body: T): string =>\n        JSON.stringify(body, (_key, value) =>\n            typeof value === 'bigint' ? value.toString() : value,\n        ),\n};\n\nexport const urlSearchParamsBodySerializer = {\n    bodySerializer:  | Array>,\n    >(\n        body: T,\n    ): string => {\n        const data = new URLSearchParams();\n\n        Object.entries(body).forEach(([key, value]) => {\n            if (value === undefined || value === null) {\n                return;\n            }\n            if (Array.isArray(value)) {\n                value.forEach((v) =>\n                    serializeUrlSearchParamsPair(data, key, v),\n                );\n            } else {\n                serializeUrlSearchParamsPair(data, key, value);\n            }\n        });\n\n        return data.toString();\n    },\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrarConfig.html":{"url":"classes/RegistrarConfig.html","title":"class - RegistrarConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrarConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar-config.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrarConfig class represents the configuration for the registrar service.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                accessCertificateId\n                            \n                            \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        accessCertificateId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar-config.ts:12\n                        \n                    \n\n            \n                \n                    ID of the access certificate.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar-config.ts:8\n                        \n                    \n\n            \n                \n                    ID of the relying party.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class RegistrarConfig {\n    /**\n     * ID of the relying party.\n     */\n    id?: string;\n    /**\n     * ID of the access certificate.\n     */\n    accessCertificateId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RegistrarModule.html":{"url":"modules/RegistrarModule.html","title":"module - RegistrarModule","body":"\n                   \n\n\n\n\n    Modules\n    RegistrarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/registrar/registrar.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            RegistrarModule is responsible for managing the registrar service.\nIt provides the RegistrarService and imports necessary modules.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            PresentationsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RegistrarService } from './registrar.service';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport * as Joi from 'joi';\nimport { PresentationsModule } from '../verifier/presentations/presentations.module';\n\n/**\n * Validation schema for the registrar module.\n * Defines the required environment variables and their types.\n */\nexport const REGISTRAR_VALIDATION_SCHEMA = {\n    REGISTRAR_URL: Joi.string(),\n    OIDC_ISSUER_URL: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    OIDC_CLIENT_ID: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    OIDC_CLIENT_SECRET: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n};\n\n/**\n * RegistrarModule is responsible for managing the registrar service.\n * It provides the RegistrarService and imports necessary modules.\n */\n@Module({\n    imports: [CryptoModule, PresentationsModule],\n    providers: [RegistrarService],\n    exports: [RegistrarService],\n})\nexport class RegistrarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RegistrarService.html":{"url":"injectables/RegistrarService.html","title":"injectable - RegistrarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RegistrarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar.service.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrarService is responsible for managing the interaction with the registrar,\nincluding adding relying parties, access certificates, and registration certificates.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                accessToken\n                            \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                oauth2Client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                addAccessCertificate\n                            \n                            \n                                    Async\n                                addRegistrationCertificate\n                            \n                            \n                                addRp\n                            \n                            \n                                    Async\n                                getAccessCertificateId\n                            \n                            \n                                isEnabled\n                            \n                            \n                                    Private\n                                loadConfig\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Async\n                                refreshAccessToken\n                            \n                            \n                                    Private\n                                saveConfig\n                            \n                            \n                                    Private\n                                storeExistingRp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, presentationsService: PresentationsService)\n                    \n                \n                        \n                            \n                                Defined in src/registrar/registrar.service.ts:61\n                            \n                        \n\n                \n                    \n                            Constructor for the RegistrarService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ConfigService for accessing configuration values.\n\n\n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of CryptoService for cryptographic operations.\n\n\n                                                        \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of PresentationsService for handling presentations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        addAccessCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addAccessCertificate(config: RegistrarConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:231\n                        \n                    \n\n\n            \n                \n                        Add a new access certificate to the registrar.\nThis is only needed once, when the access certificate is created.\nIf the access certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            RegistrarConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addRegistrationCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addRegistrationCertificate(req: RegistrationCertificateRequest, dcql_query: any, requestId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:272\n                        \n                    \n\n\n            \n                \n                        Add a new registration certificate to the registrar.\nThis is only needed once, when the registration certificate is created.\nIf the registration certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RegistrationCertificateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dcql_query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addRp\n                        \n                    \n                \n            \n            \n                \naddRp(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:161\n                        \n                    \n\n\n            \n                \n                        Adds a new relying party to the registrar.\nThis is only needed once, when the relying party is created.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAccessCertificateId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAccessCertificateId(config: RegistrarConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:204\n                        \n                    \n\n\n            \n                \n                        Get the access certificate ID from the registrar.\nIf there is no access certificate ID in the config, it will add a new one.\nIf there is one, it will check if it is still valid.\nIf it is revoked, it will add a new one.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            RegistrarConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnabled\n                        \n                    \n                \n            \n            \n                \nisEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Checks if the registrar service is enabled based on the configuration.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the registrar service is enabled, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadConfig(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:329\n                        \n                    \n\n\n            \n                \n                        Load the registrar configuration from the config file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         RegistrarConfig\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:117\n                        \n                    \n\n\n            \n                \n                        This function is called when the application starts.\nIt will refresh the access token for the registrar.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Initializes the OAuth2 client and registrar client with the necessary configurations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_KEYS, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:129\n                        \n                    \n\n\n            \n                \n                        This function is called when a tenant is initialized.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshAccessToken()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:144\n                        \n                    \n\n\n            \n                \n                        Refreshes the access token for the registrar using client credentials.\nThis method is called periodically to ensure the access token is valid.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        saveConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveConfig(config: RegistrarConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:352\n                        \n                    \n\n\n            \n                \n                        Save the registrar configuration to the config file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            RegistrarConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        storeExistingRp\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeExistingRp(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:186\n                        \n                    \n\n\n            \n                \n                        Stores the existing relying party ID based on the name.\nThis is used when the relying party already exists in the registrar.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the relying party.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The ID of the existing relying party.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:61\n                        \n                    \n\n            \n                \n                    Access token for authenticating requests to the registrar.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:57\n                        \n                    \n\n            \n                \n                    Client for interacting with the registrar API.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauth2Client\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:53\n                        \n                    \n\n            \n                \n                    OAuth2 client for interacting with the OIDC provider.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { OAuth2Client } from '@badgateway/oauth2-client';\nimport { client } from './generated/client.gen';\nimport {\n    accessCertificateControllerFindOne,\n    accessCertificateControllerRegister,\n    registrationCertificateControllerAll,\n    registrationCertificateControllerRegister,\n    relyingPartyControllerFindAll,\n    relyingPartyControllerRegister,\n} from './generated';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { RegistrationCertificateRequest } from '../verifier/presentations/dto/vp-request.dto';\nimport { PresentationsService } from '../verifier/presentations/presentations.service';\nimport { existsSync, readFileSync, writeFileSync } from 'node:fs';\nimport { RegistrarConfig } from './registrar-config';\nimport { join } from 'node:path';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { TENANT_EVENTS } from '../auth/tenant-events';\n\n/**\n * Repsonse of access certificate request.\n */\ninterface AccessCertificateResponse {\n    /**\n     * Unique identifier of the access certificate.\n     */\n    id: string;\n    /**\n     * The public key in PEM format.\n     */\n    crt: string;\n    /**\n     * Indicates if the access certificate is revoked.\n     */\n    revoked?: boolean;\n}\n\n/**\n * RegistrarService is responsible for managing the interaction with the registrar,\n * including adding relying parties, access certificates, and registration certificates.\n */\n@Injectable()\nexport class RegistrarService implements OnApplicationBootstrap, OnModuleInit {\n    /**\n     * OAuth2 client for interacting with the OIDC provider.\n     */\n    private oauth2Client: OAuth2Client;\n    /**\n     * Client for interacting with the registrar API.\n     */\n    private client: typeof client;\n    /**\n     * Access token for authenticating requests to the registrar.\n     */\n    private accessToken: string;\n\n    /**\n     * Constructor for the RegistrarService.\n     * @param configService - Instance of ConfigService for accessing configuration values.\n     * @param cryptoService - Instance of CryptoService for cryptographic operations.\n     * @param presentationsService - Instance of PresentationsService for handling presentations.\n     */\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private presentationsService: PresentationsService,\n    ) {}\n\n    /**\n     * Initializes the OAuth2 client and registrar client with the necessary configurations.\n     */\n    onModuleInit() {\n        //when not set, we will not use the registrar\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const oidcIssuerUrl =\n            this.configService.getOrThrow('OIDC_ISSUER_URL');\n        const clientId =\n            this.configService.getOrThrow('OIDC_CLIENT_ID');\n        const clientSecret =\n            this.configService.getOrThrow('OIDC_CLIENT_SECRET');\n\n        this.oauth2Client = new OAuth2Client({\n            server: `${oidcIssuerUrl}/protocol/openid-connect/token`,\n            clientId,\n            clientSecret,\n            discoveryEndpoint: `${oidcIssuerUrl}/.well-known/openid-configuration`,\n        });\n\n        this.client = client;\n        this.client.setConfig({\n            baseUrl: this.configService.getOrThrow('REGISTRAR_URL'),\n            auth: () => this.accessToken,\n        });\n    }\n\n    /**\n     * Checks if the registrar service is enabled based on the configuration.\n     * @returns True if the registrar service is enabled, false otherwise.\n     */\n    isEnabled() {\n        return !!this.configService.get('REGISTRAR_URL');\n    }\n\n    /**\n     * This function is called when the application starts.\n     * It will refresh the access token for the registrar.\n     */\n    async onApplicationBootstrap() {\n        if (!this.configService.get('REGISTRAR_URL')) {\n            return;\n        }\n        await this.refreshAccessToken();\n    }\n\n    /**\n     * This function is called when a tenant is initialized.\n     * @param tenantId\n     */\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    async onTenantInit(tenantId: string) {\n        if (!this.isEnabled()) {\n            return;\n        }\n        const config = this.loadConfig(tenantId);\n        if (!config.id) {\n            config.id = await this.addRp(tenantId);\n        }\n        await this.getAccessCertificateId(config, tenantId);\n    }\n\n    /**\n     * Refreshes the access token for the registrar using client credentials.\n     * This method is called periodically to ensure the access token is valid.\n     */\n    async refreshAccessToken() {\n        await this.oauth2Client.clientCredentials().then((token) => {\n            this.accessToken = token.accessToken;\n            const date = new Date();\n            const expirationDate = new Date(token.expiresAt as number);\n            setTimeout(\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                () => this.refreshAccessToken(),\n                expirationDate.getTime() - date.getTime() - 1000,\n            );\n        });\n    }\n\n    /**\n     * Adds a new relying party to the registrar.\n     * This is only needed once, when the relying party is created.\n     */\n    addRp(tenantId: string): Promise {\n        const name = this.configService.getOrThrow('RP_NAME');\n        return relyingPartyControllerRegister({\n            client: this.client,\n            body: {\n                name,\n            },\n        }).then(async (response) => {\n            const config = this.loadConfig(tenantId);\n            if (response.error) {\n                config.id = await this.storeExistingRp(name);\n            } else {\n                config.id = response.data!['id'];\n            }\n            this.saveConfig(config, tenantId);\n            return response.data!['id'];\n        });\n    }\n\n    /**\n     * Stores the existing relying party ID based on the name.\n     * This is used when the relying party already exists in the registrar.\n     * @param name - The name of the relying party.\n     * @returns The ID of the existing relying party.\n     */\n    private storeExistingRp(name: string) {\n        return relyingPartyControllerFindAll({\n            client: this.client,\n            query: {\n                name,\n            },\n        }).then((response) => {\n            return response.data!.find((item) => item.name === name)?.id;\n        });\n    }\n\n    /**\n     * Get the access certificate ID from the registrar.\n     * If there is no access certificate ID in the config, it will add a new one.\n     * If there is one, it will check if it is still valid.\n     * If it is revoked, it will add a new one.\n     * @param config\n     */\n    async getAccessCertificateId(config: RegistrarConfig, tenantId: string) {\n        // if there is no access certificate ID in the config, we need to add it\n        if (!config.accessCertificateId) {\n            await this.addAccessCertificate(config, tenantId);\n        }\n        // if there is one, check if it is still valid\n        await accessCertificateControllerFindOne({\n            client: this.client,\n            path: { rp: config.id, id: config.accessCertificateId! },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error finding access certificate:', res.error);\n            }\n            const data = res.data as AccessCertificateResponse;\n            if (data.revoked) {\n                console.warn('Access certificate is revoked, adding a new one');\n                return this.addAccessCertificate(config, tenantId);\n            }\n        });\n    }\n\n    /**\n     * Add a new access certificate to the registrar.\n     * This is only needed once, when the access certificate is created.\n     * If the access certificate already exists, it will be returned.\n     * @returns\n     */\n    private async addAccessCertificate(\n        config: RegistrarConfig,\n        tenantId: string,\n    ): Promise {\n        const host = this.configService\n            .getOrThrow('PUBLIC_URL')\n            .replace('https://', '');\n        return accessCertificateControllerRegister({\n            client: this.client,\n            body: {\n                publicKey: await this.cryptoService.keyService.getPublicKey(\n                    'pem',\n                    tenantId,\n                ),\n                dns: [host],\n            },\n            path: {\n                rp: config.id,\n            },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error adding access certificate:', res.error);\n                throw new Error('Error adding access certificate');\n            }\n            //store the cert\n            this.cryptoService.storeAccessCertificate(\n                res.data!['crt'],\n                tenantId,\n            );\n            config.accessCertificateId = res.data!['id'];\n            this.saveConfig(config, tenantId);\n            return res.data!['id'];\n        });\n    }\n\n    /**\n     * Add a new registration certificate to the registrar.\n     * This is only needed once, when the registration certificate is created.\n     * If the registration certificate already exists, it will be returned.\n     * @returns\n     */\n    async addRegistrationCertificate(\n        req: RegistrationCertificateRequest,\n        //TODO: check if the dcql_query is covered by the registration certificate. If not, we need to throw an error since we do not know the new purpose for it.\n        dcql_query: any,\n        requestId: string,\n        tenantId: string,\n    ) {\n        const rp = this.loadConfig(tenantId).id;\n\n        //TODO: need to check if the access certificate is bound to the access certificate with the subject. Also that the requested fields are matching.\n\n        const certs =\n            (await registrationCertificateControllerAll({\n                client: this.client,\n                path: {\n                    rp,\n                },\n            }).then((res) =>\n                res.data?.filter(\n                    (cert) =>\n                        cert.revoked == null && cert.id === (req.id as string),\n                ),\n            )) || [];\n\n        if (certs?.length > 0) {\n            return certs[0].jwt;\n        }\n\n        return registrationCertificateControllerRegister({\n            client: this.client,\n            path: {\n                rp,\n            },\n            body: req.body,\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\n                    'Error adding registration certificate:',\n                    res.error,\n                );\n                throw new Error('Error adding registration certificate');\n            }\n\n            //TODO: write the ID to the config so its easier to use it. Easier than writing the comparison algorithm (any maybe someone wants to use a different one)\n            await this.presentationsService.storeRCID(\n                res.data!['id'],\n                requestId,\n                tenantId,\n            );\n            return res.data!['jwt'];\n        });\n    }\n\n    /**\n     * Load the registrar configuration from the config file.\n     * @returns\n     */\n    private loadConfig(tenantId: string): RegistrarConfig {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n\n        if (!existsSync(filePath)) {\n            // If the config file does not exist, create an empty config\n            const initialConfig: RegistrarConfig = {};\n            writeFileSync(filePath, JSON.stringify(initialConfig, null, 2));\n            return initialConfig;\n        }\n        const config = JSON.parse(\n            readFileSync(filePath, 'utf-8'),\n        ) as RegistrarConfig;\n        return config;\n    }\n\n    /**\n     * Save the registrar configuration to the config file.\n     * @param config\n     */\n    private saveConfig(config: RegistrarConfig, tenantId: string) {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n        writeFileSync(filePath, JSON.stringify(config, null, 2));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrationCertificateRequest.html":{"url":"classes/RegistrationCertificateRequest.html","title":"class - RegistrationCertificateRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrationCertificateRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/vp-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrationCertificateRequest DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                body\n                            \n                            \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistrationCertificateCreation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:17\n                        \n                    \n\n            \n                \n                    The body of the registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:12\n                        \n                    \n\n            \n                \n                    Identifier of the registration certificate that got issued.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { RegistrationCertificateCreation } from '../../../registrar/generated';\n\n/**\n * RegistrationCertificateRequest DTO\n */\nexport class RegistrationCertificateRequest {\n    /**\n     * Identifier of the registration certificate that got issued.\n     */\n    @IsString()\n    id?: string;\n    /**\n     * The body of the registration certificate request containing the necessary details.\n     */\n    @IsObject()\n    body: RegistrationCertificateCreation;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestOptions.html":{"url":"interfaces/RequestOptions.html","title":"interface - RequestOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Config\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            body\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            query\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            security\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Any body that you want to add to your request.\nhttps://developer.mozilla.org/docs/Web/API/fetch#body\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        security\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        security:         ReadonlyArray\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ReadonlyArray\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Security mechanism(s) to use for the request.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:     Url\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Url\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type { Auth } from '../core/auth';\nimport type { Client as CoreClient, Config as CoreConfig } from '../core/types';\nimport type { Middleware } from './utils';\n\nexport type ResponseStyle = 'data' | 'fields';\n\nexport interface Config\n    extends Omit,\n        CoreConfig {\n    /**\n     * Base URL for all requests made by this client.\n     */\n    baseUrl?: T['baseUrl'];\n    /**\n     * Fetch API implementation. You can use this option to provide a custom\n     * fetch instance.\n     *\n     * @default globalThis.fetch\n     */\n    fetch?: (request: Request) => ReturnType;\n    /**\n     * Please don't use the Fetch client for Next.js applications. The `next`\n     * options won't have any effect.\n     *\n     * Install {@link https://www.npmjs.com/package/@hey-api/client-next `@hey-api/client-next`} instead.\n     */\n    next?: never;\n    /**\n     * Return the response data parsed in a specified format. By default, `auto`\n     * will infer the appropriate method from the `Content-Type` response header.\n     * You can override this behavior with any of the {@link Body} methods.\n     * Select `stream` if you don't want to parse response data at all.\n     *\n     * @default 'auto'\n     */\n    parseAs?:\n        | 'arrayBuffer'\n        | 'auto'\n        | 'blob'\n        | 'formData'\n        | 'json'\n        | 'stream'\n        | 'text';\n    /**\n     * Should we return only data or multiple fields (data, error, response, etc.)?\n     *\n     * @default 'fields'\n     */\n    responseStyle?: ResponseStyle;\n    /**\n     * Throw an error instead of returning it in the response?\n     *\n     * @default false\n     */\n    throwOnError?: T['throwOnError'];\n}\n\nexport interface RequestOptions extends Config {\n    /**\n     * Any body that you want to add to your request.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#body}\n     */\n    body?: unknown;\n    path?: Record;\n    query?: Record;\n    /**\n     * Security mechanism(s) to use for the request.\n     */\n    security?: ReadonlyArray;\n    url: Url;\n}\n\nexport type RequestResult = ThrowOnError extends true\n    ? Promise\n                  ? TData[keyof TData]\n                  : TData\n              : {\n                    data: TData extends Record\n                        ? TData[keyof TData]\n                        : TData;\n                    request: Request;\n                    response: Response;\n                }\n      >\n    : Promise\n                          ? TData[keyof TData]\n                          : TData)\n                    | undefined\n              : (\n                    | {\n                          data: TData extends Record\n                              ? TData[keyof TData]\n                              : TData;\n                          error: undefined;\n                      }\n                    | {\n                          data: undefined;\n                          error: TError extends Record\n                              ? TError[keyof TError]\n                              : TError;\n                      }\n                ) & {\n                    request: Request;\n                    response: Response;\n                }\n      >;\n\nexport interface ClientOptions {\n    baseUrl?: string;\n    responseStyle?: ResponseStyle;\n    throwOnError?: boolean;\n}\n\ntype MethodFn = (\n    options: Omit, 'method'>,\n) => RequestResult;\n\ntype RequestFn = (\n    options: Omit, 'method'> &\n        Pick>, 'method'>,\n) => RequestResult;\n\ntype BuildUrlFn = ;\n        query?: Record;\n        url: string;\n    },\n>(\n    options: Pick & Options,\n) => string;\n\nexport type Client = CoreClient & {\n    interceptors: Middleware;\n};\n\n/**\n * The `createClientConfig()` function will be called on client initialization\n * and the returned object will become the client's initial configuration.\n *\n * You may want to initialize your client this way instead of calling\n * `setConfig()`. This is useful for example if you're using Next.js\n * to ensure your client always has the correct values.\n */\nexport type CreateClientConfig = (\n    override?: Config,\n) => Config & T>;\n\nexport interface TDataShape {\n    body?: unknown;\n    headers?: unknown;\n    path?: unknown;\n    query?: unknown;\n    url: string;\n}\n\ntype OmitKeys = Pick>;\n\nexport type Options = OmitKeys,\n    'body' | 'path' | 'query' | 'url'\n> &\n    Omit;\n\nexport type OptionsLegacyParser = TData extends { body?: any }\n    ? TData extends { headers?: any }\n        ? OmitKeys,\n              'body' | 'headers' | 'url'\n          > &\n              TData\n        : OmitKeys,\n              'body' | 'url'\n          > &\n              TData &\n              Pick, 'headers'>\n    : TData extends { headers?: any }\n      ? OmitKeys,\n            'headers' | 'url'\n        > &\n            TData &\n            Pick, 'body'>\n      : OmitKeys, 'url'> & TData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResolverModule.html":{"url":"modules/ResolverModule.html","title":"module - ResolverModule","body":"\n                   \n\n\n\n\n    Modules\n    ResolverModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\n\nResolverService \n\nResolverService \n\n\n\nResolverModule\n\nResolverModule\n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/resolver/resolver.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ResolverService } from './resolver.service';\nimport { HttpModule } from '@nestjs/axios';\n\n@Module({\n    imports: [HttpModule],\n    providers: [ResolverService],\n    exports: [ResolverService],\n})\nexport class ResolverModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResolverService.html":{"url":"injectables/ResolverService.html","title":"injectable - ResolverService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResolverService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/resolver.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for resolving public keys from JWT payloads and headers.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                resolvePublicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/resolver/resolver.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resolvePublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolvePublicKey(payload: JWTPayload, header: JWK)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/resolver/resolver.service.ts:21\n                        \n                    \n\n\n            \n                \n                        Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWK\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { JWK, JWTPayload } from 'jose';\nimport { HttpService } from '@nestjs/axios';\nimport { firstValueFrom } from 'rxjs';\nimport { X509Certificate } from 'node:crypto';\nimport { IssuerMetadata } from './dto/issuer-metadata.dto';\n\n/**\n * Service for resolving public keys from JWT payloads and headers.\n */\n@Injectable()\nexport class ResolverService {\n    constructor(private httpService: HttpService) {}\n\n    /**\n     * Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n     * @param payload\n     * @param header\n     * @returns\n     */\n    async resolvePublicKey(payload: JWTPayload, header: JWK): Promise {\n        if (!payload.iss) {\n            throw new Error('Issuer not found');\n        }\n\n        if (header.x5c) {\n            //TODO: validate the certificate and the chain of trust!\n            const certs = header.x5c.map(\n                (cert) => new X509Certificate(Buffer.from(cert, 'base64')),\n            );\n            const cert = certs[0];\n            if (!cert.subjectAltName?.includes(payload.iss.split('://')[1])) {\n                throw new Error('Subject and issuer do not match');\n            }\n            return cert.publicKey.export({ format: 'jwk' }) as JWK;\n        }\n        //checl if the key is in the header as jwk\n        if (header['jwk']) {\n            return header['jwk'] as JWK;\n        }\n\n        const response = await firstValueFrom(\n            this.httpService.get(\n                `${payload.iss}/.well-known/jwt-vc-issuer`,\n            ),\n        ).then(\n            (r) => r.data,\n            () => {\n                throw new ConflictException('Issuer not reachable');\n            },\n        );\n        const key = response.jwks.keys.find((key) => key.kid === header.kid);\n        if (!key) {\n            throw new Error('Key not found');\n        }\n        return key;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SchemaResponse.html":{"url":"classes/SchemaResponse.html","title":"class - SchemaResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SchemaResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/dto/schema-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                $schema\n                            \n                            \n                                properties\n                            \n                            \n                                required\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        $schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'https://json-schema.org/draft/2020-12/schema'\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/schema-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/schema-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/schema-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'object'\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/schema-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class SchemaResponse {\n    '$schema' = 'https://json-schema.org/draft/2020-12/schema';\n    type = 'object';\n    properties: Record;\n    required: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializeOptions.html":{"url":"interfaces/SerializeOptions.html","title":"interface - SerializeOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializeOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/pathSerializer.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            SerializePrimitiveOptions\n                            SerializerOptions\n            \n\n\n\n\n    \n\n\n    \n        interface SerializeOptions\n    extends SerializePrimitiveOptions,\n        SerializerOptions {}\n\ninterface SerializePrimitiveOptions {\n    allowReserved?: boolean;\n    name: string;\n}\n\nexport interface SerializerOptions {\n    /**\n     * @default true\n     */\n    explode: boolean;\n    style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n    value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'form':\n            return ',';\n        case 'pipeDelimited':\n            return '|';\n        case 'spaceDelimited':\n            return '%20';\n        default:\n            return ',';\n    }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const serializeArrayParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n}: SerializeOptions & {\n    value: unknown[];\n}) => {\n    if (!explode) {\n        const joinedValues = (\n            allowReserved\n                ? value\n                : value.map((v) => encodeURIComponent(v as string))\n        ).join(separatorArrayNoExplode(style));\n        switch (style) {\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            case 'simple':\n                return joinedValues;\n            default:\n                return `${name}=${joinedValues}`;\n        }\n    }\n\n    const separator = separatorArrayExplode(style);\n    const joinedValues = value\n        .map((v) => {\n            if (style === 'label' || style === 'simple') {\n                return allowReserved ? v : encodeURIComponent(v as string);\n            }\n\n            return serializePrimitiveParam({\n                allowReserved,\n                name,\n                value: v as string,\n            });\n        })\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n    allowReserved,\n    name,\n    value,\n}: SerializePrimitiveParam) => {\n    if (value === undefined || value === null) {\n        return '';\n    }\n\n    if (typeof value === 'object') {\n        throw new Error(\n            'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n        );\n    }\n\n    return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n    valueOnly,\n}: SerializeOptions & {\n    value: Record | Date;\n    valueOnly?: boolean;\n}) => {\n    if (value instanceof Date) {\n        return valueOnly\n            ? value.toISOString()\n            : `${name}=${value.toISOString()}`;\n    }\n\n    if (style !== 'deepObject' && !explode) {\n        let values: string[] = [];\n        Object.entries(value).forEach(([key, v]) => {\n            values = [\n                ...values,\n                key,\n                allowReserved ? (v as string) : encodeURIComponent(v as string),\n            ];\n        });\n        const joinedValues = values.join(',');\n        switch (style) {\n            case 'form':\n                return `${name}=${joinedValues}`;\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            default:\n                return joinedValues;\n        }\n    }\n\n    const separator = separatorObjectExplode(style);\n    const joinedValues = Object.entries(value)\n        .map(([key, v]) =>\n            serializePrimitiveParam({\n                allowReserved,\n                name: style === 'deepObject' ? `${name}[${key}]` : key,\n                value: v as string,\n            }),\n        )\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializePrimitiveOptions.html":{"url":"interfaces/SerializePrimitiveOptions.html","title":"interface - SerializePrimitiveOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializePrimitiveOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/pathSerializer.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowReserved\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowReserved\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowReserved:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface SerializeOptions\n    extends SerializePrimitiveOptions,\n        SerializerOptions {}\n\ninterface SerializePrimitiveOptions {\n    allowReserved?: boolean;\n    name: string;\n}\n\nexport interface SerializerOptions {\n    /**\n     * @default true\n     */\n    explode: boolean;\n    style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n    value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'form':\n            return ',';\n        case 'pipeDelimited':\n            return '|';\n        case 'spaceDelimited':\n            return '%20';\n        default:\n            return ',';\n    }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const serializeArrayParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n}: SerializeOptions & {\n    value: unknown[];\n}) => {\n    if (!explode) {\n        const joinedValues = (\n            allowReserved\n                ? value\n                : value.map((v) => encodeURIComponent(v as string))\n        ).join(separatorArrayNoExplode(style));\n        switch (style) {\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            case 'simple':\n                return joinedValues;\n            default:\n                return `${name}=${joinedValues}`;\n        }\n    }\n\n    const separator = separatorArrayExplode(style);\n    const joinedValues = value\n        .map((v) => {\n            if (style === 'label' || style === 'simple') {\n                return allowReserved ? v : encodeURIComponent(v as string);\n            }\n\n            return serializePrimitiveParam({\n                allowReserved,\n                name,\n                value: v as string,\n            });\n        })\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n    allowReserved,\n    name,\n    value,\n}: SerializePrimitiveParam) => {\n    if (value === undefined || value === null) {\n        return '';\n    }\n\n    if (typeof value === 'object') {\n        throw new Error(\n            'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n        );\n    }\n\n    return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n    valueOnly,\n}: SerializeOptions & {\n    value: Record | Date;\n    valueOnly?: boolean;\n}) => {\n    if (value instanceof Date) {\n        return valueOnly\n            ? value.toISOString()\n            : `${name}=${value.toISOString()}`;\n    }\n\n    if (style !== 'deepObject' && !explode) {\n        let values: string[] = [];\n        Object.entries(value).forEach(([key, v]) => {\n            values = [\n                ...values,\n                key,\n                allowReserved ? (v as string) : encodeURIComponent(v as string),\n            ];\n        });\n        const joinedValues = values.join(',');\n        switch (style) {\n            case 'form':\n                return `${name}=${joinedValues}`;\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            default:\n                return joinedValues;\n        }\n    }\n\n    const separator = separatorObjectExplode(style);\n    const joinedValues = Object.entries(value)\n        .map(([key, v]) =>\n            serializePrimitiveParam({\n                allowReserved,\n                name: style === 'deepObject' ? `${name}[${key}]` : key,\n                value: v as string,\n            }),\n        )\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializePrimitiveParam.html":{"url":"interfaces/SerializePrimitiveParam.html","title":"interface - SerializePrimitiveParam","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializePrimitiveParam\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/pathSerializer.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            SerializePrimitiveOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface SerializeOptions\n    extends SerializePrimitiveOptions,\n        SerializerOptions {}\n\ninterface SerializePrimitiveOptions {\n    allowReserved?: boolean;\n    name: string;\n}\n\nexport interface SerializerOptions {\n    /**\n     * @default true\n     */\n    explode: boolean;\n    style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n    value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'form':\n            return ',';\n        case 'pipeDelimited':\n            return '|';\n        case 'spaceDelimited':\n            return '%20';\n        default:\n            return ',';\n    }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const serializeArrayParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n}: SerializeOptions & {\n    value: unknown[];\n}) => {\n    if (!explode) {\n        const joinedValues = (\n            allowReserved\n                ? value\n                : value.map((v) => encodeURIComponent(v as string))\n        ).join(separatorArrayNoExplode(style));\n        switch (style) {\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            case 'simple':\n                return joinedValues;\n            default:\n                return `${name}=${joinedValues}`;\n        }\n    }\n\n    const separator = separatorArrayExplode(style);\n    const joinedValues = value\n        .map((v) => {\n            if (style === 'label' || style === 'simple') {\n                return allowReserved ? v : encodeURIComponent(v as string);\n            }\n\n            return serializePrimitiveParam({\n                allowReserved,\n                name,\n                value: v as string,\n            });\n        })\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n    allowReserved,\n    name,\n    value,\n}: SerializePrimitiveParam) => {\n    if (value === undefined || value === null) {\n        return '';\n    }\n\n    if (typeof value === 'object') {\n        throw new Error(\n            'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n        );\n    }\n\n    return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n    valueOnly,\n}: SerializeOptions & {\n    value: Record | Date;\n    valueOnly?: boolean;\n}) => {\n    if (value instanceof Date) {\n        return valueOnly\n            ? value.toISOString()\n            : `${name}=${value.toISOString()}`;\n    }\n\n    if (style !== 'deepObject' && !explode) {\n        let values: string[] = [];\n        Object.entries(value).forEach(([key, v]) => {\n            values = [\n                ...values,\n                key,\n                allowReserved ? (v as string) : encodeURIComponent(v as string),\n            ];\n        });\n        const joinedValues = values.join(',');\n        switch (style) {\n            case 'form':\n                return `${name}=${joinedValues}`;\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            default:\n                return joinedValues;\n        }\n    }\n\n    const separator = separatorObjectExplode(style);\n    const joinedValues = Object.entries(value)\n        .map(([key, v]) =>\n            serializePrimitiveParam({\n                allowReserved,\n                name: style === 'deepObject' ? `${name}[${key}]` : key,\n                value: v as string,\n            }),\n        )\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializerOptions.html":{"url":"interfaces/SerializerOptions.html","title":"interface - SerializerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/pathSerializer.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            explode\n                                        \n                                \n                                \n                                        \n                                            style\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        explode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        explode:         boolean\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : true\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        style\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        style:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface SerializeOptions\n    extends SerializePrimitiveOptions,\n        SerializerOptions {}\n\ninterface SerializePrimitiveOptions {\n    allowReserved?: boolean;\n    name: string;\n}\n\nexport interface SerializerOptions {\n    /**\n     * @default true\n     */\n    explode: boolean;\n    style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n    value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'form':\n            return ',';\n        case 'pipeDelimited':\n            return '|';\n        case 'spaceDelimited':\n            return '%20';\n        default:\n            return ',';\n    }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const serializeArrayParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n}: SerializeOptions & {\n    value: unknown[];\n}) => {\n    if (!explode) {\n        const joinedValues = (\n            allowReserved\n                ? value\n                : value.map((v) => encodeURIComponent(v as string))\n        ).join(separatorArrayNoExplode(style));\n        switch (style) {\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            case 'simple':\n                return joinedValues;\n            default:\n                return `${name}=${joinedValues}`;\n        }\n    }\n\n    const separator = separatorArrayExplode(style);\n    const joinedValues = value\n        .map((v) => {\n            if (style === 'label' || style === 'simple') {\n                return allowReserved ? v : encodeURIComponent(v as string);\n            }\n\n            return serializePrimitiveParam({\n                allowReserved,\n                name,\n                value: v as string,\n            });\n        })\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n    allowReserved,\n    name,\n    value,\n}: SerializePrimitiveParam) => {\n    if (value === undefined || value === null) {\n        return '';\n    }\n\n    if (typeof value === 'object') {\n        throw new Error(\n            'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n        );\n    }\n\n    return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n    valueOnly,\n}: SerializeOptions & {\n    value: Record | Date;\n    valueOnly?: boolean;\n}) => {\n    if (value instanceof Date) {\n        return valueOnly\n            ? value.toISOString()\n            : `${name}=${value.toISOString()}`;\n    }\n\n    if (style !== 'deepObject' && !explode) {\n        let values: string[] = [];\n        Object.entries(value).forEach(([key, v]) => {\n            values = [\n                ...values,\n                key,\n                allowReserved ? (v as string) : encodeURIComponent(v as string),\n            ];\n        });\n        const joinedValues = values.join(',');\n        switch (style) {\n            case 'form':\n                return `${name}=${joinedValues}`;\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            default:\n                return joinedValues;\n        }\n    }\n\n    const separator = separatorObjectExplode(style);\n    const joinedValues = Object.entries(value)\n        .map(([key, v]) =>\n            serializePrimitiveParam({\n                allowReserved,\n                name: style === 'deepObject' ? `${name}[${key}]` : key,\n                value: v as string,\n            }),\n        )\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Session.html":{"url":"entities/Session.html","title":"entity - Session","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/entities/session.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a user session in the application.\nIt includes various properties such as credentials, authorization code,\nrequest URI, authorization queries, and more.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                auth_queries\n                            \n                            \n                                    \n                                    Optional\n                                authorization_code\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                credentialPayload\n                            \n                            \n                                    \n                                    Optional\n                                credentials\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                notifications\n                            \n                            \n                                    \n                                    Optional\n                                offer\n                            \n                            \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    Optional\n                                vp_nonce\n                            \n                            \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        auth_queries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthorizeQueries\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:56\n                        \n                    \n\n            \n                \n                    Authorization queries associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        authorization_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:46\n                        \n                    \n\n            \n                \n                    Authorization code for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:66\n                        \n                    \n\n            \n                \n                    Credential offer object containing details about the credential offer or presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentialPayload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OfferRequest\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:76\n                        \n                    \n\n            \n                \n                    Credential payload containing the offer request details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :     VerificationResult[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:41\n                        \n                    \n\n            \n                \n                    Verified credentials from the verification process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:36\n                        \n                    \n\n            \n                \n                    Unique identifier for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Notification[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:86\n                        \n                    \n\n            \n                \n                    Notifications associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        offer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialOfferObject\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:71\n                        \n                    \n\n            \n                \n                    Credential offer object containing details about the credential offer or presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:51\n                        \n                    \n\n            \n                \n                    Request URI from the authorization request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:91\n                        \n                    \n\n            \n                \n                    Tenant ID for multi-tenancy support.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        vp_nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:61\n                        \n                    \n\n            \n                \n                    Noncce from the Verifiable Presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:81\n                        \n                    \n\n            \n                \n                    Webhook configuration to send result and may receive further information.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n    CredentialOfferObject,\n    NotificationEvent,\n} from '@openid4vc/openid4vci';\nimport { VerificationResult } from '@sd-jwt/sd-jwt-vc';\nimport { AuthorizeQueries } from '../../issuer/authorize/dto/authorize-request.dto';\nimport { OfferRequest } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport { Column, Entity, PrimaryColumn } from 'typeorm';\nimport { WebhookConfig } from '../../utils/webhook.dto';\n\n/**\n * Represents a session entity for managing user sessions in the application.\n */\ntype Notification = {\n    /**\n     * Unique identifier for the notification.\n     */\n    id: string;\n    /**\n     * The type of notification.\n     */\n    event?: NotificationEvent;\n};\n\n/**\n * Entity representing a user session in the application.\n * It includes various properties such as credentials, authorization code,\n * request URI, authorization queries, and more.\n */\n@Entity()\nexport class Session {\n    /**\n     * Unique identifier for the session.\n     */\n    @PrimaryColumn('uuid')\n    id: string;\n    /**\n     * Verified credentials from the verification process.\n     */\n    @Column('json', { nullable: true })\n    credentials?: VerificationResult[];\n    /**\n     * Authorization code for the session.\n     */\n    @Column('varchar', { nullable: true })\n    authorization_code?: string;\n    /**\n     * Request URI from the authorization request.\n     */\n    @Column('varchar', { nullable: true })\n    request_uri?: string;\n    /**\n     * Authorization queries associated with the session.\n     */\n    @Column('json', { nullable: true })\n    auth_queries?: AuthorizeQueries;\n    /**\n     * Noncce from the Verifiable Presentation request.\n     */\n    @Column('varchar', { nullable: true })\n    vp_nonce?: string;\n    /**\n     * Credential offer object containing details about the credential offer or presentation request.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt: Date;\n    /**\n     * Credential offer object containing details about the credential offer or presentation request.\n     */\n    @Column('json', { nullable: true })\n    offer?: CredentialOfferObject;\n    /**\n     * Credential payload containing the offer request details.\n     */\n    @Column('json', { nullable: true })\n    credentialPayload?: OfferRequest;\n    /**\n     * Webhook configuration to send result and may receive further information.\n     */\n    @Column('json', { nullable: true })\n    webhook?: WebhookConfig;\n    /**\n     * Notifications associated with the session.\n     */\n    @Column('json', { default: JSON.stringify([]) })\n    notifications: Notification[];\n    /**\n     * Tenant ID for multi-tenancy support.\n     */\n    @Column('varchar')\n    tenantId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionController.html":{"url":"controllers/SessionController.html","title":"controller - SessionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                session\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getAllSessions\n                            \n                            \n                                    \n                                getSession\n                            \n                            \n                                    \n                                revokeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getAllSessions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllSessions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:23\n                        \n                    \n\n\n            \n                \n                        Retrieves all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSession(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        Retrieves the session information for a given session ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the session.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        revokeAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    revokeAll(value: StatusUpdateDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('revoke')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:42\n                        \n                    \n\n\n            \n                \n                        Update the status of the credentials of a specific session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Post, UseGuards, Body } from '@nestjs/common';\nimport { ApiSecurity, ApiTags } from '@nestjs/swagger';\nimport { SessionService } from './session.service';\nimport { Session } from './entities/session.entity';\nimport { JwtAuthGuard } from '../auth/auth.guard';\nimport { Token, TokenPayload } from '../auth/token.decorator';\nimport { StatusUpdateDto } from '../issuer/status-list/dto/status-update.dto';\nimport { StatusListService } from '../issuer/status-list/status-list.service';\n\n@ApiTags('Session management', 'Admin')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('session')\nexport class SessionController {\n    constructor(\n        private readonly sessionService: SessionService,\n        private readonly statusListService: StatusListService,\n    ) {}\n\n    /**\n     * Retrieves all sessions.\n     */ @Get()\n    getAllSessions(): Promise {\n        return this.sessionService.getAll();\n    }\n\n    /**\n     * Retrieves the session information for a given session ID.\n     * @param id - The identifier of the session.\n     */\n    @Get(':id')\n    getSession(@Param('id') id: string): Promise {\n        return this.sessionService.get(id);\n    }\n\n    /**\n     * Update the status of the credentials of a specific session.\n     * @param value\n     * @returns\n     */\n    @Post('revoke')\n    revokeAll(@Body() value: StatusUpdateDto, @Token() user: TokenPayload) {\n        return this.statusListService.updateStatus(value, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SessionLogContext.html":{"url":"interfaces/SessionLogContext.html","title":"interface - SessionLogContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SessionLogContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/session-logger-context.ts\n        \n\n\n            \n                Description\n            \n            \n                Context for session logging, including session ID, tenant ID, flow type, and optional stage.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            flowType\n                                        \n                                \n                                \n                                        \n                                            sessionId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stage\n                                        \n                                \n                                \n                                        \n                                            tenantId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/session-logger-context.ts:21\n                            \n                        \n                \n                    \n                        Additional context information for the session.\n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        flowType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flowType:     \"OID4VCI\" | \"OID4VP\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"OID4VCI\" | \"OID4VP\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Type of flow being logged (e.g., OID4VCI, OID4VP).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sessionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sessionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier for the session.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional stage of the flow, useful for tracking progress.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenantId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tenantId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier for the tenant associated with the session.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SessionLogContext {\n    /**\n     * Unique identifier for the session.\n     */\n    sessionId: string;\n    /**\n     * Identifier for the tenant associated with the session.\n     */\n    tenantId: string;\n    /**\n     * Type of flow being logged (e.g., OID4VCI, OID4VP).\n     */\n    flowType: 'OID4VCI' | 'OID4VP';\n    /**\n     * Optional stage of the flow, useful for tracking progress.\n     */\n    stage?: string;\n    /**\n     * Additional context information for the session.\n     */\n    [key: string]: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerInterceptor.html":{"url":"injectables/SessionLoggerInterceptor.html","title":"injectable - SessionLoggerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/session-logger.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for logging session-related requests and responses.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                sanitizeBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, logger: PinoLogger)\n                    \n                \n                        \n                            \n                                Defined in src/utils/session-logger.interceptor.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerInterceptor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nReflector instance for accessing metadata.\n\n\n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.interceptor.ts:34\n                        \n                    \n\n\n            \n                \n                        Intercepts the request and logs session-related information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExecution context of the request.\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCall handler to proceed with the request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that emits the response data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeBody(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.interceptor.ts:131\n                        \n                    \n\n\n            \n                \n                        Sanitizes the request body to remove sensitive information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request body to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Sanitized body.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { PinoLogger } from 'nestjs-pino';\nimport { SESSION_LOGGER_KEY } from './session-logger.decorator';\n\n/**\n * Interceptor for logging session-related requests and responses.\n */\n@Injectable()\nexport class SessionLoggerInterceptor implements NestInterceptor {\n    /**\n     * Constructor for SessionLoggerInterceptor.\n     * @param reflector - Reflector instance for accessing metadata.\n     * @param logger - PinoLogger instance for logging.\n     */\n    constructor(\n        private readonly reflector: Reflector,\n        private readonly logger: PinoLogger,\n    ) {}\n\n    /**\n     * Intercepts the request and logs session-related information.\n     * @param context - Execution context of the request.\n     * @param next - Call handler to proceed with the request.\n     * @returns An observable that emits the response data.\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        const metadata = this.reflector.get(\n            SESSION_LOGGER_KEY,\n            context.getHandler(),\n        );\n\n        if (!metadata) {\n            return next.handle();\n        }\n\n        const { sessionIdParam, flowType } = metadata;\n        const request = context.switchToHttp().getRequest();\n        const response = context.switchToHttp().getResponse();\n\n        // Extract session ID from various sources\n        const sessionId =\n            request.params?.[sessionIdParam] ||\n            request.body?.[sessionIdParam] ||\n            request.headers['x-session-id'] ||\n            request.query?.[sessionIdParam];\n\n        const tenantId = request.params?.tenantId;\n        const method = request.method;\n        const url = request.url;\n\n        // Set context for this logger instance\n        this.logger.setContext('SessionLogger');\n\n        // Create log context\n        const logContext = {\n            sessionId,\n            tenantId,\n            flowType,\n            endpoint: `${method} ${url}`,\n        };\n\n        // Log the start of the request\n        this.logger.info(\n            {\n                ...logContext,\n                event: 'request_start',\n                method,\n                url,\n                headers: {\n                    'user-agent': request.headers['user-agent'],\n                    'content-type': request.headers['content-type'],\n                },\n                body: this.sanitizeBody(request.body),\n            },\n            `[${flowType}] Starting ${method} ${url} for session ${sessionId}`,\n        );\n\n        const startTime = Date.now();\n\n        return next.handle().pipe(\n            tap((data) => {\n                const duration = Date.now() - startTime;\n                this.logger.info(\n                    {\n                        ...logContext,\n                        event: 'request_success',\n                        method,\n                        url,\n                        statusCode: response.statusCode,\n                        duration,\n                        responseSize: JSON.stringify(data || {}).length,\n                    },\n                    `[${flowType}] Completed ${method} ${url} for session ${sessionId} in ${duration}ms`,\n                );\n            }),\n            catchError((error) => {\n                const duration = Date.now() - startTime;\n                this.logger.error(\n                    {\n                        ...logContext,\n                        event: 'request_error',\n                        method,\n                        url,\n                        error: {\n                            name: error.name,\n                            message: error.message,\n                            stack: error.stack,\n                        },\n                        duration,\n                    },\n                    `[${flowType}] Error in ${method} ${url} for session ${sessionId}: ${error.message}`,\n                );\n                throw error;\n            }),\n        );\n    }\n\n    /**\n     * Sanitizes the request body to remove sensitive information.\n     * @param body - The request body to sanitize.\n     * @returns Sanitized body.\n     */\n    private sanitizeBody(body: any): any {\n        if (!body) return body;\n\n        // Create a copy to avoid modifying the original\n        const sanitized = { ...body };\n\n        // Remove sensitive fields\n        const sensitiveFields = [\n            'password',\n            'token',\n            'secret',\n            'key',\n            'private_key',\n            'access_token',\n            'refresh_token',\n        ];\n\n        sensitiveFields.forEach((field) => {\n            if (sanitized[field]) {\n                sanitized[field] = '[REDACTED]';\n            }\n        });\n\n        return sanitized;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerService.html":{"url":"injectables/SessionLoggerService.html","title":"injectable - SessionLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/session-logger.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for logging session-related events and errors.\nUses PinoLogger for structured logging.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logAuthorizationRequest\n                            \n                            \n                                logCredentialIssuance\n                            \n                            \n                                logCredentialVerification\n                            \n                            \n                                logFlowComplete\n                            \n                            \n                                logFlowError\n                            \n                            \n                                logFlowStart\n                            \n                            \n                                logNotification\n                            \n                            \n                                logSession\n                            \n                            \n                                logSessionError\n                            \n                            \n                                logTokenExchange\n                            \n                            \n                                    Private\n                                shouldLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/session-logger.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfigService for accessing environment configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \nlogAuthorizationRequest(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:146\n                        \n                    \n\n\n            \n                \n                        Log authorization request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialIssuance\n                        \n                    \n                \n            \n            \n                \nlogCredentialIssuance(context: SessionLogContext, credentialType: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Log credential issuance step\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialVerification\n                        \n                    \n                \n            \n            \n                \nlogCredentialVerification(context: SessionLogContext, verificationResult: boolean, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Log credential presentation verification\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                verificationResult\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowComplete\n                        \n                    \n                \n            \n            \n                \nlogFlowComplete(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Log session flow completion\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowError\n                        \n                    \n                \n            \n            \n                \nlogFlowError(context: SessionLogContext, error: Error, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Log session flow error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowStart\n                        \n                    \n                \n            \n            \n                \nlogFlowStart(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Log session flow start\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logNotification\n                        \n                    \n                \n            \n            \n                \nlogNotification(context: SessionLogContext, notificationEvent: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Log notification events\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notificationEvent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSession\n                        \n                    \n                \n            \n            \n                \nlogSession(context: SessionLogContext, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:202\n                        \n                    \n\n\n            \n                \n                        Generic session log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSessionError\n                        \n                    \n                \n            \n            \n                \nlogSessionError(context: SessionLogContext, error: Error, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:221\n                        \n                    \n\n\n            \n                \n                        Generic session error log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logTokenExchange\n                        \n                    \n                \n            \n            \n                \nlogTokenExchange(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Log token exchange\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldLog\n                        \n                    \n                \n            \n            \n                \n                        \n                    shouldLog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/session-logger.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PinoLogger } from 'nestjs-pino';\nimport { ConfigService } from '@nestjs/config';\nimport { SessionLogContext } from './session-logger-context';\n\n/**\n * Service for logging session-related events and errors.\n * Uses PinoLogger for structured logging.\n */\n@Injectable()\nexport class SessionLoggerService {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerService.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing environment configuration.\n     */\n    constructor(\n        private readonly logger: PinoLogger,\n        private readonly configService: ConfigService,\n    ) {\n        this.logger.setContext('SessionLoggerService');\n        this.isEnabled = !this.configService.get(\n            'LOG_DISABLE_SESSION_LOGGER',\n            false,\n        );\n    }\n\n    private shouldLog(): boolean {\n        return this.isEnabled;\n    }\n\n    /**\n     * Log session flow start\n     */\n    logFlowStart(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow started for session ${context.sessionId} in tenant ${context.tenantId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'flow_start',\n                stage: 'initialization',\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow completion\n     */\n    logFlowComplete(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow completed for session ${context.sessionId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'flow_complete',\n                stage: 'completion',\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow error\n     */\n    logFlowError(\n        context: SessionLogContext,\n        error: Error,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow error for session ${context.sessionId}: ${error.message}`;\n\n        this.logger.error(\n            {\n                ...context,\n                event: 'flow_error',\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log credential issuance step\n     */\n    logCredentialIssuance(\n        context: SessionLogContext,\n        credentialType: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'credential_issuance',\n                stage: 'credential_creation',\n                credentialType,\n                ...additionalData,\n            },\n            `[${context.flowType}] Issuing credential of type ${credentialType} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log credential presentation verification\n     */\n    logCredentialVerification(\n        context: SessionLogContext,\n        verificationResult: boolean,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'credential_verification',\n                stage: 'verification',\n                verificationResult,\n                ...additionalData,\n            },\n            `[${context.flowType}] Credential verification ${verificationResult ? 'succeeded' : 'failed'} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log authorization request\n     */\n    logAuthorizationRequest(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'authorization_request',\n                stage: 'authorization',\n                ...additionalData,\n            },\n            `[${context.flowType}] Authorization request created for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log token exchange\n     */\n    logTokenExchange(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'token_exchange',\n                stage: 'token_exchange',\n                ...additionalData,\n            },\n            `[${context.flowType}] Token exchange for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log notification events\n     */\n    logNotification(\n        context: SessionLogContext,\n        notificationEvent: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'notification',\n                stage: 'notification',\n                notificationEvent,\n                ...additionalData,\n            },\n            `[${context.flowType}] Notification ${notificationEvent} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Generic session log method\n     */\n    logSession(\n        context: SessionLogContext,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}`,\n        );\n    }\n\n    /**\n     * Generic session error log method\n     */\n    logSessionError(\n        context: SessionLogContext,\n        error: Error,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.error(\n            {\n                ...context,\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}: ${error.message}`,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionModule.html":{"url":"modules/SessionModule.html","title":"module - SessionModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_imports\n\n\n\ncluster_SessionModule_providers\n\n\n\n\nStatusListModule\n\nStatusListModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/session/session.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            SessionModule is responsible for managing user sessions.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SessionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SessionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SessionService } from './session.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Session } from './entities/session.entity';\nimport { SessionController } from './session.controller';\nimport * as Joi from 'joi';\nimport { StatusListModule } from '../issuer/status-list/status-list.module';\n\n/**\n * Module for managing user sessions.\n */\nexport const SESSION_VALIDATION_SCHEMA = {\n    SESSION_TIDY_UP_INTERVAL: Joi.number().default(60 * 60), // default to every hour\n    SESSION_TTL: Joi.number().default(24 * 60 * 60), // default to 24 hours\n};\n\n/**\n * SessionModule is responsible for managing user sessions.\n */\n@Module({\n    imports: [TypeOrmModule.forFeature([Session]), StatusListModule],\n    providers: [SessionService],\n    exports: [SessionService],\n    controllers: [SessionController],\n})\nexport class SessionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                create\n                            \n                            \n                                get\n                            \n                            \n                                getAll\n                            \n                            \n                                getBy\n                            \n                            \n                                onApplicationBootstrap\n                            \n                            \n                                tidyUpSessions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionRepository: Repository, configService: ConfigService, schedulerRegistry: SchedulerRegistry)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schedulerRegistry\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(issuer_state: string, tenantId: string, values: QueryDeepPartialEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Update an existing session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            QueryDeepPartialEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(session: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Create a new session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Get a session by its state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Get all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBy\n                        \n                    \n                \n            \n            \n                \ngetBy(where: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:83\n                        \n                    \n\n\n            \n                \n                        Get a session by a specific condition.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                            FindOptionsWhere\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \nonApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Register the tidy up cron job on application bootstrap.\nThis will run every hour by default, but can be configured via the SESSION_TIDY_UP_INTERVAL config variable.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tidyUpSessions\n                        \n                    \n                \n            \n            \n                \ntidyUpSessions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Tidy up sessions that are older than 1 day.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { Session } from './entities/session.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeepPartial, FindOptionsWhere, LessThan, Repository } from 'typeorm';\nimport { QueryDeepPartialEntity } from 'typeorm/query-builder/QueryPartialEntity';\nimport { SchedulerRegistry } from '@nestjs/schedule';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class SessionService implements OnApplicationBootstrap {\n    constructor(\n        @InjectRepository(Session)\n        private sessionRepository: Repository,\n        private readonly configService: ConfigService,\n        private readonly schedulerRegistry: SchedulerRegistry,\n    ) {}\n\n    /**\n     * Register the tidy up cron job on application bootstrap.\n     * This will run every hour by default, but can be configured via the `SESSION_TIDY_UP_INTERVAL` config variable.\n     * @returns\n     */\n    onApplicationBootstrap() {\n        const callback = () => {\n            void this.tidyUpSessions();\n        };\n        const intervalTime =\n            this.configService.getOrThrow('SESSION_TIDY_UP_INTERVAL') *\n            1000;\n        const interval = setInterval(callback, intervalTime);\n        this.schedulerRegistry.addInterval('tidyUpSessions', interval);\n        return this.tidyUpSessions();\n    }\n\n    /**\n     * Create a new session.\n     * @param session\n     * @returns\n     */\n    create(session: DeepPartial) {\n        return this.sessionRepository.save(session);\n    }\n\n    /**\n     * Update an existing session.\n     * @param issuer_state\n     * @param values\n     * @returns\n     */\n    add(\n        issuer_state: string,\n        tenantId: string,\n        values: QueryDeepPartialEntity,\n    ) {\n        return this.sessionRepository.update(\n            { id: issuer_state, tenantId },\n            values,\n        );\n    }\n\n    /**\n     * Get all sessions.\n     * @returns\n     */\n    getAll(): Promise {\n        return this.sessionRepository.find();\n    }\n\n    /**\n     * Get a session by its state.\n     * @param state\n     * @returns\n     */\n    get(state: string) {\n        return this.sessionRepository.findOneByOrFail({ id: state });\n    }\n\n    /**\n     * Get a session by a specific condition.\n     * @param where\n     * @returns\n     */\n    getBy(where: FindOptionsWhere) {\n        return this.sessionRepository.findOneByOrFail(where);\n    }\n\n    /**\n     * Tidy up sessions that are older than 1 day.\n     */\n    tidyUpSessions() {\n        const ttl = this.configService.getOrThrow('SESSION_TTL') * 1000;\n        return this.sessionRepository.delete({\n            createdAt: LessThan(new Date(Date.now() - ttl)),\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StatusListController.html":{"url":"controllers/StatusListController.html","title":"controller - StatusListController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StatusListController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/status-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getList(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status-list')@Header('Content-Type', 'application/statuslist+jwt')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.controller.ts:16\n                        \n                    \n\n\n            \n                \n                        Get the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Param } from '@nestjs/common';\nimport { StatusListService } from './status-list.service';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Status management')\n@Controller(':tenantId/status-management')\nexport class StatusListController {\n    constructor(private statusListService: StatusListService) {}\n\n    /**\n     * Get the status list\n     * @returns\n     */\n    @Get('status-list')\n    @Header('Content-Type', 'application/statuslist+jwt')\n    getList(@Param('tenantId') tenantId: string) {\n        return this.statusListService.getList(tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StatusListFile.html":{"url":"interfaces/StatusListFile.html","title":"interface - StatusListFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StatusListFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            bits\n                                        \n                                \n                                \n                                        \n                                            elements\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            jwt\n                                        \n                                \n                                \n                                        \n                                            stack\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bits:     BitsPerStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BitsPerStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elements\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elements:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stack\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stack:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConflictException, Injectable, OnModuleInit } from '@nestjs/common';\nimport { join } from 'path';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport {\n    BitsPerStatus,\n    createHeaderAndPayload,\n    JWTwithStatusListPayload,\n    StatusList,\n    StatusListJWTHeaderParameters,\n} from '@sd-jwt/jwt-status-list';\nimport { JwtPayload } from '@sd-jwt/types';\nimport { ConfigService } from '@nestjs/config';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { StatusMapping } from './entities/status-mapping.entity';\nimport { Repository } from 'typeorm';\nimport { StatusUpdateDto } from './dto/status-update.dto';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { Session } from '../../session/entities/session.entity';\nimport { TENANT_EVENTS } from '../../auth/tenant-events';\n\ninterface StatusListFile {\n    elements: number[];\n    stack: number[];\n    bits: BitsPerStatus;\n    jwt?: string;\n}\n\n@Injectable()\nexport class StatusListService implements OnModuleInit {\n    private fileName: string = 'status-list.json';\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        @InjectRepository(StatusMapping)\n        private statusMappingRepository: Repository,\n    ) {}\n    onModuleInit() {}\n\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    onTenantInit(tenantId: string) {\n        return this.init(tenantId);\n    }\n\n    /**\n     * Initialize the status list service by checking if the status list file exists.\n     * If it does not exist, create a new status list with 10,000 entries and a stack\n     * of 10,000 indexes. The stack is shuffled to ensure randomness in the order of\n     * entries. The status list is stored in the file system as a JSON file.\n     */\n    private async init(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        if (!existsSync(file)) {\n            const size = 10000;\n            // create an empty array with the size of 1000\n            const elements = new Array(size).fill(0).map(() => 0);\n            // create a list of 1000 indexes and shuffel them\n            const stack = new Array(size)\n                .fill(0)\n                .map((_, i) => i)\n                .sort(() => 0.5 - Math.random());\n\n            writeFileSync(\n                file,\n                JSON.stringify({ elements, stack, bits: 1 } as StatusListFile),\n            );\n            await this.createList(tenantId);\n        }\n    }\n\n    /**\n     * Create a new status list and stored it in the file\n     */\n    async createList(tenantId: string) {\n        const file = this.getConfig(tenantId);\n        const list = new StatusList(file.elements, file.bits);\n        const iss = `${this.configService.getOrThrow('PUBLIC_URL')}`;\n\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            tenantId,\n            'status-management',\n            'status-list',\n        );\n\n        const prePayload: JwtPayload = {\n            iss,\n            sub,\n            iat: Math.floor(Date.now() / 1000),\n        };\n        const preHeader: StatusListJWTHeaderParameters = {\n            alg: 'ES256',\n            typ: 'statuslist+jwt',\n            x5c: this.cryptoService.getCertChain('signing', tenantId),\n        };\n        const { header, payload } = createHeaderAndPayload(\n            list,\n            prePayload,\n            preHeader,\n        );\n\n        const jwt = await this.cryptoService.signJwt(header, payload, tenantId);\n        file.jwt = jwt;\n        this.storeConfig(file, tenantId);\n    }\n\n    getList(tenantId: string) {\n        return this.getConfig(tenantId).jwt;\n    }\n\n    private getConfig(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        return JSON.parse(readFileSync(file, 'utf-8')) as StatusListFile;\n    }\n\n    private storeConfig(content: StatusListFile, tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        writeFileSync(file, JSON.stringify(content));\n    }\n\n    /**\n     * Get the next free entry in the status list\n     * @returns\n     */\n    async createEntry(\n        session: Session,\n        credentialConfigurationId: string,\n    ): Promise {\n        const file = this.getConfig(session.tenantId);\n        // get the last element from the stack\n        const idx = file.stack.pop();\n        //TODO: what to do if the stack is empty\n        if (idx === undefined) {\n            throw new Error('Stack for status list is empty!!!');\n        }\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            session.tenantId,\n            'status-management',\n            'status-list',\n        );\n        // store the index in the status mapping\n        await this.statusMappingRepository.save({\n            sessionId: session.id,\n            index: idx,\n            list: sub,\n            credentialConfigurationId,\n        });\n        this.storeConfig(file, session.tenantId);\n        return {\n            status: {\n                status_list: {\n                    idx: idx,\n                    uri: sub,\n                },\n            },\n        };\n    }\n\n    /**\n     * Update the value of an entry in the status list\n     * @param id\n     * @param value\n     */\n    private setEntry(id: number, value: number, tenantId: string) {\n        const file = this.getConfig(tenantId);\n        file.elements[id] = value;\n        this.storeConfig(file, tenantId);\n        return this.createList(tenantId);\n    }\n\n    /**\n     * Update the status of a session and its credential configuration\n     * @param value\n     */\n    async updateStatus(value: StatusUpdateDto, tenantId: string) {\n        const entries = await this.statusMappingRepository.findBy({\n            sessionId: value.sessionId,\n            credentialConfigurationId: value.credentialConfigurationId,\n        });\n        if (entries.length === 0) {\n            throw new ConflictException(\n                `No status mapping found for session ${value.sessionId} and credential configuration ${value.credentialConfigurationId}`,\n            );\n        }\n        for (const entry of entries) {\n            await this.setEntry(entry.index, value.status, tenantId);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StatusListModule.html":{"url":"modules/StatusListModule.html","title":"module - StatusListModule","body":"\n                   \n\n\n\n\n    Modules\n    StatusListModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_imports\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/status-list/status-list.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StatusListController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StatusListController } from './status-list.controller';\nimport { StatusListService } from './status-list.service';\nimport { CryptoModule } from '../../crypto/crypto.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { StatusMapping } from './entities/status-mapping.entity';\n\n@Module({\n    imports: [CryptoModule, TypeOrmModule.forFeature([StatusMapping])],\n    controllers: [StatusListController],\n    providers: [StatusListService],\n    exports: [StatusListService],\n})\nexport class StatusListModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StatusListService.html":{"url":"injectables/StatusListService.html","title":"injectable - StatusListService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StatusListService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fileName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEntry\n                            \n                            \n                                    Async\n                                createList\n                            \n                            \n                                    Private\n                                getConfig\n                            \n                            \n                                getList\n                            \n                            \n                                    Private\n                                    Async\n                                init\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    \n                                onTenantInit\n                            \n                            \n                                    Private\n                                setEntry\n                            \n                            \n                                    Private\n                                storeConfig\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, statusMappingRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/status-list/status-list.service.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusMappingRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEntry(session: Session, credentialConfigurationId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:138\n                        \n                    \n\n\n            \n                \n                        Get the next free entry in the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createList\n                        \n                    \n                \n            \n            \n                \n                        \n                    createList(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Create a new status list and stored it in the file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfig(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         StatusListFile\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getList\n                        \n                    \n                \n            \n            \n                \ngetList(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Initialize the status list service by checking if the status list file exists.\nIf it does not exist, create a new status list with 10,000 entries and a stack\nof 10,000 indexes. The stack is shuffled to ensure randomness in the order of\nentries. The status list is stored in the file system as a JSON file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_KEYS, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    setEntry(id: number, value: number, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:178\n                        \n                    \n\n\n            \n                \n                        Update the value of an entry in the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        storeConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeConfig(content: StatusListFile, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                content\n                                            \n                                                            StatusListFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(value: StatusUpdateDto, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:189\n                        \n                    \n\n\n            \n                \n                        Update the status of a session and its credential configuration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fileName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'status-list.json'\n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/status-list.service.ts:31\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, OnModuleInit } from '@nestjs/common';\nimport { join } from 'path';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport {\n    BitsPerStatus,\n    createHeaderAndPayload,\n    JWTwithStatusListPayload,\n    StatusList,\n    StatusListJWTHeaderParameters,\n} from '@sd-jwt/jwt-status-list';\nimport { JwtPayload } from '@sd-jwt/types';\nimport { ConfigService } from '@nestjs/config';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { StatusMapping } from './entities/status-mapping.entity';\nimport { Repository } from 'typeorm';\nimport { StatusUpdateDto } from './dto/status-update.dto';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { Session } from '../../session/entities/session.entity';\nimport { TENANT_EVENTS } from '../../auth/tenant-events';\n\ninterface StatusListFile {\n    elements: number[];\n    stack: number[];\n    bits: BitsPerStatus;\n    jwt?: string;\n}\n\n@Injectable()\nexport class StatusListService implements OnModuleInit {\n    private fileName: string = 'status-list.json';\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        @InjectRepository(StatusMapping)\n        private statusMappingRepository: Repository,\n    ) {}\n    onModuleInit() {}\n\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    onTenantInit(tenantId: string) {\n        return this.init(tenantId);\n    }\n\n    /**\n     * Initialize the status list service by checking if the status list file exists.\n     * If it does not exist, create a new status list with 10,000 entries and a stack\n     * of 10,000 indexes. The stack is shuffled to ensure randomness in the order of\n     * entries. The status list is stored in the file system as a JSON file.\n     */\n    private async init(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        if (!existsSync(file)) {\n            const size = 10000;\n            // create an empty array with the size of 1000\n            const elements = new Array(size).fill(0).map(() => 0);\n            // create a list of 1000 indexes and shuffel them\n            const stack = new Array(size)\n                .fill(0)\n                .map((_, i) => i)\n                .sort(() => 0.5 - Math.random());\n\n            writeFileSync(\n                file,\n                JSON.stringify({ elements, stack, bits: 1 } as StatusListFile),\n            );\n            await this.createList(tenantId);\n        }\n    }\n\n    /**\n     * Create a new status list and stored it in the file\n     */\n    async createList(tenantId: string) {\n        const file = this.getConfig(tenantId);\n        const list = new StatusList(file.elements, file.bits);\n        const iss = `${this.configService.getOrThrow('PUBLIC_URL')}`;\n\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            tenantId,\n            'status-management',\n            'status-list',\n        );\n\n        const prePayload: JwtPayload = {\n            iss,\n            sub,\n            iat: Math.floor(Date.now() / 1000),\n        };\n        const preHeader: StatusListJWTHeaderParameters = {\n            alg: 'ES256',\n            typ: 'statuslist+jwt',\n            x5c: this.cryptoService.getCertChain('signing', tenantId),\n        };\n        const { header, payload } = createHeaderAndPayload(\n            list,\n            prePayload,\n            preHeader,\n        );\n\n        const jwt = await this.cryptoService.signJwt(header, payload, tenantId);\n        file.jwt = jwt;\n        this.storeConfig(file, tenantId);\n    }\n\n    getList(tenantId: string) {\n        return this.getConfig(tenantId).jwt;\n    }\n\n    private getConfig(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        return JSON.parse(readFileSync(file, 'utf-8')) as StatusListFile;\n    }\n\n    private storeConfig(content: StatusListFile, tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        writeFileSync(file, JSON.stringify(content));\n    }\n\n    /**\n     * Get the next free entry in the status list\n     * @returns\n     */\n    async createEntry(\n        session: Session,\n        credentialConfigurationId: string,\n    ): Promise {\n        const file = this.getConfig(session.tenantId);\n        // get the last element from the stack\n        const idx = file.stack.pop();\n        //TODO: what to do if the stack is empty\n        if (idx === undefined) {\n            throw new Error('Stack for status list is empty!!!');\n        }\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            session.tenantId,\n            'status-management',\n            'status-list',\n        );\n        // store the index in the status mapping\n        await this.statusMappingRepository.save({\n            sessionId: session.id,\n            index: idx,\n            list: sub,\n            credentialConfigurationId,\n        });\n        this.storeConfig(file, session.tenantId);\n        return {\n            status: {\n                status_list: {\n                    idx: idx,\n                    uri: sub,\n                },\n            },\n        };\n    }\n\n    /**\n     * Update the value of an entry in the status list\n     * @param id\n     * @param value\n     */\n    private setEntry(id: number, value: number, tenantId: string) {\n        const file = this.getConfig(tenantId);\n        file.elements[id] = value;\n        this.storeConfig(file, tenantId);\n        return this.createList(tenantId);\n    }\n\n    /**\n     * Update the status of a session and its credential configuration\n     * @param value\n     */\n    async updateStatus(value: StatusUpdateDto, tenantId: string) {\n        const entries = await this.statusMappingRepository.findBy({\n            sessionId: value.sessionId,\n            credentialConfigurationId: value.credentialConfigurationId,\n        });\n        if (entries.length === 0) {\n            throw new ConflictException(\n                `No status mapping found for session ${value.sessionId} and credential configuration ${value.credentialConfigurationId}`,\n            );\n        }\n        for (const entry of entries) {\n            await this.setEntry(entry.index, value.status, tenantId);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusMapping.html":{"url":"entities/StatusMapping.html","title":"entity - StatusMapping","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StatusMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/entities/status-mapping.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                credentialConfigurationId\n                            \n                            \n                                    \n                                index\n                            \n                            \n                                    \n                                list\n                            \n                            \n                                    \n                                sessionId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\n\n@Entity()\nexport class StatusMapping {\n    @Column({ type: 'varchar', primary: true })\n    sessionId: string;\n\n    @Column({ type: 'varchar', primary: true })\n    list: string;\n\n    @Column({ type: 'int', primary: true })\n    index: number;\n\n    @Column({ type: 'varchar', primary: true })\n    credentialConfigurationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StatusUpdateDto.html":{"url":"classes/StatusUpdateDto.html","title":"class - StatusUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StatusUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/dto/status-update.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationId\n                            \n                            \n                                    \n                                sessionId\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:16\n                        \n                    \n\n            \n                \n                    The ID of the credential configuration\nThis is optional, if not provided, all credentials will be revoked of the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:8\n                        \n                    \n\n            \n                \n                    The session ID of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsIn(['0', '1'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:24\n                        \n                    \n\n            \n                \n                    The status of the credential\n0 = valid, 1 = revoked\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNumber, IsOptional, IsString } from 'class-validator';\n\nexport class StatusUpdateDto {\n    /**\n     * The session ID of the user\n     */\n    @IsString()\n    sessionId: string;\n\n    /**\n     * The ID of the credential configuration\n     * This is optional, if not provided, all credentials will be revoked of the session.\n     */\n    @IsString()\n    @IsOptional()\n    credentialConfigurationId?: string;\n\n    /**\n     * The status of the credential\n     * 0 = valid, 1 = revoked\n     */\n    @IsNumber()\n    @IsIn([0, 1])\n    status: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TDataShape.html":{"url":"interfaces/TDataShape.html","title":"interface - TDataShape","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TDataShape\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            body\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            query\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type { Auth } from '../core/auth';\nimport type { Client as CoreClient, Config as CoreConfig } from '../core/types';\nimport type { Middleware } from './utils';\n\nexport type ResponseStyle = 'data' | 'fields';\n\nexport interface Config\n    extends Omit,\n        CoreConfig {\n    /**\n     * Base URL for all requests made by this client.\n     */\n    baseUrl?: T['baseUrl'];\n    /**\n     * Fetch API implementation. You can use this option to provide a custom\n     * fetch instance.\n     *\n     * @default globalThis.fetch\n     */\n    fetch?: (request: Request) => ReturnType;\n    /**\n     * Please don't use the Fetch client for Next.js applications. The `next`\n     * options won't have any effect.\n     *\n     * Install {@link https://www.npmjs.com/package/@hey-api/client-next `@hey-api/client-next`} instead.\n     */\n    next?: never;\n    /**\n     * Return the response data parsed in a specified format. By default, `auto`\n     * will infer the appropriate method from the `Content-Type` response header.\n     * You can override this behavior with any of the {@link Body} methods.\n     * Select `stream` if you don't want to parse response data at all.\n     *\n     * @default 'auto'\n     */\n    parseAs?:\n        | 'arrayBuffer'\n        | 'auto'\n        | 'blob'\n        | 'formData'\n        | 'json'\n        | 'stream'\n        | 'text';\n    /**\n     * Should we return only data or multiple fields (data, error, response, etc.)?\n     *\n     * @default 'fields'\n     */\n    responseStyle?: ResponseStyle;\n    /**\n     * Throw an error instead of returning it in the response?\n     *\n     * @default false\n     */\n    throwOnError?: T['throwOnError'];\n}\n\nexport interface RequestOptions extends Config {\n    /**\n     * Any body that you want to add to your request.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#body}\n     */\n    body?: unknown;\n    path?: Record;\n    query?: Record;\n    /**\n     * Security mechanism(s) to use for the request.\n     */\n    security?: ReadonlyArray;\n    url: Url;\n}\n\nexport type RequestResult = ThrowOnError extends true\n    ? Promise\n                  ? TData[keyof TData]\n                  : TData\n              : {\n                    data: TData extends Record\n                        ? TData[keyof TData]\n                        : TData;\n                    request: Request;\n                    response: Response;\n                }\n      >\n    : Promise\n                          ? TData[keyof TData]\n                          : TData)\n                    | undefined\n              : (\n                    | {\n                          data: TData extends Record\n                              ? TData[keyof TData]\n                              : TData;\n                          error: undefined;\n                      }\n                    | {\n                          data: undefined;\n                          error: TError extends Record\n                              ? TError[keyof TError]\n                              : TError;\n                      }\n                ) & {\n                    request: Request;\n                    response: Response;\n                }\n      >;\n\nexport interface ClientOptions {\n    baseUrl?: string;\n    responseStyle?: ResponseStyle;\n    throwOnError?: boolean;\n}\n\ntype MethodFn = (\n    options: Omit, 'method'>,\n) => RequestResult;\n\ntype RequestFn = (\n    options: Omit, 'method'> &\n        Pick>, 'method'>,\n) => RequestResult;\n\ntype BuildUrlFn = ;\n        query?: Record;\n        url: string;\n    },\n>(\n    options: Pick & Options,\n) => string;\n\nexport type Client = CoreClient & {\n    interceptors: Middleware;\n};\n\n/**\n * The `createClientConfig()` function will be called on client initialization\n * and the returned object will become the client's initial configuration.\n *\n * You may want to initialize your client this way instead of calling\n * `setConfig()`. This is useful for example if you're using Next.js\n * to ensure your client always has the correct values.\n */\nexport type CreateClientConfig = (\n    override?: Config,\n) => Config & T>;\n\nexport interface TDataShape {\n    body?: unknown;\n    headers?: unknown;\n    path?: unknown;\n    query?: unknown;\n    url: string;\n}\n\ntype OmitKeys = Pick>;\n\nexport type Options = OmitKeys,\n    'body' | 'path' | 'query' | 'url'\n> &\n    Omit;\n\nexport type OptionsLegacyParser = TData extends { body?: any }\n    ? TData extends { headers?: any }\n        ? OmitKeys,\n              'body' | 'headers' | 'url'\n          > &\n              TData\n        : OmitKeys,\n              'body' | 'url'\n          > &\n              TData &\n              Pick, 'headers'>\n    : TData extends { headers?: any }\n      ? OmitKeys,\n            'headers' | 'url'\n        > &\n            TData &\n            Pick, 'body'>\n      : OmitKeys, 'url'> & TData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.decorator.ts\n        \n\n\n            \n                Description\n            \n            \n                Values of the user token\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from '@nestjs/common';\n\nexport const Token = createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n);\n\n/**\n * Values of the user token\n */\nexport interface TokenPayload {\n    sub: string; // Subject (client_id for client credentials)\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenResponse.html":{"url":"classes/TokenResponse.html","title":"class - TokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/token-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access_token\n                            \n                            \n                                expires_in\n                            \n                            \n                                token_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TokenResponse {\n    access_token: string;\n    token_type: 'Bearer';\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VCT.html":{"url":"classes/VCT.html","title":"class - VCT","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VCT\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/dto/credential-config.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                extends\n                            \n                            \n                                    \n                                    Optional\n                                extends#integrity\n                            \n                            \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    Optional\n                                schema_uri\n                            \n                            \n                                    \n                                    Optional\n                                schema_uri#integrity\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        extends\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        extends#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema_uri#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook.dto';\n\nexport class VCT {\n    @IsString()\n    vct: string;\n    @IsString()\n    name?: string;\n    @IsString()\n    description?: string;\n    @IsString()\n    extends?: string;\n    @IsString()\n    'extends#integrity'?: string;\n    @IsString()\n    schema_uri?: string;\n    @IsString()\n    'schema_uri#integrity'?: string;\n}\n\nexport class PresentationDuringIssuance {\n    @IsString()\n    type: string;\n    @IsObject()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VaultKeyService.html":{"url":"injectables/VaultKeyService.html","title":"injectable - VaultKeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VaultKeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/vault-key.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            KeyService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                folder\n                            \n                            \n                                    Private\n                                headers\n                            \n                            \n                                    Private\n                                vaultUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                derToJwtSignature\n                            \n                            \n                                    Private\n                                getJWK\n                            \n                            \n                                getKid\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                init\n                            \n                            \n                                sign\n                            \n                            \n                                signer\n                            \n                            \n                                    Async\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, configService: ConfigService, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/vault-key.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair in the vault.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        derToJwtSignature\n                        \n                    \n                \n            \n            \n                \nderToJwtSignature(derSignature: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:185\n                        \n                    \n\n\n            \n                \n                        Converts a DER signature to a JWT signature.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                derSignature\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getJWK\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJWK(key: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:121\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getKid\n                        \n                    \n                \n            \n            \n                \ngetKid(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:90\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:100\n\n                        \n                    \n\n\n            \n                \n                        Gets the public key and converts it to a KeyLike object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"jwk\" | \"pem\", tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"jwk\" | \"pem\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:45\n\n                        \n                    \n\n\n            \n                \n                        Check if the vault has a key with the given id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sign\n                        \n                    \n                \n            \n            \n                \nsign(value: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:137\n                        \n                    \n\n\n            \n                \n                        Signs a value with a key in the vault.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signer\n                        \n                    \n                \n            \n            \n                \nsigner(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:57\n\n                        \n                    \n\n\n            \n                \n                        Get the signer for the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JwtPayload, header: JWTHeaderParameters, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:156\n\n                        \n                    \n\n\n            \n                \n                        Creates a proof of possession jwt.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWTHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        folder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/vault-key.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/vault-key.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        vaultUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/vault-key.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { KeyService } from './key.service';\nimport { HttpService } from '@nestjs/axios';\nimport { firstValueFrom } from 'rxjs';\nimport { importSPKI, exportJWK, JWTHeaderParameters, JWK } from 'jose';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtPayload, Signer } from '@sd-jwt/types';\nimport { CryptoService, CryptoType } from './crypto/crypto.service';\nimport { writeFileSync } from 'fs';\nimport { join } from 'path';\n\n@Injectable()\nexport class VaultKeyService extends KeyService {\n    // url to the vault instance\n    private vaultUrl: string;\n    // headers for the vault api\n    private headers: { headers: { 'X-Vault-Token': string } };\n\n    private folder: string;\n\n    constructor(\n        private httpService: HttpService,\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n    ) {\n        super();\n        this.folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            'keys',\n        );\n\n        this.vaultUrl = this.configService.get('VAULT_URL') as string;\n        this.headers = {\n            headers: {\n                'X-Vault-Token': this.configService.get(\n                    'VAULT_TOKEN',\n                ) as string,\n            },\n        };\n    }\n\n    /**\n     * Check if the vault has a key with the given id\n     */\n    async init(tenantId: string) {\n        //TODO: need to update this since signing cert is not created by the vault\n        await this.getPublicKey('pem', tenantId)\n            .then((res) => {\n                writeFileSync(join(this.folder, 'public-key.pem'), res);\n            })\n            .catch(async () => this.create(tenantId));\n    }\n\n    /**\n     * Get the signer for the key service\n     */\n    signer(tenantId: string): Promise {\n        //TODO: validate if this is correct.\n        return Promise.resolve((input: string) => this.sign(input, tenantId));\n    }\n\n    /**\n     * Creates a new keypair in the vault.\n     * @param createKeyDto\n     * @param user\n     * @returns\n     */\n    async create(tenantId: string) {\n        const types: Map = new Map();\n        types.set('ES256', 'ecdsa-p256');\n        types.set('Ed25519', 'ed25519');\n\n        const res = await firstValueFrom(\n            this.httpService.post(\n                `${this.vaultUrl}/keys/${tenantId}`,\n                {\n                    exportable: false,\n                    type: types.get(this.cryptoService.getAlg()),\n                },\n                this.headers,\n            ),\n        );\n        const jwk = await this.getPublicKey('jwk', tenantId);\n        return {\n            id: res.data.id,\n            publicKey: jwk,\n        };\n    }\n\n    getKid(tenantId: string): Promise {\n        //TODO: check if this is the right way to get the key id.\n        return Promise.resolve(tenantId);\n    }\n\n    /**\n     * Gets the public key and converts it to a KeyLike object.\n     * @param id\n     * @returns\n     */\n    async getPublicKey(type: 'pem', tenantId: string): Promise;\n    async getPublicKey(type: 'jwk', tenantId: string): Promise;\n    async getPublicKey(\n        type: 'jwk' | 'pem',\n        tenantId: string,\n    ): Promise {\n        return firstValueFrom(\n            this.httpService.get(\n                `${this.vaultUrl}/keys/${tenantId}`,\n                this.headers,\n            ),\n        ).then(async (res) => {\n            return type === 'pem'\n                ? (res.data.data.keys['1'].public_key as string)\n                : await this.getJWK(\n                      res.data.data.keys['1'].public_key,\n                      tenantId,\n                  );\n        });\n    }\n\n    private getJWK(key: string, tenantId: string): Promise {\n        return importSPKI(key, this.cryptoService.getAlg())\n            .then((cryptoKey) => exportJWK(cryptoKey))\n            .then(async (jwk) => {\n                jwk.kid = await this.getKid(tenantId);\n                return jwk;\n            });\n    }\n\n    /**\n     * Signs a value with a key in the vault.\n     * @param id\n     * @param user\n     * @param value\n     * @returns\n     */\n    sign(value: string, tenantId: string): Promise {\n        return firstValueFrom(\n            this.httpService.post(\n                `${this.vaultUrl}/sign/${tenantId}`,\n                {\n                    input: Buffer.from(value).toString('base64'),\n                },\n                this.headers,\n            ),\n        ).then((res) =>\n            this.derToJwtSignature(res.data.data.signature.split(':')[2]),\n        );\n    }\n\n    /**\n     * Creates a proof of possession jwt.\n     * @param user\n     * @param value\n     */\n    async signJWT(\n        payload: JwtPayload,\n        header: JWTHeaderParameters,\n        tenantId: string,\n    ): Promise {\n        // Convert header and payload to Base64 to prepare for Vault\n        const encodedHeader = Buffer.from(JSON.stringify(header)).toString(\n            'base64url',\n        );\n        const encodedPayload = Buffer.from(JSON.stringify(payload)).toString(\n            'base64url',\n        );\n        const signingInput = `${encodedHeader}.${encodedPayload}`;\n\n        // Request to Vault for signing\n        try {\n            const signature = await this.sign(signingInput, tenantId);\n            return `${encodedHeader}.${encodedPayload}.${signature}`;\n        } catch (error) {\n            console.error('Error signing JWT with Vault:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Converts a DER signature to a JWT signature.\n     * @param derSignature\n     * @returns\n     */\n    derToJwtSignature(derSignature: string) {\n        // Step 1: Extract r and s from DER signature\n        const der = Buffer.from(derSignature, 'base64');\n        const sequence = der.slice(2); // Skip the sequence tag and length\n        const rLength = sequence[1];\n        const r = sequence.slice(2, 2 + rLength);\n        const s = sequence.slice(2 + rLength + 2); // Skip r, its tag and length byte, and s's tag and length byte\n\n        // Step 2: Ensure r and s are 32 bytes each (pad with zeros if necessary)\n        // Ensure r and s are 32 bytes each\n        let rPadded: Buffer;\n        let sPadded: Buffer;\n        if (r.length > 32) {\n            if (r.length === 33 && r[0] === 0x00) {\n                rPadded = r.slice(1);\n            } else {\n                throw new Error('Invalid r length in DER signature');\n            }\n        } else {\n            rPadded = Buffer.concat([Buffer.alloc(32 - r.length), r]);\n        }\n        if (s.length > 32) {\n            if (s.length === 33 && s[0] === 0x00) {\n                sPadded = s.slice(1);\n            } else {\n                throw new Error('Invalid s length in DER signature');\n            }\n        } else {\n            sPadded = Buffer.concat([Buffer.alloc(32 - s.length), s]);\n        }\n\n        // Step 3: Concatenate r and s to form the raw signature\n        const rawSignature = Buffer.concat([rPadded, sPadded]);\n\n        // Step 4: Base64url encode the raw signature\n        return rawSignature\n            .toString('base64')\n            .replace(/\\+/g, '-')\n            .replace(/\\//g, '_')\n            .replace(/=/g, '');\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VerifierModule.html":{"url":"modules/VerifierModule.html","title":"module - VerifierModule","body":"\n                   \n\n\n\n\n    Modules\n    VerifierModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VerifierModule\n\n\n\ncluster_VerifierModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/verifier.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            PresentationsModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport { RegistrarModule } from '../registrar/registrar.module';\nimport { SessionModule } from '../session/session.module';\nimport { HttpModule } from '@nestjs/axios';\nimport { PresentationsModule } from './presentations/presentations.module';\nimport { Oid4vpModule } from './oid4vp/oid4vp.module';\n\n@Module({\n    imports: [\n        CryptoModule,\n        RegistrarModule,\n        SessionModule,\n        HttpModule,\n        PresentationsModule,\n        Oid4vpModule,\n    ],\n})\nexport class VerifierModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfig.html":{"url":"classes/WebHookAuthConfig.html","title":"class - WebHookAuthConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhook authentication.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApiKeyConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:43\n                        \n                    \n\n            \n                \n                    Configuration for API key authentication.\nThis is required if the type is 'apiKey'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['apiKey'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:36\n                        \n                    \n\n            \n                \n                    The type of authentication used for the webhook.\nCurrently, only 'apiKey' is supported.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebhookConfig.html":{"url":"classes/WebhookConfig.html","title":"class - WebhookConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebhookConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhooks used in various services.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                auth\n                            \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebHookAuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:62\n                        \n                    \n\n            \n                \n                    Optional authentication configuration for the webhook.\nIf not provided, no authentication will be used.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:54\n                        \n                    \n\n            \n                \n                    The URL to which the webhook will send notifications.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WellKnownController.html":{"url":"controllers/WellKnownController.html","title":"controller - WellKnownController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WellKnownController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/.well-known\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI well-known endpoints.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authzMetadata\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getJwks\n                            \n                            \n                                    \n                                    \n                                    Async\n                                issuerMetadata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    authzMetadata(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('oauth-authorization-server')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:36\n                        \n                    \n\n\n            \n                \n                        Authorization Server Metadata\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServerResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJwks(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Header('Content-Type', 'application/jwk-set+json')@Get('jwks.json')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:50\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for the authorization server.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        issuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    issuerMetadata(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get OpenID4VCI issuer metadata', description: 'Returns the OpenID4VCI issuer metadata.'})@Get('openid-credential-issuer')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Param } from '@nestjs/common';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { AuthorizeService } from '../issuer/authorize/authorize.service';\nimport { Oid4vciService } from '../issuer/oid4vci/oid4vci.service';\nimport { JwksResponseDto } from './dto/jwks-response.dto';\nimport { Oauth2AuthorizationServerResponse } from './dto/oauth-authorization-server-response.dto';\nimport { CredentialIssuerMetadataDto } from './dto/credential-issuer-metadata.dto';\nimport { ApiOperation } from '@nestjs/swagger';\n\n/**\n * Controller for the OpenID4VCI well-known endpoints.\n */\n@Controller(':tenantId/.well-known')\nexport class WellKnownController {\n    constructor(\n        private readonly oid4vciService: Oid4vciService,\n        private readonly authorizeService: AuthorizeService,\n        private readonly cryptoService: CryptoService,\n    ) {}\n\n    @ApiOperation({\n        summary: 'Get OpenID4VCI issuer metadata',\n        description: 'Returns the OpenID4VCI issuer metadata.',\n    })\n    @Get('openid-credential-issuer')\n    async issuerMetadata(@Param('tenantId') tenantId: string) {\n        return (await this.oid4vciService.issuerMetadata(tenantId))\n            .credentialIssuer as unknown as Promise;\n    }\n\n    /**\n     * Authorization Server Metadata\n     * @returns\n     */\n    @Get('oauth-authorization-server')\n    authzMetadata(\n        @Param('tenantId') tenantId: string,\n    ): Oauth2AuthorizationServerResponse {\n        return this.authorizeService.authzMetadata(\n            tenantId,\n        ) as Oauth2AuthorizationServerResponse;\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for the authorization server.\n     * @returns\n     */\n    @Header('Content-Type', 'application/jwk-set+json')\n    @Get('jwks.json')\n    async getJwks(\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        return this.cryptoService.getJwks(tenantId).then((key) => ({\n            keys: [key],\n        }));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n1.2.3 (2025-07-20)\nBug Fixes\n\nci deploy with version generation (259ab39)\nrelease pipeline (7a6a69c)\nset correct way for deployment (2aa727a)\nuse oidc url instead of keycloak one (2913417)\n\n1.2.2 (2025-07-19)\nBug Fixes\n\nadd tmp logger (6bb4aa9)\nset correct url for vp (295428b)\n\n1.2.1 (2025-07-18)\nBug Fixes\n\nci (8f9498a)\nci (905e17c)\n\n1.2.1 (2025-07-18)\nBug Fixes\n\nci (905e17c)\n\n1.2.0 (2025-07-18)\nBug Fixes\n\nadd codecov (#2) (9104df3)\nadd test for presentation (#6) (e3e5971)\nremove console logs (32fbd8e)\nremove ts file from root (b989c6c)\nupload test results (#3) (f75298f)\nvitest config (beef4d2)\n\nFeatures\n\nadd multi tenant support (#7) (46c9ce6)\n\n1.1.0 (2025-07-11)\nBug Fixes\n\nset correct version (91b5499)\nupdate db env (35f4d1e)\n\nFeatures\n\nadd deployment options (937603a)\n\n1.0.1 (2025-07-10)\nBug Fixes\n\nadd auth to webhook (c3b1b48)\nadd cloudflare worker example (6d31de0)\ngeneral improvements (f7e7505)\nmake key folder static (6a6cdb6)\nwebhook handling (df29d1e)\n\n1.0.0 (2025-07-09)\nBug Fixes\n\nadd semantic release (c805439)\nadjust release pipeline (3ac47ec)\nci (892b30e)\nci (40ccd32)\nci (12395c8)\nci (45f3f7f)\nci (4be0171)\nci (2f07af2)\nci (2a71850)\nci nameing (33ac2c7)\nci, install pnpm (ac4ee24)\nci, remove version (54e8a4e)\ndocker deploy (98303c1)\nmain (d6205da)\npage build (b3abd57)\nsplit jobs (2742ec4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @badgateway/oauth2-client : ^3.2.0\n        \n            @nestjs/axios : ^4.0.0\n        \n            @nestjs/common : ^11.1.3\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.3\n        \n            @nestjs/event-emitter : ^3.0.1\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.3\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/serve-static : ^5.0.3\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/terminus : ^11.0.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @openid4vc/oauth2 : 0.3.0-alpha-20250602121005\n        \n            @openid4vc/openid4vci : 0.3.0-alpha-20250602121005\n        \n            @openid4vc/openid4vp : 0.3.0-alpha-20250602121005\n        \n            @openid4vc/utils : ^0.3.0-alpha-20250602121005\n        \n            @sd-jwt/crypto-nodejs : ^0.14.0\n        \n            @sd-jwt/jwt-status-list : ^0.14.0\n        \n            @sd-jwt/sd-jwt-vc : ^0.14.0\n        \n            @sd-jwt/types : ^0.14.0\n        \n            axios : ^1.10.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            joi : ^17.13.3\n        \n            jose : ^6.0.11\n        \n            jwks-rsa : ^3.2.0\n        \n            mysql2 : ^3.14.1\n        \n            nestjs-pino : ^4.4.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.16.3\n        \n            pino-http : ^10.5.0\n        \n            pino-pretty : ^13.0.0\n        \n            qrcode : ^1.5.4\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            sqlite3 : ^5.1.7\n        \n            typeorm : ^0.3.25\n        \n            uuid : ^11.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ResponseType   (src/.../presentation-request.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/verifier/oid4vp/dto/presentation-request.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ResponseType\n                    \n                \n                    \n                        \n                            Enum for the type of response expected from the presentation request.\n\n                        \n                    \n                        \n                            \n                                 QRCode\n                            \n                        \n                        \n                            \n                                Value : qrcode\n                            \n                        \n                        \n                            \n                                 URI\n                            \n                        \n                        \n                            \n                                Value : uri\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getHeadersFromRequest   (src/.../util.ts)\n                        \n                        \n                            handleRequest   (test/.../index.ts)\n                        \n                        \n                            loggerMiddleware   (test/.../utils.ts)\n                        \n                        \n                            run   (scripts/.../import.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Bootstrap function to initialize the NestJS application.\n\n\n                \n            \n        \n    \n    src/issuer/oid4vci/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getHeadersFromRequest\n                        \n                    \n                \n            \n            \n                \ngetHeadersFromRequest(req: Request)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     globalThis.Headers\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    test/webhook/src/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(request: Request)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    test/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loggerMiddleware\n                        \n                    \n                \n            \n            \n                \nloggerMiddleware(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    scripts/import.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        run\n                        \n                    \n                \n            \n            \n                \nrun()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\nEUDIPLO\nYour Diplomatic Layer for EUDI Wallet Integration\nEUDIPLO is an open-source middleware that bridges your backend and EUDI Wallets\nusing a unified API and standardized protocols.\n\n🧭 Overview\nOrganizations joining the EUDI Wallet ecosystem face a tough choice: patch\ntogether protocol libraries that may not exist for their stack, or rely on\nproprietary solutions that risk vendor lock-in.\nEUDIPLO solves this by providing a lightweight, source-available, protocol\nabstraction layer. It communicates over HTTP and integrates easily with your\nexisting backend stack—so you can focus on your business logic, not\ncryptographic plumbing.\nIt supports all core flows of electronic attribute attestations—issuing,\nrequesting, and even requesting during issuance—and is already\ncompatible with production-grade EUDI Wallets like Animo.\nWhile still in early development, EUDIPLO is built for production: secure key\nmanagement, scalable database support, and clean API boundaries.\n\n🧩 Features\n\n✅ Supports OID4VCI, OID4VP, SD-JWT VC, and OAuth Token Status\nList\n✅ JSON-based credential configuration\n✅ Client credentials authentication for easy service integration\n✅ Runs via Docker with .env config\n✅ HTTP-based integration with any backend\n✅ Secure key management & pluggable storage\n✅ Privacy-friendly: no external calls, no long-term storage\n\n\n🚀 Quick Start\nExample :# Clone and configure\ngit clone https://github.com/cre8/eudiplo.git\ncd eudiplo\ncp .env.example .env\n\n# Configure authentication\necho \"JWT_SECRET=$(openssl rand -base64 32)\" >> .env\necho \"AUTH_CLIENT_SECRET=$(openssl rand -base64 24)\" >> .env\n\n# Start with Docker\ndocker run -p 3000:3000 \\\n  -e PUBLIC_URL=https://example.com \\\n  -e JWT_SECRET=your-32-character-secret \\\n  -e AUTH_CLIENT_SECRET=your-issuer-secret \\\n  -v $(pwd)/config:/app/config \\\n  ghcr.io/cre8/eudiplo:latest\n\n# Get a token and start using the API\ncurl -X POST http://localhost:3000/auth/oauth2/token \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"client_id\": \"root\",\n    \"client_secret\": \"root\"\n  }'📚 API:\nhttps://cre8.github.io/eudiplo/latest/api/📦\nFull setup:\nQuickstart Guide\n\n📚 Documentation\nChoose your documentation version:\n\n🚀 Latest Stable (recommended):\nhttps://cre8.github.io/eudiplo/latest/ -\nDocumentation for the most recent major release\n🔬 Development:\nhttps://cre8.github.io/eudiplo/main/ -\nLatest features from the main branch\n📚 Specific Major Versions: v1,\nv2, etc.\n\nKey sections:\n\nArchitecture\nSupported Protocols\nAPI Reference\nCode Documentation\n\n\n🤝 Contributing\nWe welcome PRs from wallet developers, institutions, and contributors interested\nin advancing the EUDI Wallet ecosystem.\nSee CONTRIBUTING.md for guidelines.\n\n📝 License\nLicensed under the Apache 2.0 License\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nExample :                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\n\n\n   END OF TERMS AND CONDITIONS\n   APPENDIX: How to apply the Apache License to your work.\nExample :  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.   Copyright [2025] [Mirko Mollik]\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\nExample :   http://www.apache.org/licenses/LICENSE-2.0   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IssuerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeyModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        Oid4vpModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PresentationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RegistrarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ResolverModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StatusListModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VerifierModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_exports\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_imports\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nCryptoService \n\nCryptoService \n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\n\n\nEncryptionService \n\nEncryptionService \n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\nOid4vpModule -->\n\nRegistrarModule->Oid4vpModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nClientService\n\nClientService\n\nAuthModule -->\n\nClientService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\nOid4vpModule -->\n\nPresentationsModule->Oid4vpModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nResolverModule\n\nResolverModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nResolverService \n\nResolverService \n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        15 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    12 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    21 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    24 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    30 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : Apache 2.0\n        \n            Author : Mirko Mollik \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AccessCertificate   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerAccessCertificatesData   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerAccessCertificatesResponse   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerAccessCertificatesResponses   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerDeleteData   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerDeleteResponses   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerFindOneData   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerFindOneParsedData   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerFindOneParsedResponse   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerFindOneParsedResponses   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerFindOneResponses   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerRegisterData   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerRegisterResponse   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerRegisterResponses   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateRegistration   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateRegistrationResponse   (src/.../types.gen.ts)\n                        \n                        \n                            ArraySeparatorStyle   (src/.../utils.ts)\n                        \n                        \n                            ArraySeparatorStyle   (src/.../pathSerializer.ts)\n                        \n                        \n                            ArrayStyle   (src/.../utils.ts)\n                        \n                        \n                            ArrayStyle   (src/.../pathSerializer.ts)\n                        \n                        \n                            AuthConfig   (src/.../webhook.dto.ts)\n                        \n                        \n                            AuthToken   (src/.../auth.ts)\n                        \n                        \n                            BodySerializer   (src/.../bodySerializer.ts)\n                        \n                        \n                            BuildUrlFn   (src/.../types.ts)\n                        \n                        \n                            certificateType   (src/.../crypto.service.ts)\n                        \n                        \n                            Client   (src/.../types.ts)\n                        \n                        \n                            ClientOptions   (src/.../types.gen.ts)\n                        \n                        \n                            Contact   (src/.../types.gen.ts)\n                        \n                        \n                            CreateClientConfig   (src/.../client.gen.ts)\n                        \n                        \n                            CreateClientConfig   (src/.../types.ts)\n                        \n                        \n                            Credential   (src/.../types.gen.ts)\n                        \n                        \n                            CryptoControllerOwnCertData   (src/.../types.gen.ts)\n                        \n                        \n                            CryptoControllerOwnCertParsedData   (src/.../types.gen.ts)\n                        \n                        \n                            CryptoControllerOwnCertParsedResponse   (src/.../types.gen.ts)\n                        \n                        \n                            CryptoControllerOwnCertParsedResponses   (src/.../types.gen.ts)\n                        \n                        \n                            CryptoControllerOwnCertResponse   (src/.../types.gen.ts)\n                        \n                        \n                            CryptoControllerOwnCertResponses   (src/.../types.gen.ts)\n                        \n                        \n                            CryptoType   (src/.../crypto.service.ts)\n                        \n                        \n                            DecodedJwt   (src/.../types.gen.ts)\n                        \n                        \n                            ErrInterceptor   (src/.../utils.ts)\n                        \n                        \n                            Field   (src/.../params.ts)\n                        \n                        \n                            FieldsConfig   (src/.../params.ts)\n                        \n                        \n                            HealthControllerCheckData   (src/.../types.gen.ts)\n                        \n                        \n                            HealthControllerCheckError   (src/.../types.gen.ts)\n                        \n                        \n                            HealthControllerCheckErrors   (src/.../types.gen.ts)\n                        \n                        \n                            HealthControllerCheckResponse   (src/.../types.gen.ts)\n                        \n                        \n                            HealthControllerCheckResponses   (src/.../types.gen.ts)\n                        \n                        \n                            IntendedUse   (src/.../types.gen.ts)\n                        \n                        \n                            KeyMap   (src/.../params.ts)\n                        \n                        \n                            KeyPair   (src/.../crypto-implementation.ts)\n                        \n                        \n                            LoginReponse   (scripts/.../import.ts)\n                        \n                        \n                            MatrixStyle   (src/.../utils.ts)\n                        \n                        \n                            MatrixStyle   (src/.../pathSerializer.ts)\n                        \n                        \n                            MethodFn   (src/.../types.ts)\n                        \n                        \n                            MultiLang   (src/.../types.gen.ts)\n                        \n                        \n                            Notification   (src/.../session.entity.ts)\n                        \n                        \n                            ObjectSeparatorStyle   (src/.../pathSerializer.ts)\n                        \n                        \n                            ObjectStyle   (src/.../pathSerializer.ts)\n                        \n                        \n                            Oid4VpControllerGetValidPidData   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerGetValidPidResponses   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerGetValidRequestData   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerGetValidRequestResponse   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerGetValidRequestResponses   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerGetValidRequestWithQueryData   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerGetValidRequestWithQueryResponse   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerGetValidRequestWithQueryResponses   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerResponseData   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerResponseResponses   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerSuccessData   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerSuccessResponse   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerSuccessResponses   (src/.../types.gen.ts)\n                        \n                        \n                            OmitKeys   (src/.../types.ts)\n                        \n                        \n                            OmitTypeClass   (src/.../types.gen.ts)\n                        \n                        \n                            Options   (src/.../sdk.gen.ts)\n                        \n                        \n                            Options   (src/.../types.ts)\n                        \n                        \n                            OptionsLegacyParser   (src/.../types.ts)\n                        \n                        \n                            QuerySerializer   (src/.../bodySerializer.ts)\n                        \n                        \n                            RegistrationCertificate   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerAllData   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerAllResponse   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerAllResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerDeleteData   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerDeleteResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneData   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneDecodedData   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneDecodedResponse   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneDecodedResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneError   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneErrors   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneResponse   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerRegisterData   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerRegisterResponse   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerRegisterResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateCreation   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingParty   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerFindAllData   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerFindAllResponse   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerFindAllResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerRegisterData   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerRegisterResponse   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerRegisterResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerRemoveData   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerRemoveResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyRegistration   (src/.../types.gen.ts)\n                        \n                        \n                            ReqInit   (src/.../client.ts)\n                        \n                        \n                            ReqInterceptor   (src/.../utils.ts)\n                        \n                        \n                            RequestFn   (src/.../types.ts)\n                        \n                        \n                            RequestResult   (src/.../types.ts)\n                        \n                        \n                            ResInterceptor   (src/.../utils.ts)\n                        \n                        \n                            ResponseStyle   (src/.../types.ts)\n                        \n                        \n                            Signer   (src/.../crypto-implementation.ts)\n                        \n                        \n                            Slot   (src/.../params.ts)\n                        \n                        \n                            StatusListControllerCrlFileData   (src/.../types.gen.ts)\n                        \n                        \n                            StatusListControllerCrlFileResponse   (src/.../types.gen.ts)\n                        \n                        \n                            StatusListControllerCrlFileResponses   (src/.../types.gen.ts)\n                        \n                        \n                            StatusListControllerGetListData   (src/.../types.gen.ts)\n                        \n                        \n                            StatusListControllerGetListResponse   (src/.../types.gen.ts)\n                        \n                        \n                            StatusListControllerGetListResponses   (src/.../types.gen.ts)\n                        \n                        \n                            Verifier   (src/.../crypto-implementation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/registrar/generated/types.gen.ts\n    \n    \n        \n            \n                \n                    \n                    AccessCertificate\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerAccessCertificatesData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerAccessCertificatesResponse\n                \n            \n            \n                \n                            AccessCertificateControllerAccessCertificatesResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerAccessCertificatesResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerDeleteData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerDeleteResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerFindOneData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerFindOneParsedData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerFindOneParsedResponse\n                \n            \n            \n                \n                            AccessCertificateControllerFindOneParsedResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerFindOneParsedResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerFindOneResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerRegisterData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerRegisterResponse\n                \n            \n            \n                \n                            AccessCertificateControllerRegisterResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerRegisterResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateRegistration\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateRegistrationResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ClientOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Contact\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Credential\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CryptoControllerOwnCertData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CryptoControllerOwnCertParsedData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CryptoControllerOwnCertParsedResponse\n                \n            \n            \n                \n                            CryptoControllerOwnCertParsedResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CryptoControllerOwnCertParsedResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CryptoControllerOwnCertResponse\n                \n            \n            \n                \n                            CryptoControllerOwnCertResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CryptoControllerOwnCertResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DecodedJwt\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HealthControllerCheckData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HealthControllerCheckError\n                \n            \n            \n                \n                            HealthControllerCheckErrors\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HealthControllerCheckErrors\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HealthControllerCheckResponse\n                \n            \n            \n                \n                            HealthControllerCheckResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HealthControllerCheckResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IntendedUse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MultiLang\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidPidData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidPidResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidRequestData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidRequestResponse\n                \n            \n            \n                \n                            Oid4VpControllerGetValidRequestResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidRequestResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidRequestWithQueryData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidRequestWithQueryResponse\n                \n            \n            \n                \n                            Oid4VpControllerGetValidRequestWithQueryResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidRequestWithQueryResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerResponseData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerResponseResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerSuccessData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerSuccessResponse\n                \n            \n            \n                \n                            Oid4VpControllerSuccessResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerSuccessResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OmitTypeClass\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificate\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerAllData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerAllResponse\n                \n            \n            \n                \n                            RegistrationCertificateControllerAllResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerAllResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerDeleteData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerDeleteResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneDecodedData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneDecodedResponse\n                \n            \n            \n                \n                            RegistrationCertificateControllerFindOneDecodedResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneDecodedResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneError\n                \n            \n            \n                \n                            RegistrationCertificateControllerFindOneErrors\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneErrors\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneResponse\n                \n            \n            \n                \n                            RegistrationCertificateControllerFindOneResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerRegisterData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerRegisterResponse\n                \n            \n            \n                \n                            RegistrationCertificateControllerRegisterResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerRegisterResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateCreation\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingParty\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerFindAllData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerFindAllResponse\n                \n            \n            \n                \n                            RelyingPartyControllerFindAllResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerFindAllResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerRegisterData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerRegisterResponse\n                \n            \n            \n                \n                            RelyingPartyControllerRegisterResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerRegisterResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerRemoveData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerRemoveResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyRegistration\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StatusListControllerCrlFileData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StatusListControllerCrlFileResponse\n                \n            \n            \n                \n                            StatusListControllerCrlFileResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StatusListControllerCrlFileResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StatusListControllerGetListData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StatusListControllerGetListResponse\n                \n            \n            \n                \n                            StatusListControllerGetListResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StatusListControllerGetListResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/registrar/generated/client/utils.ts\n    \n    \n        \n            \n                \n                    \n                    ArraySeparatorStyle\n                \n            \n            \n                \n                        ArrayStyle | MatrixStyle\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ArrayStyle\n                \n            \n            \n                \n                        \"form\" | \"spaceDelimited\" | \"pipeDelimited\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ErrInterceptor\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MatrixStyle\n                \n            \n            \n                \n                        \"label\" | \"matrix\" | \"simple\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ReqInterceptor\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResInterceptor\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/registrar/generated/core/pathSerializer.ts\n    \n    \n        \n            \n                \n                    \n                    ArraySeparatorStyle\n                \n            \n            \n                \n                        ArrayStyle | MatrixStyle\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ArrayStyle\n                \n            \n            \n                \n                        \"form\" | \"spaceDelimited\" | \"pipeDelimited\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MatrixStyle\n                \n            \n            \n                \n                        \"label\" | \"matrix\" | \"simple\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ObjectSeparatorStyle\n                \n            \n            \n                \n                        ObjectStyle | MatrixStyle\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ObjectStyle\n                \n            \n            \n                \n                        \"form\" | \"deepObject\"\n\n                \n            \n        \n    \n    src/utils/webhook.dto.ts\n    \n    \n        \n            \n                \n                    \n                    AuthConfig\n                \n            \n            \n                \n                    Enum for the type of authentication used in webhooks.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/registrar/generated/core/auth.ts\n    \n    \n        \n            \n                \n                    \n                    AuthToken\n                \n            \n            \n                \n                        string | undefined\n\n                \n            \n        \n    \n    src/registrar/generated/core/bodySerializer.ts\n    \n    \n        \n            \n                \n                    \n                    BodySerializer\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QuerySerializer\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/registrar/generated/client/types.ts\n    \n    \n        \n            \n                \n                    \n                    BuildUrlFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Client\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CreateClientConfig\n                \n            \n            \n                \n                    The createClientConfig() function will be called on client initialization\nand the returned object will become the client's initial configuration.\nYou may want to initialize your client this way instead of calling\nsetConfig(). This is useful for example if you're using Next.js\nto ensure your client always has the correct values.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MethodFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OmitKeys\n                \n            \n            \n                \n                        Pick>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Options\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OptionsLegacyParser\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestResult\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseStyle\n                \n            \n            \n                \n                        \"data\" | \"fields\"\n\n                \n            \n        \n    \n    src/crypto/crypto.service.ts\n    \n    \n        \n            \n                \n                    \n                    certificateType\n                \n            \n            \n                \n                        \"access\" | \"signing\"\n\n                \n            \n        \n    \n    src/registrar/generated/client.gen.ts\n    \n    \n        \n            \n                \n                    \n                    CreateClientConfig\n                \n            \n            \n                \n                    The createClientConfig() function will be called on client initialization\nand the returned object will become the client's initial configuration.\nYou may want to initialize your client this way instead of calling\nsetConfig(). This is useful for example if you're using Next.js\nto ensure your client always has the correct values.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/crypto/key/crypto/crypto.service.ts\n    \n    \n        \n            \n                \n                    \n                    CryptoType\n                \n            \n            \n                \n                        \"ES256\" | \"Ed25519\"\n\n                \n            \n        \n    \n    src/registrar/generated/core/params.ts\n    \n    \n        \n            \n                \n                    \n                    Field\n                \n            \n            \n                \n                        literal type | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FieldsConfig\n                \n            \n            \n                \n                            ReadonlyArray\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    KeyMap\n                \n            \n            \n                \n                        Map\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Slot\n                \n            \n            \n                \n                        \"body\" | \"headers\" | \"path\" | \"query\"\n\n                \n            \n        \n    \n    src/crypto/key/crypto/crypto-implementation.ts\n    \n    \n        \n            \n                \n                    \n                    KeyPair\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Signer\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Verifier\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    scripts/import.ts\n    \n    \n        \n            \n                \n                    \n                    LoginReponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/session/entities/session.entity.ts\n    \n    \n        \n            \n                \n                    \n                    Notification\n                \n            \n            \n                \n                    Represents a session entity for managing user sessions in the application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/registrar/generated/sdk.gen.ts\n    \n    \n        \n            \n                \n                    \n                    Options\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/registrar/generated/client/client.ts\n    \n    \n        \n            \n                \n                    \n                    ReqInit\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
