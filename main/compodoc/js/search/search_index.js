var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AccessCertificateResponse.html",[0,0.574,1,3.559]],["body/interfaces/AccessCertificateResponse.html",[0,0.314,1,3.877,2,0.722,3,0.053,4,0.043,5,0.097,6,2.135,7,0.505,8,3.407,9,5.054,10,5.104,11,0.886,12,0.115,13,0.474,14,4.425,15,1.992,16,0.543,17,5.616,18,0.6,19,0.218,20,0.009,21,1.626,22,0.951,23,3.375,24,1.843,25,2.705,26,1.975,27,2.156,28,3.108,29,0.49,30,0.825,31,3.375,32,2.892,33,0.427,34,2.199,35,0.84,36,4.852,37,1.948,38,2.95,39,2.135,40,3.407,41,3.407,42,3.407,43,3.407,44,3.407,45,3.407,46,1.948,47,2.457,48,1.195,49,2.705,50,2.135,51,1.155,52,3.607,53,2.135,54,1.391,55,1.453,56,1.335,57,1.696,58,5.019,59,6.077,60,2.441,61,2.299,62,1.696,63,1.603,64,1.335,65,1.391,66,1.453,67,1.603,68,1.391,69,3.19,70,1.523,71,1.453,72,2.135,73,1.808,74,5.65,75,5.408,76,2.135,77,3.407,78,4.708,79,0.053,80,0.032,81,1.155,82,2.219,83,3.407,84,1.453,85,1.603,86,2.495,87,1.118,88,1.195,89,1.959,90,2.135,91,1.284,92,2.135,93,1.046,94,2.216,95,2.557,96,1.948,97,1.932,98,0.862,99,1.948,100,1.808,101,1.696,102,1.808,103,1.808,104,1.391,105,1.696,106,1.195,107,1.915,108,3.407,109,1.288,110,1.529,111,2.135,112,2.135,113,2.318,114,2.135,115,2.705,116,2.135,117,2.135,118,2.127,119,1.195,120,2.135,121,2.135,122,2.135,123,2.135,124,2.135,125,5.929,126,2.135,127,1.391,128,2.135,129,0.935,130,3.407,131,1.808,132,1.413,133,3.407,134,2.557,135,1.378,136,1.021,137,1.155,138,1.603,139,2.135,140,3.407,141,1.579,142,3.031,143,1.391,144,2.135,145,2.135,146,2.16,147,2.371,148,3.407,149,1.238,150,2.135,151,2.502,152,1.808,153,1.603,154,3.407,155,5.65,156,2.135,157,2.135,158,2.135,159,1.083,160,1.019,161,1.019,162,2.135,163,1.195,164,3.19,165,2.135,166,2.135,167,2.135,168,1.975,169,2.135,170,2.135,171,1.238,172,2.135,173,1.948,174,1.948,175,1.284,176,1.948,177,1.948,178,1.948,179,2.135,180,2.135,181,2.135,182,2.135,183,1.453,184,2.135,185,4.783,186,3.375,187,4.251,188,2.769,189,2.135,190,0.974,191,1.186,192,1.808,193,1.549,194,2.705,195,0.625,196,2.135,197,2.135,198,3.407,199,3.407,200,1.808,201,2.884,202,1.05,203,3.19,204,2.892,205,2.135,206,1.019,207,2.135,208,2.135,209,2.135,210,2.135,211,2.867,212,4.783,213,3.033,214,3.108,215,2.135,216,3.375,217,4.251,218,3.407,219,2.185,220,5.301,221,3.877,222,5.65,223,3.108,224,2.135,225,0.962,226,1.948,227,2.135,228,2.135,229,2.13,230,2.135,231,2.705,232,1.808,233,1.808,234,1.808,235,1.603,236,1.808,237,2.135,238,1.589,239,3.407,240,1.335,241,2.557,242,2.135,243,2.135,244,4.251,245,2.135,246,1.195,247,2.029,248,2.884,249,2.135,250,1.306,251,2.135,252,1.948,253,2.557,254,2.135,255,2.135,256,1.391,257,1.696,258,1.195,259,0.005,260,1.948,261,2.135,262,2.135,263,1.915,264,2.135,265,2.135,266,2.135,267,1.523,268,2.135,269,1.948,270,1.019,271,2.135,272,2.135,273,3.108,274,1.948,275,2.135,276,1.523,277,2.135,278,2.135,279,1.808,280,2.135,281,2.135,282,1.696,283,2.135,284,3.407,285,2.13,286,3.407,287,2.135,288,1.523,289,1.195,290,1.808,291,3.407,292,3.407,293,2.135,294,2.13,295,1.696,296,2.135,297,1.453,298,1.453,299,1.948,300,2.135,301,2.135,302,0.004]],["title/classes/ApiKeyConfig.html",[80,0.059,303,3.303]],["body/classes/ApiKeyConfig.html",[3,0.114,4,0.091,5,0.091,7,1.075,12,0.246,13,0.822,16,0.724,18,0.602,19,0.398,20,0.009,22,2.096,29,0.422,60,1.576,79,0.174,80,0.109,87,3.93,97,2.687,129,1.992,191,1.239,202,3.415,259,0.007,302,0.007,303,5.878,304,1.789,305,3.849,306,5.179,307,5.878,308,5.983,309,2.106,310,1.857,311,3.74,312,0.822,313,5.154,314,2.804,315,4.724,316,3.415,317,5.154,318,3.849,319,3.849,320,3.945,321,3.847,322,2.236,323,2.17,324,3.413,325,4.148,326,3.413,327,4.999,328,4.677,329,3.521,330,5.553,331,4.148,332,2.544,333,4.148,334,2.843,335,3.611,336,3.611,337,2.636,338,2.152,339,3.094,340,3.413,341,2.636]],["title/controllers/AppController.html",[342,1.576,343,3.559]],["body/controllers/AppController.html",[3,0.146,4,0.117,5,0.117,12,0.316,18,0.577,20,0.009,29,0.493,33,1.169,79,0.146,80,0.089,109,1.058,135,1.52,259,0.008,302,0.008,310,1.838,312,0.814,342,2.788,343,6.296,344,2.561,345,6.626,346,1.881,347,8.599,348,6.626,349,7.823,350,3.162,351,5.333,352,4.642,353,6.626,354,4.642,355,3.978,356,5.846]],["title/modules/AppModule.html",[357,1.387,358,3.303]],["body/modules/AppModule.html",[3,0.144,4,0.07,5,0.07,15,1.486,19,0.254,20,0.009,21,2.365,29,0.562,33,0.702,34,2.911,35,1.381,61,1.899,64,2.195,79,0.088,80,0.053,109,0.636,110,1.065,136,1.722,137,1.899,151,1.761,161,1.675,219,1.581,246,3.214,250,1.346,259,0.006,270,2.365,302,0.006,338,1.279,343,5.239,344,2.171,357,2.041,358,6.737,359,1.726,360,1.899,361,2.035,362,2.035,363,1.899,364,2.773,365,1.964,366,3.511,367,3.511,368,5.424,369,4.108,370,5.789,371,5.424,372,5.424,373,5.226,374,4.87,375,4.647,376,5.424,377,2.873,378,2.035,379,1.899,380,3.979,381,5.239,382,3.375,383,4.862,384,3.372,385,2.503,386,3.202,387,3.511,388,3.979,389,4.956,390,3.979,391,3.979,392,4.956,393,3.202,394,3.979,395,3.511,396,2.788,397,3.979,398,4.956,399,3.979,400,5.617,401,3.979,402,3.979,403,4.956,404,2.972,405,3.979,406,3.202,407,3.979,408,3.979,409,4.956,410,3.979,411,3.979,412,3.979,413,3.979,414,3.979,415,2.788,416,4.195,417,3.979,418,3.979,419,3.979,420,3.908,421,3.979,422,3.979,423,3.979,424,3.979,425,3.202,426,3.979,427,5.617,428,5.617,429,3.979,430,1.187,431,5.617,432,4.956,433,3.979,434,3.979,435,3.979,436,4.195,437,4.52,438,3.979,439,3.979,440,3.979,441,3.979,442,1.852,443,3.979,444,3.511,445,1.899,446,3.979,447,3.979,448,3.979,449,3.979,450,3.979,451,3.979,452,3.979,453,3.979,454,3.979,455,3.979,456,3.228,457,5.617,458,2.002,459,5.617,460,3.979,461,5.617,462,2.503,463,3.979,464,2.635,465,3.979,466,2.788,467,3.979,468,2.972,469,3.979,470,1.496,471,1.838,472,4.956,473,3.979,474,1.899,475,3.979,476,3.511,477,3.979,478,3.979,479,3.979,480,3.979,481,3.511,482,5.617,483,3.979,484,2.635,485,3.979,486,3.979]],["title/interfaces/Auth.html",[0,0.574,129,1.709]],["body/interfaces/Auth.html",[0,0.691,2,1.591,3,0.118,4,0.094,5,0.094,11,1.569,12,0.254,13,0.84,16,1.185,18,0.588,19,0.397,20,0.009,79,0.167,88,2.631,89,2.84,107,2.719,109,1.273,110,1.297,129,3.357,141,2.18,146,1.713,147,1.713,190,1.725,191,1.561,206,3.471,259,0.007,302,0.007,309,1.766,314,3.056,323,2.88,324,5.457,328,4.753,339,4.106,430,2.378,442,1.757,487,4.703,488,7.97,489,5.642,490,5.505,491,5.109,492,7.272,493,5.002,494,5.642,495,3.981,496,5.293,497,5.33,498,6.841,499,5.33]],["title/controllers/AuthController.html",[342,1.576,500,3.559]],["body/controllers/AuthController.html",[3,0.089,4,0.071,5,0.071,7,1.485,11,1.633,12,0.193,15,1.501,16,0.567,18,0.419,19,0.339,20,0.009,21,2.389,24,1.927,29,0.514,33,0.712,38,3.137,79,0.089,80,0.054,82,4.31,84,3.406,85,3.757,86,1.919,89,2.847,93,1.094,94,1.871,107,1.604,109,0.645,110,1.515,113,4.502,115,5.254,118,2.081,129,2.898,132,1.477,135,1.302,146,2.109,147,1.298,159,1.806,160,3.609,190,1.431,191,0.747,193,2.665,195,1.465,238,2.473,259,0.006,302,0.006,306,2.423,309,1.043,310,1.12,312,0.496,314,2.672,316,2.462,323,3.158,324,3.757,332,1.993,341,2.065,342,1.439,344,1.56,346,1.365,350,1.927,351,3.249,462,4.478,470,2.924,492,6.28,500,4.567,501,4.037,502,1.993,503,6.562,504,4.037,505,4.037,506,5.281,507,3.976,508,5.675,509,4.567,510,5.281,511,4.567,512,5.281,513,4.037,514,3.619,515,5.007,516,5.675,517,1.068,518,2.065,519,7.5,520,2.673,521,5.281,522,4.238,523,4.345,524,3.562,525,4.345,526,3.562,527,3.562,528,4.037,529,4.037,530,3.13,531,3.015,532,4.037,533,2.32,534,4.037,535,3.015,536,4.037,537,4.037,538,7.118,539,3.015,540,4.037,541,2.673,542,4.567,543,3.249,544,2.539,545,4.567,546,4.037,547,5.007,548,4.238,549,5.675,550,4.037,551,2.54,552,3.406,553,2.54,554,4.037,555,3.015,556,3.57,557,2.673,558,5.675,559,4.037,560,4.037,561,5.675,562,4.037,563,4.037,564,3.015,565,4.037,566,3.406,567,4.037,568,2.227,569,4.037,570,4.037,571,4.037,572,4.037,573,4.037,574,4.037,575,1.752,576,3.015,577,4.037,578,4.037,579,3.249,580,4.037,581,2.673,582,3.015,583,3.562,584,3.562]],["title/modules/AuthModule.html",[357,1.387,368,3.099]],["body/modules/AuthModule.html",[3,0.114,4,0.092,5,0.092,20,0.009,29,0.55,33,0.914,35,1.799,79,0.148,80,0.07,84,3.112,110,0.983,132,1.897,138,5.642,259,0.007,302,0.007,344,2.596,357,2.337,359,2.249,360,2.474,361,2.651,362,2.651,363,2.474,364,3.68,365,3.68,368,6.333,377,3.436,378,2.651,379,2.474,382,2.474,383,5.018,384,4.033,409,4.574,500,6,523,5.907,524,4.574,525,5.543,526,4.574,585,4.574,586,4.574,587,4.574,588,5.612,589,6.663,590,5.184,591,7.455,592,3.872,593,5.184,594,5.184,595,5.184,596,8.638,597,5.184,598,8.522,599,8.171,600,5.184,601,5.184,602,4.574,603,5.184,604,5.184,605,5.184,606,4.172,607,5.184]],["title/interfaces/AuthResponse.html",[0,0.574,608,3.303]],["body/interfaces/AuthResponse.html",[0,0.807,2,1.858,3,0.137,4,0.11,5,0.11,7,1.299,11,1.729,12,0.297,13,0.925,18,0.636,19,0.381,20,0.009,22,1.856,79,0.137,89,2.888,225,3.221,259,0.008,302,0.008,309,1.607,491,5.628,496,5.28,608,6.053,609,6.225,610,3.737,611,4.361,612,5.926,613,6.778,614,7.536,615,7.536,616,4.524,617,5.366,618,3.999,619,3.854,620,6.225,621,4.649]],["title/classes/AuthorizationResponse.html",[80,0.059,622,3.303]],["body/classes/AuthorizationResponse.html",[3,0.142,4,0.114,5,0.114,7,1.341,12,0.306,13,0.943,18,0.628,19,0.291,20,0.009,29,0.405,79,0.142,80,0.103,89,2.737,195,2.305,259,0.008,302,0.008,304,2.23,310,1.783,311,3.676,312,0.789,322,2.788,323,3.584,610,3.857,611,5.381,617,5.085,618,4.517,622,5.736,623,7.681,624,5.669,625,5.736]],["title/controllers/AuthorizeController.html",[342,1.576,626,3.559]],["body/controllers/AuthorizeController.html",[3,0.088,4,0.07,5,0.07,7,1.169,9,3.364,11,1.96,12,0.189,16,0.992,18,0.63,19,0.36,20,0.009,29,0.511,33,0.699,51,1.893,79,0.088,80,0.053,86,1.896,89,2.942,91,3.747,93,1.074,94,2.677,109,1.128,110,0.752,135,1.823,146,2.654,147,1.275,151,2.751,190,1.781,191,1.307,193,2.834,195,2.053,202,2.431,206,2.36,246,3.924,247,1.67,259,0.006,270,3.598,299,3.192,302,0.006,310,1.959,312,0.867,323,3.653,342,2.655,344,1.533,346,1.348,350,1.893,458,1.413,502,1.958,514,4.616,517,1.868,518,2.028,522,4.185,533,2.279,548,2.962,626,4.51,627,3.966,628,3.966,629,4.944,630,4.51,631,5.604,632,5.23,633,7.062,634,7.45,635,3.499,636,5.604,637,5.604,638,3.966,639,4.944,640,3.966,641,3.966,642,4.239,643,5.274,644,1.491,645,3.966,646,3.966,647,5.683,648,3.966,649,3.966,650,3.966,651,5.604,652,3.966,653,3.71,654,4.944,655,3.22,656,2.779,657,2.626,658,2.188,659,3.901,660,3.966,661,3.192,662,3.585,663,2.779,664,3.192,665,3.966,666,3.966,667,1.958,668,4.948,669,3.966,670,3.966,671,4.443,672,3.966,673,3.192,674,3.499,675,2.962,676,2.962,677,3.966,678,3.499,679,3.966,680,2.962,681,3.966,682,3.966]],["title/classes/AuthorizeQueries.html",[80,0.059,636,2.928]],["body/classes/AuthorizeQueries.html",[3,0.113,4,0.09,5,0.09,12,0.243,13,0.817,16,1.29,18,0.677,19,0.4,20,0.009,29,0.321,79,0.113,80,0.089,259,0.007,302,0.007,304,1.771,310,2.454,311,3.982,312,1.086,321,5.115,322,2.214,541,4.899,636,4.404,671,4.655,683,8.901,684,3.21,685,5.526,686,7.399,687,7.399,688,7.399,689,5.184,690,7.399,691,7.399,692,4.655,693,7.399,694,8.846,695,4.502,696,4.502,697,5.103,698,4.502,699,5.103,700,4.502,701,5.103,702,4.502,703,5.103,704,4.502,705,5.103]],["title/injectables/AuthorizeService.html",[30,0.945,659,2.655]],["body/injectables/AuthorizeService.html",[0,0.368,3,0.063,4,0.05,5,0.05,11,1.734,12,0.135,16,1.062,18,0.656,19,0.365,20,0.009,21,1.193,29,0.502,30,0.934,33,0.5,34,2.505,35,0.984,38,1.037,47,2.917,48,1.399,51,1.353,60,0.867,79,0.096,80,0.038,86,2.492,93,1.184,98,1.557,109,1.093,110,1.619,113,1.701,118,1.899,119,1.399,129,2.062,135,1.69,136,1.156,146,2.712,147,2.596,151,2.793,159,1.268,161,2.246,164,1.877,190,1.102,191,1.399,193,2.43,195,2.059,213,1.563,236,2.117,238,2.136,246,2.634,247,1.84,250,0.959,256,1.629,259,0.004,270,3.182,302,0.004,309,0.732,312,0.928,329,3.063,334,2.411,337,3.067,338,1.715,341,2.728,346,1.051,458,2.841,468,3.264,470,1.643,517,1.999,555,2.117,568,1.563,581,1.877,612,2.894,619,3.067,632,4.293,635,2.501,636,5.111,642,1.701,643,3.984,644,1.643,655,3.933,656,3.738,657,1.877,658,1.563,659,2.624,661,2.281,662,3.935,663,1.986,671,3.356,685,4.478,689,4.539,706,1.095,707,2.501,708,3.856,709,4.371,710,4.707,711,4.707,712,4.707,713,4.371,714,4.707,715,1.629,716,4.282,717,4.099,718,2.834,719,2.834,720,3.518,721,2.834,722,5.213,723,3.856,724,2.834,725,5.716,726,2.834,727,2.834,728,2.281,729,2.834,730,2.834,731,2.834,732,2.834,733,3.856,734,2.834,735,2.834,736,2.834,737,3.6,738,3.518,739,4.293,740,2.96,741,2.501,742,1.877,743,1.986,744,2.501,745,2.501,746,2.117,747,1.701,748,3.518,749,2.501,750,3.856,751,3.518,752,2.501,753,3.856,754,1.783,755,4.707,756,2.501,757,2.387,758,2.281,759,2.501,760,2.281,761,2.501,762,2.281,763,2.501,764,2.501,765,2.281,766,2.235,767,1.986,768,2.281,769,2.281,770,2.501,771,2.281,772,2.501,773,2.281,774,2.501,775,2.501,776,2.501,777,3.856,778,2.501,779,2.281,780,2.501,781,2.501,782,3.632,783,2.501,784,2.501,785,2.501,786,2.501,787,2.501,788,3.856,789,3.062,790,2.501,791,4.826,792,2.501,793,2.501,794,2.501,795,4.293,796,2.501,797,2.501,798,2.501,799,2.501,800,2.501,801,2.501,802,2.501,803,1.23,804,2.501,805,3.518,806,2.501,807,2.501,808,1.629,809,1.504,810,2.281,811,1.986,812,2.501,813,2.281,814,2.281,815,2.501,816,2.501,817,1.629,818,2.894,819,2.281,820,2.501,821,3.856,822,2.501,823,2.501,824,2.501,825,2.501,826,2.501,827,1.193,828,1.986,829,1.986,830,3.856,831,2.501,832,2.894,833,1.986,834,3.856,835,2.501,836,2.501,837,1.701,838,2.501,839,2.501,840,2.501,841,2.501,842,2.501,843,2.501,844,2.501,845,2.501,846,2.501,847,2.501,848,2.501]],["title/interfaces/Client.html",[0,0.574,38,1.618]],["body/interfaces/Client.html",[0,0.798,2,1.355,3,0.1,4,0.08,5,0.08,12,0.217,13,0.756,15,2.249,18,0.634,19,0.279,20,0.009,29,0.508,30,1.315,31,4.892,33,0.801,34,2.555,35,1.577,38,3.254,54,2.61,56,3.395,61,2.937,64,2.505,65,2.61,66,2.727,68,2.61,79,0.136,80,0.061,81,2.168,82,2.61,86,2.646,93,1.23,94,1.498,97,1.979,106,2.242,109,1.25,110,1.42,113,3.695,115,4.313,132,2.253,135,1.042,136,1.201,149,2.323,160,2.592,161,1.913,191,0.841,202,1.971,216,3.182,219,1.805,259,0.006,263,3.278,282,3.182,285,2.505,294,2.505,302,0.006,306,2.727,336,3.182,338,1.46,352,3.182,420,2.727,430,1.355,462,2.858,484,3.007,525,3.007,566,4.696,606,3.655,653,3.007,817,2.61,833,3.182,849,4.008,850,4.954,851,3.392,852,3.007,853,4.954,854,7.116,855,3.655,856,4.008,857,4.008,858,4.008,859,4.008,860,4.008,861,4.008,862,3.655,863,4.008,864,4.008,865,4.008,866,4.008,867,6.16,868,4.008,869,4.008,870,4.008,871,4.008,872,3.655,873,3.007,874,4.008,875,5.431,876,5.431,877,4.008,878,4.008,879,4.008,880,4.008,881,2.727,882,4.008,883,4.008,884,4.008,885,4.008,886,4.008,887,3.392,888,3.392,889,3.392,890,4.008,891,3.655,892,4.008,893,4.008,894,5.431,895,4.008,896,2.032,897,5.431,898,3.655,899,4.008,900,4.008]],["title/interfaces/Client-1.html",[0,0.479,38,1.35,901,1.704]],["body/interfaces/Client-1.html",[0,0.745,2,1.225,3,0.091,4,0.073,5,0.073,11,1.972,12,0.196,13,0.705,19,0.397,20,0.009,29,0.362,38,2.101,60,2.308,79,0.127,87,1.896,89,2.046,119,2.027,129,3.102,135,1.317,141,3.484,161,2.788,163,2.835,168,2.1,190,1.808,193,1.32,195,1.71,202,2.492,206,1.729,225,3.19,229,3.168,259,0.006,263,1.632,302,0.006,309,1.06,312,0.504,315,2.465,338,1.846,354,4.023,430,1.714,445,3.601,470,2.49,471,1.896,491,3.067,493,2.719,494,4.946,507,2.877,517,1.086,518,3.999,575,1.782,618,2.179,644,2.49,828,2.877,902,3.623,903,5.024,904,6.659,905,4.748,906,5.356,907,6.659,908,6.073,909,6.659,910,4.512,911,6.659,912,4.166,913,5.067,914,5.725,915,4.166,916,5.356,917,3.514,918,3.613,919,2.719,920,3.623,921,3.623,922,2.36,923,2.1,924,5.067,925,4.512,926,2.877,927,1.942,928,3.975,929,3.623,930,3.623,931,3.623,932,4.289,933,3.623,934,1.463,935,3.623,936,3.623,937,5.067,938,2.1,939,3.3,940,5.067,941,2.265,942,3.623,943,3.623,944,3.305,945,3.623,946,2.719,947,3.623,948,3.623,949,3.305,950,3.623,951,3.623,952,5.067,953,3.975,954,5.067,955,5.067,956,5.067,957,5.067,958,3.623,959,3.623,960,3.305,961,3.623,962,3.305,963,3.623,964,3.623,965,3.623,966,3.623,967,3.067,968,3.623,969,3.623]],["title/classes/ClientCredentialsDto.html",[80,0.059,506,3.559]],["body/classes/ClientCredentialsDto.html",[3,0.146,4,0.117,5,0.117,12,0.315,13,0.958,18,0.634,19,0.353,20,0.009,29,0.416,79,0.146,80,0.105,259,0.008,302,0.008,304,2.292,310,2.166,311,3.922,312,0.958,322,2.864,506,6.282,541,5.503,543,6.688,970,8.311,971,6.602,972,6.602,973,6.602]],["title/interfaces/ClientOptions.html",[0,0.574,974,2.541]],["body/interfaces/ClientOptions.html",[0,0.866,2,1.046,3,0.077,4,0.062,5,0.062,11,1.802,12,0.167,13,0.63,16,1.042,18,0.547,19,0.392,20,0.009,24,1.673,27,2.713,29,0.382,38,2.803,60,2.172,79,0.18,87,1.619,91,1.86,95,1.86,97,1.127,98,1.249,107,2.41,109,0.819,127,4.08,129,1.355,136,0.927,137,1.673,141,1.434,142,2.206,159,1.569,161,2.81,163,1.731,175,3.541,190,1.293,193,2.576,195,2.069,206,2.81,211,1.673,219,2.41,225,3.122,229,1.934,238,1.156,250,2.257,258,2.994,259,0.005,302,0.005,314,1.249,316,1.521,338,2.618,346,0.843,430,2.119,442,1.999,445,3.539,470,2.788,474,1.673,644,2.669,910,2.206,912,2.206,914,2.206,915,2.206,919,2.321,922,2.947,925,3.815,927,1.186,928,3.64,934,2.643,946,2.321,953,2.104,974,2.947,975,2.456,976,5.705,977,5.539,978,2.206,979,3.83,980,3.83,981,2.618,982,2.947,983,2.618,984,3.956,985,4.675,986,2.618,987,2.321,988,2.618,989,4.198,990,2.321,991,2.206,992,1.934,993,2.618,994,2.618,995,2.618,996,2.618,997,3.593,998,3.593,999,2.618,1000,2.618,1001,2.456,1002,2.618,1003,3.83,1004,2.618,1005,4.015,1006,2.618,1007,2.456,1008,2.618,1009,3.815,1010,2.618,1011,2.456,1012,3.226,1013,2.618,1014,2.618,1015,3.226,1016,2.456,1017,2.206,1018,2.618,1019,2.104,1020,2.104,1021,1.521,1022,2.104,1023,2.456,1024,2.456,1025,2.618,1026,2.104,1027,2.618,1028,2.618,1029,2.206,1030,4.248,1031,4.983,1032,6.474,1033,4.529,1034,2.618,1035,4.262,1036,2.104,1037,3.593,1038,2.321,1039,2.456,1040,2.456,1041,2.456,1042,1.934,1043,2.206,1044,2.321,1045,2.456,1046,2.206,1047,2.104,1048,1.731,1049,2.456,1050,5.196,1051,2.456]],["title/injectables/ClientService.html",[30,0.945,525,2.928]],["body/injectables/ClientService.html",[0,0.717,3,0.086,4,0.069,5,0.069,12,0.185,13,0.679,15,2.136,16,0.984,18,0.638,19,0.335,20,0.009,29,0.484,30,1.181,31,5.383,33,0.686,34,2.812,35,1.35,38,3.286,54,2.235,56,3.048,61,2.637,64,2.145,65,2.235,66,2.334,68,2.235,79,0.122,80,0.052,81,1.856,82,3.176,86,2.852,93,1.497,94,1.282,97,2.25,106,2.728,109,1.181,110,1.328,113,4.202,115,4.904,132,2.353,135,1.813,136,1.028,149,1.989,160,2.948,161,2.327,191,1.369,202,1.687,216,2.724,219,1.545,259,0.006,263,3.351,282,3.872,285,2.145,294,2.145,302,0.006,306,3.317,309,1.004,312,0.992,336,3.872,338,1.25,346,1.329,352,3.872,420,2.334,430,1.649,462,3.477,484,2.575,517,1.851,525,3.659,566,3.317,606,3.13,653,3.659,706,1.503,715,2.235,817,2.235,833,2.724,849,3.431,850,5.634,851,2.904,852,2.575,853,5.174,854,7.353,855,5.174,856,3.431,857,3.431,858,3.431,859,3.431,860,3.431,861,3.431,862,3.13,863,3.431,864,3.431,865,3.431,866,6.176,867,5.672,868,3.431,869,6.176,870,3.431,871,3.431,872,3.13,873,3.659,874,4.876,875,4.876,876,4.876,877,3.431,878,4.876,879,4.876,880,4.876,881,3.317,882,4.876,883,4.876,884,4.876,885,4.876,886,4.876,887,2.904,888,2.904,889,2.904,890,3.431,891,3.13,892,3.431,893,3.431,894,4.876,895,3.431,896,1.74,897,4.876,898,3.13,899,3.431,900,3.431,1052,5.527,1053,5.527,1054,5.527,1055,5.527,1056,3.889,1057,3.889,1058,3.889,1059,3.889,1060,3.048,1061,3.889,1062,3.889]],["title/interfaces/Config.html",[0,0.574,60,1.353]],["body/interfaces/Config.html",[0,0.813,2,0.921,3,0.068,4,0.055,5,0.055,11,1.736,12,0.147,13,0.573,16,1.142,18,0.462,19,0.393,20,0.009,24,2.227,27,1.381,29,0.354,38,2.835,60,2.165,79,0.174,87,2.155,91,2.476,95,2.476,97,0.993,98,1.1,107,2.675,109,1.001,127,3.868,129,1.193,136,0.817,137,2.227,141,2.3,142,1.942,159,1.381,161,2.834,163,1.524,175,4.11,190,1.177,193,2.538,195,2.145,206,2.639,211,1.473,219,2.235,225,3.231,229,1.703,238,1.538,250,2.394,258,3.323,259,0.005,302,0.005,309,1.619,314,1.663,316,1.34,338,2.579,346,1.122,430,2.356,442,1.854,445,3.507,470,2.661,474,2.227,644,2.53,910,1.942,912,1.942,914,1.942,915,1.942,919,3.089,922,2.681,925,3.538,927,1.044,928,3.763,934,2.522,946,3.089,953,1.853,974,1.774,975,2.163,976,5.531,977,5.287,978,1.942,979,3.485,980,4.201,981,2.306,982,2.681,983,2.306,984,3.898,985,4.715,986,3.485,987,3.089,988,2.306,989,4.967,990,3.089,991,2.935,992,2.574,993,3.485,994,3.485,995,2.306,996,3.485,997,4.392,998,3.94,999,3.485,1000,3.485,1001,3.269,1002,2.306,1003,4.201,1004,3.485,1005,4.456,1006,4.201,1007,3.269,1008,3.485,1009,4.624,1010,3.485,1011,3.269,1012,3.538,1013,3.485,1014,3.485,1015,4.234,1016,3.269,1017,3.943,1018,4.201,1019,3.376,1020,3.376,1021,2.44,1022,3.376,1023,3.269,1024,3.269,1025,2.306,1026,1.853,1027,2.306,1028,2.306,1029,1.942,1030,3.94,1031,4.681,1032,6.349,1033,4.201,1034,2.306,1035,4.04,1036,1.853,1037,3.269,1038,2.044,1039,2.163,1040,2.163,1041,2.163,1042,1.703,1043,1.942,1044,2.044,1045,2.163,1046,1.942,1047,1.853,1048,3.323,1049,2.163,1050,4.959,1051,2.163]],["title/interfaces/Config-1.html",[0,0.479,60,1.128,901,1.704]],["body/interfaces/Config-1.html",[0,0.673,2,1.063,3,0.079,4,0.063,5,0.063,11,1.955,12,0.17,13,0.637,16,1.214,19,0.37,20,0.009,29,0.327,38,1.303,60,2.281,79,0.114,87,2.396,89,2.395,119,2.561,129,3.236,135,0.817,141,3.601,161,3.322,163,3.319,168,2.653,190,1.695,193,1.668,195,1.926,202,2.917,206,2.184,225,3.291,229,3.708,259,0.005,263,2.432,302,0.005,309,1.34,312,0.637,315,3.114,338,1.145,354,4.71,430,2.006,445,3.208,470,2.966,471,2.396,491,3.874,493,3.435,494,5.336,507,3.634,517,1.372,518,3.814,575,2.251,618,2.753,644,2.3,828,3.634,902,3.142,903,2.495,904,5.931,905,4.229,906,2.66,907,5.931,908,5.41,909,5.931,910,2.241,911,5.931,912,2.241,913,3.142,914,5.061,915,2.241,916,6.008,917,4.186,918,4.229,919,3.435,920,4.577,921,4.577,922,2.981,923,2.653,924,5.931,925,4.229,926,3.634,927,2.274,928,4.477,929,4.577,930,4.577,931,3.142,932,5.021,933,3.142,934,2.18,935,3.142,936,4.577,937,5.931,938,2.653,939,3.863,940,5.931,941,2.861,942,4.577,943,4.577,944,4.175,945,4.577,946,3.435,947,4.577,948,4.577,949,4.175,950,3.142,951,4.577,952,5.931,953,4.477,954,5.931,955,5.931,956,5.931,957,5.931,958,5.931,959,4.577,960,4.175,961,4.577,962,4.175,963,4.577,964,4.577,965,4.577,966,5.931,967,3.874,968,4.577,969,5.931]],["title/classes/CredentialIssuerMetadataDto.html",[80,0.059,1063,3.559]],["body/classes/CredentialIssuerMetadataDto.html",[3,0.11,4,0.088,5,0.088,7,1.043,12,0.238,13,0.805,18,0.645,19,0.392,20,0.009,26,3.355,79,0.11,80,0.067,105,4.596,119,3.238,160,3.274,171,2.555,259,0.007,302,0.007,304,1.734,312,1.052,323,3.274,332,3.238,338,2.755,355,4.668,514,4.289,553,4.127,616,2.999,757,4.041,827,3.65,829,5.807,923,3.355,927,2.219,1063,5.279,1064,6.074,1065,8.67,1066,4.408,1067,3.143,1068,3.143,1069,6.462,1070,6.462,1071,6.462,1072,5.894,1073,6.462,1074,6.462,1075,6.499,1076,6.462,1077,4.997,1078,5.788,1079,4.997,1080,3.618,1081,6.56,1082,4.997,1083,7.324,1084,4.997,1085,4.997,1086,4.997,1087,5.788,1088,4.997,1089,4.899,1090,5.788,1091,4.997,1092,4.127,1093,4.997,1094,4.021,1095,4.408]],["title/controllers/CredentialsController.html",[342,1.576,1096,3.559]],["body/controllers/CredentialsController.html",[3,0.123,4,0.099,5,0.099,7,1.162,12,0.266,15,2.256,16,0.989,18,0.665,19,0.366,20,0.009,26,3.598,29,0.486,33,0.982,79,0.123,80,0.075,94,2.542,97,2.262,109,1.124,132,2.574,135,1.769,151,2.748,160,2.962,191,1.302,259,0.007,302,0.007,310,1.952,312,0.864,342,1.984,344,2.152,346,1.692,350,2.658,502,2.749,517,1.86,520,3.687,667,2.749,668,4.928,717,4.431,827,3.592,1096,5.661,1097,5.569,1098,5.569,1099,4.863,1100,5.363,1101,5.569,1102,7.035,1103,5.569,1104,6.05,1105,4.426,1106,5.569,1107,7.035,1108,5.569,1109,4.658,1110,5.569,1111,5.569,1112,5.569,1113,2.848,1114,5.569,1115,5.569,1116,5.569,1117,5.569]],["title/injectables/CredentialsService.html",[30,0.945,717,2.541]],["body/injectables/CredentialsService.html",[3,0.07,4,0.056,5,0.056,12,0.15,15,2.184,16,1.095,18,0.667,19,0.369,20,0.009,21,2.398,29,0.52,30,1.013,33,0.556,34,2.709,35,1.094,47,2.59,48,1.556,60,1.45,79,0.07,80,0.042,86,2.143,93,1.284,94,2.617,97,2.552,109,1.216,110,1.444,118,1.58,135,1.944,136,0.834,146,2.758,147,2.294,151,2.784,183,1.892,190,1.92,191,1.442,203,3.138,231,2.209,238,1.563,240,2.614,259,0.005,288,2.982,302,0.005,309,1.636,312,0.957,314,1.123,334,2.614,346,1.14,458,2.714,464,3.138,517,2.06,533,1.812,544,1.41,644,2.141,706,1.218,717,2.724,737,3.419,740,3.353,742,2.087,754,2.982,766,2.424,782,2.515,803,1.368,808,1.812,809,1.673,827,3.439,906,3.54,934,1.123,1072,3.814,1099,3.419,1100,4.194,1104,4.731,1105,3.985,1109,3.138,1118,3.152,1119,4.74,1120,5.696,1121,5.025,1122,5.696,1123,4.74,1124,4.74,1125,5.696,1126,3.152,1127,4.443,1128,5.696,1129,4.438,1130,3.152,1131,4.74,1132,4.74,1133,3.152,1134,3.54,1135,3.814,1136,3.152,1137,3.152,1138,3.152,1139,7.402,1140,3.152,1141,5.466,1142,3.152,1143,4.194,1144,3.152,1145,3.152,1146,4.74,1147,3.152,1148,4.74,1149,3.152,1150,3.152,1151,4.438,1152,3.152,1153,4.74,1154,3.814,1155,4.74,1156,2.424,1157,2.354,1158,2.354,1159,4.182,1160,2.354,1161,4.194,1162,1.892,1163,2.354,1164,2.781,1165,1.983,1166,2.537,1167,2.354,1168,2.781,1169,2.209,1170,1.673,1171,3.152,1172,2.087,1173,1.739,1174,3.152,1175,3.152,1176,5.696,1177,3.152,1178,3.152,1179,3.152,1180,3.152,1181,3.152,1182,3.152,1183,3.152,1184,4.584,1185,3.814,1186,3.152,1187,3.152,1188,4.182,1189,3.152,1190,3.152,1191,3.152,1192,3.152,1193,2.781,1194,3.152,1195,3.152,1196,2.781,1197,3.152,1198,3.152,1199,3.152,1200,2.537,1201,2.354,1202,3.152,1203,2.781,1204,3.152,1205,3.152,1206,2.209,1207,3.152,1208,1.892,1209,4.74,1210,3.152,1211,3.152,1212,4.74]],["title/interfaces/CryptoImplementation.html",[0,0.574,1213,3.303]],["body/interfaces/CryptoImplementation.html",[0,0.994,2,1.639,3,0.121,4,0.097,5,0.097,7,1.146,12,0.262,13,0.856,16,0.98,18,0.627,19,0.385,20,0.009,22,1.985,79,0.121,94,2.299,118,1.935,134,5.336,135,1.758,190,2.204,191,1.418,225,2.771,235,3.637,259,0.007,276,3.456,279,5.208,302,0.007,312,0.941,346,1.677,517,1.844,808,4.403,809,4.277,967,6.019,1213,5.208,1214,7.111,1215,4.846,1216,5.612,1217,6.973,1218,4.885,1219,7.111,1220,6.973,1221,6.973,1222,5.493,1223,6.153,1224,6.166,1225,6.973,1226,7.712,1227,5.493,1228,6.486,1229,6.973,1230,6.973,1231,5.493,1232,6.166,1233,6.973,1234,4.42,1235,4.42]],["title/modules/CryptoModule.html",[357,1.387,369,2.347]],["body/modules/CryptoModule.html",[3,0.138,4,0.11,5,0.11,20,0.009,29,0.511,33,1.1,47,3.739,79,0.138,80,0.084,259,0.008,302,0.008,357,2.543,359,2.705,360,2.976,361,3.189,362,3.189,363,2.976,364,4.004,365,4.004,369,4.81,377,3.858,378,3.189,379,2.976,382,2.976,1236,5.502,1237,5.502,1238,5.502,1239,6.405,1240,6.236,1241,6.236,1242,6.236]],["title/injectables/CryptoService.html",[30,0.945,47,1.809]],["body/injectables/CryptoService.html",[3,0.05,4,0.04,5,0.065,9,3.936,10,4.231,11,1.218,12,0.109,13,0.452,14,3.723,15,0.602,16,1.04,18,0.645,19,0.372,20,0.009,21,2.761,22,1.736,29,0.483,30,0.786,32,3.741,33,0.402,34,2.28,35,0.791,38,0.834,47,1.504,54,1.309,55,2.777,56,2.029,57,1.596,61,1.087,62,1.596,63,1.508,64,1.256,65,1.309,66,1.367,67,1.508,68,1.309,79,0.05,80,0.031,81,1.087,86,1.796,93,0.996,104,1.309,109,1.182,110,1.613,113,2.777,118,2.008,131,2.747,135,1.697,136,1.734,137,1.755,146,2.464,147,2.327,151,2.687,153,2.435,159,1.019,161,1.948,183,2.208,188,2.114,190,1.572,191,1.37,192,1.701,204,1.367,225,0.905,232,1.701,233,1.701,234,1.701,238,1.751,241,3.063,246,2.621,247,0.959,250,1.244,256,1.309,259,0.004,263,0.905,276,2.314,289,2.877,294,2.029,297,2.208,298,2.208,302,0.004,309,1.505,310,1.02,312,0.955,314,1.892,332,1.816,346,0.885,352,1.596,379,2.781,386,1.833,420,3.498,430,0.68,436,1.701,442,1.525,470,1.739,484,4.666,496,1.596,517,1.994,533,1.309,551,2.91,556,2.314,568,2.029,575,3.058,657,1.508,658,1.256,667,2.877,676,5.264,706,0.88,715,1.309,728,1.833,740,3.653,742,1.508,743,2.577,757,2.07,766,1.165,789,2.577,803,1.596,808,2.114,809,1.209,810,1.833,813,2.96,850,4.273,851,1.701,855,3.723,887,1.701,888,1.701,889,3.455,896,1.019,901,1.052,934,1.648,985,2.577,1044,1.508,1060,2.552,1154,1.833,1208,4.097,1243,2.01,1244,4.792,1245,4.626,1246,3.678,1247,3.245,1248,3.678,1249,3.678,1250,2.747,1251,3.858,1252,3.678,1253,5.31,1254,3.678,1255,2.278,1256,2.278,1257,3.678,1258,4.685,1259,2.278,1260,2.278,1261,3.245,1262,3.245,1263,2.278,1264,3.678,1265,2.278,1266,4.626,1267,3.678,1268,2.278,1269,2.278,1270,3.245,1271,2.278,1272,2.278,1273,2.278,1274,3.678,1275,2.278,1276,2.278,1277,2.278,1278,4.626,1279,3.678,1280,2.278,1281,2.278,1282,2.278,1283,2.01,1284,2.278,1285,2.278,1286,4.626,1287,4.626,1288,3.678,1289,2.747,1290,1.701,1291,1.124,1292,2.278,1293,1.701,1294,1.833,1295,2.278,1296,2.278,1297,2.01,1298,2.278,1299,2.278,1300,3.678,1301,5.31,1302,2.929,1303,2.278,1304,2.278,1305,2.278,1306,3.678,1307,1.833,1308,5.827,1309,2.278,1310,5.31,1311,2.278,1312,5.827,1313,2.278,1314,5.31,1315,2.278,1316,3.678,1317,6.232,1318,4.626,1319,2.278,1320,2.278,1321,2.278,1322,2.278,1323,2.278,1324,3.678,1325,4.897,1326,2.278,1327,2.278,1328,2.278,1329,2.278,1330,2.278,1331,2.278,1332,3.678,1333,2.278,1334,3.678,1335,3.678,1336,3.063,1337,2.278,1338,5.827,1339,3.678,1340,2.96,1341,3.678,1342,3.678,1343,1.833,1344,2.278,1345,2.278,1346,3.678,1347,3.678,1348,3.678,1349,3.678,1350,4.626,1351,3.678,1352,3.678,1353,2.01,1354,2.278,1355,1.701,1356,2.278,1357,2.278,1358,2.278,1359,2.01,1360,1.833,1361,2.278,1362,2.278,1363,2.278,1364,2.278,1365,2.278,1366,2.01,1367,2.01,1368,2.278,1369,2.278,1370,1.833,1371,2.278,1372,2.01,1373,3.678,1374,2.278,1375,2.278,1376,2.278,1377,3.245,1378,4.081,1379,2.278,1380,2.01,1381,2.278,1382,2.278,1383,2.278,1384,3.678,1385,2.278,1386,3.678,1387,3.678,1388,3.678,1389,3.678,1390,4.685,1391,2.278,1392,2.278,1393,2.278,1394,2.278,1395,2.278,1396,2.01,1397,2.278,1398,2.278,1399,3.245,1400,2.278,1401,2.278,1402,3.678,1403,3.678,1404,3.678,1405,5.31,1406,2.278,1407,3.678,1408,4.626,1409,2.278,1410,3.678,1411,3.678,1412,3.678,1413,3.678,1414,2.278,1415,2.278,1416,2.278,1417,2.278,1418,2.278,1419,1.596,1420,2.029,1421,2.278,1422,2.278]],["title/injectables/CryptoService-1.html",[30,0.788,47,1.509,901,1.704]],["body/injectables/CryptoService-1.html",[3,0.125,4,0.1,5,0.1,12,0.27,16,0.998,19,0.321,20,0.009,29,0.529,30,1.518,33,0.998,34,2.981,35,1.964,47,2.905,79,0.157,80,0.076,93,1.532,100,5.306,109,1.341,118,1.57,135,1.782,191,1.315,202,3.082,238,1.865,259,0.007,276,4.886,302,0.007,309,1.461,312,0.954,346,1.709,430,2.12,517,1.879,706,2.186,766,4.166,809,4.323,990,3.745,1113,2.893,1156,2.893,1157,4.225,1158,4.225,1208,4.265,1213,5.8,1423,4.991,1424,8.146,1425,7.767,1426,5.657,1427,5.657,1428,7.104,1429,5.657,1430,6.852,1431,6.556,1432,5.657,1433,5.657,1434,7.767,1435,6.754,1436,3.396,1437,4.082,1438,5.657]],["title/modules/DatabaseModule.html",[357,1.387,370,3.099]],["body/modules/DatabaseModule.html",[3,0.123,4,0.098,5,0.098,19,0.318,20,0.009,29,0.526,33,0.979,34,2.961,35,1.927,61,3.35,79,0.155,80,0.074,109,1.121,110,1.46,136,1.857,138,5.526,219,2.206,231,3.89,259,0.007,302,0.007,357,2.201,359,2.409,370,4.919,382,3.35,383,5.244,384,4.215,436,4.147,437,4.468,481,4.899,1170,2.946,1439,5.552,1440,3.676,1441,7.021,1442,5.552,1443,7.021,1444,5.552,1445,5.552,1446,5.552,1447,8.091,1448,8.525,1449,7.363,1450,6.716,1451,5.552,1452,5.552,1453,5.552,1454,5.552,1455,5.552,1456,5.552,1457,7.021,1458,4.899,1459,7.7,1460,5.552,1461,5.552,1462,7.021,1463,5.552,1464,5.552,1465,5.552,1466,5.552,1467,5.552,1468,4.899,1469,5.552,1470,5.65,1471,5.552,1472,5.552]],["title/classes/EC_Public.html",[80,0.059,1293,3.303]],["body/classes/EC_Public.html",[3,0.114,4,0.092,5,0.092,7,1.082,12,0.247,13,0.825,18,0.618,19,0.37,20,0.009,21,3.708,22,2.208,24,3.558,29,0.326,79,0.148,80,0.106,81,3.206,106,2.559,107,2.67,195,1.339,202,2.915,259,0.007,276,4.227,302,0.007,304,1.799,312,0.968,610,3.112,618,2.751,624,4.574,680,5.018,740,4.034,766,3.436,923,3.813,1021,3.235,1046,4.227,1064,5.725,1067,4.69,1291,2.559,1293,5.018,1294,6.576,1302,4.701,1340,7.216,1473,5.223,1474,6.959,1475,6.959,1476,5.407,1477,6.578,1478,6,1479,6.578,1480,6.103,1481,7.209,1482,5.184,1483,5.928,1484,5.018,1485,5.184,1486,6.959,1487,5.184,1488,3.112,1489,3.872]],["title/injectables/EncryptionService.html",[30,0.945,1239,3.099]],["body/injectables/EncryptionService.html",[3,0.1,4,0.08,5,0.08,12,0.215,13,0.753,16,1.049,18,0.649,19,0.384,20,0.009,21,1.901,22,1.112,29,0.519,30,1.31,33,0.796,34,2.946,35,1.567,54,2.594,55,2.709,56,3.839,61,2.925,63,2.988,64,2.49,65,2.594,66,2.709,67,2.988,68,2.594,79,0.1,80,0.061,86,2.974,93,1.223,109,0.979,110,1.162,135,1.713,136,1.841,146,2.787,147,2.4,151,2.182,153,4.058,190,1.546,191,1.382,194,3.162,195,1.166,219,1.794,259,0.006,263,2.436,270,1.901,285,2.49,294,3.381,295,3.162,297,3.679,298,3.679,302,0.006,310,1.252,312,1.043,346,1.474,420,2.709,484,4.058,517,2.064,566,2.709,706,1.744,715,2.594,740,3.854,852,2.988,1048,2.228,1113,2.308,1196,3.982,1219,3.982,1239,4.294,1250,4.578,1270,5.408,1289,4.578,1291,2.228,1302,2.49,1478,3.632,1490,4.514,1491,6.96,1492,6.96,1493,6.96,1494,6.96,1495,6.129,1496,7.466,1497,4.294,1498,6.129,1499,6.129,1500,4.514,1501,4.514,1502,4.294,1503,4.514,1504,4.514,1505,6.141,1506,4.514,1507,4.514,1508,4.514,1509,3.632,1510,4.514,1511,3.632,1512,6.129,1513,6.129,1514,6.129,1515,4.514,1516,4.514,1517,5.408,1518,3.982,1519,3.982,1520,6.129,1521,4.514,1522,4.514,1523,4.514,1524,3.982,1525,4.514,1526,6.129,1527,6.129,1528,4.514,1529,4.514,1530,4.514]],["title/interfaces/Fields.html",[0,0.574,258,2.183]],["body/interfaces/Fields.html",[0,0.778,2,1.306,3,0.097,4,0.077,5,0.077,12,0.286,13,0.737,16,1.036,18,0.544,19,0.361,20,0.009,22,1.902,60,2.439,79,0.163,88,2.16,109,0.959,110,1.699,118,1.214,191,1.111,193,2.369,206,3.103,219,2.929,258,3.812,259,0.006,302,0.006,309,2.109,442,1.443,470,2.771,502,2.16,557,2.898,644,1.645,905,2.753,927,1.48,934,2.842,1029,4.858,1531,3.522,1532,6.502,1533,6.813,1534,6.043,1535,6.419,1536,5.931,1537,3.066,1538,6.04,1539,5.512,1540,3.861,1541,3.861,1542,3.861,1543,3.861,1544,3.861,1545,3.861,1546,3.861,1547,5.512,1548,3.861,1549,6.043,1550,3.861,1551,3.861,1552,3.861,1553,3.861,1554,3.861,1555,5.957,1556,3.861,1557,3.522,1558,3.861,1559,6.043,1560,3.861,1561,3.861,1562,3.861,1563,6.043,1564,3.861,1565,5.295,1566,3.066,1567,3.861,1568,5.295,1569,5.295,1570,5.295,1571,3.861,1572,3.861,1573,3.861,1574,6.043,1575,3.861,1576,3.861,1577,3.861,1578,5.295,1579,3.861,1580,3.861,1581,3.066,1582,3.861]],["title/injectables/FileSystemKeyService.html",[30,0.945,1583,3.559]],["body/injectables/FileSystemKeyService.html",[3,0.069,4,0.055,5,0.1,7,0.65,12,0.149,13,0.577,15,1.665,16,1.091,18,0.652,19,0.385,20,0.009,21,2.651,22,1.949,23,4.733,29,0.498,30,1.003,32,3.779,33,0.549,34,2.599,35,1.081,47,3.014,48,1.537,54,1.79,55,1.869,56,3.119,57,2.182,61,2.241,62,2.182,70,2.955,71,2.819,79,0.069,80,0.042,81,1.486,86,2.86,93,1.272,109,1.212,110,1.347,118,1.303,132,2.472,135,1.868,136,1.242,146,2.753,147,2.648,149,2.402,151,2.651,190,2.098,191,1.437,211,1.486,235,4.473,238,1.027,241,2.062,259,0.005,285,1.718,288,3.557,289,1.537,297,2.819,298,2.819,302,0.005,309,1.213,312,1.011,314,2.015,346,1.129,420,1.869,430,1.401,484,3.109,517,2.053,575,2.038,644,1.171,706,1.203,715,1.79,740,3.833,757,2.101,782,1.652,808,3.882,851,2.326,887,2.326,888,2.326,889,2.326,990,2.062,1042,1.718,1105,1.959,1156,1.593,1213,4.223,1234,5.437,1244,3.109,1251,4.168,1289,4.223,1291,1.537,1302,4.364,1307,5.066,1336,3.109,1372,4.144,1399,2.748,1430,4.988,1497,3.29,1505,5.961,1509,4.55,1519,2.748,1583,3.779,1584,8.319,1585,2.748,1586,5.654,1587,5.654,1588,4.696,1589,3.779,1590,5.932,1591,4.696,1592,4.696,1593,3.114,1594,3.779,1595,3.779,1596,3.114,1597,5.437,1598,3.114,1599,3.114,1600,3.114,1601,4.696,1602,3.114,1603,3.114,1604,3.779,1605,3.114,1606,3.779,1607,3.961,1608,5.555,1609,3.114,1610,3.114,1611,3.114,1612,3.114,1613,4.696,1614,4.696,1615,4.144,1616,3.779,1617,2.326,1618,2.506,1619,1.959,1620,3.114,1621,3.114,1622,3.114,1623,3.114,1624,5.654,1625,3.114,1626,5.654,1627,5.654,1628,3.114,1629,4.696,1630,4.696,1631,2.748,1632,4.696,1633,3.114,1634,4.696,1635,6.756,1636,3.114,1637,3.114,1638,3.114,1639,3.114,1640,3.114,1641,4.696,1642,1.959,1643,3.114,1644,4.696,1645,2.748,1646,2.748,1647,3.114,1648,3.114,1649,3.114,1650,3.114]],["title/interfaces/GenerateTokenOptions.html",[0,0.574,1651,3.559]],["body/interfaces/GenerateTokenOptions.html",[0,0.605,2,1.392,3,0.103,4,0.083,5,0.083,12,0.223,13,0.77,16,1.142,18,0.643,19,0.32,20,0.009,27,2.088,29,0.477,30,1.339,33,0.823,34,2.59,35,1.62,79,0.138,80,0.063,82,2.681,84,4.543,85,5.011,89,2.96,107,1.854,109,1.261,110,1.622,118,2.256,119,2.303,132,1.707,146,2.015,147,2.015,159,2.805,186,3.269,190,1.581,213,2.574,238,2.334,250,2.394,256,4.349,259,0.006,263,2.491,302,0.006,442,1.538,445,2.227,523,3.089,530,4.355,531,3.485,551,2.935,552,4.543,556,3.944,566,3.763,568,3.457,575,3.283,579,6.354,581,5.011,757,3.167,767,3.269,803,3.071,809,2.476,1113,2.386,1218,3.269,1251,4.15,1290,3.485,1291,2.303,1336,3.089,1651,5.696,1652,4.117,1653,4.117,1654,3.755,1655,4.117,1656,5.53,1657,5.044,1658,5.53,1659,5.53,1660,4.117,1661,4.117,1662,6.245,1663,5.53,1664,4.117,1665,5.044,1666,4.117,1667,4.117,1668,4.117,1669,4.117,1670,4.117,1671,4.117,1672,4.117,1673,4.117,1674,3.485,1675,3.485,1676,4.117,1677,4.392,1678,3.755,1679,4.117,1680,4.117,1681,3.485,1682,4.117,1683,3.755,1684,4.117,1685,4.117,1686,4.117,1687,4.117,1688,3.755]],["title/controllers/HealthController.html",[342,1.576,1689,3.559]],["body/controllers/HealthController.html",[3,0.134,4,0.107,5,0.107,7,1.264,12,0.289,20,0.009,29,0.467,33,1.068,70,4.663,79,0.134,80,0.081,86,2.507,93,1.641,109,0.968,131,5.535,132,2.712,135,1.7,213,4.912,259,0.007,302,0.007,310,1.681,312,0.744,342,2.158,344,2.341,346,1.783,502,2.99,514,4.088,630,5.965,1470,5.965,1689,6.716,1690,6.057,1691,8.71,1692,6.539,1693,6.539,1694,8.345,1695,6.539,1696,7.412,1697,6.057,1698,6.057,1699,7.412,1700,7.412,1701,4.874,1702,6.057,1703,5.344,1704,6.057,1705,6.057]],["title/modules/HealthModule.html",[357,1.387,371,3.099]],["body/modules/HealthModule.html",[3,0.15,4,0.12,5,0.12,20,0.009,29,0.53,33,1.199,79,0.15,80,0.091,259,0.008,302,0.008,344,3.07,357,2.491,359,2.951,371,5.565,382,3.246,1689,6.772,1701,5.474,1706,6.802,1707,6.802,1708,7.944]],["title/classes/Interceptors.html",[80,0.059,1036,2.655]],["body/classes/Interceptors.html",[0,0.466,3,0.049,4,0.039,5,0.039,11,1.317,12,0.249,13,0.441,15,1.714,16,0.807,18,0.552,19,0.365,20,0.01,22,0.885,27,0.99,29,0.362,38,0.81,60,2.065,79,0.158,80,0.03,88,3.199,89,1.861,93,1.229,107,2.575,109,1.333,110,1.669,118,1.449,127,3.001,129,0.855,135,1.411,136,1.627,137,2.492,141,0.905,143,1.272,146,0.712,147,0.712,171,4.086,190,1.144,191,1.479,193,0.712,195,1.588,204,2.157,206,2.418,211,1.056,219,2.575,225,0.88,246,2.578,250,1.534,259,0.004,263,2.575,270,1.91,302,0.004,304,0.768,309,2.204,312,0.829,314,2.309,323,0.932,338,2.592,341,1.838,346,0.864,430,0.66,442,1.722,445,3.221,470,2.623,474,2.492,489,1.653,495,1.653,517,1.518,552,1.329,818,1.465,832,1.465,901,2.652,903,1.551,917,3.582,918,2.261,922,2.607,923,2.32,927,2.36,934,2.046,938,2.32,939,4.216,941,1.982,974,1.272,978,1.392,982,2.065,991,1.392,1009,1.392,1012,2.261,1015,2.261,1017,2.261,1019,1.329,1020,1.329,1021,1.559,1022,1.329,1026,1.329,1035,3.447,1036,3.447,1048,2.239,1060,1.982,1419,3.178,1420,1.982,1436,1.329,1437,2.607,1537,1.551,1566,4.54,1581,3.178,1709,1.653,1710,4.202,1711,3.9,1712,4.621,1713,3.593,1714,2.157,1715,3.593,1716,6.158,1717,2.213,1718,2.892,1719,2.213,1720,2.892,1721,2.213,1722,2.892,1723,2.213,1724,2.892,1725,4.949,1726,2.213,1727,2.892,1728,2.213,1729,2.892,1730,2.684,1731,2.854,1732,2.854,1733,2.723,1734,1.781,1735,1.465,1736,2.518,1737,1.781,1738,1.551,1739,2.065,1740,1.329,1741,1.329,1742,2.157,1743,2.723,1744,2.723,1745,2.157,1746,2.157,1747,2.892,1748,4.621,1749,3.651,1750,1.781,1751,3.9,1752,4.247,1753,1.781,1754,1.781,1755,1.781,1756,1.781,1757,1.781,1758,2.892,1759,2.892,1760,1.781,1761,3.651,1762,1.392,1763,2.892,1764,1.781,1765,1.781,1766,2.892,1767,3.447,1768,4.202,1769,4.621,1770,1.781,1771,2.892,1772,1.781,1773,2.892,1774,1.781,1775,2.892,1776,1.781,1777,1.781,1778,1.781,1779,1.781,1780,2.892,1781,1.781,1782,1.653,1783,1.781,1784,3.651,1785,1.781,1786,1.781,1787,1.781,1788,1.781,1789,1.781,1790,1.551,1791,1.781,1792,1.781,1793,1.781,1794,1.781,1795,1.781,1796,1.781,1797,1.781,1798,1.781,1799,3.651,1800,1.781,1801,1.781,1802,1.781,1803,1.781,1804,1.781,1805,2.892,1806,1.781,1807,1.781,1808,2.892,1809,1.781,1810,1.781,1811,2.892,1812,1.781,1813,1.781,1814,1.781,1815,1.781,1816,1.781,1817,2.684,1818,1.781,1819,1.781,1820,1.781,1821,1.781,1822,1.781,1823,1.781,1824,1.781,1825,1.781,1826,1.781,1827,2.892,1828,2.892,1829,1.272,1830,1.781,1831,1.781,1832,1.781,1833,1.781,1834,2.892,1835,1.781,1836,1.781,1837,1.781,1838,1.781,1839,2.379,1840,1.781,1841,1.653,1842,1.653,1843,2.379,1844,1.653,1845,1.653,1846,4.202,1847,1.781,1848,1.781,1849,3.651,1850,4.621,1851,1.781,1852,2.892,1853,1.781,1854,1.781,1855,1.781,1856,2.892,1857,2.892,1858,1.781]],["title/entities/IssuanceConfig.html",[1151,3.099,1859,2.183]],["body/entities/IssuanceConfig.html",[3,0.106,4,0.085,5,0.085,11,1.466,12,0.229,13,0.785,15,1.899,16,1.152,18,0.565,19,0.393,20,0.009,29,0.516,60,2.197,79,0.106,80,0.086,98,1.711,136,2.168,151,2.252,168,3.915,188,3.672,202,2.084,259,0.006,302,0.006,310,2.387,311,2.859,312,1.056,320,4.439,321,4.4,322,2.084,350,2.292,430,2.143,533,2.76,617,4.231,873,5.069,934,2.728,1099,4.311,1100,5.427,1151,4.477,1164,6.337,1165,3.022,1167,5.364,1168,4.238,1173,2.649,1185,5.78,1188,6.337,1859,3.155,1860,2.883,1861,8.689,1862,4.238,1863,5.032,1864,7.182,1865,6.337,1866,4.803,1867,4.803,1868,3.587,1869,5.143,1870,4.803,1871,5.639,1872,4.803,1873,5.364,1874,4.238,1875,4.803,1876,5.364,1877,6.425,1878,6.597,1879,7.182,1880,4.803,1881,4.803,1882,4.238,1883,4.803,1884,4.803,1885,4.477,1886,4.238,1887,4.803,1888,5.639]],["title/controllers/IssuerManagementController.html",[342,1.576,1889,3.559]],["body/controllers/IssuerManagementController.html",[3,0.082,4,0.066,5,0.066,7,0.775,12,0.177,15,2.001,16,0.964,18,0.506,19,0.382,20,0.009,24,1.773,29,0.526,33,0.655,51,2.553,60,2.097,79,0.082,80,0.05,86,1.809,89,2.443,93,1.007,94,2.396,97,2.566,98,1.324,106,1.834,107,1.477,109,1.001,110,1.015,132,1.958,135,1.865,146,2.015,147,1.72,160,2.253,186,2.603,191,1.269,193,2.613,195,2.099,200,3.995,203,3.542,204,3.211,247,1.565,259,0.005,270,3.06,289,2.641,302,0.005,309,1.381,310,1.902,312,0.842,316,1.612,332,2.641,339,2.231,342,1.324,344,1.436,346,1.287,350,1.773,355,2.231,471,3.934,474,2.991,502,1.834,507,3.748,514,2.951,517,1.813,518,3.206,520,2.46,521,4.305,522,3.995,530,4.699,535,2.775,539,3.995,544,2.394,588,2.338,655,3.602,658,2.05,667,2.641,673,2.99,692,3.366,717,3.602,746,2.775,757,1.663,827,3.361,828,2.603,833,2.603,837,3.211,862,2.99,896,2.394,905,2.338,927,1.257,1021,2.72,1099,3.211,1134,3.995,1151,4.804,1172,2.46,1336,2.46,1790,2.603,1839,2.46,1889,4.305,1890,7.266,1891,6.411,1892,3.716,1893,3.763,1894,4.72,1895,5.53,1896,6.268,1897,3.279,1898,3.716,1899,3.279,1900,5.35,1901,3.716,1902,3.279,1903,5.284,1904,3.279,1905,4.72,1906,3.943,1907,3.279,1908,3.716,1909,3.716,1910,3.716,1911,5.35,1912,3.716,1913,3.716,1914,4.72,1915,2.99,1916,3.279,1917,2.99,1918,2.99,1919,2.775,1920,3.716,1921,3.943,1922,2.99,1923,3.716,1924,2.46,1925,2.99,1926,3.943,1927,3.716,1928,2.99,1929,2.99,1930,3.716,1931,3.279,1932,3.279,1933,4.72,1934,6.05,1935,3.279,1936,3.279,1937,5.044,1938,4.72,1939,3.995,1940,3.542,1941,3.279,1942,3.716,1943,3.716,1944,3.716,1945,3.279,1946,3.716,1947,3.716,1948,4.681,1949,3.279,1950,2.99,1951,3.279,1952,3.279,1953,3.279,1954,3.279,1955,3.279,1956,3.279,1957,3.716,1958,3.716,1959,3.279,1960,3.716]],["title/interfaces/IssuerMetadata.html",[0,0.574,1961,3.099]],["body/interfaces/IssuerMetadata.html",[0,1.043,2,1.823,3,0.135,4,0.108,5,0.108,7,1.275,12,0.291,13,0.915,18,0.593,19,0.379,20,0.009,21,3.137,22,1.835,26,3.81,29,0.385,79,0.135,106,3.678,259,0.007,302,0.007,338,2.395,616,4.472,618,3.953,621,5.564,740,3.678,757,4.044,1021,3.232,1066,5.39,1068,4.687,1080,3.369,1087,6.573,1291,3.016,1302,4.616,1473,5.22,1488,5.304,1961,5.22,1962,6.109]],["title/modules/IssuerModule.html",[357,1.387,372,3.099]],["body/modules/IssuerModule.html",[3,0.108,4,0.087,5,0.087,20,0.009,29,0.569,33,0.863,79,0.143,80,0.066,110,0.928,259,0.006,302,0.006,344,2.501,357,2.273,359,2.124,360,2.336,361,2.503,362,2.503,363,2.336,364,3.579,365,3.579,369,4.373,372,6.434,375,4.947,377,3.309,378,2.503,379,2.336,382,3.088,384,3.885,385,3.079,389,4.318,404,3.655,425,3.939,544,2.19,626,5.834,659,5.31,717,4.736,746,3.655,757,2.19,1096,5.834,1151,3.429,1162,2.938,1170,2.597,1172,3.241,1440,3.241,1889,5.834,1891,4.318,1921,5.565,1963,4.318,1964,4.318,1965,4.318,1966,4.318,1967,5.185,1968,5.457,1969,5.185,1970,5.185,1971,4.895,1972,5.834,1973,4.318,1974,4.895,1975,4.895,1976,4.895,1977,4.318,1978,4.895,1979,4.895,1980,4.895,1981,4.895,1982,4.285,1983,3.655,1984,3.655,1985,4.318,1986,4.895]],["title/classes/JwksResponseDto.html",[80,0.059,1489,3.303]],["body/classes/JwksResponseDto.html",[3,0.123,4,0.099,5,0.099,7,1.166,12,0.266,13,0.865,18,0.57,19,0.319,20,0.009,21,3.693,22,2.16,24,3.685,29,0.352,79,0.156,80,0.104,81,2.666,106,3.48,107,2.22,195,1.82,202,2.424,259,0.007,276,3.515,302,0.007,304,1.939,312,0.686,610,3.354,618,3.74,680,4.172,740,4.003,766,2.857,923,4.366,1021,3.35,1046,3.515,1064,4.938,1067,4.858,1291,2.758,1293,4.172,1294,5.672,1302,4.881,1340,7.174,1473,5.41,1474,6.219,1475,6.219,1476,4.496,1477,6.219,1478,4.496,1479,4.929,1480,5.264,1481,6.219,1483,4.929,1484,4.172,1486,6.219,1488,4.231,1489,5.264,1987,4.929]],["title/injectables/JwtAuthGuard.html",[30,0.945,588,2.782]],["body/injectables/JwtAuthGuard.html",[3,0.135,4,0.108,5,0.108,12,0.292,16,1.048,19,0.337,20,0.009,29,0.527,30,1.594,33,1.079,79,0.135,80,0.082,93,1.657,109,1.191,110,1.16,135,1.404,136,1.618,191,1.381,259,0.007,302,0.007,312,0.916,346,1.794,517,1.972,527,5.399,588,4.692,592,4.57,706,2.365,984,3.682,1113,3.129,1988,6.119,1989,7.458,1990,7.458,1991,5.399,1992,7.704,1993,6.119,1994,7.458,1995,6.739,1996,6.119,1997,4.051,1998,4.924,1999,6.119,2000,7.458,2001,4.924,2002,7.458,2003,6.119,2004,5.399,2005,6.119,2006,6.119]],["title/injectables/JwtService.html",[30,0.945,523,2.928]],["body/injectables/JwtService.html",[0,0.55,3,0.094,4,0.075,5,0.075,12,0.202,16,1.022,18,0.618,19,0.329,20,0.009,27,2.628,29,0.458,30,1.255,33,0.748,34,2.891,35,1.472,79,0.13,80,0.057,82,3.375,84,4.584,85,5.056,89,3.081,93,1.149,107,1.686,109,1.22,110,1.59,118,2.192,119,2.9,132,2.149,135,1.668,146,2.54,147,1.888,159,3.015,186,4.115,190,1.834,191,1.346,213,3.24,238,2.222,250,2.279,256,2.438,259,0.006,263,2.678,302,0.006,309,1.095,312,0.938,346,1.413,430,1.266,442,1.399,445,3.215,517,1.923,523,3.889,530,4.554,531,3.168,551,2.669,552,4.584,556,3.695,566,3.526,568,3.24,575,3.313,579,4.727,581,2.809,706,1.639,715,2.438,757,3.015,767,4.115,803,3.313,809,2.251,1113,2.169,1218,2.972,1251,3.889,1290,3.168,1291,2.094,1336,3.889,1651,5.853,1652,3.743,1653,3.743,1654,4.727,1655,5.945,1656,5.183,1657,4.727,1658,5.183,1659,5.183,1660,3.743,1661,3.743,1662,5.945,1663,5.183,1664,3.743,1665,4.727,1666,3.743,1667,3.743,1668,3.743,1669,3.743,1670,3.743,1671,3.743,1672,3.743,1673,3.743,1674,4.387,1675,4.387,1676,5.183,1677,4.721,1678,3.414,1679,3.743,1680,3.743,1681,3.168,1682,5.183,1683,4.727,1684,5.183,1685,5.183,1686,3.743,1687,6.417,1688,3.414,2007,5.874,2008,5.874,2009,4.242,2010,4.242,2011,4.242,2012,4.242,2013,4.242,2014,4.242]],["title/injectables/JwtStrategy.html",[30,0.945,589,3.303]],["body/injectables/JwtStrategy.html",[3,0.137,4,0.081,5,0.081,12,0.218,16,1.055,19,0.34,20,0.009,22,1.524,29,0.509,30,1.322,33,0.807,34,3.258,35,1.589,60,2.144,79,0.101,80,0.061,82,3.556,84,2.747,85,3.03,86,2.734,89,2.205,93,1.24,107,1.819,109,1.291,110,1.424,118,1.27,119,2.259,135,1.419,136,1.636,137,2.184,159,2.048,163,2.259,191,1.39,211,2.953,247,1.927,250,2.371,259,0.006,302,0.006,312,0.922,346,1.488,396,5.663,442,1.509,471,2.114,517,1.986,530,4.142,531,3.418,552,3.714,557,3.03,575,3.041,581,4.097,589,4.621,592,3.418,602,4.038,644,1.721,653,4.097,706,1.769,715,2.63,757,3.617,803,3.041,928,2.747,984,3.055,1099,2.747,1113,2.341,1208,2.747,1218,4.911,1355,3.418,1488,3.714,1654,5.641,1665,3.683,1675,5.235,1688,3.683,1829,2.63,1843,4.641,2001,3.683,2015,4.577,2016,6.187,2017,6.187,2018,7.01,2019,4.577,2020,6.187,2021,4.577,2022,6.187,2023,7.01,2024,4.577,2025,4.577,2026,6.187,2027,4.577,2028,4.577,2029,4.577,2030,4.577,2031,4.038,2032,6.187,2033,4.038,2034,7.508,2035,4.577,2036,4.577,2037,4.577,2038,4.038,2039,4.577,2040,4.577,2041,4.577,2042,4.577,2043,4.577,2044,4.577,2045,4.577,2046,6.187,2047,4.577,2048,4.577,2049,4.038,2050,6.187,2051,4.577,2052,4.577,2053,4.577,2054,4.577,2055,4.577,2056,4.577,2057,4.577,2058,4.577,2059,4.577,2060,3.683,2061,4.577,2062,4.577]],["title/entities/KeyEntity.html",[1859,2.183,2063,3.559]],["body/entities/KeyEntity.html",[3,0.145,4,0.116,5,0.116,12,0.313,13,0.954,18,0.573,19,0.352,20,0.009,29,0.413,79,0.145,80,0.088,136,2.055,151,2.598,259,0.008,302,0.008,310,2.156,312,0.954,873,5.146,1173,3.615,1226,6.857,1234,6.668,1859,3.837,1860,3.934,1873,5.805,1877,5.805,1885,4.592,2063,6.255,2064,6.554,2065,6.554,2066,6.554]],["title/modules/KeyModule.html",[357,1.387,373,3.099]],["body/modules/KeyModule.html",[3,0.117,4,0.094,5,0.094,15,1.405,20,0.009,29,0.557,33,0.937,34,3.084,35,1.845,47,3.446,48,2.623,60,1.625,79,0.151,80,0.071,109,1.205,110,1.295,118,1.894,135,1.219,138,4.995,259,0.007,302,0.007,312,0.652,346,1.278,357,2.365,359,2.306,364,2.623,365,2.623,369,3.623,373,5.285,382,2.536,383,5.099,384,4.099,385,3.343,396,4.783,398,4.689,436,3.969,437,4.277,992,2.931,1244,4.521,1440,3.518,1449,6.656,1450,5.495,1458,4.689,1583,5.495,1618,5.495,2063,4.277,2067,5.314,2068,7.544,2069,5.314,2070,7.544,2071,6.828,2072,5.314,2073,5.495,2074,7.436,2075,4.783,2076,5.769,2077,2.931,2078,5.314,2079,5.314,2080,6.828,2081,5.314,2082,5.314,2083,4.277,2084,5.314,2085,5.314,2086,4.689,2087,6.828,2088,5.314,2089,5.314,2090,5.314,2091,6.828]],["title/classes/KeyService.html",[80,0.059,1244,2.928]],["body/classes/KeyService.html",[0,0.817,3,0.104,4,0.083,5,0.083,7,0.98,12,0.224,15,1.665,16,1.169,18,0.666,19,0.391,20,0.009,21,2.651,22,2.082,23,5.316,29,0.396,79,0.104,80,0.063,94,1.548,132,2.777,135,1.965,141,2.574,151,2.812,190,2.242,191,1.54,247,1.977,259,0.006,302,0.006,304,1.63,312,1.021,314,2.531,346,1.514,496,4.976,517,2.2,575,2.731,675,3.507,740,3.906,808,4.68,1042,3.473,1156,2.402,1216,5.066,1244,4.168,1251,4.702,1291,2.318,1497,4.411,1502,4.411,1589,5.066,1590,6.695,1595,5.066,1597,6.368,1604,5.066,1606,3.779,1607,4.774,1619,2.955,1678,3.779,2092,4.696,2093,9.119,2094,4.696,2095,4.696,2096,4.696,2097,4.696,2098,4.696,2099,4.696,2100,7.588,2101,4.696]],["title/interfaces/Middleware.html",[0,0.574,982,2.541]],["body/interfaces/Middleware.html",[0,0.486,2,0.696,3,0.051,4,0.041,5,0.041,11,1.579,12,0.257,13,0.46,15,1.243,18,0.56,19,0.358,20,0.01,22,0.923,29,0.371,38,0.853,60,2.105,79,0.161,80,0.031,88,3.268,89,1.918,93,0.631,107,2.961,109,1.344,110,1.677,118,1.493,127,3.093,129,0.901,136,1.665,137,2.242,141,0.953,143,1.339,146,0.749,147,0.749,171,3.221,190,1.185,191,1.405,193,0.749,195,1.834,206,2.483,211,1.112,219,2.631,225,0.926,246,2.657,250,2.13,259,0.004,263,2.503,270,1.978,302,0.004,309,2.22,314,2.359,323,0.981,338,2.619,341,1.916,430,0.696,442,1.774,445,3.285,470,2.671,474,2.568,489,1.741,495,1.741,552,1.399,818,1.543,832,1.543,901,2.723,903,1.633,917,3.652,918,2.357,922,2.7,923,2.403,927,2.403,934,2.101,938,2.403,939,4.281,941,2.067,974,1.339,978,1.466,982,2.7,991,1.466,1009,1.466,1012,2.357,1015,2.357,1017,2.357,1019,1.399,1020,1.399,1021,1.626,1022,1.399,1026,1.399,1035,4.472,1036,3.231,1048,2.319,1419,3.292,1420,2.067,1436,1.399,1437,2.7,1537,1.633,1566,4.637,1581,3.292,1709,1.741,1710,3.015,1711,1.741,1712,5.716,1716,4.944,1718,1.876,1720,1.876,1722,1.876,1724,1.876,1725,3.781,1727,1.876,1729,3.015,1730,2.798,1731,2.956,1732,2.956,1733,2.82,1734,1.876,1735,1.543,1736,2.625,1737,1.876,1738,1.633,1739,2.153,1740,1.399,1741,1.399,1742,2.249,1743,2.82,1744,2.82,1745,2.249,1746,2.249,1747,3.015,1748,4.745,1749,3.781,1750,1.876,1751,4.019,1752,4.33,1753,1.876,1754,1.876,1755,1.876,1756,1.876,1757,1.876,1758,3.015,1759,3.015,1760,1.876,1761,3.781,1762,1.466,1763,3.015,1764,1.876,1765,1.876,1766,3.015,1767,3.539,1768,4.331,1769,4.745,1770,1.876,1771,3.015,1772,1.876,1773,3.015,1774,1.876,1775,3.015,1776,1.876,1777,1.876,1778,1.876,1779,1.876,1780,3.015,1781,1.876,1782,1.741,1783,1.876,1784,3.781,1785,1.876,1786,1.876,1787,1.876,1788,1.876,1789,1.876,1790,1.633,1791,1.876,1792,1.876,1793,1.876,1794,1.876,1795,1.876,1796,1.876,1797,1.876,1798,1.876,1799,3.781,1800,1.876,1801,1.876,1802,1.876,1803,1.876,1804,1.876,1805,3.015,1806,1.876,1807,1.876,1808,3.015,1809,1.876,1810,1.876,1811,3.015,1812,1.876,1813,1.876,1814,1.876,1815,1.876,1816,1.876,1817,2.798,1818,1.876,1819,1.876,1820,1.876,1821,1.876,1822,1.876,1823,1.876,1824,1.876,1825,1.876,1826,1.876,1827,3.015,1828,3.015,1829,1.339,1830,1.876,1831,1.876,1832,1.876,1833,1.876,1834,3.015,1835,1.876,1836,1.876,1837,1.876,1838,1.876,1839,2.481,1840,1.876,1841,1.741,1842,1.741,1843,2.481,1844,1.741,1845,1.741,1846,4.331,1847,1.876,1848,1.876,1849,3.781,1850,4.745,1851,1.876,1852,3.015,1853,1.876,1854,1.876,1855,1.876,1856,3.015,1857,3.015,1858,1.876]],["title/classes/NotificationRequestDto.html",[80,0.059,2102,3.303]],["body/classes/NotificationRequestDto.html",[3,0.144,4,0.115,5,0.115,12,0.31,13,0.95,18,0.571,19,0.35,20,0.009,29,0.487,79,0.144,80,0.104,259,0.008,302,0.008,304,2.258,310,2.147,311,3.696,312,0.95,322,2.823,684,4.093,700,5.741,704,5.741,881,4.958,1165,4.093,2102,5.78,2103,8.26,2104,8.26,2105,6.647,2106,7.739,2107,7.739,2108,4.859]],["title/classes/Oauth2AuthorizationServerResponse.html",[80,0.059,2109,3.559]],["body/classes/Oauth2AuthorizationServerResponse.html",[3,0.105,4,0.084,5,0.084,7,0.992,11,1.456,12,0.227,13,0.779,18,0.662,19,0.388,20,0.009,22,1.563,27,2.839,28,5.107,79,0.105,80,0.064,82,4.795,89,2.261,91,3.367,106,3.133,119,4.374,195,1.227,259,0.006,302,0.006,304,1.65,312,1.054,323,3.864,332,3.764,338,2.788,514,4.783,610,2.853,639,6.726,647,6.135,757,3.196,758,5.749,760,5.749,762,5.749,765,5.749,768,5.749,769,5.749,771,5.749,773,5.749,795,5.107,1021,2.753,1064,6.075,1067,2.99,1080,4.205,1208,3.809,1218,5.341,1360,5.107,1473,4.446,1488,3.809,1987,4.193,2109,5.107,2110,8.672,2111,4.752,2112,4.752,2113,8.173,2114,4.752,2115,4.752,2116,3.824,2117,4.752,2118,4.752,2119,5.599,2120,6.346,2121,4.193]],["title/classes/OfferRequest.html",[80,0.059,1903,2.928]],["body/classes/OfferRequest.html",[3,0.127,4,0.102,5,0.102,7,1.496,11,1.316,12,0.274,13,0.88,16,1.007,18,0.622,19,0.389,20,0.009,22,1.413,29,0.492,51,2.738,79,0.158,80,0.105,98,2.785,136,1.896,195,1.851,259,0.007,302,0.007,304,1.992,310,2.169,311,3.207,312,0.96,316,3.657,320,3.803,321,4.119,322,2.49,350,2.738,458,2.045,616,3.444,684,3.61,692,4.918,698,5.063,837,4.303,896,2.567,934,2.045,1903,4.746,1906,3.61,1924,5.176,1925,4.618,1926,4.918,1939,5.838,1940,3.799,2108,4.285,2122,7.224,2123,5.738,2124,5.738,2125,5.353,2126,5.738,2127,5.738,2128,5.063,2129,5.738,2130,6.324,2131,6.324,2132,4.618,2133,4.285]],["title/classes/OfferResponse.html",[80,0.059,1906,2.782]],["body/classes/OfferResponse.html",[3,0.133,4,0.107,5,0.107,7,1.262,11,1.387,12,0.288,13,0.909,18,0.642,19,0.362,20,0.009,22,1.489,29,0.504,51,2.886,79,0.163,80,0.107,98,2.155,136,1.599,195,1.562,259,0.007,302,0.007,304,2.099,311,3.313,312,0.909,316,3.472,320,3.929,321,4.255,322,2.624,350,2.886,458,2.852,684,3.804,692,3.804,695,5.335,837,3.63,896,3.581,934,2.155,1903,4.004,1906,4.658,1924,4.902,1925,4.866,1926,4.658,1939,4.516,1940,4.004,2108,4.516,2122,7.061,2125,4.516,2130,6.533,2131,6.533,2132,4.866,2133,4.516,2134,6.047]],["title/controllers/Oid4vciController.html",[342,1.576,1972,3.559]],["body/controllers/Oid4vciController.html",[3,0.113,4,0.09,5,0.09,11,1.948,12,0.244,16,0.935,18,0.615,19,0.355,20,0.009,29,0.535,33,0.901,51,2.439,79,0.113,80,0.069,94,2.441,109,1.183,110,0.969,135,1.799,151,2.7,160,2.803,188,2.937,190,1.679,191,1.232,193,2.681,240,2.819,246,4.298,247,2.803,257,3.58,259,0.007,302,0.007,310,1.847,312,0.817,340,4.902,342,1.821,344,1.975,346,1.601,458,2.795,464,5.194,502,2.523,514,4.487,517,1.761,518,2.613,656,3.58,658,2.819,667,2.523,668,4.664,817,2.937,819,4.112,827,3.118,1092,4.188,1113,2.613,1165,3.215,1921,4.658,1922,4.112,1969,3.215,1972,5.357,1982,4.408,1984,3.817,2102,5.858,2135,5.11,2136,5.11,2137,5.11,2138,5.11,2139,5.11,2140,5.873,2141,5.11,2142,5.11,2143,5.11,2144,4.509,2145,4.509,2146,4.509,2147,3.817,2148,4.112,2149,5.11,2150,4.509,2151,5.11,2152,4.509,2153,5.11,2154,5.11,2155,5.11,2156,5.11,2157,5.11,2158,5.11,2159,5.11,2160,5.11]],["title/injectables/Oid4vciService.html",[30,0.945,1921,2.782]],["body/injectables/Oid4vciService.html",[3,0.058,4,0.046,5,0.046,11,1.732,12,0.274,13,0.505,15,1.752,16,0.877,18,0.618,19,0.354,20,0.009,21,2.137,29,0.524,30,0.878,32,3.978,33,0.462,34,2.536,35,0.909,47,2.834,48,1.293,51,1.962,55,2.468,57,1.835,61,1.962,62,1.835,79,0.058,80,0.035,81,1.25,86,2.427,93,1.114,94,1.355,97,0.842,109,0.918,110,1.643,118,1.838,134,2.722,135,1.432,136,0.693,146,2.515,147,2.609,149,1.34,151,2.61,160,1.731,161,1.731,190,1.671,191,1.156,193,2.228,194,1.835,195,0.676,213,1.445,238,2.185,240,2.268,246,3.083,247,1.103,250,2.427,257,1.835,259,0.004,267,1.648,269,2.108,285,1.445,289,2.03,295,2.88,297,1.572,298,1.572,302,0.004,312,0.906,338,1.322,340,3.36,346,0.989,442,1.673,456,2.362,458,2.742,464,2.722,468,3.07,470,2.161,471,2.343,512,2.108,514,1.445,517,1.651,530,3.655,556,2.586,568,2.268,642,1.572,658,1.445,659,3.45,662,3.822,663,1.835,667,3.542,689,4.027,706,1.012,717,4.339,722,3.308,737,2.468,738,3.308,739,4.083,742,1.734,743,1.835,751,4.083,754,1.648,757,2.571,782,2.181,789,2.88,803,1.784,805,2.108,811,2.88,814,3.308,827,1.731,837,2.468,872,2.108,881,1.572,896,1.172,898,2.108,901,1.899,934,0.933,967,1.956,1023,1.835,1047,1.572,1060,1.445,1068,1.648,1069,2.311,1070,2.311,1071,2.311,1072,2.108,1073,2.311,1074,3.627,1075,3.308,1076,2.311,1092,3.928,1095,2.311,1121,4.477,1141,3.308,1143,2.722,1165,1.648,1378,2.311,1437,1.505,1616,4.083,1617,1.956,1642,1.648,1738,1.835,1903,3.805,1906,2.586,1919,1.956,1921,2.586,1939,1.956,1948,1.956,1961,5.027,1970,3.616,1973,2.311,1982,2.722,1983,1.956,1985,2.311,1997,3.36,2102,4.292,2145,2.311,2146,2.311,2147,3.79,2161,2.62,2162,6.244,2163,5.074,2164,5.074,2165,2.62,2166,4.111,2167,4.111,2168,2.62,2169,2.62,2170,2.62,2171,2.62,2172,2.62,2173,2.62,2174,4.111,2175,3.627,2176,2.62,2177,2.62,2178,2.62,2179,5.747,2180,2.62,2181,5.747,2182,4.111,2183,2.62,2184,4.111,2185,2.62,2186,2.62,2187,2.62,2188,2.62,2189,3.555,2190,1.734,2191,2.62,2192,2.62,2193,4.111,2194,2.62,2195,2.62,2196,4.477,2197,2.62,2198,2.62,2199,2.62,2200,2.62,2201,2.62,2202,2.62,2203,5.074,2204,2.62,2205,2.62,2206,2.62,2207,2.62,2208,2.62,2209,2.62,2210,2.62,2211,5.747,2212,2.62,2213,2.62,2214,2.311,2215,2.311,2216,2.62,2217,2.108,2218,2.62,2219,4.111,2220,2.62,2221,4.111,2222,2.62,2223,2.311,2224,4.111,2225,4.111,2226,4.111,2227,4.111,2228,4.111,2229,4.111,2230,4.111,2231,4.111,2232,2.88,2233,4.625,2234,3.07,2235,3.07,2236,2.62,2237,2.311,2238,5.747,2239,2.62,2240,2.62,2241,2.62,2242,2.62,2243,2.62,2244,2.311,2245,2.62,2246,2.62,2247,4.111,2248,2.62,2249,2.62,2250,2.62,2251,2.62,2252,2.62,2253,2.62,2254,2.62,2255,2.62,2256,6.626,2257,2.62,2258,4.111,2259,4.111,2260,2.311,2261,2.62,2262,2.311,2263,2.62,2264,2.62,2265,2.62,2266,2.62,2267,2.62,2268,2.311,2269,2.62,2270,2.62,2271,2.62,2272,5.747,2273,2.62,2274,4.111,2275,2.62,2276,2.62,2277,2.311,2278,2.311]],["title/controllers/Oid4vpController.html",[342,1.576,2279,3.559]],["body/controllers/Oid4vpController.html",[3,0.112,4,0.09,5,0.09,7,1.059,11,1.52,12,0.242,16,0.931,18,0.656,19,0.3,20,0.009,29,0.511,33,0.895,79,0.112,80,0.068,91,3.516,93,1.374,94,2.676,95,2.692,100,3.79,101,5.17,102,4.949,109,1.058,135,1.909,151,2.658,191,1.227,193,2.609,195,1.711,253,5.614,259,0.007,302,0.007,310,1.838,312,0.814,323,2.79,342,2.629,344,1.961,346,1.594,458,3.021,466,5.94,502,2.505,514,3.655,517,1.752,518,2.595,533,2.916,622,5.842,667,2.505,668,4.642,716,4.872,817,3.808,1109,4.387,1113,2.595,1969,3.192,1982,4.387,1984,3.79,2144,4.477,2147,3.79,2148,4.083,2150,4.477,2152,4.477,2279,5.938,2280,5.074,2281,5.074,2282,6.626,2283,7.379,2284,6.51,2285,5.074,2286,5.074,2287,5.074,2288,4.949,2289,4.477,2290,5.074,2291,5.074,2292,4.387,2293,4.477,2294,4.477,2295,5.074,2296,5.074,2297,5.074,2298,5.074,2299,5.074,2300,5.074,2301,5.074,2302,5.074]],["title/modules/Oid4vpModule.html",[357,1.387,1967,2.782]],["body/modules/Oid4vpModule.html",[3,0.121,4,0.097,5,0.097,20,0.009,29,0.56,33,0.97,79,0.121,80,0.074,259,0.007,302,0.007,344,2.697,357,2.404,359,2.387,360,2.625,361,2.813,362,2.813,363,2.625,364,3.785,365,3.785,369,4.513,374,5.35,375,5.105,377,3.57,378,2.813,379,2.625,382,3.331,385,3.461,393,4.427,404,4.108,716,5.4,1967,5.782,1969,5.35,1970,5.35,1982,4.622,1983,4.108,1984,4.108,2075,4.89,2077,3.034,2279,6.17,2293,4.854,2303,4.854,2304,4.854,2305,4.854,2306,4.854,2307,5.35,2308,5.501,2309,5.501,2310,4.854]],["title/injectables/Oid4vpService.html",[30,0.945,716,2.655]],["body/injectables/Oid4vpService.html",[3,0.054,4,0.044,5,0.044,9,1.481,11,1.66,12,0.118,15,0.652,16,0.781,18,0.62,19,0.251,20,0.009,22,0.607,24,1.177,29,0.514,30,0.838,33,0.435,34,2.478,35,0.856,47,2.641,48,1.218,51,1.177,52,4.064,60,0.754,61,1.177,69,4.483,79,0.054,80,0.033,86,2.377,93,1.062,94,2.317,98,2.161,103,2.928,104,2.253,109,0.626,110,1.573,118,0.684,119,1.218,129,0.953,135,1.391,146,2.385,147,2.514,151,2.685,160,2.554,161,1.651,173,1.985,174,1.985,175,1.309,176,1.985,177,1.985,178,1.985,183,2.353,188,1.418,190,1.402,191,1.029,192,1.842,193,1.26,195,1.435,225,0.98,231,3.418,232,1.842,233,1.842,234,1.842,238,1.609,240,2.163,247,2.054,248,3.644,250,2.561,253,5.101,258,1.218,259,0.004,267,3.497,270,1.651,282,1.728,289,1.935,295,2.747,302,0.004,309,0.637,312,0.682,314,1.739,315,1.481,323,2.554,328,1.552,329,3.029,334,1.361,338,0.793,339,1.481,346,0.943,442,2,456,2.253,458,2.504,462,4.063,466,4.524,470,1.474,517,1.708,533,2.253,541,2.596,556,3.07,568,2.691,575,1.07,608,1.842,612,1.633,613,3.155,619,1.262,622,4.151,656,2.747,657,1.633,662,3.735,663,1.728,671,1.552,685,4.823,692,1.552,706,0.953,716,2.353,754,1.552,766,2.843,803,2.412,809,2.08,817,2.253,829,1.728,896,1.104,901,1.139,934,0.879,960,1.985,1092,2.467,1156,1.262,1201,1.842,1203,2.176,1206,1.728,1208,1.481,1223,3.459,1228,4.473,1239,4.744,1302,1.361,1355,1.842,1488,1.481,1517,2.176,1524,2.176,1538,1.728,1555,1.842,1557,1.985,1616,3.155,1617,1.842,1711,1.842,1738,2.747,1843,3.68,1906,1.552,1970,3.497,1982,2.596,1983,1.842,1997,4.016,2076,4.744,2077,1.361,2147,3.644,2189,3.418,2190,1.633,2215,2.176,2217,1.985,2232,3.894,2233,5.449,2234,2.928,2235,2.928,2237,3.459,2244,5.351,2260,2.176,2262,2.176,2268,3.459,2277,2.176,2284,3.459,2289,3.459,2294,2.176,2311,2.467,2312,4.879,2313,4.879,2314,2.467,2315,2.467,2316,2.467,2317,2.467,2318,3.155,2319,3.155,2320,2.928,2321,2.467,2322,4.473,2323,2.467,2324,2.467,2325,3.921,2326,2.467,2327,2.467,2328,2.467,2329,2.467,2330,2.928,2331,1.633,2332,1.985,2333,2.467,2334,2.467,2335,2.176,2336,5.559,2337,3.921,2338,4.879,2339,2.467,2340,3.921,2341,6.065,2342,2.467,2343,2.467,2344,3.155,2345,2.467,2346,2.467,2347,2.467,2348,2.176,2349,2.467,2350,2.467,2351,2.467,2352,2.467,2353,2.467,2354,2.467,2355,2.467,2356,2.467,2357,2.467,2358,2.467,2359,2.467,2360,2.467,2361,2.467,2362,2.467,2363,4.879,2364,4.879,2365,2.467,2366,2.467,2367,3.921,2368,3.921,2369,2.467,2370,2.467,2371,2.467,2372,2.467,2373,2.467,2374,2.467,2375,2.467,2376,1.985,2377,2.176,2378,2.467,2379,2.467,2380,1.985,2381,2.176,2382,2.467,2383,2.467,2384,5.559,2385,3.921,2386,2.467,2387,2.467,2388,2.467,2389,3.921,2390,2.467,2391,2.467,2392,4.879,2393,3.921,2394,2.467,2395,2.467,2396,2.467,2397,2.467,2398,1.633,2399,5.559,2400,3.921,2401,3.921,2402,2.467,2403,2.467,2404,2.467,2405,3.921,2406,2.467,2407,2.467,2408,2.467,2409,2.467,2410,3.921,2411,2.467,2412,3.921,2413,2.467,2414,4.879,2415,2.467,2416,3.921,2417,2.467,2418,3.921,2419,3.921,2420,2.467,2421,1.842,2422,3.921,2423,2.467,2424,2.467,2425,2.467,2426,2.467,2427,2.467,2428,2.467,2429,4.879,2430,3.921,2431,3.921,2432,2.467,2433,2.467,2434,2.467,2435,2.176,2436,2.467,2437,2.467,2438,2.176,2439,4.879,2440,2.467,2441,2.176,2442,2.467,2443,2.467,2444,2.467,2445,2.467,2446,2.467,2447,2.176,2448,2.467]],["title/classes/ParResponseDto.html",[80,0.059,664,3.559]],["body/classes/ParResponseDto.html",[3,0.143,4,0.114,5,0.114,11,2.028,12,0.308,13,0.946,18,0.568,19,0.349,20,0.009,79,0.143,80,0.087,171,3.941,259,0.008,302,0.008,304,2.242,312,0.946,323,3.245,548,6.15,584,6.799,610,3.878,647,6.201,664,6.201,671,5.181,896,3.816,2116,5.198,2121,5.699,2449,8.235,2450,7.706,2451,7.706]],["title/interfaces/Params.html",[0,0.574,1555,3.303]],["body/interfaces/Params.html",[0,0.775,2,1.296,3,0.096,4,0.077,5,0.077,12,0.285,13,0.733,18,0.542,19,0.369,20,0.009,22,1.897,60,2.434,79,0.162,88,2.145,109,0.954,110,1.698,118,1.205,191,1.106,193,2.621,206,3.433,219,3.24,258,3.627,259,0.006,302,0.006,309,2.105,442,1.432,470,3.065,502,2.145,557,2.877,644,1.633,905,2.733,927,1.47,934,3.093,1029,4.293,1531,3.496,1532,3.833,1533,5.269,1534,3.833,1535,6.405,1536,5.913,1537,3.044,1538,6.032,1539,5.491,1540,3.833,1541,3.833,1542,3.833,1543,3.833,1544,3.833,1545,3.833,1546,3.833,1547,5.491,1548,3.833,1549,6.02,1550,3.833,1551,3.833,1552,3.833,1553,3.833,1554,3.833,1555,6.088,1556,3.833,1557,3.496,1558,3.833,1559,6.02,1560,3.833,1561,3.833,1562,3.833,1563,6.02,1564,3.833,1565,5.269,1566,3.044,1567,3.833,1568,5.269,1569,5.269,1570,5.269,1571,3.833,1572,3.833,1573,3.833,1574,6.02,1575,3.833,1576,3.833,1577,3.833,1578,5.269,1579,3.833,1580,3.833,1581,3.044,1582,3.833]],["title/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,0.574,748,3.559]],["body/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,0.435,2,1,3,0.074,4,0.059,5,0.059,11,1.733,12,0.16,13,0.609,18,0.622,19,0.33,20,0.009,21,1.411,29,0.521,30,1.06,33,0.591,34,2.162,35,1.164,38,1.227,47,2.416,48,1.655,51,1.6,60,1.025,79,0.109,80,0.045,86,2.469,93,0.908,98,1.768,109,1.166,110,1.657,113,2.012,118,2.025,119,1.655,129,2.283,136,1.312,146,2.346,147,2.687,151,2.728,159,1.5,161,2.488,164,2.22,190,0.845,193,2.241,195,1.885,213,1.849,236,2.504,238,2.298,246,1.655,247,2.089,250,1.134,256,1.926,259,0.005,270,2.935,302,0.005,309,0.866,329,2.922,334,2.737,337,2.538,338,1.899,341,3.021,458,2.948,468,3.706,470,1.866,555,2.504,568,1.849,581,2.22,612,3.285,619,3.34,632,2.698,636,4.324,642,2.012,643,3.706,655,4.552,656,4.139,657,2.22,658,1.849,659,2.012,661,2.698,662,3.259,663,2.349,671,3.717,685,4.877,689,3.476,707,2.958,710,2.958,711,2.958,712,2.958,714,2.958,716,3.546,717,3.395,720,2.698,722,5.255,723,2.958,725,5.761,733,2.958,737,3.92,738,5.255,739,4.754,740,3.224,741,2.958,742,2.22,743,2.349,744,2.958,745,2.958,746,2.504,747,2.012,748,4.754,749,5.761,750,4.378,751,3.993,752,2.958,753,4.378,754,2.109,755,5.212,756,2.958,757,2.643,758,2.698,759,2.958,760,2.698,761,2.958,762,2.698,763,2.958,764,2.958,765,2.698,766,2.538,767,2.349,768,2.698,769,2.698,770,2.958,771,2.698,772,2.958,773,2.698,774,2.958,775,2.958,776,2.958,777,4.378,778,2.958,779,2.698,780,2.958,781,2.958,782,3.873,783,2.958,784,2.958,785,2.958,786,2.958,787,2.958,788,4.378,789,3.476,790,2.958,791,5.255,792,2.958,793,2.958,794,2.958,795,4.754,796,2.958,797,2.958,798,2.958,799,2.958,800,2.958,801,2.958,802,2.958,803,1.454,804,2.958,805,3.993,806,2.958,807,2.958,808,1.926,809,1.779,810,2.698,811,2.349,812,2.958,813,2.698,814,2.698,815,2.958,816,2.958,817,1.926,818,3.285,819,2.698,820,2.958,821,4.378,822,2.958,823,2.958,824,2.958,825,2.958,826,2.958,827,1.411,828,2.349,829,2.349,830,4.378,831,2.958,832,3.285,833,2.349,834,4.378,835,2.958,836,2.958,837,2.012,838,2.958,839,2.958,840,2.958,841,2.958,842,2.958,843,2.958,844,2.958,845,2.958,846,2.958,847,2.958,848,2.958]],["title/interfaces/PathSerializer.html",[0,0.574,1736,3.099]],["body/interfaces/PathSerializer.html",[0,0.494,2,0.71,3,0.052,4,0.042,5,0.042,11,1.366,12,0.26,13,0.468,15,1.26,18,0.579,19,0.355,20,0.01,22,0.938,29,0.375,38,0.87,60,2.121,79,0.162,80,0.032,88,3.295,89,1.94,93,0.644,107,2.367,109,1.348,110,1.681,118,1.511,127,3.129,129,0.919,136,1.681,137,2.273,141,0.973,143,1.367,146,0.765,147,0.765,171,3.25,190,1.201,191,1.413,193,0.765,195,1.641,206,2.508,211,1.135,219,2.915,225,0.945,246,2.688,250,1.611,259,0.004,263,2.526,270,2.005,302,0.004,309,2.226,314,2.378,323,1.002,338,2.684,341,1.948,430,0.71,442,1.795,445,3.309,470,2.689,474,2.598,489,1.777,495,1.777,552,1.428,818,1.575,832,1.575,901,2.751,903,1.667,917,3.68,918,2.396,922,2.737,923,2.436,927,2.419,934,2.378,938,2.436,939,4.306,941,2.101,974,1.367,978,1.496,982,2.189,991,1.496,1009,1.496,1012,2.396,1015,2.396,1017,2.396,1019,1.428,1020,1.428,1021,1.652,1022,1.428,1026,1.428,1035,3.576,1036,3.268,1048,2.351,1419,3.337,1420,2.101,1436,1.428,1437,2.737,1537,1.667,1566,4.676,1581,3.337,1709,1.777,1710,3.065,1711,1.777,1712,3.833,1716,4.984,1718,1.914,1720,1.914,1722,1.914,1724,1.914,1725,3.833,1727,1.914,1729,3.065,1730,2.844,1731,2.996,1732,2.996,1733,2.859,1734,1.914,1735,1.575,1736,3.337,1737,1.914,1738,1.667,1739,2.189,1740,1.428,1741,1.428,1742,2.286,1743,2.859,1744,2.859,1745,2.286,1746,2.286,1747,3.065,1748,4.794,1749,3.833,1750,1.914,1751,4.066,1752,4.363,1753,1.914,1754,1.914,1755,1.914,1756,1.914,1757,1.914,1758,3.065,1759,3.065,1760,1.914,1761,3.833,1762,1.496,1763,3.065,1764,1.914,1765,1.914,1766,3.065,1767,3.576,1768,4.382,1769,4.794,1770,1.914,1771,3.065,1772,1.914,1773,3.065,1774,1.914,1775,3.065,1776,1.914,1777,1.914,1778,1.914,1779,1.914,1780,3.065,1781,1.914,1782,1.777,1783,1.914,1784,3.833,1785,1.914,1786,1.914,1787,1.914,1788,1.914,1789,1.914,1790,1.667,1791,1.914,1792,1.914,1793,1.914,1794,1.914,1795,1.914,1796,1.914,1797,1.914,1798,1.914,1799,3.833,1800,1.914,1801,1.914,1802,1.914,1803,1.914,1804,1.914,1805,3.065,1806,1.914,1807,1.914,1808,3.065,1809,1.914,1810,1.914,1811,3.065,1812,1.914,1813,1.914,1814,1.914,1815,1.914,1816,1.914,1817,2.844,1818,1.914,1819,1.914,1820,1.914,1821,1.914,1822,1.914,1823,1.914,1824,1.914,1825,1.914,1826,1.914,1827,3.065,1828,3.065,1829,1.367,1830,1.914,1831,1.914,1832,1.914,1833,1.914,1834,3.065,1835,1.914,1836,1.914,1837,1.914,1838,1.914,1839,2.522,1840,1.914,1841,1.777,1842,1.777,1843,2.522,1844,1.777,1845,1.777,1846,4.382,1847,1.914,1848,1.914,1849,3.833,1850,4.794,1851,1.914,1852,3.065,1853,1.914,1854,1.914,1855,1.914,1856,3.065,1857,3.065,1858,1.914]],["title/entities/PresentationConfig.html",[1859,2.183,2398,2.928]],["body/entities/PresentationConfig.html",[3,0.105,4,0.084,5,0.084,7,0.989,10,3.802,11,2.019,12,0.226,13,0.778,15,2.099,16,1.07,18,0.562,19,0.377,20,0.009,25,4.438,26,3.24,29,0.5,49,4.999,51,2.262,78,4.438,79,0.105,80,0.085,97,2.036,104,3.64,136,2.014,149,3.24,151,2.237,168,3.895,188,3.64,195,1.636,202,2.748,206,3.004,247,1.996,248,5.328,259,0.006,302,0.006,310,2.266,311,2.834,312,1.003,320,4.041,322,2.056,329,3.551,337,3.649,338,2.036,350,2.262,430,1.89,617,5.739,618,3.361,619,3.24,621,4.731,625,4.731,680,3.54,747,2.845,873,5.042,987,4.194,1109,4.194,1173,2.614,1476,3.814,1859,3.76,1860,2.845,1862,4.182,1863,4.999,1865,4.182,1868,3.54,1869,5.098,1871,5.589,1873,5.328,1874,4.182,1877,5.688,1878,5.098,1882,4.182,1885,4.438,1888,5.589,2292,4.194,2344,5.742,2398,4.194,2452,8.339,2453,4.74,2454,4.74,2455,7.135,2456,4.74,2457,4.74,2458,4.74,2459,4.74,2460,4.74,2461,4.74,2462,4.74]],["title/classes/PresentationDuringIssuance.html",[80,0.059,1876,3.303]],["body/classes/PresentationDuringIssuance.html",[3,0.137,4,0.11,5,0.11,7,1.297,12,0.296,13,0.924,16,1.058,18,0.665,19,0.39,20,0.009,29,0.474,79,0.166,80,0.109,191,1.15,259,0.008,302,0.008,304,2.157,310,2.089,311,4.054,312,0.924,320,4.297,322,2.696,329,3.624,337,4.142,747,3.73,984,3.068,1100,4.984,1876,5.622,2463,7.146,2464,5.483,2465,6.214,2466,6.214,2467,5.483,2468,5.483,2469,5.483]],["title/controllers/PresentationManagementController.html",[342,1.576,2470,3.559]],["body/controllers/PresentationManagementController.html",[3,0.083,4,0.067,5,0.067,7,0.789,11,1.84,12,0.18,15,1.935,16,0.971,18,0.51,19,0.383,20,0.009,24,1.805,29,0.528,33,0.667,51,2.586,52,3.8,60,2.114,79,0.083,80,0.051,86,1.833,89,2.463,93,1.025,94,2.412,97,2.447,98,1.348,105,3.796,106,1.867,107,1.503,109,1.011,110,1.028,135,1.873,146,2.035,147,1.742,191,1.28,193,2.52,195,2.108,203,3.587,204,3.252,240,2.989,247,1.593,253,3.587,259,0.005,270,3.081,289,2.675,302,0.005,309,1.399,310,1.918,312,0.849,315,3.252,316,1.641,329,1.692,339,2.271,342,1.348,344,1.462,346,1.303,350,1.805,471,3.946,474,3.021,502,1.867,507,3.796,517,1.828,518,3.238,520,2.504,521,4.36,522,4.047,530,4.713,535,2.825,539,4.047,544,2.424,588,2.38,619,4.175,655,3.638,658,2.086,667,2.675,673,3.044,692,3.409,716,3.8,896,2.424,905,2.38,927,1.279,1021,2.747,1099,3.252,1134,4.047,1172,2.504,1336,2.504,1790,2.65,1839,2.504,1893,3.8,1894,4.78,1895,5.586,1897,3.337,1899,3.337,1902,3.337,1904,3.337,1905,4.78,1906,3.983,1907,3.337,1914,4.78,1915,3.044,1916,3.337,1917,3.044,1918,3.044,1919,2.825,1924,2.504,1926,3.983,1928,4.36,1929,4.36,1931,3.337,1932,3.337,1933,4.78,1934,6.099,1935,3.337,1936,3.337,1937,5.095,1938,4.78,1940,3.587,1941,3.337,1948,4.728,1949,3.337,1950,3.044,1951,3.337,1952,3.337,1953,3.337,1954,3.337,1955,3.337,1956,3.337,1959,3.337,2332,3.044,2398,4.577,2470,4.36,2471,3.782,2472,5.586,2473,3.782,2474,5.418,2475,3.782,2476,6.127,2477,3.782,2478,3.782,2479,3.782,2480,3.782,2481,3.782,2482,3.337,2483,3.044,2484,3.782,2485,3.782,2486,3.782,2487,3.782,2488,3.782,2489,3.782,2490,3.782,2491,3.782,2492,3.782,2493,3.782,2494,3.782,2495,3.782,2496,3.782,2497,3.782,2498,3.782]],["title/classes/PresentationRequest.html",[80,0.059,2476,3.559]],["body/classes/PresentationRequest.html",[3,0.118,4,0.095,5,0.095,7,1.12,11,1.895,12,0.256,13,0.844,15,1.818,16,0.966,18,0.507,19,0.394,20,0.009,26,3.515,29,0.433,79,0.152,80,0.092,97,2.717,195,2.219,202,2.982,229,3.791,253,5.019,259,0.007,302,0.007,304,1.864,310,2.103,311,3.392,312,0.931,316,3.468,320,3.647,321,3.95,322,2.33,326,4.551,329,3.844,337,3.877,341,3.515,611,4.815,618,3.647,619,4.225,655,3.086,684,3.378,692,4.769,702,4.738,747,3.223,896,3.392,1924,5.019,1926,4.769,1937,4.321,1940,3.555,2060,5.531,2108,4.01,2125,4.01,2128,4.738,2132,5.531,2292,4.551,2476,5.531,2499,6.432,2500,5.37,2501,5.37,2502,6.873]],["title/interfaces/PresentationRequestOptions.html",[0,0.574,2322,3.559]],["body/interfaces/PresentationRequestOptions.html",[0,0.815,2,1.874,3,0.139,4,0.111,5,0.111,7,1.31,11,1.866,12,0.299,13,0.93,16,1.26,18,0.6,19,0.343,20,0.009,26,3.874,29,0.395,79,0.139,97,2.435,195,1.956,259,0.008,302,0.008,329,3.931,337,4.32,458,3.13,611,5.307,747,3.769,2292,5.016,2322,6.798,2499,5.053,2503,6.279,2504,6.097]],["title/modules/PresentationsModule.html",[357,1.387,2307,2.782]],["body/modules/PresentationsModule.html",[3,0.131,4,0.105,5,0.105,20,0.009,29,0.558,33,1.044,52,5.452,79,0.131,80,0.079,259,0.007,302,0.007,344,2.823,357,2.485,359,2.567,360,2.824,361,3.026,362,3.026,363,2.824,364,3.913,365,3.913,377,3.736,378,3.026,379,2.824,382,3.487,1170,3.14,1172,3.918,1440,3.918,1967,4.597,2075,5.119,2077,3.264,2307,5.623,2398,3.918,2470,6.379,2482,5.221,2483,4.762,2505,5.221,2506,5.221,2507,5.221,2508,5.221,2509,6.068,2510,5.918,2511,7.306,2512,5.918,2513,5.918,2514,5.221,2515,5.918]],["title/injectables/PresentationsService.html",[30,0.945,52,2.655]],["body/injectables/PresentationsService.html",[3,0.051,4,0.041,5,0.041,7,1.429,10,3.758,11,0.851,12,0.11,13,0.455,15,2.349,16,0.925,18,0.646,19,0.336,20,0.009,21,1.961,22,0.567,29,0.476,30,0.792,32,3.758,33,0.406,52,3.207,71,3.207,78,4.386,79,0.051,80,0.031,81,1.098,86,2.392,91,1.968,93,1.447,94,2.737,95,3.494,97,2.612,98,0.82,101,3.742,102,2.77,103,2.77,104,2.131,105,4.799,109,1.298,110,1.341,118,1.901,132,1.357,135,1.83,136,1.549,137,1.77,141,0.941,146,2.013,147,1.717,149,4.079,151,2.633,164,3.537,190,1.938,191,1.344,195,0.958,200,3.989,225,2.722,226,1.852,235,1.524,238,1.223,240,3.779,250,1.254,257,2.598,259,0.004,270,2.249,302,0.004,309,1.203,312,0.929,314,1.321,346,0.892,430,1.39,442,1.223,490,2.984,493,2.455,512,1.852,517,1.92,533,1.322,544,2.39,568,1.269,575,2.716,608,3.989,613,2.984,617,2.455,619,3.986,674,5.524,706,0.889,737,1.381,740,2.299,766,1.896,767,4.613,782,1.968,803,3.423,817,2.131,896,2.801,905,3.361,923,1.896,927,0.778,989,2.333,1007,2.598,1016,2.598,1060,1.269,1080,2.045,1104,3.989,1109,2.455,1129,4.386,1134,2.77,1141,3.748,1154,3.748,1156,4.119,1157,1.719,1158,1.719,1159,6.24,1160,1.719,1161,4.36,1169,1.612,1170,1.221,1172,1.524,1193,3.272,1232,5.973,1235,6.086,1289,1.719,1290,1.719,1291,1.136,1607,2.333,1619,1.448,1642,2.333,1677,1.612,1714,2.226,1843,2.455,1859,3.091,1860,2.226,1863,1.612,2076,4.955,2077,1.269,2288,2.77,2330,1.719,2331,1.524,2344,1.852,2398,5.007,2421,1.719,2447,2.03,2472,3.272,2483,1.852,2516,2.301,2517,3.708,2518,6.85,2519,6.585,2520,4.658,2521,5.342,2522,3.708,2523,4.658,2524,3.708,2525,4.658,2526,3.708,2527,1.852,2528,5.087,2529,5.342,2530,3.708,2531,3.272,2532,3.272,2533,3.708,2534,3.708,2535,2.301,2536,6.85,2537,3.708,2538,3.708,2539,2.301,2540,2.301,2541,3.708,2542,2.301,2543,2.301,2544,2.301,2545,5.858,2546,5.342,2547,2.301,2548,4.658,2549,3.708,2550,2.301,2551,3.708,2552,3.708,2553,2.301,2554,4.658,2555,2.301,2556,3.708,2557,3.708,2558,2.301,2559,2.301,2560,2.301,2561,2.301,2562,2.301,2563,2.301,2564,3.708,2565,2.301,2566,2.301,2567,2.301,2568,2.301,2569,1.852,2570,2.301,2571,2.301,2572,2.301,2573,2.301,2574,2.301,2575,2.301,2576,2.301,2577,2.301,2578,2.301,2579,2.301,2580,2.301,2581,2.301,2582,2.301,2583,2.301,2584,2.301,2585,2.301,2586,2.301,2587,2.301,2588,2.301,2589,2.301,2590,2.301,2591,2.301,2592,2.301,2593,2.301,2594,4.658,2595,2.301,2596,2.301,2597,2.301,2598,2.301,2599,2.984,2600,3.708,2601,2.301,2602,2.301]],["title/interfaces/PresentedData.html",[0,0.574,2603,3.559]],["body/interfaces/PresentedData.html",[0,0.893,2,1.607,3,0.119,4,0.095,5,0.095,7,1.124,11,1.235,12,0.257,13,0.846,15,1.424,18,0.56,19,0.343,20,0.009,22,1.326,79,0.119,87,2.487,98,1.919,109,1.278,110,1.604,118,2.22,141,2.202,146,1.731,147,2.214,160,3.482,190,1.358,195,1.391,259,0.007,263,2.14,270,2.268,294,2.971,302,0.007,328,4.332,329,2.41,338,1.731,430,1.607,509,5.542,511,4.334,518,3.522,544,3.58,616,4.134,782,2.858,827,2.268,989,3.388,1642,3.388,1940,3.566,2292,3.566,2603,6.109,2604,4.334,2605,5.386,2606,6.076,2607,5.386,2608,5.386,2609,4.752,2610,6.698,2611,5.542,2612,6.076,2613,4.334,2614,4.752,2615,5.542,2616,6.076,2617,4.334,2618,6.076,2619,6.076,2620,4.752,2621,4.752,2622,4.752,2623,6.076,2624,6.076,2625,4.752,2626,4.752,2627,4.752,2628,4.752,2629,4.752,2630,4.752,2631,4.752,2632,4.752,2633,4.752,2634,4.752,2635,4.752,2636,4.752,2637,4.334]],["title/interfaces/ProcessResponse.html",[0,0.574,2611,3.559]],["body/interfaces/ProcessResponse.html",[0,0.897,2,1.617,3,0.12,4,0.096,5,0.096,7,1.131,11,1.243,12,0.258,13,0.849,15,1.433,18,0.562,19,0.344,20,0.009,22,1.334,79,0.12,87,2.502,98,1.931,109,1.281,110,1.606,118,2.225,141,2.216,146,1.742,147,2.222,160,2.281,190,1.366,195,1.785,259,0.007,263,2.153,270,2.281,294,2.989,302,0.007,328,4.349,329,2.424,338,1.742,430,1.617,509,5.563,511,4.36,518,3.535,544,3.588,616,4.15,782,2.875,827,2.911,989,3.409,1642,3.409,2603,5.563,2604,4.36,2606,4.78,2609,4.78,2610,7.596,2611,6.127,2612,6.099,2613,4.36,2614,4.78,2615,5.563,2616,6.099,2617,4.36,2618,6.099,2619,6.099,2620,4.78,2621,4.78,2622,4.78,2623,6.099,2624,6.099,2625,4.78,2626,4.78,2627,4.78,2628,4.78,2629,4.78,2630,4.78,2631,4.78,2632,4.78,2633,4.78,2634,4.78,2635,4.78,2636,4.78,2637,4.36]],["title/interfaces/QuerySerializerOptions.html",[0,0.574,918,2.782]],["body/interfaces/QuerySerializerOptions.html",[0,0.621,2,1.428,3,0.106,4,0.085,5,0.085,12,0.228,13,0.783,16,1.151,18,0.617,19,0.37,20,0.009,22,2.016,27,3.207,29,0.301,79,0.181,88,3.539,109,1.221,110,1.585,118,1.768,193,2.457,206,2.014,225,3.164,259,0.006,263,2.533,302,0.006,309,2.336,442,2.102,644,2.396,916,5.709,917,2.538,918,4.01,923,4.187,927,2.586,934,1.705,1019,2.872,1020,4.303,1048,3.539,1060,3.516,1419,4.465,1420,3.516,1730,3.573,1736,3.352,1739,2.749,1767,4.589,1829,2.749,1841,4.76,2638,4.221,2639,5.534,2640,3.167,2641,4.784,2642,7.644,2643,4.784,2644,6.374,2645,4.784,2646,6.374,2647,6.374,2648,6.374,2649,4.784,2650,4.784,2651,4.784,2652,4.784,2653,4.784,2654,6.374,2655,4.784]],["title/classes/RegistrarConfig.html",[58,3.303,80,0.059]],["body/classes/RegistrarConfig.html",[3,0.142,4,0.114,5,0.114,7,1.341,9,4.611,10,4.611,12,0.306,13,0.943,15,2.361,16,1.196,18,0.628,19,0.348,20,0.009,58,6.136,59,4.799,75,6.181,79,0.142,80,0.103,97,2.066,132,2.351,185,5.736,259,0.008,302,0.008,304,2.23,312,0.943,1067,4.042,2656,8.216,2657,6.425,2658,8.216,2659,6.425,2660,6.425]],["title/modules/RegistrarModule.html",[357,1.387,374,2.782]],["body/modules/RegistrarModule.html",[3,0.122,4,0.098,5,0.098,7,1.153,20,0.009,29,0.525,33,0.975,59,5.738,69,6.009,70,4.404,71,4.202,79,0.154,80,0.074,104,4.023,110,1.048,132,2.562,259,0.007,302,0.007,334,3.048,357,2.533,359,3.334,360,2.637,361,2.826,362,2.826,363,2.637,364,3.793,365,3.793,369,4.518,374,5.688,377,3.58,378,2.826,379,2.637,382,3.855,384,4.202,385,3.477,392,4.876,425,4.447,1099,3.317,1450,6.183,1675,4.127,1735,3.659,2307,5.357,2661,4.876,2662,4.876,2663,5.527,2664,4.876,2665,5.527,2666,6.176,2667,5.527,2668,5.527,2669,5.527,2670,5.527,2671,5.527,2672,5.527,2673,5.527,2674,7.684,2675,7.684,2676,5.527,2677,5.527]],["title/injectables/RegistrarService.html",[30,0.945,69,2.928]],["body/injectables/RegistrarService.html",[0,0.249,1,2.573,3,0.042,4,0.034,5,0.102,6,1.694,7,0.857,8,1.694,9,5.04,10,5.04,11,0.44,12,0.092,13,0.393,14,1.545,15,1.897,16,0.931,17,4.282,18,0.626,19,0.317,20,0.009,21,0.808,22,0.473,23,2.24,24,0.916,25,1.345,26,0.982,27,1.431,28,1.545,29,0.461,30,0.683,31,4.024,32,3.448,33,0.339,34,2.424,35,0.667,36,5.374,37,1.545,38,2.979,39,1.694,40,2.821,41,2.821,42,2.821,43,2.821,44,2.821,45,2.821,46,1.545,47,2.794,48,0.948,49,3.356,50,1.694,51,0.916,52,4.102,53,1.694,54,1.103,55,1.153,56,1.059,57,1.345,58,5.554,59,6.343,60,2.455,61,1.96,62,1.345,63,1.271,64,1.059,65,1.103,66,1.153,67,1.271,68,1.103,69,3.803,70,2.011,71,1.919,72,2.821,73,2.388,74,5.374,75,5.985,76,2.821,77,4.226,78,4.914,79,0.042,80,0.026,81,0.916,82,2.753,83,4.226,84,1.919,85,2.117,86,2.771,87,1.477,88,0.948,89,2.273,90,2.821,91,1.697,92,3.624,93,1.298,94,2.008,95,3.048,96,2.573,97,2.129,98,1.139,99,2.573,100,2.388,101,2.24,102,2.388,103,2.388,104,1.837,105,2.24,106,0.948,107,1.633,108,2.821,109,1.222,110,1.45,111,1.694,112,1.694,113,1.919,114,1.694,115,2.24,116,1.694,117,1.694,118,2.147,119,0.948,120,1.694,121,1.694,122,1.694,123,1.694,124,1.694,125,5.374,126,1.694,127,1.103,128,1.694,129,0.742,130,2.821,131,2.388,132,1.753,133,4.226,134,3.172,135,1.775,136,1.267,137,1.526,138,2.117,139,4.226,140,2.821,141,1.959,142,3.614,143,1.837,144,2.821,145,2.821,146,2.561,147,2.197,148,2.821,149,1.635,150,2.821,151,2.597,152,2.388,153,2.117,154,2.821,155,5.068,156,1.694,157,1.694,158,2.821,159,1.431,160,1.346,161,1.346,162,2.821,163,1.578,164,3.523,165,4.226,166,1.694,167,1.694,168,1.635,169,1.694,170,1.694,171,0.982,172,1.694,173,1.545,174,1.545,175,1.019,176,1.545,177,1.545,178,1.545,179,1.694,180,1.694,181,1.694,182,1.694,183,1.153,184,2.821,185,5.357,186,4.024,187,5.068,188,3.301,189,2.821,190,1.208,191,1.448,192,1.434,193,1.321,194,2.24,195,0.496,196,1.694,197,1.694,198,2.821,199,2.821,200,2.388,201,3.578,202,1.387,203,3.803,204,3.448,205,2.821,206,0.808,207,1.694,208,1.694,209,1.694,210,1.694,211,3.161,212,4.947,213,2.935,214,3.306,215,2.821,216,2.878,217,3.624,218,2.821,219,1.904,220,4.694,221,3.306,222,5.068,223,2.573,224,1.694,225,0.763,226,1.545,227,1.694,228,1.694,229,2.642,230,3.624,231,2.24,232,1.434,233,1.434,234,1.434,235,1.271,236,1.434,237,1.694,238,1.354,239,2.821,240,1.059,241,2.117,242,1.694,243,1.694,244,3.624,245,3.624,246,1.578,247,1.73,248,3.578,249,1.694,250,1.081,251,1.694,252,1.545,253,3.172,254,1.694,255,1.694,256,1.103,257,1.345,258,0.948,259,0.004,260,1.545,261,1.694,262,1.694,263,1.633,264,1.694,265,1.694,266,1.694,267,1.208,268,1.694,269,1.545,270,0.808,271,1.694,272,1.694,273,2.573,274,1.545,275,1.694,276,1.208,277,1.694,278,1.694,279,1.434,280,1.694,281,1.694,282,2.24,283,2.821,284,2.821,285,1.764,286,2.821,287,1.694,288,1.208,289,0.948,290,1.434,291,2.821,292,2.821,293,1.694,294,1.764,295,1.345,296,1.694,297,1.153,298,1.153,299,2.573,300,2.821,301,1.694,302,0.003,310,0.533,312,0.939,346,0.769,517,1.752,644,0.722,706,0.742,715,1.103,1060,1.764,1250,2.388,2678,3.197,2679,3.197,2680,3.197,2681,3.197,2682,3.197,2683,3.197,2684,1.92,2685,1.92,2686,1.92,2687,1.92,2688,1.92,2689,1.92,2690,1.92,2691,1.92,2692,1.92,2693,1.92,2694,1.92,2695,1.92,2696,1.92,2697,1.92,2698,1.92,2699,1.92]],["title/classes/RegistrationCertificateRequest.html",[49,3.099,80,0.059]],["body/classes/RegistrationCertificateRequest.html",[3,0.135,4,0.108,5,0.108,7,1.275,10,5.024,11,1.709,12,0.291,13,0.915,15,2.126,16,1.047,18,0.55,19,0.337,20,0.009,26,3.81,29,0.469,49,5.863,78,5.863,79,0.135,80,0.1,104,4.281,193,2.759,259,0.007,302,0.007,304,2.12,310,2.067,311,3.597,312,0.915,320,4.265,322,2.65,611,5.22,618,3.953,625,5.564,684,3.843,696,5.39,1090,6.573,2700,8.039,2701,7.092,2702,6.109,2703,6.109]],["title/interfaces/RequestOptions.html",[0,0.574,1026,2.655]],["body/interfaces/RequestOptions.html",[0,0.856,2,1.023,3,0.076,4,0.061,5,0.061,11,1.858,12,0.164,13,0.62,16,1.097,18,0.487,19,0.393,20,0.009,24,1.636,27,1.534,29,0.377,38,2.784,60,2.251,79,0.179,87,1.584,91,1.819,95,1.819,97,1.102,98,1.222,107,2.624,109,0.806,127,2.899,129,1.325,136,0.907,137,1.636,141,1.402,142,2.157,159,1.534,161,2.78,163,1.693,175,3.503,190,1.272,193,2.699,195,2.057,206,3.203,211,2.408,219,2.924,225,3.102,229,1.891,238,1.131,250,2.233,258,2.955,259,0.005,302,0.005,314,1.222,316,1.488,338,2.743,346,0.825,430,2.1,442,1.974,445,3.512,470,2.766,474,1.636,644,2.645,910,2.157,912,2.157,914,2.157,915,2.157,919,2.27,922,4.229,925,3.766,927,1.16,928,3.963,934,2.887,946,2.27,953,2.058,974,1.97,975,2.402,976,4.929,977,4.471,978,2.157,979,3.768,980,3.768,981,2.561,982,2.899,983,2.561,984,3.999,985,4.625,986,2.561,987,2.27,988,2.561,989,4.153,990,2.27,991,2.157,992,1.891,993,2.561,994,2.561,995,2.561,996,2.561,997,3.535,998,3.535,999,2.561,1000,2.561,1001,2.402,1002,2.561,1003,3.768,1004,2.561,1005,3.964,1006,2.561,1007,2.402,1008,2.561,1009,3.766,1010,2.561,1011,2.402,1012,3.174,1013,2.561,1014,2.561,1015,3.174,1016,2.402,1017,2.157,1018,2.561,1019,2.058,1020,2.058,1021,1.488,1022,2.058,1023,2.402,1024,2.402,1025,2.561,1026,3.029,1027,3.768,1028,3.768,1029,3.766,1030,4.194,1031,4.931,1032,6.453,1033,4.471,1034,2.561,1035,4.224,1036,2.058,1037,3.535,1038,2.27,1039,2.402,1040,2.402,1041,2.402,1042,1.891,1043,2.157,1044,2.27,1045,2.402,1046,2.157,1047,2.058,1048,1.693,1049,2.402,1050,5.155,1051,2.402]],["title/modules/ResolverModule.html",[357,1.387,2509,3.099]],["body/modules/ResolverModule.html",[3,0.142,4,0.113,5,0.113,20,0.009,29,0.517,33,1.131,79,0.142,80,0.086,259,0.008,302,0.008,357,2.574,359,2.783,360,3.061,361,3.28,362,3.28,363,3.061,364,4.053,365,4.053,377,3.924,378,3.28,379,3.061,382,3.061,2075,5.375,2077,3.538,2509,6.252,2528,6.427,2704,5.659,2705,5.659,2706,5.659,2707,6.414,2708,6.414]],["title/injectables/ResolverService.html",[30,0.945,2528,3.099]],["body/injectables/ResolverService.html",[3,0.108,4,0.086,5,0.086,7,1.017,10,2.926,12,0.232,16,0.907,19,0.292,20,0.009,21,3.243,22,2.027,24,2.326,29,0.518,30,1.379,33,0.86,79,0.108,80,0.065,93,1.32,94,2.128,109,1.156,110,1.461,118,2.223,132,2.362,135,1.48,141,2.639,146,2.326,147,1.567,190,1.627,191,1.195,195,1.259,213,3.56,238,2.539,241,4.273,247,2.053,259,0.006,260,3.923,302,0.006,312,0.792,314,2.992,346,1.552,470,2.426,517,1.707,564,3.641,575,2.8,653,3.228,657,3.228,706,1.884,737,2.926,740,4.209,757,3.683,782,3.425,803,2.8,1068,4.06,1113,2.493,1161,3.228,1206,4.522,1283,4.301,1291,2.406,1302,3.56,1377,4.301,1607,4.845,1645,4.301,1751,3.641,1961,3.415,2076,5.767,2077,2.689,2330,4.82,2331,3.228,2527,3.923,2528,4.522,2532,5.694,2709,4.875,2710,6.454,2711,6.454,2712,4.875,2713,6.454,2714,4.875,2715,6.454,2716,6.454,2717,5.694,2718,6.454,2719,4.875,2720,4.301,2721,4.875,2722,4.875,2723,4.875,2724,4.875,2725,4.875,2726,4.875,2727,4.875,2728,4.875,2729,4.875,2730,4.875,2731,4.875,2732,6.454,2733,4.301,2734,4.875,2735,4.875,2736,4.301,2737,4.875,2738,4.875,2739,4.875,2740,4.875,2741,4.875,2742,4.875]],["title/classes/SchemaResponse.html",[80,0.059,1167,3.303]],["body/classes/SchemaResponse.html",[3,0.141,4,0.113,5,0.113,12,0.304,13,1.066,18,0.626,19,0.403,20,0.009,79,0.141,80,0.085,259,0.008,302,0.008,304,2.21,309,1.973,312,1.042,334,4.515,430,2.28,610,3.823,927,2.584,934,2.722,1099,4.913,1167,5.706,2116,5.125,2743,8.68,2744,7.64,2745,7.64,2746,7.64,2747,5.619,2748,5.619,2749,5.619]],["title/interfaces/SerializeOptions.html",[0,0.574,2750,3.099]],["body/interfaces/SerializeOptions.html",[0,0.899,2,1.136,3,0.084,4,0.067,5,0.067,18,0.603,19,0.332,20,0.009,22,1.34,27,2.843,79,0.183,88,1.879,98,2.264,109,1.444,110,1.608,118,1.056,136,1.007,168,2.783,191,1.412,238,1.255,250,1.288,259,0.005,263,1.513,302,0.005,309,2.24,332,1.879,430,2.277,442,1.255,642,2.285,644,1.431,917,2.02,927,1.288,934,1.356,938,3.546,939,5.083,941,3.504,984,3.136,992,2.1,1048,1.879,1420,4.208,1436,4.403,1437,4.985,1731,2.395,1732,2.395,1733,4.403,1739,3.128,1740,3.267,1741,3.267,1742,3.814,1743,4.822,1744,4.715,1745,4.403,1746,3.814,1752,4.614,1762,3.997,1767,4.908,1829,2.187,2639,4.206,2640,3.604,2750,4.857,2751,2.667,2752,4.857,2753,3.813,2754,2.843,2755,2.843,2756,2.52,2757,2.843,2758,6.334,2759,2.843,2760,4.745,2761,2.843,2762,5.178,2763,5.178,2764,2.843,2765,2.843,2766,4.065,2767,2.843,2768,2.843,2769,2.843,2770,2.843,2771,2.843,2772,2.843,2773,2.843,2774,2.843,2775,2.843,2776,2.843,2777,2.843,2778,2.843,2779,2.843,2780,2.843]],["title/interfaces/SerializePrimitiveOptions.html",[0,0.574,2752,3.099]],["body/interfaces/SerializePrimitiveOptions.html",[0,0.892,2,1.117,3,0.083,4,0.066,5,0.066,12,0.179,13,0.66,16,0.756,18,0.617,19,0.354,20,0.009,22,1.324,27,3.26,79,0.182,88,1.848,98,2.243,109,1.442,110,1.603,118,1.039,136,0.99,168,2.75,191,1.508,238,1.234,250,1.266,259,0.005,263,1.488,302,0.005,309,2.234,332,1.848,430,2.264,442,1.234,642,2.247,644,1.407,917,1.986,927,1.266,934,1.334,938,3.518,939,5.072,941,3.472,984,2.655,992,2.065,1048,1.848,1420,4.184,1436,4.374,1437,4.972,1731,2.355,1732,2.355,1733,4.374,1739,3.09,1740,3.228,1741,3.228,1742,3.778,1743,4.8,1744,4.692,1745,4.374,1746,3.778,1752,4.584,1762,3.96,1767,5.075,1829,2.151,2639,3.561,2640,3.561,2750,4.409,2751,2.622,2752,4.82,2753,3.768,2754,2.795,2755,2.795,2756,2.478,2757,2.795,2758,6.314,2759,2.795,2760,4.7,2761,2.795,2762,5.138,2763,5.138,2764,2.795,2765,2.795,2766,4.016,2767,2.795,2768,2.795,2769,2.795,2770,2.795,2771,2.795,2772,2.795,2773,2.795,2774,2.795,2775,2.795,2776,2.795,2777,2.795,2778,2.795,2779,2.795,2780,2.795]],["title/interfaces/SerializePrimitiveParam.html",[0,0.574,1733,2.655]],["body/interfaces/SerializePrimitiveParam.html",[0,0.895,2,1.125,3,0.083,4,0.067,5,0.067,12,0.18,13,0.664,18,0.618,19,0.344,20,0.009,22,1.331,27,2.828,79,0.183,88,1.861,98,2.252,109,1.443,110,1.606,118,1.046,136,0.997,168,2.765,191,1.408,238,1.243,250,1.275,259,0.005,263,1.498,302,0.005,309,2.272,332,1.861,430,2.269,442,1.243,642,2.263,644,1.418,917,2.001,927,1.275,934,1.344,938,3.53,939,5.077,941,3.486,984,3.12,992,2.08,1048,1.861,1420,4.195,1436,4.387,1437,4.978,1731,2.372,1732,2.372,1733,4.565,1739,3.107,1740,3.245,1741,3.245,1742,3.794,1743,4.81,1744,4.702,1745,4.387,1746,3.794,1752,4.597,1762,3.976,1767,4.897,1829,2.167,2639,3.579,2640,3.579,2750,4.428,2751,2.642,2752,4.836,2753,3.787,2754,2.816,2755,2.816,2756,2.496,2757,2.816,2758,6.323,2759,2.816,2760,4.72,2761,2.816,2762,5.155,2763,5.155,2764,2.816,2765,2.816,2766,4.037,2767,2.816,2768,2.816,2769,2.816,2770,2.816,2771,2.816,2772,2.816,2773,2.816,2774,2.816,2775,2.816,2776,2.816,2777,2.816,2778,2.816,2779,2.816,2780,2.816]],["title/interfaces/SerializerOptions.html",[0,0.574,2639,2.928]],["body/interfaces/SerializerOptions.html",[0,0.892,2,1.115,3,0.082,4,0.066,5,0.066,12,0.178,13,0.659,18,0.6,19,0.353,20,0.009,22,1.322,27,3.258,79,0.182,88,1.844,98,2.24,109,1.442,110,1.603,118,1.036,136,1.42,168,2.746,191,1.403,238,1.232,250,1.263,259,0.005,263,1.484,302,0.005,309,2.247,332,1.844,430,2.331,442,1.232,642,2.242,644,1.404,917,1.982,927,1.263,934,1.331,938,3.515,939,5.124,941,3.468,984,2.651,992,2.06,1048,3.103,1420,4.182,1436,4.371,1437,4.97,1731,2.35,1732,2.35,1733,4.371,1739,3.086,1740,3.223,1741,3.223,1742,3.774,1743,4.798,1744,4.689,1745,4.371,1746,3.774,1752,5.028,1762,3.955,1767,4.886,1829,2.146,2639,4.162,2640,3.555,2750,4.404,2751,2.617,2752,4.404,2753,3.762,2754,2.79,2755,2.79,2756,2.473,2757,2.79,2758,6.312,2759,2.79,2760,4.695,2761,2.79,2762,5.133,2763,5.133,2764,2.79,2765,2.79,2766,4.01,2767,2.79,2768,2.79,2769,2.79,2770,2.79,2771,2.79,2772,2.79,2773,2.79,2774,2.79,2775,2.79,2776,2.79,2777,2.79,2778,2.79,2779,2.79,2780,2.79]],["title/entities/Session.html",[458,1.576,1859,2.183]],["body/entities/Session.html",[3,0.078,4,0.063,5,0.063,7,0.739,11,1.954,12,0.169,13,0.823,15,1.969,16,1.213,18,0.61,19,0.388,20,0.009,25,4.275,26,3.12,29,0.469,51,2.467,71,2.127,79,0.078,80,0.048,97,1.662,136,2.283,143,3.506,149,2.643,151,1.913,160,3.237,168,3.43,259,0.005,302,0.005,310,2.321,312,1.027,323,3.437,329,3.191,335,3.621,337,3.12,339,3.103,340,4.721,354,3.621,355,3.103,430,2.001,442,1.168,458,3.01,471,2.818,553,3.252,575,2.243,618,3.95,619,3.807,621,3.86,625,5.56,636,4.04,643,5.009,655,3.854,671,3.839,678,5.383,747,2.127,791,4.91,803,1.538,827,3.437,837,5.07,881,2.127,896,3.001,926,2.483,927,2.268,1067,2.23,1092,4.486,1109,3.422,1156,1.812,1160,2.647,1161,2.346,1165,2.23,1173,1.955,1390,4.561,1484,3.86,1677,3.621,1859,3.52,1860,2.127,1863,4.275,1868,2.647,1869,4.16,1873,5.884,1877,6.248,1878,6.947,1885,3.621,1903,4.04,2105,4.16,2217,4.91,2292,3.422,2318,4.16,2332,2.852,2348,5.383,2421,3.86,2617,4.16,2781,3.127,2782,3.544,2783,5.397,2784,3.544,2785,3.544,2786,3.544,2787,5.383,2788,3.544,2789,5.169,2790,3.544,2791,3.544,2792,6.102,2793,3.544,2794,3.544,2795,3.544,2796,4.561,2797,5.169,2798,3.544,2799,5.169,2800,3.544,2801,5.169,2802,3.544,2803,3.544,2804,2.483]],["title/controllers/SessionController.html",[342,1.576,2805,3.559]],["body/controllers/SessionController.html",[3,0.113,4,0.09,5,0.09,7,1.065,12,0.243,15,2.15,16,0.935,18,0.546,19,0.301,20,0.009,26,3.401,29,0.542,33,0.9,79,0.113,80,0.068,86,2.25,89,2.37,93,1.382,94,2.44,109,1.182,135,1.798,160,2.8,190,1.977,191,1.231,193,1.64,259,0.007,302,0.007,309,1.911,310,2.053,312,0.908,342,1.818,344,1.972,346,1.6,350,2.435,355,3.992,458,3.129,471,3.417,502,2.519,517,1.759,518,2.61,520,3.379,530,4.324,535,3.811,544,2.976,588,3.21,662,4.081,667,3.283,1104,5.855,1105,4.184,1127,4.441,1162,3.063,1163,3.811,1714,3.992,1893,3.063,1915,4.107,1917,4.107,1918,4.107,1919,3.811,1928,4.107,1929,4.107,1948,3.811,2288,4.967,2804,4.66,2805,5.352,2806,5.103,2807,7.84,2808,6.651,2809,6.651,2810,5.103,2811,5.103,2812,6.651,2813,5.103,2814,5.103,2815,5.493,2816,6.651,2817,5.103,2818,4.502,2819,4.107,2820,5.868,2821,4.502,2822,4.107,2823,5.103,2824,5.103,2825,5.103,2826,5.103,2827,5.103,2828,5.103,2829,5.103]],["title/interfaces/SessionLogContext.html",[0,0.574,2189,3.099]],["body/interfaces/SessionLogContext.html",[0,0.728,2,1.675,3,0.124,4,0.099,5,0.099,7,1.171,12,0.268,13,0.868,15,1.87,16,1.177,18,0.662,19,0.393,20,0.009,22,1.741,25,4.953,26,4.154,73,4.192,79,0.124,149,3.958,151,2.547,259,0.007,302,0.007,312,0.689,355,4.244,456,4.668,458,3.128,462,5.268,464,5.544,466,5.866,953,4.244,962,5.689,1674,5.28,1997,5.124,2189,4.953,2190,4.681,2232,3.932,2234,6.067,2235,6.481,2504,5.689,2783,5.689,2830,5.689,2831,5.613,2832,5.613,2833,5.613,2834,7.069,2835,7.069,2836,7.069]],["title/injectables/SessionLoggerInterceptor.html",[30,0.945,1969,2.782]],["body/injectables/SessionLoggerInterceptor.html",[3,0.081,4,0.065,5,0.065,7,1.425,11,1.934,12,0.176,15,1.406,16,0.877,19,0.328,20,0.009,22,0.908,29,0.475,30,1.136,33,0.65,79,0.081,80,0.049,81,1.759,86,2.45,89,1.313,91,2.822,93,1.85,94,2.388,95,3.843,96,4.28,106,1.819,109,1.091,110,1.626,135,1.567,151,1.667,161,3.353,175,3.625,191,1.265,193,2.71,195,1.611,225,2.113,238,1.215,250,2.11,258,1.819,259,0.005,289,2.625,302,0.005,312,0.766,335,2.582,338,2.56,346,1.279,355,4.1,415,2.582,416,2.752,456,4.162,458,2.935,470,1.386,471,1.702,472,4.692,474,1.759,476,3.252,514,2.033,517,1.65,545,2.966,557,2.44,566,2.212,667,2.625,706,1.424,881,3.745,1068,4.557,1468,3.252,1681,3.972,1716,3.972,1969,4.297,1991,3.252,1992,7.158,1995,5.497,1997,4.997,1998,2.966,2004,3.252,2083,5.497,2148,2.966,2190,4.796,2232,4.786,2233,5.497,2234,5.409,2319,4.28,2320,2.752,2331,2.44,2599,5.021,2615,2.966,2830,5.497,2837,3.686,2838,5.318,2839,5.318,2840,5.318,2841,6.658,2842,3.686,2843,5.318,2844,6.831,2845,3.686,2846,5.318,2847,5.318,2848,5.318,2849,5.318,2850,5.318,2851,7.243,2852,5.318,2853,5.318,2854,3.686,2855,5.318,2856,6.239,2857,5.318,2858,6.831,2859,5.318,2860,3.686,2861,3.686,2862,3.686,2863,5.318,2864,3.686,2865,3.686,2866,3.686,2867,3.686,2868,3.686,2869,3.686,2870,3.686,2871,3.686,2872,3.686,2873,3.686,2874,3.686,2875,3.686,2876,3.686,2877,4.692,2878,4.692,2879,3.686,2880,3.686,2881,3.686,2882,3.686,2883,3.686,2884,6.239,2885,6.239,2886,3.686,2887,3.686,2888,6.831,2889,3.686,2890,3.686,2891,3.686,2892,3.686,2893,3.252,2894,3.252,2895,3.686,2896,3.686,2897,3.252,2898,3.686,2899,3.252,2900,3.252,2901,2.582,2902,3.252,2903,3.252,2904,3.686,2905,3.252,2906,3.252,2907,3.686,2908,3.686,2909,3.686,2910,3.686,2911,5.318,2912,3.686]],["title/injectables/SessionLoggerService.html",[30,0.945,1970,2.782]],["body/injectables/SessionLoggerService.html",[3,0.067,4,0.054,5,0.054,7,0.964,11,1.28,12,0.145,16,1.123,18,0.598,19,0.367,20,0.009,27,2.496,29,0.351,30,0.987,33,0.537,68,3.577,79,0.067,80,0.041,89,1.988,93,1.511,94,1.004,95,2.45,110,1.058,132,1.69,135,1.805,149,1.558,161,2.621,188,1.75,191,1.518,250,2.903,259,0.005,302,0.005,312,0.982,323,2.621,346,1.111,415,2.134,416,2.275,458,3.088,462,4.855,517,2.114,619,2.362,654,4.921,667,1.504,676,3.449,706,1.177,728,6.331,827,2.965,829,3.235,881,4.524,1038,2.016,1060,4.34,1092,4.209,1113,1.558,1216,5.009,1677,4.361,1681,4.649,1693,4.074,1970,3.916,1997,5.858,2083,3.716,2105,5.384,2189,6.258,2190,4.121,2232,4.933,2235,5.464,2278,2.687,2320,3.449,2335,2.687,2787,5.903,2830,6.523,2841,6.649,2877,7.611,2878,6.649,2894,2.687,2897,4.074,2899,4.074,2900,7.432,2901,3.235,2902,4.074,2913,3.046,2914,4.618,2915,4.618,2916,4.618,2917,5.578,2918,5.578,2919,4.618,2920,5.578,2921,4.618,2922,5.578,2923,5.578,2924,5.578,2925,4.618,2926,3.046,2927,3.046,2928,4.618,2929,9.063,2930,3.046,2931,3.046,2932,6.691,2933,3.046,2934,3.046,2935,3.046,2936,4.618,2937,3.046,2938,5.578,2939,3.046,2940,3.046,2941,4.618,2942,3.046,2943,3.046,2944,3.046,2945,3.046,2946,3.046,2947,3.046,2948,3.046,2949,4.618,2950,3.046,2951,3.046,2952,7.867,2953,2.275,2954,7.536,2955,3.046,2956,3.046,2957,3.046,2958,3.046,2959,3.046,2960,3.046,2961,3.046,2962,3.046,2963,3.046,2964,4.618]],["title/modules/SessionModule.html",[357,1.387,375,2.655]],["body/modules/SessionModule.html",[3,0.124,4,0.099,5,0.099,7,1.173,20,0.009,29,0.547,33,0.991,70,4.452,71,4.649,79,0.156,80,0.075,110,1.066,259,0.007,302,0.007,344,2.734,357,2.548,359,2.439,360,2.683,361,2.875,362,2.875,363,2.683,364,3.823,365,3.823,375,5.389,377,3.619,378,2.875,379,2.683,382,3.377,384,4.248,403,4.96,430,2.112,458,2.003,471,3.577,582,4.198,583,4.96,662,4.976,1162,3.374,1170,2.983,1440,3.722,1968,5.662,1977,4.96,2377,6.833,2804,5.426,2805,6.232,2818,4.96,2819,4.524,2820,4.96,2965,4.96,2966,5.622,2967,4.96,2968,4.96,2969,5.622,2970,5.622,2971,4.96,2972,5.622,2973,4.96,2974,5.622,2975,5.622,2976,5.622]],["title/injectables/SessionService.html",[30,0.945,662,2.439]],["body/injectables/SessionService.html",[3,0.09,4,0.072,5,0.072,12,0.195,15,1.516,16,1.06,18,0.614,19,0.341,20,0.009,29,0.505,30,1.225,31,5.475,33,0.723,34,2.936,35,1.422,60,1.754,79,0.09,80,0.055,81,1.955,86,2.237,93,1.553,94,2.486,98,2.687,109,1.281,110,1.359,118,1.591,135,1.987,143,3.295,151,2.246,183,3.442,190,1.446,191,1.396,201,4.282,211,3.156,259,0.006,289,3.537,302,0.006,312,1.005,346,1.379,352,5.019,363,2.736,406,3.297,430,1.711,458,3.035,496,2.87,517,1.994,612,4.993,662,3.163,667,2.83,675,4.282,689,5.019,706,1.583,779,4.614,901,2.648,1060,2.26,1105,3.607,1129,5.019,1169,2.87,1170,2.174,1173,2.26,1325,4.282,1714,3.442,1863,2.87,2060,4.614,2804,5.019,2819,3.297,2971,5.059,2973,5.059,2977,4.097,2978,7.164,2979,7.164,2980,4.097,2981,8.022,2982,4.097,2983,5.734,2984,4.097,2985,7.164,2986,4.097,2987,5.734,2988,7.164,2989,4.097,2990,5.734,2991,4.097,2992,4.097,2993,5.734,2994,7.164,2995,4.097,2996,5.734,2997,4.097,2998,5.734,2999,7.164,3000,5.734,3001,5.734,3002,5.734,3003,4.097,3004,5.734,3005,5.734,3006,4.097,3007,4.097,3008,4.097,3009,4.097,3010,5.734,3011,5.734,3012,4.097,3013,5.734,3014,4.097,3015,4.097,3016,4.097,3017,4.097,3018,4.097,3019,4.097,3020,4.097,3021,5.734,3022,4.097,3023,4.097,3024,4.097,3025,4.097]],["title/controllers/StatusListController.html",[342,1.576,3026,3.559]],["body/controllers/StatusListController.html",[3,0.136,4,0.109,5,0.109,12,0.293,16,0.864,18,0.595,19,0.365,20,0.009,29,0.508,33,1.085,79,0.136,80,0.082,94,2.028,109,0.982,135,1.716,151,2.346,191,1.139,259,0.008,302,0.008,310,1.706,312,0.755,314,2.192,342,2.192,344,2.377,346,1.799,350,2.935,502,3.036,517,1.627,520,4.072,544,3.607,1080,4.447,1113,3.145,1127,4.84,1162,4.491,1163,4.593,1893,4.84,3026,6.02,3027,4.953,3028,6.15,3029,6.15,3030,6.601,3031,4.95,3032,7.481,3033,6.15,3034,7.481,3035,6.15,3036,6.15,3037,6.15,3038,5.426,3039,6.15,3040,6.15]],["title/interfaces/StatusListFile.html",[0,0.574,3041,3.559]],["body/interfaces/StatusListFile.html",[0,0.432,2,0.994,3,0.073,4,0.059,5,0.146,12,0.281,13,0.606,15,0.881,16,0.694,18,0.616,19,0.295,20,0.009,29,0.531,30,1.055,32,3.533,33,0.587,34,2.154,35,1.156,47,2.407,48,1.644,54,1.914,55,1.999,56,2.724,61,3.475,63,2.205,64,1.837,65,1.914,66,1.999,67,2.205,68,1.914,79,0.073,80,0.045,81,1.589,86,2.618,93,0.902,94,1.94,97,1.588,109,1.11,110,1.656,118,2.091,132,1.219,135,0.764,136,0.881,146,2.235,147,2.235,151,2.59,152,2.487,153,2.205,163,1.644,171,3.959,175,1.767,183,3.533,190,0.84,204,1.999,219,1.324,238,1.628,240,1.837,247,1.402,259,0.005,267,3.107,285,3.246,288,2.095,289,3.213,290,4.395,297,1.999,298,1.999,302,0.005,309,1.795,314,1.187,442,1.098,456,2.838,458,2.477,544,3.87,575,2.143,576,5.192,737,2.964,754,3.703,766,1.703,782,1.767,803,3.159,809,1.767,811,2.333,827,2.079,852,2.205,896,1.49,901,1.538,923,1.703,926,2.333,1021,1.445,1042,1.837,1080,4.683,1094,5.86,1127,1.999,1129,3.46,1135,2.68,1143,3.897,1156,2.525,1162,1.999,1166,2.68,1169,2.333,1170,1.767,1173,1.837,1184,3.974,1200,3.974,1201,2.487,1206,2.333,1370,2.68,1502,2.333,1511,2.68,1594,2.68,1607,3.107,1619,2.095,1642,3.107,1714,2.964,1893,2.964,2376,2.68,2380,2.68,2569,2.68,2815,3.46,2822,2.68,2901,5.636,3027,2.205,3031,2.68,3041,5.594,3042,2.938,3043,6.133,3044,5.743,3045,4.357,3046,2.938,3047,2.938,3048,4.357,3049,2.68,3050,2.333,3051,2.68,3052,2.68,3053,2.938,3054,2.938,3055,2.938,3056,2.938,3057,2.938,3058,2.938,3059,4.357,3060,5.743,3061,4.357,3062,2.938,3063,2.938,3064,5.192,3065,4.357,3066,2.938,3067,2.938,3068,2.938,3069,2.938,3070,2.938,3071,2.938,3072,2.938,3073,2.938,3074,2.938,3075,4.357,3076,2.938,3077,4.357,3078,2.938,3079,2.938,3080,4.357,3081,4.357,3082,2.938,3083,2.938,3084,2.938,3085,2.938,3086,5.192,3087,2.938,3088,2.938,3089,2.938,3090,2.938,3091,2.938,3092,2.68,3093,5.192,3094,2.938,3095,2.938,3096,2.938,3097,2.938,3098,6.133,3099,2.938,3100,2.938,3101,4.357,3102,2.938,3103,2.938,3104,2.938,3105,2.938,3106,2.938,3107,2.938,3108,4.357,3109,4.357,3110,2.938,3111,2.938,3112,2.938]],["title/modules/StatusListModule.html",[357,1.387,1968,2.928]],["body/modules/StatusListModule.html",[3,0.133,4,0.107,5,0.107,20,0.009,29,0.548,33,1.066,79,0.133,80,0.081,259,0.007,302,0.007,344,2.861,357,2.509,359,2.624,360,2.886,361,3.092,362,3.092,363,2.886,364,3.951,365,3.951,369,4.62,377,3.786,378,3.092,379,2.886,382,3.533,385,3.804,544,3.313,1127,5.467,1162,3.63,1163,4.516,1170,3.209,1440,4.004,1968,5.939,3026,6.44,3027,4.004,3050,4.236,3051,4.866,3052,4.866,3113,5.335,3114,5.335,3115,6.047,3116,5.335,3117,6.047,3118,6.047,3119,6.047]],["title/injectables/StatusListService.html",[30,0.945,1127,2.655]],["body/injectables/StatusListService.html",[0,0.345,3,0.059,4,0.047,5,0.145,12,0.245,13,0.511,15,1.101,16,1.066,18,0.65,19,0.35,20,0.009,29,0.508,30,0.89,32,4.005,33,0.469,34,2.441,35,0.924,47,2.851,48,1.314,54,1.53,55,1.598,56,2.296,61,3.184,63,1.763,64,1.468,65,1.53,66,1.598,67,1.763,68,1.53,79,0.059,80,0.036,81,1.27,86,2.823,93,1.128,94,1.69,97,1.648,109,1.005,110,1.603,118,2.058,132,1.524,135,1.773,136,1.101,146,2.591,147,2.023,151,2.691,152,3.109,153,2.757,163,2.055,171,3.69,175,2.209,183,3.078,190,1.05,191,1.404,204,2.499,219,1.058,238,1.373,240,1.468,247,1.121,259,0.004,267,2.619,285,2.828,288,2.619,289,3.293,290,3.829,297,1.598,298,1.598,302,0.004,309,1.959,310,0.739,312,0.964,314,0.949,346,1.001,430,0.794,442,0.878,456,2.393,458,2.643,474,1.27,517,2.006,544,3.898,575,1.806,576,4.699,706,1.029,715,1.53,737,2.499,754,3.226,766,1.361,782,1.413,803,2.225,809,1.413,811,1.865,827,2.159,852,1.763,896,1.191,901,1.23,906,3.109,923,1.361,926,1.865,1021,1.806,1042,2.296,1060,2.296,1080,4.712,1094,4.126,1127,2.499,1129,4.062,1135,3.351,1143,4.166,1156,2.129,1162,4.78,1166,2.142,1169,1.865,1170,1.413,1173,1.468,1184,3.351,1200,3.351,1201,1.988,1206,1.865,1250,3.109,1370,2.142,1497,2.917,1502,2.917,1511,2.142,1594,3.351,1607,2.619,1619,1.675,1642,3.648,1714,3.481,1893,2.499,2376,2.142,2380,2.142,2569,3.351,2815,4.062,2822,2.142,2901,5.196,3027,5.272,3030,3.673,3031,3.351,3041,5.61,3042,2.349,3043,3.673,3044,3.673,3045,3.673,3046,2.349,3047,2.349,3048,3.673,3049,2.142,3050,1.865,3051,2.142,3052,2.142,3053,2.349,3054,4.524,3055,3.673,3056,2.349,3057,4.524,3058,3.673,3059,5.116,3060,5.886,3061,4.524,3062,3.673,3063,3.673,3064,4.524,3065,3.673,3066,2.349,3067,2.349,3068,2.349,3069,2.349,3070,2.349,3071,2.349,3072,2.349,3073,2.349,3074,2.349,3075,3.673,3076,3.673,3077,3.673,3078,2.349,3079,2.349,3080,3.673,3081,3.673,3082,2.349,3083,2.349,3084,2.349,3085,2.349,3086,4.524,3087,2.349,3088,2.349,3089,3.673,3090,2.349,3091,2.349,3092,3.351,3093,5.552,3094,4.524,3095,2.349,3096,2.349,3097,2.349,3098,5.552,3099,2.349,3100,2.349,3101,3.673,3102,2.349,3103,2.349,3104,3.673,3105,2.349,3106,3.673,3107,2.349,3108,3.673,3109,3.673,3110,2.349,3111,2.349,3112,2.349,3120,4.164,3121,4.164,3122,4.164,3123,4.164,3124,4.164,3125,2.662,3126,2.662,3127,2.662,3128,2.662,3129,2.662,3130,2.662,3131,2.662,3132,2.662,3133,2.662,3134,2.662,3135,2.662]],["title/entities/StatusMapping.html",[1859,2.183,3050,3.099]],["body/entities/StatusMapping.html",[3,0.13,4,0.104,5,0.104,12,0.394,13,0.894,18,0.638,19,0.401,20,0.009,29,0.371,79,0.13,80,0.079,136,2.343,171,3.725,259,0.007,302,0.007,310,2.293,312,1.015,456,4.545,873,5.865,1080,4.362,1143,5.236,1173,3.248,1859,3.596,1860,3.535,1868,6.171,1885,5.949,3027,5.622,3050,5.103,3136,8.492,3137,5.889,3138,8.651,3139,5.889,3140,7.284,3141,5.889,3142,5.889,3143,5.889]],["title/classes/StatusUpdateDto.html",[80,0.059,2815,3.099]],["body/classes/StatusUpdateDto.html",[3,0.128,4,0.103,5,0.103,12,0.276,13,0.885,15,2.173,16,1.155,17,6.612,18,0.606,19,0.355,20,0.009,29,0.365,79,0.128,80,0.097,97,2.318,160,3.036,164,4.774,171,3.688,259,0.007,267,4.537,302,0.007,304,2.011,310,2.178,311,3.676,312,0.964,319,4.327,321,4.144,322,2.514,341,3.688,456,4.512,458,2.928,471,3.33,544,3.782,827,3.459,901,3.794,1143,5.198,2815,5.052,2821,7.249,3027,5.44,3144,5.794,3145,5.794,3146,5.794,3147,5.794,3148,5.794,3149,5.794,3150,7.211,3151,5.794]],["title/interfaces/TDataShape.html",[0,0.574,1049,3.099]],["body/interfaces/TDataShape.html",[0,0.866,2,1.046,3,0.077,4,0.062,5,0.062,11,1.802,12,0.167,13,0.63,16,1.104,18,0.547,19,0.387,20,0.009,24,1.673,27,1.569,29,0.382,38,2.803,60,2.172,79,0.18,87,1.619,91,1.86,95,1.86,97,1.127,98,1.249,107,2.41,109,0.819,127,2.947,129,1.355,136,0.927,137,1.673,141,1.434,142,2.206,159,1.569,161,2.81,163,1.731,175,3.541,190,1.293,193,2.684,195,2.069,206,3.226,211,1.673,219,2.947,225,3.122,229,1.934,238,1.156,250,2.257,258,2.994,259,0.005,302,0.005,314,1.249,316,1.521,338,2.71,346,0.843,430,2.119,442,1.999,445,3.539,470,3.012,474,1.673,644,2.669,910,2.206,912,2.206,914,2.206,915,2.206,919,2.321,922,2.947,925,3.815,927,1.186,928,3.64,934,2.643,946,2.321,953,2.104,974,2.015,975,2.456,976,4.974,977,4.529,978,2.206,979,3.83,980,3.83,981,2.618,982,2.947,983,2.618,984,3.956,985,4.675,986,2.618,987,2.321,988,2.618,989,4.198,990,2.321,991,2.206,992,1.934,993,2.618,994,2.618,995,2.618,996,2.618,997,3.593,998,3.593,999,2.618,1000,2.618,1001,2.456,1002,2.618,1003,3.83,1004,2.618,1005,4.015,1006,2.618,1007,2.456,1008,2.618,1009,3.815,1010,2.618,1011,2.456,1012,3.226,1013,2.618,1014,2.618,1015,3.226,1016,2.456,1017,2.206,1018,2.618,1019,2.104,1020,2.104,1021,1.521,1022,2.104,1023,2.456,1024,2.456,1025,2.618,1026,2.104,1027,2.618,1028,2.618,1029,2.206,1030,4.248,1031,4.983,1032,6.474,1033,4.529,1034,2.618,1035,4.262,1036,2.104,1037,3.593,1038,2.321,1039,2.456,1040,2.456,1041,2.456,1042,1.934,1043,2.206,1044,2.321,1045,2.456,1046,2.206,1047,2.104,1048,1.731,1049,3.593,1050,5.196,1051,2.456]],["title/interfaces/TokenPayload.html",[0,0.574,530,2.439]],["body/interfaces/TokenPayload.html",[0,0.825,2,1.897,3,0.14,4,0.112,5,0.112,7,1.326,9,3.816,11,1.751,12,0.303,13,0.937,18,0.603,19,0.288,20,0.009,29,0.4,33,1.121,38,2.326,79,0.168,89,3.023,98,2.719,109,1.015,110,1.447,160,2.677,225,2.526,256,3.653,259,0.008,302,0.008,471,3.525,530,4.511,541,4.209,575,2.758,576,6.335,644,2.39,927,2.15,1995,6.142,3152,6.357,3153,7.632,3154,6.357,3155,6.357,3156,6.357]],["title/classes/TokenResponse.html",[80,0.059,510,3.559]],["body/classes/TokenResponse.html",[3,0.148,4,0.118,5,0.118,12,0.319,13,0.966,18,0.58,19,0.356,20,0.009,79,0.148,80,0.09,171,4.023,259,0.008,302,0.008,304,2.321,312,1.026,324,4.428,510,6.33,545,6.725,547,7.373,548,6.241,610,4.015,2747,5.901,2748,5.901,2749,5.901,3157,8.625]],["title/classes/VCT.html",[80,0.059,1100,2.928]],["body/classes/VCT.html",[3,0.123,4,0.099,5,0.099,7,1.611,12,0.266,13,0.865,16,1.267,18,0.672,19,0.397,20,0.009,29,0.444,79,0.156,80,0.104,191,1.43,259,0.007,302,0.007,304,1.939,310,2.405,311,4.09,312,1.064,320,3.74,322,2.424,329,2.5,337,3.605,747,3.354,984,3.812,1100,5.536,1876,4.172,2463,7.737,2464,4.929,2467,6.813,2468,6.813,2469,6.813,3158,5.587,3159,5.587,3160,5.587,3161,5.587,3162,5.587,3163,5.587,3164,5.587]],["title/injectables/VaultKeyService.html",[30,0.945,2073,3.559]],["body/injectables/VaultKeyService.html",[3,0.054,4,0.043,5,0.043,11,0.562,12,0.117,13,0.479,15,1.703,16,1.081,18,0.664,19,0.382,20,0.009,21,2.045,22,1.823,23,4.235,29,0.466,30,0.833,33,0.432,34,2.471,35,0.85,47,2.761,48,1.21,56,1.351,61,1.861,79,0.054,80,0.033,86,2.706,87,1.132,89,1.389,93,1.056,94,2.381,95,1.3,104,1.408,109,1.182,110,1.481,118,1.677,132,1.427,135,1.835,137,1.169,146,2.644,147,2.07,151,2.703,163,1.925,188,1.408,190,2.038,191,1.424,194,2.732,213,2.679,216,1.716,219,0.974,221,3.138,223,1.972,235,1.622,238,1.601,241,1.622,247,2.045,250,1.643,259,0.004,270,2.045,285,1.351,289,1.925,294,2.679,302,0.004,309,1.561,312,0.982,314,1.973,338,0.788,346,0.938,420,2.916,470,2.421,471,2.243,517,2.034,556,1.541,557,1.622,564,2.912,568,1.351,575,2.107,616,1.471,644,0.921,653,1.622,676,4.135,706,0.947,740,3.565,803,2.623,808,3.474,852,1.622,901,1.132,927,1.319,938,1.253,984,1.925,1043,1.541,1047,1.471,1156,1.253,1208,2.916,1224,3.138,1228,4.456,1235,5.957,1244,4.641,1251,3.216,1291,1.21,1297,2.162,1302,1.351,1307,1.972,1343,1.972,1353,2.162,1360,3.138,1396,3.44,1431,1.972,1435,1.972,1480,2.912,1497,2.732,1502,2.732,1509,1.972,1538,2.732,1585,2.162,1589,3.138,1590,5.434,1595,3.138,1597,4.865,1604,3.138,1606,1.972,1607,3.483,1608,4.885,1615,2.162,1618,1.972,1619,1.541,1646,2.162,1714,1.471,1735,1.622,1782,2.912,1950,3.138,2001,1.972,2073,3.138,2074,6.979,2076,4.511,2077,1.351,2086,2.162,2133,2.912,2223,3.44,2288,2.912,2330,4.135,2331,1.622,2435,3.44,2527,1.972,2733,2.162,2736,6.184,2893,5.333,3165,7.557,3166,4.857,3167,3.899,3168,3.899,3169,3.899,3170,3.899,3171,2.45,3172,3.899,3173,2.45,3174,5.537,3175,6.439,3176,3.899,3177,3.899,3178,2.45,3179,6.045,3180,2.45,3181,2.45,3182,3.899,3183,3.899,3184,2.45,3185,2.45,3186,2.45,3187,3.899,3188,2.45,3189,3.899,3190,2.45,3191,2.45,3192,3.899,3193,3.899,3194,2.45,3195,2.45,3196,2.45,3197,2.45,3198,5.537,3199,2.45,3200,2.45,3201,2.45,3202,2.45,3203,2.45,3204,2.45,3205,2.45,3206,2.45,3207,2.45,3208,2.45,3209,2.45,3210,2.45,3211,3.899,3212,2.45,3213,2.45,3214,2.45,3215,2.45,3216,2.45,3217,2.45,3218,3.899,3219,2.45,3220,2.45,3221,2.45,3222,2.45,3223,2.45,3224,2.45,3225,2.45,3226,2.45,3227,2.45,3228,2.45,3229,2.45,3230,2.162,3231,2.45,3232,2.45,3233,4.857,3234,2.45,3235,2.45,3236,2.45,3237,2.45,3238,2.45,3239,2.45,3240,6.753,3241,2.45,3242,3.899,3243,2.45,3244,3.899,3245,4.857,3246,4.857,3247,2.45,3248,3.899,3249,3.899,3250,2.45,3251,4.885,3252,2.45,3253,2.45,3254,4.857,3255,5.537,3256,4.857,3257,3.899,3258,2.45,3259,3.899,3260,2.45,3261,3.899,3262,4.857,3263,2.45,3264,2.45,3265,2.45,3266,3.899,3267,2.45,3268,2.45,3269,2.45,3270,2.45,3271,2.45,3272,2.45,3273,2.45]],["title/modules/VerifierModule.html",[357,1.387,376,3.099]],["body/modules/VerifierModule.html",[3,0.132,4,0.106,5,0.106,20,0.009,29,0.554,33,1.052,79,0.132,80,0.08,259,0.007,302,0.007,357,2.494,359,2.589,360,2.847,361,3.051,362,3.051,363,2.847,364,2.946,365,2.946,369,4.605,374,5.46,375,5.21,376,6.414,377,3.756,378,3.051,379,2.847,382,3.504,385,3.754,393,4.802,404,4.456,1967,5.46,2075,5.145,2077,3.291,2307,5.46,2310,5.264,2514,5.264,3274,5.967,3275,5.967,3276,5.967]],["title/classes/WebHookAuthConfig.html",[80,0.059,330,3.303]],["body/classes/WebHookAuthConfig.html",[3,0.114,4,0.091,5,0.091,7,1.079,12,0.247,13,0.823,16,0.726,18,0.549,19,0.407,20,0.009,22,2.01,29,0.422,60,2.277,79,0.174,80,0.109,87,3.77,97,2.738,129,1.997,191,0.957,202,3.542,259,0.007,302,0.007,303,5.884,304,1.794,305,3.86,306,5.283,307,5.56,308,4.16,309,1.732,310,1.861,311,3.525,312,0.823,314,2.39,315,4.026,316,2.91,318,3.86,319,3.86,320,3.95,321,3.854,322,2.243,323,2.176,324,3.422,325,4.16,326,3.422,327,5.56,328,5.136,329,3.743,330,5.884,331,5.397,332,3.311,333,5.397,334,3.699,335,3.621,336,3.621,337,2.643,338,2.156,339,3.103,340,3.422,341,2.643,3277,5.169,3278,5.169,3279,5.169]],["title/classes/WebhookConfig.html",[80,0.059,337,2.262]],["body/classes/WebhookConfig.html",[3,0.114,4,0.091,5,0.091,7,1.077,12,0.246,13,0.823,16,1.106,18,0.581,19,0.398,20,0.009,22,1.939,29,0.422,60,1.579,79,0.174,80,0.109,87,3.637,97,2.737,129,2.875,191,0.956,202,3.628,259,0.007,302,0.007,303,5.556,304,1.792,305,3.855,306,5.236,307,5.881,308,4.154,309,1.73,310,1.859,311,3.651,312,0.823,314,2.388,315,4.022,316,2.907,318,3.855,319,3.855,320,3.948,321,3.85,322,2.239,323,2.173,324,3.417,325,4.154,326,3.417,327,5.004,328,4.681,329,3.742,330,5.881,331,4.154,332,2.548,333,4.154,334,2.847,335,4.694,336,4.694,337,3.427,338,2.623,339,4.022,340,4.436,341,3.427,3280,5.162,3281,5.162,3282,5.162]],["title/controllers/WellKnownController.html",[342,1.576,381,3.559]],["body/controllers/WellKnownController.html",[3,0.103,4,0.083,5,0.083,7,1.477,12,0.223,16,0.995,18,0.631,19,0.357,20,0.009,22,1.743,29,0.532,33,0.823,47,2.895,48,2.303,79,0.103,80,0.063,86,2.394,93,1.264,94,1.538,106,3.094,109,1.131,119,4.1,135,1.962,146,2.613,147,1.5,151,2.604,190,1.785,191,1.31,259,0.006,302,0.006,310,1.964,312,0.869,314,1.663,323,3.497,342,2.522,344,1.803,346,1.508,350,2.227,381,5.044,386,5.044,387,6.677,502,2.303,517,1.872,533,3.602,539,3.485,629,7.173,630,5.044,644,2.357,659,4.249,667,3.494,668,4.392,708,6.245,720,3.755,757,3.716,827,2.639,1021,2.72,1063,3.755,1064,5.302,1068,4.967,1247,6.245,1262,4.117,1302,2.574,1473,4.392,1488,3.763,1489,3.485,1886,4.117,1921,4.453,1922,3.755,1961,4.392,2109,6.09,2175,4.117,2196,4.117,2720,4.117,3038,5.53,3283,4.666,3284,4.666,3285,7.568,3286,6.268,3287,4.666,3288,6.268,3289,4.666,3290,4.666,3291,4.666,3292,4.666,3293,4.666,3294,4.666,3295,4.666,3296,4.666,3297,6.268,3298,4.666,3299,4.666,3300,4.666,3301,4.666,3302,4.666,3303,4.666,3304,4.666,3305,4.666]],["title/changelog.html",[1089,2.755,2953,2.755,3306,3.689]],["body/changelog.html",[5,0.092,20,0.007,22,1.286,60,1.597,84,3.134,101,3.658,106,3.693,107,2.075,129,2.018,149,2.67,211,4.128,212,3.9,259,0.007,294,2.88,302,0.008,316,2.265,329,3.02,338,2.17,396,3.658,420,3.134,445,2.492,542,4.202,553,3.285,617,3.457,619,2.67,1001,3.658,1005,3.457,1043,3.285,1047,4.491,1343,4.202,1359,4.607,1366,4.607,1657,4.202,1703,4.607,1714,3.134,2038,5.956,2049,4.607,2190,3.457,2319,4.202,2599,6.02,2756,3.457,2796,4.607,3307,5.222,3308,7.633,3309,8.651,3310,8.651,3311,8.651,3312,9.014,3313,6.751,3314,5.587,3315,5.222,3316,6.601,3317,6.751,3318,5.222,3319,6.751,3320,5.222,3321,5.222,3322,5.222,3323,5.222,3324,5.222,3325,5.222,3326,5.222,3327,6.751,3328,7.481,3329,5.222,3330,6.751,3331,5.222,3332,5.222,3333,5.222,3334,5.222,3335,5.222,3336,5.222,3337,5.222,3338,5.222,3339,5.222,3340,5.222,3341,5.222,3342,5.222,3343,5.956,3344,5.222,3345,5.222,3346,5.222,3347,5.222,3348,4.607,3349,5.222,3350,5.222,3351,5.222,3352,5.222,3353,5.222,3354,5.222,3355,5.222,3356,5.222,3357,5.222,3358,5.222,3359,5.222,3360,4.607,3361,5.222,3362,5.222,3363,5.222,3364,5.222,3365,5.222,3366,5.222,3367,5.222,3368,5.222,3369,5.222,3370,5.222,3371,5.222,3372,5.222,3373,5.222,3374,5.222,3375,5.222,3376,5.222,3377,5.222,3378,5.222,3379,5.222,3380,5.222,3381,4.607,3382,5.222,3383,4.607,3384,5.222,3385,4.607,3386,5.222,3387,5.222,3388,5.222,3389,5.222,3390,5.222]],["title/dependencies.html",[360,2.54,3391,3.255]],["body/dependencies.html",[20,0.009,33,0.987,35,1.942,37,4.503,38,2.047,64,3.086,65,3.215,80,0.095,259,0.007,302,0.007,318,4.179,322,2.428,350,2.67,360,2.67,384,3.359,395,4.937,396,3.92,406,4.503,415,3.92,416,5.771,444,4.937,493,3.705,544,2.503,592,4.179,658,3.086,742,3.705,803,3.061,949,4.503,1068,3.52,1080,3.086,1156,4.15,1157,4.179,1158,4.179,1160,4.179,1161,3.705,1165,3.52,1170,2.969,1173,3.086,1291,2.762,1488,3.359,1617,4.179,1619,3.52,1701,4.503,1926,3.52,1998,4.503,2031,4.937,2033,4.937,2077,3.086,2331,3.705,3049,4.503,3392,7.055,3393,5.595,3394,7.728,3395,5.595,3396,5.595,3397,5.595,3398,5.595,3399,5.595,3400,5.595,3401,5.595,3402,7.055,3403,8.114,3404,8.114,3405,8.114,3406,5.595,3407,5.595,3408,8.114,3409,5.595,3410,5.595,3411,5.595,3412,5.595,3413,5.595,3414,5.595,3415,5.595,3416,5.595,3417,5.595,3418,5.595,3419,5.595,3420,5.595,3421,5.595,3422,5.595,3423,5.595,3424,5.595,3425,5.595,3426,5.595,3427,5.595,3428,5.595,3429,5.595]],["title/miscellaneous/enumerations.html",[3430,2.443,3431,4.695]],["body/miscellaneous/enumerations.html",[11,1.59,12,0.331,19,0.314,20,0.009,195,1.79,259,0.008,302,0.008,309,2.074,326,4.59,619,3.546,684,5.053,896,3.594,1924,5.318,1926,5.053,2125,5.178,2499,5.579,3430,4.59,3431,6.117,3432,6.933]],["title/miscellaneous/functions.html",[3430,2.443,3433,4.695]],["body/miscellaneous/functions.html",[11,2.043,12,0.303,16,1.148,19,0.37,20,0.009,135,1.749,141,2.595,143,3.647,175,4.045,190,1.6,191,1.513,195,1.969,246,3.764,259,0.008,270,3.21,302,0.008,363,4.046,415,4.446,517,2.161,743,5.341,789,4.446,1042,3.5,1261,5.599,1325,6.104,2604,5.107,2613,5.107,2637,6.135,3430,4.202,3433,5.599,3434,6.346,3435,6.346,3436,6.346,3437,7.624,3438,6.346,3439,5.599,3440,6.346,3441,6.346,3442,6.346,3443,6.346,3444,7.624,3445,5.599]],["title/index.html",[12,0.176,1089,2.755,2953,2.755]],["body/index.html",[4,0.109,19,0.206,20,0.009,22,1.723,38,1.668,60,1.394,87,3.618,89,2.199,97,1.466,99,3.669,132,1.668,134,4.086,159,2.761,160,1.92,201,3.405,203,3.019,214,3.669,259,0.006,288,2.868,302,0.006,306,3.705,316,1.978,332,2.251,351,6.304,356,4.023,432,5.445,464,3.019,466,3.194,474,2.176,493,4.086,515,5.445,518,2.332,541,3.019,542,4.966,543,3.669,544,2.04,551,2.868,552,2.737,553,2.868,564,4.609,566,3.705,582,3.405,655,2.62,675,3.405,757,2.04,803,1.978,817,4.308,827,1.92,853,5.63,891,6.304,908,3.669,932,3.405,982,2.62,1021,1.978,1024,3.194,1080,2.515,1105,2.868,1156,2.332,1161,3.019,1325,3.405,1367,4.023,1420,2.515,1470,3.669,1480,3.405,1518,4.023,1631,4.023,1692,4.023,1839,3.019,1893,3.705,2320,5.225,2381,4.023,2438,4.023,2901,3.194,3251,5.445,3314,3.405,3316,4.023,3343,5.445,3348,6.614,3381,6.172,3383,4.023,3446,4.559,3447,6.171,3448,4.559,3449,4.559,3450,6.996,3451,6.171,3452,4.559,3453,4.559,3454,6.171,3455,3.669,3456,4.559,3457,4.559,3458,6.171,3459,4.559,3460,4.559,3461,4.559,3462,4.559,3463,6.171,3464,4.559,3465,4.559,3466,4.559,3467,4.559,3468,4.559,3469,4.559,3470,4.559,3471,4.559,3472,4.559,3473,4.559,3474,4.559,3475,4.559,3476,4.559,3477,4.559,3478,4.559,3479,4.559,3480,4.559,3481,4.559,3482,4.559,3483,4.559,3484,4.559,3485,4.023,3486,4.559,3487,4.559,3488,6.171,3489,4.023,3490,4.559,3491,4.559,3492,4.559,3493,4.559,3494,4.559,3495,6.171,3496,4.559,3497,6.171,3498,4.559,3499,4.559,3500,4.559,3501,4.559,3502,4.559,3503,6.171,3504,4.559,3505,4.559,3506,4.559,3507,4.559,3508,4.559,3509,4.559,3510,6.171,3511,6.171,3512,4.559,3513,4.559,3514,4.559,3515,4.559,3516,4.559,3517,6.171,3518,4.559,3519,6.171,3520,4.559,3521,4.559,3522,6.996,3523,4.559,3524,4.559,3525,4.023,3526,4.559,3527,4.559,3528,4.559,3529,4.559,3530,4.559,3531,4.559,3532,4.023,3533,4.559,3534,4.559,3535,4.559,3536,4.559,3537,4.559,3538,6.614,3539,4.023,3540,6.171,3541,4.559,3542,4.559,3543,4.559,3544,6.171,3545,4.559,3546,4.559,3547,4.559,3548,4.559,3549,4.559,3550,4.023,3551,4.559,3552,4.559,3553,4.559,3554,4.559,3555,4.559,3556,4.559,3557,4.559,3558,4.559,3559,4.559,3560,4.559,3561,4.559,3562,4.609,3563,4.023,3564,4.023,3565,3.669,3566,3.669]],["title/license.html",[1089,2.755,2953,2.755,3562,2.755]],["body/license.html",[2,0.768,4,0.138,5,0.126,7,0.537,20,0.007,24,1.228,29,0.162,46,3.262,70,1.619,73,5.479,80,0.034,97,0.827,107,2.985,132,0.941,134,1.703,138,4.354,159,1.151,168,1.316,185,3.027,191,0.75,211,1.934,212,1.921,252,4.036,256,2.329,258,1.27,259,0.004,273,2.07,274,4.579,279,1.921,302,0.004,312,0.316,315,1.544,316,2.469,334,3.139,341,3.166,354,1.802,355,1.544,379,1.228,474,1.228,490,4.579,551,1.619,553,1.619,555,3.746,612,1.703,655,2.882,658,2.236,818,1.703,832,1.703,837,2.433,881,1.544,901,1.188,925,1.619,927,2.224,932,1.921,938,4.04,944,2.07,987,2.684,992,1.419,997,1.802,1011,1.802,1022,3.416,1075,3.262,1078,2.27,1105,1.619,1185,3.262,1380,2.27,1484,6.197,1674,4.623,1683,4.982,1695,2.27,1735,1.703,1817,1.921,1859,3.708,1860,1.544,1893,1.544,1945,3.576,2119,5.021,2133,4.25,2140,2.27,2214,3.576,2318,2.07,2421,1.921,2441,2.27,2504,2.07,2531,2.27,2666,3.576,2717,2.27,2783,2.07,2903,4.425,2905,2.27,2906,3.576,3092,3.262,3230,2.27,3308,2.27,3314,3.746,3360,2.27,3385,2.27,3485,3.576,3489,2.27,3525,2.27,3532,2.27,3538,4.425,3539,2.27,3550,2.27,3562,6.603,3563,2.27,3564,6.473,3565,4.579,3566,4.036,3567,2.573,3568,2.573,3569,2.573,3570,7.337,3571,7.9,3572,5.69,3573,6.191,3574,2.573,3575,8.086,3576,7.511,3577,2.573,3578,2.573,3579,7.511,3580,7.788,3581,6.191,3582,4.053,3583,2.573,3584,6.191,3585,2.573,3586,2.573,3587,5.69,3588,2.573,3589,2.573,3590,5.69,3591,4.053,3592,4.053,3593,2.573,3594,5.015,3595,4.053,3596,4.053,3597,2.573,3598,4.053,3599,2.573,3600,4.053,3601,2.573,3602,2.573,3603,2.573,3604,2.573,3605,2.573,3606,2.573,3607,5.015,3608,2.573,3609,5.015,3610,4.053,3611,6.576,3612,5.69,3613,4.053,3614,5.015,3615,2.573,3616,2.573,3617,2.573,3618,2.573,3619,2.573,3620,2.573,3621,2.573,3622,8.842,3623,5.015,3624,2.573,3625,7.337,3626,4.053,3627,2.573,3628,4.053,3629,2.573,3630,8.297,3631,8.355,3632,2.573,3633,2.573,3634,2.573,3635,2.573,3636,2.573,3637,2.573,3638,4.053,3639,5.015,3640,2.573,3641,2.573,3642,2.573,3643,2.573,3644,5.69,3645,6.191,3646,2.573,3647,4.053,3648,5.69,3649,4.053,3650,2.573,3651,6.191,3652,2.573,3653,2.573,3654,5.015,3655,2.573,3656,2.573,3657,2.573,3658,4.053,3659,2.573,3660,2.573,3661,2.573,3662,5.015,3663,2.573,3664,2.573,3665,2.573,3666,7.511,3667,2.573,3668,4.053,3669,7.131,3670,4.053,3671,4.053,3672,4.053,3673,5.015,3674,4.053,3675,5.015,3676,4.053,3677,4.053,3678,4.053,3679,4.053,3680,2.573,3681,6.191,3682,6.882,3683,5.015,3684,4.053,3685,2.573,3686,4.053,3687,2.573,3688,2.573,3689,5.015,3690,2.573,3691,2.573,3692,2.573,3693,5.015,3694,2.573,3695,2.573,3696,2.573,3697,4.053,3698,4.053,3699,2.573,3700,2.573,3701,2.573,3702,2.573,3703,2.573,3704,2.573,3705,2.573,3706,4.053,3707,2.573,3708,2.573,3709,2.573,3710,2.573,3711,2.573,3712,2.573,3713,2.573,3714,5.015,3715,2.573,3716,2.573,3717,2.573,3718,2.573,3719,2.573,3720,7.131,3721,2.573,3722,2.573,3723,2.573,3724,2.573,3725,2.573,3726,5.69,3727,4.053,3728,2.573,3729,2.573,3730,2.573,3731,5.015,3732,2.573,3733,2.573,3734,4.053,3735,2.573,3736,2.573,3737,2.573,3738,2.573,3739,2.573,3740,2.573,3741,2.573,3742,2.573,3743,2.573,3744,2.573,3745,5.015,3746,5.69,3747,2.573,3748,2.573,3749,2.573,3750,2.573,3751,2.573,3752,2.573,3753,2.573,3754,2.573,3755,2.573,3756,2.573,3757,4.053,3758,2.573,3759,2.573,3760,4.053,3761,2.573,3762,2.573,3763,2.573,3764,2.573,3765,2.573,3766,2.573,3767,2.573,3768,2.573,3769,5.69,3770,5.015,3771,5.015,3772,5.015,3773,4.053,3774,5.015,3775,4.053,3776,4.053,3777,4.053,3778,2.573,3779,2.573,3780,2.573,3781,2.573,3782,2.573,3783,2.573,3784,2.573,3785,4.053,3786,2.573,3787,2.573,3788,6.191,3789,2.573,3790,2.573,3791,2.573,3792,2.573,3793,2.573,3794,2.573,3795,2.573,3796,2.573,3797,6.191,3798,2.573,3799,2.573,3800,2.573,3801,2.573,3802,2.573,3803,2.573,3804,2.573,3805,2.573,3806,2.573,3807,2.573,3808,2.573,3809,2.573,3810,2.573,3811,2.573,3812,2.573,3813,5.015,3814,2.573,3815,2.573,3816,2.573,3817,4.053,3818,2.573,3819,2.573,3820,2.573,3821,2.573,3822,2.573,3823,2.573,3824,2.573,3825,2.573,3826,2.573,3827,2.573,3828,2.573,3829,2.573,3830,2.573,3831,2.573,3832,4.053,3833,2.573,3834,2.573,3835,4.053,3836,4.053,3837,2.573,3838,2.573,3839,2.573,3840,2.573,3841,2.573,3842,2.573,3843,2.573,3844,2.573,3845,2.27,3846,2.27,3847,2.573,3848,2.573,3849,2.573,3850,2.573,3851,2.573,3852,2.573]],["title/modules.html",[359,2.623]],["body/modules.html",[20,0.008,259,0.008,302,0.008,358,4.723,359,2.744,368,4.43,369,4.037,370,4.43,371,4.43,372,4.43,373,4.43,374,3.978,375,3.796,376,4.43,551,5.134,553,5.761,1967,3.978,1968,4.187,2307,3.978,2509,4.43,3853,9.158,3854,9.158,3855,9.233,3856,8.16]],["title/overview.html",[3455,4.865]],["body/overview.html",[2,1.209,20,0.009,47,3.438,52,4.8,69,5.295,259,0.006,302,0.006,304,1.406,344,1.565,357,1.27,358,6.716,359,1.758,360,1.933,361,2.072,362,2.072,363,1.933,364,2,365,2,366,3.574,367,3.574,368,6.098,369,4.691,370,4.994,371,4.606,372,6.316,373,4.606,374,5.396,375,5.102,376,6.056,377,2.909,378,2.072,379,1.933,523,5.295,525,4.353,582,3.025,585,3.574,586,3.574,587,3.574,588,5.031,589,5.972,659,4.8,662,4.411,706,1.565,716,4.8,717,3.778,1127,4.8,1236,3.574,1237,3.574,1238,3.574,1239,5.603,1355,3.025,1860,2.432,1921,5.031,1963,3.574,1964,3.574,1965,3.574,1966,3.574,1967,5.606,1968,5.493,1969,4.485,1970,4.485,2303,3.574,2304,3.574,2305,3.574,2306,3.574,2307,5.289,2505,3.574,2506,3.574,2507,3.574,2508,3.574,2509,5.455,2528,5.603,2661,3.574,2662,3.574,2664,3.574,2704,3.574,2705,3.574,2706,3.574,2756,2.682,2965,3.574,2967,3.574,2968,3.574,3113,3.574,3114,3.574,3116,3.574,3455,3.26,3857,4.051,3858,4.051,3859,4.051]],["title/properties.html",[13,0.653,3391,3.255]],["body/properties.html",[7,1.472,13,0.866,20,0.009,259,0.008,302,0.008,3314,5.269,3562,5.269,3565,5.678,3566,5.678,3845,6.225,3846,6.225,3860,7.056,3861,7.056]],["title/miscellaneous/typealiases.html",[3430,2.443,3862,5.322]],["body/miscellaneous/typealiases.html",[9,1.849,12,0.147,18,0.227,19,0.419,20,0.009,38,2.767,71,1.849,97,1.497,98,1.659,141,3.395,142,2.93,143,1.77,159,2.084,163,2.299,193,0.99,202,1.336,206,1.297,219,1.224,225,1.224,229,2.569,258,1.52,259,0.005,302,0.005,305,2.3,306,1.849,307,2.3,316,2.02,326,2.039,327,3.478,442,1.015,445,2.987,458,1.097,470,1.158,471,1.422,487,2.717,494,3.478,616,5.557,766,1.575,808,2.676,827,1.961,910,2.93,912,2.93,914,2.93,915,2.93,916,3.478,917,2.471,927,1.575,928,2.795,938,2.872,941,1.699,953,2.795,974,2.676,975,2.157,976,3.263,998,3.263,1005,3.083,1029,1.937,1030,3.263,1035,1.849,1037,4.954,1038,3.083,1039,3.263,1040,3.263,1041,3.263,1042,2.569,1043,2.93,1044,3.083,1045,3.263,1046,2.93,1047,2.795,1050,3.263,1051,3.263,1067,1.937,1092,2.93,1208,1.849,1214,2.717,1215,5.523,1224,3.748,1232,3.748,1243,2.717,1258,4.109,1423,2.717,1431,3.748,1435,2.478,1531,2.478,1535,3.748,1536,3.748,1538,2.157,1539,3.748,1547,3.748,1709,2.3,1739,4.064,1740,2.795,1741,2.795,1742,4.408,1743,2.795,1744,2.795,1745,2.795,1746,3.758,1842,3.478,1844,3.478,1845,3.478,1859,1.52,2638,2.717,2640,3.718,2701,4.109,2751,2.157,2753,3.263,2781,2.717,2804,2.157,3430,2.039,3439,2.717,3445,2.717,3863,3.08,3864,4.657,3865,9.306,3866,4.657,3867,4.657,3868,5.616,3869,4.657,3870,4.657,3871,4.657,3872,4.657,3873,4.657,3874,5.616,3875,4.657,3876,4.657,3877,4.657,3878,5.616,3879,4.657,3880,4.657,3881,7.072,3882,6.723,3883,3.08,3884,3.08,3885,4.657,3886,7.89,3887,4.657,3888,4.657,3889,3.08,3890,4.657,3891,4.657,3892,4.657,3893,5.616,3894,4.657,3895,5.616,3896,4.657,3897,6.26,3898,4.657,3899,4.657,3900,5.616,3901,4.657,3902,5.616,3903,4.657,3904,5.616,3905,4.657,3906,4.657,3907,3.08,3908,4.657,3909,4.657,3910,4.657,3911,4.657,3912,5.616,3913,4.657,3914,4.657,3915,5.616,3916,4.657,3917,4.657,3918,4.657,3919,4.657,3920,5.616,3921,4.657,3922,3.08,3923,4.657,3924,4.657,3925,4.657,3926,5.616,3927,4.657,3928,4.657,3929,4.657,3930,4.657,3931,4.657,3932,5.616,3933,4.657,3934,5.616,3935,4.657,3936,5.616,3937,4.657,3938,4.657,3939,5.616,3940,4.657,3941,4.657,3942,4.657,3943,5.616,3944,4.657,3945,4.657,3946,5.616,3947,4.657,3948,4.657,3949,4.657,3950,4.657,3951,3.08,3952,4.657,3953,4.657,3954,5.616,3955,4.657,3956,4.657,3957,5.616,3958,3.08,3959,3.08,3960,3.08,3961,3.08]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":267,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{}}}],["0.0.1",{"_index":3860,"title":{},"body":{"properties.html":{}}}],["0.14.0",{"_index":3408,"title":{},"body":{"dependencies.html":{}}}],["0.14.2",{"_index":3411,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":3424,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":3403,"title":{},"body":{"dependencies.html":{}}}],["0.3.25",{"_index":3428,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":3073,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["0.5.1",{"_index":3410,"title":{},"body":{"dependencies.html":{}}}],["07",{"_index":3309,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":3364,"title":{},"body":{"changelog.html":{}}}],["0x00",{"_index":3259,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["1",{"_index":901,"title":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService-1.html":{}},"body":{"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/VaultKeyService.html":{},"license.html":{}}}],["1.0.0",{"_index":3363,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":3351,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":3345,"title":{},"body":{"changelog.html":{}}}],["1.10.0",{"_index":3409,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":3331,"title":{},"body":{"changelog.html":{}}}],["1.2.1",{"_index":3327,"title":{},"body":{"changelog.html":{}}}],["1.2.2",{"_index":3322,"title":{},"body":{"changelog.html":{}}}],["1.2.3",{"_index":3307,"title":{},"body":{"changelog.html":{}}}],["1.5.4",{"_index":3422,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":3352,"title":{},"body":{"changelog.html":{}}}],["10,000",{"_index":3059,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["10.5.0",{"_index":3420,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":816,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["1000",{"_index":183,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["10000",{"_index":3066,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["11",{"_index":3346,"title":{},"body":{"changelog.html":{}}}],["11.0.0",{"_index":3402,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":3397,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":3429,"title":{},"body":{"dependencies.html":{}}}],["11.1.3",{"_index":3394,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":3401,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":3858,"title":{},"body":{"overview.html":{}}}],["12/schema",{"_index":2746,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["12395c8",{"_index":3371,"title":{},"body":{"changelog.html":{}}}],["13.0.0",{"_index":3421,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":3857,"title":{},"body":{"overview.html":{}}}],["17.13.3",{"_index":3412,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":3328,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":3323,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":294,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["2.0",{"_index":3566,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["20",{"_index":2756,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"changelog.html":{},"overview.html":{}}}],["200",{"_index":509,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["2004",{"_index":3568,"title":{},"body":{"license.html":{}}}],["201",{"_index":1905,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["2025",{"_index":3308,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["20250602121005",{"_index":3405,"title":{},"body":{"dependencies.html":{}}}],["24",{"_index":582,"title":{},"body":{"controllers/AuthController.html":{},"modules/SessionModule.html":{},"index.html":{},"overview.html":{}}}],["24h",{"_index":580,"title":{},"body":{"controllers/AuthController.html":{}}}],["256",{"_index":1196,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{}}}],["259ab39",{"_index":3315,"title":{},"body":{"changelog.html":{}}}],["2742ec4",{"_index":3390,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":3859,"title":{},"body":{"overview.html":{}}}],["2913417",{"_index":3321,"title":{},"body":{"changelog.html":{}}}],["295428b",{"_index":3326,"title":{},"body":{"changelog.html":{}}}],["2a71850",{"_index":3375,"title":{},"body":{"changelog.html":{}}}],["2aa727a",{"_index":3320,"title":{},"body":{"changelog.html":{}}}],["2f07af2",{"_index":3374,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":1343,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["3.0.1",{"_index":3396,"title":{},"body":{"dependencies.html":{}}}],["3.14.1",{"_index":3415,"title":{},"body":{"dependencies.html":{}}}],["3.2.0",{"_index":3392,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":813,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["3000:3000",{"_index":3521,"title":{},"body":{"index.html":{}}}],["32",{"_index":3251,"title":{},"body":{"injectables/VaultKeyService.html":{},"index.html":{}}}],["32fbd8e",{"_index":3336,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":3257,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["33ac2c7",{"_index":3377,"title":{},"body":{"changelog.html":{}}}],["35f4d1e",{"_index":3349,"title":{},"body":{"changelog.html":{}}}],["3600",{"_index":2265,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["365",{"_index":1352,"title":{},"body":{"injectables/CryptoService.html":{}}}],["3ac47ec",{"_index":3368,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":1353,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{}}}],["4.0.0",{"_index":3393,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":3417,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":3395,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":3416,"title":{},"body":{"dependencies.html":{}}}],["401",{"_index":511,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["404",{"_index":2636,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["40ccd32",{"_index":3370,"title":{},"body":{"changelog.html":{}}}],["45f3f7f",{"_index":3372,"title":{},"body":{"changelog.html":{}}}],["46c9ce6",{"_index":3344,"title":{},"body":{"changelog.html":{}}}],["4be0171",{"_index":3373,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":1355,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vpService.html":{},"overview.html":{}}}],["5.0.3",{"_index":3400,"title":{},"body":{"dependencies.html":{}}}],["5.1.7",{"_index":3427,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":3602,"title":{},"body":{"license.html":{}}}],["500",{"_index":679,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["54e8a4e",{"_index":3380,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":1359,"title":{},"body":{"injectables/CryptoService.html":{},"changelog.html":{}}}],["6.0.0",{"_index":3399,"title":{},"body":{"dependencies.html":{}}}],["6.0.11",{"_index":3413,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":2377,"title":{},"body":{"injectables/Oid4vpService.html":{},"modules/SessionModule.html":{}}}],["6a6cdb6",{"_index":3361,"title":{},"body":{"changelog.html":{}}}],["6bb4aa9",{"_index":3325,"title":{},"body":{"changelog.html":{}}}],["6d31de0",{"_index":3356,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":1366,"title":{},"body":{"injectables/CryptoService.html":{},"changelog.html":{}}}],["7.8.2",{"_index":3425,"title":{},"body":{"dependencies.html":{}}}],["7a6a69c",{"_index":3318,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":298,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["8.16.3",{"_index":3419,"title":{},"body":{"dependencies.html":{}}}],["86400",{"_index":549,"title":{},"body":{"controllers/AuthController.html":{}}}],["892b30e",{"_index":3369,"title":{},"body":{"changelog.html":{}}}],["8f9498a",{"_index":3329,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":3578,"title":{},"body":{"license.html":{}}}],["905e17c",{"_index":3330,"title":{},"body":{"changelog.html":{}}}],["9104df3",{"_index":3333,"title":{},"body":{"changelog.html":{}}}],["91b5499",{"_index":3347,"title":{},"body":{"changelog.html":{}}}],["937603a",{"_index":3350,"title":{},"body":{"changelog.html":{}}}],["98303c1",{"_index":3382,"title":{},"body":{"changelog.html":{}}}],["_",{"_index":3272,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["_fns",{"_index":1710,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["_key",{"_index":2650,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["_url",{"_index":1748,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["_url.match(path_param_re",{"_index":1750,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["_url.startswith",{"_index":1812,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["a128gcm",{"_index":2371,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["above",{"_index":3749,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":2093,"title":{},"body":{"classes/KeyService.html":{}}}],["abstraction",{"_index":3473,"title":{},"body":{"index.html":{}}}],["ac4ee24",{"_index":3379,"title":{},"body":{"changelog.html":{}}}],["accept",{"_index":1946,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["acceptance",{"_index":3815,"title":{},"body":{"license.html":{}}}],["accepting",{"_index":3813,"title":{},"body":{"license.html":{}}}],["accepts",{"_index":516,"title":{},"body":{"controllers/AuthController.html":{}}}],["access",{"_index":9,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/typealiases.html":{}}}],["access_token",{"_index":545,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenResponse.html":{}}}],["accesscert",{"_index":2384,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscert?.length",{"_index":2397,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscertificate",{"_index":3864,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrolleraccesscertificatesdata",{"_index":3866,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrolleraccesscertificatesresponse",{"_index":3867,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrolleraccesscertificatesresponses",{"_index":3868,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerdeletedata",{"_index":3869,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerdeleteresponses",{"_index":3870,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerfindone",{"_index":40,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accesscertificatecontrollerfindonedata",{"_index":3871,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerfindoneparseddata",{"_index":3872,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerfindoneparsedresponse",{"_index":3873,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerfindoneparsedresponses",{"_index":3874,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerfindoneresponses",{"_index":3875,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerregister",{"_index":41,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accesscertificatecontrollerregisterdata",{"_index":3876,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerregisterresponse",{"_index":3877,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerregisterresponses",{"_index":3878,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificateid",{"_index":2658,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["accesscertificateregistration",{"_index":3879,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificateregistrationresponse",{"_index":3880,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificateresponse",{"_index":1,"title":{"interfaces/AccessCertificateResponse.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accessing",{"_index":96,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["accesstoken",{"_index":92,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accesstokenrequest",{"_index":788,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["accordingly",{"_index":885,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["act",{"_index":3821,"title":{},"body":{"license.html":{}}}],["acting",{"_index":3586,"title":{},"body":{"license.html":{}}}],["action",{"_index":2336,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["acts",{"_index":3795,"title":{},"body":{"license.html":{}}}],["add",{"_index":211,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionService.html":{},"interfaces/TDataShape.html":{},"changelog.html":{},"license.html":{}}}],["add(issuer_state",{"_index":2984,"title":{},"body":{"injectables/SessionService.html":{}}}],["addaccesscertificate",{"_index":230,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["addaccesscertificate(config",{"_index":2684,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["added",{"_index":921,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["addendum",{"_index":3740,"title":{},"body":{"license.html":{}}}],["addext",{"_index":1349,"title":{},"body":{"injectables/CryptoService.html":{}}}],["adding",{"_index":74,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["additional",{"_index":1674,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["additionaldata",{"_index":2929,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["additions",{"_index":3646,"title":{},"body":{"license.html":{}}}],["addregistrationcertificate",{"_index":245,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["addregistrationcertificate(req",{"_index":2686,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["address",{"_index":2606,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["addrp",{"_index":2678,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp(tenantid",{"_index":189,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["adds",{"_index":184,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["adjust",{"_index":3367,"title":{},"body":{"changelog.html":{}}}],["admin",{"_index":535,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["advancing",{"_index":3559,"title":{},"body":{"index.html":{}}}],["advised",{"_index":3811,"title":{},"body":{"license.html":{}}}],["against",{"_index":3698,"title":{},"body":{"license.html":{}}}],["agent",{"_index":472,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["agree",{"_index":3824,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":3772,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":3754,"title":{},"body":{"license.html":{}}}],["alg",{"_index":809,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["algorithm",{"_index":276,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/RegistrarService.html":{}}}],["algorithms",{"_index":1218,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["aliases",{"_index":3863,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":2191,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["alleging",{"_index":3703,"title":{},"body":{"license.html":{}}}],["allowed",{"_index":1578,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["allowedauthenticationschemes",{"_index":2228,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["allowedsigningalgs",{"_index":801,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["allowextra",{"_index":1532,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["allowing",{"_index":882,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["allowreserved",{"_index":1767,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["alone",{"_index":3694,"title":{},"body":{"license.html":{}}}],["along",{"_index":3732,"title":{},"body":{"license.html":{}}}],["alongside",{"_index":3739,"title":{},"body":{"license.html":{}}}],["alpha",{"_index":3404,"title":{},"body":{"dependencies.html":{}}}],["already",{"_index":203,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"index.html":{}}}],["always",{"_index":1046,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["amount",{"_index":1093,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["and/or",{"_index":3818,"title":{},"body":{"license.html":{}}}],["animo",{"_index":3493,"title":{},"body":{"index.html":{}}}],["annotations",{"_index":3635,"title":{},"body":{"license.html":{}}}],["any).issuer",{"_index":2062,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["anymore",{"_index":857,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["apache",{"_index":3565,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["api",{"_index":87,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{}}}],["api/client",{"_index":1003,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["api:read",{"_index":2487,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["api:write",{"_index":2488,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apibody",{"_index":522,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apibody({description",{"_index":646,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["apiexcludecontroller",{"_index":349,"title":{},"body":{"controllers/AppController.html":{}}}],["apihideproperty",{"_index":1888,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["apihideproperty()@column('varchar",{"_index":1882,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["apikey",{"_index":328,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"injectables/Oid4vpService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["apikeyconfig",{"_index":303,"title":{"classes/ApiKeyConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["apioperation",{"_index":3297,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apioperation({summary",{"_index":3291,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apiproduces",{"_index":1916,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiproduces('application/json",{"_index":1936,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiproperty",{"_index":2131,"title":{},"body":{"classes/OfferRequest.html":{},"classes/OfferResponse.html":{}}}],["apiproperty({example",{"_index":2124,"title":{},"body":{"classes/OfferRequest.html":{}}}],["apiresponse",{"_index":521,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiresponse({description",{"_index":1904,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apisecurity",{"_index":1917,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["apisecurity('oauth2",{"_index":1929,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["apitags",{"_index":520,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{}}}],["apitags('authentication",{"_index":534,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('credentials",{"_index":1111,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["apitags('issuer",{"_index":1927,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["apitags('presentation",{"_index":2486,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apitags('session",{"_index":2823,"title":{},"body":{"controllers/SessionController.html":{}}}],["apitags('status",{"_index":3036,"title":{},"body":{"controllers/StatusListController.html":{}}}],["app/app.controller",{"_index":402,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":343,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appear",{"_index":3736,"title":{},"body":{"license.html":{}}}],["appendix",{"_index":3628,"title":{},"body":{"license.html":{}}}],["applicable",{"_index":3770,"title":{},"body":{"license.html":{}}}],["application",{"_index":143,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["application/json",{"_index":1839,"title":{},"body":{"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"index.html":{}}}],["application/jwk",{"_index":3288,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["application/statuslist+jwt",{"_index":3034,"title":{},"body":{"controllers/StatusListController.html":{}}}],["applications",{"_index":999,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["applies",{"_index":3688,"title":{},"body":{"license.html":{}}}],["apply",{"_index":3832,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":358,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":1011,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["appropriateness",{"_index":3784,"title":{},"body":{"license.html":{}}}],["architecture",{"_index":3551,"title":{},"body":{"index.html":{}}}],["archives",{"_index":3844,"title":{},"body":{"license.html":{}}}],["aren’t",{"_index":2770,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["arg",{"_index":1563,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["args",{"_index":1533,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["args.entries",{"_index":1564,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["arising",{"_index":3801,"title":{},"body":{"license.html":{}}}],["array",{"_index":923,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/Interceptors.html":{},"classes/JwksResponseDto.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["array(size",{"_index":3069,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["array(size).fill(0).map",{"_index":3067,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["array.isarray(dcql_query",{"_index":2351,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["array.isarray(value",{"_index":1419,"title":{},"body":{"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["array['headers",{"_index":1826,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["arraybuffer",{"_index":1018,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["arraynotempty",{"_index":2130,"title":{},"body":{"classes/OfferRequest.html":{},"classes/OfferResponse.html":{}}}],["arraynotempty()@isstring({each",{"_index":2123,"title":{},"body":{"classes/OfferRequest.html":{}}}],["arrays",{"_index":936,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["arrays/objects",{"_index":2769,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["arrayseparatorstyle",{"_index":1746,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["arraystyle",{"_index":1739,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["asserted",{"_index":3830,"title":{},"body":{"license.html":{}}}],["associated",{"_index":2783,"title":{},"body":{"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["assume",{"_index":832,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"license.html":{}}}],["assuming",{"_index":2605,"title":{},"body":{"interfaces/PresentedData.html":{}}}],["async",{"_index":146,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["att",{"_index":2594,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attach",{"_index":3833,"title":{},"body":{"license.html":{}}}],["attached",{"_index":3627,"title":{},"body":{"license.html":{}}}],["attestation",{"_index":819,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["attestations",{"_index":2548,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attestations.map((att",{"_index":2595,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attestations—issuing",{"_index":3487,"title":{},"body":{"index.html":{}}}],["attribute",{"_index":3486,"title":{},"body":{"index.html":{}}}],["attribution",{"_index":3726,"title":{},"body":{"license.html":{}}}],["aud",{"_index":2374,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["audience",{"_index":581,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["audio",{"_index":1789,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["auth",{"_index":129,"title":{"interfaces/Auth.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{}}}],["auth.controller",{"_index":595,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":594,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.in",{"_index":1798,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["auth.name",{"_index":1797,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["auth.scheme",{"_index":498,"title":{},"body":{"interfaces/Auth.html":{}}}],["auth/auth.guard",{"_index":1918,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["auth/auth.module",{"_index":410,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/tenant",{"_index":67,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["auth/token.decorator",{"_index":1919,"title":{},"body":{"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["auth_client_id",{"_index":607,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth_client_secret",{"_index":606,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["auth_client_secret=$(openssl",{"_index":3520,"title":{},"body":{"index.html":{}}}],["auth_client_secret=your",{"_index":3526,"title":{},"body":{"index.html":{}}}],["auth_queries",{"_index":678,"title":{},"body":{"controllers/AuthorizeController.html":{},"entities/Session.html":{}}}],["auth_session",{"_index":685,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["auth_validation_schema",{"_index":409,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["authconfig",{"_index":327,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/typealiases.html":{}}}],["authcontroller",{"_index":500,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["authenticating",{"_index":90,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["authentication",{"_index":306,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["authguard",{"_index":1999,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":1989,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authheader",{"_index":558,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.startswith('basic",{"_index":560,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.substring(6",{"_index":562,"title":{},"body":{"controllers/AuthController.html":{}}}],["authmodule",{"_index":368,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":3861,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":323,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/PathSerializer.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["authorization_challenge_endpoint",{"_index":773,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorization_code",{"_index":791,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/Session.html":{}}}],["authorization_encrypted_response_alg",{"_index":2369,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_encrypted_response_enc",{"_index":2370,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_endpoint",{"_index":760,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorization_request",{"_index":2335,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{}}}],["authorization_server",{"_index":1069,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["authorization_servers",{"_index":1070,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["authorizationchallengeendpoint",{"_index":632,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationchallengeendpoint(res",{"_index":635,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{}}}],["authorizationcodegrantidentifier",{"_index":738,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationresponse",{"_index":622,"title":{"classes/AuthorizationResponse.html":{}},"body":{"classes/AuthorizationResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["authorizationserver",{"_index":750,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationservermetadata",{"_index":722,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationservermetadata.dpop_signing_alg_values_supported",{"_index":802,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationservermetadata.issuer",{"_index":814,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationservers",{"_index":2203,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["authorize",{"_index":633,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(queries",{"_index":640,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize.service",{"_index":660,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize/authorize.controller",{"_index":1976,"title":{},"body":{"modules/IssuerModule.html":{}}}],["authorize/authorize.service",{"_index":1973,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{}}}],["authorizecontroller",{"_index":626,"title":{"controllers/AuthorizeController.html":{}},"body":{"controllers/AuthorizeController.html":{},"modules/IssuerModule.html":{}}}],["authorized",{"_index":3582,"title":{},"body":{"license.html":{}}}],["authorizequeries",{"_index":636,"title":{"classes/AuthorizeQueries.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/Session.html":{}}}],["authorizequeries})@post('par",{"_index":648,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorizeservice",{"_index":659,"title":{"injectables/AuthorizeService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/WellKnownController.html":{},"overview.html":{}}}],["authorship",{"_index":3623,"title":{},"body":{"license.html":{}}}],["authresponse",{"_index":608,"title":{"interfaces/AuthResponse.html":{}},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["authserver",{"_index":753,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authserver}/.well",{"_index":763,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authserver}/authorize",{"_index":761,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authserver}/authorize/challenge",{"_index":774,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authserver}/authorize/par",{"_index":770,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authserver}/authorize/token",{"_index":759,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authtoken",{"_index":494,"title":{},"body":{"interfaces/Auth.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"miscellaneous/typealiases.html":{}}}],["authtype",{"_index":2432,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authz",{"_index":2382,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authzmetadata",{"_index":708,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/WellKnownController.html":{}}}],["authzmetadata(tenantid",{"_index":720,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/WellKnownController.html":{}}}],["authzservice",{"_index":2167,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["auto",{"_index":1009,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["autoloadentities",{"_index":1461,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["available",{"_index":551,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"index.html":{},"license.html":{},"modules.html":{}}}],["avoid",{"_index":2904,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["await",{"_index":147,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["axios",{"_index":949,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"dependencies.html":{}}}],["b",{"_index":1817,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"license.html":{}}}],["b.headers",{"_index":1824,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["b3abd57",{"_index":3387,"title":{},"body":{"changelog.html":{}}}],["b989c6c",{"_index":3338,"title":{},"body":{"changelog.html":{}}}],["back",{"_index":570,"title":{},"body":{"controllers/AuthController.html":{}}}],["backend",{"_index":3450,"title":{},"body":{"index.html":{}}}],["badgateway/oauth2",{"_index":37,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"dependencies.html":{}}}],["badrequestexception",{"_index":2182,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["badrequestexception('session",{"_index":2269,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["bar",{"_index":2626,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["base",{"_index":986,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["base64",{"_index":564,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"index.html":{}}}],["base64credentials",{"_index":561,"title":{},"body":{"controllers/AuthController.html":{}}}],["base64url",{"_index":3233,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["based",{"_index":134,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"index.html":{},"license.html":{}}}],["baseurl",{"_index":127,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["basic",{"_index":492,"title":{},"body":{"interfaces/Auth.html":{},"controllers/AuthController.html":{}}}],["basis",{"_index":3773,"title":{},"body":{"license.html":{}}}],["batch",{"_index":1083,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["batch_credential_issuance",{"_index":1071,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["batch_size",{"_index":1095,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["bearer",{"_index":324,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"classes/TokenResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["become",{"_index":1039,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["beef4d2",{"_index":3342,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":828,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["begin",{"_index":1379,"title":{},"body":{"injectables/CryptoService.html":{}}}],["behalf",{"_index":3651,"title":{},"body":{"license.html":{}}}],["behavior",{"_index":1013,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["being",{"_index":2834,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["below",{"_index":3629,"title":{},"body":{"license.html":{}}}],["beneficial",{"_index":3606,"title":{},"body":{"license.html":{}}}],["best",{"_index":1781,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["better",{"_index":2437,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["between",{"_index":615,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["bigint",{"_index":2651,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["binary",{"_index":1935,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["bind",{"_index":3643,"title":{},"body":{"license.html":{}}}],["bits",{"_index":3043,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["bitsperstatus",{"_index":3044,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["blob",{"_index":1019,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["body",{"_index":193,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["body.auth_session",{"_index":830,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["body.client_id",{"_index":571,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.client_secret",{"_index":572,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.code",{"_index":792,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["body.credentialconfigurationids",{"_index":2213,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.credentialconfigurationids.map((id",{"_index":2209,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.event",{"_index":2274,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.grant_type",{"_index":554,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.issuer_state",{"_index":821,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["body.notification_id",{"_index":2272,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.requestid",{"_index":2492,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body.response",{"_index":2408,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["body.response_type",{"_index":1949,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["body.webhook",{"_index":2493,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body_",{"_index":1541,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["bodyserializer",{"_index":916,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"interfaces/QuerySerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["boilerplate",{"_index":3834,"title":{},"body":{"license.html":{}}}],["boolean",{"_index":27,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{}}}],["bootstrap",{"_index":363,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":673,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["bound",{"_index":255,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["boundaries",{"_index":3499,"title":{},"body":{"index.html":{}}}],["brackets",{"_index":3836,"title":{},"body":{"license.html":{}}}],["branch",{"_index":3546,"title":{},"body":{"index.html":{}}}],["break",{"_index":1581,"title":{},"body":{"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{}}}],["bridges",{"_index":3449,"title":{},"body":{"index.html":{}}}],["browse",{"_index":3855,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3853,"title":{},"body":{"modules.html":{}}}],["btoa(token",{"_index":499,"title":{},"body":{"interfaces/Auth.html":{}}}],["buffer",{"_index":1950,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/VaultKeyService.html":{}}}],["buffer.concat([buffer.alloc(32",{"_index":3261,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.concat([rpadded",{"_index":3267,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from",{"_index":563,"title":{},"body":{"controllers/AuthController.html":{}}}],["buffer.from(dersignature",{"_index":3241,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from(json.stringify(header)).tostring",{"_index":3232,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from(json.stringify(payload)).tostring",{"_index":3235,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from(value).tostring('base64",{"_index":3227,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["bug",{"_index":3310,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":3386,"title":{},"body":{"changelog.html":{}}}],["buildclientparams",{"_index":1560,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["builder/querypartialentity",{"_index":3008,"title":{},"body":{"injectables/SessionService.html":{}}}],["buildkeymap",{"_index":1548,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["buildkeymap(config.args",{"_index":1554,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["buildkeymap(fields",{"_index":1561,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["buildurl",{"_index":903,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["buildurlfn",{"_index":912,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["built",{"_index":3496,"title":{},"body":{"index.html":{}}}],["business",{"_index":3480,"title":{},"body":{"index.html":{}}}],["byte",{"_index":3249,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["bytes",{"_index":1396,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{}}}],["c",{"_index":3723,"title":{},"body":{"license.html":{}}}],["c.id",{"_index":876,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["c3b1b48",{"_index":3353,"title":{},"body":{"changelog.html":{}}}],["c805439",{"_index":3366,"title":{},"body":{"changelog.html":{}}}],["ca",{"_index":1362,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cache",{"_index":2039,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cacreateserial",{"_index":1364,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cakey",{"_index":1363,"title":{},"body":{"injectables/CryptoService.html":{}}}],["calculatejwkthumbprint",{"_index":1287,"title":{},"body":{"injectables/CryptoService.html":{}}}],["call",{"_index":2848,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["callback",{"_index":496,"title":{},"body":{"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"injectables/CryptoService.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{}}}],["callback(auth",{"_index":497,"title":{},"body":{"interfaces/Auth.html":{}}}],["callbackcontext",{"_index":1285,"title":{},"body":{"injectables/CryptoService.html":{}}}],["callbacks",{"_index":751,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["called",{"_index":142,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["callhandler",{"_index":2844,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["calling",{"_index":1044,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["calls",{"_index":3506,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":1990,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":1994,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["carry",{"_index":3718,"title":{},"body":{"license.html":{}}}],["case",{"_index":1437,"title":{},"body":{"injectables/CryptoService-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["catch",{"_index":568,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/VaultKeyService.html":{}}}],["catch(async",{"_index":3202,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["catcherror",{"_index":2861,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["catcherror((error",{"_index":2896,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["cause",{"_index":3596,"title":{},"body":{"license.html":{}}}],["cb",{"_index":2046,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cb(err",{"_index":2048,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cd",{"_index":3514,"title":{},"body":{"index.html":{}}}],["cert",{"_index":241,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["cert.id",{"_index":264,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["cert.publickey.export",{"_index":2730,"title":{},"body":{"injectables/ResolverService.html":{}}}],["cert.revoked",{"_index":262,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["cert.subjectaltname?.includes(payload.iss.split('://')[1",{"_index":2728,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certificate",{"_index":10,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{}}}],["certificate.pem",{"_index":1317,"title":{},"body":{"injectables/CryptoService.html":{}}}],["certificatechainlength",{"_index":2396,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["certificates",{"_index":77,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["certificatetype",{"_index":1258,"title":{},"body":{"injectables/CryptoService.html":{},"miscellaneous/typealiases.html":{}}}],["certout",{"_index":1316,"title":{},"body":{"injectables/CryptoService.html":{}}}],["certs",{"_index":260,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["certs?.length",{"_index":266,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["certs[0",{"_index":2727,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certs[0].jwt",{"_index":268,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["chain",{"_index":1377,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/ResolverService.html":{}}}],["challenge",{"_index":639,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["changed",{"_index":3722,"title":{},"body":{"license.html":{}}}],["changelog",{"_index":3306,"title":{"changelog.html":{}},"body":{}}],["character",{"_index":3525,"title":{},"body":{"index.html":{},"license.html":{}}}],["characters",{"_index":943,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["charge",{"_index":3675,"title":{},"body":{"license.html":{}}}],["check",{"_index":213,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["checking",{"_index":3058,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["checks",{"_index":131,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"controllers/HealthController.html":{},"injectables/RegistrarService.html":{}}}],["checl",{"_index":2731,"title":{},"body":{"injectables/ResolverService.html":{}}}],["choice",{"_index":3461,"title":{},"body":{"index.html":{}}}],["choose",{"_index":3539,"title":{},"body":{"index.html":{},"license.html":{}}}],["ci",{"_index":3312,"title":{},"body":{"changelog.html":{}}}],["citizen",{"_index":2610,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["claim",{"_index":3700,"title":{},"body":{"license.html":{}}}],["claims",{"_index":1185,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"license.html":{}}}],["class",{"_index":80,"title":{"classes/ApiKeyConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/Interceptors.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrarConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{},"license.html":{}}}],["classes",{"_index":304,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/Interceptors.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrarConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"overview.html":{}}}],["clean",{"_index":1367,"title":{},"body":{"injectables/CryptoService.html":{},"index.html":{}}}],["cleancontent",{"_index":1784,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleancontent.endswith('+json",{"_index":1787,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleancontent.startswith('application/json",{"_index":1786,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleancontent.startswith('text",{"_index":1793,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleancontent.startswith(type",{"_index":1792,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleanup",{"_index":860,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["clear",{"_index":1711,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{}}}],["client",{"_index":38,"title":{"interfaces/Client.html":{},"interfaces/Client-1.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["client's",{"_index":1040,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["client.id",{"_index":577,"title":{},"body":{"controllers/AuthController.html":{}}}],["client.secret",{"_index":877,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["client.service",{"_index":526,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["client['buildurl",{"_index":1804,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["client_credentials",{"_index":538,"title":{},"body":{"controllers/AuthController.html":{}}}],["client_id",{"_index":541,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/TokenPayload.html":{},"index.html":{}}}],["client_metadata",{"_index":2359,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_name",{"_index":2372,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_secret",{"_index":543,"title":{},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{},"index.html":{}}}],["clientauthentication",{"_index":1398,"title":{},"body":{"injectables/CryptoService.html":{}}}],["clientauthenticationnone",{"_index":1288,"title":{},"body":{"injectables/CryptoService.html":{}}}],["clientcredentialsdto",{"_index":506,"title":{"classes/ClientCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{}}}],["clientid",{"_index":113,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["clientoptions",{"_index":974,"title":{"interfaces/ClientOptions.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["clients",{"_index":854,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["clients.foreach((client",{"_index":864,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["clientsecret",{"_index":115,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/RegistrarService.html":{}}}],["clientservice",{"_index":525,"title":{"injectables/ClientService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"overview.html":{}}}],["clone",{"_index":3510,"title":{},"body":{"index.html":{}}}],["cloudflare",{"_index":3354,"title":{},"body":{"changelog.html":{}}}],["cluster_appmodule",{"_index":366,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":367,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":585,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":586,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":587,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_cryptomodule",{"_index":1236,"title":{},"body":{"modules/CryptoModule.html":{},"overview.html":{}}}],["cluster_cryptomodule_exports",{"_index":1237,"title":{},"body":{"modules/CryptoModule.html":{},"overview.html":{}}}],["cluster_cryptomodule_providers",{"_index":1238,"title":{},"body":{"modules/CryptoModule.html":{},"overview.html":{}}}],["cluster_issuermodule",{"_index":1963,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_issuermodule_exports",{"_index":1965,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_issuermodule_imports",{"_index":1966,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_issuermodule_providers",{"_index":1964,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule",{"_index":2303,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule_exports",{"_index":2306,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule_imports",{"_index":2304,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule_providers",{"_index":2305,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule",{"_index":2505,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule_exports",{"_index":2506,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule_imports",{"_index":2508,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule_providers",{"_index":2507,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_registrarmodule",{"_index":2661,"title":{},"body":{"modules/RegistrarModule.html":{},"overview.html":{}}}],["cluster_registrarmodule_exports",{"_index":2662,"title":{},"body":{"modules/RegistrarModule.html":{},"overview.html":{}}}],["cluster_registrarmodule_imports",{"_index":2663,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["cluster_registrarmodule_providers",{"_index":2664,"title":{},"body":{"modules/RegistrarModule.html":{},"overview.html":{}}}],["cluster_resolvermodule",{"_index":2704,"title":{},"body":{"modules/ResolverModule.html":{},"overview.html":{}}}],["cluster_resolvermodule_exports",{"_index":2705,"title":{},"body":{"modules/ResolverModule.html":{},"overview.html":{}}}],["cluster_resolvermodule_providers",{"_index":2706,"title":{},"body":{"modules/ResolverModule.html":{},"overview.html":{}}}],["cluster_sessionmodule",{"_index":2965,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_sessionmodule_exports",{"_index":2968,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_sessionmodule_imports",{"_index":2966,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_sessionmodule_providers",{"_index":2967,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_statuslistmodule",{"_index":3113,"title":{},"body":{"modules/StatusListModule.html":{},"overview.html":{}}}],["cluster_statuslistmodule_exports",{"_index":3116,"title":{},"body":{"modules/StatusListModule.html":{},"overview.html":{}}}],["cluster_statuslistmodule_imports",{"_index":3115,"title":{},"body":{"modules/StatusListModule.html":{}}}],["cluster_statuslistmodule_providers",{"_index":3114,"title":{},"body":{"modules/StatusListModule.html":{},"overview.html":{}}}],["cluster_verifiermodule",{"_index":3274,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cluster_verifiermodule_imports",{"_index":3275,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cmd",{"_index":1328,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cn=${subject",{"_index":1348,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cnf",{"_index":1141,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{}}}],["cnonce",{"_index":805,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["cnonceexpiresin",{"_index":815,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["cnonceexpiresinseconds",{"_index":2264,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["code",{"_index":655,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/Session.html":{},"index.html":{},"license.html":{}}}],["code_challenge",{"_index":686,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_method",{"_index":687,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_methods_supported",{"_index":771,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["codecov",{"_index":3332,"title":{},"body":{"changelog.html":{}}}],["colorize",{"_index":446,"title":{},"body":{"modules/AppModule.html":{}}}],["column",{"_index":1885,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{}}}],["column('json",{"_index":1877,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["column('json')@isobject",{"_index":1865,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["column('varchar",{"_index":1873,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["column({type",{"_index":1868,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{}}}],["combination",{"_index":3695,"title":{},"body":{"license.html":{}}}],["commands",{"_index":1327,"title":{},"body":{"injectables/CryptoService.html":{}}}],["comment",{"_index":3839,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":3809,"title":{},"body":{"license.html":{}}}],["common",{"_index":3589,"title":{},"body":{"license.html":{}}}],["commonoptions",{"_index":1459,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["communicates",{"_index":3474,"title":{},"body":{"index.html":{}}}],["communication",{"_index":3654,"title":{},"body":{"license.html":{}}}],["compact",{"_index":1278,"title":{},"body":{"injectables/CryptoService.html":{}}}],["comparison",{"_index":275,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["compatible",{"_index":3491,"title":{},"body":{"index.html":{}}}],["compiled",{"_index":3619,"title":{},"body":{"license.html":{}}}],["complete",{"_index":2538,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["completed",{"_index":2894,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["completion",{"_index":2938,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["compliance",{"_index":3847,"title":{},"body":{"license.html":{}}}],["complies",{"_index":3743,"title":{},"body":{"license.html":{}}}],["computer",{"_index":3806,"title":{},"body":{"license.html":{}}}],["concatenate",{"_index":3265,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["condition",{"_index":2996,"title":{},"body":{"injectables/SessionService.html":{}}}],["conditions",{"_index":3571,"title":{},"body":{"license.html":{}}}],["config",{"_index":60,"title":{"interfaces/Config.html":{},"interfaces/Config-1.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CredentialsService.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionService.html":{},"interfaces/TDataShape.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{},"index.html":{}}}],["config.accesscertificateid",{"_index":217,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["config.allowextra",{"_index":1580,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.args",{"_index":1553,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.baseurl",{"_index":1819,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.baseurl.length",{"_index":1821,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.baseurl.substring(0",{"_index":1820,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.baseurl?.endswith",{"_index":1818,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.dto",{"_index":1887,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.dto.ts",{"_index":2464,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["config.dto.ts:10",{"_index":3158,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:12",{"_index":3159,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:14",{"_index":3160,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:16",{"_index":3162,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:18",{"_index":3163,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:23",{"_index":2465,"title":{},"body":{"classes/PresentationDuringIssuance.html":{}}}],["config.dto.ts:25",{"_index":2466,"title":{},"body":{"classes/PresentationDuringIssuance.html":{}}}],["config.dto.ts:6",{"_index":3164,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:8",{"_index":3161,"title":{},"body":{"classes/VCT.html":{}}}],["config.entity",{"_index":1172,"title":{},"body":{"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["config.entity.ts",{"_index":1862,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.entity.ts:12",{"_index":1875,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:15",{"_index":1883,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:17",{"_index":2456,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:18",{"_index":1867,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:22",{"_index":1866,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:24",{"_index":2459,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:25",{"_index":1872,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:29",{"_index":1884,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:32",{"_index":2454,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:33",{"_index":1880,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:37",{"_index":1881,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:38",{"_index":2458,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:42",{"_index":1870,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:44",{"_index":2461,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:50",{"_index":2453,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.headers",{"_index":1822,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.id",{"_index":155,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["config.in",{"_index":1551,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.key",{"_index":1549,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.map",{"_index":1552,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.presentation_during_issuance",{"_index":842,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["config.presentation_during_issuance.webhook",{"_index":843,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["config.ts",{"_index":2657,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["config.ts:12",{"_index":2659,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["config.ts:8",{"_index":2660,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["configmodule",{"_index":383,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["configmodule.forroot",{"_index":417,"title":{},"body":{"modules/AppModule.html":{}}}],["configs",{"_index":2207,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["configs[id",{"_index":2210,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["configservice",{"_index":34,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["configservice.get",{"_index":1458,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["configservice.get('jwt_issuer",{"_index":2061,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":2055,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('keycloak_client_id",{"_index":2053,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('keycloak_internal_issuer_url",{"_index":2052,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('keycloak_internal_issuer_url')}/protocol/openid",{"_index":2043,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('log_level",{"_index":440,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('oidc",{"_index":2035,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.getorthrow('db_database",{"_index":1471,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_host",{"_index":1463,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_password",{"_index":1469,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_port",{"_index":1465,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_username",{"_index":1467,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('folder",{"_index":481,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configservie",{"_index":1428,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["configurable",{"_index":1321,"title":{},"body":{"injectables/CryptoService.html":{}}}],["configuration",{"_index":97,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Client.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["configuration(@token",{"_index":1956,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["configuration(user",{"_index":1897,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["configurations",{"_index":105,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["configure",{"_index":3511,"title":{},"body":{"index.html":{}}}],["configured",{"_index":2060,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/PresentationRequest.html":{},"injectables/SessionService.html":{}}}],["conflictexception",{"_index":737,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["conflictexception('authorization",{"_index":793,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["conflictexception('issuer",{"_index":2738,"title":{},"body":{"injectables/ResolverService.html":{}}}],["conflictexception('request",{"_index":2576,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["conforms",{"_index":954,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["connect",{"_index":904,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["connect/certs",{"_index":2044,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["connect/token",{"_index":121,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["connection",{"_index":1696,"title":{},"body":{"controllers/HealthController.html":{}}}],["consequential",{"_index":3800,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":3820,"title":{},"body":{"license.html":{}}}],["console",{"_index":3335,"title":{},"body":{"changelog.html":{}}}],["console.error",{"_index":271,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["console.error('error",{"_index":223,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["console.log('keycloak",{"_index":2047,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["console.log('received",{"_index":2632,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["console.log('session",{"_index":2159,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["console.log(crt.subjectaltname",{"_index":1376,"title":{},"body":{"injectables/CryptoService.html":{}}}],["console.log(err",{"_index":2586,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["console.log(headers",{"_index":2428,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["console.log(json.stringify(presented",{"_index":2633,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["console.log(request.headers",{"_index":2629,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["console.warn('access",{"_index":228,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["conspicuously",{"_index":3663,"title":{},"body":{"license.html":{}}}],["const",{"_index":110,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{}}}],["constitutes",{"_index":3704,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":93,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["constructor(authzservice",{"_index":2165,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["constructor(configservice",{"_index":715,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["constructor(configservie",{"_index":1426,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["constructor(crpytoservice",{"_index":1126,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["constructor(cryptoservice",{"_index":2314,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["constructor(httpservice",{"_index":2527,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["constructor(logger",{"_index":2926,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["constructor(private",{"_index":1113,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerService.html":{},"controllers/StatusListController.html":{}}}],["constructor(reflector",{"_index":1991,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["constructor(sessionrepository",{"_index":2980,"title":{},"body":{"injectables/SessionService.html":{}}}],["construed",{"_index":3741,"title":{},"body":{"license.html":{}}}],["consume",{"_index":2623,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["contact",{"_index":3888,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["contained",{"_index":3729,"title":{},"body":{"license.html":{}}}],["containing",{"_index":618,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{}}}],["content",{"_index":474,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"index.html":{},"license.html":{}}}],["contents",{"_index":3737,"title":{},"body":{"license.html":{}}}],["contenttype",{"_index":1780,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["contenttype.split(';')[0]?.trim",{"_index":1785,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["context",{"_index":1997,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["context.flowtype",{"_index":2952,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.getclass",{"_index":2005,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":2004,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["context.sessionid",{"_index":2954,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.switchtohttp().getrequest",{"_index":2867,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":2868,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.tenantid",{"_index":2955,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.ts",{"_index":2831,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["context.ts:21",{"_index":2833,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["continue",{"_index":1566,"title":{},"body":{"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{}}}],["contract",{"_index":3598,"title":{},"body":{"license.html":{}}}],["contributing",{"_index":3552,"title":{},"body":{"index.html":{}}}],["contributing.md",{"_index":3560,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":3645,"title":{},"body":{"license.html":{}}}],["contribution(s",{"_index":3693,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":3745,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":3666,"title":{},"body":{"license.html":{}}}],["contributors",{"_index":3557,"title":{},"body":{"index.html":{}}}],["contributory",{"_index":3705,"title":{},"body":{"license.html":{}}}],["control",{"_index":3587,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":3588,"title":{},"body":{"license.html":{}}}],["controller",{"_index":342,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["controller(':tenantid/.well",{"_index":3298,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["controller(':tenantid/authorize",{"_index":666,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["controller(':tenantid/oid4vp",{"_index":2295,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["controller(':tenantid/status",{"_index":3037,"title":{},"body":{"controllers/StatusListController.html":{}}}],["controller(':tenantid/vci",{"_index":2149,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["controller('auth",{"_index":536,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('credentials/:tenantid",{"_index":1112,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["controller('health",{"_index":1702,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('issuer",{"_index":1930,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["controller('presentation",{"_index":2489,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["controller('session",{"_index":2824,"title":{},"body":{"controllers/SessionController.html":{}}}],["controllers",{"_index":344,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"controllers/WellKnownController.html":{},"overview.html":{}}}],["conversions",{"_index":3620,"title":{},"body":{"license.html":{}}}],["convert",{"_index":3229,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["converting",{"_index":963,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["converts",{"_index":3174,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["cookie",{"_index":489,"title":{},"body":{"interfaces/Auth.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["coordinate",{"_index":1486,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["copies",{"_index":3711,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2903,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["copyright",{"_index":3580,"title":{},"body":{"license.html":{}}}],["core",{"_index":3483,"title":{},"body":{"index.html":{}}}],["core/auth",{"_index":978,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["core/bodyserializer",{"_index":1729,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["core/pathserializer",{"_index":1734,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["core/types",{"_index":981,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["coreclient",{"_index":979,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["coreconfig",{"_index":980,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["correct",{"_index":1047,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/Oid4vciService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["counterclaim",{"_index":3701,"title":{},"body":{"license.html":{}}}],["covered",{"_index":249,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["cp",{"_index":3515,"title":{},"body":{"index.html":{}}}],["create",{"_index":289,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["create(session",{"_index":2987,"title":{},"body":{"injectables/SessionService.html":{}}}],["create(tenantid",{"_index":3170,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["create_authorization_request",{"_index":2337,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest",{"_index":2312,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest(requestid",{"_index":2316,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationservermetadata",{"_index":756,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["createclientconfig",{"_index":1037,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["createconfig",{"_index":1858,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["createcredentialoffer",{"_index":2212,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["created",{"_index":188,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/VaultKeyService.html":{}}}],["createdat",{"_index":1863,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{}}}],["createentry",{"_index":3094,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["createentry(session",{"_index":3125,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createhash",{"_index":1281,"title":{},"body":{"injectables/CryptoService.html":{}}}],["createhash(alg.replace",{"_index":1392,"title":{},"body":{"injectables/CryptoService.html":{}}}],["createheaderandpayload",{"_index":3045,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["createinterceptors",{"_index":1852,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["createkeydto",{"_index":3206,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["createlist",{"_index":3120,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createlist(tenantid",{"_index":3076,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["createoffer",{"_index":2163,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["createoffer(body",{"_index":2168,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["createparamdecorator",{"_index":3153,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["createqueryserializer",{"_index":1766,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["createqueryserializer(options.queryserializer",{"_index":1809,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["createrequest",{"_index":2313,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createrequest(requestid",{"_index":2321,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["creates",{"_index":1228,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{},"injectables/VaultKeyService.html":{}}}],["cred",{"_index":2249,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["cred.length",{"_index":2254,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential",{"_index":827,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"controllers/WellKnownController.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["credential(req",{"_index":2137,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["credential.config",{"_index":1182,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credential_configurations_supported",{"_index":1072,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{}}}],["credential_configurations_supported[credential.id",{"_index":1181,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credential_creation",{"_index":2960,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_endpoint",{"_index":1073,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["credential_issuance",{"_index":2959,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_issuer",{"_index":1074,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["credential_issuer}/vci/credential",{"_index":2199,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_issuer}/vci/notification",{"_index":2200,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_request",{"_index":2236,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_revoked",{"_index":2107,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["credential_verification",{"_index":2962,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credentialconfigurationid",{"_index":1143,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["credentialconfigurationids",{"_index":1939,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{}}}],["credentialconfigurationsupported",{"_index":1164,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{}}}],["credentialcount",{"_index":2418,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialid",{"_index":1139,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialissuer",{"_index":2196,"title":{},"body":{"injectables/Oid4vciService.html":{},"controllers/WellKnownController.html":{}}}],["credentialissuermetadatadto",{"_index":1063,"title":{"classes/CredentialIssuerMetadataDto.html":{}},"body":{"classes/CredentialIssuerMetadataDto.html":{},"controllers/WellKnownController.html":{}}}],["credentialofferobject",{"_index":2792,"title":{},"body":{"entities/Session.html":{}}}],["credentialpayload",{"_index":2217,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["credentialrequest",{"_index":2221,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialresponse",{"_index":2145,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{}}}],["credentials",{"_index":160,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"index.html":{}}}],["credentials.dto",{"_index":529,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":971,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.dto.ts:5",{"_index":972,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.dto.ts:7",{"_index":973,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.length",{"_index":2262,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["credentials.push(cred",{"_index":2251,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentials.service",{"_index":1110,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["credentials.split",{"_index":567,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials/:tenantid",{"_index":1098,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["credentials/credentials.controller",{"_index":1978,"title":{},"body":{"modules/IssuerModule.html":{}}}],["credentials/credentials.service",{"_index":746,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["credentials/entities/issuance",{"_index":1981,"title":{},"body":{"modules/IssuerModule.html":{}}}],["credentials?.length",{"_index":2419,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialscontroller",{"_index":1096,"title":{"controllers/CredentialsController.html":{}},"body":{"controllers/CredentialsController.html":{},"modules/IssuerModule.html":{}}}],["credentialsissued",{"_index":2261,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialsize",{"_index":2253,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialsservice",{"_index":717,"title":{"injectables/CredentialsService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"overview.html":{}}}],["credentialtype",{"_index":2932,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["cron",{"_index":3000,"title":{},"body":{"injectables/SessionService.html":{}}}],["cross",{"_index":3699,"title":{},"body":{"license.html":{}}}],["crpytoservice",{"_index":1131,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["crt",{"_index":14,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/RegistrarService.html":{}}}],["crv",{"_index":1478,"title":{},"body":{"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/JwksResponseDto.html":{}}}],["crypto",{"_index":1430,"title":{},"body":{"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{}}}],["crypto.service",{"_index":1241,"title":{},"body":{"modules/CryptoModule.html":{}}}],["crypto/crypto",{"_index":1620,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["crypto/crypto.module",{"_index":385,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}}}],["crypto/crypto.service",{"_index":48,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["crypto/encryption/encryption.service",{"_index":2329,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["crypto/key/crypto/crypto.module",{"_index":401,"title":{},"body":{"modules/AppModule.html":{}}}],["crypto/key/key.module",{"_index":399,"title":{},"body":{"modules/AppModule.html":{}}}],["crypto_validation_schema",{"_index":400,"title":{},"body":{"modules/AppModule.html":{}}}],["cryptocontrollerowncertdata",{"_index":3890,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cryptocontrollerowncertparseddata",{"_index":3891,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cryptocontrollerowncertparsedresponse",{"_index":3892,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cryptocontrollerowncertparsedresponses",{"_index":3893,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cryptocontrollerowncertresponse",{"_index":3894,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cryptocontrollerowncertresponses",{"_index":3895,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cryptographic",{"_index":99,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"index.html":{}}}],["cryptoimplementation",{"_index":1213,"title":{"interfaces/CryptoImplementation.html":{}},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{}}}],["cryptokey",{"_index":1505,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{}}}],["cryptomodule",{"_index":369,"title":{"modules/CryptoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["cryptoservice",{"_index":47,"title":{"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"overview.html":{}}}],["cryptotype",{"_index":1431,"title":{},"body":{"injectables/CryptoService-1.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["csr",{"_index":1354,"title":{},"body":{"injectables/CryptoService.html":{}}}],["ctx",{"_index":3154,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":3155,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["curl",{"_index":3529,"title":{},"body":{"index.html":{}}}],["current_timestamp",{"_index":1869,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["currentdate",{"_index":1387,"title":{},"body":{"injectables/CryptoService.html":{}}}],["currently",{"_index":331,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["curve",{"_index":1475,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["custom",{"_index":993,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["customary",{"_index":3764,"title":{},"body":{"license.html":{}}}],["customprops",{"_index":455,"title":{},"body":{"modules/AppModule.html":{}}}],["d",{"_index":3532,"title":{},"body":{"index.html":{},"license.html":{}}}],["d6205da",{"_index":3384,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":3797,"title":{},"body":{"license.html":{}}}],["data",{"_index":225,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/typealiases.html":{}}}],["data.append(key",{"_index":2642,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["data.revoked",{"_index":227,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["data.tostring",{"_index":2655,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["database",{"_index":1470,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"index.html":{}}}],["database/database.module",{"_index":407,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":370,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":168,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"license.html":{}}}],["date((payload.exp",{"_index":1389,"title":{},"body":{"injectables/CryptoService.html":{}}}],["date().gettime",{"_index":1203,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{}}}],["date(date.now",{"_index":3025,"title":{},"body":{"injectables/SessionService.html":{}}}],["date(token.expiresat",{"_index":170,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["date.gettime",{"_index":182,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["date.now",{"_index":2885,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["day",{"_index":3005,"title":{},"body":{"injectables/SessionService.html":{}}}],["days",{"_index":1351,"title":{},"body":{"injectables/CryptoService.html":{}}}],["db",{"_index":1703,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["db_database",{"_index":1455,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_host",{"_index":1446,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_password",{"_index":1454,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_port",{"_index":1451,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_type",{"_index":1443,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_username",{"_index":1453,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_validation_schema",{"_index":1442,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dbtype",{"_index":1457,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dc+sd",{"_index":2365,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcql",{"_index":2455,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["dcql_query",{"_index":248,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{}}}],["dcql_query.length",{"_index":2352,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcqlquerycount",{"_index":2350,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dd",{"_index":451,"title":{},"body":{"modules/AppModule.html":{}}}],["de",{"_index":894,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["deal",{"_index":1932,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["debug",{"_index":427,"title":{},"body":{"modules/AppModule.html":{}}}],["debugging",{"_index":1684,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["declarations",{"_index":362,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["decode",{"_index":1682,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodedjwt",{"_index":3896,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["decodedvc",{"_index":2578,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.header",{"_index":2581,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.payload",{"_index":2580,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodejwt",{"_index":1653,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodejwt(token",{"_index":1686,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodetoken",{"_index":2007,"title":{},"body":{"injectables/JwtService.html":{}}}],["decodetoken(token",{"_index":1685,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decorators",{"_index":310,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"controllers/CredentialsController.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"entities/KeyEntity.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequest.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["decryptjwe",{"_index":1495,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe(response",{"_index":1499,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["deeply",{"_index":2767,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["deepobject",{"_index":941,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["deeppartial",{"_index":2988,"title":{},"body":{"injectables/SessionService.html":{}}}],["default",{"_index":430,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Auth.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{}}}],["defaultheaders",{"_index":1857,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["defaultpathserializer",{"_index":1747,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["defaultqueryserializer",{"_index":1856,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["defend",{"_index":3826,"title":{},"body":{"license.html":{}}}],["define",{"_index":680,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/PresentationConfig.html":{}}}],["defined",{"_index":312,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"license.html":{}}}],["defines",{"_index":2669,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["definition",{"_index":3591,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":3574,"title":{},"body":{"license.html":{}}}],["delete",{"_index":905,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"interfaces/Fields.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Params.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["delete('/:id",{"_index":1900,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["delete(':id",{"_index":2474,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration",{"_index":1894,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(@param('id",{"_index":1959,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(id",{"_index":1899,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["deletecredentialconfiguration",{"_index":1119,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["deletecredentialconfiguration(tenantid",{"_index":1132,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["deletepresentationconfig",{"_index":2522,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletepresentationconfig(id",{"_index":2534,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletes",{"_index":1134,"title":{},"body":{"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["deletion",{"_index":2537,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deliberate",{"_index":3792,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":360,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":3313,"title":{},"body":{"changelog.html":{}}}],["deployment",{"_index":3319,"title":{},"body":{"changelog.html":{}}}],["der",{"_index":3175,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["der.slice(2",{"_index":3243,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["derivative",{"_index":3630,"title":{},"body":{"license.html":{}}}],["derived",{"_index":3632,"title":{},"body":{"license.html":{}}}],["dersignature",{"_index":3176,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["dertojwtsignature",{"_index":3167,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["dertojwtsignature(dersignature",{"_index":3172,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["desc",{"_index":2570,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["describing",{"_index":3765,"title":{},"body":{"license.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"interfaces/CryptoImplementation.html":{},"classes/EC_Public.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"interfaces/TokenPayload.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"license.html":{},"properties.html":{}}}],["designated",{"_index":3665,"title":{},"body":{"license.html":{}}}],["desired",{"_index":955,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["details",{"_index":625,"title":{},"body":{"classes/AuthorizationResponse.html":{},"entities/PresentationConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{}}}],["determining",{"_index":3783,"title":{},"body":{"license.html":{}}}],["dev",{"_index":892,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["developers",{"_index":3555,"title":{},"body":{"index.html":{}}}],["development",{"_index":3495,"title":{},"body":{"index.html":{}}}],["development/testing",{"_index":870,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["df29d1e",{"_index":3362,"title":{},"body":{"changelog.html":{}}}],["different",{"_index":279,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["differnt",{"_index":2267,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["digest",{"_index":1154,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/PresentationsService.html":{}}}],["diplomatic",{"_index":3446,"title":{},"body":{"index.html":{}}}],["direct",{"_index":3594,"title":{},"body":{"license.html":{}}}],["direct_post.jwt",{"_index":2358,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["direction",{"_index":3597,"title":{},"body":{"license.html":{}}}],["disable",{"_index":174,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["disclaimer",{"_index":3768,"title":{},"body":{"license.html":{}}}],["disclosed",{"_index":2608,"title":{},"body":{"interfaces/PresentedData.html":{}}}],["disclosureframe",{"_index":1188,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{}}}],["discoveryendpoint",{"_index":122,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["discussing",{"_index":3660,"title":{},"body":{"license.html":{}}}],["display",{"_index":1075,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{},"license.html":{}}}],["display.json",{"_index":898,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vciService.html":{}}}],["displayinfo",{"_index":890,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["distribute",{"_index":3681,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":3731,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":3573,"title":{},"body":{"license.html":{}}}],["dns",{"_index":237,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["docker",{"_index":3381,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["document",{"_index":2717,"title":{},"body":{"injectables/ResolverService.html":{},"license.html":{}}}],["documentation",{"_index":3538,"title":{},"body":{"index.html":{},"license.html":{}}}],["documents",{"_index":2533,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["don't",{"_index":997,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["dpop",{"_index":795,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["dpop_jkt",{"_index":688,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["dpop_signing_alg_values_supported",{"_index":765,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["dto",{"_index":611,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["dto/auth",{"_index":2562,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dto/authorization",{"_index":2294,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["dto/authorize",{"_index":661,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["dto/client",{"_index":528,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/credential",{"_index":1886,"title":{},"body":{"entities/IssuanceConfig.html":{},"controllers/WellKnownController.html":{}}}],["dto/issuer",{"_index":2719,"title":{},"body":{"injectables/ResolverService.html":{}}}],["dto/jwks",{"_index":3295,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["dto/notification",{"_index":2146,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{}}}],["dto/oauth",{"_index":3296,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["dto/offer",{"_index":2188,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["dto/par",{"_index":665,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["dto/presentation",{"_index":2333,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dto/schema",{"_index":1168,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{}}}],["dto/status",{"_index":3053,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["dto/token",{"_index":532,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/vp",{"_index":2462,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["dummy",{"_index":1332,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummy.csr",{"_index":1311,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummy_key.pem",{"_index":1309,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummycsr",{"_index":1310,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummykey",{"_index":1308,"title":{},"body":{"injectables/CryptoService.html":{}}}],["duration",{"_index":2888,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["duration}ms",{"_index":2895,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["during",{"_index":2438,"title":{},"body":{"injectables/Oid4vpService.html":{},"index.html":{}}}],["dynamicmodule",{"_index":2070,"title":{},"body":{"modules/KeyModule.html":{}}}],["e",{"_index":3522,"title":{},"body":{"index.html":{}}}],["e.g",{"_index":962,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"interfaces/SessionLogContext.html":{}}}],["e3e5971",{"_index":3334,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":2133,"title":{},"body":{"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/VaultKeyService.html":{},"license.html":{}}}],["early",{"_index":3494,"title":{},"body":{"index.html":{}}}],["easier",{"_index":273,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["easily",{"_index":3477,"title":{},"body":{"index.html":{}}}],["easy",{"_index":3500,"title":{},"body":{"index.html":{}}}],["ec",{"_index":1340,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["ec_paramgen_curve:prime256v1",{"_index":1342,"title":{},"body":{"injectables/CryptoService.html":{}}}],["ec_public",{"_index":1293,"title":{"classes/EC_Public.html":{}},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["ecdh",{"_index":1524,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["ecdsa",{"_index":3208,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["echo",{"_index":3517,"title":{},"body":{"index.html":{}}}],["ecosystem",{"_index":3458,"title":{},"body":{"index.html":{}}}],["ed25519",{"_index":1435,"title":{},"body":{"injectables/CryptoService-1.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["eddsa",{"_index":2363,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["editorial",{"_index":3633,"title":{},"body":{"license.html":{}}}],["effect",{"_index":946,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["effectively",{"_index":1783,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["eject",{"_index":1712,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["eject(id",{"_index":1718,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["elaborations",{"_index":3636,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":3485,"title":{},"body":{"index.html":{},"license.html":{}}}],["element",{"_index":3097,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["elements",{"_index":1094,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["elliptic",{"_index":1474,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["emits",{"_index":2852,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["emitter",{"_index":65,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["emitter.module",{"_index":413,"title":{},"body":{"modules/AppModule.html":{}}}],["emitter/dist/event",{"_index":412,"title":{},"body":{"modules/AppModule.html":{}}}],["empty",{"_index":290,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["enabled",{"_index":133,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["enclosed",{"_index":3835,"title":{},"body":{"license.html":{}}}],["encode",{"_index":3268,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encoded",{"_index":945,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["encodedheader",{"_index":3231,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodedheader}.${encodedpayload",{"_index":3237,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodedheader}.${encodedpayload}.${signature",{"_index":3239,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodedpayload",{"_index":3234,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodeuricomponent",{"_index":1764,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["encodeuricomponent(key)}=${encodeuricomponent(value",{"_index":2406,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["encodeuricomponent(v",{"_index":2760,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["encodeuricomponent(value",{"_index":2772,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["encryption.json",{"_index":1513,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption/encryption.service",{"_index":1242,"title":{},"body":{"modules/CryptoModule.html":{}}}],["encryptionservice",{"_index":1239,"title":{"injectables/EncryptionService.html":{}},"body":{"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"overview.html":{}}}],["end",{"_index":1380,"title":{},"body":{"injectables/CryptoService.html":{},"license.html":{}}}],["endpoint",{"_index":514,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["endpoints",{"_index":630,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/HealthController.html":{},"controllers/WellKnownController.html":{}}}],["ensure",{"_index":163,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["entities",{"_index":1860,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{},"license.html":{},"overview.html":{}}}],["entities/issuance",{"_index":1171,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["entities/key.entity",{"_index":2079,"title":{},"body":{"modules/KeyModule.html":{}}}],["entities/presentation",{"_index":2483,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["entities/session.entity",{"_index":2819,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["entities/status",{"_index":3051,"title":{},"body":{"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["entity",{"_index":1859,"title":{"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{}},"body":{"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["entries",{"_index":3060,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["entries.length",{"_index":3110,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["entry",{"_index":3093,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["enum",{"_index":326,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/PresentationRequest.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["enumerations",{"_index":3431,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":3348,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["env.example",{"_index":3516,"title":{},"body":{"index.html":{}}}],["environment",{"_index":2670,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["err",{"_index":1843,"title":{},"body":{"classes/Interceptors.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{}}}],["err.message",{"_index":2447,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["errinterceptor",{"_index":1842,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"miscellaneous/typealiases.html":{}}}],["error",{"_index":250,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{}}}],["error('credential",{"_index":836,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["error('error",{"_index":239,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["error('invalid",{"_index":2223,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/VaultKeyService.html":{}}}],["error('issuer",{"_index":2722,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error('key",{"_index":1645,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/ResolverService.html":{}}}],["error('no",{"_index":2589,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["error('signer",{"_index":1403,"title":{},"body":{"injectables/CryptoService.html":{}}}],["error('stack",{"_index":3100,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["error('subject",{"_index":2729,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error(`invalid",{"_index":1680,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["error(`unsupported",{"_index":1438,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["error.message",{"_index":1681,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.name",{"_index":2899,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.stack",{"_index":2902,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error_description",{"_index":826,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["errors",{"_index":2914,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["es",{"_index":1517,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["es256",{"_index":766,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"miscellaneous/typealiases.html":{}}}],["es256.getverifier(publickey",{"_index":2583,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["es256k",{"_index":2368,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["es384",{"_index":2364,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["eslint",{"_index":173,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["eslint/no",{"_index":178,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["etc",{"_index":1024,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"index.html":{}}}],["eudi",{"_index":891,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"index.html":{}}}],["eudiplo",{"_index":351,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"index.html":{}}}],["even",{"_index":3489,"title":{},"body":{"index.html":{},"license.html":{}}}],["event",{"_index":881,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/NotificationRequestDto.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"license.html":{}}}],["eventemitter",{"_index":855,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{}}}],["eventemitter2",{"_index":850,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{}}}],["eventemittermodule",{"_index":411,"title":{},"body":{"modules/AppModule.html":{}}}],["eventemittermodule.forroot",{"_index":486,"title":{},"body":{"modules/AppModule.html":{}}}],["events",{"_index":68,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["example",{"_index":316,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["examples",{"_index":507,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["except",{"_index":3683,"title":{},"body":{"license.html":{}}}],["exchange",{"_index":654,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["exclude",{"_index":1537,"title":{},"body":{"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{}}}],["excluding",{"_index":3662,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":3674,"title":{},"body":{"license.html":{}}}],["execsync",{"_index":1295,"title":{},"body":{"injectables/CryptoService.html":{}}}],["execsync(cmd",{"_index":1329,"title":{},"body":{"injectables/CryptoService.html":{}}}],["executed",{"_index":3755,"title":{},"body":{"license.html":{}}}],["execution",{"_index":2847,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["executioncontext",{"_index":1995,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TokenPayload.html":{}}}],["exercise",{"_index":3787,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":3608,"title":{},"body":{"license.html":{}}}],["exist",{"_index":288,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"index.html":{}}}],["existing",{"_index":201,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"index.html":{}}}],["exists",{"_index":204,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["exists(id",{"_index":1720,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["existssync",{"_index":54,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["existssync(certout",{"_index":1320,"title":{},"body":{"injectables/CryptoService.html":{}}}],["existssync(dummykey",{"_index":1335,"title":{},"body":{"injectables/CryptoService.html":{}}}],["existssync(file",{"_index":1370,"title":{},"body":{"injectables/CryptoService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["existssync(filepath",{"_index":287,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["existssync(folder",{"_index":887,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["existssync(join(folder",{"_index":1372,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["existssync(this.folder",{"_index":1299,"title":{},"body":{"injectables/CryptoService.html":{}}}],["existssync(this.privateenncryptionpath",{"_index":1515,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exp",{"_index":2375,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["expandvariables",{"_index":434,"title":{},"body":{"modules/AppModule.html":{}}}],["expected",{"_index":2125,"title":{},"body":{"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["expectedcode",{"_index":799,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["expectednonce",{"_index":2246,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["expextedapikey",{"_index":2624,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["expiration",{"_index":2450,"title":{},"body":{"classes/ParResponseDto.html":{}}}],["expirationdate",{"_index":169,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["expirationdate.gettime",{"_index":181,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["expire",{"_index":2059,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expires_in",{"_index":548,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{},"classes/TokenResponse.html":{}}}],["expiresin",{"_index":579,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["expiresinseconds",{"_index":812,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["explicitly",{"_index":3747,"title":{},"body":{"license.html":{}}}],["explode",{"_index":1752,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["exploded",{"_index":937,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["export",{"_index":79,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["exportable",{"_index":3212,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["exportjwk",{"_index":1509,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["exportjwk(cryptokey",{"_index":3222,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["exportjwk(secret.privatekey",{"_index":1521,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exportjwk(secret.publickey",{"_index":1522,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exportpkcs8",{"_index":1612,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["exportpkcs8((await",{"_index":1637,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["exports",{"_index":365,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["exportspki",{"_index":1613,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["exportspki((await",{"_index":1639,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["expose",{"_index":1853,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["express",{"_index":658,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"dependencies.html":{},"license.html":{}}}],["extends",{"_index":984,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationDuringIssuance.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{}}}],["extends#integrity",{"_index":2467,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["extension",{"_index":1357,"title":{},"body":{"injectables/CryptoService.html":{}}}],["external",{"_index":552,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"index.html":{}}}],["extfile",{"_index":1365,"title":{},"body":{"injectables/CryptoService.html":{}}}],["extra",{"_index":1574,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["extract",{"_index":557,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Fields.html":{},"injectables/JwtStrategy.html":{},"interfaces/Params.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{}}}],["extractable",{"_index":1519,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{}}}],["extractjwt",{"_index":2029,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":2050,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extraprefixes",{"_index":1545,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["extraprefixes.find(([prefix",{"_index":1575,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["extraprefixesmap",{"_index":1540,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":546,"title":{},"body":{"controllers/AuthController.html":{}}}],["f75298f",{"_index":3340,"title":{},"body":{"changelog.html":{}}}],["f7e7505",{"_index":3359,"title":{},"body":{"changelog.html":{}}}],["face",{"_index":3459,"title":{},"body":{"index.html":{}}}],["failed",{"_index":2278,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/SessionLoggerService.html":{}}}],["fails",{"_index":2601,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["failure",{"_index":3807,"title":{},"body":{"license.html":{}}}],["fall",{"_index":569,"title":{},"body":{"controllers/AuthController.html":{}}}],["false",{"_index":137,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{}}}],["fatal",{"_index":429,"title":{},"body":{"modules/AppModule.html":{}}}],["features",{"_index":3343,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["fee",{"_index":3814,"title":{},"body":{"license.html":{}}}],["fetch",{"_index":989,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["field",{"_index":1536,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{},"miscellaneous/typealiases.html":{}}}],["field.map",{"_index":1568,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["fields",{"_index":258,"title":{"interfaces/Fields.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Fields.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["fields[index",{"_index":1565,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["fieldsconfig",{"_index":1539,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{},"miscellaneous/typealiases.html":{}}}],["fieldsconfig[number",{"_index":1562,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["fifty",{"_index":3601,"title":{},"body":{"license.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"license.html":{}}}],["file.bits",{"_index":3079,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["file.elements[id",{"_index":3105,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["file.jwt",{"_index":3085,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["file.stack.pop",{"_index":3099,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["filed",{"_index":3709,"title":{},"body":{"license.html":{}}}],["filename",{"_index":3054,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["filepath",{"_index":284,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["files",{"_index":3614,"title":{},"body":{"license.html":{}}}],["filesystem",{"_index":2072,"title":{},"body":{"modules/KeyModule.html":{}}}],["filesystemkeyservice",{"_index":1583,"title":{"injectables/FileSystemKeyService.html":{}},"body":{"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{}}}],["fill(0",{"_index":3070,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["final",{"_index":913,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["finally",{"_index":2718,"title":{},"body":{"injectables/ResolverService.html":{}}}],["find",{"_index":878,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["findclientbyid",{"_index":1052,"title":{},"body":{"injectables/ClientService.html":{}}}],["findclientbyid(clientid",{"_index":879,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["finding",{"_index":224,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["findonebyorfail",{"_index":2575,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["findoptionswhere",{"_index":2994,"title":{},"body":{"injectables/SessionService.html":{}}}],["first",{"_index":2716,"title":{},"body":{"injectables/ResolverService.html":{}}}],["firstvaluefrom",{"_index":2330,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["firstvaluefrom(this.httpservice.get(uri)).then",{"_index":2587,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fitness",{"_index":3780,"title":{},"body":{"license.html":{}}}],["fixes",{"_index":3311,"title":{},"body":{"changelog.html":{}}}],["flow",{"_index":462,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["flow_complete",{"_index":2957,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_error",{"_index":2958,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_start",{"_index":2956,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flows",{"_index":3484,"title":{},"body":{"index.html":{}}}],["flowtype",{"_index":2234,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["fn",{"_index":1725,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["focus",{"_index":3479,"title":{},"body":{"index.html":{}}}],["folder",{"_index":420,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["following",{"_index":3714,"title":{},"body":{"license.html":{}}}],["foo",{"_index":2625,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["force_pubkey",{"_index":1361,"title":{},"body":{"injectables/CryptoService.html":{}}}],["foreach((file",{"_index":1369,"title":{},"body":{"injectables/CryptoService.html":{}}}],["form",{"_index":938,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/VaultKeyService.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["format",{"_index":24,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/EC_Public.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["formdata",{"_index":1020,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["formdatabodyserializer",{"_index":2645,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["forroot",{"_index":2068,"title":{},"body":{"modules/KeyModule.html":{}}}],["forwardref",{"_index":2511,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["found",{"_index":782,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["free",{"_index":3092,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"license.html":{}}}],["friendly",{"_index":3505,"title":{},"body":{"index.html":{}}}],["fs",{"_index":852,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["full",{"_index":3534,"title":{},"body":{"index.html":{}}}],["function",{"_index":141,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/TDataShape.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":3433,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":2801,"title":{},"body":{"entities/Session.html":{}}}],["g",{"_index":1738,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{}}}],["general",{"_index":3357,"title":{},"body":{"changelog.html":{}}}],["generate",{"_index":1336,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/PresentationManagementController.html":{}}}],["generated",{"_index":46,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["generated/client.gen",{"_index":39,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["generatekeypair",{"_index":1219,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/EncryptionService.html":{}}}],["generatekeypair('ecdh",{"_index":1516,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generaterandom",{"_index":1395,"title":{},"body":{"injectables/CryptoService.html":{}}}],["generates",{"_index":1223,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{}}}],["generatesalt",{"_index":1155,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["generatetoken",{"_index":1655,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generatetoken(payload",{"_index":2011,"title":{},"body":{"injectables/JwtService.html":{}}}],["generatetokenoptions",{"_index":1651,"title":{"interfaces/GenerateTokenOptions.html":{}},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generation",{"_index":1657,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"changelog.html":{}}}],["generic",{"_index":1216,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/KeyService.html":{},"injectables/SessionLoggerService.html":{}}}],["genpkey",{"_index":1339,"title":{},"body":{"injectables/CryptoService.html":{}}}],["get(':id",{"_index":2812,"title":{},"body":{"controllers/SessionController.html":{}}}],["get('jwks.json",{"_index":3304,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('oauth",{"_index":3286,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('openid",{"_index":3299,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('request/:requestid/:session",{"_index":2296,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["get('request/:requestid/:session')@sessionlogger('session",{"_index":2286,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["get('schema/:id",{"_index":1102,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["get('session",{"_index":2158,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["get('status",{"_index":3032,"title":{},"body":{"controllers/StatusListController.html":{}}}],["get('vct/:id",{"_index":1107,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["get()@healthcheck",{"_index":1697,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(state",{"_index":2990,"title":{},"body":{"injectables/SessionService.html":{}}}],["getaccesscertificateid",{"_index":2679,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["getaccesscertificateid(config",{"_index":215,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["getalg",{"_index":1424,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["getall",{"_index":2978,"title":{},"body":{"injectables/SessionService.html":{}}}],["getallsessions",{"_index":2807,"title":{},"body":{"controllers/SessionController.html":{}}}],["getauthorizationserver",{"_index":709,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["getauthorizationserver(tenantid",{"_index":723,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["getauthtoken",{"_index":495,"title":{},"body":{"interfaces/Auth.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getauthtoken(auth",{"_index":1795,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getby",{"_index":779,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["getby(where",{"_index":2993,"title":{},"body":{"injectables/SessionService.html":{}}}],["getcallbackcontext",{"_index":1245,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getcallbackcontext(tenantid",{"_index":1255,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getcertchain",{"_index":1246,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getcertchain(type",{"_index":1257,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getclients",{"_index":866,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["getconfig",{"_index":906,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/CredentialsService.html":{},"injectables/StatusListService.html":{}}}],["getconfig(tenantid",{"_index":1135,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["getconfigbyid",{"_index":1120,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getconfigbyid(credentialid",{"_index":1137,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredential",{"_index":1121,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{}}}],["getcredential(credentialconfigurationid",{"_index":1140,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredential(req",{"_index":2170,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["getcredentialconfiguration",{"_index":1122,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredentialconfiguration(tenantid",{"_index":1144,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcrypto",{"_index":1425,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["getcrypto(alg",{"_index":1432,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["getencryptionpublickey",{"_index":1496,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getexternaloidcconfig",{"_index":2017,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getexternaloidcconfig(configservice",{"_index":2020,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getheadersfromrequest",{"_index":743,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"miscellaneous/functions.html":{}}}],["getheadersfromrequest(req",{"_index":789,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"miscellaneous/functions.html":{}}}],["gethello",{"_index":347,"title":{},"body":{"controllers/AppController.html":{}}}],["getintegratedoauth2config",{"_index":2018,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getintegratedoauth2config(configservice",{"_index":2024,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getinterceptorindex",{"_index":1713,"title":{},"body":{"classes/Interceptors.html":{}}}],["getinterceptorindex(id",{"_index":1722,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getjwk",{"_index":3168,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["getjwk(key",{"_index":3177,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["getjwks",{"_index":1247,"title":{},"body":{"injectables/CryptoService.html":{},"controllers/WellKnownController.html":{}}}],["getjwks(tenantid",{"_index":1262,"title":{},"body":{"injectables/CryptoService.html":{},"controllers/WellKnownController.html":{}}}],["getkeys",{"_index":1588,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["getkeys(tenantid",{"_index":1592,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["getkid",{"_index":1589,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getkid(tenantid",{"_index":1595,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getlist",{"_index":3030,"title":{},"body":{"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["getlist(@param('tenantid",{"_index":3039,"title":{},"body":{"controllers/StatusListController.html":{}}}],["getlist(tenantid",{"_index":3031,"title":{},"body":{"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["getoauth2token",{"_index":503,"title":{},"body":{"controllers/AuthController.html":{}}}],["getoauth2token(body",{"_index":504,"title":{},"body":{"controllers/AuthController.html":{}}}],["getoffer",{"_index":1895,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getoffer(res",{"_index":1902,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getorthrow('public_url",{"_index":233,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["getparseas",{"_index":1779,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getpresentationconfig",{"_index":2523,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfig(id",{"_index":2539,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs",{"_index":2524,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs(tenantid",{"_index":2541,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpublickey",{"_index":1590,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getpublickey(type",{"_index":1597,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getrequestwithsession",{"_index":2283,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getrequestwithsession(tenantid",{"_index":2285,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getresponse",{"_index":2284,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["getresponse(body",{"_index":2289,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["gets",{"_index":3182,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["getschema",{"_index":1123,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getschema(id",{"_index":1146,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getsession",{"_index":2808,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(@param('id",{"_index":2826,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(id",{"_index":2811,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsigner",{"_index":1220,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getsigner(privatekeyjwk",{"_index":1225,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getsignjwtcallback",{"_index":1248,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getsignjwtcallback(tenantid",{"_index":1264,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getting",{"_index":1089,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["geturl",{"_index":1805,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getvct",{"_index":1124,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getvct(credentialid",{"_index":1148,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getverifier",{"_index":1221,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getverifier(publickeyjwk",{"_index":1230,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["ghcr.io/cre8/eudiplo:latest",{"_index":3528,"title":{},"body":{"index.html":{}}}],["git",{"_index":3512,"title":{},"body":{"index.html":{}}}],["give",{"_index":3715,"title":{},"body":{"license.html":{}}}],["given",{"_index":2288,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/VaultKeyService.html":{}}}],["global",{"_index":2071,"title":{},"body":{"modules/KeyModule.html":{}}}],["globalthis.fetch",{"_index":994,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["globalthis.headers",{"_index":1261,"title":{},"body":{"injectables/CryptoService.html":{},"miscellaneous/functions.html":{}}}],["goodwill",{"_index":3804,"title":{},"body":{"license.html":{}}}],["governing",{"_index":3851,"title":{},"body":{"license.html":{}}}],["grade",{"_index":3492,"title":{},"body":{"index.html":{}}}],["grant",{"_index":555,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"license.html":{}}}],["grant_type",{"_index":540,"title":{},"body":{"controllers/AuthController.html":{}}}],["granted",{"_index":3610,"title":{},"body":{"license.html":{}}}],["granting",{"_index":3583,"title":{},"body":{"license.html":{}}}],["grants",{"_index":2214,"title":{},"body":{"injectables/Oid4vciService.html":{},"license.html":{}}}],["granttype",{"_index":749,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["graph",{"_index":3856,"title":{},"body":{"modules.html":{}}}],["grossly",{"_index":3793,"title":{},"body":{"license.html":{}}}],["guide",{"_index":3537,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":3561,"title":{},"body":{"index.html":{}}}],["h",{"_index":3531,"title":{},"body":{"index.html":{}}}],["handle",{"_index":642,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["handled",{"_index":1678,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{}}}],["handlenotification",{"_index":2164,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["handlenotification(req",{"_index":2172,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["handler",{"_index":2849,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["handlerequest",{"_index":2637,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"miscellaneous/functions.html":{}}}],["handlerequest(request",{"_index":2613,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"miscellaneous/functions.html":{}}}],["handles",{"_index":631,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["handlesigningkeyerror",{"_index":2045,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["handling",{"_index":101,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"changelog.html":{}}}],["harmless",{"_index":3828,"title":{},"body":{"license.html":{}}}],["hascerts",{"_index":1249,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hascerts(tenantid",{"_index":1267,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hash",{"_index":1391,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hashalg",{"_index":1194,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["hashalgorithm",{"_index":1286,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hashalgorithm.sha256",{"_index":1411,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hashcallback",{"_index":1408,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hasher",{"_index":1193,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["hasresponsedata",{"_index":2445,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["haswebhook",{"_index":2413,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["head",{"_index":907,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["header",{"_index":314,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["header('content",{"_index":3038,"title":{},"body":{"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["header.entries",{"_index":1830,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["header.kid",{"_index":2742,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c",{"_index":2723,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c.map",{"_index":2725,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header['jwk",{"_index":2732,"title":{},"body":{"injectables/ResolverService.html":{}}}],["headername",{"_index":308,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["headers",{"_index":470,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["headers.append(key",{"_index":1421,"title":{},"body":{"injectables/CryptoService.html":{}}}],["headers.authorization",{"_index":559,"title":{},"body":{"controllers/AuthController.html":{}}}],["headers.set(key",{"_index":1422,"title":{},"body":{"injectables/CryptoService.html":{}}}],["headers[session.webhook.auth.config.headername",{"_index":2426,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["headers_",{"_index":1542,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["health",{"_index":1691,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":1707,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":408,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1699,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1694,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1689,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["healthcontrollercheckdata",{"_index":3898,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["healthcontrollercheckerror",{"_index":3899,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["healthcontrollercheckerrors",{"_index":3900,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["healthcontrollercheckresponse",{"_index":3901,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["healthcontrollercheckresponses",{"_index":3902,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["healthmodule",{"_index":371,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["helper",{"_index":1324,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hereby",{"_index":3670,"title":{},"body":{"license.html":{}}}],["herein",{"_index":3751,"title":{},"body":{"license.html":{}}}],["hey",{"_index":1004,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["hh:mm:ss",{"_index":452,"title":{},"body":{"modules/AppModule.html":{}}}],["hold",{"_index":3827,"title":{},"body":{"license.html":{}}}],["host",{"_index":231,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["host.replace('https",{"_index":2354,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${tenantid",{"_index":2339,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${tenantid}/credentials/vct/${vc.id",{"_index":1211,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["host}/${tenantid}/oid4vp/response",{"_index":2356,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["hour",{"_index":2973,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["hours",{"_index":583,"title":{},"body":{"controllers/AuthController.html":{},"modules/SessionModule.html":{}}}],["hs256",{"_index":1665,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["http",{"_index":493,"title":{},"body":{"interfaces/Auth.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{},"index.html":{}}}],["http://localhost:3000/auth/oauth2/token",{"_index":3530,"title":{},"body":{"index.html":{}}}],["http://www.apache.org/licenses",{"_index":3569,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/license",{"_index":3849,"title":{},"body":{"license.html":{}}}],["httpmethod",{"_index":739,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["httpmodule",{"_index":2075,"title":{},"body":{"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"modules/VerifierModule.html":{}}}],["https://${req.host}${req.url",{"_index":2226,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["https://cre8.github.io/eudiplo/latest",{"_index":356,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["https://cre8.github.io/eudiplo/latest/api",{"_index":3533,"title":{},"body":{"index.html":{}}}],["https://cre8.github.io/eudiplo/main",{"_index":3545,"title":{},"body":{"index.html":{}}}],["https://developer.mozilla.org/docs/web/api/fetch#body",{"_index":1027,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["https://developer.mozilla.org/docs/web/api/fetch#method",{"_index":935,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["https://developer.mozilla.org/docs/web/api/headers/headers#init",{"_index":931,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["https://github.com/cre8/eudiplo.git",{"_index":3513,"title":{},"body":{"index.html":{}}}],["https://json",{"_index":2744,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["https://swagger.io/docs/specification/serialization/#query",{"_index":950,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["https://www.npmjs.com/package/@hey",{"_index":1002,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["httpservice",{"_index":2076,"title":{},"body":{"modules/KeyModule.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["i.e",{"_index":1836,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["iat",{"_index":1201,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["id",{"_index":15,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/VaultKeyService.html":{}}}],["identification",{"_index":3843,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":26,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"interfaces/IssuerMetadata.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{}}}],["identifying",{"_index":3838,"title":{},"body":{"license.html":{}}}],["ids",{"_index":838,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["ids[0",{"_index":841,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["idx",{"_index":3098,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["ignore",{"_index":453,"title":{},"body":{"modules/AppModule.html":{}}}],["ignoreexpiration",{"_index":2057,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ignoring",{"_index":856,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["ii",{"_index":3599,"title":{},"body":{"license.html":{}}}],["iii",{"_index":3605,"title":{},"body":{"license.html":{}}}],["image",{"_index":1790,"title":{},"body":{"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png",{"_index":1934,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png')@apibody({type",{"_index":1908,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["image/png')@useguards(jwtauthguard)@apisecurity('oauth2')@apibody({type",{"_index":2477,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["imeplement",{"_index":1217,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implement",{"_index":858,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["implementation",{"_index":990,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["implementation.ts",{"_index":1215,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/typealiases.html":{}}}],["implementation.ts:19",{"_index":1222,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:24",{"_index":1227,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:29",{"_index":1231,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implements",{"_index":81,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/FileSystemKeyService.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["implied",{"_index":3776,"title":{},"body":{"license.html":{}}}],["import",{"_index":29,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"license.html":{}}}],["importjwk",{"_index":1289,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/PresentationsService.html":{}}}],["importjwk(payload.cnf.jwk",{"_index":2590,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["importjwk(privatekey",{"_index":1638,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["importjwk(publicjwk",{"_index":1385,"title":{},"body":{"injectables/CryptoService.html":{}}}],["importjwk(publickey",{"_index":1640,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["importpkcs8",{"_index":1614,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["imports",{"_index":382,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}}}],["importspki",{"_index":1615,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["importspki(key",{"_index":3220,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["improvements",{"_index":3358,"title":{},"body":{"changelog.html":{}}}],["improving",{"_index":3661,"title":{},"body":{"license.html":{}}}],["inability",{"_index":3802,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":3799,"title":{},"body":{"license.html":{}}}],["include",{"_index":3639,"title":{},"body":{"license.html":{}}}],["included",{"_index":3626,"title":{},"body":{"license.html":{}}}],["includes",{"_index":2318,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{},"license.html":{}}}],["including",{"_index":73,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["inclusion",{"_index":3649,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":3668,"title":{},"body":{"license.html":{}}}],["incurred",{"_index":3829,"title":{},"body":{"license.html":{}}}],["indemnify",{"_index":3825,"title":{},"body":{"license.html":{}}}],["indemnity",{"_index":3816,"title":{},"body":{"license.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["indexable",{"_index":2832,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["indexes",{"_index":3061,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["indicated",{"_index":3624,"title":{},"body":{"license.html":{}}}],["indicates",{"_index":28,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{}}}],["indicating",{"_index":2502,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["indirect",{"_index":3595,"title":{},"body":{"license.html":{}}}],["individual",{"_index":3607,"title":{},"body":{"license.html":{}}}],["infer",{"_index":1010,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["infers",{"_index":1778,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["information",{"_index":355,"title":{},"body":{"controllers/AppController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/IssuerManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["informational",{"_index":3738,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":3692,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":3706,"title":{},"body":{"license.html":{}}}],["inherit",{"_index":1331,"title":{},"body":{"injectables/CryptoService.html":{}}}],["inherited",{"_index":3179,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["init",{"_index":1497,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["init(tenant",{"_index":1601,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["init(tenantid",{"_index":1502,"title":{},"body":{"injectables/EncryptionService.html":{},"classes/KeyService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["initial",{"_index":1041,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["initialconfig",{"_index":291,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["initialization",{"_index":1038,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["initialize",{"_index":1042,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"interfaces/RequestOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["initialized",{"_index":150,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["initializes",{"_index":103,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["inject",{"_index":436,"title":{},"body":{"modules/AppModule.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["inject('keyservice",{"_index":1279,"title":{},"body":{"injectables/CryptoService.html":{}}}],["injectable",{"_index":30,"title":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["injectables",{"_index":706,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"overview.html":{}}}],["injectrepository",{"_index":1169,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["injectrepository(issuanceconfig",{"_index":1174,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["injectrepository(presentationconfig",{"_index":2563,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["injectrepository(session",{"_index":3009,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectrepository(statusmapping",{"_index":3056,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["input",{"_index":3226,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["install",{"_index":1001,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"changelog.html":{}}}],["instance",{"_index":95,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{}}}],["instance.decode(`${data}.${signature",{"_index":2579,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["instanceof",{"_index":1829,"title":{},"body":{"classes/Interceptors.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["instead",{"_index":1005,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["institute",{"_index":3696,"title":{},"body":{"license.html":{}}}],["institutions",{"_index":3556,"title":{},"body":{"index.html":{}}}],["insufficient_authorization",{"_index":825,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["int",{"_index":3140,"title":{},"body":{"entities/StatusMapping.html":{}}}],["integrated",{"_index":1654,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["integrates",{"_index":3476,"title":{},"body":{"index.html":{}}}],["integration",{"_index":853,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"index.html":{}}}],["intended",{"_index":1483,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["intendeduse",{"_index":3903,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["intentionally",{"_index":3647,"title":{},"body":{"license.html":{}}}],["interacting",{"_index":83,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["interaction",{"_index":72,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["intercept",{"_index":2839,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercept(context",{"_index":2843,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interceptor",{"_index":1716,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["interceptors",{"_index":1036,"title":{"classes/Interceptors.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["intercepts",{"_index":2846,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interested",{"_index":3558,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/Fields.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/StatusListFile.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/Fields.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"interfaces/IssuerMetadata.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/Fields.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/StatusListFile.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"license.html":{},"overview.html":{}}}],["internally",{"_index":1855,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["internals",{"_index":1854,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["interval",{"_index":3013,"title":{},"body":{"injectables/SessionService.html":{}}}],["intervaltime",{"_index":3011,"title":{},"body":{"injectables/SessionService.html":{}}}],["invalid",{"_index":512,"title":{},"body":{"controllers/AuthController.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{}}}],["irrevocable",{"_index":3677,"title":{},"body":{"license.html":{}}}],["is_public_key",{"_index":2000,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["isabsolute",{"_index":397,"title":{},"body":{"modules/AppModule.html":{}}}],["isabsolute(folder",{"_index":483,"title":{},"body":{"modules/AppModule.html":{}}}],["isenabled",{"_index":139,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["isenum",{"_index":2108,"title":{},"body":{"classes/NotificationRequestDto.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["isenum(['credential_issued",{"_index":2106,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["isenum(responsetype",{"_index":2132,"title":{},"body":{"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["isglobal",{"_index":433,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":319,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isin(['apikey",{"_index":333,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isin([0",{"_index":3151,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnumber",{"_index":3150,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnumber()@isin(['0",{"_index":3148,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["iso",{"_index":964,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["isobject",{"_index":320,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isobject()@column('json",{"_index":2457,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["isobject()@isoptional",{"_index":2128,"title":{},"body":{"classes/OfferRequest.html":{},"classes/PresentationRequest.html":{}}}],["isoptional",{"_index":321,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthorizeQueries.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isoptional()@isstring",{"_index":694,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["ispublic",{"_index":2002,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["iss",{"_index":1200,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["isstring",{"_index":311,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"entities/IssuanceConfig.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isstring()@isoptional",{"_index":3145,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["issuance",{"_index":829,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/SessionLoggerService.html":{}}}],["issuanceconfig",{"_index":1151,"title":{"entities/IssuanceConfig.html":{}},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{}}}],["issuanceconfigrepo",{"_index":1128,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["issuance—and",{"_index":3490,"title":{},"body":{"index.html":{}}}],["issue",{"_index":2140,"title":{},"body":{"controllers/Oid4vciController.html":{},"license.html":{}}}],["issued",{"_index":1090,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["issuer",{"_index":757,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"index.html":{}}}],["issuer.png",{"_index":897,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["issuer/authorize/authorize.service",{"_index":3294,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["issuer/authorize/dto/authorize",{"_index":2802,"title":{},"body":{"entities/Session.html":{}}}],["issuer/credentials/credentials.service",{"_index":2186,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuer/credentials/entities/issuance",{"_index":1920,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["issuer/issuer.module",{"_index":390,"title":{},"body":{"modules/AppModule.html":{}}}],["issuer/oid4vci/dto/offer",{"_index":2332,"title":{},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{}}}],["issuer/oid4vci/oid4vci.service",{"_index":1922,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/WellKnownController.html":{}}}],["issuer/status",{"_index":2820,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["issuer_cert.pem",{"_index":1315,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuer_cert.srl",{"_index":1368,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuer_key.pem",{"_index":1313,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuer_state",{"_index":689,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["issuer_validation_schema",{"_index":389,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{}}}],["issuercert",{"_index":1314,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuerkey",{"_index":1312,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuermanagementcontroller",{"_index":1889,"title":{"controllers/IssuerManagementController.html":{}},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{}}}],["issuermetadata",{"_index":1961,"title":{"interfaces/IssuerMetadata.html":{}},"body":{"interfaces/IssuerMetadata.html":{},"injectables/Oid4vciService.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{}}}],["issuermetadata(@param('tenantid",{"_index":3300,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["issuermetadata(tenantid",{"_index":2175,"title":{},"body":{"injectables/Oid4vciService.html":{},"controllers/WellKnownController.html":{}}}],["issuermetadata.authorizationservers",{"_index":2225,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermetadata.credentialissuer.credential_issuer",{"_index":2227,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermetadataresult",{"_index":2184,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermodule",{"_index":372,"title":{"modules/IssuerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules.html":{},"overview.html":{}}}],["issuing",{"_index":2961,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["isusingexternaloidc",{"_index":1687,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["it's",{"_index":960,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/Oid4vpService.html":{}}}],["item.name",{"_index":209,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["iterator",{"_index":1828,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["january",{"_index":3567,"title":{},"body":{"license.html":{}}}],["job",{"_index":3001,"title":{},"body":{"injectables/SessionService.html":{}}}],["jobs",{"_index":3389,"title":{},"body":{"changelog.html":{}}}],["joi",{"_index":384,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/RegistrarModule.html":{},"modules/SessionModule.html":{},"dependencies.html":{}}}],["joi.exist",{"_index":2675,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["joi.number().default(24",{"_index":2975,"title":{},"body":{"modules/SessionModule.html":{}}}],["joi.number().default(60",{"_index":2972,"title":{},"body":{"modules/SessionModule.html":{}}}],["joi.number().when('db_type",{"_index":1452,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["joi.object",{"_index":419,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.optional",{"_index":1449,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["joi.required",{"_index":1450,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/RegistrarModule.html":{}}}],["joi.string",{"_index":425,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/RegistrarModule.html":{}}}],["joi.string().default('./tmp",{"_index":421,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('24h",{"_index":605,"title":{},"body":{"modules/AuthModule.html":{}}}],["joi.string().default('eudiplo",{"_index":423,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('key",{"_index":2089,"title":{},"body":{"modules/KeyModule.html":{}}}],["joi.string().optional",{"_index":596,"title":{},"body":{"modules/AuthModule.html":{}}}],["joi.string().optional().default('eudiplo",{"_index":603,"title":{},"body":{"modules/AuthModule.html":{}}}],["joi.string().required",{"_index":599,"title":{},"body":{"modules/AuthModule.html":{}}}],["joi.string().uri().when('km_type",{"_index":2085,"title":{},"body":{"modules/KeyModule.html":{}}}],["joi.string().valid('file",{"_index":2081,"title":{},"body":{"modules/KeyModule.html":{}}}],["joi.string().valid('sqlite",{"_index":1444,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["joi.string().when('db_type",{"_index":1447,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["joi.string().when('km_type",{"_index":2087,"title":{},"body":{"modules/KeyModule.html":{}}}],["joi.string().when('registrar_url",{"_index":2674,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["joi.when('oidc",{"_index":598,"title":{},"body":{"modules/AuthModule.html":{}}}],["join",{"_index":61,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["join(__dirname",{"_index":485,"title":{},"body":{"modules/AppModule.html":{}}}],["join(folder",{"_index":484,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{}}}],["join(separator",{"_index":2766,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["join(separatorarraynoexplode(style",{"_index":2761,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["join(this.configservice.getorthrow('folder",{"_index":1298,"title":{},"body":{"injectables/CryptoService.html":{}}}],["join(this.folder",{"_index":1301,"title":{},"body":{"injectables/CryptoService.html":{}}}],["joinedvalues",{"_index":2758,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["joining",{"_index":3457,"title":{},"body":{"index.html":{}}}],["jose",{"_index":1291,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{}}}],["joseheaderparameters",{"_index":2100,"title":{},"body":{"classes/KeyService.html":{}}}],["josepublickey",{"_index":1404,"title":{},"body":{"injectables/CryptoService.html":{}}}],["json",{"_index":1021,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/EC_Public.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"interfaces/RequestOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"controllers/WellKnownController.html":{},"index.html":{}}}],["json.parse",{"_index":295,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["json.parse(readfilesync(file",{"_index":3088,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["json.parse(readfilesync(this.privateenncryptionpath",{"_index":1523,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["json.stringify",{"_index":926,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["json.stringify(await",{"_index":1520,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["json.stringify(body",{"_index":2649,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["json.stringify(config",{"_index":301,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["json.stringify(content",{"_index":3091,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["json.stringify(credentialissuer).replace",{"_index":2202,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["json.stringify(data",{"_index":2892,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["json.stringify(displayinfo",{"_index":899,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["json.stringify(initialconfig",{"_index":293,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["json.stringify(value",{"_index":1841,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["json.stringify(values.dcql_query).replace",{"_index":2342,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["json.stringify(values.registrationcert).replace",{"_index":2345,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jsonbodyserializer",{"_index":1730,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["jsonwebkey",{"_index":1226,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"entities/KeyEntity.html":{}}}],["jwk",{"_index":740,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["jwk.kid",{"_index":3223,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["jwk_ec_public",{"_index":1477,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["jwks",{"_index":1488,"title":{},"body":{"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["jwks_uri",{"_index":762,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["jwksrequestsperminute",{"_index":2041,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwksresponsedto",{"_index":1489,"title":{"classes/JwksResponseDto.html":{}},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"controllers/WellKnownController.html":{}}}],["jwksuri",{"_index":2042,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwkthumbprint",{"_index":1410,"title":{},"body":{"injectables/CryptoService.html":{}}}],["jwt",{"_index":803,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.service",{"_index":524,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["jwt.setaudience(options.audience",{"_index":1672,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.sign(secretkey",{"_index":1673,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.strategy",{"_index":593,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt/crypto",{"_index":1157,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService-1.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["jwt/jwt",{"_index":3049,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["jwt/sd",{"_index":1160,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["jwt/types",{"_index":1619,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{}}}],["jwt_alg_values",{"_index":2367,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jwt_expires_in",{"_index":604,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_issuer",{"_index":602,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwt_secret",{"_index":601,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_secret=$(openssl",{"_index":3518,"title":{},"body":{"index.html":{}}}],["jwt_secret=your",{"_index":3524,"title":{},"body":{"index.html":{}}}],["jwtauthguard",{"_index":588,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"overview.html":{}}}],["jwtdecrypt",{"_index":1510,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtdecrypt(response",{"_index":1529,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtfromrequest",{"_index":2023,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtheaderparameters",{"_index":1608,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["jwtpayload",{"_index":1607,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["jwtservice",{"_index":523,"title":{"injectables/JwtService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"overview.html":{}}}],["jwtstrategy",{"_index":589,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"overview.html":{}}}],["jwtstrategy.getexternaloidcconfig(configservice",{"_index":2036,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy.getintegratedoauth2config(configservice",{"_index":2037,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtverify",{"_index":1290,"title":{},"body":{"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/PresentationsService.html":{}}}],["jwtverify(`${data}.${signature",{"_index":2591,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["jwtverify(compact",{"_index":1386,"title":{},"body":{"injectables/CryptoService.html":{}}}],["jwtverify(token",{"_index":1679,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwtwithstatuslistpayload",{"_index":3046,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["kb",{"_index":2366,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["kbverifier",{"_index":2519,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["key",{"_index":22,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/AuthResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"index.html":{}}}],["key).then",{"_index":2592,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["key.kid",{"_index":2741,"title":{},"body":{"injectables/ResolverService.html":{}}}],["key.pem",{"_index":1307,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["key.service",{"_index":1618,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{}}}],["key.service.ts",{"_index":1585,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["key.service.ts:101",{"_index":3184,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:102",{"_index":3185,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:118",{"_index":1596,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:121",{"_index":3178,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:131",{"_index":1598,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:132",{"_index":1599,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:133",{"_index":1600,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:137",{"_index":3188,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:15",{"_index":3195,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:150",{"_index":1609,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:17",{"_index":3194,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:185",{"_index":3173,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:19",{"_index":3169,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:29",{"_index":1610,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:31",{"_index":1611,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:32",{"_index":1591,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:41",{"_index":1603,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:42",{"_index":1602,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:51",{"_index":1605,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:60",{"_index":1593,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:68",{"_index":3171,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.slice(prefix.length",{"_index":1577,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["key.startswith(prefix",{"_index":1576,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["key/key.service",{"_index":1292,"title":{},"body":{"injectables/CryptoService.html":{}}}],["key_validation_schema",{"_index":398,"title":{},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{}}}],["keybinding",{"_index":2557,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keybindingnonce",{"_index":2546,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keybindings",{"_index":2556,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keycloak",{"_index":2049,"title":{},"body":{"injectables/JwtStrategy.html":{},"changelog.html":{}}}],["keycloak_client_id",{"_index":600,"title":{},"body":{"modules/AuthModule.html":{}}}],["keycloak_internal_issuer_url",{"_index":597,"title":{},"body":{"modules/AuthModule.html":{}}}],["keyentity",{"_index":2063,"title":{"entities/KeyEntity.html":{}},"body":{"entities/KeyEntity.html":{},"modules/KeyModule.html":{}}}],["keylike",{"_index":3183,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keymap",{"_index":1547,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{},"miscellaneous/typealiases.html":{}}}],["keymodule",{"_index":373,"title":{"modules/KeyModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{},"modules.html":{},"overview.html":{}}}],["keymodule.forroot",{"_index":478,"title":{},"body":{"modules/AppModule.html":{}}}],["keypair",{"_index":1224,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["keys",{"_index":1302,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["keys.privatekey",{"_index":1629,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["keys.publickey",{"_index":1630,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["keys.publickey.kid",{"_index":1644,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["keyservice",{"_index":1244,"title":{"classes/KeyService.html":{}},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["keyservice:100",{"_index":3181,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:156",{"_index":3191,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:45",{"_index":3186,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:57",{"_index":3190,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:90",{"_index":3180,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["kind",{"_index":3775,"title":{},"body":{"license.html":{}}}],["km_type",{"_index":2080,"title":{},"body":{"modules/KeyModule.html":{}}}],["kmtype",{"_index":2091,"title":{},"body":{"modules/KeyModule.html":{}}}],["know",{"_index":251,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["known",{"_index":3285,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller",{"_index":388,"title":{},"body":{"modules/AppModule.html":{}}}],["known.controller.ts",{"_index":3283,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:26",{"_index":3293,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:36",{"_index":3287,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:50",{"_index":3290,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known/dto/credential",{"_index":1065,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["known/dto/jwks",{"_index":1294,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["known/dto/oauth",{"_index":2110,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["known/jwks.json",{"_index":764,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["known/jwt",{"_index":2735,"title":{},"body":{"injectables/ResolverService.html":{}}}],["known/openid",{"_index":124,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["known/well",{"_index":387,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{}}}],["kty",{"_index":1479,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["label",{"_index":1743,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["language",{"_index":3850,"title":{},"body":{"license.html":{}}}],["last",{"_index":3096,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["later",{"_index":862,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{}}}],["latest",{"_index":3540,"title":{},"body":{"index.html":{}}}],["law",{"_index":3771,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":3702,"title":{},"body":{"license.html":{}}}],["layer",{"_index":3447,"title":{},"body":{"index.html":{}}}],["legal",{"_index":3584,"title":{},"body":{"license.html":{}}}],["legend",{"_index":361,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["length",{"_index":2893,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{}}}],["lessthan",{"_index":3006,"title":{},"body":{"injectables/SessionService.html":{}}}],["lessthan(new",{"_index":3024,"title":{},"body":{"injectables/SessionService.html":{}}}],["level",{"_index":439,"title":{},"body":{"modules/AppModule.html":{}}}],["liability",{"_index":3788,"title":{},"body":{"license.html":{}}}],["liable",{"_index":3796,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":3464,"title":{},"body":{"index.html":{}}}],["licensable",{"_index":3690,"title":{},"body":{"license.html":{}}}],["license",{"_index":3562,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":3563,"title":{},"body":{"index.html":{},"license.html":{}}}],["licenses",{"_index":3707,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":3579,"title":{},"body":{"license.html":{}}}],["lightweight",{"_index":3472,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":3777,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":3852,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3612,"title":{},"body":{"license.html":{}}}],["line",{"_index":176,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["link",{"_index":925,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["list",{"_index":1080,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/PresentationsService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"dependencies.html":{},"index.html":{}}}],["list')@header('content",{"_index":3033,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.controller",{"_index":3118,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.controller.ts",{"_index":3028,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.controller.ts:16",{"_index":3035,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.json",{"_index":3055,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["list.module",{"_index":1977,"title":{},"body":{"modules/IssuerModule.html":{},"modules/SessionModule.html":{}}}],["list.module.ts",{"_index":3117,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.service",{"_index":1163,"title":{},"body":{"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{}}}],["list.service.ts",{"_index":3042,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["list.service.ts:112",{"_index":3129,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:116",{"_index":3128,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:125",{"_index":3134,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:138",{"_index":3126,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:178",{"_index":3133,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:189",{"_index":3135,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:31",{"_index":3124,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:39",{"_index":3131,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:42",{"_index":3132,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:52",{"_index":3130,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:79",{"_index":3127,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list/dto/status",{"_index":2821,"title":{},"body":{"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{}}}],["list/entities/status",{"_index":3136,"title":{},"body":{"entities/StatusMapping.html":{}}}],["list/status",{"_index":1162,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["listen",{"_index":883,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["lists",{"_index":3657,"title":{},"body":{"license.html":{}}}],["literal",{"_index":616,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/OfferRequest.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["litigation",{"_index":3697,"title":{},"body":{"license.html":{}}}],["live",{"_index":2620,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["load",{"_index":282,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["loadclients",{"_index":869,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["loadconfig",{"_index":2680,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["loadconfig(tenantid",{"_index":283,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["loadtypemetadataformat",{"_index":1198,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["locale",{"_index":893,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["locality",{"_index":2609,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["lock",{"_index":3470,"title":{},"body":{"index.html":{}}}],["log",{"_index":2877,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["log_level",{"_index":424,"title":{},"body":{"modules/AppModule.html":{}}}],["logauthorizationrequest",{"_index":2916,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logauthorizationrequest(context",{"_index":2928,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcontext",{"_index":2233,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logcredentialissuance",{"_index":2917,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialissuance(context",{"_index":2931,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification",{"_index":2918,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification(context",{"_index":2934,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete",{"_index":2919,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete(context",{"_index":2936,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror",{"_index":2920,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror(context",{"_index":2939,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart",{"_index":2921,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart(context",{"_index":2941,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logged",{"_index":2835,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["logger",{"_index":2190,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"changelog.html":{}}}],["logger.decorator",{"_index":2148,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor",{"_index":1984,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["logger.interceptor.ts",{"_index":2837,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:131",{"_index":2854,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:17",{"_index":2842,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:34",{"_index":2845,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.service",{"_index":1983,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["logger.service.ts",{"_index":2913,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:10",{"_index":2927,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:101",{"_index":2935,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:121",{"_index":2930,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:136",{"_index":2950,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:151",{"_index":2944,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:171",{"_index":2946,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:188",{"_index":2948,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:22",{"_index":2942,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:39",{"_index":2937,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:56",{"_index":2940,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:81",{"_index":2933,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["loggermiddleware",{"_index":3437,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loggermiddleware(req",{"_index":3443,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loggermodule",{"_index":414,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule.forrootasync",{"_index":435,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":2232,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["logic",{"_index":3481,"title":{},"body":{"index.html":{}}}],["loginreponse",{"_index":3905,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lognotification",{"_index":2922,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["lognotification(context",{"_index":2943,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logo",{"_index":895,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["logs",{"_index":2319,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"changelog.html":{}}}],["logsession",{"_index":2923,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsession(context",{"_index":2945,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror",{"_index":2924,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror(context",{"_index":2947,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange",{"_index":2925,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange(context",{"_index":2949,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["long",{"_index":3507,"title":{},"body":{"index.html":{}}}],["loss",{"_index":3803,"title":{},"body":{"license.html":{}}}],["losses",{"_index":3810,"title":{},"body":{"license.html":{}}}],["made",{"_index":987,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"entities/PresentationConfig.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["mailing",{"_index":3656,"title":{},"body":{"license.html":{}}}],["main",{"_index":3383,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["maintain",{"_index":614,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["major",{"_index":3544,"title":{},"body":{"index.html":{}}}],["make",{"_index":3360,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["making",{"_index":2531,"title":{},"body":{"injectables/PresentationsService.html":{},"license.html":{}}}],["malfunction",{"_index":3808,"title":{},"body":{"license.html":{}}}],["managed",{"_index":3659,"title":{},"body":{"license.html":{}}}],["management",{"_index":1893,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"index.html":{},"license.html":{}}}],["management.controller",{"_index":1979,"title":{},"body":{"modules/IssuerModule.html":{}}}],["management.controller.ts",{"_index":1892,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management.controller.ts:106",{"_index":1898,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management.controller.ts:116",{"_index":1913,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management.controller.ts:132",{"_index":1901,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management.controller.ts:74",{"_index":1910,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management/issuer",{"_index":1891,"title":{},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{}}}],["managing",{"_index":71,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/FileSystemKeyService.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"miscellaneous/typealiases.html":{}}}],["map",{"_index":1538,"title":{},"body":{"interfaces/Fields.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["map(([key",{"_index":2779,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["map((_",{"_index":3071,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["map((v",{"_index":2765,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["map.get(config.key",{"_index":1567,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["map.get(key",{"_index":1573,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["map.set(config.key",{"_index":1550,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["mapping",{"_index":3101,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity",{"_index":3052,"title":{},"body":{"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity.ts",{"_index":3137,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:12",{"_index":3141,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:15",{"_index":3139,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:6",{"_index":3143,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:9",{"_index":3142,"title":{},"body":{"entities/StatusMapping.html":{}}}],["marked",{"_index":3664,"title":{},"body":{"license.html":{}}}],["marks",{"_index":3761,"title":{},"body":{"license.html":{}}}],["match",{"_index":1751,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/ResolverService.html":{}}}],["match.length",{"_index":1754,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["match.substring(1",{"_index":1753,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["matches",{"_index":1749,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["matching",{"_index":259,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["math.floor(date.now",{"_index":2376,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["math.floor(new",{"_index":2378,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["math.random",{"_index":3074,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["math.round(new",{"_index":1202,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["matrix",{"_index":1744,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["matrixstyle",{"_index":1742,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["maybe",{"_index":277,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["mean",{"_index":3576,"title":{},"body":{"license.html":{}}}],["means",{"_index":3592,"title":{},"body":{"license.html":{}}}],["meant",{"_index":1834,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mechanical",{"_index":3616,"title":{},"body":{"license.html":{}}}],["mechanism",{"_index":861,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["mechanism(s",{"_index":1028,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["media",{"_index":3621,"title":{},"body":{"license.html":{}}}],["medium",{"_index":3712,"title":{},"body":{"license.html":{}}}],["meet",{"_index":3713,"title":{},"body":{"license.html":{}}}],["merchantability",{"_index":3779,"title":{},"body":{"license.html":{}}}],["merely",{"_index":3642,"title":{},"body":{"license.html":{}}}],["mergeconfigs",{"_index":1816,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergedheaders",{"_index":1827,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergedheaders.append(key",{"_index":1833,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergedheaders.delete(key",{"_index":1832,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergedheaders.set",{"_index":1840,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergeheaders",{"_index":1825,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergeheaders(a.headers",{"_index":1823,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["message",{"_index":2900,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["metadata",{"_index":1068,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"injectables/Oid4vciService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["metadata.'})@get('openid",{"_index":3292,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["metadata.dto",{"_index":2720,"title":{},"body":{"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{}}}],["metadata.dto.ts",{"_index":1066,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{}}}],["metadata.dto.ts:12",{"_index":1079,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:16",{"_index":1085,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:20",{"_index":1091,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:24",{"_index":1082,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:33",{"_index":1088,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:37",{"_index":1084,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:41",{"_index":1077,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:8",{"_index":1086,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["method",{"_index":161,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{}}}],["methodfn",{"_index":914,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["methods",{"_index":346,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["middleware",{"_index":982,"title":{"interfaces/Middleware.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"index.html":{}}}],["mirko",{"_index":3845,"title":{},"body":{"license.html":{},"properties.html":{}}}],["miscellaneous",{"_index":3430,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["missing",{"_index":1334,"title":{},"body":{"injectables/CryptoService.html":{}}}],["misused",{"_index":179,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["mkdirsync",{"_index":851,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["mkdirsync(folder",{"_index":888,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["mkdirsync(this.folder",{"_index":1300,"title":{},"body":{"injectables/CryptoService.html":{}}}],["mm",{"_index":450,"title":{},"body":{"modules/AppModule.html":{}}}],["modifications",{"_index":3611,"title":{},"body":{"license.html":{}}}],["modified",{"_index":3717,"title":{},"body":{"license.html":{}}}],["modify",{"_index":1945,"title":{},"body":{"controllers/IssuerManagementController.html":{},"license.html":{}}}],["modifying",{"_index":2905,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["module",{"_index":357,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["modules",{"_index":359,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["mollik",{"_index":3846,"title":{},"body":{"license.html":{},"properties.html":{}}}],["more",{"_index":354,"title":{},"body":{"controllers/AppController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"entities/Session.html":{},"license.html":{}}}],["mso_mdoc",{"_index":2362,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["multi",{"_index":2796,"title":{},"body":{"entities/Session.html":{},"changelog.html":{}}}],["multilang",{"_index":3906,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["multipart/form",{"_index":1788,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["multiple",{"_index":1023,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/Oid4vciService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["mysql2",{"_index":3414,"title":{},"body":{"dependencies.html":{}}}],["n${json.stringify(signer.publicjwk",{"_index":1414,"title":{},"body":{"injectables/CryptoService.html":{}}}],["name",{"_index":191,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["name)?.id",{"_index":210,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["name.endswith",{"_index":1755,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name.length",{"_index":1757,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name.startswith",{"_index":1758,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name.substring(0",{"_index":1756,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name.substring(1",{"_index":1759,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["nameing",{"_index":3376,"title":{},"body":{"changelog.html":{}}}],["names",{"_index":3760,"title":{},"body":{"license.html":{}}}],["name}=${allowreserved",{"_index":2771,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["name}=${joinedvalues",{"_index":2762,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["name}=${token",{"_index":1802,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name}=${value.toisostring",{"_index":2774,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["name}[${key",{"_index":2780,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["native",{"_index":947,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["necessarily",{"_index":3691,"title":{},"body":{"license.html":{}}}],["necessary",{"_index":104,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/VaultKeyService.html":{}}}],["need",{"_index":216,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["needed",{"_index":186,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/RegistrarService.html":{}}}],["negligence",{"_index":3791,"title":{},"body":{"license.html":{}}}],["negligent",{"_index":3794,"title":{},"body":{"license.html":{}}}],["nested",{"_index":2768,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["nestinterceptor",{"_index":2859,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["nestjs",{"_index":415,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["nestjs/axios",{"_index":2077,"title":{},"body":{"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":33,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":35,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1998,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":64,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":592,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":3398,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":406,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionService.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":395,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":350,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1701,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":1170,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["nestjs/typeorm/dist/typeorm.module",{"_index":2078,"title":{},"body":{"modules/KeyModule.html":{}}}],["never",{"_index":1006,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["new",{"_index":118,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["next",{"_index":175,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"miscellaneous/functions.html":{}}}],["next.handle",{"_index":2865,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["next.handle().pipe",{"_index":2886,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["next.js",{"_index":998,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["nextfunction",{"_index":3444,"title":{},"body":{"miscellaneous/functions.html":{}}}],["node:child_process",{"_index":1296,"title":{},"body":{"injectables/CryptoService.html":{}}}],["node:crypto",{"_index":657,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/ResolverService.html":{}}}],["node:fs",{"_index":57,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["node:path",{"_index":62,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["nodejs",{"_index":1158,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService-1.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["non",{"_index":3673,"title":{},"body":{"license.html":{}}}],["noncce",{"_index":2799,"title":{},"body":{"entities/Session.html":{}}}],["nonce",{"_index":2244,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["none",{"_index":2434,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["normally",{"_index":3735,"title":{},"body":{"license.html":{}}}],["nothing",{"_index":3750,"title":{},"body":{"license.html":{}}}],["notice",{"_index":3625,"title":{},"body":{"license.html":{}}}],["notices",{"_index":3720,"title":{},"body":{"license.html":{}}}],["notification",{"_index":1092,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/typealiases.html":{}}}],["notification.id",{"_index":2271,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notification_endpoint",{"_index":1076,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["notification_id",{"_index":2104,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["notificationevent",{"_index":2105,"title":{},"body":{"classes/NotificationRequestDto.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["notificationid",{"_index":2256,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notificationindex",{"_index":2276,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notificationrequestdto",{"_index":2102,"title":{"classes/NotificationRequestDto.html":{}},"body":{"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{}}}],["notifications",{"_index":340,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["notifications(body",{"_index":2141,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["notitification",{"_index":2174,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notwithstanding",{"_index":3748,"title":{},"body":{"license.html":{}}}],["now",{"_index":833,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["null",{"_index":263,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["nullable",{"_index":1878,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["number",{"_index":171,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"classes/ParResponseDto.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{}}}],["oauth",{"_index":2381,"title":{},"body":{"injectables/Oid4vpService.html":{},"index.html":{}}}],["oauth2",{"_index":82,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{}}}],["oauth2authorizationserver",{"_index":725,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["oauth2authorizationserverresponse",{"_index":2109,"title":{"classes/Oauth2AuthorizationServerResponse.html":{}},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{}}}],["oauth2client",{"_index":36,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["oauth2resourceserver",{"_index":2181,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["object",{"_index":927,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["object.entries",{"_index":1579,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["object.entries(arg",{"_index":1572,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["object.entries(body).foreach(([key",{"_index":2646,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["object.entries(extraprefixesmap",{"_index":1546,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["object.entries(header",{"_index":1831,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["object.entries(params",{"_index":1557,"title":{},"body":{"interfaces/Fields.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{}}}],["object.entries(req.headers",{"_index":1418,"title":{},"body":{"injectables/CryptoService.html":{}}}],["object.entries(value",{"_index":2778,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["object.entries(value).foreach(([key",{"_index":2775,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["object.keys(res.vp_token",{"_index":2593,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["object.keys(value).length",{"_index":1558,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["objects",{"_index":940,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["objectseparatorstyle",{"_index":2753,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["objectstyle",{"_index":2640,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["obligations",{"_index":3817,"title":{},"body":{"license.html":{}}}],["observable",{"_index":2851,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["obtain",{"_index":3848,"title":{},"body":{"license.html":{}}}],["offer",{"_index":837,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/Session.html":{},"license.html":{}}}],["offer.credentialoffer",{"_index":2218,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["offer.credentialofferobject",{"_index":2216,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["offerrequest",{"_index":1903,"title":{"classes/OfferRequest.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{}}}],["offerresponse",{"_index":1906,"title":{"classes/OfferResponse.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{}}}],["oid4vci",{"_index":464,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/SessionLogContext.html":{},"index.html":{}}}],["oid4vci/dto/offer",{"_index":1923,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["oid4vci/oid4vci.controller",{"_index":1975,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/oid4vci.service",{"_index":1974,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/util",{"_index":744,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["oid4vcicontroller",{"_index":1972,"title":{"controllers/Oid4vciController.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{}}}],["oid4vciservice",{"_index":1921,"title":{"injectables/Oid4vciService.html":{}},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/WellKnownController.html":{},"overview.html":{}}}],["oid4vp",{"_index":466,"title":{},"body":{"modules/AppModule.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"index.html":{}}}],["oid4vp.controller",{"_index":2309,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["oid4vp.service",{"_index":2293,"title":{},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["oid4vp/dto/presentation",{"_index":2484,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vp/oid4vp.module",{"_index":2514,"title":{},"body":{"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{}}}],["oid4vp/oid4vp.service",{"_index":2485,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vpcontroller",{"_index":2279,"title":{"controllers/Oid4vpController.html":{}},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["oid4vpcontrollergetvalidpiddata",{"_index":3908,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollergetvalidpidresponses",{"_index":3909,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollergetvalidrequestdata",{"_index":3910,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollergetvalidrequestresponse",{"_index":3911,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollergetvalidrequestresponses",{"_index":3912,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollergetvalidrequestwithquerydata",{"_index":3913,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollergetvalidrequestwithqueryresponse",{"_index":3914,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollergetvalidrequestwithqueryresponses",{"_index":3915,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollerresponsedata",{"_index":3916,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollerresponseresponses",{"_index":3917,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollersuccessdata",{"_index":3918,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollersuccessresponse",{"_index":3919,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollersuccessresponses",{"_index":3920,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpmodule",{"_index":1967,"title":{"modules/Oid4vpModule.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["oid4vpservice",{"_index":716,"title":{"injectables/Oid4vpService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"overview.html":{}}}],["oidc",{"_index":84,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"changelog.html":{}}}],["oidc_client_id",{"_index":2676,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["oidc_client_secret",{"_index":2677,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["oidc_issuer_url",{"_index":2673,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["oidcissuerurl",{"_index":111,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/.well",{"_index":123,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/protocol/openid",{"_index":120,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["older",{"_index":3004,"title":{},"body":{"injectables/SessionService.html":{}}}],["omit",{"_index":985,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["omitkeys",{"_index":1050,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["omittypeclass",{"_index":3921,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["onapplicationbootstrap",{"_index":31,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{}}}],["once",{"_index":187,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["one",{"_index":212,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"changelog.html":{},"license.html":{}}}],["onevent",{"_index":63,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["onevent(tenant_events.tenant_init",{"_index":1270,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{}}}],["onevent(tenant_events.tenant_keys",{"_index":152,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["onmoduleinit",{"_index":32,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit",{"_index":1250,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit(tenantid",{"_index":153,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["open",{"_index":3448,"title":{},"body":{"index.html":{}}}],["openapi",{"_index":1837,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["openid",{"_index":2282,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["openid4vc/oauth2",{"_index":742,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"dependencies.html":{}}}],["openid4vc/openid4vci",{"_index":1165,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["openid4vc/openid4vp",{"_index":3406,"title":{},"body":{"dependencies.html":{}}}],["openid4vc/utils",{"_index":3407,"title":{},"body":{"dependencies.html":{}}}],["openid4vci",{"_index":629,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/WellKnownController.html":{}}}],["openid4vcidraftversion",{"_index":2185,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vcidraftversion.draft14",{"_index":2205,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vciissuer",{"_index":2179,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vp://?${(await",{"_index":822,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["openid4vp://?${values.uri",{"_index":2495,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["openssl",{"_index":1338,"title":{},"body":{"injectables/CryptoService.html":{}}}],["operations",{"_index":100,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService-1.html":{},"controllers/Oid4vpController.html":{},"injectables/RegistrarService.html":{}}}],["option",{"_index":991,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["optional",{"_index":16,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"classes/OfferRequest.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/SerializePrimitiveOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":445,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["options.audience",{"_index":1671,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["options.auth",{"_index":1796,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.baseurl",{"_index":1806,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.dto",{"_index":2334,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["options.dto.ts",{"_index":2503,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{}}}],["options.expiresin",{"_index":1660,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["options.headers.append('cookie",{"_index":1801,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.headers.set(name",{"_index":1803,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.path",{"_index":1807,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.query",{"_index":1799,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.query[name",{"_index":1800,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.queryserializer",{"_index":1808,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.url",{"_index":1810,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["optionslegacyparser",{"_index":1051,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["order",{"_index":2569,"title":{},"body":{"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["organizations",{"_index":3456,"title":{},"body":{"index.html":{}}}],["origin",{"_index":3766,"title":{},"body":{"license.html":{}}}],["original",{"_index":2906,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["originaldraftversion",{"_index":2204,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["otherwhise",{"_index":1931,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["otherwise",{"_index":138,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["out",{"_index":379,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"license.html":{},"overview.html":{}}}],["outstanding",{"_index":3603,"title":{},"body":{"license.html":{}}}],["over",{"_index":3475,"title":{},"body":{"index.html":{}}}],["override",{"_index":1012,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["overview",{"_index":3455,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["overwrite",{"_index":1153,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["owner",{"_index":3581,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":3600,"title":{},"body":{"license.html":{}}}],["p",{"_index":1518,"title":{},"body":{"injectables/EncryptionService.html":{},"index.html":{}}}],["p256",{"_index":3209,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["package",{"_index":3391,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pad",{"_index":3252,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["page",{"_index":3385,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["pair",{"_index":1333,"title":{},"body":{"injectables/CryptoService.html":{}}}],["pairs",{"_index":620,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["par",{"_index":634,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(body",{"_index":645,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["param",{"_index":94,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"controllers/IssuerManagementController.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["param('requestid",{"_index":2298,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["param('session",{"_index":2299,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["param('tenantid",{"_index":668,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["parameter",{"_index":491,"title":{},"body":{"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["parameterize",{"_index":1322,"title":{},"body":{"injectables/CryptoService.html":{}}}],["parameters",{"_index":517,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":1555,"title":{"interfaces/Params.html":{}},"body":{"interfaces/Fields.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{}}}],["params.body",{"_index":1571,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["params[field.in",{"_index":1569,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["params[slot",{"_index":1559,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["paramsserializer",{"_index":948,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["parresponsedto",{"_index":664,"title":{"classes/ParResponseDto.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{}}}],["parse",{"_index":1016,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/PresentationsService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["parseaccesstokenrequest",{"_index":787,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parseas",{"_index":1017,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["parsechallengerequest",{"_index":710,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsechallengerequest(body",{"_index":726,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["parsed",{"_index":1007,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/PresentationsService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["parsedaccesstokenauthorizationcoderequestgrant",{"_index":748,"title":{"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest",{"_index":786,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.accesstokenrequest",{"_index":798,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.dpop?.jwt",{"_index":804,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant",{"_index":797,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsedcredentialrequest",{"_index":2219,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.credentialconfigurationid",{"_index":2238,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.proofs.jwt",{"_index":2241,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.proofs?.jwt?.length",{"_index":2240,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest?.proofs?.jwt",{"_index":2222,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parseresponse",{"_index":2525,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseresponse(res",{"_index":2544,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["part",{"_index":490,"title":{},"body":{"interfaces/Auth.html":{},"injectables/PresentationsService.html":{},"license.html":{}}}],["partial",{"_index":1534,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["particular",{"_index":3781,"title":{},"body":{"license.html":{}}}],["parties",{"_index":76,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["party",{"_index":185,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["pass",{"_index":1944,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["passed",{"_index":967,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"injectables/Oid4vciService.html":{}}}],["passport",{"_index":2031,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportjwtsecret",{"_index":2032,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportmodule",{"_index":591,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":2028,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":2016,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":1468,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["patch",{"_index":908,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"index.html":{}}}],["patent",{"_index":3682,"title":{},"body":{"license.html":{}}}],["path",{"_index":219,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Client.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["path[name",{"_index":1760,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["path_",{"_index":1543,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["path_param_re",{"_index":1737,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["pathserializer",{"_index":1736,"title":{"interfaces/PathSerializer.html":{}},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["pathurl",{"_index":1811,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["payload",{"_index":575,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{}}}],["payload.cnf",{"_index":2588,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["payload.iss",{"_index":2721,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.iss}/.well",{"_index":2734,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.sub",{"_index":1669,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["payload?.exp",{"_index":1388,"title":{},"body":{"injectables/CryptoService.html":{}}}],["payloads",{"_index":2710,"title":{},"body":{"injectables/ResolverService.html":{}}}],["pem",{"_index":23,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["percent",{"_index":944,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"license.html":{}}}],["perform",{"_index":1695,"title":{},"body":{"controllers/HealthController.html":{},"license.html":{}}}],["periodically",{"_index":162,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["permission",{"_index":3758,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":3609,"title":{},"body":{"license.html":{}}}],["perpetual",{"_index":3671,"title":{},"body":{"license.html":{}}}],["pertain",{"_index":3727,"title":{},"body":{"license.html":{}}}],["pg",{"_index":3418,"title":{},"body":{"dependencies.html":{}}}],["pick",{"_index":1035,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["pid",{"_index":1940,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentedData.html":{}}}],["pid,hostname",{"_index":454,"title":{},"body":{"modules/AppModule.html":{}}}],["pino",{"_index":416,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{}}}],["pinohttp",{"_index":438,"title":{},"body":{"modules/AppModule.html":{}}}],["pinologger",{"_index":2841,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["pipedelimited",{"_index":1741,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["pipeline",{"_index":3317,"title":{},"body":{"changelog.html":{}}}],["pkcecodechallengemethod",{"_index":741,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["pkcecodechallengemethod.s256",{"_index":772,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["pkcs#8",{"_index":1337,"title":{},"body":{"injectables/CryptoService.html":{}}}],["pkeyopt",{"_index":1341,"title":{},"body":{"injectables/CryptoService.html":{}}}],["placeholders",{"_index":2201,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["places",{"_index":3730,"title":{},"body":{"license.html":{}}}],["please",{"_index":996,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["pluggable",{"_index":3502,"title":{},"body":{"index.html":{}}}],["plumbing",{"_index":3482,"title":{},"body":{"index.html":{}}}],["png",{"_index":1933,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["pnpm",{"_index":3378,"title":{},"body":{"changelog.html":{}}}],["populate",{"_index":930,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["port",{"_index":1464,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["possession",{"_index":3193,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["possibility",{"_index":3812,"title":{},"body":{"license.html":{}}}],["post",{"_index":518,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"controllers/SessionController.html":{},"index.html":{}}}],["post('challenge",{"_index":637,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('credential",{"_index":2151,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('credential')@sessionlogger('state",{"_index":2138,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('notification",{"_index":2154,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('notification')@sessionlogger('notification_id",{"_index":2142,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('oauth2/token",{"_index":537,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('offer",{"_index":1942,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["post('par",{"_index":670,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('request",{"_index":2490,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["post('response",{"_index":2301,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["post('response')@sessionlogger('state",{"_index":2290,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["post('revoke",{"_index":2816,"title":{},"body":{"controllers/SessionController.html":{}}}],["post('token",{"_index":651,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["postgres",{"_index":1462,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres').default('sqlite",{"_index":1445,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["power",{"_index":3593,"title":{},"body":{"license.html":{}}}],["pre",{"_index":929,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["preferred",{"_index":1078,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"license.html":{}}}],["prefix",{"_index":502,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"interfaces/Fields.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"interfaces/Params.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["preheader",{"_index":3081,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["prepare",{"_index":3230,"title":{},"body":{"injectables/VaultKeyService.html":{},"license.html":{}}}],["prepayload",{"_index":3080,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["presentation",{"_index":619,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["presentation_during_issuance",{"_index":1864,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["presentationconfig",{"_index":2398,"title":{"entities/PresentationConfig.html":{}},"body":{"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["presentationconfig.webhook",{"_index":2401,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationduringissuance",{"_index":1876,"title":{"classes/PresentationDuringIssuance.html":{}},"body":{"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["presentationmanagementcontroller",{"_index":2470,"title":{"controllers/PresentationManagementController.html":{}},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{}}}],["presentationrequest",{"_index":2476,"title":{"classes/PresentationRequest.html":{}},"body":{"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["presentationrequestoptions",{"_index":2322,"title":{"interfaces/PresentationRequestOptions.html":{}},"body":{"injectables/Oid4vpService.html":{},"interfaces/PresentationRequestOptions.html":{}}}],["presentations",{"_index":102,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["presentations.controller",{"_index":2512,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["presentations.service",{"_index":2482,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{}}}],["presentations/dto/auth",{"_index":2328,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentations/presentations.module",{"_index":2310,"title":{},"body":{"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["presentations/presentations.service",{"_index":2327,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationsmodule",{"_index":2307,"title":{"modules/PresentationsModule.html":{}},"body":{"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["presentationsservice",{"_index":52,"title":{"injectables/PresentationsService.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"overview.html":{}}}],["presented",{"_index":2618,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["presented.credentials[0].values.address.locality",{"_index":2621,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["presenteddata",{"_index":2603,"title":{"interfaces/PresentedData.html":{}},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["pretty",{"_index":444,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["primary",{"_index":873,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/StatusMapping.html":{}}}],["primarycolumn",{"_index":2803,"title":{},"body":{"entities/Session.html":{}}}],["primarycolumn('uuid",{"_index":2789,"title":{},"body":{"entities/Session.html":{}}}],["printed",{"_index":3842,"title":{},"body":{"license.html":{}}}],["privacy",{"_index":3504,"title":{},"body":{"index.html":{}}}],["private",{"_index":86,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["private_key",{"_index":2908,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["privateencryptionkey",{"_index":1491,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["privateenncryptionpath",{"_index":1492,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["privatekey",{"_index":1234,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/FileSystemKeyService.html":{},"entities/KeyEntity.html":{}}}],["privatekey.alg",{"_index":1634,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatekey.kid",{"_index":1633,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatekeyinstance",{"_index":1648,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatekeyjwk",{"_index":1229,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["privatekeypath",{"_index":1586,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatethumbprint",{"_index":1412,"title":{},"body":{"injectables/CryptoService.html":{}}}],["proceed",{"_index":2850,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["process",{"_index":2617,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"entities/Session.html":{}}}],["process.env.node_env",{"_index":431,"title":{},"body":{"modules/AppModule.html":{}}}],["process_presentation_response",{"_index":2412,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["processes",{"_index":2325,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["processing",{"_index":961,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["processresponse",{"_index":2611,"title":{"interfaces/ProcessResponse.html":{}},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["product",{"_index":3762,"title":{},"body":{"license.html":{}}}],["production",{"_index":432,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["progress",{"_index":2836,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["prominent",{"_index":3719,"title":{},"body":{"license.html":{}}}],["promise",{"_index":190,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["promise.all(att",{"_index":2602,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["promise.resolve((input",{"_index":3204,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["promise.resolve(keys.publickey",{"_index":1647,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["promise.resolve(tenantid",{"_index":3217,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["promises",{"_index":180,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["proof",{"_index":3192,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["proofcount",{"_index":2239,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["proofverified",{"_index":2255,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["proper",{"_index":859,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["properties",{"_index":13,"title":{"properties.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"entities/KeyEntity.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"properties.html":{}}}],["proprietary",{"_index":3466,"title":{},"body":{"index.html":{}}}],["protected",{"_index":1911,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["protocol",{"_index":3463,"title":{},"body":{"index.html":{}}}],["protocols",{"_index":3454,"title":{},"body":{"index.html":{}}}],["provide",{"_index":992,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"modules/KeyModule.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["provided",{"_index":341,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"classes/PresentationRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"license.html":{}}}],["provider",{"_index":85,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{}}}],["providers",{"_index":364,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["provides",{"_index":2666,"title":{},"body":{"modules/RegistrarModule.html":{},"license.html":{}}}],["providing",{"_index":1692,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["prs",{"_index":3554,"title":{},"body":{"index.html":{}}}],["pubkey",{"_index":1306,"title":{},"body":{"injectables/CryptoService.html":{}}}],["public",{"_index":21,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["public()@post('oauth2/token')@apibody({type",{"_index":505,"title":{},"body":{"controllers/AuthController.html":{}}}],["public.decorator",{"_index":527,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["public_url",{"_index":1985,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{}}}],["public_url=https://example.com",{"_index":3523,"title":{},"body":{"index.html":{}}}],["publiccryptokey",{"_index":1384,"title":{},"body":{"injectables/CryptoService.html":{}}}],["publicencryptionkey",{"_index":1493,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["publicencryptionpath",{"_index":1494,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["publicjwk",{"_index":810,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["publickey",{"_index":235,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/FileSystemKeyService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["publickey.alg",{"_index":1636,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["publickey.kid",{"_index":1632,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["publickeyjwk",{"_index":1233,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["publickeypath",{"_index":1587,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["publicly",{"_index":3679,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":252,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["purposes",{"_index":3590,"title":{},"body":{"license.html":{}}}],["pushed",{"_index":647,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["pushed_authorization_request_endpoint",{"_index":769,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["put",{"_index":909,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["pwd)/config:/app/config",{"_index":3527,"title":{},"body":{"index.html":{}}}],["qr",{"_index":1937,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["qrcode",{"_index":1926,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["qrcode.tobuffer(values.uri",{"_index":1952,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["qrcodebuffer",{"_index":1951,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["queries",{"_index":643,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/Session.html":{}}}],["queries.request_uri",{"_index":777,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["query",{"_index":206,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["query_",{"_index":1544,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["querydeeppartialentity",{"_index":2985,"title":{},"body":{"injectables/SessionService.html":{}}}],["queryparams",{"_index":1768,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["queryparams[name",{"_index":1770,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["queryserializer",{"_index":917,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["queryserializer(query",{"_index":1813,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["queryserializeroptions",{"_index":918,"title":{"interfaces/QuerySerializerOptions.html":{}},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["querystring",{"_index":2405,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["quick",{"_index":3509,"title":{},"body":{"index.html":{}}}],["quickstart",{"_index":3536,"title":{},"body":{"index.html":{}}}],["r",{"_index":2736,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["r.data",{"_index":2737,"title":{},"body":{"injectables/ResolverService.html":{}}}],["r.length",{"_index":3256,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["r.slice(1",{"_index":3260,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["r[0",{"_index":3258,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["rand",{"_index":3519,"title":{},"body":{"index.html":{}}}],["random",{"_index":1399,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["randombytes",{"_index":1282,"title":{},"body":{"injectables/CryptoService.html":{}}}],["randombytes(bytes",{"_index":1397,"title":{},"body":{"injectables/CryptoService.html":{}}}],["randomness",{"_index":3063,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["randomuuid",{"_index":656,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["ratelimit",{"_index":2040,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["raw",{"_index":1782,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/VaultKeyService.html":{}}}],["rawsignature",{"_index":3266,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["re",{"_index":820,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["reachable",{"_index":2739,"title":{},"body":{"injectables/ResolverService.html":{}}}],["react",{"_index":884,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["readable",{"_index":3728,"title":{},"body":{"license.html":{}}}],["readfilesync",{"_index":55,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["readfilesync(filepath",{"_index":296,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["readfilesync(join(folder",{"_index":1641,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["readfilesync(this.publicencryptionpath",{"_index":1528,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["readonly",{"_index":667,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"injectables/CryptoService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/WellKnownController.html":{}}}],["readonlyarray",{"_index":1029,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Fields.html":{},"interfaces/Params.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["real",{"_index":1400,"title":{},"body":{"injectables/CryptoService.html":{}}}],["reason",{"_index":3831,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":3763,"title":{},"body":{"license.html":{}}}],["receive",{"_index":2292,"title":{},"body":{"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"entities/Session.html":{}}}],["received",{"_index":2441,"title":{},"body":{"injectables/Oid4vpService.html":{},"license.html":{}}}],["recent",{"_index":3543,"title":{},"body":{"index.html":{}}}],["recipients",{"_index":3716,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":3841,"title":{},"body":{"license.html":{}}}],["recommended",{"_index":3542,"title":{},"body":{"index.html":{}}}],["record",{"_index":934,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"interfaces/Middleware.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{}}}],["record)[name",{"_index":1570,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["recursive",{"_index":889,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["redacted",{"_index":2912,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["redirect_uri",{"_index":690,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["redistributing",{"_index":3785,"title":{},"body":{"license.html":{}}}],["redistribution",{"_index":3710,"title":{},"body":{"license.html":{}}}],["reference",{"_index":1631,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"index.html":{}}}],["reflect",{"_index":3423,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1992,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["refresh",{"_index":145,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["refresh_token",{"_index":2909,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["refreshaccesstoken",{"_index":165,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["refreshes",{"_index":158,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["regarding",{"_index":3756,"title":{},"body":{"license.html":{}}}],["regcert",{"_index":2341,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["register",{"_index":2998,"title":{},"body":{"injectables/SessionService.html":{}}}],["registrar",{"_index":59,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{}}}],["registrar.json",{"_index":286,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["registrar.service",{"_index":2667,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["registrar/generated",{"_index":2703,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrar/registrar.module",{"_index":393,"title":{},"body":{"modules/AppModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["registrar/registrar.service",{"_index":2326,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["registrar_url",{"_index":2672,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["registrar_validation_schema",{"_index":392,"title":{},"body":{"modules/AppModule.html":{},"modules/RegistrarModule.html":{}}}],["registrarconfig",{"_index":58,"title":{"classes/RegistrarConfig.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{}}}],["registrarmodule",{"_index":374,"title":{"modules/RegistrarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["registrarservice",{"_index":69,"title":{"injectables/RegistrarService.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"overview.html":{}}}],["registration",{"_index":78,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["registrationcert",{"_index":2344,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{}}}],["registrationcertid",{"_index":2554,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["registrationcertificate",{"_index":3923,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerall",{"_index":42,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["registrationcertificatecontrolleralldata",{"_index":3924,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerallresponse",{"_index":3925,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerallresponses",{"_index":3926,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerdeletedata",{"_index":3927,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerdeleteresponses",{"_index":3928,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindonedata",{"_index":3929,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindonedecodeddata",{"_index":3930,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindonedecodedresponse",{"_index":3931,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindonedecodedresponses",{"_index":3932,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindoneerror",{"_index":3933,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindoneerrors",{"_index":3934,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindoneresponse",{"_index":3935,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindoneresponses",{"_index":3936,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerregister",{"_index":43,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["registrationcertificatecontrollerregisterdata",{"_index":3937,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerregisterresponse",{"_index":3938,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerregisterresponses",{"_index":3939,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecreation",{"_index":2701,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{},"miscellaneous/typealiases.html":{}}}],["registrationcertificaterequest",{"_index":49,"title":{"classes/RegistrationCertificateRequest.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["related",{"_index":2083,"title":{},"body":{"modules/KeyModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["release",{"_index":3316,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["relevant",{"_index":2157,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["rely",{"_index":3465,"title":{},"body":{"index.html":{}}}],["relying",{"_index":75,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{}}}],["relyingparty",{"_index":3940,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerfindall",{"_index":44,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerfindalldata",{"_index":3941,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerfindallresponse",{"_index":3942,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerfindallresponses",{"_index":3943,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerregister",{"_index":45,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerregisterdata",{"_index":3944,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerregisterresponse",{"_index":3945,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerregisterresponses",{"_index":3946,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerremovedata",{"_index":3947,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerremoveresponses",{"_index":3948,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartyregistration",{"_index":3949,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["remain",{"_index":3640,"title":{},"body":{"license.html":{}}}],["remove",{"_index":2599,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"changelog.html":{}}}],["replace",{"_index":1378,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{}}}],["replace('https",{"_index":234,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["replace(/=/g",{"_index":3273,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["replace(/\\+/g",{"_index":3270,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["replace(/\\//g",{"_index":3271,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["replace(/\\r?\\n|\\r/g",{"_index":1381,"title":{},"body":{"injectables/CryptoService.html":{}}}],["replaced",{"_index":3837,"title":{},"body":{"license.html":{}}}],["replacevalue",{"_index":1763,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["repository",{"_index":1129,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["represent",{"_index":3637,"title":{},"body":{"license.html":{}}}],["representatives",{"_index":3655,"title":{},"body":{"license.html":{}}}],["representing",{"_index":621,"title":{},"body":{"interfaces/AuthResponse.html":{},"interfaces/IssuerMetadata.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["represents",{"_index":1067,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/RegistrarConfig.html":{},"entities/Session.html":{},"miscellaneous/typealiases.html":{}}}],["reproduce",{"_index":3678,"title":{},"body":{"license.html":{}}}],["reproducing",{"_index":3767,"title":{},"body":{"license.html":{}}}],["reproduction",{"_index":3572,"title":{},"body":{"license.html":{}}}],["repsonse",{"_index":8,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["req",{"_index":246,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"miscellaneous/functions.html":{}}}],["req+jwt",{"_index":2383,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["req.body",{"_index":269,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["req.body?.session_id",{"_index":460,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers['content",{"_index":475,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers['user",{"_index":473,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers['x",{"_index":457,"title":{},"body":{"modules/AppModule.html":{}}}],["req.id",{"_index":265,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["req.method",{"_index":468,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["req.params?.session",{"_index":459,"title":{},"body":{"modules/AppModule.html":{}}}],["req.params?.tenantid",{"_index":461,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url",{"_index":469,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url?.includes('/oid4vp",{"_index":465,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url?.includes('/vci",{"_index":463,"title":{},"body":{"modules/AppModule.html":{}}}],["reqinit",{"_index":3950,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["reqinterceptor",{"_index":1844,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"miscellaneous/typealiases.html":{}}}],["request",{"_index":11,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["request.'})@isenum(responsetype",{"_index":2126,"title":{},"body":{"classes/OfferRequest.html":{}}}],["request.body?.[sessionidparam",{"_index":2871,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.dto",{"_index":51,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{}}}],["request.dto.ts",{"_index":684,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"miscellaneous/enumerations.html":{}}}],["request.dto.ts:12",{"_index":696,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:15",{"_index":701,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:17",{"_index":2702,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:18",{"_index":703,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:20",{"_index":2127,"title":{},"body":{"classes/OfferRequest.html":{}}}],["request.dto.ts:21",{"_index":705,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:24",{"_index":697,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:26",{"_index":2500,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["request.dto.ts:27",{"_index":698,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/OfferRequest.html":{}}}],["request.dto.ts:30",{"_index":699,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:31",{"_index":2129,"title":{},"body":{"classes/OfferRequest.html":{}}}],["request.dto.ts:33",{"_index":702,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/PresentationRequest.html":{}}}],["request.dto.ts:35",{"_index":2134,"title":{},"body":{"classes/OfferResponse.html":{}}}],["request.dto.ts:36",{"_index":695,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/OfferResponse.html":{}}}],["request.dto.ts:41",{"_index":2501,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["request.dto.ts:6",{"_index":700,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.dto.ts:9",{"_index":704,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.header",{"_index":2388,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.headers.get('x",{"_index":2630,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["request.headers['content",{"_index":2881,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.headers['user",{"_index":2880,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.headers['x",{"_index":2872,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.json",{"_index":2619,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["request.method",{"_index":2615,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["request.params?.[sessionidparam",{"_index":2870,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params?.tenantid",{"_index":2874,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.payload",{"_index":2391,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.query?.[sessionidparam",{"_index":2873,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.url",{"_index":2875,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.user",{"_index":3156,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["request_error",{"_index":2898,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_start",{"_index":2879,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_success",{"_index":2889,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_uri",{"_index":671,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/Session.html":{}}}],["requested",{"_index":257,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["requestfn",{"_index":915,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["requestid",{"_index":253,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{}}}],["requesting",{"_index":3488,"title":{},"body":{"index.html":{}}}],["requestinit['headers",{"_index":933,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["requestoptions",{"_index":1026,"title":{"interfaces/RequestOptions.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["requestresult",{"_index":1030,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["requests",{"_index":91,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{}}}],["requestvalidator",{"_index":958,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["require_pushed_authorization_requests",{"_index":768,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["required",{"_index":334,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"modules/RegistrarModule.html":{},"classes/SchemaResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"license.html":{}}}],["requiredclaimkeys",{"_index":2597,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requiredfields",{"_index":2545,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requires",{"_index":2120,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["res",{"_index":270,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/EncryptionService.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/functions.html":{}}}],["res.data",{"_index":226,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["res.data!['crt",{"_index":243,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.data!['id",{"_index":244,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.data!['jwt",{"_index":281,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.data.data.keys['1'].public_key",{"_index":3218,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["res.data.id",{"_index":3215,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["res.data?.filter",{"_index":261,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.error",{"_index":222,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.payload",{"_index":1530,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["res.redirect(`${values.redirect_uri}?code=${code",{"_index":784,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["res.send",{"_index":847,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["res.send(qrcodebuffer",{"_index":1954,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.send(values",{"_index":1955,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.setheader('content",{"_index":1953,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.state",{"_index":2410,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["res.status(400).send(response",{"_index":845,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["res.statuscode",{"_index":477,"title":{},"body":{"modules/AppModule.html":{}}}],["reserved",{"_index":942,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["reset",{"_index":378,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["resinterceptor",{"_index":1845,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"miscellaneous/typealiases.html":{}}}],["resolve",{"_index":2715,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolved",{"_index":920,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["resolvepublickey",{"_index":2711,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolvepublickey(payload",{"_index":2713,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolver.service",{"_index":2708,"title":{},"body":{"modules/ResolverModule.html":{}}}],["resolver/resolver.module",{"_index":2513,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["resolver/resolver.service",{"_index":2560,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resolvermodule",{"_index":2509,"title":{"modules/ResolverModule.html":{}},"body":{"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"modules.html":{},"overview.html":{}}}],["resolverservice",{"_index":2528,"title":{"injectables/ResolverService.html":{}},"body":{"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"overview.html":{}}}],["resolves",{"_index":2536,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resolving",{"_index":2532,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{}}}],["resource",{"_index":691,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["resourceserver",{"_index":2162,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["response",{"_index":195,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["response('not",{"_index":2635,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["response('unauthorized",{"_index":2631,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["response(null",{"_index":2634,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["response.data!.find((item",{"_index":208,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["response.data!['id",{"_index":198,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["response.dto",{"_index":533,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"controllers/WellKnownController.html":{}}}],["response.dto.ts",{"_index":610,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:11",{"_index":624,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{}}}],["response.dto.ts:13",{"_index":2112,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:15",{"_index":1482,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:17",{"_index":2117,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:19",{"_index":1485,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:2",{"_index":2747,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:21",{"_index":2114,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:23",{"_index":1487,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:25",{"_index":2115,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:29",{"_index":2118,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:3",{"_index":2749,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:33",{"_index":1987,"title":{},"body":{"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:37",{"_index":2111,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:4",{"_index":2748,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:5",{"_index":2116,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{}}}],["response.dto.ts:9",{"_index":2121,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["response.error",{"_index":196,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["response.json(res",{"_index":2622,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["response.jwks.keys.find((key",{"_index":2740,"title":{},"body":{"injectables/ResolverService.html":{}}}],["response.statuscode",{"_index":2890,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["response_mode",{"_index":2357,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_processing",{"_index":2411,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_type",{"_index":692,"title":{},"body":{"classes/AuthorizeQueries.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["response_types_supported",{"_index":2373,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_uri",{"_index":2355,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["responses",{"_index":2838,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsesize",{"_index":2891,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsestatus",{"_index":2443,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["responsestyle",{"_index":976,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["responsetransformer",{"_index":966,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["responsetype",{"_index":1924,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["responsetype.qrcode",{"_index":1938,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsetype.uri",{"_index":1941,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsevalidator",{"_index":969,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["responsibility",{"_index":3823,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":70,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{},"license.html":{}}}],["result",{"_index":2421,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"license.html":{}}}],["result.payload",{"_index":2598,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resulting",{"_index":3615,"title":{},"body":{"license.html":{}}}],["results",{"_index":302,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["retain",{"_index":3724,"title":{},"body":{"license.html":{}}}],["retrieve",{"_index":674,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/PresentationsService.html":{}}}],["retrieved",{"_index":2628,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["retrieves",{"_index":1104,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{}}}],["return",{"_index":109,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["returned",{"_index":229,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["returning",{"_index":919,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["returns",{"_index":135,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["returntype",{"_index":995,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["revisions",{"_index":3634,"title":{},"body":{"license.html":{}}}],["revokeall",{"_index":2809,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(@body",{"_index":2828,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(value",{"_index":2814,"title":{},"body":{"controllers/SessionController.html":{}}}],["revoked",{"_index":17,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"classes/StatusUpdateDto.html":{}}}],["right",{"_index":3216,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["rights",{"_index":3819,"title":{},"body":{"license.html":{}}}],["risk",{"_index":3468,"title":{},"body":{"index.html":{}}}],["risks",{"_index":3786,"title":{},"body":{"license.html":{}}}],["rlength",{"_index":3246,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["root",{"_index":542,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{},"index.html":{}}}],["rootpath",{"_index":482,"title":{},"body":{"modules/AppModule.html":{}}}],["royalty",{"_index":3676,"title":{},"body":{"license.html":{}}}],["rp",{"_index":220,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["rp_name",{"_index":422,"title":{},"body":{"modules/AppModule.html":{}}}],["rpadded",{"_index":3254,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["rs256",{"_index":2051,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["rsa",{"_index":2033,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["run",{"_index":1325,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/SessionService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["running",{"_index":353,"title":{},"body":{"controllers/AppController.html":{}}}],["runs",{"_index":3501,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":2331,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":2862,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["s",{"_index":3240,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s's",{"_index":3250,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s.length",{"_index":3262,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s.slice(1",{"_index":3264,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s[0",{"_index":3263,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["safely",{"_index":957,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["saltgenerator",{"_index":1197,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["same",{"_index":818,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"license.html":{}}}],["san",{"_index":1356,"title":{},"body":{"injectables/CryptoService.html":{}}}],["san.ext",{"_index":1319,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sanext",{"_index":1318,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sanitize",{"_index":2857,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody",{"_index":2840,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody(body",{"_index":2853,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized",{"_index":2858,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized[field",{"_index":2911,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizes",{"_index":2855,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["satisfies",{"_index":2206,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["save",{"_index":299,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/RegistrarService.html":{}}}],["saveconfig",{"_index":2681,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["saveconfig(config",{"_index":300,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["scalable",{"_index":3498,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":405,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":479,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":2981,"title":{},"body":{"injectables/SessionService.html":{}}}],["schema",{"_index":1099,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"controllers/PresentationManagementController.html":{},"modules/RegistrarModule.html":{},"classes/SchemaResponse.html":{}}}],["schema(@param('id",{"_index":1116,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["schema(id",{"_index":1101,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["schema.org/draft/2020",{"_index":2745,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["schema_uri",{"_index":2468,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["schema_uri#integrity",{"_index":2469,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["schemaresponse",{"_index":1167,"title":{"classes/SchemaResponse.html":{}},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/SchemaResponse.html":{}}}],["scheme",{"_index":488,"title":{},"body":{"interfaces/Auth.html":{}}}],["scope",{"_index":693,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["script",{"_index":1323,"title":{},"body":{"injectables/CryptoService.html":{}}}],["scripts/.../import.ts",{"_index":3439,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["scripts/import.ts",{"_index":3445,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["sd",{"_index":1156,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{},"index.html":{}}}],["sdjwt",{"_index":1190,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwt.issue",{"_index":1199,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwtinstance",{"_index":2520,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["sdjwtvcinstance",{"_index":1159,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["search",{"_index":1769,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.join",{"_index":1777,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.push(serializedarray",{"_index":1772,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.push(serializedobject",{"_index":1774,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.push(serializedprimitive",{"_index":1776,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.startswith",{"_index":1814,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.substring(1",{"_index":1815,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["seconds",{"_index":584,"title":{},"body":{"controllers/AuthController.html":{},"classes/ParResponseDto.html":{}}}],["secret",{"_index":566,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"index.html":{}}}],["secretkey",{"_index":1662,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["secretorkey",{"_index":2054,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secretorkeyprovider",{"_index":2022,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":3685,"title":{},"body":{"license.html":{}}}],["sections",{"_index":3550,"title":{},"body":{"index.html":{},"license.html":{}}}],["secure",{"_index":3497,"title":{},"body":{"index.html":{}}}],["securely",{"_index":2627,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["security",{"_index":922,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["see",{"_index":932,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"index.html":{},"license.html":{}}}],["select",{"_index":1014,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["selectivly",{"_index":2607,"title":{},"body":{"interfaces/PresentedData.html":{}}}],["self",{"_index":1344,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sell",{"_index":3686,"title":{},"body":{"license.html":{}}}],["semantic",{"_index":3365,"title":{},"body":{"changelog.html":{}}}],["send",{"_index":339,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["sendauthorizationcode",{"_index":711,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["sendauthorizationcode(res",{"_index":729,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sendauthorizationresponse",{"_index":712,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["sendauthorizationresponse(queries",{"_index":731,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sending",{"_index":2429,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["sends",{"_index":880,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["sensitive",{"_index":2856,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields",{"_index":2907,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields.foreach((field",{"_index":2910,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sent",{"_index":315,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"license.html":{}}}],["separable",{"_index":3641,"title":{},"body":{"license.html":{}}}],["separate",{"_index":3753,"title":{},"body":{"license.html":{}}}],["separator",{"_index":2763,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorarrayexplode",{"_index":2754,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorarrayexplode(style",{"_index":2764,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorarraynoexplode",{"_index":2755,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorobjectexplode",{"_index":2757,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorobjectexplode(style",{"_index":2777,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["sequence",{"_index":3242,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["sequence.slice(2",{"_index":3248,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["sequence[1",{"_index":3247,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["serializearrayparam",{"_index":1731,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializedarray",{"_index":1771,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["serializedobject",{"_index":1773,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["serializedprimitive",{"_index":1775,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["serializeformdatapair",{"_index":2641,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["serializeformdatapair(data",{"_index":2648,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["serializeobjectparam",{"_index":1732,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializeoptions",{"_index":2750,"title":{"interfaces/SerializeOptions.html":{}},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializeprimitiveoptions",{"_index":2752,"title":{"interfaces/SerializePrimitiveOptions.html":{}},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializeprimitiveparam",{"_index":1733,"title":{"interfaces/SerializePrimitiveParam.html":{}},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializeroptions",{"_index":2639,"title":{"interfaces/SerializerOptions.html":{}},"body":{"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializers",{"_index":467,"title":{},"body":{"modules/AppModule.html":{}}}],["serializeurlsearchparamspair",{"_index":2643,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["serializeurlsearchparamspair(data",{"_index":2654,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["serializing",{"_index":924,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["server",{"_index":119,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"controllers/WellKnownController.html":{}}}],["server's",{"_index":2113,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["servers",{"_index":1081,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["servestaticmodule",{"_index":394,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forrootasync",{"_index":480,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":132,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/CredentialsController.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"index.html":{},"license.html":{}}}],["service.db",{"_index":1472,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["services",{"_index":336,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["session",{"_index":458,"title":{"entities/Session.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"miscellaneous/typealiases.html":{}}}],["session.auth_queries",{"_index":781,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["session.authorization_code",{"_index":800,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["session.controller",{"_index":2970,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.credentialpayload",{"_index":2442,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.credentialpayload!.values",{"_index":2440,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.credentialpayload?.values?.[credentialconfigurationid",{"_index":1186,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["session.id",{"_index":811,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["session.notifications",{"_index":2259,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications.findindex",{"_index":2270,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications.push",{"_index":2257,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications[index",{"_index":2273,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.offer!.credential_configuration_ids",{"_index":839,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["session.service",{"_index":2818,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["session.tenantid",{"_index":1184,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["session.vp_nonce",{"_index":2416,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook",{"_index":2414,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook!.url",{"_index":2446,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook.auth",{"_index":2424,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook.auth.config.value",{"_index":2427,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook.auth.type",{"_index":2425,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook.auth?.type",{"_index":2433,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook.url",{"_index":2431,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session/entities/session.entity",{"_index":1166,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["session/session.module",{"_index":404,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["session/session.service",{"_index":663,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["session_id",{"_index":2160,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_logger_key",{"_index":2863,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["session_tidy_up_interval",{"_index":2971,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["session_ttl",{"_index":2974,"title":{},"body":{"modules/SessionModule.html":{}}}],["session_validation_schema",{"_index":403,"title":{},"body":{"modules/AppModule.html":{},"modules/SessionModule.html":{}}}],["sessioncontroller",{"_index":2805,"title":{"controllers/SessionController.html":{}},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["sessionid",{"_index":456,"title":{},"body":{"modules/AppModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["sessionidparam",{"_index":2866,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sessionlogcontext",{"_index":2189,"title":{"interfaces/SessionLogContext.html":{}},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["sessionlogger",{"_index":2147,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["sessionlogger('notification_id",{"_index":2155,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["sessionlogger('session",{"_index":2297,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["sessionlogger('state",{"_index":2152,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["sessionloggerinterceptor",{"_index":1969,"title":{"injectables/SessionLoggerInterceptor.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"overview.html":{}}}],["sessionloggerservice",{"_index":1970,"title":{"injectables/SessionLoggerService.html":{}},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{},"overview.html":{}}}],["sessionmodule",{"_index":375,"title":{"modules/SessionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/SessionModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["sessionrepository",{"_index":2983,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessions",{"_index":2804,"title":{},"body":{"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{}}}],["sessionservice",{"_index":662,"title":{"injectables/SessionService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"overview.html":{}}}],["set",{"_index":106,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/EC_Public.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/WellKnownController.html":{},"changelog.html":{}}}],["set+json",{"_index":3303,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["set+json')@get('jwks.json",{"_index":3289,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["setauthcode",{"_index":713,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["setauthcode(issuer_state",{"_index":733,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["setauthparams",{"_index":1794,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["setconfig",{"_index":910,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["setentry",{"_index":3121,"title":{},"body":{"injectables/StatusListService.html":{}}}],["setentry(id",{"_index":3104,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["setexpirationtime(expiresin",{"_index":1670,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setinterval(callback",{"_index":3014,"title":{},"body":{"injectables/SessionService.html":{}}}],["setissuedat",{"_index":1666,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setissuer(issuer",{"_index":1667,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setprotectedheader",{"_index":1664,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setprotectedheader(header",{"_index":1649,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["setsubject(options.subject",{"_index":1668,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["settimeout",{"_index":172,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["setup",{"_index":3535,"title":{},"body":{"index.html":{}}}],["setupclient",{"_index":1053,"title":{},"body":{"injectables/ClientService.html":{}}}],["setupclient(id",{"_index":886,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["sha",{"_index":1195,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["shall",{"_index":3575,"title":{},"body":{"license.html":{}}}],["shape",{"_index":956,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["shares",{"_index":3604,"title":{},"body":{"license.html":{}}}],["shell",{"_index":1326,"title":{},"body":{"injectables/CryptoService.html":{}}}],["shuffel",{"_index":3068,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["shuffled",{"_index":3062,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["sign",{"_index":1360,"title":{},"body":{"injectables/CryptoService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/VaultKeyService.html":{}}}],["sign(privatekeyinstance",{"_index":1650,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["sign(value",{"_index":3187,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["signalg",{"_index":1192,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["signature",{"_index":1235,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"injectables/VaultKeyService.html":{}}}],["signature).catch((err",{"_index":2585,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["signed",{"_index":1345,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signedjwt",{"_index":2389,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwt.length",{"_index":2395,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwtlength",{"_index":2394,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signer",{"_index":808,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["signer(tenantid",{"_index":1604,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["signer.alg",{"_index":1406,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signer.method",{"_index":1402,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signer.publicjwk",{"_index":1405,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signerjwk",{"_index":1407,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signing",{"_index":1208,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["signingcert",{"_index":1373,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signinginput",{"_index":3236,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["signjwt",{"_index":1251,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["signjwt(header",{"_index":1272,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signjwt(payload",{"_index":1606,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["signjwtcallback",{"_index":1266,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signs",{"_index":3189,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["simple",{"_index":1745,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["simplicity",{"_index":2600,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["singleline",{"_index":447,"title":{},"body":{"modules/AppModule.html":{}}}],["size",{"_index":3065,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["skip",{"_index":3244,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["slot",{"_index":1535,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{},"miscellaneous/typealiases.html":{}}}],["software",{"_index":3613,"title":{},"body":{"license.html":{}}}],["sole",{"_index":3822,"title":{},"body":{"license.html":{}}}],["solely",{"_index":3782,"title":{},"body":{"license.html":{}}}],["solutions",{"_index":3467,"title":{},"body":{"index.html":{}}}],["solves",{"_index":3471,"title":{},"body":{"index.html":{}}}],["someone",{"_index":278,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["sort",{"_index":3072,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"index.html":{},"license.html":{}}}],["sources",{"_index":2869,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["spacedelimited",{"_index":1740,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["spadded",{"_index":3255,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["special",{"_index":3798,"title":{},"body":{"license.html":{}}}],["specific",{"_index":1105,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"index.html":{},"license.html":{}}}],["specification",{"_index":1838,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["specified",{"_index":1008,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["split",{"_index":3388,"title":{},"body":{"changelog.html":{}}}],["sqlite",{"_index":1448,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["sqlite3",{"_index":3426,"title":{},"body":{"dependencies.html":{}}}],["src/.../auth.ts",{"_index":3884,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../bodyserializer.ts",{"_index":3885,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../client.gen.ts",{"_index":3889,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../client.ts",{"_index":3951,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../crypto",{"_index":3904,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../crypto.service.ts",{"_index":3887,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":3434,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../params.ts",{"_index":3897,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../pathserializer.ts",{"_index":3882,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../presentation",{"_index":3432,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../sdk.gen.ts",{"_index":3922,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../session.entity.ts",{"_index":3907,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../types.gen.ts",{"_index":3865,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../types.ts",{"_index":3886,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../util.ts",{"_index":3435,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../utils.ts",{"_index":3881,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../webhook.dto.ts",{"_index":3883,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.module.ts",{"_index":380,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/app.controller.ts",{"_index":345,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/app.controller.ts:8",{"_index":348,"title":{},"body":{"controllers/AppController.html":{}}}],["src/auth/auth.controller.ts",{"_index":501,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:60",{"_index":513,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard.ts",{"_index":1988,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.guard.ts:12",{"_index":1996,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.guard.ts:7",{"_index":1993,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":590,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/client.service.ts",{"_index":849,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:16",{"_index":1055,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:23",{"_index":1059,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:35",{"_index":1057,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:45",{"_index":1058,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:61",{"_index":1062,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:74",{"_index":1056,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:82",{"_index":1061,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/dto/client",{"_index":970,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["src/auth/dto/token",{"_index":3157,"title":{},"body":{"classes/TokenResponse.html":{}}}],["src/auth/jwt.service.ts",{"_index":1652,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:13",{"_index":2009,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:19",{"_index":2012,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:56",{"_index":2014,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:83",{"_index":2010,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:94",{"_index":2013,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":2015,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:20",{"_index":2021,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:47",{"_index":2025,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:66",{"_index":2027,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:9",{"_index":2019,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/token.decorator.ts",{"_index":3152,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["src/crypto/crypto.module.ts",{"_index":1240,"title":{},"body":{"modules/CryptoModule.html":{}}}],["src/crypto/crypto.service.ts",{"_index":1243,"title":{},"body":{"injectables/CryptoService.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/crypto.service.ts:144",{"_index":1259,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:159",{"_index":1275,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:166",{"_index":1273,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:174",{"_index":1277,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:193",{"_index":1256,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:231",{"_index":1265,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:268",{"_index":1260,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:282",{"_index":1263,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:32",{"_index":1254,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:36",{"_index":1280,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:39",{"_index":1269,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:47",{"_index":1271,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:61",{"_index":1268,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/encryption/encryption.service.ts",{"_index":1490,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:11",{"_index":1506,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:12",{"_index":1508,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:13",{"_index":1507,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:14",{"_index":1498,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:19",{"_index":1504,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:23",{"_index":1503,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:58",{"_index":1500,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:63",{"_index":1501,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/key/crypto/crypto",{"_index":1214,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/crypto/crypto.service.ts",{"_index":1423,"title":{},"body":{"injectables/CryptoService-1.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/crypto/crypto.service.ts:10",{"_index":1427,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["src/crypto/key/crypto/crypto.service.ts:17",{"_index":1429,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["src/crypto/key/crypto/crypto.service.ts:21",{"_index":1433,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["src/crypto/key/entities/key.entity.ts",{"_index":2064,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/key.entity.ts:6",{"_index":2066,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/key.entity.ts:8",{"_index":2065,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/filesystem",{"_index":1584,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["src/crypto/key/key.module.ts",{"_index":2067,"title":{},"body":{"modules/KeyModule.html":{}}}],["src/crypto/key/key.module.ts:36",{"_index":2069,"title":{},"body":{"modules/KeyModule.html":{}}}],["src/crypto/key/key.service.ts",{"_index":2092,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:11",{"_index":2098,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:17",{"_index":2099,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:23",{"_index":2094,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:29",{"_index":2095,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:30",{"_index":2096,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:31",{"_index":2097,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:37",{"_index":2101,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/vault",{"_index":3165,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["src/database/database.module.ts",{"_index":1439,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/health/health.controller.ts",{"_index":1690,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:25",{"_index":1698,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1706,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/issuer/authorize/authorize.controller.ts",{"_index":627,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:36",{"_index":641,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:58",{"_index":649,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:82",{"_index":652,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:98",{"_index":638,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.service.ts",{"_index":707,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["src/issuer/authorize/authorize.service.ts:163",{"_index":727,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:181",{"_index":719,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:222",{"_index":730,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:236",{"_index":734,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:27",{"_index":718,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:38",{"_index":724,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:45",{"_index":721,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:68",{"_index":732,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:94",{"_index":736,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/dto/authorize",{"_index":683,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["src/issuer/authorize/dto/par",{"_index":2449,"title":{},"body":{"classes/ParResponseDto.html":{}}}],["src/issuer/credentials/credentials.controller.ts",{"_index":1097,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:15",{"_index":1108,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:25",{"_index":1103,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.service.ts",{"_index":1118,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:145",{"_index":1149,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:16",{"_index":1130,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:166",{"_index":1147,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:30",{"_index":1136,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:34",{"_index":1138,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:50",{"_index":1152,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:64",{"_index":1133,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:73",{"_index":1145,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:87",{"_index":1142,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/dto/credential",{"_index":2463,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["src/issuer/credentials/dto/schema",{"_index":2743,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["src/issuer/credentials/entities/issuance",{"_index":1861,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["src/issuer/issuer",{"_index":1890,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["src/issuer/issuer.module.ts",{"_index":1971,"title":{},"body":{"modules/IssuerModule.html":{}}}],["src/issuer/oid4vci/dto/notification",{"_index":2103,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["src/issuer/oid4vci/dto/offer",{"_index":2122,"title":{},"body":{"classes/OfferRequest.html":{},"classes/OfferResponse.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts",{"_index":2135,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:28",{"_index":2139,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:42",{"_index":2143,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts",{"_index":2161,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:110",{"_index":2169,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:150",{"_index":2171,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:261",{"_index":2173,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:37",{"_index":2180,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:39",{"_index":2166,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:44",{"_index":2178,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:49",{"_index":2177,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:60",{"_index":2176,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/util.ts",{"_index":3441,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/issuer/status",{"_index":3027,"title":{},"body":{"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["src/main.ts",{"_index":3440,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/registrar/generated/client.gen.ts",{"_index":3959,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/client/client.ts",{"_index":3961,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/client/types.ts",{"_index":975,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/client/utils.ts",{"_index":1709,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/client/utils.ts:331",{"_index":1715,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:337",{"_index":1717,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:341",{"_index":1723,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:348",{"_index":1721,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:353",{"_index":1719,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:360",{"_index":1726,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:370",{"_index":1728,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/core/auth.ts",{"_index":487,"title":{},"body":{"interfaces/Auth.html":{},"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/core/bodyserializer.ts",{"_index":2638,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/core/params.ts",{"_index":1531,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{},"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/core/pathserializer.ts",{"_index":2751,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/core/types.ts",{"_index":902,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["src/registrar/generated/sdk.gen.ts",{"_index":3960,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/types.gen.ts",{"_index":3958,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/registrar/registrar",{"_index":2656,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["src/registrar/registrar.module.ts",{"_index":2665,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["src/registrar/registrar.service.ts",{"_index":6,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:109",{"_index":2690,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:117",{"_index":2692,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:129",{"_index":2694,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:144",{"_index":2695,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:161",{"_index":2688,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:186",{"_index":2697,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:204",{"_index":2689,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:231",{"_index":2685,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:272",{"_index":2687,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:329",{"_index":2691,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:352",{"_index":2696,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:53",{"_index":2699,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:57",{"_index":2698,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:61",{"_index":2683,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:78",{"_index":2693,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/session/entities/session.entity.ts",{"_index":2781,"title":{},"body":{"entities/Session.html":{},"miscellaneous/typealiases.html":{}}}],["src/session/entities/session.entity.ts:36",{"_index":2790,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:41",{"_index":2788,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:46",{"_index":2784,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:51",{"_index":2794,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:56",{"_index":2782,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:61",{"_index":2798,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:66",{"_index":2785,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:71",{"_index":2793,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:76",{"_index":2786,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:81",{"_index":2800,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:86",{"_index":2791,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:91",{"_index":2795,"title":{},"body":{"entities/Session.html":{}}}],["src/session/session.controller.ts",{"_index":2806,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:23",{"_index":2810,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:32",{"_index":2813,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:42",{"_index":2817,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.module.ts",{"_index":2969,"title":{},"body":{"modules/SessionModule.html":{}}}],["src/session/session.service.ts",{"_index":2977,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:10",{"_index":2982,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:23",{"_index":2997,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:40",{"_index":2989,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:50",{"_index":2986,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:65",{"_index":2992,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:74",{"_index":2991,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:83",{"_index":2995,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:90",{"_index":3003,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/utils/session",{"_index":2830,"title":{},"body":{"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["src/utils/webhook.dto.ts",{"_index":305,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/typealiases.html":{}}}],["src/utils/webhook.dto.ts:13",{"_index":313,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook.dto.ts:19",{"_index":317,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook.dto.ts:36",{"_index":3279,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook.dto.ts:43",{"_index":3278,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook.dto.ts:54",{"_index":3282,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook.dto.ts:62",{"_index":3281,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/verifier/oid4vp/dto/authorization",{"_index":623,"title":{},"body":{"classes/AuthorizationResponse.html":{}}}],["src/verifier/oid4vp/dto/presentation",{"_index":2499,"title":{},"body":{"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"miscellaneous/enumerations.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts",{"_index":2280,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:34",{"_index":2287,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:53",{"_index":2291,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.module.ts",{"_index":2308,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts",{"_index":2311,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:20",{"_index":2315,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:215",{"_index":2323,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:264",{"_index":2324,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:41",{"_index":2317,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/presentations/dto/auth",{"_index":609,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["src/verifier/presentations/dto/vp",{"_index":2700,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["src/verifier/presentations/entities/presentation",{"_index":2452,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["src/verifier/presentations/presentations.controller.ts",{"_index":2471,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:111",{"_index":2473,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:121",{"_index":2481,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:137",{"_index":2475,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:79",{"_index":2479,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.module.ts",{"_index":2510,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["src/verifier/presentations/presentations.service.ts",{"_index":2516,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:109",{"_index":2553,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:122",{"_index":2559,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:145",{"_index":2558,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:160",{"_index":2555,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:177",{"_index":2547,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:22",{"_index":2530,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:40",{"_index":2543,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:54",{"_index":2542,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:67",{"_index":2550,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:78",{"_index":2535,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:88",{"_index":2540,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/resolver/dto/issuer",{"_index":1962,"title":{},"body":{"interfaces/IssuerMetadata.html":{}}}],["src/verifier/resolver/resolver.module.ts",{"_index":2707,"title":{},"body":{"modules/ResolverModule.html":{}}}],["src/verifier/resolver/resolver.service.ts",{"_index":2709,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/resolver/resolver.service.ts:12",{"_index":2712,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/resolver/resolver.service.ts:21",{"_index":2714,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/verifier.module.ts",{"_index":3276,"title":{},"body":{"modules/VerifierModule.html":{}}}],["src/well",{"_index":1064,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{}}}],["stable",{"_index":3541,"title":{},"body":{"index.html":{}}}],["stack",{"_index":2901,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"index.html":{}}}],["stack—so",{"_index":3478,"title":{},"body":{"index.html":{}}}],["stage",{"_index":2235,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["standardized",{"_index":3453,"title":{},"body":{"index.html":{}}}],["start",{"_index":2320,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"index.html":{}}}],["started",{"_index":2953,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"injectables/SessionLoggerService.html":{}}}],["starting",{"_index":2883,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["starts",{"_index":144,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["starttime",{"_index":2884,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["state",{"_index":612,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/SessionService.html":{},"license.html":{}}}],["stated",{"_index":3684,"title":{},"body":{"license.html":{}}}],["statement",{"_index":3742,"title":{},"body":{"license.html":{}}}],["static",{"_index":396,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"changelog.html":{},"dependencies.html":{}}}],["stating",{"_index":3721,"title":{},"body":{"license.html":{}}}],["status",{"_index":544,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"dependencies.html":{},"index.html":{}}}],["status_list",{"_index":3103,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuscode",{"_index":476,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["statuslist",{"_index":3047,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslist(file.elements",{"_index":3078,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslist+jwt",{"_index":3082,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslistcontroller",{"_index":3026,"title":{"controllers/StatusListController.html":{}},"body":{"controllers/StatusListController.html":{},"modules/StatusListModule.html":{}}}],["statuslistcontrollercrlfiledata",{"_index":3952,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["statuslistcontrollercrlfileresponse",{"_index":3953,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["statuslistcontrollercrlfileresponses",{"_index":3954,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["statuslistcontrollergetlistdata",{"_index":3955,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["statuslistcontrollergetlistresponse",{"_index":3956,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["statuslistcontrollergetlistresponses",{"_index":3957,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["statuslistfetcher",{"_index":2521,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["statuslistfile",{"_index":3041,"title":{"interfaces/StatusListFile.html":{}},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslistjwtheaderparameters",{"_index":3048,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslistmodule",{"_index":1968,"title":{"modules/StatusListModule.html":{}},"body":{"modules/IssuerModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules.html":{},"overview.html":{}}}],["statuslistservice",{"_index":1127,"title":{"injectables/StatusListService.html":{}},"body":{"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"overview.html":{}}}],["statusmapping",{"_index":3050,"title":{"entities/StatusMapping.html":{}},"body":{"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{}}}],["statusmappingrepository",{"_index":3057,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statusupdatedto",{"_index":2815,"title":{"classes/StatusUpdateDto.html":{}},"body":{"controllers/SessionController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{}}}],["stdio",{"_index":1330,"title":{},"body":{"injectables/CryptoService.html":{}}}],["step",{"_index":676,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/CryptoService.html":{},"injectables/SessionLoggerService.html":{},"injectables/VaultKeyService.html":{}}}],["still",{"_index":214,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"index.html":{}}}],["stoppage",{"_index":3805,"title":{},"body":{"license.html":{}}}],["storage",{"_index":3503,"title":{},"body":{"index.html":{}}}],["store",{"_index":240,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["storeaccesscertificate",{"_index":1252,"title":{},"body":{"injectables/CryptoService.html":{}}}],["storeaccesscertificate(crt",{"_index":1274,"title":{},"body":{"injectables/CryptoService.html":{}}}],["storeconfig",{"_index":3122,"title":{},"body":{"injectables/StatusListService.html":{}}}],["storeconfig(content",{"_index":3089,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["storeconfiguration",{"_index":1896,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["storeconfiguration(config",{"_index":1912,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["storecredentialconfiguration",{"_index":1125,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["storecredentialconfiguration(tenantid",{"_index":1150,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["stored",{"_index":1642,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["storeexistingrp",{"_index":2682,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["storeexistingrp(name",{"_index":205,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["storepresentationconfig",{"_index":2472,"title":{},"body":{"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["storepresentationconfig(config",{"_index":2480,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["storepresentationconfig(vprequest",{"_index":2549,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid",{"_index":2526,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid(registrationcertid",{"_index":2552,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["stores",{"_index":200,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/IssuerManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["strategy",{"_index":2030,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["stream",{"_index":1015,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["string",{"_index":18,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/typealiases.html":{}}}],["stringified",{"_index":1835,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["strings",{"_index":965,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["stripemptyslots",{"_index":1556,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["stripemptyslots(params",{"_index":1582,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["structure",{"_index":1476,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/PresentationConfig.html":{}}}],["structured",{"_index":2915,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["style",{"_index":939,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["sub",{"_index":576,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{}}}],["subj",{"_index":1347,"title":{},"body":{"injectables/CryptoService.html":{}}}],["subject",{"_index":256,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{},"license.html":{}}}],["subjectaltname=dns:${uri",{"_index":1350,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sublicense",{"_index":3680,"title":{},"body":{"license.html":{}}}],["submission",{"_index":3744,"title":{},"body":{"license.html":{}}}],["submit",{"_index":3650,"title":{},"body":{"license.html":{}}}],["submitted",{"_index":3648,"title":{},"body":{"license.html":{}}}],["subsequently",{"_index":3667,"title":{},"body":{"license.html":{}}}],["succeeded",{"_index":2963,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["successfully",{"_index":2393,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["such",{"_index":1484,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/Session.html":{},"license.html":{}}}],["summary",{"_index":539,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["super",{"_index":2001,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/VaultKeyService.html":{}}}],["super.canactivate(context",{"_index":2006,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["supersede",{"_index":3752,"title":{},"body":{"license.html":{}}}],["support",{"_index":553,"title":{},"body":{"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/Session.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{}}}],["supported",{"_index":332,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/CryptoService.html":{},"controllers/IssuerManagementController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{}}}],["supportedauthenticationscheme",{"_index":2183,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["supportedauthenticationscheme.clientattestationjwt",{"_index":776,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["supportedauthenticationscheme.dpop",{"_index":2229,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["supports",{"_index":515,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["svg",{"_index":3854,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":1436,"title":{},"body":{"injectables/CryptoService-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["symmetric",{"_index":2056,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["synchronize",{"_index":1460,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["syntax",{"_index":3840,"title":{},"body":{"license.html":{}}}],["system",{"_index":1594,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["systems",{"_index":3658,"title":{},"body":{"license.html":{}}}],["t",{"_index":1048,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/EncryptionService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{}}}],["t['baseurl",{"_index":988,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["t['throwonerror",{"_index":1025,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tag",{"_index":3245,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["tap",{"_index":2860,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["tap((data",{"_index":2887,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["target",{"_index":443,"title":{},"body":{"modules/AppModule.html":{}}}],["tdata",{"_index":1032,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tdata[keyof",{"_index":1031,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tdatashape",{"_index":1049,"title":{"interfaces/TDataShape.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tell",{"_index":2420,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["tenancy",{"_index":2797,"title":{},"body":{"entities/Session.html":{}}}],["tenant",{"_index":149,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"changelog.html":{}}}],["tenant_events",{"_index":66,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["tenantid",{"_index":151,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["tenantid)).uri",{"_index":824,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["tenantid/.well",{"_index":3284,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["tenantid/authorize",{"_index":628,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["tenantid/oid4vp",{"_index":2281,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["tenantid/status",{"_index":3029,"title":{},"body":{"controllers/StatusListController.html":{}}}],["tenantid/vci",{"_index":2136,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["tenanturl",{"_index":2338,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["term",{"_index":3508,"title":{},"body":{"index.html":{}}}],["terminate",{"_index":3708,"title":{},"body":{"license.html":{}}}],["terminusmodule",{"_index":1708,"title":{},"body":{"modules/HealthModule.html":{}}}],["terms",{"_index":3570,"title":{},"body":{"license.html":{}}}],["terror",{"_index":1033,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["terror[keyof",{"_index":1034,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["test",{"_index":2038,"title":{},"body":{"injectables/JwtStrategy.html":{},"changelog.html":{}}}],["test/.../index.ts",{"_index":3436,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../utils.ts",{"_index":3438,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/utils.ts",{"_index":3442,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/webhook/src/index.ts",{"_index":2604,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"miscellaneous/functions.html":{}}}],["text",{"_index":1022,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["textencoder().encode(secret",{"_index":1663,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["then((cryptokey",{"_index":3221,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["then((key",{"_index":1525,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["then((res",{"_index":221,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["then((response",{"_index":207,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["then((session",{"_index":780,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["then(async",{"_index":194,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["theory",{"_index":3789,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":3644,"title":{},"body":{"license.html":{}}}],["third",{"_index":3734,"title":{},"body":{"license.html":{}}}],["this._fns",{"_index":1846,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this._fns.indexof(id",{"_index":1848,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this._fns.length",{"_index":1851,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this._fns[id",{"_index":1847,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this._fns[index",{"_index":1850,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this.accesstoken",{"_index":130,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.addaccesscertificate(config",{"_index":218,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.addrp(tenantid",{"_index":156,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.authorizeservice.authorizationchallengeendpoint",{"_index":682,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.authzmetadata",{"_index":3302,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.authorizeservice.sendauthorizationresponse",{"_index":669,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.validatetokenrequest(body",{"_index":681,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authzmetadata(tenantid",{"_index":794,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.authzservice.authzmetadata(tenantid",{"_index":2195,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.client",{"_index":125,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.client.setconfig",{"_index":126,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.clients",{"_index":867,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clientservice.validateclient",{"_index":573,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice",{"_index":232,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.get",{"_index":3199,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.configservice.get('oidc",{"_index":1688,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["this.configservice.get('registrar_url",{"_index":140,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.get('vault_url",{"_index":3197,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.configservice.getorthrow",{"_index":872,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vciService.html":{}}}],["this.configservice.getorthrow('auth_client_id",{"_index":871,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.configservice.getorthrow('folder",{"_index":285,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["this.configservice.getorthrow('jwt_expires_in",{"_index":1661,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('jwt_issuer",{"_index":1659,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('jwt_secret",{"_index":1658,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('oidc_client_id",{"_index":114,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('oidc_client_secret",{"_index":116,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('oidc_issuer_url",{"_index":112,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('public_url",{"_index":754,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.configservice.getorthrow('public_url')}${req.url",{"_index":785,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.configservice.getorthrow('public_url')}/${session.tenantid}/credentials/vct/${vc.id",{"_index":1204,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.configservice.getorthrow('public_url')}/${tenantid",{"_index":807,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.configservice.getorthrow('public_url')}/${tenantid}/oid4vp/request/${requestid}/${values.session",{"_index":2404,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.configservice.getorthrow('registrar_url",{"_index":128,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('rp_name",{"_index":192,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('session_tidy_up_interval",{"_index":3012,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservice.getorthrow('session_ttl",{"_index":3022,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservie.get('crypto_alg",{"_index":1434,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["this.create(tenantid",{"_index":3203,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.createlist(tenantid",{"_index":3075,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.credentialsservice.deletecredentialconfiguration",{"_index":1960,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.credentialsservice.getconfig(user.sub",{"_index":1957,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.credentialsservice.getconfigbyid",{"_index":840,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.credentialsservice.getcredential",{"_index":2250,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.credentialsservice.getcredentialconfiguration",{"_index":2198,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.credentialsservice.getcredentialconfiguration(user.sub",{"_index":2208,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.credentialsservice.getschema(id",{"_index":1117,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.getvct(id",{"_index":1115,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.storecredentialconfiguration",{"_index":1958,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.crpytoservice.getcertchain",{"_index":1207,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.crpytoservice.keyservice.signer",{"_index":1191,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.crypto",{"_index":1621,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.crypto.alg",{"_index":1635,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.crypto.generatekeypair",{"_index":1628,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.crypto.getsigner(keys.privatekey",{"_index":1625,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.cryptoservice.getalg",{"_index":1646,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["this.cryptoservice.getcallbackcontext",{"_index":2192,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.cryptoservice.getcallbackcontext(tenantid",{"_index":752,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.cryptoservice.getcertchain",{"_index":2385,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.cryptoservice.getcertchain('signing",{"_index":3083,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.cryptoservice.getcrypto",{"_index":1622,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.cryptoservice.getjwks(tenantid).then((key",{"_index":3305,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.cryptoservice.keyservice.getpublickey",{"_index":236,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["this.cryptoservice.signjwt",{"_index":2390,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.cryptoservice.signjwt(header",{"_index":3084,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.cryptoservice.storeaccesscertificate",{"_index":242,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.db.pingcheck('database",{"_index":1705,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.dertojwtsignature(res.data.data.signature.split(':')[2",{"_index":3228,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.encryptionservice.decryptjwe",{"_index":2407,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.getencryptionpublickey",{"_index":2360,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.eventemitter.emit(tenant_events.tenant_init",{"_index":900,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.eventemitter.emit(tenant_events.tenant_keys",{"_index":1305,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.filename",{"_index":3064,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.folder",{"_index":1297,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{}}}],["this.getaccesscertificateid(config",{"_index":157,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.getauthorizationserver",{"_index":755,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.getauthorizationserver(tenantid).createaccesstokenresponse",{"_index":806,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.getcallbackcontext(tenantid).hash",{"_index":1409,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.getclients",{"_index":863,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.getclients().find((c",{"_index":875,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.getconfig(session.tenantid",{"_index":3095,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.getconfig(tenantid",{"_index":3077,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.getconfig(tenantid)).foreach((credential",{"_index":1180,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.getconfig(tenantid).jwt",{"_index":3087,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.getconfigbyid",{"_index":1183,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.getinterceptorindex(id",{"_index":1849,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this.getjwk",{"_index":3219,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getkeys(tenant",{"_index":1623,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.getkeys(tenantid",{"_index":1624,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.getkeys(tenantid).then((keys",{"_index":1643,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.getkid(tenantid",{"_index":3224,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getpublickey('jwk",{"_index":3214,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getpublickey('pem",{"_index":3200,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getsignjwtcallback(tenantid",{"_index":1401,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.hascerts(tenantid",{"_index":1304,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.headers",{"_index":3198,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.health.check",{"_index":1704,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httpservice.get",{"_index":2733,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["this.httpservice.post",{"_index":2435,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/VaultKeyService.html":{}}}],["this.init(tenantid",{"_index":1511,"title":{},"body":{"injectables/EncryptionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.isenabled",{"_index":108,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.issuanceconfigrepo.delete",{"_index":1179,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.issuanceconfigrepo.findby",{"_index":1175,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.issuanceconfigrepo.findonebyorfail",{"_index":1176,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.issuanceconfigrepo.save(value",{"_index":1178,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.issuer",{"_index":2193,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.createcredentialissuermetadata",{"_index":2197,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.createcredentialresponse",{"_index":2263,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.parsecredentialrequest",{"_index":2220,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.verifycredentialrequestjwtproof",{"_index":2243,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuermetadata(tenantid",{"_index":2211,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.isusingexternaloidc",{"_index":1656,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.jwtservice.generatetoken(payload",{"_index":578,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwtservice.isusingexternaloidc",{"_index":550,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.kbverifier.bind(this",{"_index":2566,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.keyservice.getpublickey",{"_index":1413,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.keyservice.getpublickey('jwk",{"_index":1383,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.keyservice.init(tenantid",{"_index":1303,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.keyservice.signjwt(payload",{"_index":1382,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.loadclients",{"_index":868,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.loadconfig(tenantid",{"_index":154,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.loadconfig(tenantid).id",{"_index":254,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.logger.error",{"_index":2897,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.info",{"_index":2878,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.setcontext('sessionlogger",{"_index":2876,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.logger.setcontext('sessionloggerservice",{"_index":2951,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.oauth2client",{"_index":117,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.oauth2client.clientcredentials().then((token",{"_index":166,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.oid4vciservice.createoffer",{"_index":1947,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.oid4vciservice.getcredential(req",{"_index":2153,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.handlenotification(req",{"_index":2156,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.issuermetadata(tenantid",{"_index":3301,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.oid4vpservice.createauthorizationrequest",{"_index":2300,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.oid4vpservice.createrequest",{"_index":2491,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.oid4vpservice.createrequest('pid",{"_index":823,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.oid4vpservice.getresponse(body",{"_index":2302,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.parsechallengerequest",{"_index":844,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.presentationsservice.deletepresentationconfig(id",{"_index":2498,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.getpresentationconfig",{"_index":2340,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.getpresentationconfigs(user.sub",{"_index":2496,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.parseresponse",{"_index":2415,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.storepresentationconfig",{"_index":2497,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.storercid",{"_index":280,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.privateencryptionkey",{"_index":1526,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.privateenncryptionpath",{"_index":1512,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.privatekeypath",{"_index":1626,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.publicencryptionkey",{"_index":1527,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.publicencryptionpath",{"_index":1514,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.publickeypath",{"_index":1627,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.reflector.get",{"_index":2864,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.reflector.getallandoverride",{"_index":2003,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.refreshaccesstoken",{"_index":148,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.registrarservice.addregistrationcertificate",{"_index":2346,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.isenabled",{"_index":2343,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.resolverservice.resolvepublickey",{"_index":2582,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.resourceserver",{"_index":2194,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.resourceserver.verifyresourcerequest",{"_index":2224,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sanitizebody(request.body",{"_index":2882,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.saveconfig(config",{"_index":199,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.schedulerregistry.addinterval('tidyupsessions",{"_index":3015,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sdjwtinstance",{"_index":2564,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.sendauthorizationcode(res",{"_index":834,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.sessionlogger.logauthorizationrequest(logcontext",{"_index":2349,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logcredentialissuance",{"_index":2252,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionlogger.logcredentialverification",{"_index":2417,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowcomplete(logcontext",{"_index":2260,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowerror(logcontext",{"_index":2268,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowstart(logcontext",{"_index":2237,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.lognotification(logcontext",{"_index":2275,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionlogger.logsession",{"_index":2392,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logsessionerror",{"_index":2277,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionrepository.delete",{"_index":3023,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.find",{"_index":3018,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail",{"_index":3019,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail(where",{"_index":3020,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.save(session",{"_index":3016,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.update",{"_index":3017,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionservice",{"_index":778,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.sessionservice.add(auth_session",{"_index":2347,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.add(body.issuer_state",{"_index":677,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.sessionservice.add(issuer_state",{"_index":848,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.sessionservice.add(res.state",{"_index":2422,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.add(session.id",{"_index":2258,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionservice.add(values.session",{"_index":2402,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.create",{"_index":2215,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionservice.get",{"_index":2230,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionservice.get(body.auth_session",{"_index":831,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.sessionservice.get(body.issuer_state",{"_index":835,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.sessionservice.get(id",{"_index":2827,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.get(res.state",{"_index":2409,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.getall",{"_index":2825,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.getby",{"_index":790,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.setauthcode",{"_index":846,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.setauthcode(values.issuer_state",{"_index":783,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.setentry(entry.index",{"_index":3111,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.setupclient(client.id",{"_index":865,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.sign(input",{"_index":3205,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.sign(signinginput",{"_index":3238,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.signjwt(header",{"_index":1415,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.statuslistfetcher.bind(this",{"_index":2567,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.statuslistservice.createentry",{"_index":1205,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.statuslistservice.getlist(tenantid",{"_index":3040,"title":{},"body":{"controllers/StatusListController.html":{}}}],["this.statuslistservice.updatestatus(value",{"_index":2829,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.statusmappingrepository.findby",{"_index":3107,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.statusmappingrepository.save",{"_index":3102,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.storeconfig(file",{"_index":3086,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.storeexistingrp(name",{"_index":197,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.tidyupsessions",{"_index":3010,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.vaulturl",{"_index":3196,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.vaulturl}/keys/${tenantid",{"_index":3211,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.vaulturl}/sign/${tenantid",{"_index":3225,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.verifier.bind(this",{"_index":2565,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository",{"_index":2574,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.delete",{"_index":2573,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.find",{"_index":2568,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.save(vprequest",{"_index":2572,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.update",{"_index":2577,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["those",{"_index":3689,"title":{},"body":{"license.html":{}}}],["through",{"_index":3577,"title":{},"body":{"license.html":{}}}],["throw",{"_index":238,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{}}}],["throwonerror",{"_index":977,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tidy",{"_index":2999,"title":{},"body":{"injectables/SessionService.html":{}}}],["tidyupsessions",{"_index":2979,"title":{},"body":{"injectables/SessionService.html":{}}}],["time",{"_index":2451,"title":{},"body":{"classes/ParResponseDto.html":{}}}],["times",{"_index":2266,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["timestamp",{"_index":1871,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["title",{"_index":3778,"title":{},"body":{"license.html":{}}}],["tmp",{"_index":3324,"title":{},"body":{"changelog.html":{}}}],["todo",{"_index":247,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["together",{"_index":3462,"title":{},"body":{"index.html":{}}}],["token",{"_index":89,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"index.html":{}}}],["token(body",{"_index":650,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["token.accesstoken",{"_index":167,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["token.decorator",{"_index":531,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["token_endpoint",{"_index":758,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["token_endpoint_auth_methods_supported",{"_index":775,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["token_exchange",{"_index":2964,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["token_type",{"_index":547,"title":{},"body":{"controllers/AuthController.html":{},"classes/TokenResponse.html":{}}}],["tokenpayload",{"_index":530,"title":{"interfaces/TokenPayload.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"interfaces/TokenPayload.html":{}}}],["tokenpayload.nonce",{"_index":2247,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["tokenpayload.sub",{"_index":2231,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["tokenresponse",{"_index":510,"title":{"classes/TokenResponse.html":{}},"body":{"controllers/AuthController.html":{},"classes/TokenResponse.html":{}}}],["tokens",{"_index":2058,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["tolowercase",{"_index":1393,"title":{},"body":{"injectables/CryptoService.html":{}}}],["tort",{"_index":3790,"title":{},"body":{"license.html":{}}}],["tostring('ascii",{"_index":565,"title":{},"body":{"controllers/AuthController.html":{}}}],["tostring('base64",{"_index":3269,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["tough",{"_index":3460,"title":{},"body":{"index.html":{}}}],["town",{"_index":2612,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["trace",{"_index":911,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["tracking",{"_index":2504,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["trade",{"_index":3759,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":3725,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":3757,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":3687,"title":{},"body":{"license.html":{}}}],["transformation",{"_index":3617,"title":{},"body":{"license.html":{}}}],["transformer",{"_index":318,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["transformers",{"_index":968,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["transforming",{"_index":959,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["translatetime",{"_index":448,"title":{},"body":{"modules/AppModule.html":{}}}],["translation",{"_index":3618,"title":{},"body":{"license.html":{}}}],["transport",{"_index":441,"title":{},"body":{"modules/AppModule.html":{}}}],["true",{"_index":136,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"interfaces/Middleware.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"interfaces/TDataShape.html":{}}}],["true})@isobject",{"_index":2460,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@isobject()@isoptional",{"_index":1879,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["true})@isstring",{"_index":1874,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["trust",{"_index":2724,"title":{},"body":{"injectables/ResolverService.html":{}}}],["try",{"_index":556,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/VaultKeyService.html":{}}}],["ts",{"_index":3337,"title":{},"body":{"changelog.html":{}}}],["ttl",{"_index":3021,"title":{},"body":{"injectables/SessionService.html":{}}}],["typ",{"_index":2380,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["type",{"_index":19,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["type(undefined)@isobject",{"_index":3277,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["type(undefined)@isoptional()@isobject",{"_index":3280,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["typealiases",{"_index":3862,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":88,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["typeorm",{"_index":1173,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"dependencies.html":{}}}],["typeorm/query",{"_index":3007,"title":{},"body":{"injectables/SessionService.html":{}}}],["typeorm/repository/repository",{"_index":2561,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["typeormhealthindicator",{"_index":1700,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormmodule",{"_index":1440,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/PresentationsModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{}}}],["typeormmodule.forfeature([issuanceconfig",{"_index":1986,"title":{},"body":{"modules/IssuerModule.html":{}}}],["typeormmodule.forfeature([keyentity",{"_index":2090,"title":{},"body":{"modules/KeyModule.html":{}}}],["typeormmodule.forfeature([presentationconfig",{"_index":2515,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["typeormmodule.forfeature([session",{"_index":2976,"title":{},"body":{"modules/SessionModule.html":{}}}],["typeormmodule.forfeature([statusmapping",{"_index":3119,"title":{},"body":{"modules/StatusListModule.html":{}}}],["typeormmodule.forrootasync",{"_index":1456,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleoptions",{"_index":1441,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":1735,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"modules/RegistrarModule.html":{},"injectables/VaultKeyService.html":{},"license.html":{}}}],["types.get(this.cryptoservice.getalg",{"_index":3213,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["types.set('ed25519",{"_index":3210,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["types.set('es256",{"_index":3207,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["typescript",{"_index":177,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["typically",{"_index":1087,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{}}}],["unauthorizedexception",{"_index":519,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception('invalid",{"_index":574,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined",{"_index":442,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Auth.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"interfaces/Fields.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["undefined})@apiproduces('application/json",{"_index":1907,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["undefined})@apiresponse({status",{"_index":508,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@post('offer",{"_index":1909,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["undefined})@post('request",{"_index":2478,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["under",{"_index":3564,"title":{},"body":{"index.html":{},"license.html":{}}}],["unified",{"_index":3452,"title":{},"body":{"index.html":{}}}],["union",{"_index":3585,"title":{},"body":{"license.html":{}}}],["unique",{"_index":25,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{}}}],["unknown",{"_index":644,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CredentialsService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Params.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["unless",{"_index":3746,"title":{},"body":{"license.html":{}}}],["unlinksync",{"_index":1284,"title":{},"body":{"injectables/CryptoService.html":{}}}],["unlinksync(file",{"_index":1371,"title":{},"body":{"injectables/CryptoService.html":{}}}],["unused",{"_index":2386,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["up",{"_index":352,"title":{},"body":{"controllers/AppController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/SessionService.html":{}}}],["update",{"_index":1714,"title":{},"body":{"classes/Interceptors.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["update(data",{"_index":1394,"title":{},"body":{"injectables/CryptoService.html":{}}}],["update(id",{"_index":1724,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["update.dto",{"_index":2822,"title":{},"body":{"controllers/SessionController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["update.dto.ts",{"_index":3144,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:16",{"_index":3146,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:24",{"_index":3149,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:8",{"_index":3147,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["updated",{"_index":1914,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["updatestatus",{"_index":3123,"title":{},"body":{"injectables/StatusListService.html":{}}}],["updatestatus(value",{"_index":3106,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["upload",{"_index":3339,"title":{},"body":{"changelog.html":{}}}],["uri",{"_index":896,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"miscellaneous/enumerations.html":{}}}],["url",{"_index":338,"title":{},"body":{"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Interceptors.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{}}}],["url(request.url",{"_index":2614,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["url.pathname",{"_index":2616,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["url.replace",{"_index":1761,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["url.replace(match",{"_index":1765,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["urlsearchparams",{"_index":2644,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["urlsearchparamsbodyserializer",{"_index":2653,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["urn:${randomuuid",{"_index":672,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["use",{"_index":107,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/EC_Public.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"changelog.html":{},"license.html":{}}}],["use(fn",{"_index":1727,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["used",{"_index":202,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"entities/IssuanceConfig.html":{},"classes/JwksResponseDto.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/typealiases.html":{}}}],["useexternaloidc",{"_index":2034,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usefactory",{"_index":437,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["useful",{"_index":953,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["useguards",{"_index":1915,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["useguards(jwtauthguard",{"_index":1928,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["useinterceptors",{"_index":2144,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["useinterceptors(sessionloggerinterceptor",{"_index":2150,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["user",{"_index":471,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"modules/SessionModule.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["user.sub",{"_index":1948,"title":{},"body":{"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["username",{"_index":1466,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["uses",{"_index":1693,"title":{},"body":{"controllers/HealthController.html":{},"injectables/SessionLoggerService.html":{}}}],["using",{"_index":159,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["utf",{"_index":297,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["util",{"_index":2187,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["utility",{"_index":1416,"title":{},"body":{"injectables/CryptoService.html":{}}}],["utils",{"_index":983,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["utils.ts",{"_index":1417,"title":{},"body":{"injectables/CryptoService.html":{}}}],["utils/session",{"_index":1982,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["utils/webhook.dto",{"_index":747,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/VCT.html":{}}}],["uuid",{"_index":1617,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"dependencies.html":{}}}],["v",{"_index":1420,"title":{},"body":{"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"index.html":{}}}],["v1",{"_index":3548,"title":{},"body":{"index.html":{}}}],["v2",{"_index":3549,"title":{},"body":{"index.html":{}}}],["v4",{"_index":1616,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["valid",{"_index":164,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/StatusUpdateDto.html":{}}}],["valid('trace",{"_index":426,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":653,"title":{},"body":{"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["validate(payload",{"_index":2026,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateclient",{"_index":1054,"title":{},"body":{"injectables/ClientService.html":{}}}],["validateclient(clientid",{"_index":874,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["validated",{"_index":2245,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["validatetokenrequest",{"_index":714,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["validatetokenrequest(body",{"_index":735,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["validating",{"_index":952,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["validation",{"_index":1675,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/RegistrarModule.html":{}}}],["validationschema",{"_index":418,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":322,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"entities/IssuanceConfig.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["value",{"_index":309,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"controllers/SessionController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["value.credentialconfigurationid",{"_index":3109,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["value.foreach((v",{"_index":2647,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["value.map((v",{"_index":2759,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["value.sessionid",{"_index":3108,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["value.status",{"_index":3112,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["value.tenantid",{"_index":1177,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.toisostring",{"_index":2773,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["value.tostring",{"_index":2652,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["valueonly",{"_index":1762,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["values",{"_index":98,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionService.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/typealiases.html":{}}}],["values.join",{"_index":2776,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["values.session",{"_index":2399,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["values.uri",{"_index":2494,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["values.webhook",{"_index":2400,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["varchar",{"_index":3138,"title":{},"body":{"entities/StatusMapping.html":{}}}],["variable",{"_index":3002,"title":{},"body":{"injectables/SessionService.html":{}}}],["variables",{"_index":2671,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["various",{"_index":335,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["vars",{"_index":2387,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["vault",{"_index":2074,"title":{},"body":{"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{}}}],["vault').default('file",{"_index":2082,"title":{},"body":{"modules/KeyModule.html":{}}}],["vault_key_id",{"_index":2088,"title":{},"body":{"modules/KeyModule.html":{}}}],["vault_token",{"_index":2086,"title":{},"body":{"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{}}}],["vault_url",{"_index":2084,"title":{},"body":{"modules/KeyModule.html":{}}}],["vaultkeyservice",{"_index":2073,"title":{"injectables/VaultKeyService.html":{}},"body":{"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{}}}],["vaulturl",{"_index":3166,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["vc",{"_index":1161,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"dependencies.html":{},"index.html":{}}}],["vc.claims",{"_index":1187,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["vc.disclosureframe",{"_index":1189,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["vc.schema",{"_index":1212,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["vc.vct",{"_index":1209,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["vc.vct.vct",{"_index":1210,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["vcs",{"_index":2518,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vct",{"_index":1100,"title":{"classes/VCT.html":{}},"body":{"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["vct(@param('id",{"_index":1114,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["vct(id",{"_index":1106,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["vendor",{"_index":3469,"title":{},"body":{"index.html":{}}}],["verbal",{"_index":3652,"title":{},"body":{"license.html":{}}}],["verifiable",{"_index":1109,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{}}}],["verification",{"_index":1677,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["verificationresult",{"_index":2787,"title":{},"body":{"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["verified",{"_index":1390,"title":{},"body":{"injectables/CryptoService.html":{},"entities/Session.html":{}}}],["verifiedproof",{"_index":2242,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["verifiedproof.signer.publicjwk",{"_index":2248,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["verifier",{"_index":1232,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"miscellaneous/typealiases.html":{}}}],["verifier/oid4vp/dto/presentation",{"_index":1925,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{}}}],["verifier/oid4vp/oid4vp.module",{"_index":1980,"title":{},"body":{"modules/IssuerModule.html":{}}}],["verifier/oid4vp/oid4vp.service",{"_index":745,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["verifier/presentations/dto/vp",{"_index":50,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["verifier/presentations/presentations.module",{"_index":2668,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["verifier/presentations/presentations.service",{"_index":53,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["verifier/verifier.module",{"_index":391,"title":{},"body":{"modules/AppModule.html":{}}}],["verifier_attestations",{"_index":2379,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["verifiermodule",{"_index":376,"title":{"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["verify",{"_index":767,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{}}}],["verify(data",{"_index":2584,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verify(res.vp_token[att",{"_index":2596,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verifyauthorizationcodeaccesstokenrequest",{"_index":796,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["verifyjwt",{"_index":1253,"title":{},"body":{"injectables/CryptoService.html":{}}}],["verifyjwt(compact",{"_index":1276,"title":{},"body":{"injectables/CryptoService.html":{}}}],["verifytoken",{"_index":2008,"title":{},"body":{"injectables/JwtService.html":{}}}],["verifytoken(token",{"_index":1676,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["version",{"_index":3314,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["versions",{"_index":3547,"title":{},"body":{"index.html":{}}}],["via",{"_index":675,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{},"index.html":{}}}],["video/'].some((type",{"_index":1791,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["view",{"_index":951,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["vitest",{"_index":3341,"title":{},"body":{"changelog.html":{}}}],["void",{"_index":1060,"title":{},"body":{"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["vp",{"_index":617,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"changelog.html":{}}}],["vp_formats",{"_index":2361,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["vp_nonce",{"_index":2348,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["vp_token",{"_index":613,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["vprequest",{"_index":2551,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequest.tenantid",{"_index":2571,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequestrepository",{"_index":2529,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vps",{"_index":2517,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["wallet",{"_index":817,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"index.html":{}}}],["wallets",{"_index":3451,"title":{},"body":{"index.html":{}}}],["want",{"_index":928,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["warn",{"_index":428,"title":{},"body":{"modules/AppModule.html":{}}}],["warranties",{"_index":3774,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":3769,"title":{},"body":{"license.html":{}}}],["way",{"_index":1043,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["we'll",{"_index":1943,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["web",{"_index":1473,"title":{},"body":{"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{}}}],["webhook",{"_index":329,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"entities/Session.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{}}}],["webhookauthconfig",{"_index":330,"title":{"classes/WebHookAuthConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["webhookconfig",{"_index":337,"title":{"classes/WebhookConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["webhookresponse",{"_index":2436,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhookresponse.data",{"_index":2439,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhookresponse.status",{"_index":2444,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhooks",{"_index":307,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/typealiases.html":{}}}],["webhooksent",{"_index":2448,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhookurl",{"_index":2430,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webook",{"_index":2423,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["welcome",{"_index":3553,"title":{},"body":{"index.html":{}}}],["well",{"_index":386,"title":{},"body":{"modules/AppModule.html":{},"injectables/CryptoService.html":{},"controllers/WellKnownController.html":{}}}],["wellknowncontroller",{"_index":381,"title":{"controllers/WellKnownController.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{}}}],["wherever",{"_index":3733,"title":{},"body":{"license.html":{}}}],["whether",{"_index":2119,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"license.html":{}}}],["whole",{"_index":3638,"title":{},"body":{"license.html":{}}}],["within",{"_index":3669,"title":{},"body":{"license.html":{}}}],["without",{"_index":1683,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"license.html":{}}}],["won't",{"_index":1000,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["work",{"_index":3622,"title":{},"body":{"license.html":{}}}],["worker",{"_index":3355,"title":{},"body":{"changelog.html":{}}}],["works",{"_index":3631,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":3672,"title":{},"body":{"license.html":{}}}],["write",{"_index":272,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["writefilesync",{"_index":56,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["writefilesync(file",{"_index":3090,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["writefilesync(filepath",{"_index":292,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["writefilesync(join(folder",{"_index":1374,"title":{},"body":{"injectables/CryptoService.html":{}}}],["writefilesync(join(this.folder",{"_index":3201,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["writefilesync(sanext",{"_index":1358,"title":{},"body":{"injectables/CryptoService.html":{}}}],["writing",{"_index":274,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["written",{"_index":3653,"title":{},"body":{"license.html":{}}}],["x",{"_index":1480,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/VaultKeyService.html":{},"index.html":{}}}],["x509",{"_index":1346,"title":{},"body":{"injectables/CryptoService.html":{}}}],["x509_san_dns",{"_index":2353,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509_san_dns:${host",{"_index":2403,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509certificate",{"_index":1283,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/ResolverService.html":{}}}],["x509certificate(buffer.from(cert",{"_index":2726,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x509certificate(cert",{"_index":1375,"title":{},"body":{"injectables/CryptoService.html":{}}}],["x5c",{"_index":1206,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["y",{"_index":1481,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["yes",{"_index":728,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/SessionLoggerService.html":{}}}],["you're",{"_index":1045,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["your_api_key_here",{"_index":325,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["yyyy",{"_index":449,"title":{},"body":{"modules/AppModule.html":{}}}],["zeros",{"_index":3253,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["zoom",{"_index":377,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AccessCertificateResponse.html":{"url":"interfaces/AccessCertificateResponse.html","title":"interface - AccessCertificateResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccessCertificateResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Repsonse of access certificate request.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            crt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            revoked\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        crt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        crt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The public key in PEM format.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier of the access certificate.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        revoked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        revoked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates if the access certificate is revoked.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { OAuth2Client } from '@badgateway/oauth2-client';\nimport { client } from './generated/client.gen';\nimport {\n    accessCertificateControllerFindOne,\n    accessCertificateControllerRegister,\n    registrationCertificateControllerAll,\n    registrationCertificateControllerRegister,\n    relyingPartyControllerFindAll,\n    relyingPartyControllerRegister,\n} from './generated';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { RegistrationCertificateRequest } from '../verifier/presentations/dto/vp-request.dto';\nimport { PresentationsService } from '../verifier/presentations/presentations.service';\nimport { existsSync, readFileSync, writeFileSync } from 'node:fs';\nimport { RegistrarConfig } from './registrar-config';\nimport { join } from 'node:path';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { TENANT_EVENTS } from '../auth/tenant-events';\n\n/**\n * Repsonse of access certificate request.\n */\ninterface AccessCertificateResponse {\n    /**\n     * Unique identifier of the access certificate.\n     */\n    id: string;\n    /**\n     * The public key in PEM format.\n     */\n    crt: string;\n    /**\n     * Indicates if the access certificate is revoked.\n     */\n    revoked?: boolean;\n}\n\n/**\n * RegistrarService is responsible for managing the interaction with the registrar,\n * including adding relying parties, access certificates, and registration certificates.\n */\n@Injectable()\nexport class RegistrarService implements OnApplicationBootstrap, OnModuleInit {\n    /**\n     * OAuth2 client for interacting with the OIDC provider.\n     */\n    private oauth2Client: OAuth2Client;\n    /**\n     * Client for interacting with the registrar API.\n     */\n    private client: typeof client;\n    /**\n     * Access token for authenticating requests to the registrar.\n     */\n    private accessToken: string;\n\n    /**\n     * Constructor for the RegistrarService.\n     * @param configService - Instance of ConfigService for accessing configuration values.\n     * @param cryptoService - Instance of CryptoService for cryptographic operations.\n     * @param presentationsService - Instance of PresentationsService for handling presentations.\n     */\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private presentationsService: PresentationsService,\n    ) {}\n\n    /**\n     * Initializes the OAuth2 client and registrar client with the necessary configurations.\n     */\n    onModuleInit() {\n        //when not set, we will not use the registrar\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const oidcIssuerUrl =\n            this.configService.getOrThrow('OIDC_ISSUER_URL');\n        const clientId =\n            this.configService.getOrThrow('OIDC_CLIENT_ID');\n        const clientSecret =\n            this.configService.getOrThrow('OIDC_CLIENT_SECRET');\n\n        this.oauth2Client = new OAuth2Client({\n            server: `${oidcIssuerUrl}/protocol/openid-connect/token`,\n            clientId,\n            clientSecret,\n            discoveryEndpoint: `${oidcIssuerUrl}/.well-known/openid-configuration`,\n        });\n\n        this.client = client;\n        this.client.setConfig({\n            baseUrl: this.configService.getOrThrow('REGISTRAR_URL'),\n            auth: () => this.accessToken,\n        });\n    }\n\n    /**\n     * Checks if the registrar service is enabled based on the configuration.\n     * @returns True if the registrar service is enabled, false otherwise.\n     */\n    isEnabled() {\n        return !!this.configService.get('REGISTRAR_URL');\n    }\n\n    /**\n     * This function is called when the application starts.\n     * It will refresh the access token for the registrar.\n     */\n    async onApplicationBootstrap() {\n        if (!this.configService.get('REGISTRAR_URL')) {\n            return;\n        }\n        await this.refreshAccessToken();\n    }\n\n    /**\n     * This function is called when a tenant is initialized.\n     * @param tenantId\n     */\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    async onTenantInit(tenantId: string) {\n        if (!this.isEnabled()) {\n            return;\n        }\n        const config = this.loadConfig(tenantId);\n        if (!config.id) {\n            config.id = await this.addRp(tenantId);\n        }\n        await this.getAccessCertificateId(config, tenantId);\n    }\n\n    /**\n     * Refreshes the access token for the registrar using client credentials.\n     * This method is called periodically to ensure the access token is valid.\n     */\n    async refreshAccessToken() {\n        await this.oauth2Client.clientCredentials().then((token) => {\n            this.accessToken = token.accessToken;\n            const date = new Date();\n            const expirationDate = new Date(token.expiresAt as number);\n            setTimeout(\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                () => this.refreshAccessToken(),\n                expirationDate.getTime() - date.getTime() - 1000,\n            );\n        });\n    }\n\n    /**\n     * Adds a new relying party to the registrar.\n     * This is only needed once, when the relying party is created.\n     */\n    addRp(tenantId: string): Promise {\n        const name = this.configService.getOrThrow('RP_NAME');\n        return relyingPartyControllerRegister({\n            client: this.client,\n            body: {\n                name,\n            },\n        }).then(async (response) => {\n            const config = this.loadConfig(tenantId);\n            if (response.error) {\n                config.id = await this.storeExistingRp(name);\n            } else {\n                config.id = response.data!['id'];\n            }\n            this.saveConfig(config, tenantId);\n            return response.data!['id'];\n        });\n    }\n\n    /**\n     * Stores the existing relying party ID based on the name.\n     * This is used when the relying party already exists in the registrar.\n     * @param name - The name of the relying party.\n     * @returns The ID of the existing relying party.\n     */\n    private storeExistingRp(name: string) {\n        return relyingPartyControllerFindAll({\n            client: this.client,\n            query: {\n                name,\n            },\n        }).then((response) => {\n            return response.data!.find((item) => item.name === name)?.id;\n        });\n    }\n\n    /**\n     * Get the access certificate ID from the registrar.\n     * If there is no access certificate ID in the config, it will add a new one.\n     * If there is one, it will check if it is still valid.\n     * If it is revoked, it will add a new one.\n     * @param config\n     */\n    async getAccessCertificateId(config: RegistrarConfig, tenantId: string) {\n        // if there is no access certificate ID in the config, we need to add it\n        if (!config.accessCertificateId) {\n            await this.addAccessCertificate(config, tenantId);\n        }\n        // if there is one, check if it is still valid\n        await accessCertificateControllerFindOne({\n            client: this.client,\n            path: { rp: config.id, id: config.accessCertificateId! },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error finding access certificate:', res.error);\n            }\n            const data = res.data as AccessCertificateResponse;\n            if (data.revoked) {\n                console.warn('Access certificate is revoked, adding a new one');\n                return this.addAccessCertificate(config, tenantId);\n            }\n        });\n    }\n\n    /**\n     * Add a new access certificate to the registrar.\n     * This is only needed once, when the access certificate is created.\n     * If the access certificate already exists, it will be returned.\n     * @returns\n     */\n    private async addAccessCertificate(\n        config: RegistrarConfig,\n        tenantId: string,\n    ): Promise {\n        const host = this.configService\n            .getOrThrow('PUBLIC_URL')\n            .replace('https://', '');\n        return accessCertificateControllerRegister({\n            client: this.client,\n            body: {\n                publicKey: await this.cryptoService.keyService.getPublicKey(\n                    'pem',\n                    tenantId,\n                ),\n                dns: [host],\n            },\n            path: {\n                rp: config.id,\n            },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error adding access certificate:', res.error);\n                throw new Error('Error adding access certificate');\n            }\n            //store the cert\n            this.cryptoService.storeAccessCertificate(\n                res.data!['crt'],\n                tenantId,\n            );\n            config.accessCertificateId = res.data!['id'];\n            this.saveConfig(config, tenantId);\n            return res.data!['id'];\n        });\n    }\n\n    /**\n     * Add a new registration certificate to the registrar.\n     * This is only needed once, when the registration certificate is created.\n     * If the registration certificate already exists, it will be returned.\n     * @returns\n     */\n    async addRegistrationCertificate(\n        req: RegistrationCertificateRequest,\n        //TODO: check if the dcql_query is covered by the registration certificate. If not, we need to throw an error since we do not know the new purpose for it.\n        dcql_query: any,\n        requestId: string,\n        tenantId: string,\n    ) {\n        const rp = this.loadConfig(tenantId).id;\n\n        //TODO: need to check if the access certificate is bound to the access certificate with the subject. Also that the requested fields are matching.\n\n        const certs =\n            (await registrationCertificateControllerAll({\n                client: this.client,\n                path: {\n                    rp,\n                },\n            }).then((res) =>\n                res.data?.filter(\n                    (cert) =>\n                        cert.revoked == null && cert.id === (req.id as string),\n                ),\n            )) || [];\n\n        if (certs?.length > 0) {\n            return certs[0].jwt;\n        }\n\n        return registrationCertificateControllerRegister({\n            client: this.client,\n            path: {\n                rp,\n            },\n            body: req.body,\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\n                    'Error adding registration certificate:',\n                    res.error,\n                );\n                throw new Error('Error adding registration certificate');\n            }\n\n            //TODO: write the ID to the config so its easier to use it. Easier than writing the comparison algorithm (any maybe someone wants to use a different one)\n            await this.presentationsService.storeRCID(\n                res.data!['id'],\n                requestId,\n                tenantId,\n            );\n            return res.data!['jwt'];\n        });\n    }\n\n    /**\n     * Load the registrar configuration from the config file.\n     * @returns\n     */\n    private loadConfig(tenantId: string): RegistrarConfig {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n\n        if (!existsSync(filePath)) {\n            // If the config file does not exist, create an empty config\n            const initialConfig: RegistrarConfig = {};\n            writeFileSync(filePath, JSON.stringify(initialConfig, null, 2));\n            return initialConfig;\n        }\n        const config = JSON.parse(\n            readFileSync(filePath, 'utf-8'),\n        ) as RegistrarConfig;\n        return config;\n    }\n\n    /**\n     * Save the registrar configuration to the config file.\n     * @param config\n     */\n    private saveConfig(config: RegistrarConfig, tenantId: string) {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n        writeFileSync(filePath, JSON.stringify(config, null, 2));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApiKeyConfig.html":{"url":"classes/ApiKeyConfig.html","title":"class - ApiKeyConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiKeyConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for API key authentication in webhooks.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                headerName\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        headerName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:13\n                        \n                    \n\n            \n                \n                    The name of the header where the API key will be sent.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:19\n                        \n                    \n\n            \n                \n                    The value of the API key to be sent in the header.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app/app.controller.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiExcludeController } from '@nestjs/swagger';\n\n@ApiExcludeController()\n@Controller()\nexport class AppController {\n    @Get()\n    getHello(): string {\n        return 'EUDIPLO is up and running, more information at https://cre8.github.io/eudiplo/latest/';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            WellKnownController\n                        \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CryptoModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            IssuerModule\n                        \n                        \n                            KeyModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            VerifierModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as Joi from 'joi';\nimport { CryptoModule } from './crypto/crypto.module';\nimport { WellKnownController } from './well-known/well-known.controller';\nimport { ISSUER_VALIDATION_SCHEMA, IssuerModule } from './issuer/issuer.module';\nimport { VerifierModule } from './verifier/verifier.module';\nimport {\n    REGISTRAR_VALIDATION_SCHEMA,\n    RegistrarModule,\n} from './registrar/registrar.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join, isAbsolute } from 'path';\nimport { KEY_VALIDATION_SCHEMA, KeyModule } from './crypto/key/key.module';\nimport { CRYPTO_VALIDATION_SCHEMA } from './crypto/key/crypto/crypto.module';\nimport { AppController } from './app/app.controller';\nimport {\n    SESSION_VALIDATION_SCHEMA,\n    SessionModule,\n} from './session/session.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { DatabaseModule } from './database/database.module';\nimport { HealthModule } from './health/health.module';\nimport { AUTH_VALIDATION_SCHEMA, AuthModule } from './auth/auth.module';\nimport { EventEmitterModule } from '@nestjs/event-emitter/dist/event-emitter.module';\nimport { LoggerModule } from 'nestjs-pino';\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            validationSchema: Joi.object({\n                FOLDER: Joi.string().default('./tmp'),\n                RP_NAME: Joi.string().default('EUDIPLO'),\n                LOG_LEVEL: Joi.string()\n                    .valid('trace', 'debug', 'info', 'warn', 'error', 'fatal')\n                    .default(\n                        process.env.NODE_ENV === 'production'\n                            ? 'warn'\n                            : 'debug',\n                    ),\n                ...AUTH_VALIDATION_SCHEMA,\n                ...REGISTRAR_VALIDATION_SCHEMA,\n                ...KEY_VALIDATION_SCHEMA,\n                ...CRYPTO_VALIDATION_SCHEMA,\n                ...ISSUER_VALIDATION_SCHEMA,\n                ...SESSION_VALIDATION_SCHEMA,\n            }),\n            isGlobal: true,\n            expandVariables: true,\n        }),\n        LoggerModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => ({\n                pinoHttp: {\n                    level: configService.get('LOG_LEVEL', 'info'),\n                    transport:\n                        process.env.NODE_ENV === 'production'\n                            ? undefined\n                            : {\n                                  target: 'pino-pretty',\n                                  options: {\n                                      colorize: true,\n                                      singleLine: false,\n                                      translateTime: 'yyyy-mm-dd HH:MM:ss',\n                                      ignore: 'pid,hostname',\n                                  },\n                              },\n                    customProps: (req: any) => ({\n                        sessionId:\n                            req.headers['x-session-id'] ||\n                            req.params?.session ||\n                            req.body?.session_id,\n                        tenantId: req.params?.tenantId,\n                        flow: req.url?.includes('/vci')\n                            ? 'OID4VCI'\n                            : req.url?.includes('/oid4vp')\n                              ? 'OID4VP'\n                              : undefined,\n                    }),\n                    serializers: {\n                        req: (req: any) => ({\n                            method: req.method,\n                            url: req.url,\n                            headers: {\n                                'user-agent': req.headers['user-agent'],\n                                'content-type': req.headers['content-type'],\n                            },\n                            sessionId:\n                                req.headers['x-session-id'] ||\n                                req.params?.session,\n                            tenantId: req.params?.tenantId,\n                        }),\n                        res: (res: any) => ({\n                            statusCode: res.statusCode,\n                        }),\n                    },\n                },\n            }),\n        }),\n        KeyModule.forRoot(),\n        CryptoModule,\n        IssuerModule,\n        VerifierModule,\n        RegistrarModule,\n        ScheduleModule.forRoot(),\n        ServeStaticModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const folder = configService.getOrThrow('FOLDER');\n                const rootPath = isAbsolute(folder)\n                    ? join(folder, 'public')\n                    : join(__dirname, '../', folder, 'public');\n                return [\n                    {\n                        rootPath,\n                    },\n                ];\n            },\n        }),\n        EventEmitterModule.forRoot(),\n        DatabaseModule,\n        SessionModule,\n        DatabaseModule,\n        HealthModule,\n        AuthModule,\n    ],\n    controllers: [WellKnownController, AppController],\n    providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Auth.html":{"url":"interfaces/Auth.html","title":"interface - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/auth.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            in\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            scheme\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        in\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        in:     \"header\" | \"query\" | \"cookie\"\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 'header'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :     \"header\" | \"query\" | \"cookie\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Which part of the request do we use to send the auth?\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 'Authorization'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Header or query parameter name.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scheme\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scheme:     \"basic\" | \"bearer\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"basic\" | \"bearer\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"apiKey\" | \"http\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"apiKey\" | \"http\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type AuthToken = string | undefined;\n\nexport interface Auth {\n    /**\n     * Which part of the request do we use to send the auth?\n     *\n     * @default 'header'\n     */\n    in?: 'header' | 'query' | 'cookie';\n    /**\n     * Header or query parameter name.\n     *\n     * @default 'Authorization'\n     */\n    name?: string;\n    scheme?: 'basic' | 'bearer';\n    type: 'apiKey' | 'http';\n}\n\nexport const getAuthToken = async (\n    auth: Auth,\n    callback: ((auth: Auth) => Promise | AuthToken) | AuthToken,\n): Promise => {\n    const token =\n        typeof callback === 'function' ? await callback(auth) : callback;\n\n    if (!token) {\n        return;\n    }\n\n    if (auth.scheme === 'bearer') {\n        return `Bearer ${token}`;\n    }\n\n    if (auth.scheme === 'basic') {\n        return `Basic ${btoa(token)}`;\n    }\n\n    return token;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOAuth2Token\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getOAuth2Token\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOAuth2Token(body: any, headers: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('oauth2/token')@ApiBody({type: ClientCredentialsDto, examples: undefined})@ApiResponse({status: 200, description: 'OAuth2 token response', type: TokenResponse, example: undefined})@ApiResponse({status: 401, description: 'Invalid client credentials'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:60\n                        \n                    \n\n\n            \n                \n                        OAuth2 Token endpoint - supports client credentials flow only\nAccepts client credentials either in Authorization header (Basic auth) or request body\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Post,\n    Body,\n    UnauthorizedException,\n    Headers,\n} from '@nestjs/common';\nimport { ApiTags, ApiResponse, ApiBody } from '@nestjs/swagger';\nimport { JwtService } from './jwt.service';\nimport { ClientService } from './client.service';\nimport { Public } from './public.decorator';\nimport { ClientCredentialsDto } from './dto/client-credentials.dto';\nimport { TokenPayload } from './token.decorator';\nimport { TokenResponse } from './dto/token-response.dto';\n\n@ApiTags('Authentication', 'Admin')\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        private jwtService: JwtService,\n        private clientService: ClientService,\n    ) {}\n\n    /**\n     * OAuth2 Token endpoint - supports client credentials flow only\n     * Accepts client credentials either in Authorization header (Basic auth) or request body\n     * @param body\n     * @param headers\n     * @returns\n     */\n    @Public()\n    @Post('oauth2/token')\n    @ApiBody({\n        type: ClientCredentialsDto,\n        examples: {\n            client_credentials: {\n                summary: 'Client Credentials Flow',\n                value: {\n                    grant_type: 'client_credentials',\n                    client_id: 'root',\n                    client_secret: 'root',\n                },\n            },\n        },\n    })\n    @ApiResponse({\n        status: 200,\n        description: 'OAuth2 token response',\n        type: TokenResponse,\n        example: {\n            access_token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n            token_type: 'Bearer',\n            expires_in: 86400,\n        },\n    })\n    @ApiResponse({\n        status: 401,\n        description: 'Invalid client credentials',\n    })\n    async getOAuth2Token(\n        @Body() body: any,\n        @Headers() headers: any,\n    ): Promise {\n        if (this.jwtService.isUsingExternalOIDC()) {\n            throw new UnauthorizedException(\n                'OAuth2 token endpoint is not available when using external OIDC provider. Use your external OIDC provider for authentication.',\n            );\n        }\n\n        // Only support client credentials flow\n        if (body.grant_type !== 'client_credentials') {\n            throw new UnauthorizedException(\n                'Only client_credentials grant type is supported',\n            );\n        }\n\n        let clientId: string;\n        let clientSecret: string;\n\n        // Try to extract credentials from Authorization header (Basic auth)\n        const authHeader = headers.authorization;\n        if (authHeader && authHeader.startsWith('Basic ')) {\n            try {\n                const base64Credentials = authHeader.substring(6);\n                const credentials = Buffer.from(\n                    base64Credentials,\n                    'base64',\n                ).toString('ascii');\n                const [id, secret] = credentials.split(':');\n                clientId = id;\n                clientSecret = secret;\n            } catch {\n                throw new UnauthorizedException(\n                    'Invalid Authorization header format',\n                );\n            }\n        } else {\n            // Fall back to request body\n            clientId = body.client_id;\n            clientSecret = body.client_secret;\n        }\n\n        if (!clientId || !clientSecret) {\n            throw new UnauthorizedException(\n                'Client credentials must be provided either in Authorization header (Basic auth) or request body',\n            );\n        }\n\n        const client = this.clientService.validateClient(\n            clientId,\n            clientSecret,\n        );\n        if (!client) {\n            throw new UnauthorizedException('Invalid client credentials');\n        }\n\n        const payload: TokenPayload = {\n            sub: client.id,\n        };\n\n        const token = await this.jwtService.generateToken(payload, {\n            expiresIn: '24h',\n            audience: 'eudiplo-service',\n        });\n\n        return {\n            access_token: token,\n            token_type: 'Bearer',\n            expires_in: 86400, // 24 hours in seconds\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\n\n\nJwtService \n\nJwtService \n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nClientService\n\nClientService\n\nAuthModule -->\n\nClientService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClientService\n                        \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './jwt.strategy';\nimport { JwtAuthGuard } from './auth.guard';\nimport { JwtService } from './jwt.service';\nimport { AuthController } from './auth.controller';\nimport { ClientService } from './client.service';\nimport * as Joi from 'joi';\nimport { ConfigModule } from '@nestjs/config';\n\nexport const AUTH_VALIDATION_SCHEMA = {\n    OIDC: Joi.string().optional(),\n    KEYCLOAK_INTERNAL_ISSUER_URL: Joi.when('OIDC', {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    KEYCLOAK_CLIENT_ID: Joi.when('OIDC', {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    JWT_SECRET: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n    JWT_ISSUER: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().optional().default('eudiplo-service'),\n    }),\n    JWT_EXPIRES_IN: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default('24h'),\n    }),\n    AUTH_CLIENT_SECRET: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n    AUTH_CLIENT_ID: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n};\n\n@Module({\n    imports: [PassportModule, ConfigModule],\n    providers: [JwtStrategy, JwtAuthGuard, JwtService, ClientService],\n    controllers: [AuthController],\n    exports: [PassportModule, JwtStrategy, JwtAuthGuard, JwtService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthResponse.html":{"url":"interfaces/AuthResponse.html","title":"interface - AuthResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/auth-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthResponse DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            state\n                                        \n                                \n                                \n                                        \n                                            vp_token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The state parameter to maintain state between the request and callback.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vp_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        vp_token:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The VP token containing the presentation data.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AuthResponse {\n    /**\n     * The VP token containing the presentation data.\n     */\n    vp_token: {\n        /**\n         * Key-value pairs representing the VP token data.\n         */\n        [key: string]: string;\n    };\n    /**\n     * The state parameter to maintain state between the request and callback.\n     */\n    state: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizationResponse.html":{"url":"classes/AuthorizationResponse.html","title":"class - AuthorizationResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizationResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/authorization-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the authorization response containing the VP token.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                response\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/authorization-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The response string containing the authorization details.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\n/**\n * DTO for the authorization response containing the VP token.\n */\nexport class AuthorizationResponse {\n    /**\n     * The response string containing the authorization details.\n     */\n    @IsString()\n    response: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthorizeController.html":{"url":"controllers/AuthorizeController.html","title":"controller - AuthorizeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthorizeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/authorize\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI authorization endpoints.\nThis controller handles the authorization requests, token requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authorizationChallengeEndpoint\n                            \n                            \n                                    \n                                    Async\n                                authorize\n                            \n                            \n                                    \n                                    \n                                    Async\n                                par\n                            \n                            \n                                    \n                                    Async\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response, body: AuthorizeQueries, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('challenge')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:98\n                        \n                    \n\n\n            \n                \n                        Endpoint for the authorization challenge.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        authorize\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorize(queries: AuthorizeQueries, res: Response, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:36\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Authorization Request.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        par\n                        \n                    \n                \n            \n            \n                \n                        \n                    par(body: AuthorizeQueries, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({description: 'Pushed Authorization Request', type: AuthorizeQueries})@Post('par')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Pushed Authorization Request (PAR).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        token\n                        \n                    \n                \n            \n            \n                \n                        \n                    token(body: any, req: Request, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('token')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:82\n                        \n                    \n\n\n            \n                \n                        Endpoint to validate the token request.\nThis endpoint is used to exchange the authorization code for an access token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport {\n    Body,\n    Controller,\n    Get,\n    Param,\n    Post,\n    Query,\n    Req,\n    Res,\n} from '@nestjs/common';\nimport type { Request, Response } from 'express';\nimport { AuthorizeService } from './authorize.service';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { SessionService } from '../../session/session.service';\nimport { ParResponseDto } from './dto/par-response.dto';\nimport { ApiBody } from '@nestjs/swagger';\n\n/**\n * Controller for the OpenID4VCI authorization endpoints.\n * This controller handles the authorization requests, token requests.\n */\n@Controller(':tenantId/authorize')\nexport class AuthorizeController {\n    constructor(\n        private readonly authorizeService: AuthorizeService,\n        private sessionService: SessionService,\n    ) {}\n\n    /**\n     * Endpoint to handle the Authorization Request.\n     * @param queries\n     * @param res\n     */\n    @Get()\n    async authorize(\n        @Query() queries: AuthorizeQueries,\n        @Res() res: Response,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.authorizeService.sendAuthorizationResponse(\n            queries,\n            res,\n            tenantId,\n        );\n    }\n\n    /**\n     * Endpoint to handle the Pushed Authorization Request (PAR).\n     * @param body\n     * @returns\n     */\n    @ApiBody({\n        description: 'Pushed Authorization Request',\n        type: AuthorizeQueries,\n    })\n    @Post('par')\n    async par(\n        @Body() body: AuthorizeQueries,\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        const request_uri = `urn:${randomUUID()}`;\n        // save both so we can retrieve the session also via the request_uri in the authorize step.\n        await this.sessionService.add(body.issuer_state!, tenantId, {\n            request_uri,\n            auth_queries: body,\n        });\n        return {\n            expires_in: 500,\n            request_uri,\n        };\n    }\n\n    /**\n     * Endpoint to validate the token request.\n     * This endpoint is used to exchange the authorization code for an access token.\n     * @param body\n     * @param req\n     * @returns\n     */\n    @Post('token')\n    async token(\n        @Body() body: any,\n        @Req() req: Request,\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        //TODO: define body\n        return this.authorizeService.validateTokenRequest(body, req, tenantId);\n    }\n\n    /**\n     * Endpoint for the authorization challenge.\n     * @param res\n     * @param body\n     * @returns\n     */\n    @Post('challenge')\n    authorizationChallengeEndpoint(\n        @Res() res: Response,\n        @Body() body: AuthorizeQueries,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.authorizeService.authorizationChallengeEndpoint(\n            res,\n            body,\n            tenantId,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizeQueries.html":{"url":"classes/AuthorizeQueries.html","title":"class - AuthorizeQueries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizeQueries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/authorize-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                auth_session\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                client_id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge_method\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                dpop_jkt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                issuer_state\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                redirect_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resource\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        auth_session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge_method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        dpop_jkt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        issuer_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        redirect_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from 'class-validator';\n\nexport class AuthorizeQueries {\n    @IsOptional()\n    @IsString()\n    issuer_state?: string;\n    @IsOptional()\n    @IsString()\n    response_type?: string;\n    @IsOptional()\n    @IsString()\n    client_id?: string;\n    @IsOptional()\n    @IsString()\n    redirect_uri?: string;\n    @IsOptional()\n    @IsString()\n    resource?: string;\n    @IsOptional()\n    @IsString()\n    scope?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge_method?: string;\n    @IsOptional()\n    @IsString()\n    dpop_jkt?: string;\n    @IsOptional()\n    @IsString()\n    request_uri?: string;\n    @IsOptional()\n    @IsString()\n    auth_session?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthorizeService.html":{"url":"injectables/AuthorizeService.html","title":"injectable - AuthorizeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthorizeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authorizationChallengeEndpoint\n                            \n                            \n                                authzMetadata\n                            \n                            \n                                getAuthorizationServer\n                            \n                            \n                                    Async\n                                parseChallengeRequest\n                            \n                            \n                                    Private\n                                    Async\n                                sendAuthorizationCode\n                            \n                            \n                                    Async\n                                sendAuthorizationResponse\n                            \n                            \n                                    Async\n                                setAuthCode\n                            \n                            \n                                    Async\n                                validateTokenRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, oid4vpService: Oid4vpService, sessionService: SessionService, credentialsService: CredentialsService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/authorize/authorize.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oid4vpService\n                                                  \n                                                        \n                                                                        Oid4vpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialsService\n                                                  \n                                                        \n                                                                        CredentialsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response>, body: AuthorizeQueries, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:181\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \nauthzMetadata(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         AuthorizationServerMetadata\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthorizationServer\n                        \n                    \n                \n            \n            \n                \ngetAuthorizationServer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServer\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        parseChallengeRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseChallengeRequest(body: AuthorizeQueries, tenantId: string, webhook?: WebhookConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:163\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                webhook\n                                            \n                                                            WebhookConfig\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        sendAuthorizationCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationCode(res: Response, issuer_state: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:222\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendAuthorizationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationResponse(queries: AuthorizeQueries, res: Response>, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setAuthCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAuthCode(issuer_state: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:236\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateTokenRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateTokenRequest(body: any, req: Request, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n} from '@openid4vc/oauth2';\nimport type { Request, Response } from 'express';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { getHeadersFromRequest } from '../oid4vci/util';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { Oid4vpService } from '../../verifier/oid4vp/oid4vp.service';\nimport { SessionService } from '../../session/session.service';\nimport { CredentialsService } from '../credentials/credentials.service';\nimport { WebhookConfig } from '../../utils/webhook.dto';\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private credentialsService: CredentialsService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(tenantId: string): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow('PUBLIC_URL') +\n            `/${tenantId}`;\n        return this.getAuthorizationServer(\n            tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: ['ES256'],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n        tenantId: string,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        'request_uri not found or not provided in the request',\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                'request_uri not found or not provided in the request',\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!, tenantId);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        tenantId: string,\n    ): Promise {\n        const url = `${this.configService.getOrThrow('PUBLIC_URL')}${req.url}`;\n\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const session = await this.sessionService.getBy({\n            authorization_code: body.code,\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        }\n        const authorizationServerMetadata = this.authzMetadata(tenantId);\n        //TODO: handle response\n        const { dpop } = await this.getAuthorizationServer(\n            tenantId,\n        ).verifyAuthorizationCodeAccessTokenRequest({\n            grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n            accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n            expectedCode: session.authorization_code as string,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n            dpop: {\n                required: true,\n                allowedSigningAlgs:\n                    authorizationServerMetadata.dpop_signing_alg_values_supported,\n                jwt: parsedAccessTokenRequest.dpop?.jwt,\n            },\n            authorizationServerMetadata,\n        });\n\n        const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow('PUBLIC_URL')}/${tenantId}`,\n            signer: {\n                method: 'jwk',\n                alg: 'ES256',\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            cNonce,\n            cNonceExpiresIn: 100,\n            clientId: 'wallet', // must be same as the client attestation\n            dpop,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest('pid', { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: 'insufficient_authorization',\n            auth_session,\n            presentation,\n            error_description:\n                'Presentation of credential required before issuance',\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        tenantId: string,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n            //check if session has valid presentation, we assume for now\n            await this.sendAuthorizationCode(res, body.auth_session, tenantId);\n            return;\n        }\n\n        const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        }\n        const ids = session.offer!.credential_configuration_ids;\n        const config = await this.credentialsService.getConfigById(\n            ids[0],\n            tenantId,\n        );\n        if (config.presentation_during_issuance) {\n            const webhook = config.presentation_during_issuance.webhook;\n            const response = await this.parseChallengeRequest(\n                body,\n                tenantId,\n                webhook,\n            );\n            res.status(400).send(response);\n        } else {\n            await this.sendAuthorizationCode(res, body.issuer_state!, tenantId);\n        }\n    }\n\n    private async sendAuthorizationCode(\n        res: Response,\n        issuer_state: string,\n        tenantId: string,\n    ) {\n        const authorization_code = await this.setAuthCode(\n            issuer_state,\n            tenantId,\n        );\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string, tenantId: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, tenantId, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Client.html":{"url":"interfaces/Client.html","title":"interface - Client","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Client\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { existsSync, mkdirSync, writeFileSync } from 'fs';\nimport { join } from 'path';\nimport { TENANT_EVENTS } from './tenant-events';\n\n// Client interface for service integration\nexport interface Client {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class ClientService implements OnApplicationBootstrap {\n    private clients: Client[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private eventEmitter: EventEmitter2,\n    ) {}\n\n    onApplicationBootstrap() {\n        // were are ignoring clients that are not used anymore for now. Need to implement a proper cleanup mechanism later\n        const clients = this.getClients();\n        clients.forEach((client) => {\n            this.setUpClient(client.id);\n        });\n    }\n\n    /**\n     * Get clients from configuration\n     * @returns\n     */\n    private getClients(): Client[] {\n        if (!this.clients) {\n            this.clients = this.loadClients();\n        }\n        return this.clients;\n    }\n\n    /**\n     * Load clients from configuration\n     */\n    private loadClients(): Client[] {\n        // Default clients for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow('AUTH_CLIENT_ID'),\n                secret: this.configService.getOrThrow(\n                    'AUTH_CLIENT_SECRET',\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate client credentials (OAuth2 Client Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateClient(clientId: string, clientSecret: string): Client | null {\n        const client = this.getClients().find((c) => c.id === clientId);\n\n        if (!client || client.secret !== clientSecret) {\n            return null;\n        }\n\n        return client;\n    }\n\n    /**\n     * Find client by ID\n     */\n    findClientById(clientId: string): Client | null {\n        return this.getClients().find((c) => c.id === clientId) || null;\n    }\n\n    /**\n     * Sends an event to set up a client, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    setUpClient(id: string) {\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            id,\n        );\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n\n        const displayInfo = [\n            {\n                name: 'EUDI Wallet dev',\n                locale: 'de-DE',\n                logo: {\n                    uri: '/issuer.png',\n                    url: '/issuer.png',\n                },\n            },\n        ];\n        writeFileSync(\n            join(folder, 'display.json'),\n            JSON.stringify(displayInfo, null, 2),\n        );\n\n        this.eventEmitter.emit(TENANT_EVENTS.TENANT_INIT, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Client-1.html":{"url":"interfaces/Client-1.html","title":"interface - Client-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Client\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            buildUrl\n                                        \n                                \n                                \n                                        \n                                            connect\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                        \n                                            get\n                                        \n                                \n                                \n                                        \n                                            getConfig\n                                        \n                                \n                                \n                                        \n                                            head\n                                        \n                                \n                                \n                                        \n                                            options\n                                        \n                                \n                                \n                                        \n                                            patch\n                                        \n                                \n                                \n                                        \n                                            post\n                                        \n                                \n                                \n                                        \n                                            put\n                                        \n                                \n                                \n                                        \n                                            request\n                                        \n                                \n                                \n                                        \n                                            setConfig\n                                        \n                                \n                                \n                                        \n                                            trace\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buildUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        buildUrl:         BuildUrlFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BuildUrlFn\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Returns the final request URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        connect\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        connect:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        get\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        get:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getConfig\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getConfig:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        head\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        head:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        patch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        patch:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        post\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        post:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        put\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        put:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        request\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        request:         RequestFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RequestFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        setConfig\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        setConfig:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trace\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trace:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type { Auth, AuthToken } from './auth';\nimport type {\n    BodySerializer,\n    QuerySerializer,\n    QuerySerializerOptions,\n} from './bodySerializer';\n\nexport interface Client {\n    /**\n     * Returns the final request URL.\n     */\n    buildUrl: BuildUrlFn;\n    connect: MethodFn;\n    delete: MethodFn;\n    get: MethodFn;\n    getConfig: () => Config;\n    head: MethodFn;\n    options: MethodFn;\n    patch: MethodFn;\n    post: MethodFn;\n    put: MethodFn;\n    request: RequestFn;\n    setConfig: (config: Config) => Config;\n    trace: MethodFn;\n}\n\nexport interface Config {\n    /**\n     * Auth token or a function returning auth token. The resolved value will be\n     * added to the request payload as defined by its `security` array.\n     */\n    auth?: ((auth: Auth) => Promise | AuthToken) | AuthToken;\n    /**\n     * A function for serializing request body parameter. By default,\n     * {@link JSON.stringify()} will be used.\n     */\n    bodySerializer?: BodySerializer | null;\n    /**\n     * An object containing any HTTP headers that you want to pre-populate your\n     * `Headers` object with.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/Headers/Headers#init See more}\n     */\n    headers?:\n        | RequestInit['headers']\n        | Record;\n    /**\n     * The request method.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#method See more}\n     */\n    method?:\n        | 'CONNECT'\n        | 'DELETE'\n        | 'GET'\n        | 'HEAD'\n        | 'OPTIONS'\n        | 'PATCH'\n        | 'POST'\n        | 'PUT'\n        | 'TRACE';\n    /**\n     * A function for serializing request query parameters. By default, arrays\n     * will be exploded in form style, objects will be exploded in deepObject\n     * style, and reserved characters are percent-encoded.\n     *\n     * This method will have no effect if the native `paramsSerializer()` Axios\n     * API function is used.\n     *\n     * {@link https://swagger.io/docs/specification/serialization/#query View examples}\n     */\n    querySerializer?: QuerySerializer | QuerySerializerOptions;\n    /**\n     * A function validating request data. This is useful if you want to ensure\n     * the request conforms to the desired shape, so it can be safely sent to\n     * the server.\n     */\n    requestValidator?: (data: unknown) => Promise;\n    /**\n     * A function transforming response data before it's returned. This is useful\n     * for post-processing data, e.g. converting ISO strings into Date objects.\n     */\n    responseTransformer?: (data: unknown) => Promise;\n    /**\n     * A function validating response data. This is useful if you want to ensure\n     * the response conforms to the desired shape, so it can be safely passed to\n     * the transformers and returned to the user.\n     */\n    responseValidator?: (data: unknown) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClientCredentialsDto.html":{"url":"classes/ClientCredentialsDto.html","title":"class - ClientCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClientCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/client-credentials.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                client_id\n                            \n                            \n                                    \n                                client_secret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class ClientCredentialsDto {\n    @IsString()\n    client_id: string;\n    @IsString()\n    client_secret: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClientOptions.html":{"url":"interfaces/ClientOptions.html","title":"interface - ClientOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ClientOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            baseUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            responseStyle\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            throwOnError\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        baseUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseStyle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseStyle:         ResponseStyle\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ResponseStyle\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        throwOnError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        throwOnError:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type { Auth } from '../core/auth';\nimport type { Client as CoreClient, Config as CoreConfig } from '../core/types';\nimport type { Middleware } from './utils';\n\nexport type ResponseStyle = 'data' | 'fields';\n\nexport interface Config\n    extends Omit,\n        CoreConfig {\n    /**\n     * Base URL for all requests made by this client.\n     */\n    baseUrl?: T['baseUrl'];\n    /**\n     * Fetch API implementation. You can use this option to provide a custom\n     * fetch instance.\n     *\n     * @default globalThis.fetch\n     */\n    fetch?: (request: Request) => ReturnType;\n    /**\n     * Please don't use the Fetch client for Next.js applications. The `next`\n     * options won't have any effect.\n     *\n     * Install {@link https://www.npmjs.com/package/@hey-api/client-next `@hey-api/client-next`} instead.\n     */\n    next?: never;\n    /**\n     * Return the response data parsed in a specified format. By default, `auto`\n     * will infer the appropriate method from the `Content-Type` response header.\n     * You can override this behavior with any of the {@link Body} methods.\n     * Select `stream` if you don't want to parse response data at all.\n     *\n     * @default 'auto'\n     */\n    parseAs?:\n        | 'arrayBuffer'\n        | 'auto'\n        | 'blob'\n        | 'formData'\n        | 'json'\n        | 'stream'\n        | 'text';\n    /**\n     * Should we return only data or multiple fields (data, error, response, etc.)?\n     *\n     * @default 'fields'\n     */\n    responseStyle?: ResponseStyle;\n    /**\n     * Throw an error instead of returning it in the response?\n     *\n     * @default false\n     */\n    throwOnError?: T['throwOnError'];\n}\n\nexport interface RequestOptions extends Config {\n    /**\n     * Any body that you want to add to your request.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#body}\n     */\n    body?: unknown;\n    path?: Record;\n    query?: Record;\n    /**\n     * Security mechanism(s) to use for the request.\n     */\n    security?: ReadonlyArray;\n    url: Url;\n}\n\nexport type RequestResult = ThrowOnError extends true\n    ? Promise\n                  ? TData[keyof TData]\n                  : TData\n              : {\n                    data: TData extends Record\n                        ? TData[keyof TData]\n                        : TData;\n                    request: Request;\n                    response: Response;\n                }\n      >\n    : Promise\n                          ? TData[keyof TData]\n                          : TData)\n                    | undefined\n              : (\n                    | {\n                          data: TData extends Record\n                              ? TData[keyof TData]\n                              : TData;\n                          error: undefined;\n                      }\n                    | {\n                          data: undefined;\n                          error: TError extends Record\n                              ? TError[keyof TError]\n                              : TError;\n                      }\n                ) & {\n                    request: Request;\n                    response: Response;\n                }\n      >;\n\nexport interface ClientOptions {\n    baseUrl?: string;\n    responseStyle?: ResponseStyle;\n    throwOnError?: boolean;\n}\n\ntype MethodFn = (\n    options: Omit, 'method'>,\n) => RequestResult;\n\ntype RequestFn = (\n    options: Omit, 'method'> &\n        Pick>, 'method'>,\n) => RequestResult;\n\ntype BuildUrlFn = ;\n        query?: Record;\n        url: string;\n    },\n>(\n    options: Pick & Options,\n) => string;\n\nexport type Client = CoreClient & {\n    interceptors: Middleware;\n};\n\n/**\n * The `createClientConfig()` function will be called on client initialization\n * and the returned object will become the client's initial configuration.\n *\n * You may want to initialize your client this way instead of calling\n * `setConfig()`. This is useful for example if you're using Next.js\n * to ensure your client always has the correct values.\n */\nexport type CreateClientConfig = (\n    override?: Config,\n) => Config & T>;\n\nexport interface TDataShape {\n    body?: unknown;\n    headers?: unknown;\n    path?: unknown;\n    query?: unknown;\n    url: string;\n}\n\ntype OmitKeys = Pick>;\n\nexport type Options = OmitKeys,\n    'body' | 'path' | 'query' | 'url'\n> &\n    Omit;\n\nexport type OptionsLegacyParser = TData extends { body?: any }\n    ? TData extends { headers?: any }\n        ? OmitKeys,\n              'body' | 'headers' | 'url'\n          > &\n              TData\n        : OmitKeys,\n              'body' | 'url'\n          > &\n              TData &\n              Pick, 'headers'>\n    : TData extends { headers?: any }\n      ? OmitKeys,\n            'headers' | 'url'\n        > &\n            TData &\n            Pick, 'body'>\n      : OmitKeys, 'url'> & TData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClientService.html":{"url":"injectables/ClientService.html","title":"injectable - ClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clients\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findClientById\n                            \n                            \n                                    Private\n                                getClients\n                            \n                            \n                                    Private\n                                loadClients\n                            \n                            \n                                onApplicationBootstrap\n                            \n                            \n                                setUpClient\n                            \n                            \n                                validateClient\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/auth/client.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findClientById\n                        \n                    \n                \n            \n            \n                \nfindClientById(clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Find client by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Client | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Get clients from configuration\n\n\n                        \n                            Returns :         Client[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Load clients from configuration\n\n\n                        \n                            Returns :         Client[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \nonApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setUpClient\n                        \n                    \n                \n            \n            \n                \nsetUpClient(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Sends an event to set up a client, allowing all other services to listen and react accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateClient\n                        \n                    \n                \n            \n            \n                \nvalidateClient(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Validate client credentials (OAuth2 Client Credentials flow)\nThis is the primary authentication method for service integration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Client | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clients\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Client[] | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/auth/client.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { existsSync, mkdirSync, writeFileSync } from 'fs';\nimport { join } from 'path';\nimport { TENANT_EVENTS } from './tenant-events';\n\n// Client interface for service integration\nexport interface Client {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class ClientService implements OnApplicationBootstrap {\n    private clients: Client[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private eventEmitter: EventEmitter2,\n    ) {}\n\n    onApplicationBootstrap() {\n        // were are ignoring clients that are not used anymore for now. Need to implement a proper cleanup mechanism later\n        const clients = this.getClients();\n        clients.forEach((client) => {\n            this.setUpClient(client.id);\n        });\n    }\n\n    /**\n     * Get clients from configuration\n     * @returns\n     */\n    private getClients(): Client[] {\n        if (!this.clients) {\n            this.clients = this.loadClients();\n        }\n        return this.clients;\n    }\n\n    /**\n     * Load clients from configuration\n     */\n    private loadClients(): Client[] {\n        // Default clients for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow('AUTH_CLIENT_ID'),\n                secret: this.configService.getOrThrow(\n                    'AUTH_CLIENT_SECRET',\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate client credentials (OAuth2 Client Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateClient(clientId: string, clientSecret: string): Client | null {\n        const client = this.getClients().find((c) => c.id === clientId);\n\n        if (!client || client.secret !== clientSecret) {\n            return null;\n        }\n\n        return client;\n    }\n\n    /**\n     * Find client by ID\n     */\n    findClientById(clientId: string): Client | null {\n        return this.getClients().find((c) => c.id === clientId) || null;\n    }\n\n    /**\n     * Sends an event to set up a client, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    setUpClient(id: string) {\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            id,\n        );\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n\n        const displayInfo = [\n            {\n                name: 'EUDI Wallet dev',\n                locale: 'de-DE',\n                logo: {\n                    uri: '/issuer.png',\n                    url: '/issuer.png',\n                },\n            },\n        ];\n        writeFileSync(\n            join(folder, 'display.json'),\n            JSON.stringify(displayInfo, null, 2),\n        );\n\n        this.eventEmitter.emit(TENANT_EVENTS.TENANT_INIT, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Config.html":{"url":"interfaces/Config.html","title":"interface - Config","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Omit\n                            CoreConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            baseUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fetch\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            next\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            parseAs\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            responseStyle\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            throwOnError\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        baseUrl:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Base URL for all requests made by this client.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fetch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fetch:         function\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : globalThis.fetch\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Fetch API implementation. You can use this option to provide a custom\nfetch instance.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        next\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        next:     never\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     never\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Please don't use the Fetch client for Next.js applications. The next\noptions won't have any effect.\nInstall @hey-api/client-next instead.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parseAs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        parseAs:     \"arrayBuffer\" | \"auto\" | \"blob\" | \"formData\" | \"json\" | \"stream\" | \"text\"\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 'auto'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :     \"arrayBuffer\" | \"auto\" | \"blob\" | \"formData\" | \"json\" | \"stream\" | \"text\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Return the response data parsed in a specified format. By default, auto\nwill infer the appropriate method from the Content-Type response header.\nYou can override this behavior with any of the Body methods.\nSelect stream if you don't want to parse response data at all.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseStyle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseStyle:         ResponseStyle\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 'fields'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         ResponseStyle\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Should we return only data or multiple fields (data, error, response, etc.)?\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        throwOnError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        throwOnError:     T\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : false\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Throw an error instead of returning it in the response?\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import type { Auth } from '../core/auth';\nimport type { Client as CoreClient, Config as CoreConfig } from '../core/types';\nimport type { Middleware } from './utils';\n\nexport type ResponseStyle = 'data' | 'fields';\n\nexport interface Config\n    extends Omit,\n        CoreConfig {\n    /**\n     * Base URL for all requests made by this client.\n     */\n    baseUrl?: T['baseUrl'];\n    /**\n     * Fetch API implementation. You can use this option to provide a custom\n     * fetch instance.\n     *\n     * @default globalThis.fetch\n     */\n    fetch?: (request: Request) => ReturnType;\n    /**\n     * Please don't use the Fetch client for Next.js applications. The `next`\n     * options won't have any effect.\n     *\n     * Install {@link https://www.npmjs.com/package/@hey-api/client-next `@hey-api/client-next`} instead.\n     */\n    next?: never;\n    /**\n     * Return the response data parsed in a specified format. By default, `auto`\n     * will infer the appropriate method from the `Content-Type` response header.\n     * You can override this behavior with any of the {@link Body} methods.\n     * Select `stream` if you don't want to parse response data at all.\n     *\n     * @default 'auto'\n     */\n    parseAs?:\n        | 'arrayBuffer'\n        | 'auto'\n        | 'blob'\n        | 'formData'\n        | 'json'\n        | 'stream'\n        | 'text';\n    /**\n     * Should we return only data or multiple fields (data, error, response, etc.)?\n     *\n     * @default 'fields'\n     */\n    responseStyle?: ResponseStyle;\n    /**\n     * Throw an error instead of returning it in the response?\n     *\n     * @default false\n     */\n    throwOnError?: T['throwOnError'];\n}\n\nexport interface RequestOptions extends Config {\n    /**\n     * Any body that you want to add to your request.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#body}\n     */\n    body?: unknown;\n    path?: Record;\n    query?: Record;\n    /**\n     * Security mechanism(s) to use for the request.\n     */\n    security?: ReadonlyArray;\n    url: Url;\n}\n\nexport type RequestResult = ThrowOnError extends true\n    ? Promise\n                  ? TData[keyof TData]\n                  : TData\n              : {\n                    data: TData extends Record\n                        ? TData[keyof TData]\n                        : TData;\n                    request: Request;\n                    response: Response;\n                }\n      >\n    : Promise\n                          ? TData[keyof TData]\n                          : TData)\n                    | undefined\n              : (\n                    | {\n                          data: TData extends Record\n                              ? TData[keyof TData]\n                              : TData;\n                          error: undefined;\n                      }\n                    | {\n                          data: undefined;\n                          error: TError extends Record\n                              ? TError[keyof TError]\n                              : TError;\n                      }\n                ) & {\n                    request: Request;\n                    response: Response;\n                }\n      >;\n\nexport interface ClientOptions {\n    baseUrl?: string;\n    responseStyle?: ResponseStyle;\n    throwOnError?: boolean;\n}\n\ntype MethodFn = (\n    options: Omit, 'method'>,\n) => RequestResult;\n\ntype RequestFn = (\n    options: Omit, 'method'> &\n        Pick>, 'method'>,\n) => RequestResult;\n\ntype BuildUrlFn = ;\n        query?: Record;\n        url: string;\n    },\n>(\n    options: Pick & Options,\n) => string;\n\nexport type Client = CoreClient & {\n    interceptors: Middleware;\n};\n\n/**\n * The `createClientConfig()` function will be called on client initialization\n * and the returned object will become the client's initial configuration.\n *\n * You may want to initialize your client this way instead of calling\n * `setConfig()`. This is useful for example if you're using Next.js\n * to ensure your client always has the correct values.\n */\nexport type CreateClientConfig = (\n    override?: Config,\n) => Config & T>;\n\nexport interface TDataShape {\n    body?: unknown;\n    headers?: unknown;\n    path?: unknown;\n    query?: unknown;\n    url: string;\n}\n\ntype OmitKeys = Pick>;\n\nexport type Options = OmitKeys,\n    'body' | 'path' | 'query' | 'url'\n> &\n    Omit;\n\nexport type OptionsLegacyParser = TData extends { body?: any }\n    ? TData extends { headers?: any }\n        ? OmitKeys,\n              'body' | 'headers' | 'url'\n          > &\n              TData\n        : OmitKeys,\n              'body' | 'url'\n          > &\n              TData &\n              Pick, 'headers'>\n    : TData extends { headers?: any }\n      ? OmitKeys,\n            'headers' | 'url'\n        > &\n            TData &\n            Pick, 'body'>\n      : OmitKeys, 'url'> & TData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Config-1.html":{"url":"interfaces/Config-1.html","title":"interface - Config-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            auth\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            bodySerializer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            method\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            querySerializer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            requestValidator\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            responseTransformer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            responseValidator\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        auth\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        auth:          | AuthToken\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :          | AuthToken\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Auth token or a function returning auth token. The resolved value will be\nadded to the request payload as defined by its security array.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bodySerializer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bodySerializer:         BodySerializer | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BodySerializer | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function for serializing request body parameter. By default,\nJSON.stringify() will be used.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:      | Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :      | Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An object containing any HTTP headers that you want to pre-populate your\nHeaders object with.\nSee more\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:     \"CONNECT\" | \"DELETE\" | \"GET\" | \"HEAD\" | \"OPTIONS\" | \"PATCH\" | \"POST\" | \"PUT\" | \"TRACE\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"CONNECT\" | \"DELETE\" | \"GET\" | \"HEAD\" | \"OPTIONS\" | \"PATCH\" | \"POST\" | \"PUT\" | \"TRACE\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The request method.\nSee more\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        querySerializer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        querySerializer:     QuerySerializer | QuerySerializerOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     QuerySerializer | QuerySerializerOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function for serializing request query parameters. By default, arrays\nwill be exploded in form style, objects will be exploded in deepObject\nstyle, and reserved characters are percent-encoded.\nThis method will have no effect if the native paramsSerializer() Axios\nAPI function is used.\nView examples\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requestValidator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        requestValidator:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function validating request data. This is useful if you want to ensure\nthe request conforms to the desired shape, so it can be safely sent to\nthe server.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseTransformer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseTransformer:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function transforming response data before it's returned. This is useful\nfor post-processing data, e.g. converting ISO strings into Date objects.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseValidator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseValidator:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function validating response data. This is useful if you want to ensure\nthe response conforms to the desired shape, so it can be safely passed to\nthe transformers and returned to the user.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import type { Auth, AuthToken } from './auth';\nimport type {\n    BodySerializer,\n    QuerySerializer,\n    QuerySerializerOptions,\n} from './bodySerializer';\n\nexport interface Client {\n    /**\n     * Returns the final request URL.\n     */\n    buildUrl: BuildUrlFn;\n    connect: MethodFn;\n    delete: MethodFn;\n    get: MethodFn;\n    getConfig: () => Config;\n    head: MethodFn;\n    options: MethodFn;\n    patch: MethodFn;\n    post: MethodFn;\n    put: MethodFn;\n    request: RequestFn;\n    setConfig: (config: Config) => Config;\n    trace: MethodFn;\n}\n\nexport interface Config {\n    /**\n     * Auth token or a function returning auth token. The resolved value will be\n     * added to the request payload as defined by its `security` array.\n     */\n    auth?: ((auth: Auth) => Promise | AuthToken) | AuthToken;\n    /**\n     * A function for serializing request body parameter. By default,\n     * {@link JSON.stringify()} will be used.\n     */\n    bodySerializer?: BodySerializer | null;\n    /**\n     * An object containing any HTTP headers that you want to pre-populate your\n     * `Headers` object with.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/Headers/Headers#init See more}\n     */\n    headers?:\n        | RequestInit['headers']\n        | Record;\n    /**\n     * The request method.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#method See more}\n     */\n    method?:\n        | 'CONNECT'\n        | 'DELETE'\n        | 'GET'\n        | 'HEAD'\n        | 'OPTIONS'\n        | 'PATCH'\n        | 'POST'\n        | 'PUT'\n        | 'TRACE';\n    /**\n     * A function for serializing request query parameters. By default, arrays\n     * will be exploded in form style, objects will be exploded in deepObject\n     * style, and reserved characters are percent-encoded.\n     *\n     * This method will have no effect if the native `paramsSerializer()` Axios\n     * API function is used.\n     *\n     * {@link https://swagger.io/docs/specification/serialization/#query View examples}\n     */\n    querySerializer?: QuerySerializer | QuerySerializerOptions;\n    /**\n     * A function validating request data. This is useful if you want to ensure\n     * the request conforms to the desired shape, so it can be safely sent to\n     * the server.\n     */\n    requestValidator?: (data: unknown) => Promise;\n    /**\n     * A function transforming response data before it's returned. This is useful\n     * for post-processing data, e.g. converting ISO strings into Date objects.\n     */\n    responseTransformer?: (data: unknown) => Promise;\n    /**\n     * A function validating response data. This is useful if you want to ensure\n     * the response conforms to the desired shape, so it can be safely passed to\n     * the transformers and returned to the user.\n     */\n    responseValidator?: (data: unknown) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialIssuerMetadataDto.html":{"url":"classes/CredentialIssuerMetadataDto.html","title":"class - CredentialIssuerMetadataDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialIssuerMetadataDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/credential-issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the metadata for a credential issuer.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_server\n                            \n                            \n                                authorization_servers\n                            \n                            \n                                batch_credential_issuance\n                            \n                            \n                                credential_configurations_supported\n                            \n                            \n                                credential_endpoint\n                            \n                            \n                                credential_issuer\n                            \n                            \n                                display\n                            \n                            \n                                notification_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_server\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:41\n                        \n                    \n\n            \n                \n                    The URL of the preferred authorization server.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_servers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:12\n                        \n                    \n\n            \n                \n                    List of authorization servers that support the credential issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        batch_credential_issuance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:24\n                        \n                    \n\n            \n                \n                    Information about batch credential issuance.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_configurations_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:37\n                        \n                    \n\n            \n                \n                    Object of credentials configurations supported by the issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:16\n                        \n                    \n\n            \n                \n                    The URL of the credential issuance endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:8\n                        \n                    \n\n            \n                \n                    The issuer identifier, typically a URL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        display\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:33\n                        \n                    \n\n            \n                \n                    Display information for the credentials that are getting issued.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notification_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:20\n                        \n                    \n\n            \n                \n                    The URL of the notification endpoint for credential issuance.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CredentialIssuerMetadataDto {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    credential_issuer: string;\n    /**\n     * List of authorization servers that support the credential issuer.\n     */\n    authorization_servers: string[];\n    /**\n     * The URL of the credential issuance endpoint.\n     */\n    credential_endpoint: string;\n    /**\n     * The URL of the notification endpoint for credential issuance.\n     */\n    notification_endpoint: string;\n    /**\n     * Information about batch credential issuance.\n     */\n    batch_credential_issuance: {\n        /**\n         * Amount of elements in a batch.\n         */\n        batch_size: number;\n    };\n    /**\n     * Display information for the credentials that are getting issued.\n     */\n    display: Array;\n    /**\n     * Object of credentials configurations supported by the issuer.\n     */\n    credential_configurations_supported: any;\n    /**\n     * The URL of the preferred authorization server.\n     */\n    authorization_server: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsController.html":{"url":"controllers/CredentialsController.html","title":"controller - CredentialsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                credentials/:tenantId\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n            \n                \n                        \n                    schema(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('schema/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n            \n                \n                        \n                    vct(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('vct/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:15\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the credential configuration.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from '@nestjs/common';\nimport { CredentialsService } from './credentials.service';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Credentials')\n@Controller('credentials/:tenantId')\nexport class CredentialsController {\n    constructor(private readonly credentialsService: CredentialsService) {}\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n     * @param id - The identifier of the credential configuration.\n     */\n    @Get('vct/:id')\n    vct(@Param('id') id: string, @Param('tenantId') tenantId: string) {\n        return this.credentialsService.getVCT(id, tenantId);\n    }\n\n    /**\n     * Retrieves the schema for a specific credential\n     * @param id\n     * @returns\n     */\n    @Get('schema/:id')\n    schema(@Param('id') id: string, @Param('tenantId') tenantId: string) {\n        return this.credentialsService.getSchema(id, tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialsService.html":{"url":"injectables/CredentialsService.html","title":"injectable - CredentialsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteCredentialConfiguration\n                            \n                            \n                                    Public\n                                getConfig\n                            \n                            \n                                    Async\n                                getConfigById\n                            \n                            \n                                    Async\n                                getCredential\n                            \n                            \n                                    Async\n                                getCredentialConfiguration\n                            \n                            \n                                    Async\n                                getSchema\n                            \n                            \n                                    Async\n                                getVCT\n                            \n                            \n                                    Async\n                                storeCredentialConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(crpytoService: CryptoService, configService: ConfigService, statusListService: StatusListService, issuanceConfigRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credentials.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        crpytoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issuanceConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \ndeleteCredentialConfiguration(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfig(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getConfigById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfigById(credentialId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredential\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredential(credentialConfigurationId: string, cnf: Jwk, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cnf\n                                            \n                                                        Jwk\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredentialConfiguration(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:73\n                        \n                    \n\n\n            \n                \n                        Returns the credential configuration that is required for oid4vci\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSchema\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSchema(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:166\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getVCT\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVCT(credentialId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:145\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        storeCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeCredentialConfiguration(tenantId: string, value: IssuanceConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Store the config. If it already exist, overwrite it.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            IssuanceConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport type { Jwk } from '@openid4vc/oauth2';\nimport { digest, generateSalt } from '@sd-jwt/crypto-nodejs';\nimport { SDJwtVcInstance } from '@sd-jwt/sd-jwt-vc';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { StatusListService } from '../status-list/status-list.service';\nimport { CredentialConfigurationSupported } from '@openid4vc/openid4vci';\nimport { Session } from '../../session/entities/session.entity';\nimport { SchemaResponse } from './dto/schema-response.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { IssuanceConfig } from './entities/issuance-config.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class CredentialsService {\n    constructor(\n        private crpytoService: CryptoService,\n        private configService: ConfigService,\n        private statusListService: StatusListService,\n        @InjectRepository(IssuanceConfig)\n        private issuanceConfigRepo: Repository,\n    ) {}\n\n    /**\n     *\n     * @param tenantId\n     * @returns\n     */\n    public getConfig(tenantId: string): Promise {\n        return this.issuanceConfigRepo.findBy({ tenantId });\n    }\n\n    async getConfigById(\n        credentialId: string,\n        tenantId: string,\n    ): Promise {\n        return this.issuanceConfigRepo.findOneByOrFail({\n            id: credentialId,\n            tenantId,\n        });\n    }\n\n    /**\n     * Store the config. If it already exist, overwrite it.\n     * @param tenantId\n     * @param value\n     * @returns\n     */\n    async storeCredentialConfiguration(\n        tenantId: string,\n        value: IssuanceConfig,\n    ) {\n        value.tenantId = tenantId;\n        return this.issuanceConfigRepo.save(value);\n    }\n\n    /**\n     * Deletes a credential configuration.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    deleteCredentialConfiguration(tenantId: string, id: string) {\n        return this.issuanceConfigRepo.delete({ tenantId, id });\n    }\n\n    /**\n     * Returns the credential configuration that is required for oid4vci\n     * @param tenantId\n     * @returns\n     */\n    async getCredentialConfiguration(\n        tenantId: string,\n    ): Promise> {\n        const credential_configurations_supported: Record = {};\n        (await this.getConfig(tenantId)).forEach((credential) => {\n            credential_configurations_supported[credential.id] =\n                credential.config;\n        });\n        return credential_configurations_supported;\n    }\n\n    async getCredential(\n        credentialConfigurationId: string,\n        cnf: Jwk,\n        session: Session,\n    ) {\n        const vc = await this.getConfigById(\n            credentialConfigurationId,\n            session.tenantId,\n        );\n        const claims =\n            session.credentialPayload?.values?.[credentialConfigurationId] ??\n            vc.claims;\n        const disclosureFrame = vc.disclosureFrame;\n\n        const sdjwt = new SDJwtVcInstance({\n            signer: await this.crpytoService.keyService.signer(\n                session.tenantId,\n            ),\n            signAlg: 'ES256',\n            hasher: digest,\n            hashAlg: 'sha-256',\n            saltGenerator: generateSalt,\n            loadTypeMetadataFormat: true,\n        });\n\n        return sdjwt.issue(\n            {\n                iss: this.configService.getOrThrow('PUBLIC_URL'),\n                iat: Math.round(new Date().getTime() / 1000),\n                vct: `${this.configService.getOrThrow('PUBLIC_URL')}/${session.tenantId}/credentials/vct/${vc.id}`,\n                cnf: {\n                    jwk: cnf,\n                },\n                ...(await this.statusListService.createEntry(\n                    session,\n                    credentialConfigurationId,\n                )),\n                ...claims,\n            },\n            disclosureFrame,\n            {\n                header: {\n                    x5c: this.crpytoService.getCertChain(\n                        'signing',\n                        session.tenantId,\n                    ),\n                    alg: 'ES256',\n                },\n            },\n        );\n    }\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n     * @param credentialId\n     * @param tenantId\n     * @returns\n     */\n    async getVCT(credentialId: string, tenantId: string) {\n        const vc = await this.issuanceConfigRepo.findOneByOrFail({\n            id: credentialId,\n            tenantId,\n        });\n        if (!vc.vct) {\n            throw new ConflictException(\n                `VCT for credential configuration with id ${credentialId} not found`,\n            );\n        }\n        const host = this.configService.getOrThrow('PUBLIC_URL');\n        vc.vct.vct = `${host}/${tenantId}/credentials/vct/${vc.id}`;\n        return vc.vct;\n    }\n\n    /**\n     * Retrieves the schema for a specific credential configuration.\n     * @param id\n     * @param tenantId\n     * @returns\n     */\n    async getSchema(id: string, tenantId: string): Promise {\n        const vc = await this.issuanceConfigRepo.findOneByOrFail({\n            id,\n            tenantId,\n        });\n        if (!vc.schema) {\n            throw new ConflictException(\n                `Schema for credential configuration with id ${id} not found`,\n            );\n        }\n        return vc.schema;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptoImplementation.html":{"url":"interfaces/CryptoImplementation.html","title":"interface - CryptoImplementation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CryptoImplementation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto/crypto-implementation.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface to imeplement different algorithms.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            alg\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        generateKeyPair\n                                    \n                                \n                                \n                                    \n                                        getSigner\n                                    \n                                \n                                \n                                    \n                                        getVerifier\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyPair\n                        \n                    \n                \n            \n            \n                \ngenerateKeyPair()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto-implementation.ts:19\n                        \n                    \n\n\n            \n                \n                        Generates a new keypair\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSigner\n                        \n                    \n                \n            \n            \n                \ngetSigner(privateKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto-implementation.ts:24\n                        \n                    \n\n\n            \n                \n                        creates a signer based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKeyJWK\n                                            \n                                                        JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getVerifier\n                        \n                    \n                \n            \n            \n                \ngetVerifier(publicKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto-implementation.ts:29\n                        \n                    \n\n\n            \n                \n                        creates a verifier based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                publicKeyJWK\n                                            \n                                                        JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        alg:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type KeyPair = {\n    publicKey: JsonWebKey;\n    privateKey: JsonWebKey;\n};\n\ntype Signer = (data: string) => Promise;\n\ntype Verifier = (data: string, signature: string) => Promise;\n\n/**\n * Generic interface to imeplement different algorithms.\n */\nexport interface CryptoImplementation {\n    //name of the algorithm\n    alg: string;\n    /**\n     * Generates a new keypair\n     */\n    generateKeyPair(): Promise;\n    /**\n     * creates a signer based on the passed key.\n     * @param privateKeyJWK\n     */\n    getSigner(privateKeyJWK: JsonWebKey): Promise;\n    /**\n     * creates a verifier based on the passed key.\n     * @param publicKeyJWK\n     */\n    getVerifier(publicKeyJWK: JsonWebKey): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoModule.html":{"url":"modules/CryptoModule.html","title":"module - CryptoModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\n\nCryptoService \n\nCryptoService \n\n\n\nEncryptionService \n\nEncryptionService \n\n\n\nCryptoModule\n\nCryptoModule\n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/crypto.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CryptoService } from './crypto.service';\nimport { EncryptionService } from './encryption/encryption.service';\n\n@Module({\n    imports: [],\n    providers: [CryptoService, EncryptionService],\n    exports: [CryptoService, EncryptionService],\n})\nexport class CryptoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoService.html":{"url":"injectables/CryptoService.html","title":"injectable - CryptoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/crypto.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                folder\n                            \n                            \n                                    \n                                    Public\n                                    Readonly\n                                keyService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCallbackContext\n                            \n                            \n                                getCertChain\n                            \n                            \n                                getHeadersFromRequest\n                            \n                            \n                                getJwks\n                            \n                            \n                                getSignJwtCallback\n                            \n                            \n                                hasCerts\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Async\n                                signJwt\n                            \n                            \n                                storeAccessCertificate\n                            \n                            \n                                    Async\n                                verifyJwt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, keyService: KeyService, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/crypto.service.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keyService\n                                                  \n                                                        \n                                                                        KeyService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCallbackContext\n                        \n                    \n                \n            \n            \n                \ngetCallbackContext(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:193\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Omit\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCertChain\n                        \n                    \n                \n            \n            \n                \ngetCertChain(type: certificateType, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:144\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            certificateType\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'signing'\n                                            \n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHeadersFromRequest\n                        \n                    \n                \n            \n            \n                \ngetHeadersFromRequest(req: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:268\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     globalThis.Headers\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getJwks\n                        \n                    \n                \n            \n            \n                \ngetJwks(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:282\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSignJwtCallback\n                        \n                    \n                \n            \n            \n                \ngetSignJwtCallback(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:231\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SignJwtCallback\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasCerts\n                        \n                    \n                \n            \n            \n                \nhasCerts(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Checks if there is a signing certificate and access certificate available.\nIf not it will be created.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_INIT, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJwt\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJwt(header: any, payload: any, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:166\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                header\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storeAccessCertificate\n                        \n                    \n                \n            \n            \n                \nstoreAccessCertificate(crt: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:159\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                crt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyJwt\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyJwt(compact: string, tenantId: string, payload?: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:174\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                compact\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        folder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/crypto.service.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Readonly\n                        keyService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KeyService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject('KeyService')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/crypto.service.ts:36\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { createHash, randomBytes, X509Certificate } from 'node:crypto';\nimport {\n    existsSync,\n    mkdirSync,\n    readFileSync,\n    unlinkSync,\n    writeFileSync,\n} from 'node:fs';\nimport { Inject, Injectable, OnModuleInit } from '@nestjs/common';\nimport {\n    type CallbackContext,\n    HashAlgorithm,\n    type Jwk,\n    SignJwtCallback,\n    calculateJwkThumbprint,\n    clientAuthenticationNone,\n} from '@openid4vc/oauth2';\nimport type { Request } from 'express';\nimport { type JWK, importJWK, jwtVerify } from 'jose';\nimport { ConfigService } from '@nestjs/config';\nimport { join } from 'node:path';\nimport { KeyService } from './key/key.service';\nimport { EC_Public } from '../well-known/dto/jwks-response.dto';\nimport { execSync } from 'node:child_process';\nimport { EventEmitter2, OnEvent } from '@nestjs/event-emitter';\nimport { TENANT_EVENTS } from '../auth/tenant-events';\n\ntype certificateType = 'access' | 'signing';\n\n@Injectable()\nexport class CryptoService implements OnModuleInit {\n    folder: string;\n\n    constructor(\n        private readonly configService: ConfigService,\n        @Inject('KeyService') public readonly keyService: KeyService,\n        private readonly eventEmitter: EventEmitter2,\n    ) {}\n    onModuleInit() {\n        this.folder = join(this.configService.getOrThrow('FOLDER'));\n        if (!existsSync(this.folder)) {\n            mkdirSync(this.folder, { recursive: true });\n        }\n    }\n\n    @OnEvent(TENANT_EVENTS.TENANT_INIT, { async: true })\n    async onTenantInit(tenantId: string) {\n        const folder = join(this.folder, tenantId, 'keys');\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n        await this.keyService.init(tenantId);\n        this.hasCerts(tenantId);\n        this.eventEmitter.emit(TENANT_EVENTS.TENANT_KEYS, tenantId);\n    }\n\n    /**\n     * Checks if there is a signing certificate and access certificate available.\n     * If not it will be created.\n     */\n    hasCerts(tenantId: string) {\n        const folder = join(this.folder, tenantId, 'keys');\n        const pubkey = join(folder, 'public-key.pem');\n        const dummyKey = join(folder, 'dummy_key.pem');\n        const dummyCsr = join(folder, 'dummy.csr');\n        const issuerKey = join(folder, 'issuer_key.pem');\n        const issuerCert = join(folder, 'issuer_cert.pem');\n        const certOut = join(folder, 'signing-certificate.pem');\n        const sanExt = join(folder, 'san.ext');\n        if (!existsSync(certOut)) {\n            // === Configurable parameters (you can parameterize these when calling the script) ===\n            const subject = this.configService.getOrThrow('RP_NAME');\n            const uri = this.configService\n                .getOrThrow('PUBLIC_URL')\n                .replace('https://', '');\n\n            // === Helper to run shell commands ===\n            const run = (cmd) => {\n                execSync(cmd, { stdio: 'inherit' });\n            };\n\n            // === Step-by-step ===\n            mkdirSync(this.folder, { recursive: true });\n\n            // Step 1: Create dummy key pair if public key is missing\n            if (!existsSync(dummyKey)) {\n                // Generate private key (PKCS#8)\n                run(\n                    `openssl genpkey -algorithm EC -pkeyopt ec_paramgen_curve:prime256v1 -out \"${dummyKey}\"`,\n                );\n            } else {\n                if (!existsSync(dummyKey)) {\n                    throw new Error(\n                        `Public key exists but ${dummyKey} is missing.`,\n                    );\n                }\n            }\n\n            // Step 2: Generate issuer key\n            run(\n                `openssl genpkey -algorithm EC -pkeyopt ec_paramgen_curve:prime256v1 -out \"${issuerKey}\"`,\n            );\n\n            // Step 3: Create self-signed issuer cert\n            run(\n                `openssl req -x509 -new -key \"${issuerKey}\" -subj \"/CN=${subject}\" -addext \"subjectAltName=DNS:${uri}\" -days 365 -out \"${issuerCert}\"`,\n            );\n\n            // Step 4: Create dummy CSR\n            run(\n                `openssl req -new -key \"${dummyKey}\" -subj \"/CN=${subject}\" -addext \"subjectAltName=DNS:${uri}\" -out \"${dummyCsr}\"`,\n            );\n\n            // Step 5: Create SAN extension file\n            writeFileSync(sanExt, `subjectAltName=DNS:${uri}`);\n\n            // Step 6: Sign certificate using issuer\n            run(\n                `openssl x509 -req -in \"${dummyCsr}\" -force_pubkey \"${pubkey}\" -CA \"${issuerCert}\" -CAkey \"${issuerKey}\" -CAcreateserial -days 365 -extfile \"${sanExt}\" -out \"${certOut}\"`,\n            );\n\n            // Step 7: Clean up\n            [\n                issuerKey,\n                issuerCert,\n                dummyCsr,\n                dummyKey,\n                join(folder, 'issuer_cert.srl'),\n                sanExt,\n            ].forEach((file) => {\n                if (existsSync(file)) unlinkSync(file);\n            });\n        }\n        if (!existsSync(join(folder, 'access-certificate.pem'))) {\n            // Create access certificate from signing certificate\n            const signingCert = readFileSync(\n                join(folder, 'signing-certificate.pem'),\n                'utf-8',\n            );\n            writeFileSync(join(folder, 'access-certificate.pem'), signingCert);\n        }\n    }\n\n    getCertChain(type: certificateType = 'signing', tenantId: string) {\n        const cert = readFileSync(\n            join(this.folder, tenantId, 'keys', `${type}-certificate.pem`),\n            'utf-8',\n        );\n        const crt = new X509Certificate(cert);\n        console.log(crt.subjectAltName);\n\n        const chain = cert\n            .replace('-----BEGIN CERTIFICATE-----', '')\n            .replace('-----END CERTIFICATE-----', '')\n            .replace(/\\r?\\n|\\r/g, '');\n        return [chain];\n    }\n\n    storeAccessCertificate(crt: string, tenantId: string) {\n        writeFileSync(\n            join(this.folder, tenantId, 'keys', `access-certificate.pem`),\n            crt,\n        );\n    }\n\n    async signJwt(\n        header: any,\n        payload: any,\n        tenantId: string,\n    ): Promise {\n        return this.keyService.signJWT(payload, header, tenantId);\n    }\n\n    async verifyJwt(\n        compact: string,\n        tenantId: string,\n        payload?: Record,\n    ): Promise {\n        const publicJwk = await this.keyService.getPublicKey('jwk', tenantId);\n        const publicCryptoKey = await importJWK(publicJwk, 'ES256');\n\n        try {\n            await jwtVerify(compact, publicCryptoKey, {\n                currentDate: payload?.exp\n                    ? new Date((payload.exp - 300) * 1000)\n                    : undefined,\n            });\n            return { verified: true };\n        } catch {\n            return { verified: false };\n        }\n    }\n    getCallbackContext(\n        tenantId: string,\n    ): Omit {\n        return {\n            hash: (data, alg) =>\n                createHash(alg.replace('-', '').toLowerCase())\n                    .update(data)\n                    .digest(),\n            generateRandom: (bytes) => randomBytes(bytes),\n            clientAuthentication: clientAuthenticationNone({\n                clientId: 'some-random',\n            }),\n            //clientId: 'some-random-client-id', // TODO: Replace with your real clientId if necessary\n            signJwt: this.getSignJwtCallback(tenantId),\n            verifyJwt: async (signer, { compact, payload }) => {\n                if (signer.method !== 'jwk') {\n                    throw new Error('Signer method not supported');\n                }\n\n                const josePublicKey = await importJWK(\n                    signer.publicJwk as JWK,\n                    signer.alg,\n                );\n                try {\n                    await jwtVerify(compact, josePublicKey, {\n                        currentDate: payload?.exp\n                            ? new Date((payload.exp - 300) * 1000)\n                            : undefined,\n                    });\n                    return { verified: true, signerJwk: signer.publicJwk };\n                } catch {\n                    return { verified: false };\n                }\n            },\n        };\n    }\n\n    // Helper to generate signJwt callback\n    getSignJwtCallback(tenantId: string): SignJwtCallback {\n        return async (signer, { header, payload }) => {\n            if (signer.method !== 'jwk') {\n                throw new Error('Signer method not supported');\n            }\n            const hashCallback = this.getCallbackContext(tenantId).hash;\n            const jwkThumbprint = await calculateJwkThumbprint({\n                jwk: signer.publicJwk,\n                hashAlgorithm: HashAlgorithm.Sha256,\n                hashCallback,\n            });\n\n            const privateThumbprint = await calculateJwkThumbprint({\n                jwk: (await this.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n                hashAlgorithm: HashAlgorithm.Sha256,\n                hashCallback,\n            });\n\n            if (jwkThumbprint !== privateThumbprint) {\n                throw new Error(\n                    `No private key available for public jwk \\n${JSON.stringify(signer.publicJwk, null, 2)}`,\n                );\n            }\n\n            const jwt = await this.signJwt(header, payload, tenantId);\n\n            return {\n                jwt,\n                signerJwk: signer.publicJwk,\n            };\n        };\n    }\n\n    // Utility method like in your utils.ts\n    getHeadersFromRequest(req: Request): globalThis.Headers {\n        const headers = new Headers();\n        for (const [key, value] of Object.entries(req.headers)) {\n            if (Array.isArray(value)) {\n                for (const v of value) {\n                    headers.append(key, v);\n                }\n            } else if (value !== undefined) {\n                headers.set(key, value);\n            }\n        }\n        return headers;\n    }\n\n    getJwks(tenantId: string) {\n        return this.keyService.getPublicKey(\n            'jwk',\n            tenantId,\n        ) as Promise;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoService-1.html":{"url":"injectables/CryptoService-1.html","title":"injectable - CryptoService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto/crypto.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAlg\n                            \n                            \n                                getCrypto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configServie: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/crypto/crypto.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configServie\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAlg\n                        \n                    \n                \n            \n            \n                \ngetAlg()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Return the algorithm that is used for the crypto operations like signing.\n\n\n                        \n                            Returns :         CryptoType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCrypto\n                        \n                    \n                \n            \n            \n                \ngetCrypto(alg)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                alg\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    this.configServie.get('CRYPTO_ALG')\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CryptoImplementation\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config';\nimport { ES256 } from '@sd-jwt/crypto-nodejs';\nimport { ED25519 } from './ed25519';\nimport { CryptoImplementation } from './crypto-implementation';\nimport { Injectable } from '@nestjs/common';\n\nexport type CryptoType = 'ES256' | 'Ed25519';\n\n@Injectable()\nexport class CryptoService {\n    constructor(private configServie: ConfigService) {}\n\n    /**\n     * Return the algorithm that is used for the crypto operations like signing.\n     * @returns\n     */\n    getAlg(): CryptoType {\n        return this.configServie.get('CRYPTO_ALG') as CryptoType;\n    }\n\n    getCrypto(\n        alg = this.configServie.get('CRYPTO_ALG'),\n    ): CryptoImplementation {\n        switch (alg) {\n            case 'Ed25519':\n                return ED25519;\n            case 'ES256':\n                return ES256;\n            default:\n                throw new Error(`Unsupported algorithm ${alg}`);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport { join } from 'path';\nimport * as Joi from 'joi';\n\nexport const DB_VALIDATION_SCHEMA = {\n    DB_TYPE: Joi.string().valid('sqlite', 'postgres').default('sqlite'),\n    DB_HOST: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PORT: Joi.number().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_USERNAME: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PASSWORD: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_DATABASE: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n};\n\n@Module({\n    imports: [\n        TypeOrmModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (\n                configService: ConfigService,\n            ): TypeOrmModuleOptions => {\n                const dbType = configService.get(\n                    'DB_TYPE',\n                );\n\n                const commonOptions = {\n                    synchronize: true,\n                    autoLoadEntities: true,\n                };\n\n                if (dbType === 'postgres') {\n                    return {\n                        type: 'postgres',\n                        host: configService.getOrThrow('DB_HOST'),\n                        port: configService.getOrThrow('DB_PORT'),\n                        username:\n                            configService.getOrThrow('DB_USERNAME'),\n                        password:\n                            configService.getOrThrow('DB_PASSWORD'),\n                        database:\n                            configService.getOrThrow('DB_DATABASE'),\n                        ...commonOptions,\n                    };\n                }\n\n                return {\n                    type: 'sqlite',\n                    database: join(\n                        configService.getOrThrow('FOLDER'),\n                        'service.db',\n                    ),\n                    ...commonOptions,\n                };\n            },\n        }),\n    ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EC_Public.html":{"url":"classes/EC_Public.html","title":"class - EC_Public","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EC_Public\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\nThis class is used to define the structure of EC public keys in JWK format.\n\n            \n\n\n            \n                Implements\n            \n            \n                            JWK_EC_Public\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crv\n                            \n                            \n                                kty\n                            \n                            \n                                x\n                            \n                            \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:15\n                        \n                    \n\n            \n                \n                    The algorithm intended for use with the key, such as 'ES256'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        kty\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The key type, which is always 'EC' for Elliptic Curve keys.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:19\n                        \n                    \n\n            \n                \n                    The x coordinate of the EC public key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:23\n                        \n                    \n\n            \n                \n                    The y coordinate of the EC public key.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from 'jose';\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: 'EC';\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncryptionService.html":{"url":"injectables/EncryptionService.html","title":"injectable - EncryptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncryptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/encryption/encryption.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                privateEncryptionKey\n                            \n                            \n                                    Private\n                                privateEnncryptionPath\n                            \n                            \n                                    Private\n                                publicEncryptionKey\n                            \n                            \n                                    Private\n                                publicEncryptionPath\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decryptJwe\n                            \n                            \n                                getEncryptionPublicKey\n                            \n                            \n                                    Async\n                                init\n                            \n                            \n                                    \n                                    Async\n                                onTenantInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/encryption/encryption.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decryptJwe\n                        \n                    \n                \n            \n            \n                \n                        \n                    decryptJwe(response: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:58\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEncryptionPublicKey\n                        \n                    \n                \n            \n            \n                \ngetEncryptionPublicKey()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     JWK\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_INIT, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        privateEncryptionKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CryptoKey\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        privateEnncryptionPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        publicEncryptionKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JWK\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        publicEncryptionPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport { importJWK, exportJWK, generateKeyPair, jwtDecrypt, JWK } from 'jose';\nimport { join } from 'path';\nimport { TENANT_EVENTS } from '../../auth/tenant-events';\nimport { OnEvent } from '@nestjs/event-emitter';\n\n@Injectable()\nexport class EncryptionService {\n    private privateEncryptionKey: CryptoKey;\n    private publicEncryptionKey: JWK;\n    private privateEnncryptionPath: string;\n    private publicEncryptionPath: string;\n\n    constructor(private configService: ConfigService) {}\n\n    @OnEvent(TENANT_EVENTS.TENANT_INIT, { async: true })\n    async onTenantInit(tenantId: string) {\n        await this.init(tenantId);\n    }\n\n    async init(tenantId: string) {\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'keys',\n        );\n        this.privateEnncryptionPath = join(folder, 'private-encryption.json');\n        this.publicEncryptionPath = join(folder, 'public-encryption.json');\n        if (!existsSync(this.privateEnncryptionPath)) {\n            await generateKeyPair('ECDH-ES', {\n                crv: 'P-256',\n                extractable: true,\n            }).then(async (secret) => {\n                writeFileSync(\n                    this.privateEnncryptionPath,\n                    JSON.stringify(await exportJWK(secret.privateKey), null, 2),\n                );\n                writeFileSync(\n                    this.publicEncryptionPath,\n                    JSON.stringify(await exportJWK(secret.publicKey), null, 2),\n                );\n            });\n        }\n\n        await importJWK(\n            JSON.parse(readFileSync(this.privateEnncryptionPath, 'utf-8')),\n            'ECDH-ES',\n        ).then((key) => {\n            this.privateEncryptionKey = key as CryptoKey;\n        });\n        this.publicEncryptionKey = JSON.parse(\n            readFileSync(this.publicEncryptionPath, 'utf-8'),\n        ) as JWK;\n    }\n\n    async decryptJwe(response: string): Promise {\n        const res = await jwtDecrypt(response, this.privateEncryptionKey);\n        return res.payload;\n    }\n\n    getEncryptionPublicKey() {\n        return this.publicEncryptionKey;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Fields.html":{"url":"interfaces/Fields.html","title":"interface - Fields","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Fields\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/params.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowExtra\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            args\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowExtra\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowExtra:         Partial>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Partial>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        args\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        args:         ReadonlyArray\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ReadonlyArray\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type Slot = 'body' | 'headers' | 'path' | 'query';\n\nexport type Field =\n    | {\n          in: Exclude;\n          key: string;\n          map?: string;\n      }\n    | {\n          in: Extract;\n          key?: string;\n          map?: string;\n      };\n\nexport interface Fields {\n    allowExtra?: Partial>;\n    args?: ReadonlyArray;\n}\n\nexport type FieldsConfig = ReadonlyArray;\n\nconst extraPrefixesMap: Record = {\n    $body_: 'body',\n    $headers_: 'headers',\n    $path_: 'path',\n    $query_: 'query',\n};\nconst extraPrefixes = Object.entries(extraPrefixesMap);\n\ntype KeyMap = Map;\n\nconst buildKeyMap = (fields: FieldsConfig, map?: KeyMap): KeyMap => {\n    if (!map) {\n        map = new Map();\n    }\n\n    for (const config of fields) {\n        if ('in' in config) {\n            if (config.key) {\n                map.set(config.key, {\n                    in: config.in,\n                    map: config.map,\n                });\n            }\n        } else if (config.args) {\n            buildKeyMap(config.args, map);\n        }\n    }\n\n    return map;\n};\n\ninterface Params {\n    body: unknown;\n    headers: Record;\n    path: Record;\n    query: Record;\n}\n\nconst stripEmptySlots = (params: Params) => {\n    for (const [slot, value] of Object.entries(params)) {\n        if (value && typeof value === 'object' && !Object.keys(value).length) {\n            delete params[slot as Slot];\n        }\n    }\n};\n\nexport const buildClientParams = (\n    args: ReadonlyArray,\n    fields: FieldsConfig,\n) => {\n    const params: Params = {\n        body: {},\n        headers: {},\n        path: {},\n        query: {},\n    };\n\n    const map = buildKeyMap(fields);\n\n    let config: FieldsConfig[number] | undefined;\n\n    for (const [index, arg] of args.entries()) {\n        if (fields[index]) {\n            config = fields[index];\n        }\n\n        if (!config) {\n            continue;\n        }\n\n        if ('in' in config) {\n            if (config.key) {\n                const field = map.get(config.key)!;\n                const name = field.map || config.key;\n                (params[field.in] as Record)[name] = arg;\n            } else {\n                params.body = arg;\n            }\n        } else {\n            for (const [key, value] of Object.entries(arg ?? {})) {\n                const field = map.get(key);\n\n                if (field) {\n                    const name = field.map || key;\n                    (params[field.in] as Record)[name] = value;\n                } else {\n                    const extra = extraPrefixes.find(([prefix]) =>\n                        key.startsWith(prefix),\n                    );\n\n                    if (extra) {\n                        const [prefix, slot] = extra;\n                        (params[slot] as Record)[\n                            key.slice(prefix.length)\n                        ] = value;\n                    } else {\n                        for (const [slot, allowed] of Object.entries(\n                            config.allowExtra ?? {},\n                        )) {\n                            if (allowed) {\n                                (\n                                    params[slot as Slot] as Record\n                                )[key] = value;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    stripEmptySlots(params);\n\n    return params;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileSystemKeyService.html":{"url":"injectables/FileSystemKeyService.html","title":"injectable - FileSystemKeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileSystemKeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/filesystem-key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The key service is responsible for managing the keys of the issuer.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                crypto\n                            \n                            \n                                    Private\n                                privateKeyPath\n                            \n                            \n                                    Private\n                                publicKeyPath\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                getKeys\n                            \n                            \n                                getKid\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                init\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                signer\n                            \n                            \n                                    Async\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/filesystem-key.service.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKeys(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Get the keys from the file system or generate them if they do not exist\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getKid\n                        \n                    \n                \n            \n            \n                \ngetKid(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Get the key id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:131\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:133\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenant: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenant\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Get the signer for the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JWTHeaderParameters, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWTHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        crypto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/filesystem-key.service.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        privateKeyPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'private-key.pem'\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/filesystem-key.service.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        publicKeyPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'public-key.pem'\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/filesystem-key.service.ts:32\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { existsSync, mkdirSync, writeFileSync, readFileSync } from 'node:fs';\nimport {\n    JWK,\n    JWTHeaderParameters,\n    JWTPayload,\n    CryptoKey,\n    SignJWT,\n    importJWK,\n    exportPKCS8,\n    exportSPKI,\n    importPKCS8,\n    importSPKI,\n    exportJWK,\n} from 'jose';\nimport { v4 } from 'uuid';\nimport { KeyService } from './key.service';\nimport { Injectable } from '@nestjs/common';\nimport { Signer } from '@sd-jwt/types';\nimport { ConfigService } from '@nestjs/config';\nimport { CryptoImplementation } from './crypto/crypto-implementation';\nimport { CryptoService } from './crypto/crypto.service';\nimport { join } from 'node:path';\n\n/**\n * The key service is responsible for managing the keys of the issuer.\n */\n@Injectable()\nexport class FileSystemKeyService implements KeyService {\n    private crypto: CryptoImplementation;\n\n    private privateKeyPath = 'private-key.pem';\n    private publicKeyPath = 'public-key.pem';\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n    ) {\n        this.crypto = this.cryptoService.getCrypto();\n    }\n\n    async onModuleInit(): Promise {}\n    async init(tenant: string) {\n        // Initialize the key service for a specific tenant\n        // This will create the keys if they do not exist\n        await this.getKeys(tenant);\n    }\n\n    /**\n     * Get the signer for the key service\n     */\n    async signer(tenantId: string): Promise {\n        const keys = await this.getKeys(tenantId);\n        return this.crypto.getSigner(keys.privateKey);\n    }\n\n    /**\n     * Get the keys from the file system or generate them if they do not exist\n     * @returns\n     */\n    private async getKeys(tenantId: string) {\n        let privateKey: JWK;\n        let publicKey: JWK;\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'keys',\n        );\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n        if (\n            !existsSync(join(folder, this.privateKeyPath)) &&\n            !existsSync(join(folder, this.publicKeyPath))\n        ) {\n            const keys = await this.crypto.generateKeyPair();\n            privateKey = keys.privateKey as JWK;\n            publicKey = keys.publicKey as JWK;\n            //add a random key id for reference\n            publicKey.kid = v4();\n            privateKey.kid = publicKey.kid;\n            privateKey.alg = this.crypto.alg;\n            publicKey.alg = this.crypto.alg;\n            writeFileSync(\n                join(folder, this.privateKeyPath),\n                await exportPKCS8((await importJWK(privateKey)) as CryptoKey),\n            );\n            writeFileSync(\n                join(folder, this.publicKeyPath),\n                await exportSPKI((await importJWK(publicKey)) as CryptoKey),\n            );\n            return { privateKey, publicKey };\n        }\n\n        privateKey = await exportJWK(\n            await importPKCS8(\n                readFileSync(join(folder, this.privateKeyPath), 'utf-8'),\n                this.crypto.alg,\n                {\n                    extractable: true,\n                },\n            ),\n        );\n        //should be stored the cert\n        privateKey.alg = this.crypto.alg;\n        publicKey = await exportJWK(\n            await importSPKI(\n                readFileSync(join(folder, this.publicKeyPath), 'utf-8'),\n                this.crypto.alg,\n            ),\n        );\n        return { privateKey, publicKey };\n    }\n\n    /**\n     * Get the key id\n     * @returns\n     */\n    getKid(tenantId: string): Promise {\n        return this.getKeys(tenantId).then((keys) => {\n            if (keys.publicKey.kid) {\n                return keys.publicKey.kid;\n            }\n            throw new Error('Key id not found');\n        });\n    }\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    getPublicKey(type: 'jwk', tenantId: string): Promise;\n    getPublicKey(type: 'pem', tenantId: string): Promise;\n    async getPublicKey(\n        type: 'pem' | 'jwk',\n        tenantId: string,\n    ): Promise {\n        const keys = await this.getKeys(tenantId);\n        if (type === 'pem') {\n            return exportSPKI(\n                (await importJWK(\n                    keys.publicKey,\n                    this.cryptoService.getAlg(),\n                )) as CryptoKey,\n            );\n        } else {\n            return Promise.resolve(keys.publicKey);\n        }\n    }\n\n    async signJWT(\n        payload: JWTPayload,\n        header: JWTHeaderParameters,\n        tenantId: string,\n    ): Promise {\n        const keys = await this.getKeys(tenantId);\n        const privateKeyInstance = (await importJWK(\n            keys.privateKey,\n        )) as CryptoKey;\n        return new SignJWT(payload)\n            .setProtectedHeader(header)\n            .sign(privateKeyInstance);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GenerateTokenOptions.html":{"url":"interfaces/GenerateTokenOptions.html","title":"interface - GenerateTokenOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GenerateTokenOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            audience\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresIn\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subject\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresIn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SignJWT, jwtVerify, decodeJwt } from 'jose';\nimport { TokenPayload } from './token.decorator';\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {}\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow('JWT_EXPIRES_IN');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: 'HS256' })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token verification is handled by external OIDC provider.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: ['HS256'],\n            });\n\n            return payload as TokenPayload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Decode token without verification (for debugging)\n     */\n    decodeToken(token: string): TokenPayload | null {\n        try {\n            return decodeJwt(token) as TokenPayload;\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get('OIDC') !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                HealthController is responsible for providing health check endpoints.\nIt uses the HealthCheckService to perform checks on the database connection.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Endpoint to check the health of the service.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport {\n    HealthCheck,\n    HealthCheckService,\n    TypeOrmHealthIndicator,\n} from '@nestjs/terminus';\n\n/**\n * HealthController is responsible for providing health check endpoints.\n * It uses the HealthCheckService to perform checks on the database connection.\n */\n@Controller('health')\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        private db: TypeOrmHealthIndicator,\n    ) {}\n\n    /**\n     * Endpoint to check the health of the service.\n     * @returns\n     */\n    @Get()\n    @HealthCheck()\n    check() {\n        return this.health.check([() => this.db.pingCheck('database')]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HealthController } from './health.controller';\nimport { TerminusModule } from '@nestjs/terminus';\n\n@Module({\n    imports: [TerminusModule],\n    controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Interceptors.html":{"url":"classes/Interceptors.html","title":"class - Interceptors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Interceptors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/utils.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _fns\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clear\n                            \n                            \n                                eject\n                            \n                            \n                                exists\n                            \n                            \n                                getInterceptorIndex\n                            \n                            \n                                update\n                            \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/registrar/generated/client/utils.ts:331\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _fns\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (Interceptor | null)[]\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/generated/client/utils.ts:331\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:337\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eject\n                        \n                    \n                \n            \n            \n                \neject(id: number | Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:353\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(id: number | Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:348\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInterceptorIndex\n                        \n                    \n                \n            \n            \n                \ngetInterceptorIndex(id: number | Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:341\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number | Interceptor, fn: Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:360\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fn\n                                            \n                                                        Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     number | false | Interceptor\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(fn: Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:370\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                        Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { getAuthToken } from '../core/auth';\nimport type {\n    QuerySerializer,\n    QuerySerializerOptions,\n} from '../core/bodySerializer';\nimport { jsonBodySerializer } from '../core/bodySerializer';\nimport {\n    serializeArrayParam,\n    serializeObjectParam,\n    serializePrimitiveParam,\n} from '../core/pathSerializer';\nimport type { Client, ClientOptions, Config, RequestOptions } from './types';\n\ninterface PathSerializer {\n    path: Record;\n    url: string;\n}\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\ntype ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\ntype ArraySeparatorStyle = ArrayStyle | MatrixStyle;\n\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n    let url = _url;\n    const matches = _url.match(PATH_PARAM_RE);\n    if (matches) {\n        for (const match of matches) {\n            let explode = false;\n            let name = match.substring(1, match.length - 1);\n            let style: ArraySeparatorStyle = 'simple';\n\n            if (name.endsWith('*')) {\n                explode = true;\n                name = name.substring(0, name.length - 1);\n            }\n\n            if (name.startsWith('.')) {\n                name = name.substring(1);\n                style = 'label';\n            } else if (name.startsWith(';')) {\n                name = name.substring(1);\n                style = 'matrix';\n            }\n\n            const value = path[name];\n\n            if (value === undefined || value === null) {\n                continue;\n            }\n\n            if (Array.isArray(value)) {\n                url = url.replace(\n                    match,\n                    serializeArrayParam({ explode, name, style, value }),\n                );\n                continue;\n            }\n\n            if (typeof value === 'object') {\n                url = url.replace(\n                    match,\n                    serializeObjectParam({\n                        explode,\n                        name,\n                        style,\n                        value: value as Record,\n                        valueOnly: true,\n                    }),\n                );\n                continue;\n            }\n\n            if (style === 'matrix') {\n                url = url.replace(\n                    match,\n                    `;${serializePrimitiveParam({\n                        name,\n                        value: value as string,\n                    })}`,\n                );\n                continue;\n            }\n\n            const replaceValue = encodeURIComponent(\n                style === 'label' ? `.${value as string}` : (value as string),\n            );\n            url = url.replace(match, replaceValue);\n        }\n    }\n    return url;\n};\n\nexport const createQuerySerializer = ({\n    allowReserved,\n    array,\n    object,\n}: QuerySerializerOptions = {}) => {\n    const querySerializer = (queryParams: T) => {\n        const search: string[] = [];\n        if (queryParams && typeof queryParams === 'object') {\n            for (const name in queryParams) {\n                const value = queryParams[name];\n\n                if (value === undefined || value === null) {\n                    continue;\n                }\n\n                if (Array.isArray(value)) {\n                    const serializedArray = serializeArrayParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'form',\n                        value,\n                        ...array,\n                    });\n                    if (serializedArray) search.push(serializedArray);\n                } else if (typeof value === 'object') {\n                    const serializedObject = serializeObjectParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'deepObject',\n                        value: value as Record,\n                        ...object,\n                    });\n                    if (serializedObject) search.push(serializedObject);\n                } else {\n                    const serializedPrimitive = serializePrimitiveParam({\n                        allowReserved,\n                        name,\n                        value: value as string,\n                    });\n                    if (serializedPrimitive) search.push(serializedPrimitive);\n                }\n            }\n        }\n        return search.join('&');\n    };\n    return querySerializer;\n};\n\n/**\n * Infers parseAs value from provided Content-Type header.\n */\nexport const getParseAs = (\n    contentType: string | null,\n): Exclude => {\n    if (!contentType) {\n        // If no Content-Type header is provided, the best we can do is return the raw response body,\n        // which is effectively the same as the 'stream' option.\n        return 'stream';\n    }\n\n    const cleanContent = contentType.split(';')[0]?.trim();\n\n    if (!cleanContent) {\n        return;\n    }\n\n    if (\n        cleanContent.startsWith('application/json') ||\n        cleanContent.endsWith('+json')\n    ) {\n        return 'json';\n    }\n\n    if (cleanContent === 'multipart/form-data') {\n        return 'formData';\n    }\n\n    if (\n        ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n            cleanContent.startsWith(type),\n        )\n    ) {\n        return 'blob';\n    }\n\n    if (cleanContent.startsWith('text/')) {\n        return 'text';\n    }\n\n    return;\n};\n\nexport const setAuthParams = async ({\n    security,\n    ...options\n}: Pick, 'security'> &\n    Pick & {\n        headers: Headers;\n    }) => {\n    for (const auth of security) {\n        const token = await getAuthToken(auth, options.auth);\n\n        if (!token) {\n            continue;\n        }\n\n        const name = auth.name ?? 'Authorization';\n\n        switch (auth.in) {\n            case 'query':\n                if (!options.query) {\n                    options.query = {};\n                }\n                options.query[name] = token;\n                break;\n            case 'cookie':\n                options.headers.append('Cookie', `${name}=${token}`);\n                break;\n            case 'header':\n            default:\n                options.headers.set(name, token);\n                break;\n        }\n\n        return;\n    }\n};\n\nexport const buildUrl: Client['buildUrl'] = (options) => {\n    const url = getUrl({\n        baseUrl: options.baseUrl as string,\n        path: options.path,\n        query: options.query,\n        querySerializer:\n            typeof options.querySerializer === 'function'\n                ? options.querySerializer\n                : createQuerySerializer(options.querySerializer),\n        url: options.url,\n    });\n    return url;\n};\n\nexport const getUrl = ({\n    baseUrl,\n    path,\n    query,\n    querySerializer,\n    url: _url,\n}: {\n    baseUrl?: string;\n    path?: Record;\n    query?: Record;\n    querySerializer: QuerySerializer;\n    url: string;\n}) => {\n    const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n    let url = (baseUrl ?? '') + pathUrl;\n    if (path) {\n        url = defaultPathSerializer({ path, url });\n    }\n    let search = query ? querySerializer(query) : '';\n    if (search.startsWith('?')) {\n        search = search.substring(1);\n    }\n    if (search) {\n        url += `?${search}`;\n    }\n    return url;\n};\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n    const config = { ...a, ...b };\n    if (config.baseUrl?.endsWith('/')) {\n        config.baseUrl = config.baseUrl.substring(0, config.baseUrl.length - 1);\n    }\n    config.headers = mergeHeaders(a.headers, b.headers);\n    return config;\n};\n\nexport const mergeHeaders = (\n    ...headers: Array['headers'] | undefined>\n): Headers => {\n    const mergedHeaders = new Headers();\n    for (const header of headers) {\n        if (!header || typeof header !== 'object') {\n            continue;\n        }\n\n        const iterator =\n            header instanceof Headers\n                ? header.entries()\n                : Object.entries(header);\n\n        for (const [key, value] of iterator) {\n            if (value === null) {\n                mergedHeaders.delete(key);\n            } else if (Array.isArray(value)) {\n                for (const v of value) {\n                    mergedHeaders.append(key, v as string);\n                }\n            } else if (value !== undefined) {\n                // assume object headers are meant to be JSON stringified, i.e. their\n                // content value in OpenAPI specification is 'application/json'\n                mergedHeaders.set(\n                    key,\n                    typeof value === 'object'\n                        ? JSON.stringify(value)\n                        : (value as string),\n                );\n            }\n        }\n    }\n    return mergedHeaders;\n};\n\ntype ErrInterceptor = (\n    error: Err,\n    response: Res,\n    request: Req,\n    options: Options,\n) => Err | Promise;\n\ntype ReqInterceptor = (\n    request: Req,\n    options: Options,\n) => Req | Promise;\n\ntype ResInterceptor = (\n    response: Res,\n    request: Req,\n    options: Options,\n) => Res | Promise;\n\nclass Interceptors {\n    _fns: (Interceptor | null)[];\n\n    constructor() {\n        this._fns = [];\n    }\n\n    clear() {\n        this._fns = [];\n    }\n\n    getInterceptorIndex(id: number | Interceptor): number {\n        if (typeof id === 'number') {\n            return this._fns[id] ? id : -1;\n        } else {\n            return this._fns.indexOf(id);\n        }\n    }\n    exists(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        return !!this._fns[index];\n    }\n\n    eject(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = null;\n        }\n    }\n\n    update(id: number | Interceptor, fn: Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = fn;\n            return id;\n        } else {\n            return false;\n        }\n    }\n\n    use(fn: Interceptor) {\n        this._fns = [...this._fns, fn];\n        return this._fns.length - 1;\n    }\n}\n\n// `createInterceptors()` response, meant for external use as it does not\n// expose internals\nexport interface Middleware {\n    error: Pick>,\n        'eject' | 'use'\n    >;\n    request: Pick>, 'eject' | 'use'>;\n    response: Pick>,\n        'eject' | 'use'\n    >;\n}\n\n// do not add `Middleware` as return type so we can use _fns internally\nexport const createInterceptors = () => ({\n    error: new Interceptors>(),\n    request: new Interceptors>(),\n    response: new Interceptors>(),\n});\n\nconst defaultQuerySerializer = createQuerySerializer({\n    allowReserved: false,\n    array: {\n        explode: true,\n        style: 'form',\n    },\n    object: {\n        explode: true,\n        style: 'deepObject',\n    },\n});\n\nconst defaultHeaders = {\n    'Content-Type': 'application/json',\n};\n\nexport const createConfig = (\n    override: Config & T> = {},\n): Config & T> => ({\n    ...jsonBodySerializer,\n    headers: defaultHeaders,\n    parseAs: 'auto',\n    querySerializer: defaultQuerySerializer,\n    ...override,\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/IssuanceConfig.html":{"url":"entities/IssuanceConfig.html","title":"entity - IssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  IssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/issuance-config.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                claims\n                            \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                disclosureFrame\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                presentation_during_issuance\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfigurationSupported\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:42\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        disclosureFrame\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        presentation_during_issuance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PresentationDuringIssuance\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SchemaResponse\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         VCT\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { CredentialConfigurationSupported } from '@openid4vc/openid4vci';\nimport { IsString, IsOptional, IsObject } from 'class-validator';\nimport { Column, Entity } from 'typeorm';\nimport { VCT, PresentationDuringIssuance } from '../dto/credential-config.dto';\nimport { SchemaResponse } from '../dto/schema-response.dto';\nimport { ApiHideProperty } from '@nestjs/swagger';\n\n@Entity()\nexport class IssuanceConfig {\n    @Column('varchar', { primary: true })\n    @IsString()\n    id: string;\n    @ApiHideProperty()\n    @Column('varchar', { primary: true })\n    tenantId: string;\n    @Column('json')\n    @IsObject()\n    config: CredentialConfigurationSupported;\n    @Column('json')\n    // default values to be used\n    @IsObject()\n    claims: Record;\n    @Column('json')\n    @IsObject()\n    disclosureFrame: Record;\n    @Column('json', { nullable: true })\n    @IsObject()\n    @IsOptional()\n    vct?: VCT;\n    @Column('json', { nullable: true })\n    @IsObject()\n    @IsOptional()\n    presentation_during_issuance?: PresentationDuringIssuance;\n    @Column('json', { nullable: true })\n    @IsObject()\n    @IsOptional()\n    schema?: SchemaResponse;\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuerManagementController.html":{"url":"controllers/IssuerManagementController.html","title":"controller - IssuerManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuerManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuer-management/issuer-management.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                configuration\n                            \n                            \n                                    \n                                deleteConfiguration\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                            \n                                    \n                                storeConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        configuration\n                        \n                    \n                \n            \n            \n                \n                        \n                    configuration(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:106\n                        \n                    \n\n\n            \n                \n                        Returns the credential configuration for all supported credentials.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:132\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: OfferRequest, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@ApiBody({type: OfferRequest, examples: undefined})@Post('offer')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:74\n                        \n                    \n\n\n            \n                \n                        Create an offer for a credential. This endpoint may be protected\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            OfferRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeConfiguration(config: IssuanceConfig, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:116\n                        \n                    \n\n\n            \n                \n                        Stores a credential configuration. If it already exists, it will be updated.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            IssuanceConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Res,\n    UseGuards,\n} from '@nestjs/common';\nimport { CredentialsService } from '../credentials/credentials.service';\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { IssuanceConfig } from '../../issuer/credentials/entities/issuance-config.entity';\nimport { Oid4vciService } from '../../issuer/oid4vci/oid4vci.service';\nimport { OfferResponse, OfferRequest } from '../oid4vci/dto/offer-request.dto';\nimport { ResponseType } from '../../verifier/oid4vp/dto/presentation-request.dto';\nimport * as QRCode from 'qrcode';\nimport { Response } from 'express';\n\n@ApiTags('Issuer management', 'Admin')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('issuer-management')\nexport class IssuerManagementController {\n    constructor(\n        private readonly credentialsService: CredentialsService,\n        private readonly oid4vciService: Oid4vciService,\n    ) {}\n\n    /**\n     * Create an offer for a credential. This endpoint may be protected\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: 'JSON response',\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            'application/json': { schema: { type: 'object' } },\n            'image/png': { schema: { type: 'string', format: 'binary' } },\n        },\n    })\n    @ApiProduces('application/json', 'image/png')\n    @ApiBody({\n        type: OfferRequest,\n        examples: {\n            qrcode: {\n                summary: 'QR-Code Example',\n                value: {\n                    response_type: ResponseType.QRCode,\n                    credentialConfigurationIds: ['pid'],\n                } as OfferRequest,\n            },\n            uri: {\n                summary: 'URI',\n                value: {\n                    response_type: ResponseType.URI,\n                    credentialConfigurationIds: ['pid'],\n                } as OfferRequest,\n            },\n        },\n    })\n    @Post('offer')\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: OfferRequest,\n        @Token() user: TokenPayload,\n    ) {\n        // For now, we'll just pass the body to the service as before\n        // You can modify the service later to accept user information if needed\n        const values = await this.oid4vciService.createOffer(\n            body,\n            user,\n            user.sub,\n        );\n\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader('Content-Type', 'image/png');\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n\n    /**\n     * Returns the credential configuration for all supported credentials.\n     * @returns\n     */\n    @Get()\n    configuration(@Token() user: TokenPayload) {\n        return this.credentialsService.getConfig(user.sub);\n    }\n\n    /**\n     * Stores a credential configuration. If it already exists, it will be updated.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeConfiguration(\n        @Body() config: IssuanceConfig,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.storeCredentialConfiguration(\n            user.sub,\n            config,\n        );\n    }\n\n    /**\n     * Deletes a credential configuration by its ID.\n     * @param id\n     * @returns\n     */\n    @Delete('/:id')\n    deleteConfiguration(@Param('id') id: string, @Token() user: TokenPayload) {\n        return this.credentialsService.deleteCredentialConfiguration(\n            user.sub,\n            id,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IssuerMetadata.html":{"url":"interfaces/IssuerMetadata.html","title":"interface - IssuerMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IssuerMetadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/dto/issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the issuer metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            issuer\n                                        \n                                \n                                \n                                        \n                                            jwks\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        issuer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        issuer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The issuer identifier, typically a URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwks:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { JWK } from 'jose';\n\n/**\n * Interface representing the issuer metadata.\n */\nexport interface IssuerMetadata {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    issuer: string;\n    /**\n     * The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n     */\n    jwks: {\n        /**\n         * List of keys in the JWKS.\n         */\n        keys: JWK[];\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IssuerModule.html":{"url":"modules/IssuerModule.html","title":"module - IssuerModule","body":"\n                   \n\n\n\n\n    Modules\n    IssuerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_IssuerModule_exports\n\n\n\ncluster_IssuerModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/issuer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            CredentialsService\n                        \n                        \n                            Oid4vciService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vciController\n                        \n                        \n                            AuthorizeController\n                        \n                        \n                            CredentialsController\n                        \n                        \n                            IssuerManagementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            Oid4vciService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthorizeService } from './authorize/authorize.service';\nimport { CredentialsService } from './credentials/credentials.service';\nimport { Oid4vciService } from './oid4vci/oid4vci.service';\nimport { Oid4vciController } from './oid4vci/oid4vci.controller';\nimport { AuthorizeController } from './authorize/authorize.controller';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport { StatusListModule } from './status-list/status-list.module';\nimport { CredentialsController } from './credentials/credentials.controller';\nimport * as Joi from 'joi';\nimport { SessionModule } from '../session/session.module';\nimport { IssuerManagementController } from './issuer-management/issuer-management.controller';\nimport { Oid4vpModule } from '../verifier/oid4vp/oid4vp.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { IssuanceConfig } from './credentials/entities/issuance-config.entity';\nimport { SessionLoggerService } from '../utils/session-logger.service';\nimport { SessionLoggerInterceptor } from '../utils/session-logger.interceptor';\n\nexport const ISSUER_VALIDATION_SCHEMA = {\n    PUBLIC_URL: Joi.string(),\n};\n\n@Module({\n    imports: [\n        CryptoModule,\n        StatusListModule,\n        Oid4vpModule,\n        SessionModule,\n        TypeOrmModule.forFeature([IssuanceConfig]),\n    ],\n    controllers: [\n        Oid4vciController,\n        AuthorizeController,\n        CredentialsController,\n        IssuerManagementController,\n    ],\n    providers: [\n        AuthorizeService,\n        CredentialsService,\n        Oid4vciService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n    ],\n    exports: [AuthorizeService, Oid4vciService],\n})\nexport class IssuerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwksResponseDto.html":{"url":"classes/JwksResponseDto.html","title":"class - JwksResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwksResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keys\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    An array of EC public keys in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from 'jose';\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: 'EC';\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n    constructor(private reflector: Reflector) {\n        super();\n    }\n\n    canActivate(context: ExecutionContext) {\n        const isPublic = this.reflector.getAllAndOverride(\n            IS_PUBLIC_KEY,\n            [context.getHandler(), context.getClass()],\n        );\n        if (isPublic) {\n            return true;\n        }\n        return super.canActivate(context);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtService.html":{"url":"injectables/JwtService.html","title":"injectable - JwtService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                decodeToken\n                            \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                isUsingExternalOIDC\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        decodeToken\n                        \n                    \n                \n            \n            \n                \ndecodeToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:83\n                        \n                    \n\n\n            \n                \n                        Decode token without verification (for debugging)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TokenPayload | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(payload: TokenPayload, options: GenerateTokenOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:19\n                        \n                    \n\n\n            \n                \n                        Generate a JWT token for integrated OAuth2 server\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                options\n                                            \n                                                            GenerateTokenOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUsingExternalOIDC\n                        \n                    \n                \n            \n            \n                \nisUsingExternalOIDC()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Check if the service is using external OIDC provider\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Verify a JWT token (for additional validation if needed)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SignJWT, jwtVerify, decodeJwt } from 'jose';\nimport { TokenPayload } from './token.decorator';\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {}\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow('JWT_EXPIRES_IN');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: 'HS256' })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token verification is handled by external OIDC provider.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: ['HS256'],\n            });\n\n            return payload as TokenPayload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Decode token without verification (for debugging)\n     */\n    decodeToken(token: string): TokenPayload | null {\n        try {\n            return decodeJwt(token) as TokenPayload;\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get('OIDC') !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                getExternalOIDCConfig\n                            \n                            \n                                    Private\n                                    Static\n                                getIntegratedOAuth2Config\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getExternalOIDCConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getExternalOIDCConfig(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { secretOrKeyProvider: any; jwtFromRequest: any; algorithms: {}; issuer: any; audience: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getIntegratedOAuth2Config\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIntegratedOAuth2Config(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: TokenPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { passportJwtSecret } from 'jwks-rsa';\nimport { ConfigService } from '@nestjs/config';\nimport { TokenPayload } from './token.decorator';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n    constructor(private configService: ConfigService) {\n        const useExternalOIDC = configService.get('OIDC');\n\n        super(\n            useExternalOIDC\n                ? JwtStrategy.getExternalOIDCConfig(configService)\n                : JwtStrategy.getIntegratedOAuth2Config(configService),\n        );\n    }\n\n    private static getExternalOIDCConfig(configService: ConfigService) {\n        //TODO: test it\n        return {\n            secretOrKeyProvider: passportJwtSecret({\n                cache: true,\n                rateLimit: true,\n                jwksRequestsPerMinute: 5,\n                jwksUri: `${configService.get('KEYCLOAK_INTERNAL_ISSUER_URL')}/protocol/openid-connect/certs`,\n                handleSigningKeyError: (err, cb) => {\n                    console.log('Keycloak JWKS error:', err);\n                    if (err instanceof Error) {\n                        return cb(err);\n                    }\n                    return cb(\n                        new Error(\n                            'Could not get the signing key from Keycloak',\n                        ),\n                    );\n                },\n            }),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: ['RS256'],\n            issuer: configService.get('KEYCLOAK_INTERNAL_ISSUER_URL'),\n            audience: configService.get('KEYCLOAK_CLIENT_ID'), // You may want to add this to validation schema\n        };\n    }\n\n    private static getIntegratedOAuth2Config(\n        configService: ConfigService,\n    ): any {\n        const config = {\n            secretOrKey: configService.get('JWT_SECRET'),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: ['HS256'], // Using symmetric key for integrated OAuth2\n            ignoreExpiration: false, // Ensure tokens expire\n        };\n\n        // Add issuer validation only if JWT_ISSUER is configured\n        const issuer = configService.get('JWT_ISSUER');\n        if (issuer) {\n            (config as any).issuer = issuer;\n        }\n\n        return config;\n    }\n\n    validate(payload: TokenPayload): unknown {\n        const useExternalOIDC =\n            this.configService.get('OIDC') !== undefined;\n\n        if (useExternalOIDC) {\n            // External OIDC: Extract user info from external provider token\n            return payload;\n        } else {\n            // Integrated OAuth2: Use integrated server token validation\n            return payload;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/KeyEntity.html":{"url":"entities/KeyEntity.html","title":"entity - KeyEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  KeyEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/entities/key.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                privateKey\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        privateKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JsonWebKey\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/key.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/key.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\n\n@Entity()\nexport class KeyEntity {\n    @Column('varchar', { primary: true })\n    tenantId: string;\n    @Column('json')\n    privateKey: JsonWebKey;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeyModule.html":{"url":"modules/KeyModule.html","title":"module - KeyModule","body":"\n                   \n\n\n\n\n    Modules\n    KeyModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/key/key.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.module.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Global, Module } from '@nestjs/common';\nimport { FileSystemKeyService } from './filesystem-key.service';\nimport { VaultKeyService } from './vault-key.service';\nimport { CryptoModule } from './crypto/crypto.module';\nimport { CryptoService } from './crypto/crypto.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { HttpModule, HttpService } from '@nestjs/axios';\nimport * as Joi from 'joi';\nimport { TypeOrmModule } from '@nestjs/typeorm/dist/typeorm.module';\nimport { KeyEntity } from './entities/key.entity';\n\nexport const KEY_VALIDATION_SCHEMA = {\n    KM_TYPE: Joi.string().valid('file', 'vault').default('file'),\n\n    // Vault-related config\n    VAULT_URL: Joi.string().uri().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_TOKEN: Joi.string().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_KEY_ID: Joi.string().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.string().default('key-id'),\n        otherwise: Joi.optional(),\n    }),\n};\n\n@Global()\n@Module({})\nexport class KeyModule {\n    static forRoot(): DynamicModule {\n        return {\n            module: KeyModule,\n            imports: [\n                HttpModule,\n                ConfigModule,\n                CryptoModule,\n                TypeOrmModule.forFeature([KeyEntity]),\n            ],\n            providers: [\n                {\n                    provide: 'KeyService',\n                    useFactory: (\n                        configService: ConfigService,\n                        httpService: HttpService,\n                        cryptoService: CryptoService,\n                    ) => {\n                        const kmType = configService.get(\n                            'KM_TYPE',\n                        );\n                        if (kmType === 'vault') {\n                            return new VaultKeyService(\n                                httpService,\n                                configService,\n                                cryptoService,\n                            );\n                        }\n\n                        return new FileSystemKeyService(\n                            configService,\n                            cryptoService,\n                        );\n                    },\n                    inject: [ConfigService, HttpService, CryptoService],\n                },\n            ],\n            exports: ['KeyService'],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyService.html":{"url":"classes/KeyService.html","title":"class - KeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface for a key service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                getKid\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                init\n                            \n                            \n                                    Abstract\n                                signer\n                            \n                            \n                                    Abstract\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getKid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKid(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Get the key id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:11\n                        \n                    \n\n\n            \n                \n                        Initialize the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Get the callback for the signer function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JoseHeaderParameters, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JoseHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Signer } from '@sd-jwt/types';\nimport { JWK, JWTPayload, JoseHeaderParameters } from 'jose';\n\n/**\n * Generic interface for a key service\n */\nexport abstract class KeyService {\n    /**\n     * Initialize the key service\n     */\n    abstract init(tenantId): Promise;\n\n    /**\n     * Get the callback for the signer function\n     * @param tenantId\n     */\n    abstract signer(tenantId: string): Promise;\n\n    /**\n     * Get the key id\n     * @returns\n     */\n    abstract getKid(tenantId: string): Promise;\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    abstract getPublicKey(type: 'jwk', tenantId: string): Promise;\n    abstract getPublicKey(type: 'pem', tenantId: string): Promise;\n    abstract getPublicKey(\n        type: 'pem' | 'jwk',\n        tenantId: string,\n    ): Promise;\n\n    //TODO: this can be handled via the signer callback\n    abstract signJWT(\n        payload: JWTPayload,\n        header: JoseHeaderParameters,\n        tenantId: string,\n    ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Middleware.html":{"url":"interfaces/Middleware.html","title":"interface - Middleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Middleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/utils.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            request\n                                        \n                                \n                                \n                                        \n                                            response\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         Pick> | \"eject\" | \"use\">\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Pick> | \"eject\" | \"use\">\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        request\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        request:         Pick> | \"eject\" | \"use\">\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Pick> | \"eject\" | \"use\">\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        response:         Pick> | \"eject\" | \"use\">\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Pick> | \"eject\" | \"use\">\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { getAuthToken } from '../core/auth';\nimport type {\n    QuerySerializer,\n    QuerySerializerOptions,\n} from '../core/bodySerializer';\nimport { jsonBodySerializer } from '../core/bodySerializer';\nimport {\n    serializeArrayParam,\n    serializeObjectParam,\n    serializePrimitiveParam,\n} from '../core/pathSerializer';\nimport type { Client, ClientOptions, Config, RequestOptions } from './types';\n\ninterface PathSerializer {\n    path: Record;\n    url: string;\n}\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\ntype ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\ntype ArraySeparatorStyle = ArrayStyle | MatrixStyle;\n\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n    let url = _url;\n    const matches = _url.match(PATH_PARAM_RE);\n    if (matches) {\n        for (const match of matches) {\n            let explode = false;\n            let name = match.substring(1, match.length - 1);\n            let style: ArraySeparatorStyle = 'simple';\n\n            if (name.endsWith('*')) {\n                explode = true;\n                name = name.substring(0, name.length - 1);\n            }\n\n            if (name.startsWith('.')) {\n                name = name.substring(1);\n                style = 'label';\n            } else if (name.startsWith(';')) {\n                name = name.substring(1);\n                style = 'matrix';\n            }\n\n            const value = path[name];\n\n            if (value === undefined || value === null) {\n                continue;\n            }\n\n            if (Array.isArray(value)) {\n                url = url.replace(\n                    match,\n                    serializeArrayParam({ explode, name, style, value }),\n                );\n                continue;\n            }\n\n            if (typeof value === 'object') {\n                url = url.replace(\n                    match,\n                    serializeObjectParam({\n                        explode,\n                        name,\n                        style,\n                        value: value as Record,\n                        valueOnly: true,\n                    }),\n                );\n                continue;\n            }\n\n            if (style === 'matrix') {\n                url = url.replace(\n                    match,\n                    `;${serializePrimitiveParam({\n                        name,\n                        value: value as string,\n                    })}`,\n                );\n                continue;\n            }\n\n            const replaceValue = encodeURIComponent(\n                style === 'label' ? `.${value as string}` : (value as string),\n            );\n            url = url.replace(match, replaceValue);\n        }\n    }\n    return url;\n};\n\nexport const createQuerySerializer = ({\n    allowReserved,\n    array,\n    object,\n}: QuerySerializerOptions = {}) => {\n    const querySerializer = (queryParams: T) => {\n        const search: string[] = [];\n        if (queryParams && typeof queryParams === 'object') {\n            for (const name in queryParams) {\n                const value = queryParams[name];\n\n                if (value === undefined || value === null) {\n                    continue;\n                }\n\n                if (Array.isArray(value)) {\n                    const serializedArray = serializeArrayParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'form',\n                        value,\n                        ...array,\n                    });\n                    if (serializedArray) search.push(serializedArray);\n                } else if (typeof value === 'object') {\n                    const serializedObject = serializeObjectParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'deepObject',\n                        value: value as Record,\n                        ...object,\n                    });\n                    if (serializedObject) search.push(serializedObject);\n                } else {\n                    const serializedPrimitive = serializePrimitiveParam({\n                        allowReserved,\n                        name,\n                        value: value as string,\n                    });\n                    if (serializedPrimitive) search.push(serializedPrimitive);\n                }\n            }\n        }\n        return search.join('&');\n    };\n    return querySerializer;\n};\n\n/**\n * Infers parseAs value from provided Content-Type header.\n */\nexport const getParseAs = (\n    contentType: string | null,\n): Exclude => {\n    if (!contentType) {\n        // If no Content-Type header is provided, the best we can do is return the raw response body,\n        // which is effectively the same as the 'stream' option.\n        return 'stream';\n    }\n\n    const cleanContent = contentType.split(';')[0]?.trim();\n\n    if (!cleanContent) {\n        return;\n    }\n\n    if (\n        cleanContent.startsWith('application/json') ||\n        cleanContent.endsWith('+json')\n    ) {\n        return 'json';\n    }\n\n    if (cleanContent === 'multipart/form-data') {\n        return 'formData';\n    }\n\n    if (\n        ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n            cleanContent.startsWith(type),\n        )\n    ) {\n        return 'blob';\n    }\n\n    if (cleanContent.startsWith('text/')) {\n        return 'text';\n    }\n\n    return;\n};\n\nexport const setAuthParams = async ({\n    security,\n    ...options\n}: Pick, 'security'> &\n    Pick & {\n        headers: Headers;\n    }) => {\n    for (const auth of security) {\n        const token = await getAuthToken(auth, options.auth);\n\n        if (!token) {\n            continue;\n        }\n\n        const name = auth.name ?? 'Authorization';\n\n        switch (auth.in) {\n            case 'query':\n                if (!options.query) {\n                    options.query = {};\n                }\n                options.query[name] = token;\n                break;\n            case 'cookie':\n                options.headers.append('Cookie', `${name}=${token}`);\n                break;\n            case 'header':\n            default:\n                options.headers.set(name, token);\n                break;\n        }\n\n        return;\n    }\n};\n\nexport const buildUrl: Client['buildUrl'] = (options) => {\n    const url = getUrl({\n        baseUrl: options.baseUrl as string,\n        path: options.path,\n        query: options.query,\n        querySerializer:\n            typeof options.querySerializer === 'function'\n                ? options.querySerializer\n                : createQuerySerializer(options.querySerializer),\n        url: options.url,\n    });\n    return url;\n};\n\nexport const getUrl = ({\n    baseUrl,\n    path,\n    query,\n    querySerializer,\n    url: _url,\n}: {\n    baseUrl?: string;\n    path?: Record;\n    query?: Record;\n    querySerializer: QuerySerializer;\n    url: string;\n}) => {\n    const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n    let url = (baseUrl ?? '') + pathUrl;\n    if (path) {\n        url = defaultPathSerializer({ path, url });\n    }\n    let search = query ? querySerializer(query) : '';\n    if (search.startsWith('?')) {\n        search = search.substring(1);\n    }\n    if (search) {\n        url += `?${search}`;\n    }\n    return url;\n};\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n    const config = { ...a, ...b };\n    if (config.baseUrl?.endsWith('/')) {\n        config.baseUrl = config.baseUrl.substring(0, config.baseUrl.length - 1);\n    }\n    config.headers = mergeHeaders(a.headers, b.headers);\n    return config;\n};\n\nexport const mergeHeaders = (\n    ...headers: Array['headers'] | undefined>\n): Headers => {\n    const mergedHeaders = new Headers();\n    for (const header of headers) {\n        if (!header || typeof header !== 'object') {\n            continue;\n        }\n\n        const iterator =\n            header instanceof Headers\n                ? header.entries()\n                : Object.entries(header);\n\n        for (const [key, value] of iterator) {\n            if (value === null) {\n                mergedHeaders.delete(key);\n            } else if (Array.isArray(value)) {\n                for (const v of value) {\n                    mergedHeaders.append(key, v as string);\n                }\n            } else if (value !== undefined) {\n                // assume object headers are meant to be JSON stringified, i.e. their\n                // content value in OpenAPI specification is 'application/json'\n                mergedHeaders.set(\n                    key,\n                    typeof value === 'object'\n                        ? JSON.stringify(value)\n                        : (value as string),\n                );\n            }\n        }\n    }\n    return mergedHeaders;\n};\n\ntype ErrInterceptor = (\n    error: Err,\n    response: Res,\n    request: Req,\n    options: Options,\n) => Err | Promise;\n\ntype ReqInterceptor = (\n    request: Req,\n    options: Options,\n) => Req | Promise;\n\ntype ResInterceptor = (\n    response: Res,\n    request: Req,\n    options: Options,\n) => Res | Promise;\n\nclass Interceptors {\n    _fns: (Interceptor | null)[];\n\n    constructor() {\n        this._fns = [];\n    }\n\n    clear() {\n        this._fns = [];\n    }\n\n    getInterceptorIndex(id: number | Interceptor): number {\n        if (typeof id === 'number') {\n            return this._fns[id] ? id : -1;\n        } else {\n            return this._fns.indexOf(id);\n        }\n    }\n    exists(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        return !!this._fns[index];\n    }\n\n    eject(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = null;\n        }\n    }\n\n    update(id: number | Interceptor, fn: Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = fn;\n            return id;\n        } else {\n            return false;\n        }\n    }\n\n    use(fn: Interceptor) {\n        this._fns = [...this._fns, fn];\n        return this._fns.length - 1;\n    }\n}\n\n// `createInterceptors()` response, meant for external use as it does not\n// expose internals\nexport interface Middleware {\n    error: Pick>,\n        'eject' | 'use'\n    >;\n    request: Pick>, 'eject' | 'use'>;\n    response: Pick>,\n        'eject' | 'use'\n    >;\n}\n\n// do not add `Middleware` as return type so we can use _fns internally\nexport const createInterceptors = () => ({\n    error: new Interceptors>(),\n    request: new Interceptors>(),\n    response: new Interceptors>(),\n});\n\nconst defaultQuerySerializer = createQuerySerializer({\n    allowReserved: false,\n    array: {\n        explode: true,\n        style: 'form',\n    },\n    object: {\n        explode: true,\n        style: 'deepObject',\n    },\n});\n\nconst defaultHeaders = {\n    'Content-Type': 'application/json',\n};\n\nexport const createConfig = (\n    override: Config & T> = {},\n): Config & T> => ({\n    ...jsonBodySerializer,\n    headers: defaultHeaders,\n    parseAs: 'auto',\n    querySerializer: defaultQuerySerializer,\n    ...override,\n});\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotificationRequestDto.html":{"url":"classes/NotificationRequestDto.html","title":"class - NotificationRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotificationRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/notification-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                event\n                            \n                            \n                                    \n                                notification_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationEvent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['credential_issued', 'credential_revoked'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notification_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotificationEvent } from '@openid4vc/openid4vci';\nimport { IsEnum, IsString } from 'class-validator';\n\nexport class NotificationRequestDto {\n    @IsString()\n    notification_id: string;\n\n    @IsEnum(['credential_issued', 'credential_revoked'])\n    event: NotificationEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Oauth2AuthorizationServerResponse.html":{"url":"classes/Oauth2AuthorizationServerResponse.html","title":"class - Oauth2AuthorizationServerResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Oauth2AuthorizationServerResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/oauth-authorization-server-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response from an OAuth2 authorization server.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_challenge_endpoint\n                            \n                            \n                                authorization_endpoint\n                            \n                            \n                                code_challenge_methods_supported\n                            \n                            \n                                dpop_signing_alg_values_supported\n                            \n                            \n                                issuer\n                            \n                            \n                                jwks_uri\n                            \n                            \n                                pushed_authorization_request_endpoint\n                            \n                            \n                                require_pushed_authorization_requests\n                            \n                            \n                                token_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_challenge_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:37\n                        \n                    \n\n            \n                \n                    The URL of the authorization challenge endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:13\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's authorization endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        code_challenge_methods_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:21\n                        \n                    \n\n            \n                \n                    List of supported algorithms to sign the challenge\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dpop_signing_alg_values_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:25\n                        \n                    \n\n            \n                \n                    List of supported algorithms for DPoP signing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwks_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:17\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushed_authorization_request_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    The URL of the pushed authorization request endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        require_pushed_authorization_requests\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:29\n                        \n                    \n\n            \n                \n                    Indicates whether the server requires pushed authorization requests.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's token endpoint.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Oauth2AuthorizationServerResponse {\n    issuer: string;\n    /**\n     * The URL of the OAuth2 authorization server's token endpoint.\n     */\n    token_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's authorization endpoint.\n     */\n    authorization_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n     */\n    jwks_uri: string;\n    /**\n     * List of supported algorithms to sign the challenge\n     */\n    code_challenge_methods_supported: string[];\n    /**\n     * List of supported algorithms for DPoP signing.\n     */\n    dpop_signing_alg_values_supported: string[];\n    /**\n     * Indicates whether the server requires pushed authorization requests.\n     */\n    require_pushed_authorization_requests: boolean;\n    /**\n     * The URL of the pushed authorization request endpoint.\n     */\n    pushed_authorization_request_endpoint: string;\n    /**\n     * The URL of the authorization challenge endpoint.\n     */\n    authorization_challenge_endpoint: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferRequest.html":{"url":"classes/OfferRequest.html","title":"class - OfferRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                credentialConfigurationIds\n                            \n                            \n                                    \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credentialConfigurationIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ArrayNotEmpty()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:27\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'qrcode', description: 'The type of response expected for the offer request.'})@IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:20\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ArrayNotEmpty,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n} from 'class-validator';\nimport { ResponseType } from '../../../verifier/oid4vp/dto/presentation-request.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class OfferRequest {\n    /**\n     * @example \"qrcode\"\n     */\n    @ApiProperty({\n        example: 'qrcode',\n        description: 'The type of response expected for the offer request.',\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * @example [\"pid\"]\n     */\n    @ArrayNotEmpty()\n    @IsString({ each: true })\n    credentialConfigurationIds: string[];\n\n    @IsObject()\n    @IsOptional()\n    values?: { [key: string]: Record };\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferResponse.html":{"url":"classes/OfferResponse.html","title":"class - OfferResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                session\n                            \n                            \n                                uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ArrayNotEmpty,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n} from 'class-validator';\nimport { ResponseType } from '../../../verifier/oid4vp/dto/presentation-request.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class OfferRequest {\n    /**\n     * @example \"qrcode\"\n     */\n    @ApiProperty({\n        example: 'qrcode',\n        description: 'The type of response expected for the offer request.',\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * @example [\"pid\"]\n     */\n    @ArrayNotEmpty()\n    @IsString({ each: true })\n    credentialConfigurationIds: string[];\n\n    @IsObject()\n    @IsOptional()\n    values?: { [key: string]: Record };\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vciController.html":{"url":"controllers/Oid4vciController.html","title":"controller - Oid4vciController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vciController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/oid4vci.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/vci\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                credential\n                            \n                            \n                                    \n                                    \n                                notifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credential\n                        \n                    \n                \n            \n            \n                \n                        \n                    credential(req: Request, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('credential')@SessionLogger('state', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:28\n                        \n                    \n\n\n            \n                \n                        Endpoint to issue credentials\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        notifications\n                        \n                    \n                \n            \n            \n                \n                        \n                    notifications(body: NotificationRequestDto, req: Request, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('notification')@SessionLogger('notification_id', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:42\n                        \n                    \n\n\n            \n                \n                        Notification endpoint\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            NotificationRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Param,\n    Post,\n    Req,\n    UseInterceptors,\n} from '@nestjs/common';\nimport type { CredentialResponse } from '@openid4vc/openid4vci';\nimport type { Request } from 'express';\nimport { Oid4vciService } from '../../issuer/oid4vci/oid4vci.service';\nimport { NotificationRequestDto } from './dto/notification-request.dto';\nimport { SessionLogger } from '../../utils/session-logger.decorator';\nimport { SessionLoggerInterceptor } from '../../utils/session-logger.interceptor';\n\n@Controller(':tenantId/vci')\n@UseInterceptors(SessionLoggerInterceptor)\nexport class Oid4vciController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Endpoint to issue credentials\n     * @param req\n     * @returns\n     */\n    @Post('credential')\n    @SessionLogger('state', 'OID4VCI')\n    credential(\n        @Req() req: Request,\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        return this.oid4vciService.getCredential(req, tenantId);\n    }\n\n    /**\n     * Notification endpoint\n     * @param body\n     * @returns\n     */\n    @Post('notification')\n    @SessionLogger('notification_id', 'OID4VCI')\n    notifications(\n        @Body() body: NotificationRequestDto,\n        @Req() req: Request,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.oid4vciService.handleNotification(req, body, tenantId);\n    }\n\n    //TODO: this endpoint may be relevant for the wallet attestation.\n    /* @Get('session')\n  session() {\n    console.log('Session requested');\n    //TODO store session and created at\n    const session = randomUUID();\n    return {\n      session_id: session,\n    };\n  } */\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Oid4vciService.html":{"url":"injectables/Oid4vciService.html","title":"injectable - Oid4vciService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Oid4vciService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/oid4vci.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                credentialsService\n                            \n                            \n                                    Private\n                                issuer\n                            \n                            \n                                resourceServer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createOffer\n                            \n                            \n                                    Async\n                                getCredential\n                            \n                            \n                                    Async\n                                handleNotification\n                            \n                            \n                                    Async\n                                issuerMetadata\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authzService: AuthorizeService, cryptoService: CryptoService, credentialsService: CredentialsService, configService: ConfigService, sessionService: SessionService, sessionLogger: SessionLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authzService\n                                                  \n                                                        \n                                                                        AuthorizeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialsService\n                                                  \n                                                        \n                                                                        CredentialsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOffer(body: OfferRequest, user: TokenPayload, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            OfferRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredential\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredential(req: Request, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleNotification(req: Request, body: NotificationRequestDto, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:261\n                        \n                    \n\n\n            \n                \n                        Store the notification in the session based on the notitification id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            NotificationRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        issuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    issuerMetadata(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        credentialsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialsService\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Openid4vciIssuer\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resourceServer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Oauth2ResourceServer\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:39\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    BadRequestException,\n    ConflictException,\n    Injectable,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    type HttpMethod,\n    Oauth2ResourceServer,\n    SupportedAuthenticationScheme,\n    authorizationCodeGrantIdentifier,\n} from '@openid4vc/oauth2';\nimport {\n    type CredentialResponse,\n    type IssuerMetadataResult,\n    Openid4vciDraftVersion,\n    Openid4vciIssuer,\n} from '@openid4vc/openid4vci';\nimport type { Request } from 'express';\nimport { CredentialsService } from '../../issuer/credentials/credentials.service';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { AuthorizeService } from '../authorize/authorize.service';\nimport { getHeadersFromRequest } from './util';\nimport { readFileSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { SessionService } from '../../session/session.service';\nimport { v4 } from 'uuid';\nimport { OfferRequest, OfferResponse } from './dto/offer-request.dto';\nimport { NotificationRequestDto } from './dto/notification-request.dto';\nimport { SessionLoggerService } from '../../utils/session-logger.service';\nimport { SessionLogContext } from '../../utils/session-logger-context';\nimport { TokenPayload } from '../../auth/token.decorator';\n\n@Injectable()\nexport class Oid4vciService implements OnModuleInit {\n    private issuer: Openid4vciIssuer;\n\n    resourceServer: Oauth2ResourceServer;\n\n    constructor(\n        private readonly authzService: AuthorizeService,\n        private readonly cryptoService: CryptoService,\n        public readonly credentialsService: CredentialsService,\n        private readonly configService: ConfigService,\n        private readonly sessionService: SessionService,\n        private readonly sessionLogger: SessionLoggerService,\n    ) {}\n    onModuleInit() {\n        //TODO: align for tenant\n        const callbacks = this.cryptoService.getCallbackContext('');\n        this.issuer = new Openid4vciIssuer({\n            callbacks,\n        });\n        this.resourceServer = new Oauth2ResourceServer({\n            callbacks,\n        });\n    }\n\n    async issuerMetadata(tenantId: string): Promise {\n        const credential_issuer = `${this.configService.getOrThrow(\n            'PUBLIC_URL',\n        )}/${tenantId}`;\n\n        const display = JSON.parse(\n            readFileSync(\n                join(\n                    this.configService.getOrThrow('FOLDER'),\n                    tenantId,\n                    'display.json',\n                ),\n                'utf-8',\n            ),\n        );\n\n        const authorizationServerMetadata =\n            this.authzService.authzMetadata(tenantId);\n\n        let credentialIssuer = this.issuer.createCredentialIssuerMetadata({\n            credential_issuer,\n            credential_configurations_supported:\n                await this.credentialsService.getCredentialConfiguration(\n                    tenantId,\n                ),\n            credential_endpoint: `${credential_issuer}/vci/credential`,\n            authorization_servers: [authorizationServerMetadata.issuer],\n            authorization_server: authorizationServerMetadata.issuer,\n            notification_endpoint: `${credential_issuer}/vci/notification`,\n            batch_credential_issuance: {\n                batch_size: 1,\n            },\n            display,\n        });\n\n        //replace placeholders in the issuer metadata\n        credentialIssuer = JSON.parse(\n            JSON.stringify(credentialIssuer).replace(\n                //g,\n                this.configService.getOrThrow('PUBLIC_URL'),\n            ),\n        );\n\n        return {\n            credentialIssuer,\n            authorizationServers: [authorizationServerMetadata],\n            originalDraftVersion: Openid4vciDraftVersion.Draft14,\n        } as const satisfies IssuerMetadataResult;\n    }\n\n    async createOffer(\n        body: OfferRequest,\n        user: TokenPayload,\n        tenantId: string,\n    ): Promise {\n        const configs =\n            await this.credentialsService.getCredentialConfiguration(user.sub);\n        body.credentialConfigurationIds.map((id) => {\n            if (configs[id] === undefined) {\n                throw new ConflictException(\n                    'Invalid credential configuration ID',\n                );\n            }\n        });\n        const issuerMetadata = await this.issuerMetadata(tenantId);\n        const issuer_state = v4();\n        return this.issuer\n            .createCredentialOffer({\n                credentialConfigurationIds: body.credentialConfigurationIds,\n                grants: {\n                    [authorizationCodeGrantIdentifier]: {\n                        issuer_state,\n                    },\n                },\n                issuerMetadata,\n            })\n            .then(async (offer) => {\n                await this.sessionService.create({\n                    id: issuer_state,\n                    offer: offer.credentialOfferObject,\n                    credentialPayload: body,\n                    tenantId: user.sub,\n                });\n                return {\n                    session: issuer_state,\n                    uri: offer.credentialOffer,\n                } as OfferResponse;\n            });\n    }\n\n    async getCredential(\n        req: Request,\n        tenantId: string,\n    ): Promise {\n        const issuerMetadata = await this.issuerMetadata(tenantId);\n        const parsedCredentialRequest = this.issuer.parseCredentialRequest({\n            issuerMetadata,\n            credentialRequest: req.body as Record,\n        });\n\n        if (parsedCredentialRequest?.proofs?.jwt === undefined) {\n            throw new Error('Invalid credential request');\n        }\n\n        const headers = getHeadersFromRequest(req);\n        const { tokenPayload } =\n            await this.resourceServer.verifyResourceRequest({\n                authorizationServers: issuerMetadata.authorizationServers,\n                request: {\n                    url: `https://${req.host}${req.url}`,\n                    method: req.method as HttpMethod,\n                    headers,\n                },\n                resourceServer:\n                    issuerMetadata.credentialIssuer.credential_issuer,\n                allowedAuthenticationSchemes: [\n                    SupportedAuthenticationScheme.DPoP,\n                ],\n            });\n\n        const session = await this.sessionService.get(\n            tokenPayload.sub as string,\n        );\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId,\n            flowType: 'OID4VCI',\n            stage: 'credential_request',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            credentialConfigurationId:\n                parsedCredentialRequest.credentialConfigurationId,\n            proofCount: parsedCredentialRequest.proofs?.jwt?.length || 0,\n        });\n\n        try {\n            const credentials: string[] = [];\n            for (const jwt of parsedCredentialRequest.proofs.jwt) {\n                const verifiedProof =\n                    await this.issuer.verifyCredentialRequestJwtProof({\n                        //check if this is correct or if the passed nonce is validated.\n                        expectedNonce: tokenPayload.nonce as string,\n                        issuerMetadata: await this.issuerMetadata(tenantId),\n                        jwt,\n                    });\n                const cnf = verifiedProof.signer.publicJwk;\n                const cred = await this.credentialsService.getCredential(\n                    parsedCredentialRequest.credentialConfigurationId as string,\n                    cnf as any,\n                    session,\n                );\n                credentials.push(cred);\n\n                this.sessionLogger.logCredentialIssuance(\n                    logContext,\n                    parsedCredentialRequest.credentialConfigurationId as string,\n                    {\n                        credentialSize: cred.length,\n                        proofVerified: true,\n                    },\n                );\n            }\n\n            const notificationId = v4();\n            session.notifications.push({\n                id: notificationId,\n            });\n            await this.sessionService.add(session.id, tenantId, {\n                notifications: session.notifications,\n            });\n\n            this.sessionLogger.logFlowComplete(logContext, {\n                credentialsIssued: credentials.length,\n                notificationId,\n            });\n\n            return this.issuer.createCredentialResponse({\n                credentials,\n                credentialRequest: parsedCredentialRequest,\n                cNonce: tokenPayload.nonce as string,\n                cNonceExpiresInSeconds: 3600,\n                //this should be stored in the session in case this endpoint is requested multiple times, but the response is differnt.\n                notificationId,\n            });\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                credentialConfigurationId:\n                    parsedCredentialRequest.credentialConfigurationId,\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Store the notification in the session based on the notitification id.\n     * @param req\n     * @param body\n     */\n    async handleNotification(\n        req: Request,\n        body: NotificationRequestDto,\n        tenantId: string,\n    ) {\n        const issuerMetadata = await this.issuerMetadata(tenantId);\n        const headers = getHeadersFromRequest(req);\n        const { tokenPayload } =\n            await this.resourceServer.verifyResourceRequest({\n                authorizationServers: issuerMetadata.authorizationServers,\n                request: {\n                    url: `https://${req.host}${req.url}`,\n                    method: req.method as HttpMethod,\n                    headers,\n                },\n                resourceServer:\n                    issuerMetadata.credentialIssuer.credential_issuer,\n                allowedAuthenticationSchemes: [\n                    SupportedAuthenticationScheme.DPoP,\n                ],\n            });\n\n        const session = await this.sessionService.get(\n            tokenPayload.sub as string,\n        );\n        if (session === undefined) {\n            throw new BadRequestException('Session not found');\n        }\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId,\n            flowType: 'OID4VCI',\n            stage: 'notification',\n        };\n\n        try {\n            const index = session.notifications.findIndex(\n                (notification) => notification.id === body.notification_id,\n            );\n            if (index === -1) {\n                throw new BadRequestException(\n                    'No notifications found in session',\n                );\n            }\n            session.notifications[index] = {\n                id: body.notification_id,\n                event: body.event,\n            };\n            await this.sessionService.add(session.id, tenantId, {\n                notifications: session.notifications,\n            });\n\n            this.sessionLogger.logNotification(logContext, body.event || '', {\n                notificationId: body.notification_id,\n                notificationIndex: index,\n            });\n        } catch (error) {\n            this.sessionLogger.logSessionError(\n                logContext,\n                error as Error,\n                'Failed to handle notification',\n                {\n                    notificationId: body.notification_id,\n                },\n            );\n            throw error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vpController.html":{"url":"controllers/Oid4vpController.html","title":"controller - Oid4vpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/oid4vp\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getRequestWithSession\n                            \n                            \n                                    \n                                    \n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getRequestWithSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRequestWithSession(tenantId: string, requestId: string, session: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('request/:requestId/:session')@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:34\n                        \n                    \n\n\n            \n                \n                        Returns the authorization request for a given requestId and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('response')@SessionLogger('state', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Endpoint to receive the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    Param,\n    Post,\n    UseInterceptors,\n} from '@nestjs/common';\nimport { Oid4vpService } from './oid4vp.service';\nimport { AuthorizationResponse } from './dto/authorization-response.dto';\nimport { SessionLogger } from '../../utils/session-logger.decorator';\nimport { SessionLoggerInterceptor } from '../../utils/session-logger.interceptor';\n\n/**\n * Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n */\n@Controller(':tenantId/oid4vp')\n@UseInterceptors(SessionLoggerInterceptor)\nexport class Oid4vpController {\n    /**\n     * Constructor for the Oid4vpController.\n     * @param oid4vpService - Instance of Oid4vpService for handling OID4VP operations.\n     */\n    constructor(private readonly oid4vpService: Oid4vpService) {}\n\n    /**\n     * Returns the authorization request for a given requestId and session.\n     * @param requestId\n     * @param session\n     * @returns\n     */\n    @Get('request/:requestId/:session')\n    @SessionLogger('session', 'OID4VP')\n    getRequestWithSession(\n        @Param('tenantId') tenantId: string,\n        @Param('requestId') requestId: string,\n        @Param('session') session: string,\n    ) {\n        return this.oid4vpService.createAuthorizationRequest(\n            requestId,\n            tenantId,\n            session,\n        );\n    }\n\n    /**\n     * Endpoint to receive the response from the wallet.\n     * @param body\n     * @returns\n     */\n    @Post('response')\n    @SessionLogger('state', 'OID4VP')\n    getResponse(\n        @Body() body: AuthorizationResponse,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.oid4vpService.getResponse(body, tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/Oid4vpModule.html":{"url":"modules/Oid4vpModule.html","title":"module - Oid4vpModule","body":"\n                   \n\n\n\n\n    Modules\n    Oid4vpModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_imports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nOid4vpModule -->\n\nPresentationsModule->Oid4vpModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nOid4vpModule -->\n\nRegistrarModule->Oid4vpModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            Oid4vpService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vpController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            PresentationsModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            Oid4vpService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { Oid4vpService } from './oid4vp.service';\nimport { Oid4vpController } from './oid4vp.controller';\nimport { CryptoModule } from '../../crypto/crypto.module';\nimport { RegistrarModule } from '../../registrar/registrar.module';\nimport { PresentationsModule } from '../presentations/presentations.module';\nimport { SessionModule } from '../../session/session.module';\nimport { HttpModule } from '@nestjs/axios';\nimport { SessionLoggerService } from '../../utils/session-logger.service';\nimport { SessionLoggerInterceptor } from '../../utils/session-logger.interceptor';\n\n@Module({\n    imports: [\n        CryptoModule,\n        RegistrarModule,\n        PresentationsModule,\n        SessionModule,\n        HttpModule,\n    ],\n    controllers: [Oid4vpController],\n    providers: [Oid4vpService, SessionLoggerService, SessionLoggerInterceptor],\n    exports: [Oid4vpService],\n})\nexport class Oid4vpModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Oid4vpService.html":{"url":"injectables/Oid4vpService.html","title":"injectable - Oid4vpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Oid4vpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAuthorizationRequest\n                            \n                            \n                                    Async\n                                createRequest\n                            \n                            \n                                    Async\n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, encryptionService: EncryptionService, configService: ConfigService, registrarService: RegistrarService, presentationsService: PresentationsService, sessionService: SessionService, httpService: HttpService, sessionLogger: SessionLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/oid4vp/oid4vp.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAuthorizationRequest(requestId: string, tenantId: string, auth_session: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:41\n                        \n                    \n\n\n            \n                \n                        Creates an authorization request for the OID4VP flow.\nThis method generates a JWT that includes the necessary parameters for the authorization request.\nIt initializes the session logging context and logs the start of the flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                auth_session\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRequest(requestId: string, values: PresentationRequestOptions, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:215\n                        \n                    \n\n\n            \n                \n                        Creates a request for the OID4VP flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            PresentationRequestOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:264\n                        \n                    \n\n\n            \n                \n                        Processes the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { randomUUID } from 'node:crypto';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { AuthorizationResponse } from './dto/authorization-response.dto';\nimport { RegistrarService } from '../../registrar/registrar.service';\nimport { PresentationsService } from '../presentations/presentations.service';\nimport { AuthResponse } from '../presentations/dto/auth-response.dto';\nimport { EncryptionService } from '../../crypto/encryption/encryption.service';\nimport { v4 } from 'uuid';\nimport { SessionService } from '../../session/session.service';\nimport { HttpService } from '@nestjs/axios';\nimport { firstValueFrom } from 'rxjs';\nimport { OfferResponse } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport { SessionLoggerService } from '../../utils/session-logger.service';\nimport { SessionLogContext } from '../../utils/session-logger-context';\nimport { PresentationRequestOptions } from './dto/presentation-request-options.dto';\n\n@Injectable()\nexport class Oid4vpService {\n    constructor(\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private configService: ConfigService,\n        private registrarService: RegistrarService,\n        private presentationsService: PresentationsService,\n        private sessionService: SessionService,\n        private httpService: HttpService,\n        private sessionLogger: SessionLoggerService,\n    ) {}\n\n    /**\n     * Creates an authorization request for the OID4VP flow.\n     * This method generates a JWT that includes the necessary parameters for the authorization request.\n     * It initializes the session logging context and logs the start of the flow.\n     * @param requestId\n     * @param tenantId\n     * @param auth_session\n     * @returns\n     */\n    async createAuthorizationRequest(\n        requestId: string,\n        tenantId: string,\n        auth_session: string,\n    ): Promise {\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: auth_session,\n            tenantId,\n            flowType: 'OID4VP',\n            stage: 'authorization_request',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            requestId,\n            action: 'create_authorization_request',\n        });\n\n        try {\n            const host = this.configService.getOrThrow('PUBLIC_URL');\n            const tenantUrl = `${host}/${tenantId}`;\n\n            const values =\n                await this.presentationsService.getPresentationConfig(\n                    requestId,\n                    tenantId,\n                );\n            let regCert: string | undefined = undefined;\n\n            const dcql_query = JSON.parse(\n                JSON.stringify(values.dcql_query).replace(\n                    //g,\n                    tenantUrl,\n                ),\n            );\n\n            if (this.registrarService.isEnabled()) {\n                const registrationCert = JSON.parse(\n                    JSON.stringify(values.registrationCert).replace(\n                        //g,\n                        tenantUrl,\n                    ),\n                );\n                regCert =\n                    await this.registrarService.addRegistrationCertificate(\n                        registrationCert,\n                        dcql_query,\n                        requestId,\n                        tenantId,\n                    );\n            }\n            const nonce = randomUUID();\n            await this.sessionService.add(auth_session, tenantId, {\n                vp_nonce: nonce,\n            });\n\n            this.sessionLogger.logAuthorizationRequest(logContext, {\n                requestId,\n                nonce,\n                regCert,\n                dcqlQueryCount: Array.isArray(dcql_query)\n                    ? dcql_query.length\n                    : 1,\n            });\n\n            const request = {\n                payload: {\n                    response_type: 'vp_token',\n                    client_id: 'x509_san_dns:' + host.replace('https://', ''),\n                    response_uri: `${host}/${tenantId}/oid4vp/response`,\n                    response_mode: 'direct_post.jwt',\n                    nonce,\n                    dcql_query,\n                    client_metadata: {\n                        jwks: {\n                            keys: [\n                                this.encryptionService.getEncryptionPublicKey(),\n                            ],\n                        },\n                        vp_formats: {\n                            mso_mdoc: {\n                                alg: ['EdDSA', 'ES256', 'ES384'],\n                            },\n                            'dc+sd-jwt': {\n                                'kb-jwt_alg_values': [\n                                    'EdDSA',\n                                    'ES256',\n                                    'ES384',\n                                    'ES256K',\n                                ],\n                                'sd-jwt_alg_values': [\n                                    'EdDSA',\n                                    'ES256',\n                                    'ES384',\n                                    'ES256K',\n                                ],\n                            },\n                        },\n                        authorization_encrypted_response_alg: 'ECDH-ES',\n                        authorization_encrypted_response_enc: 'A128GCM',\n                        client_name:\n                            this.configService.getOrThrow('RP_NAME'),\n                        response_types_supported: ['vp_token'],\n                    },\n                    state: auth_session,\n                    aud: host,\n                    exp: Math.floor(Date.now() / 1000) + 60 * 5,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    verifier_attestations: regCert\n                        ? [\n                              {\n                                  format: 'jwt',\n                                  data: regCert,\n                              },\n                          ]\n                        : undefined,\n                },\n                header: {\n                    typ: 'oauth-authz-req+jwt',\n                },\n            };\n\n            let accessCert: string[] | undefined = undefined;\n            try {\n                accessCert = this.cryptoService.getCertChain(\n                    'access',\n                    tenantId,\n                );\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            } catch (err: any) {\n                accessCert = this.cryptoService.getCertChain(\n                    'signing',\n                    tenantId,\n                );\n            }\n\n            const header = {\n                ...request.header,\n                alg: 'ES256',\n                x5c: accessCert,\n            };\n\n            const signedJwt = await this.cryptoService.signJwt(\n                header,\n                request.payload,\n                tenantId,\n            );\n\n            this.sessionLogger.logSession(\n                logContext,\n                'Authorization request created successfully',\n                {\n                    signedJwtLength: signedJwt.length,\n                    certificateChainLength: accessCert?.length || 0,\n                },\n            );\n\n            return signedJwt;\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                requestId,\n                action: 'create_authorization_request',\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Creates a request for the OID4VP flow.\n     * @param requestId\n     * @param values\n     * @param tenantId\n     * @returns\n     */\n    async createRequest(\n        requestId: string,\n        values: PresentationRequestOptions,\n        tenantId: string,\n    ): Promise {\n        const presentationConfig =\n            await this.presentationsService.getPresentationConfig(\n                requestId,\n                tenantId,\n            );\n\n        if (!values.session) {\n            values.session = v4();\n            await this.sessionService.create({\n                id: values.session,\n                webhook: values.webhook ?? presentationConfig.webhook,\n                tenantId,\n            });\n        } else {\n            await this.sessionService.add(values.session, tenantId, {\n                webhook: values.webhook ?? presentationConfig.webhook,\n            });\n        }\n\n        const host = this.configService\n            .getOrThrow('PUBLIC_URL')\n            .replace('https://', '');\n        const params = {\n            client_id: `x509_san_dns:${host}`,\n            request_uri: `${this.configService.getOrThrow('PUBLIC_URL')}/${tenantId}/oid4vp/request/${requestId}/${values.session}`,\n        };\n        const queryString = Object.entries(params)\n            .map(\n                ([key, value]) =>\n                    `${encodeURIComponent(key)}=${encodeURIComponent(value)}`,\n            )\n            .join('&');\n\n        return {\n            uri: queryString,\n            session: values.session,\n        };\n    }\n\n    /**\n     * Processes the response from the wallet.\n     * @param body\n     * @param tenantId\n     */\n    async getResponse(body: AuthorizationResponse, tenantId: string) {\n        const res = await this.encryptionService.decryptJwe(\n            body.response,\n        );\n        const session = await this.sessionService.get(res.state);\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: res.state,\n            tenantId,\n            flowType: 'OID4VP',\n            stage: 'response_processing',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            action: 'process_presentation_response',\n            hasWebhook: !!session.webhook,\n        });\n\n        try {\n            //TODO: load required fields from the config\n            const credentials = await this.presentationsService.parseResponse(\n                res,\n                [],\n                session.vp_nonce as string,\n            );\n\n            this.sessionLogger.logCredentialVerification(\n                logContext,\n                !!credentials && credentials.length > 0,\n                {\n                    credentialCount: credentials?.length || 0,\n                    nonce: session.vp_nonce,\n                },\n            );\n\n            //tell the auth server the result of the session.\n            await this.sessionService.add(res.state, tenantId, {\n                //TODO: not clear why it has to be any\n                credentials: credentials as any,\n            });\n            // if there a a webook URL, send the response there\n            if (session.webhook) {\n                const headers: Record = {};\n                if (\n                    session.webhook.auth &&\n                    session.webhook.auth.type === 'apiKey'\n                ) {\n                    headers[session.webhook.auth.config.headerName] =\n                        session.webhook.auth.config.value;\n                }\n\n                console.log(headers);\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    'Sending webhook notification',\n                    {\n                        webhookUrl: session.webhook.url,\n                        authType: session.webhook.auth?.type || 'none',\n                    },\n                );\n\n                await firstValueFrom(\n                    this.httpService.post(\n                        session.webhook.url,\n                        {\n                            credentials,\n                            session: res.state,\n                        },\n                        {\n                            headers,\n                        },\n                    ),\n                ).then(\n                    async (webhookResponse) => {\n                        //TODO: better: just store it when it's a presentation during issuance\n                        if (webhookResponse.data) {\n                            session.credentialPayload!.values =\n                                webhookResponse.data;\n                            //store received webhook response\n                            await this.sessionService.add(res.state, tenantId, {\n                                credentialPayload: session.credentialPayload,\n                            });\n                        }\n\n                        this.sessionLogger.logSession(\n                            logContext,\n                            'Webhook notification sent successfully',\n                            {\n                                responseStatus: webhookResponse.status,\n                                hasResponseData: !!webhookResponse.data,\n                            },\n                        );\n                    },\n                    (err) => {\n                        this.sessionLogger.logSessionError(\n                            logContext,\n                            err,\n                            'Error sending webhook',\n                            {\n                                webhookUrl: session.webhook!.url,\n                            },\n                        );\n                        throw new Error(\n                            `Error sending webhook: ${err.message || err}`,\n                        );\n                    },\n                );\n            }\n\n            this.sessionLogger.logFlowComplete(logContext, {\n                credentialCount: credentials?.length || 0,\n                webhookSent: !!session.webhook,\n            });\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                action: 'process_presentation_response',\n            });\n            throw error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParResponseDto.html":{"url":"classes/ParResponseDto.html","title":"class - ParResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/par-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expires_in\n                            \n                            \n                                request_uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The expiration time for the request URI in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:5\n                        \n                    \n\n            \n                \n                    The request URI for the Pushed Authorization Request.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ParResponseDto {\n    /**\n     * The request URI for the Pushed Authorization Request.\n     */\n    request_uri: string;\n    /**\n     * The expiration time for the request URI in seconds.\n     */\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Params.html":{"url":"interfaces/Params.html","title":"interface - Params","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Params\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/params.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            headers\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            query\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type Slot = 'body' | 'headers' | 'path' | 'query';\n\nexport type Field =\n    | {\n          in: Exclude;\n          key: string;\n          map?: string;\n      }\n    | {\n          in: Extract;\n          key?: string;\n          map?: string;\n      };\n\nexport interface Fields {\n    allowExtra?: Partial>;\n    args?: ReadonlyArray;\n}\n\nexport type FieldsConfig = ReadonlyArray;\n\nconst extraPrefixesMap: Record = {\n    $body_: 'body',\n    $headers_: 'headers',\n    $path_: 'path',\n    $query_: 'query',\n};\nconst extraPrefixes = Object.entries(extraPrefixesMap);\n\ntype KeyMap = Map;\n\nconst buildKeyMap = (fields: FieldsConfig, map?: KeyMap): KeyMap => {\n    if (!map) {\n        map = new Map();\n    }\n\n    for (const config of fields) {\n        if ('in' in config) {\n            if (config.key) {\n                map.set(config.key, {\n                    in: config.in,\n                    map: config.map,\n                });\n            }\n        } else if (config.args) {\n            buildKeyMap(config.args, map);\n        }\n    }\n\n    return map;\n};\n\ninterface Params {\n    body: unknown;\n    headers: Record;\n    path: Record;\n    query: Record;\n}\n\nconst stripEmptySlots = (params: Params) => {\n    for (const [slot, value] of Object.entries(params)) {\n        if (value && typeof value === 'object' && !Object.keys(value).length) {\n            delete params[slot as Slot];\n        }\n    }\n};\n\nexport const buildClientParams = (\n    args: ReadonlyArray,\n    fields: FieldsConfig,\n) => {\n    const params: Params = {\n        body: {},\n        headers: {},\n        path: {},\n        query: {},\n    };\n\n    const map = buildKeyMap(fields);\n\n    let config: FieldsConfig[number] | undefined;\n\n    for (const [index, arg] of args.entries()) {\n        if (fields[index]) {\n            config = fields[index];\n        }\n\n        if (!config) {\n            continue;\n        }\n\n        if ('in' in config) {\n            if (config.key) {\n                const field = map.get(config.key)!;\n                const name = field.map || config.key;\n                (params[field.in] as Record)[name] = arg;\n            } else {\n                params.body = arg;\n            }\n        } else {\n            for (const [key, value] of Object.entries(arg ?? {})) {\n                const field = map.get(key);\n\n                if (field) {\n                    const name = field.map || key;\n                    (params[field.in] as Record)[name] = value;\n                } else {\n                    const extra = extraPrefixes.find(([prefix]) =>\n                        key.startsWith(prefix),\n                    );\n\n                    if (extra) {\n                        const [prefix, slot] = extra;\n                        (params[slot] as Record)[\n                            key.slice(prefix.length)\n                        ] = value;\n                    } else {\n                        for (const [slot, allowed] of Object.entries(\n                            config.allowExtra ?? {},\n                        )) {\n                            if (allowed) {\n                                (\n                                    params[slot as Slot] as Record\n                                )[key] = value;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    stripEmptySlots(params);\n\n    return params;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html","title":"interface - ParsedAccessTokenAuthorizationCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenAuthorizationCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                        \n                                            grantType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:         AuthorizationCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AuthorizationCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n} from '@openid4vc/oauth2';\nimport type { Request, Response } from 'express';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { getHeadersFromRequest } from '../oid4vci/util';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { Oid4vpService } from '../../verifier/oid4vp/oid4vp.service';\nimport { SessionService } from '../../session/session.service';\nimport { CredentialsService } from '../credentials/credentials.service';\nimport { WebhookConfig } from '../../utils/webhook.dto';\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private credentialsService: CredentialsService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(tenantId: string): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow('PUBLIC_URL') +\n            `/${tenantId}`;\n        return this.getAuthorizationServer(\n            tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: ['ES256'],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n        tenantId: string,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        'request_uri not found or not provided in the request',\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                'request_uri not found or not provided in the request',\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!, tenantId);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        tenantId: string,\n    ): Promise {\n        const url = `${this.configService.getOrThrow('PUBLIC_URL')}${req.url}`;\n\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const session = await this.sessionService.getBy({\n            authorization_code: body.code,\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        }\n        const authorizationServerMetadata = this.authzMetadata(tenantId);\n        //TODO: handle response\n        const { dpop } = await this.getAuthorizationServer(\n            tenantId,\n        ).verifyAuthorizationCodeAccessTokenRequest({\n            grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n            accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n            expectedCode: session.authorization_code as string,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n            dpop: {\n                required: true,\n                allowedSigningAlgs:\n                    authorizationServerMetadata.dpop_signing_alg_values_supported,\n                jwt: parsedAccessTokenRequest.dpop?.jwt,\n            },\n            authorizationServerMetadata,\n        });\n\n        const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow('PUBLIC_URL')}/${tenantId}`,\n            signer: {\n                method: 'jwk',\n                alg: 'ES256',\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            cNonce,\n            cNonceExpiresIn: 100,\n            clientId: 'wallet', // must be same as the client attestation\n            dpop,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest('pid', { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: 'insufficient_authorization',\n            auth_session,\n            presentation,\n            error_description:\n                'Presentation of credential required before issuance',\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        tenantId: string,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n            //check if session has valid presentation, we assume for now\n            await this.sendAuthorizationCode(res, body.auth_session, tenantId);\n            return;\n        }\n\n        const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        }\n        const ids = session.offer!.credential_configuration_ids;\n        const config = await this.credentialsService.getConfigById(\n            ids[0],\n            tenantId,\n        );\n        if (config.presentation_during_issuance) {\n            const webhook = config.presentation_during_issuance.webhook;\n            const response = await this.parseChallengeRequest(\n                body,\n                tenantId,\n                webhook,\n            );\n            res.status(400).send(response);\n        } else {\n            await this.sendAuthorizationCode(res, body.issuer_state!, tenantId);\n        }\n    }\n\n    private async sendAuthorizationCode(\n        res: Response,\n        issuer_state: string,\n        tenantId: string,\n    ) {\n        const authorization_code = await this.setAuthCode(\n            issuer_state,\n            tenantId,\n        );\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string, tenantId: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, tenantId, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PathSerializer.html":{"url":"interfaces/PathSerializer.html","title":"interface - PathSerializer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PathSerializer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/utils.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { getAuthToken } from '../core/auth';\nimport type {\n    QuerySerializer,\n    QuerySerializerOptions,\n} from '../core/bodySerializer';\nimport { jsonBodySerializer } from '../core/bodySerializer';\nimport {\n    serializeArrayParam,\n    serializeObjectParam,\n    serializePrimitiveParam,\n} from '../core/pathSerializer';\nimport type { Client, ClientOptions, Config, RequestOptions } from './types';\n\ninterface PathSerializer {\n    path: Record;\n    url: string;\n}\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\ntype ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\ntype ArraySeparatorStyle = ArrayStyle | MatrixStyle;\n\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n    let url = _url;\n    const matches = _url.match(PATH_PARAM_RE);\n    if (matches) {\n        for (const match of matches) {\n            let explode = false;\n            let name = match.substring(1, match.length - 1);\n            let style: ArraySeparatorStyle = 'simple';\n\n            if (name.endsWith('*')) {\n                explode = true;\n                name = name.substring(0, name.length - 1);\n            }\n\n            if (name.startsWith('.')) {\n                name = name.substring(1);\n                style = 'label';\n            } else if (name.startsWith(';')) {\n                name = name.substring(1);\n                style = 'matrix';\n            }\n\n            const value = path[name];\n\n            if (value === undefined || value === null) {\n                continue;\n            }\n\n            if (Array.isArray(value)) {\n                url = url.replace(\n                    match,\n                    serializeArrayParam({ explode, name, style, value }),\n                );\n                continue;\n            }\n\n            if (typeof value === 'object') {\n                url = url.replace(\n                    match,\n                    serializeObjectParam({\n                        explode,\n                        name,\n                        style,\n                        value: value as Record,\n                        valueOnly: true,\n                    }),\n                );\n                continue;\n            }\n\n            if (style === 'matrix') {\n                url = url.replace(\n                    match,\n                    `;${serializePrimitiveParam({\n                        name,\n                        value: value as string,\n                    })}`,\n                );\n                continue;\n            }\n\n            const replaceValue = encodeURIComponent(\n                style === 'label' ? `.${value as string}` : (value as string),\n            );\n            url = url.replace(match, replaceValue);\n        }\n    }\n    return url;\n};\n\nexport const createQuerySerializer = ({\n    allowReserved,\n    array,\n    object,\n}: QuerySerializerOptions = {}) => {\n    const querySerializer = (queryParams: T) => {\n        const search: string[] = [];\n        if (queryParams && typeof queryParams === 'object') {\n            for (const name in queryParams) {\n                const value = queryParams[name];\n\n                if (value === undefined || value === null) {\n                    continue;\n                }\n\n                if (Array.isArray(value)) {\n                    const serializedArray = serializeArrayParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'form',\n                        value,\n                        ...array,\n                    });\n                    if (serializedArray) search.push(serializedArray);\n                } else if (typeof value === 'object') {\n                    const serializedObject = serializeObjectParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'deepObject',\n                        value: value as Record,\n                        ...object,\n                    });\n                    if (serializedObject) search.push(serializedObject);\n                } else {\n                    const serializedPrimitive = serializePrimitiveParam({\n                        allowReserved,\n                        name,\n                        value: value as string,\n                    });\n                    if (serializedPrimitive) search.push(serializedPrimitive);\n                }\n            }\n        }\n        return search.join('&');\n    };\n    return querySerializer;\n};\n\n/**\n * Infers parseAs value from provided Content-Type header.\n */\nexport const getParseAs = (\n    contentType: string | null,\n): Exclude => {\n    if (!contentType) {\n        // If no Content-Type header is provided, the best we can do is return the raw response body,\n        // which is effectively the same as the 'stream' option.\n        return 'stream';\n    }\n\n    const cleanContent = contentType.split(';')[0]?.trim();\n\n    if (!cleanContent) {\n        return;\n    }\n\n    if (\n        cleanContent.startsWith('application/json') ||\n        cleanContent.endsWith('+json')\n    ) {\n        return 'json';\n    }\n\n    if (cleanContent === 'multipart/form-data') {\n        return 'formData';\n    }\n\n    if (\n        ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n            cleanContent.startsWith(type),\n        )\n    ) {\n        return 'blob';\n    }\n\n    if (cleanContent.startsWith('text/')) {\n        return 'text';\n    }\n\n    return;\n};\n\nexport const setAuthParams = async ({\n    security,\n    ...options\n}: Pick, 'security'> &\n    Pick & {\n        headers: Headers;\n    }) => {\n    for (const auth of security) {\n        const token = await getAuthToken(auth, options.auth);\n\n        if (!token) {\n            continue;\n        }\n\n        const name = auth.name ?? 'Authorization';\n\n        switch (auth.in) {\n            case 'query':\n                if (!options.query) {\n                    options.query = {};\n                }\n                options.query[name] = token;\n                break;\n            case 'cookie':\n                options.headers.append('Cookie', `${name}=${token}`);\n                break;\n            case 'header':\n            default:\n                options.headers.set(name, token);\n                break;\n        }\n\n        return;\n    }\n};\n\nexport const buildUrl: Client['buildUrl'] = (options) => {\n    const url = getUrl({\n        baseUrl: options.baseUrl as string,\n        path: options.path,\n        query: options.query,\n        querySerializer:\n            typeof options.querySerializer === 'function'\n                ? options.querySerializer\n                : createQuerySerializer(options.querySerializer),\n        url: options.url,\n    });\n    return url;\n};\n\nexport const getUrl = ({\n    baseUrl,\n    path,\n    query,\n    querySerializer,\n    url: _url,\n}: {\n    baseUrl?: string;\n    path?: Record;\n    query?: Record;\n    querySerializer: QuerySerializer;\n    url: string;\n}) => {\n    const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n    let url = (baseUrl ?? '') + pathUrl;\n    if (path) {\n        url = defaultPathSerializer({ path, url });\n    }\n    let search = query ? querySerializer(query) : '';\n    if (search.startsWith('?')) {\n        search = search.substring(1);\n    }\n    if (search) {\n        url += `?${search}`;\n    }\n    return url;\n};\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n    const config = { ...a, ...b };\n    if (config.baseUrl?.endsWith('/')) {\n        config.baseUrl = config.baseUrl.substring(0, config.baseUrl.length - 1);\n    }\n    config.headers = mergeHeaders(a.headers, b.headers);\n    return config;\n};\n\nexport const mergeHeaders = (\n    ...headers: Array['headers'] | undefined>\n): Headers => {\n    const mergedHeaders = new Headers();\n    for (const header of headers) {\n        if (!header || typeof header !== 'object') {\n            continue;\n        }\n\n        const iterator =\n            header instanceof Headers\n                ? header.entries()\n                : Object.entries(header);\n\n        for (const [key, value] of iterator) {\n            if (value === null) {\n                mergedHeaders.delete(key);\n            } else if (Array.isArray(value)) {\n                for (const v of value) {\n                    mergedHeaders.append(key, v as string);\n                }\n            } else if (value !== undefined) {\n                // assume object headers are meant to be JSON stringified, i.e. their\n                // content value in OpenAPI specification is 'application/json'\n                mergedHeaders.set(\n                    key,\n                    typeof value === 'object'\n                        ? JSON.stringify(value)\n                        : (value as string),\n                );\n            }\n        }\n    }\n    return mergedHeaders;\n};\n\ntype ErrInterceptor = (\n    error: Err,\n    response: Res,\n    request: Req,\n    options: Options,\n) => Err | Promise;\n\ntype ReqInterceptor = (\n    request: Req,\n    options: Options,\n) => Req | Promise;\n\ntype ResInterceptor = (\n    response: Res,\n    request: Req,\n    options: Options,\n) => Res | Promise;\n\nclass Interceptors {\n    _fns: (Interceptor | null)[];\n\n    constructor() {\n        this._fns = [];\n    }\n\n    clear() {\n        this._fns = [];\n    }\n\n    getInterceptorIndex(id: number | Interceptor): number {\n        if (typeof id === 'number') {\n            return this._fns[id] ? id : -1;\n        } else {\n            return this._fns.indexOf(id);\n        }\n    }\n    exists(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        return !!this._fns[index];\n    }\n\n    eject(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = null;\n        }\n    }\n\n    update(id: number | Interceptor, fn: Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = fn;\n            return id;\n        } else {\n            return false;\n        }\n    }\n\n    use(fn: Interceptor) {\n        this._fns = [...this._fns, fn];\n        return this._fns.length - 1;\n    }\n}\n\n// `createInterceptors()` response, meant for external use as it does not\n// expose internals\nexport interface Middleware {\n    error: Pick>,\n        'eject' | 'use'\n    >;\n    request: Pick>, 'eject' | 'use'>;\n    response: Pick>,\n        'eject' | 'use'\n    >;\n}\n\n// do not add `Middleware` as return type so we can use _fns internally\nexport const createInterceptors = () => ({\n    error: new Interceptors>(),\n    request: new Interceptors>(),\n    response: new Interceptors>(),\n});\n\nconst defaultQuerySerializer = createQuerySerializer({\n    allowReserved: false,\n    array: {\n        explode: true,\n        style: 'form',\n    },\n    object: {\n        explode: true,\n        style: 'deepObject',\n    },\n});\n\nconst defaultHeaders = {\n    'Content-Type': 'application/json',\n};\n\nexport const createConfig = (\n    override: Config & T> = {},\n): Config & T> => ({\n    ...jsonBodySerializer,\n    headers: defaultHeaders,\n    parseAs: 'auto',\n    querySerializer: defaultQuerySerializer,\n    ...override,\n});\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PresentationConfig.html":{"url":"entities/PresentationConfig.html","title":"entity - PresentationConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PresentationConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a configuration for a Verifiable Presentation (VP) request.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                dcql_query\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                registrationCert\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:50\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        dcql_query\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:32\n                        \n                    \n\n            \n                \n                    The DCQL query to be used for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:17\n                        \n                    \n\n            \n                \n                    Unique identifier for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        registrationCert\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistrationCertificateRequest\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:38\n                        \n                    \n\n            \n                \n                    The registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:24\n                        \n                    \n\n            \n                \n                    The tenant ID for which the VP request is made.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:44\n                        \n                    \n\n            \n                \n                    Optional webhook URL to receive the response.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { IsString, IsObject } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook.dto';\nimport { RegistrationCertificateRequest } from '../dto/vp-request.dto';\nimport { Column, Entity } from 'typeorm';\nimport { ApiHideProperty } from '@nestjs/swagger';\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column('varchar', { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column('varchar', { primary: true })\n    tenantId: string;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column('json')\n    @IsObject()\n    //TODO: define the structure of the DCQL query\n    dcql_query: any;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsObject()\n    @Column('json')\n    registrationCert: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column('json', { nullable: true })\n    @IsObject()\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationDuringIssuance.html":{"url":"classes/PresentationDuringIssuance.html","title":"class - PresentationDuringIssuance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationDuringIssuance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/dto/credential-config.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook.dto';\n\nexport class VCT {\n    @IsString()\n    vct: string;\n    @IsString()\n    name?: string;\n    @IsString()\n    description?: string;\n    @IsString()\n    extends?: string;\n    @IsString()\n    'extends#integrity'?: string;\n    @IsString()\n    schema_uri?: string;\n    @IsString()\n    'schema_uri#integrity'?: string;\n}\n\nexport class PresentationDuringIssuance {\n    @IsString()\n    type: string;\n    @IsObject()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PresentationManagementController.html":{"url":"controllers/PresentationManagementController.html","title":"controller - PresentationManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PresentationManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                presentation-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                configuration\n                            \n                            \n                                    \n                                deleteConfiguration\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                            \n                                    \n                                storePresentationConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        configuration\n                        \n                    \n                \n            \n            \n                \n                        \n                    configuration(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:111\n                        \n                    \n\n\n            \n                \n                        Returns the presentation request configurations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:137\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation request configuration by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: PresentationRequest, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@UseGuards(JwtAuthGuard)@ApiSecurity('oauth2')@ApiBody({type: PresentationRequest, examples: undefined})@Post('request')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:79\n                        \n                    \n\n\n            \n                \n                        Create an presentation request that can be sent to the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            PresentationRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    storePresentationConfig(config: PresentationConfig, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:121\n                        \n                    \n\n\n            \n                \n                        Store a presentation request configuration. If it already exists, it will be updated.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            PresentationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Res,\n    UseGuards,\n} from '@nestjs/common';\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from '@nestjs/swagger';\nimport { PresentationsService } from './presentations.service';\nimport { PresentationConfig } from './entities/presentation-config.entity';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { OfferResponse } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport {\n    PresentationRequest,\n    ResponseType,\n} from '../oid4vp/dto/presentation-request.dto';\nimport { Oid4vpService } from '../oid4vp/oid4vp.service';\nimport * as QRCode from 'qrcode';\nimport { Response } from 'express';\n\n@ApiTags('Presentation management', 'Admin')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2', ['api:read', 'api:write'])\n@Controller('presentation-management')\nexport class PresentationManagementController {\n    constructor(\n        private readonly presentationsService: PresentationsService,\n        private readonly oid4vpService: Oid4vpService,\n    ) {}\n\n    /**\n     * Create an presentation request that can be sent to the user\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: 'JSON response',\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            'application/json': { schema: { type: 'object' } },\n            'image/png': { schema: { type: 'string', format: 'binary' } },\n        },\n    })\n    @ApiProduces('application/json', 'image/png')\n    @UseGuards(JwtAuthGuard)\n    @ApiSecurity('oauth2')\n    @ApiBody({\n        type: PresentationRequest,\n        examples: {\n            qrcode: {\n                summary: 'QR-Code Example',\n                value: {\n                    response_type: ResponseType.QRCode,\n                    requestId: 'pid',\n                },\n            },\n            uri: {\n                summary: 'URI',\n                value: {\n                    response_type: ResponseType.URI,\n                    requestId: 'pid',\n                },\n            },\n        },\n    })\n    @Post('request')\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: PresentationRequest,\n        @Token() user: TokenPayload,\n    ) {\n        const values = await this.oid4vpService.createRequest(\n            body.requestId,\n            {\n                webhook: body.webhook,\n            },\n            user.sub,\n        );\n        values.uri = `openid4vp://?${values.uri}`;\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader('Content-Type', 'image/png');\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n\n    /**\n     * Returns the presentation request configurations.\n     * @returns\n     */\n    @Get()\n    configuration(@Token() user: TokenPayload) {\n        return this.presentationsService.getPresentationConfigs(user.sub);\n    }\n\n    /**\n     * Store a presentation request configuration. If it already exists, it will be updated.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storePresentationConfig(\n        @Body() config: PresentationConfig,\n        @Token() user: TokenPayload,\n    ) {\n        return this.presentationsService.storePresentationConfig(\n            config,\n            user.sub,\n        );\n    }\n\n    /**\n     * Deletes a presentation request configuration by its ID.\n     * @param id\n     * @returns\n     */\n    @Delete(':id')\n    deleteConfiguration(@Param('id') id: string, @Token() user: TokenPayload) {\n        return this.presentationsService.deletePresentationConfig(id, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationRequest.html":{"url":"classes/PresentationRequest.html","title":"class - PresentationRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the presentation request containing the response type and request ID.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                requestId\n                            \n                            \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:33\n                        \n                    \n\n            \n                \n                    Identifier of the presentation configuration\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:26\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:41\n                        \n                    \n\n            \n                \n                    Webhook configuration to receive the response.\nIf not provided, the configured webhook from the configuration will be used.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsObject, IsOptional, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook.dto';\n\n/**\n * Enum for the type of response expected from the presentation request.\n */\nexport enum ResponseType {\n    /**\n     * Response type indicating a QR code will be returned.\n     */\n    QRCode = 'qrcode',\n    /**\n     * Response type indicating a URI will be returned.\n     */\n    URI = 'uri',\n}\n\n/**\n * DTO for the presentation request containing the response type and request ID.\n */\nexport class PresentationRequest {\n    /**\n     * @example qrcode\n     */\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Identifier of the presentation configuration\n     * @example pid\n     */\n    @IsString()\n    requestId: string;\n\n    /**\n     * Webhook configuration to receive the response.\n     * If not provided, the configured webhook from the configuration will be used.\n     */\n    @IsObject()\n    @IsOptional()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PresentationRequestOptions.html":{"url":"interfaces/PresentationRequestOptions.html","title":"interface - PresentationRequestOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PresentationRequestOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PresentationRequestOptions DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            session\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            webhook\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        session\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        session:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional session identifier for tracking the request.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        webhook\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        webhook:         WebhookConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WebhookConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional webhook configuration to receive the response.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { WebhookConfig } from '../../../utils/webhook.dto';\n\n/**\n * PresentationRequestOptions DTO\n */\nexport interface PresentationRequestOptions {\n    /**\n     * Optional session identifier for tracking the request.\n     */\n    session?: string;\n    /**\n     * Optional webhook configuration to receive the response.\n     */\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PresentationsModule.html":{"url":"modules/PresentationsModule.html","title":"module - PresentationsModule","body":"\n                   \n\n\n\n\n    Modules\n    PresentationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_PresentationsModule_imports\n\n\n\n\nResolverModule\n\nResolverModule\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/presentations/presentations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PresentationManagementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ResolverModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { PresentationManagementController } from './presentations.controller';\nimport { PresentationsService } from './presentations.service';\nimport { ResolverModule } from '../resolver/resolver.module';\nimport { HttpModule } from '@nestjs/axios';\nimport { Oid4vpModule } from '../oid4vp/oid4vp.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PresentationConfig } from './entities/presentation-config.entity';\n\n@Module({\n    imports: [\n        ResolverModule,\n        HttpModule,\n        forwardRef(() => Oid4vpModule),\n        TypeOrmModule.forFeature([PresentationConfig]),\n    ],\n    controllers: [PresentationManagementController],\n    providers: [PresentationsService],\n    exports: [PresentationsService],\n})\nexport class PresentationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PresentationsService.html":{"url":"injectables/PresentationsService.html","title":"injectable - PresentationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PresentationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                kbVerifier\n                            \n                            \n                                sdjwtInstance\n                            \n                            \n                                    Private\n                                statusListFetcher\n                            \n                            \n                                verifier\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deletePresentationConfig\n                            \n                            \n                                    Async\n                                getPresentationConfig\n                            \n                            \n                                getPresentationConfigs\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                parseResponse\n                            \n                            \n                                storePresentationConfig\n                            \n                            \n                                    Public\n                                storeRCID\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, resolverService: ResolverService, vpRequestRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/presentations/presentations.service.ts:22\n                            \n                        \n\n                \n                    \n                            Constructor for the PresentationsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of HttpService for making HTTP requests.\n\n\n                                                        \n                                                \n                                                \n                                                        resolverService\n                                                  \n                                                        \n                                                                        ResolverService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ResolverService for resolving DID documents.\n\n\n                                                        \n                                                \n                                                \n                                                        vpRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for managing VP request configurations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deletePresentationConfig\n                        \n                    \n                \n            \n            \n                \ndeletePresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to delete.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to delete the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the deletion is complete.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Retrieves a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the requested PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPresentationConfigs\n                        \n                    \n                \n            \n            \n                \ngetPresentationConfigs(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:54\n                        \n                    \n\n\n            \n                \n                        Retrieves all presentation configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve configurations.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of PresentationConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Initializes the SDJwtVcInstance with the necessary configurations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseResponse\n                        \n                    \n                \n            \n            \n                \nparseResponse(res: AuthResponse, requiredFields: string[], keyBindingNonce: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:177\n                        \n                    \n\n\n            \n                \n                        Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            AuthResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requiredFields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyBindingNonce\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \nstorePresentationConfig(vprequest: PresentationConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Stores a new presentation configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                vprequest\n                                            \n                                                            PresentationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe PresentationConfig entity to store.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        storeRCID\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeRCID(registrationCertId: string, id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Stores the new registration certificate.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registrationCertId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the registration certificate to store.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to update.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the registration certificate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kbVerifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KbVerifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:160\n                        \n                    \n\n            \n                \n                    Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                            \n                                            \n                                                    signature\n                                            \n                                            \n                                                    payload\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sdjwtInstance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SDJwtVcInstance\n\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:22\n                        \n                    \n\n            \n                \n                    Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        statusListFetcher\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:145\n                        \n                    \n\n            \n                \n                    Fetch the status list from the uri.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    uri\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Verifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:122\n                        \n                    \n\n            \n                \n                    Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                                    \n                                                            \nThe data part of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                            \n                                                    signature\n                                                    \n                                                            \nThe signature of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { ConflictException, Injectable, OnModuleInit } from '@nestjs/common';\nimport { digest, ES256 } from '@sd-jwt/crypto-nodejs';\nimport { SDJwtVcInstance } from '@sd-jwt/sd-jwt-vc';\nimport { KbVerifier, Verifier } from '@sd-jwt/types';\nimport { importJWK, JWK, JWTPayload, jwtVerify } from 'jose';\nimport { firstValueFrom } from 'rxjs';\nimport { ResolverService } from '../resolver/resolver.service';\nimport { PresentationConfig } from './entities/presentation-config.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm/repository/Repository';\nimport { AuthResponse } from './dto/auth-response.dto';\n\n/**\n * Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n */\n@Injectable()\nexport class PresentationsService implements OnModuleInit {\n    /**\n     * Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n     */\n    sdjwtInstance: SDJwtVcInstance;\n\n    /**\n     * Constructor for the PresentationsService.\n     * @param httpService - Instance of HttpService for making HTTP requests.\n     * @param resolverService - Instance of ResolverService for resolving DID documents.\n     * @param vpRequestRepository - Repository for managing VP request configurations.\n     */\n    constructor(\n        private httpService: HttpService,\n        private resolverService: ResolverService,\n        @InjectRepository(PresentationConfig)\n        private vpRequestRepository: Repository,\n    ) {}\n\n    /**\n     * Initializes the SDJwtVcInstance with the necessary configurations.\n     */\n    onModuleInit() {\n        this.sdjwtInstance = new SDJwtVcInstance({\n            hasher: digest,\n            verifier: this.verifier.bind(this),\n            kbVerifier: this.kbVerifier.bind(this),\n            statusListFetcher: this.statusListFetcher.bind(this),\n        });\n    }\n\n    /**\n     * Retrieves all presentation configurations for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve configurations.\n     * @returns A promise that resolves to an array of PresentationConfig entities.\n     */\n    getPresentationConfigs(tenantId: string): Promise {\n        return this.vpRequestRepository.find({\n            where: { tenantId },\n            order: { createdAt: 'DESC' },\n        });\n    }\n\n    /**\n     * Stores a new presentation configuration.\n     * @param vprequest - The PresentationConfig entity to store.\n     * @param tenantId - The ID of the tenant for which to store the configuration.\n     * @returns A promise that resolves to the stored PresentationConfig entity.\n     */\n    storePresentationConfig(vprequest: PresentationConfig, tenantId: string) {\n        vprequest.tenantId = tenantId;\n        return this.vpRequestRepository.save(vprequest);\n    }\n\n    /**\n     * Deletes a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to delete.\n     * @param tenantId - The ID of the tenant for which to delete the configuration.\n     * @returns A promise that resolves when the deletion is complete.\n     */\n    deletePresentationConfig(id: string, tenantId: string) {\n        return this.vpRequestRepository.delete({ id, tenantId });\n    }\n\n    /**\n     * Retrieves a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to retrieve.\n     * @param tenantId - The ID of the tenant for which to retrieve the configuration.\n     * @returns A promise that resolves to the requested PresentationConfig entity.\n     */\n    async getPresentationConfig(\n        id: string,\n        tenantId: string,\n    ): Promise {\n        return this.vpRequestRepository\n            .findOneByOrFail({\n                id,\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException('Request ID invalid not found');\n            });\n    }\n\n    /**\n     * Stores the new registration certificate.\n     * @param registrationCertId - The ID of the registration certificate to store.\n     * @param id - The ID of the presentation configuration to update.\n     * @param tenantId - The ID of the tenant for which to store the registration certificate.\n     * @returns\n     */\n    public storeRCID(registrationCertId: string, id: string, tenantId: string) {\n        return this.vpRequestRepository.update(\n            { id, tenantId },\n            { registrationCert: { id: registrationCertId } },\n        );\n    }\n\n    /**\n     * Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n     * @param data - The data part of the SD-JWT-VC.\n     * @param signature - The signature of the SD-JWT-VC.\n     * @returns\n     */\n    verifier: Verifier = async (data, signature) => {\n        const instance = new SDJwtVcInstance({\n            hasher: digest,\n        });\n        const decodedVC = await instance.decode(`${data}.${signature}`);\n        const payload = decodedVC.jwt?.payload as JWTPayload;\n        const header = decodedVC.jwt?.header as JWK;\n        const publicKey = await this.resolverService.resolvePublicKey(\n            payload,\n            header,\n        );\n        const verify = await ES256.getVerifier(publicKey);\n        return verify(data, signature).catch((err) => {\n            console.log(err);\n            return false;\n        });\n    };\n\n    /**\n     * Fetch the status list from the uri.\n     * @param uri\n     * @returns\n     */\n    private statusListFetcher: (uri: string) => Promise = async (\n        uri: string,\n    ) => {\n        return firstValueFrom(this.httpService.get(uri)).then(\n            (res) => res.data,\n        );\n    };\n\n    /**\n     * Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n     * @param data\n     * @param signature\n     * @param payload\n     * @returns\n     */\n    private kbVerifier: KbVerifier = async (data, signature, payload) => {\n        if (!payload.cnf) {\n            throw new Error('No cnf found in the payload');\n        }\n        const key = await importJWK(payload.cnf.jwk as JWK, 'ES256');\n        return jwtVerify(`${data}.${signature}`, key).then(\n            () => true,\n            () => false,\n        );\n    };\n\n    /**\n     * Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n     * @param res\n     * @param requiredFields\n     * @returns\n     */\n    parseResponse(\n        res: AuthResponse,\n        requiredFields: string[],\n        keyBindingNonce: string,\n    ) {\n        const attestations = Object.keys(res.vp_token);\n        const att = attestations.map((att) =>\n            this.sdjwtInstance\n                .verify(res.vp_token[att], {\n                    requiredClaimKeys: requiredFields,\n                    keyBindingNonce,\n                })\n                .then(\n                    (result) => {\n                        return {\n                            id: att,\n                            values: {\n                                ...result.payload,\n                                cnf: undefined, // remove cnf for simplicity\n                                status: undefined, // remove status for simplicity\n                            },\n                        };\n                    },\n                    (err) => ({\n                        // when the verification fails, it will return an error object                (err) => ({\n                        id: att,\n                        error: err.message,\n                    }),\n                ),\n        );\n        return Promise.all(att);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PresentedData.html":{"url":"interfaces/PresentedData.html","title":"interface - PresentedData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PresentedData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            test/webhook/src/index.ts\n        \n\n\n            \n                Description\n            \n            \n                Assuming we receive a PID credentials with the address selectivly disclosed\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            credentials\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        credentials\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        credentials:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface PresentedData {\n\tcredentials: {\n\t\tid: string;\n\t\tvalues: {\n\t\t\taddress: {\n\t\t\t\tlocality: string;\n\t\t\t};\n\t\t};\n\t}[];\n}\n\n/**\n * Response for the citizen credential.\n */\ninterface ProcessResponse {\n\tcitizen: {\n\t\ttown: string;\n\t};\n}\n\nasync function handleRequest(request: Request): Promise {\n\tconst url = new URL(request.url);\n\n\tif (request.method === 'POST' && url.pathname === '/process') {\n\t\tconst presented: PresentedData = await request.json();\n\t\tconst res: ProcessResponse = {\n\t\t\tcitizen: {\n\t\t\t\ttown: `You live in ${presented.credentials[0].values.address.locality}`,\n\t\t\t},\n\t\t};\n\t\treturn Response.json(res, { status: 200 });\n\t}\n\n\tif (request.method === 'POST' && url.pathname === '/consume') {\n\t\tconst expextedApiKey = 'foo-bar'; // This should be securely stored and retrieved\n\t\tconsole.log(request.headers);\n\t\tconst apiKey = request.headers.get('x-api-key');\n\t\tif (apiKey !== expextedApiKey) {\n\t\t\treturn new Response('Unauthorized', { status: 401 });\n\t\t}\n\n\t\tconst presented = await request.json();\n\t\tconsole.log('Received consume webhook:');\n\t\tconsole.log(JSON.stringify(presented, null, 2));\n\t\treturn new Response(null, { status: 200 });\n\t}\n\n\treturn new Response('Not found', { status: 404 });\n}\n\nexport default {\n\tfetch: handleRequest,\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProcessResponse.html":{"url":"interfaces/ProcessResponse.html","title":"interface - ProcessResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProcessResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            test/webhook/src/index.ts\n        \n\n\n            \n                Description\n            \n            \n                Response for the citizen credential.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            citizen\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        citizen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        citizen:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface PresentedData {\n\tcredentials: {\n\t\tid: string;\n\t\tvalues: {\n\t\t\taddress: {\n\t\t\t\tlocality: string;\n\t\t\t};\n\t\t};\n\t}[];\n}\n\n/**\n * Response for the citizen credential.\n */\ninterface ProcessResponse {\n\tcitizen: {\n\t\ttown: string;\n\t};\n}\n\nasync function handleRequest(request: Request): Promise {\n\tconst url = new URL(request.url);\n\n\tif (request.method === 'POST' && url.pathname === '/process') {\n\t\tconst presented: PresentedData = await request.json();\n\t\tconst res: ProcessResponse = {\n\t\t\tcitizen: {\n\t\t\t\ttown: `You live in ${presented.credentials[0].values.address.locality}`,\n\t\t\t},\n\t\t};\n\t\treturn Response.json(res, { status: 200 });\n\t}\n\n\tif (request.method === 'POST' && url.pathname === '/consume') {\n\t\tconst expextedApiKey = 'foo-bar'; // This should be securely stored and retrieved\n\t\tconsole.log(request.headers);\n\t\tconst apiKey = request.headers.get('x-api-key');\n\t\tif (apiKey !== expextedApiKey) {\n\t\t\treturn new Response('Unauthorized', { status: 401 });\n\t\t}\n\n\t\tconst presented = await request.json();\n\t\tconsole.log('Received consume webhook:');\n\t\tconsole.log(JSON.stringify(presented, null, 2));\n\t\treturn new Response(null, { status: 200 });\n\t}\n\n\treturn new Response('Not found', { status: 404 });\n}\n\nexport default {\n\tfetch: handleRequest,\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuerySerializerOptions.html":{"url":"interfaces/QuerySerializerOptions.html","title":"interface - QuerySerializerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QuerySerializerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/bodySerializer.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowReserved\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            array\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            object\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowReserved\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowReserved:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        array\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        array:         SerializerOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SerializerOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        object\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        object:         SerializerOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SerializerOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type {\n    ArrayStyle,\n    ObjectStyle,\n    SerializerOptions,\n} from './pathSerializer';\n\nexport type QuerySerializer = (query: Record) => string;\n\nexport type BodySerializer = (body: any) => any;\n\nexport interface QuerySerializerOptions {\n    allowReserved?: boolean;\n    array?: SerializerOptions;\n    object?: SerializerOptions;\n}\n\nconst serializeFormDataPair = (\n    data: FormData,\n    key: string,\n    value: unknown,\n): void => {\n    if (typeof value === 'string' || value instanceof Blob) {\n        data.append(key, value);\n    } else {\n        data.append(key, JSON.stringify(value));\n    }\n};\n\nconst serializeUrlSearchParamsPair = (\n    data: URLSearchParams,\n    key: string,\n    value: unknown,\n): void => {\n    if (typeof value === 'string') {\n        data.append(key, value);\n    } else {\n        data.append(key, JSON.stringify(value));\n    }\n};\n\nexport const formDataBodySerializer = {\n    bodySerializer:  | Array>,\n    >(\n        body: T,\n    ): FormData => {\n        const data = new FormData();\n\n        Object.entries(body).forEach(([key, value]) => {\n            if (value === undefined || value === null) {\n                return;\n            }\n            if (Array.isArray(value)) {\n                value.forEach((v) => serializeFormDataPair(data, key, v));\n            } else {\n                serializeFormDataPair(data, key, value);\n            }\n        });\n\n        return data;\n    },\n};\n\nexport const jsonBodySerializer = {\n    bodySerializer: (body: T): string =>\n        JSON.stringify(body, (_key, value) =>\n            typeof value === 'bigint' ? value.toString() : value,\n        ),\n};\n\nexport const urlSearchParamsBodySerializer = {\n    bodySerializer:  | Array>,\n    >(\n        body: T,\n    ): string => {\n        const data = new URLSearchParams();\n\n        Object.entries(body).forEach(([key, value]) => {\n            if (value === undefined || value === null) {\n                return;\n            }\n            if (Array.isArray(value)) {\n                value.forEach((v) =>\n                    serializeUrlSearchParamsPair(data, key, v),\n                );\n            } else {\n                serializeUrlSearchParamsPair(data, key, value);\n            }\n        });\n\n        return data.toString();\n    },\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrarConfig.html":{"url":"classes/RegistrarConfig.html","title":"class - RegistrarConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrarConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar-config.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrarConfig class represents the configuration for the registrar service.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                accessCertificateId\n                            \n                            \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        accessCertificateId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar-config.ts:12\n                        \n                    \n\n            \n                \n                    ID of the access certificate.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar-config.ts:8\n                        \n                    \n\n            \n                \n                    ID of the relying party.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class RegistrarConfig {\n    /**\n     * ID of the relying party.\n     */\n    id?: string;\n    /**\n     * ID of the access certificate.\n     */\n    accessCertificateId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RegistrarModule.html":{"url":"modules/RegistrarModule.html","title":"module - RegistrarModule","body":"\n                   \n\n\n\n\n    Modules\n    RegistrarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_imports\n\n\n\ncluster_RegistrarModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/registrar/registrar.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            RegistrarModule is responsible for managing the registrar service.\nIt provides the RegistrarService and imports necessary modules.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            PresentationsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RegistrarService } from './registrar.service';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport * as Joi from 'joi';\nimport { PresentationsModule } from '../verifier/presentations/presentations.module';\n\n/**\n * Validation schema for the registrar module.\n * Defines the required environment variables and their types.\n */\nexport const REGISTRAR_VALIDATION_SCHEMA = {\n    REGISTRAR_URL: Joi.string(),\n    OIDC_ISSUER_URL: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    OIDC_CLIENT_ID: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    OIDC_CLIENT_SECRET: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n};\n\n/**\n * RegistrarModule is responsible for managing the registrar service.\n * It provides the RegistrarService and imports necessary modules.\n */\n@Module({\n    imports: [CryptoModule, PresentationsModule],\n    providers: [RegistrarService],\n    exports: [RegistrarService],\n})\nexport class RegistrarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RegistrarService.html":{"url":"injectables/RegistrarService.html","title":"injectable - RegistrarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RegistrarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar.service.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrarService is responsible for managing the interaction with the registrar,\nincluding adding relying parties, access certificates, and registration certificates.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                accessToken\n                            \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                oauth2Client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                addAccessCertificate\n                            \n                            \n                                    Async\n                                addRegistrationCertificate\n                            \n                            \n                                addRp\n                            \n                            \n                                    Async\n                                getAccessCertificateId\n                            \n                            \n                                isEnabled\n                            \n                            \n                                    Private\n                                loadConfig\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Async\n                                refreshAccessToken\n                            \n                            \n                                    Private\n                                saveConfig\n                            \n                            \n                                    Private\n                                storeExistingRp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, presentationsService: PresentationsService)\n                    \n                \n                        \n                            \n                                Defined in src/registrar/registrar.service.ts:61\n                            \n                        \n\n                \n                    \n                            Constructor for the RegistrarService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ConfigService for accessing configuration values.\n\n\n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of CryptoService for cryptographic operations.\n\n\n                                                        \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of PresentationsService for handling presentations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        addAccessCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addAccessCertificate(config: RegistrarConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:231\n                        \n                    \n\n\n            \n                \n                        Add a new access certificate to the registrar.\nThis is only needed once, when the access certificate is created.\nIf the access certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            RegistrarConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addRegistrationCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addRegistrationCertificate(req: RegistrationCertificateRequest, dcql_query: any, requestId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:272\n                        \n                    \n\n\n            \n                \n                        Add a new registration certificate to the registrar.\nThis is only needed once, when the registration certificate is created.\nIf the registration certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RegistrationCertificateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dcql_query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addRp\n                        \n                    \n                \n            \n            \n                \naddRp(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:161\n                        \n                    \n\n\n            \n                \n                        Adds a new relying party to the registrar.\nThis is only needed once, when the relying party is created.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAccessCertificateId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAccessCertificateId(config: RegistrarConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:204\n                        \n                    \n\n\n            \n                \n                        Get the access certificate ID from the registrar.\nIf there is no access certificate ID in the config, it will add a new one.\nIf there is one, it will check if it is still valid.\nIf it is revoked, it will add a new one.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            RegistrarConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnabled\n                        \n                    \n                \n            \n            \n                \nisEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Checks if the registrar service is enabled based on the configuration.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the registrar service is enabled, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadConfig(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:329\n                        \n                    \n\n\n            \n                \n                        Load the registrar configuration from the config file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         RegistrarConfig\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:117\n                        \n                    \n\n\n            \n                \n                        This function is called when the application starts.\nIt will refresh the access token for the registrar.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Initializes the OAuth2 client and registrar client with the necessary configurations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_KEYS, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:129\n                        \n                    \n\n\n            \n                \n                        This function is called when a tenant is initialized.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshAccessToken()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:144\n                        \n                    \n\n\n            \n                \n                        Refreshes the access token for the registrar using client credentials.\nThis method is called periodically to ensure the access token is valid.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        saveConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveConfig(config: RegistrarConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:352\n                        \n                    \n\n\n            \n                \n                        Save the registrar configuration to the config file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            RegistrarConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        storeExistingRp\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeExistingRp(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:186\n                        \n                    \n\n\n            \n                \n                        Stores the existing relying party ID based on the name.\nThis is used when the relying party already exists in the registrar.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the relying party.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The ID of the existing relying party.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:61\n                        \n                    \n\n            \n                \n                    Access token for authenticating requests to the registrar.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:57\n                        \n                    \n\n            \n                \n                    Client for interacting with the registrar API.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauth2Client\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:53\n                        \n                    \n\n            \n                \n                    OAuth2 client for interacting with the OIDC provider.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { OAuth2Client } from '@badgateway/oauth2-client';\nimport { client } from './generated/client.gen';\nimport {\n    accessCertificateControllerFindOne,\n    accessCertificateControllerRegister,\n    registrationCertificateControllerAll,\n    registrationCertificateControllerRegister,\n    relyingPartyControllerFindAll,\n    relyingPartyControllerRegister,\n} from './generated';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { RegistrationCertificateRequest } from '../verifier/presentations/dto/vp-request.dto';\nimport { PresentationsService } from '../verifier/presentations/presentations.service';\nimport { existsSync, readFileSync, writeFileSync } from 'node:fs';\nimport { RegistrarConfig } from './registrar-config';\nimport { join } from 'node:path';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { TENANT_EVENTS } from '../auth/tenant-events';\n\n/**\n * Repsonse of access certificate request.\n */\ninterface AccessCertificateResponse {\n    /**\n     * Unique identifier of the access certificate.\n     */\n    id: string;\n    /**\n     * The public key in PEM format.\n     */\n    crt: string;\n    /**\n     * Indicates if the access certificate is revoked.\n     */\n    revoked?: boolean;\n}\n\n/**\n * RegistrarService is responsible for managing the interaction with the registrar,\n * including adding relying parties, access certificates, and registration certificates.\n */\n@Injectable()\nexport class RegistrarService implements OnApplicationBootstrap, OnModuleInit {\n    /**\n     * OAuth2 client for interacting with the OIDC provider.\n     */\n    private oauth2Client: OAuth2Client;\n    /**\n     * Client for interacting with the registrar API.\n     */\n    private client: typeof client;\n    /**\n     * Access token for authenticating requests to the registrar.\n     */\n    private accessToken: string;\n\n    /**\n     * Constructor for the RegistrarService.\n     * @param configService - Instance of ConfigService for accessing configuration values.\n     * @param cryptoService - Instance of CryptoService for cryptographic operations.\n     * @param presentationsService - Instance of PresentationsService for handling presentations.\n     */\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private presentationsService: PresentationsService,\n    ) {}\n\n    /**\n     * Initializes the OAuth2 client and registrar client with the necessary configurations.\n     */\n    onModuleInit() {\n        //when not set, we will not use the registrar\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const oidcIssuerUrl =\n            this.configService.getOrThrow('OIDC_ISSUER_URL');\n        const clientId =\n            this.configService.getOrThrow('OIDC_CLIENT_ID');\n        const clientSecret =\n            this.configService.getOrThrow('OIDC_CLIENT_SECRET');\n\n        this.oauth2Client = new OAuth2Client({\n            server: `${oidcIssuerUrl}/protocol/openid-connect/token`,\n            clientId,\n            clientSecret,\n            discoveryEndpoint: `${oidcIssuerUrl}/.well-known/openid-configuration`,\n        });\n\n        this.client = client;\n        this.client.setConfig({\n            baseUrl: this.configService.getOrThrow('REGISTRAR_URL'),\n            auth: () => this.accessToken,\n        });\n    }\n\n    /**\n     * Checks if the registrar service is enabled based on the configuration.\n     * @returns True if the registrar service is enabled, false otherwise.\n     */\n    isEnabled() {\n        return !!this.configService.get('REGISTRAR_URL');\n    }\n\n    /**\n     * This function is called when the application starts.\n     * It will refresh the access token for the registrar.\n     */\n    async onApplicationBootstrap() {\n        if (!this.configService.get('REGISTRAR_URL')) {\n            return;\n        }\n        await this.refreshAccessToken();\n    }\n\n    /**\n     * This function is called when a tenant is initialized.\n     * @param tenantId\n     */\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    async onTenantInit(tenantId: string) {\n        if (!this.isEnabled()) {\n            return;\n        }\n        const config = this.loadConfig(tenantId);\n        if (!config.id) {\n            config.id = await this.addRp(tenantId);\n        }\n        await this.getAccessCertificateId(config, tenantId);\n    }\n\n    /**\n     * Refreshes the access token for the registrar using client credentials.\n     * This method is called periodically to ensure the access token is valid.\n     */\n    async refreshAccessToken() {\n        await this.oauth2Client.clientCredentials().then((token) => {\n            this.accessToken = token.accessToken;\n            const date = new Date();\n            const expirationDate = new Date(token.expiresAt as number);\n            setTimeout(\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                () => this.refreshAccessToken(),\n                expirationDate.getTime() - date.getTime() - 1000,\n            );\n        });\n    }\n\n    /**\n     * Adds a new relying party to the registrar.\n     * This is only needed once, when the relying party is created.\n     */\n    addRp(tenantId: string): Promise {\n        const name = this.configService.getOrThrow('RP_NAME');\n        return relyingPartyControllerRegister({\n            client: this.client,\n            body: {\n                name,\n            },\n        }).then(async (response) => {\n            const config = this.loadConfig(tenantId);\n            if (response.error) {\n                config.id = await this.storeExistingRp(name);\n            } else {\n                config.id = response.data!['id'];\n            }\n            this.saveConfig(config, tenantId);\n            return response.data!['id'];\n        });\n    }\n\n    /**\n     * Stores the existing relying party ID based on the name.\n     * This is used when the relying party already exists in the registrar.\n     * @param name - The name of the relying party.\n     * @returns The ID of the existing relying party.\n     */\n    private storeExistingRp(name: string) {\n        return relyingPartyControllerFindAll({\n            client: this.client,\n            query: {\n                name,\n            },\n        }).then((response) => {\n            return response.data!.find((item) => item.name === name)?.id;\n        });\n    }\n\n    /**\n     * Get the access certificate ID from the registrar.\n     * If there is no access certificate ID in the config, it will add a new one.\n     * If there is one, it will check if it is still valid.\n     * If it is revoked, it will add a new one.\n     * @param config\n     */\n    async getAccessCertificateId(config: RegistrarConfig, tenantId: string) {\n        // if there is no access certificate ID in the config, we need to add it\n        if (!config.accessCertificateId) {\n            await this.addAccessCertificate(config, tenantId);\n        }\n        // if there is one, check if it is still valid\n        await accessCertificateControllerFindOne({\n            client: this.client,\n            path: { rp: config.id, id: config.accessCertificateId! },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error finding access certificate:', res.error);\n            }\n            const data = res.data as AccessCertificateResponse;\n            if (data.revoked) {\n                console.warn('Access certificate is revoked, adding a new one');\n                return this.addAccessCertificate(config, tenantId);\n            }\n        });\n    }\n\n    /**\n     * Add a new access certificate to the registrar.\n     * This is only needed once, when the access certificate is created.\n     * If the access certificate already exists, it will be returned.\n     * @returns\n     */\n    private async addAccessCertificate(\n        config: RegistrarConfig,\n        tenantId: string,\n    ): Promise {\n        const host = this.configService\n            .getOrThrow('PUBLIC_URL')\n            .replace('https://', '');\n        return accessCertificateControllerRegister({\n            client: this.client,\n            body: {\n                publicKey: await this.cryptoService.keyService.getPublicKey(\n                    'pem',\n                    tenantId,\n                ),\n                dns: [host],\n            },\n            path: {\n                rp: config.id,\n            },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error adding access certificate:', res.error);\n                throw new Error('Error adding access certificate');\n            }\n            //store the cert\n            this.cryptoService.storeAccessCertificate(\n                res.data!['crt'],\n                tenantId,\n            );\n            config.accessCertificateId = res.data!['id'];\n            this.saveConfig(config, tenantId);\n            return res.data!['id'];\n        });\n    }\n\n    /**\n     * Add a new registration certificate to the registrar.\n     * This is only needed once, when the registration certificate is created.\n     * If the registration certificate already exists, it will be returned.\n     * @returns\n     */\n    async addRegistrationCertificate(\n        req: RegistrationCertificateRequest,\n        //TODO: check if the dcql_query is covered by the registration certificate. If not, we need to throw an error since we do not know the new purpose for it.\n        dcql_query: any,\n        requestId: string,\n        tenantId: string,\n    ) {\n        const rp = this.loadConfig(tenantId).id;\n\n        //TODO: need to check if the access certificate is bound to the access certificate with the subject. Also that the requested fields are matching.\n\n        const certs =\n            (await registrationCertificateControllerAll({\n                client: this.client,\n                path: {\n                    rp,\n                },\n            }).then((res) =>\n                res.data?.filter(\n                    (cert) =>\n                        cert.revoked == null && cert.id === (req.id as string),\n                ),\n            )) || [];\n\n        if (certs?.length > 0) {\n            return certs[0].jwt;\n        }\n\n        return registrationCertificateControllerRegister({\n            client: this.client,\n            path: {\n                rp,\n            },\n            body: req.body,\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\n                    'Error adding registration certificate:',\n                    res.error,\n                );\n                throw new Error('Error adding registration certificate');\n            }\n\n            //TODO: write the ID to the config so its easier to use it. Easier than writing the comparison algorithm (any maybe someone wants to use a different one)\n            await this.presentationsService.storeRCID(\n                res.data!['id'],\n                requestId,\n                tenantId,\n            );\n            return res.data!['jwt'];\n        });\n    }\n\n    /**\n     * Load the registrar configuration from the config file.\n     * @returns\n     */\n    private loadConfig(tenantId: string): RegistrarConfig {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n\n        if (!existsSync(filePath)) {\n            // If the config file does not exist, create an empty config\n            const initialConfig: RegistrarConfig = {};\n            writeFileSync(filePath, JSON.stringify(initialConfig, null, 2));\n            return initialConfig;\n        }\n        const config = JSON.parse(\n            readFileSync(filePath, 'utf-8'),\n        ) as RegistrarConfig;\n        return config;\n    }\n\n    /**\n     * Save the registrar configuration to the config file.\n     * @param config\n     */\n    private saveConfig(config: RegistrarConfig, tenantId: string) {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n        writeFileSync(filePath, JSON.stringify(config, null, 2));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrationCertificateRequest.html":{"url":"classes/RegistrationCertificateRequest.html","title":"class - RegistrationCertificateRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrationCertificateRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/vp-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrationCertificateRequest DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                body\n                            \n                            \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistrationCertificateCreation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:17\n                        \n                    \n\n            \n                \n                    The body of the registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:12\n                        \n                    \n\n            \n                \n                    Identifier of the registration certificate that got issued.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { RegistrationCertificateCreation } from '../../../registrar/generated';\n\n/**\n * RegistrationCertificateRequest DTO\n */\nexport class RegistrationCertificateRequest {\n    /**\n     * Identifier of the registration certificate that got issued.\n     */\n    @IsString()\n    id?: string;\n    /**\n     * The body of the registration certificate request containing the necessary details.\n     */\n    @IsObject()\n    body: RegistrationCertificateCreation;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestOptions.html":{"url":"interfaces/RequestOptions.html","title":"interface - RequestOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Config\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            body\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            query\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            security\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Any body that you want to add to your request.\nhttps://developer.mozilla.org/docs/Web/API/fetch#body\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        security\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        security:         ReadonlyArray\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ReadonlyArray\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Security mechanism(s) to use for the request.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:     Url\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Url\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type { Auth } from '../core/auth';\nimport type { Client as CoreClient, Config as CoreConfig } from '../core/types';\nimport type { Middleware } from './utils';\n\nexport type ResponseStyle = 'data' | 'fields';\n\nexport interface Config\n    extends Omit,\n        CoreConfig {\n    /**\n     * Base URL for all requests made by this client.\n     */\n    baseUrl?: T['baseUrl'];\n    /**\n     * Fetch API implementation. You can use this option to provide a custom\n     * fetch instance.\n     *\n     * @default globalThis.fetch\n     */\n    fetch?: (request: Request) => ReturnType;\n    /**\n     * Please don't use the Fetch client for Next.js applications. The `next`\n     * options won't have any effect.\n     *\n     * Install {@link https://www.npmjs.com/package/@hey-api/client-next `@hey-api/client-next`} instead.\n     */\n    next?: never;\n    /**\n     * Return the response data parsed in a specified format. By default, `auto`\n     * will infer the appropriate method from the `Content-Type` response header.\n     * You can override this behavior with any of the {@link Body} methods.\n     * Select `stream` if you don't want to parse response data at all.\n     *\n     * @default 'auto'\n     */\n    parseAs?:\n        | 'arrayBuffer'\n        | 'auto'\n        | 'blob'\n        | 'formData'\n        | 'json'\n        | 'stream'\n        | 'text';\n    /**\n     * Should we return only data or multiple fields (data, error, response, etc.)?\n     *\n     * @default 'fields'\n     */\n    responseStyle?: ResponseStyle;\n    /**\n     * Throw an error instead of returning it in the response?\n     *\n     * @default false\n     */\n    throwOnError?: T['throwOnError'];\n}\n\nexport interface RequestOptions extends Config {\n    /**\n     * Any body that you want to add to your request.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#body}\n     */\n    body?: unknown;\n    path?: Record;\n    query?: Record;\n    /**\n     * Security mechanism(s) to use for the request.\n     */\n    security?: ReadonlyArray;\n    url: Url;\n}\n\nexport type RequestResult = ThrowOnError extends true\n    ? Promise\n                  ? TData[keyof TData]\n                  : TData\n              : {\n                    data: TData extends Record\n                        ? TData[keyof TData]\n                        : TData;\n                    request: Request;\n                    response: Response;\n                }\n      >\n    : Promise\n                          ? TData[keyof TData]\n                          : TData)\n                    | undefined\n              : (\n                    | {\n                          data: TData extends Record\n                              ? TData[keyof TData]\n                              : TData;\n                          error: undefined;\n                      }\n                    | {\n                          data: undefined;\n                          error: TError extends Record\n                              ? TError[keyof TError]\n                              : TError;\n                      }\n                ) & {\n                    request: Request;\n                    response: Response;\n                }\n      >;\n\nexport interface ClientOptions {\n    baseUrl?: string;\n    responseStyle?: ResponseStyle;\n    throwOnError?: boolean;\n}\n\ntype MethodFn = (\n    options: Omit, 'method'>,\n) => RequestResult;\n\ntype RequestFn = (\n    options: Omit, 'method'> &\n        Pick>, 'method'>,\n) => RequestResult;\n\ntype BuildUrlFn = ;\n        query?: Record;\n        url: string;\n    },\n>(\n    options: Pick & Options,\n) => string;\n\nexport type Client = CoreClient & {\n    interceptors: Middleware;\n};\n\n/**\n * The `createClientConfig()` function will be called on client initialization\n * and the returned object will become the client's initial configuration.\n *\n * You may want to initialize your client this way instead of calling\n * `setConfig()`. This is useful for example if you're using Next.js\n * to ensure your client always has the correct values.\n */\nexport type CreateClientConfig = (\n    override?: Config,\n) => Config & T>;\n\nexport interface TDataShape {\n    body?: unknown;\n    headers?: unknown;\n    path?: unknown;\n    query?: unknown;\n    url: string;\n}\n\ntype OmitKeys = Pick>;\n\nexport type Options = OmitKeys,\n    'body' | 'path' | 'query' | 'url'\n> &\n    Omit;\n\nexport type OptionsLegacyParser = TData extends { body?: any }\n    ? TData extends { headers?: any }\n        ? OmitKeys,\n              'body' | 'headers' | 'url'\n          > &\n              TData\n        : OmitKeys,\n              'body' | 'url'\n          > &\n              TData &\n              Pick, 'headers'>\n    : TData extends { headers?: any }\n      ? OmitKeys,\n            'headers' | 'url'\n        > &\n            TData &\n            Pick, 'body'>\n      : OmitKeys, 'url'> & TData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResolverModule.html":{"url":"modules/ResolverModule.html","title":"module - ResolverModule","body":"\n                   \n\n\n\n\n    Modules\n    ResolverModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\n\nResolverService \n\nResolverService \n\n\n\nResolverModule\n\nResolverModule\n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/resolver/resolver.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ResolverService } from './resolver.service';\nimport { HttpModule } from '@nestjs/axios';\n\n@Module({\n    imports: [HttpModule],\n    providers: [ResolverService],\n    exports: [ResolverService],\n})\nexport class ResolverModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResolverService.html":{"url":"injectables/ResolverService.html","title":"injectable - ResolverService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResolverService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/resolver.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for resolving public keys from JWT payloads and headers.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                resolvePublicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/resolver/resolver.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resolvePublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolvePublicKey(payload: JWTPayload, header: JWK)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/resolver/resolver.service.ts:21\n                        \n                    \n\n\n            \n                \n                        Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWK\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { JWK, JWTPayload } from 'jose';\nimport { HttpService } from '@nestjs/axios';\nimport { firstValueFrom } from 'rxjs';\nimport { X509Certificate } from 'node:crypto';\nimport { IssuerMetadata } from './dto/issuer-metadata.dto';\n\n/**\n * Service for resolving public keys from JWT payloads and headers.\n */\n@Injectable()\nexport class ResolverService {\n    constructor(private httpService: HttpService) {}\n\n    /**\n     * Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n     * @param payload\n     * @param header\n     * @returns\n     */\n    async resolvePublicKey(payload: JWTPayload, header: JWK): Promise {\n        if (!payload.iss) {\n            throw new Error('Issuer not found');\n        }\n\n        if (header.x5c) {\n            //TODO: validate the certificate and the chain of trust!\n            const certs = header.x5c.map(\n                (cert) => new X509Certificate(Buffer.from(cert, 'base64')),\n            );\n            const cert = certs[0];\n            if (!cert.subjectAltName?.includes(payload.iss.split('://')[1])) {\n                throw new Error('Subject and issuer do not match');\n            }\n            return cert.publicKey.export({ format: 'jwk' }) as JWK;\n        }\n        //checl if the key is in the header as jwk\n        if (header['jwk']) {\n            return header['jwk'] as JWK;\n        }\n\n        const response = await firstValueFrom(\n            this.httpService.get(\n                `${payload.iss}/.well-known/jwt-vc-issuer`,\n            ),\n        ).then(\n            (r) => r.data,\n            () => {\n                throw new ConflictException('Issuer not reachable');\n            },\n        );\n        const key = response.jwks.keys.find((key) => key.kid === header.kid);\n        if (!key) {\n            throw new Error('Key not found');\n        }\n        return key;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SchemaResponse.html":{"url":"classes/SchemaResponse.html","title":"class - SchemaResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SchemaResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/dto/schema-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                $schema\n                            \n                            \n                                properties\n                            \n                            \n                                required\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        $schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'https://json-schema.org/draft/2020-12/schema'\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/schema-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/schema-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/schema-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'object'\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/schema-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class SchemaResponse {\n    '$schema' = 'https://json-schema.org/draft/2020-12/schema';\n    type = 'object';\n    properties: Record;\n    required: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializeOptions.html":{"url":"interfaces/SerializeOptions.html","title":"interface - SerializeOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializeOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/pathSerializer.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            SerializePrimitiveOptions\n                            SerializerOptions\n            \n\n\n\n\n    \n\n\n    \n        interface SerializeOptions\n    extends SerializePrimitiveOptions,\n        SerializerOptions {}\n\ninterface SerializePrimitiveOptions {\n    allowReserved?: boolean;\n    name: string;\n}\n\nexport interface SerializerOptions {\n    /**\n     * @default true\n     */\n    explode: boolean;\n    style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n    value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'form':\n            return ',';\n        case 'pipeDelimited':\n            return '|';\n        case 'spaceDelimited':\n            return '%20';\n        default:\n            return ',';\n    }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const serializeArrayParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n}: SerializeOptions & {\n    value: unknown[];\n}) => {\n    if (!explode) {\n        const joinedValues = (\n            allowReserved\n                ? value\n                : value.map((v) => encodeURIComponent(v as string))\n        ).join(separatorArrayNoExplode(style));\n        switch (style) {\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            case 'simple':\n                return joinedValues;\n            default:\n                return `${name}=${joinedValues}`;\n        }\n    }\n\n    const separator = separatorArrayExplode(style);\n    const joinedValues = value\n        .map((v) => {\n            if (style === 'label' || style === 'simple') {\n                return allowReserved ? v : encodeURIComponent(v as string);\n            }\n\n            return serializePrimitiveParam({\n                allowReserved,\n                name,\n                value: v as string,\n            });\n        })\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n    allowReserved,\n    name,\n    value,\n}: SerializePrimitiveParam) => {\n    if (value === undefined || value === null) {\n        return '';\n    }\n\n    if (typeof value === 'object') {\n        throw new Error(\n            'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n        );\n    }\n\n    return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n    valueOnly,\n}: SerializeOptions & {\n    value: Record | Date;\n    valueOnly?: boolean;\n}) => {\n    if (value instanceof Date) {\n        return valueOnly\n            ? value.toISOString()\n            : `${name}=${value.toISOString()}`;\n    }\n\n    if (style !== 'deepObject' && !explode) {\n        let values: string[] = [];\n        Object.entries(value).forEach(([key, v]) => {\n            values = [\n                ...values,\n                key,\n                allowReserved ? (v as string) : encodeURIComponent(v as string),\n            ];\n        });\n        const joinedValues = values.join(',');\n        switch (style) {\n            case 'form':\n                return `${name}=${joinedValues}`;\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            default:\n                return joinedValues;\n        }\n    }\n\n    const separator = separatorObjectExplode(style);\n    const joinedValues = Object.entries(value)\n        .map(([key, v]) =>\n            serializePrimitiveParam({\n                allowReserved,\n                name: style === 'deepObject' ? `${name}[${key}]` : key,\n                value: v as string,\n            }),\n        )\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializePrimitiveOptions.html":{"url":"interfaces/SerializePrimitiveOptions.html","title":"interface - SerializePrimitiveOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializePrimitiveOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/pathSerializer.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowReserved\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowReserved\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowReserved:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface SerializeOptions\n    extends SerializePrimitiveOptions,\n        SerializerOptions {}\n\ninterface SerializePrimitiveOptions {\n    allowReserved?: boolean;\n    name: string;\n}\n\nexport interface SerializerOptions {\n    /**\n     * @default true\n     */\n    explode: boolean;\n    style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n    value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'form':\n            return ',';\n        case 'pipeDelimited':\n            return '|';\n        case 'spaceDelimited':\n            return '%20';\n        default:\n            return ',';\n    }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const serializeArrayParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n}: SerializeOptions & {\n    value: unknown[];\n}) => {\n    if (!explode) {\n        const joinedValues = (\n            allowReserved\n                ? value\n                : value.map((v) => encodeURIComponent(v as string))\n        ).join(separatorArrayNoExplode(style));\n        switch (style) {\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            case 'simple':\n                return joinedValues;\n            default:\n                return `${name}=${joinedValues}`;\n        }\n    }\n\n    const separator = separatorArrayExplode(style);\n    const joinedValues = value\n        .map((v) => {\n            if (style === 'label' || style === 'simple') {\n                return allowReserved ? v : encodeURIComponent(v as string);\n            }\n\n            return serializePrimitiveParam({\n                allowReserved,\n                name,\n                value: v as string,\n            });\n        })\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n    allowReserved,\n    name,\n    value,\n}: SerializePrimitiveParam) => {\n    if (value === undefined || value === null) {\n        return '';\n    }\n\n    if (typeof value === 'object') {\n        throw new Error(\n            'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n        );\n    }\n\n    return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n    valueOnly,\n}: SerializeOptions & {\n    value: Record | Date;\n    valueOnly?: boolean;\n}) => {\n    if (value instanceof Date) {\n        return valueOnly\n            ? value.toISOString()\n            : `${name}=${value.toISOString()}`;\n    }\n\n    if (style !== 'deepObject' && !explode) {\n        let values: string[] = [];\n        Object.entries(value).forEach(([key, v]) => {\n            values = [\n                ...values,\n                key,\n                allowReserved ? (v as string) : encodeURIComponent(v as string),\n            ];\n        });\n        const joinedValues = values.join(',');\n        switch (style) {\n            case 'form':\n                return `${name}=${joinedValues}`;\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            default:\n                return joinedValues;\n        }\n    }\n\n    const separator = separatorObjectExplode(style);\n    const joinedValues = Object.entries(value)\n        .map(([key, v]) =>\n            serializePrimitiveParam({\n                allowReserved,\n                name: style === 'deepObject' ? `${name}[${key}]` : key,\n                value: v as string,\n            }),\n        )\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializePrimitiveParam.html":{"url":"interfaces/SerializePrimitiveParam.html","title":"interface - SerializePrimitiveParam","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializePrimitiveParam\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/pathSerializer.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            SerializePrimitiveOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface SerializeOptions\n    extends SerializePrimitiveOptions,\n        SerializerOptions {}\n\ninterface SerializePrimitiveOptions {\n    allowReserved?: boolean;\n    name: string;\n}\n\nexport interface SerializerOptions {\n    /**\n     * @default true\n     */\n    explode: boolean;\n    style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n    value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'form':\n            return ',';\n        case 'pipeDelimited':\n            return '|';\n        case 'spaceDelimited':\n            return '%20';\n        default:\n            return ',';\n    }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const serializeArrayParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n}: SerializeOptions & {\n    value: unknown[];\n}) => {\n    if (!explode) {\n        const joinedValues = (\n            allowReserved\n                ? value\n                : value.map((v) => encodeURIComponent(v as string))\n        ).join(separatorArrayNoExplode(style));\n        switch (style) {\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            case 'simple':\n                return joinedValues;\n            default:\n                return `${name}=${joinedValues}`;\n        }\n    }\n\n    const separator = separatorArrayExplode(style);\n    const joinedValues = value\n        .map((v) => {\n            if (style === 'label' || style === 'simple') {\n                return allowReserved ? v : encodeURIComponent(v as string);\n            }\n\n            return serializePrimitiveParam({\n                allowReserved,\n                name,\n                value: v as string,\n            });\n        })\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n    allowReserved,\n    name,\n    value,\n}: SerializePrimitiveParam) => {\n    if (value === undefined || value === null) {\n        return '';\n    }\n\n    if (typeof value === 'object') {\n        throw new Error(\n            'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n        );\n    }\n\n    return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n    valueOnly,\n}: SerializeOptions & {\n    value: Record | Date;\n    valueOnly?: boolean;\n}) => {\n    if (value instanceof Date) {\n        return valueOnly\n            ? value.toISOString()\n            : `${name}=${value.toISOString()}`;\n    }\n\n    if (style !== 'deepObject' && !explode) {\n        let values: string[] = [];\n        Object.entries(value).forEach(([key, v]) => {\n            values = [\n                ...values,\n                key,\n                allowReserved ? (v as string) : encodeURIComponent(v as string),\n            ];\n        });\n        const joinedValues = values.join(',');\n        switch (style) {\n            case 'form':\n                return `${name}=${joinedValues}`;\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            default:\n                return joinedValues;\n        }\n    }\n\n    const separator = separatorObjectExplode(style);\n    const joinedValues = Object.entries(value)\n        .map(([key, v]) =>\n            serializePrimitiveParam({\n                allowReserved,\n                name: style === 'deepObject' ? `${name}[${key}]` : key,\n                value: v as string,\n            }),\n        )\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializerOptions.html":{"url":"interfaces/SerializerOptions.html","title":"interface - SerializerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/pathSerializer.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            explode\n                                        \n                                \n                                \n                                        \n                                            style\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        explode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        explode:         boolean\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : true\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        style\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        style:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface SerializeOptions\n    extends SerializePrimitiveOptions,\n        SerializerOptions {}\n\ninterface SerializePrimitiveOptions {\n    allowReserved?: boolean;\n    name: string;\n}\n\nexport interface SerializerOptions {\n    /**\n     * @default true\n     */\n    explode: boolean;\n    style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n    value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'form':\n            return ',';\n        case 'pipeDelimited':\n            return '|';\n        case 'spaceDelimited':\n            return '%20';\n        default:\n            return ',';\n    }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const serializeArrayParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n}: SerializeOptions & {\n    value: unknown[];\n}) => {\n    if (!explode) {\n        const joinedValues = (\n            allowReserved\n                ? value\n                : value.map((v) => encodeURIComponent(v as string))\n        ).join(separatorArrayNoExplode(style));\n        switch (style) {\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            case 'simple':\n                return joinedValues;\n            default:\n                return `${name}=${joinedValues}`;\n        }\n    }\n\n    const separator = separatorArrayExplode(style);\n    const joinedValues = value\n        .map((v) => {\n            if (style === 'label' || style === 'simple') {\n                return allowReserved ? v : encodeURIComponent(v as string);\n            }\n\n            return serializePrimitiveParam({\n                allowReserved,\n                name,\n                value: v as string,\n            });\n        })\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n    allowReserved,\n    name,\n    value,\n}: SerializePrimitiveParam) => {\n    if (value === undefined || value === null) {\n        return '';\n    }\n\n    if (typeof value === 'object') {\n        throw new Error(\n            'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n        );\n    }\n\n    return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n    valueOnly,\n}: SerializeOptions & {\n    value: Record | Date;\n    valueOnly?: boolean;\n}) => {\n    if (value instanceof Date) {\n        return valueOnly\n            ? value.toISOString()\n            : `${name}=${value.toISOString()}`;\n    }\n\n    if (style !== 'deepObject' && !explode) {\n        let values: string[] = [];\n        Object.entries(value).forEach(([key, v]) => {\n            values = [\n                ...values,\n                key,\n                allowReserved ? (v as string) : encodeURIComponent(v as string),\n            ];\n        });\n        const joinedValues = values.join(',');\n        switch (style) {\n            case 'form':\n                return `${name}=${joinedValues}`;\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            default:\n                return joinedValues;\n        }\n    }\n\n    const separator = separatorObjectExplode(style);\n    const joinedValues = Object.entries(value)\n        .map(([key, v]) =>\n            serializePrimitiveParam({\n                allowReserved,\n                name: style === 'deepObject' ? `${name}[${key}]` : key,\n                value: v as string,\n            }),\n        )\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Session.html":{"url":"entities/Session.html","title":"entity - Session","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/entities/session.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a user session in the application.\nIt includes various properties such as credentials, authorization code,\nrequest URI, authorization queries, and more.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                auth_queries\n                            \n                            \n                                    \n                                    Optional\n                                authorization_code\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                credentialPayload\n                            \n                            \n                                    \n                                    Optional\n                                credentials\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                notifications\n                            \n                            \n                                    \n                                    Optional\n                                offer\n                            \n                            \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    Optional\n                                vp_nonce\n                            \n                            \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        auth_queries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthorizeQueries\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:56\n                        \n                    \n\n            \n                \n                    Authorization queries associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        authorization_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:46\n                        \n                    \n\n            \n                \n                    Authorization code for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:66\n                        \n                    \n\n            \n                \n                    Credential offer object containing details about the credential offer or presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentialPayload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OfferRequest\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:76\n                        \n                    \n\n            \n                \n                    Credential payload containing the offer request details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :     VerificationResult[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:41\n                        \n                    \n\n            \n                \n                    Verified credentials from the verification process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:36\n                        \n                    \n\n            \n                \n                    Unique identifier for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Notification[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:86\n                        \n                    \n\n            \n                \n                    Notifications associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        offer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialOfferObject\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:71\n                        \n                    \n\n            \n                \n                    Credential offer object containing details about the credential offer or presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:51\n                        \n                    \n\n            \n                \n                    Request URI from the authorization request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:91\n                        \n                    \n\n            \n                \n                    Tenant ID for multi-tenancy support.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        vp_nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:61\n                        \n                    \n\n            \n                \n                    Noncce from the Verifiable Presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:81\n                        \n                    \n\n            \n                \n                    Webhook configuration to send result and may receive further information.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n    CredentialOfferObject,\n    NotificationEvent,\n} from '@openid4vc/openid4vci';\nimport { VerificationResult } from '@sd-jwt/sd-jwt-vc';\nimport { AuthorizeQueries } from '../../issuer/authorize/dto/authorize-request.dto';\nimport { OfferRequest } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport { Column, Entity, PrimaryColumn } from 'typeorm';\nimport { WebhookConfig } from '../../utils/webhook.dto';\n\n/**\n * Represents a session entity for managing user sessions in the application.\n */\ntype Notification = {\n    /**\n     * Unique identifier for the notification.\n     */\n    id: string;\n    /**\n     * The type of notification.\n     */\n    event?: NotificationEvent;\n};\n\n/**\n * Entity representing a user session in the application.\n * It includes various properties such as credentials, authorization code,\n * request URI, authorization queries, and more.\n */\n@Entity()\nexport class Session {\n    /**\n     * Unique identifier for the session.\n     */\n    @PrimaryColumn('uuid')\n    id: string;\n    /**\n     * Verified credentials from the verification process.\n     */\n    @Column('json', { nullable: true })\n    credentials?: VerificationResult[];\n    /**\n     * Authorization code for the session.\n     */\n    @Column('varchar', { nullable: true })\n    authorization_code?: string;\n    /**\n     * Request URI from the authorization request.\n     */\n    @Column('varchar', { nullable: true })\n    request_uri?: string;\n    /**\n     * Authorization queries associated with the session.\n     */\n    @Column('json', { nullable: true })\n    auth_queries?: AuthorizeQueries;\n    /**\n     * Noncce from the Verifiable Presentation request.\n     */\n    @Column('varchar', { nullable: true })\n    vp_nonce?: string;\n    /**\n     * Credential offer object containing details about the credential offer or presentation request.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt: Date;\n    /**\n     * Credential offer object containing details about the credential offer or presentation request.\n     */\n    @Column('json', { nullable: true })\n    offer?: CredentialOfferObject;\n    /**\n     * Credential payload containing the offer request details.\n     */\n    @Column('json', { nullable: true })\n    credentialPayload?: OfferRequest;\n    /**\n     * Webhook configuration to send result and may receive further information.\n     */\n    @Column('json', { nullable: true })\n    webhook?: WebhookConfig;\n    /**\n     * Notifications associated with the session.\n     */\n    @Column('json', { default: JSON.stringify([]) })\n    notifications: Notification[];\n    /**\n     * Tenant ID for multi-tenancy support.\n     */\n    @Column('varchar')\n    tenantId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionController.html":{"url":"controllers/SessionController.html","title":"controller - SessionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                session\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getAllSessions\n                            \n                            \n                                    \n                                getSession\n                            \n                            \n                                    \n                                revokeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getAllSessions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllSessions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:23\n                        \n                    \n\n\n            \n                \n                        Retrieves all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSession(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        Retrieves the session information for a given session ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the session.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        revokeAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    revokeAll(value: StatusUpdateDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('revoke')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:42\n                        \n                    \n\n\n            \n                \n                        Update the status of the credentials of a specific session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Post, UseGuards, Body } from '@nestjs/common';\nimport { ApiSecurity, ApiTags } from '@nestjs/swagger';\nimport { SessionService } from './session.service';\nimport { Session } from './entities/session.entity';\nimport { JwtAuthGuard } from '../auth/auth.guard';\nimport { Token, TokenPayload } from '../auth/token.decorator';\nimport { StatusUpdateDto } from '../issuer/status-list/dto/status-update.dto';\nimport { StatusListService } from '../issuer/status-list/status-list.service';\n\n@ApiTags('Session management', 'Admin')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('session')\nexport class SessionController {\n    constructor(\n        private readonly sessionService: SessionService,\n        private readonly statusListService: StatusListService,\n    ) {}\n\n    /**\n     * Retrieves all sessions.\n     */ @Get()\n    getAllSessions(): Promise {\n        return this.sessionService.getAll();\n    }\n\n    /**\n     * Retrieves the session information for a given session ID.\n     * @param id - The identifier of the session.\n     */\n    @Get(':id')\n    getSession(@Param('id') id: string): Promise {\n        return this.sessionService.get(id);\n    }\n\n    /**\n     * Update the status of the credentials of a specific session.\n     * @param value\n     * @returns\n     */\n    @Post('revoke')\n    revokeAll(@Body() value: StatusUpdateDto, @Token() user: TokenPayload) {\n        return this.statusListService.updateStatus(value, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SessionLogContext.html":{"url":"interfaces/SessionLogContext.html","title":"interface - SessionLogContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SessionLogContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/session-logger-context.ts\n        \n\n\n            \n                Description\n            \n            \n                Context for session logging, including session ID, tenant ID, flow type, and optional stage.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            flowType\n                                        \n                                \n                                \n                                        \n                                            sessionId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stage\n                                        \n                                \n                                \n                                        \n                                            tenantId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/session-logger-context.ts:21\n                            \n                        \n                \n                    \n                        Additional context information for the session.\n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        flowType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flowType:     \"OID4VCI\" | \"OID4VP\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"OID4VCI\" | \"OID4VP\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Type of flow being logged (e.g., OID4VCI, OID4VP).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sessionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sessionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier for the session.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional stage of the flow, useful for tracking progress.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenantId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tenantId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier for the tenant associated with the session.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SessionLogContext {\n    /**\n     * Unique identifier for the session.\n     */\n    sessionId: string;\n    /**\n     * Identifier for the tenant associated with the session.\n     */\n    tenantId: string;\n    /**\n     * Type of flow being logged (e.g., OID4VCI, OID4VP).\n     */\n    flowType: 'OID4VCI' | 'OID4VP';\n    /**\n     * Optional stage of the flow, useful for tracking progress.\n     */\n    stage?: string;\n    /**\n     * Additional context information for the session.\n     */\n    [key: string]: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerInterceptor.html":{"url":"injectables/SessionLoggerInterceptor.html","title":"injectable - SessionLoggerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/session-logger.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for logging session-related requests and responses.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                sanitizeBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, logger: PinoLogger)\n                    \n                \n                        \n                            \n                                Defined in src/utils/session-logger.interceptor.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerInterceptor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nReflector instance for accessing metadata.\n\n\n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.interceptor.ts:34\n                        \n                    \n\n\n            \n                \n                        Intercepts the request and logs session-related information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExecution context of the request.\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCall handler to proceed with the request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that emits the response data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeBody(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.interceptor.ts:131\n                        \n                    \n\n\n            \n                \n                        Sanitizes the request body to remove sensitive information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request body to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Sanitized body.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { PinoLogger } from 'nestjs-pino';\nimport { SESSION_LOGGER_KEY } from './session-logger.decorator';\n\n/**\n * Interceptor for logging session-related requests and responses.\n */\n@Injectable()\nexport class SessionLoggerInterceptor implements NestInterceptor {\n    /**\n     * Constructor for SessionLoggerInterceptor.\n     * @param reflector - Reflector instance for accessing metadata.\n     * @param logger - PinoLogger instance for logging.\n     */\n    constructor(\n        private readonly reflector: Reflector,\n        private readonly logger: PinoLogger,\n    ) {}\n\n    /**\n     * Intercepts the request and logs session-related information.\n     * @param context - Execution context of the request.\n     * @param next - Call handler to proceed with the request.\n     * @returns An observable that emits the response data.\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        const metadata = this.reflector.get(\n            SESSION_LOGGER_KEY,\n            context.getHandler(),\n        );\n\n        if (!metadata) {\n            return next.handle();\n        }\n\n        const { sessionIdParam, flowType } = metadata;\n        const request = context.switchToHttp().getRequest();\n        const response = context.switchToHttp().getResponse();\n\n        // Extract session ID from various sources\n        const sessionId =\n            request.params?.[sessionIdParam] ||\n            request.body?.[sessionIdParam] ||\n            request.headers['x-session-id'] ||\n            request.query?.[sessionIdParam];\n\n        const tenantId = request.params?.tenantId;\n        const method = request.method;\n        const url = request.url;\n\n        // Set context for this logger instance\n        this.logger.setContext('SessionLogger');\n\n        // Create log context\n        const logContext = {\n            sessionId,\n            tenantId,\n            flowType,\n            endpoint: `${method} ${url}`,\n        };\n\n        // Log the start of the request\n        this.logger.info(\n            {\n                ...logContext,\n                event: 'request_start',\n                method,\n                url,\n                headers: {\n                    'user-agent': request.headers['user-agent'],\n                    'content-type': request.headers['content-type'],\n                },\n                body: this.sanitizeBody(request.body),\n            },\n            `[${flowType}] Starting ${method} ${url} for session ${sessionId}`,\n        );\n\n        const startTime = Date.now();\n\n        return next.handle().pipe(\n            tap((data) => {\n                const duration = Date.now() - startTime;\n                this.logger.info(\n                    {\n                        ...logContext,\n                        event: 'request_success',\n                        method,\n                        url,\n                        statusCode: response.statusCode,\n                        duration,\n                        responseSize: JSON.stringify(data || {}).length,\n                    },\n                    `[${flowType}] Completed ${method} ${url} for session ${sessionId} in ${duration}ms`,\n                );\n            }),\n            catchError((error) => {\n                const duration = Date.now() - startTime;\n                this.logger.error(\n                    {\n                        ...logContext,\n                        event: 'request_error',\n                        method,\n                        url,\n                        error: {\n                            name: error.name,\n                            message: error.message,\n                            stack: error.stack,\n                        },\n                        duration,\n                    },\n                    `[${flowType}] Error in ${method} ${url} for session ${sessionId}: ${error.message}`,\n                );\n                throw error;\n            }),\n        );\n    }\n\n    /**\n     * Sanitizes the request body to remove sensitive information.\n     * @param body - The request body to sanitize.\n     * @returns Sanitized body.\n     */\n    private sanitizeBody(body: any): any {\n        if (!body) return body;\n\n        // Create a copy to avoid modifying the original\n        const sanitized = { ...body };\n\n        // Remove sensitive fields\n        const sensitiveFields = [\n            'password',\n            'token',\n            'secret',\n            'key',\n            'private_key',\n            'access_token',\n            'refresh_token',\n        ];\n\n        sensitiveFields.forEach((field) => {\n            if (sanitized[field]) {\n                sanitized[field] = '[REDACTED]';\n            }\n        });\n\n        return sanitized;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerService.html":{"url":"injectables/SessionLoggerService.html","title":"injectable - SessionLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/session-logger.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for logging session-related events and errors.\nUses PinoLogger for structured logging.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logAuthorizationRequest\n                            \n                            \n                                logCredentialIssuance\n                            \n                            \n                                logCredentialVerification\n                            \n                            \n                                logFlowComplete\n                            \n                            \n                                logFlowError\n                            \n                            \n                                logFlowStart\n                            \n                            \n                                logNotification\n                            \n                            \n                                logSession\n                            \n                            \n                                logSessionError\n                            \n                            \n                                logTokenExchange\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger)\n                    \n                \n                        \n                            \n                                Defined in src/utils/session-logger.service.ts:10\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \nlogAuthorizationRequest(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:121\n                        \n                    \n\n\n            \n                \n                        Log authorization request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialIssuance\n                        \n                    \n                \n            \n            \n                \nlogCredentialIssuance(context: SessionLogContext, credentialType: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:81\n                        \n                    \n\n\n            \n                \n                        Log credential issuance step\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialVerification\n                        \n                    \n                \n            \n            \n                \nlogCredentialVerification(context: SessionLogContext, verificationResult: boolean, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:101\n                        \n                    \n\n\n            \n                \n                        Log credential presentation verification\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                verificationResult\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowComplete\n                        \n                    \n                \n            \n            \n                \nlogFlowComplete(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Log session flow completion\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowError\n                        \n                    \n                \n            \n            \n                \nlogFlowError(context: SessionLogContext, error: Error, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Log session flow error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowStart\n                        \n                    \n                \n            \n            \n                \nlogFlowStart(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:22\n                        \n                    \n\n\n            \n                \n                        Log session flow start\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logNotification\n                        \n                    \n                \n            \n            \n                \nlogNotification(context: SessionLogContext, notificationEvent: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:151\n                        \n                    \n\n\n            \n                \n                        Log notification events\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notificationEvent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSession\n                        \n                    \n                \n            \n            \n                \nlogSession(context: SessionLogContext, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:171\n                        \n                    \n\n\n            \n                \n                        Generic session log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSessionError\n                        \n                    \n                \n            \n            \n                \nlogSessionError(context: SessionLogContext, error: Error, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:188\n                        \n                    \n\n\n            \n                \n                        Generic session error log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logTokenExchange\n                        \n                    \n                \n            \n            \n                \nlogTokenExchange(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Log token exchange\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PinoLogger } from 'nestjs-pino';\nimport { SessionLogContext } from './session-logger-context';\n\n/**\n * Service for logging session-related events and errors.\n * Uses PinoLogger for structured logging.\n */\n@Injectable()\nexport class SessionLoggerService {\n    /**\n     * Constructor for SessionLoggerService.\n     * @param logger - PinoLogger instance for logging.\n     */\n    constructor(private readonly logger: PinoLogger) {\n        this.logger.setContext('SessionLoggerService');\n    }\n\n    /**\n     * Log session flow start\n     */\n    logFlowStart(context: SessionLogContext, additionalData?: any) {\n        const message = `[${context.flowType}] Flow started for session ${context.sessionId} in tenant ${context.tenantId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'flow_start',\n                stage: 'initialization',\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow completion\n     */\n    logFlowComplete(context: SessionLogContext, additionalData?: any) {\n        const message = `[${context.flowType}] Flow completed for session ${context.sessionId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'flow_complete',\n                stage: 'completion',\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow error\n     */\n    logFlowError(\n        context: SessionLogContext,\n        error: Error,\n        additionalData?: any,\n    ) {\n        const message = `[${context.flowType}] Flow error for session ${context.sessionId}: ${error.message}`;\n\n        this.logger.error(\n            {\n                ...context,\n                event: 'flow_error',\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log credential issuance step\n     */\n    logCredentialIssuance(\n        context: SessionLogContext,\n        credentialType: string,\n        additionalData?: any,\n    ) {\n        this.logger.info(\n            {\n                ...context,\n                event: 'credential_issuance',\n                stage: 'credential_creation',\n                credentialType,\n                ...additionalData,\n            },\n            `[${context.flowType}] Issuing credential of type ${credentialType} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log credential presentation verification\n     */\n    logCredentialVerification(\n        context: SessionLogContext,\n        verificationResult: boolean,\n        additionalData?: any,\n    ) {\n        this.logger.info(\n            {\n                ...context,\n                event: 'credential_verification',\n                stage: 'verification',\n                verificationResult,\n                ...additionalData,\n            },\n            `[${context.flowType}] Credential verification ${verificationResult ? 'succeeded' : 'failed'} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log authorization request\n     */\n    logAuthorizationRequest(context: SessionLogContext, additionalData?: any) {\n        this.logger.info(\n            {\n                ...context,\n                event: 'authorization_request',\n                stage: 'authorization',\n                ...additionalData,\n            },\n            `[${context.flowType}] Authorization request created for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log token exchange\n     */\n    logTokenExchange(context: SessionLogContext, additionalData?: any) {\n        this.logger.info(\n            {\n                ...context,\n                event: 'token_exchange',\n                stage: 'token_exchange',\n                ...additionalData,\n            },\n            `[${context.flowType}] Token exchange for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log notification events\n     */\n    logNotification(\n        context: SessionLogContext,\n        notificationEvent: string,\n        additionalData?: any,\n    ) {\n        this.logger.info(\n            {\n                ...context,\n                event: 'notification',\n                stage: 'notification',\n                notificationEvent,\n                ...additionalData,\n            },\n            `[${context.flowType}] Notification ${notificationEvent} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Generic session log method\n     */\n    logSession(\n        context: SessionLogContext,\n        message: string,\n        additionalData?: any,\n    ) {\n        this.logger.info(\n            {\n                ...context,\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}`,\n        );\n    }\n\n    /**\n     * Generic session error log method\n     */\n    logSessionError(\n        context: SessionLogContext,\n        error: Error,\n        message: string,\n        additionalData?: any,\n    ) {\n        this.logger.error(\n            {\n                ...context,\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}: ${error.message}`,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionModule.html":{"url":"modules/SessionModule.html","title":"module - SessionModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_imports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_SessionModule_exports\n\n\n\n\nStatusListModule\n\nStatusListModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/session/session.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            SessionModule is responsible for managing user sessions.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SessionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SessionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SessionService } from './session.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Session } from './entities/session.entity';\nimport { SessionController } from './session.controller';\nimport * as Joi from 'joi';\nimport { StatusListModule } from '../issuer/status-list/status-list.module';\n\n/**\n * Module for managing user sessions.\n */\nexport const SESSION_VALIDATION_SCHEMA = {\n    SESSION_TIDY_UP_INTERVAL: Joi.number().default(60 * 60), // default to every hour\n    SESSION_TTL: Joi.number().default(24 * 60 * 60), // default to 24 hours\n};\n\n/**\n * SessionModule is responsible for managing user sessions.\n */\n@Module({\n    imports: [TypeOrmModule.forFeature([Session]), StatusListModule],\n    providers: [SessionService],\n    exports: [SessionService],\n    controllers: [SessionController],\n})\nexport class SessionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                create\n                            \n                            \n                                get\n                            \n                            \n                                getAll\n                            \n                            \n                                getBy\n                            \n                            \n                                onApplicationBootstrap\n                            \n                            \n                                tidyUpSessions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionRepository: Repository, configService: ConfigService, schedulerRegistry: SchedulerRegistry)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schedulerRegistry\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(issuer_state: string, tenantId: string, values: QueryDeepPartialEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Update an existing session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            QueryDeepPartialEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(session: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Create a new session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Get a session by its state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Get all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBy\n                        \n                    \n                \n            \n            \n                \ngetBy(where: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:83\n                        \n                    \n\n\n            \n                \n                        Get a session by a specific condition.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                            FindOptionsWhere\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \nonApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Register the tidy up cron job on application bootstrap.\nThis will run every hour by default, but can be configured via the SESSION_TIDY_UP_INTERVAL config variable.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tidyUpSessions\n                        \n                    \n                \n            \n            \n                \ntidyUpSessions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Tidy up sessions that are older than 1 day.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { Session } from './entities/session.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeepPartial, FindOptionsWhere, LessThan, Repository } from 'typeorm';\nimport { QueryDeepPartialEntity } from 'typeorm/query-builder/QueryPartialEntity';\nimport { SchedulerRegistry } from '@nestjs/schedule';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class SessionService implements OnApplicationBootstrap {\n    constructor(\n        @InjectRepository(Session)\n        private sessionRepository: Repository,\n        private readonly configService: ConfigService,\n        private readonly schedulerRegistry: SchedulerRegistry,\n    ) {}\n\n    /**\n     * Register the tidy up cron job on application bootstrap.\n     * This will run every hour by default, but can be configured via the `SESSION_TIDY_UP_INTERVAL` config variable.\n     * @returns\n     */\n    onApplicationBootstrap() {\n        const callback = () => {\n            void this.tidyUpSessions();\n        };\n        const intervalTime =\n            this.configService.getOrThrow('SESSION_TIDY_UP_INTERVAL') *\n            1000;\n        const interval = setInterval(callback, intervalTime);\n        this.schedulerRegistry.addInterval('tidyUpSessions', interval);\n        return this.tidyUpSessions();\n    }\n\n    /**\n     * Create a new session.\n     * @param session\n     * @returns\n     */\n    create(session: DeepPartial) {\n        return this.sessionRepository.save(session);\n    }\n\n    /**\n     * Update an existing session.\n     * @param issuer_state\n     * @param values\n     * @returns\n     */\n    add(\n        issuer_state: string,\n        tenantId: string,\n        values: QueryDeepPartialEntity,\n    ) {\n        return this.sessionRepository.update(\n            { id: issuer_state, tenantId },\n            values,\n        );\n    }\n\n    /**\n     * Get all sessions.\n     * @returns\n     */\n    getAll(): Promise {\n        return this.sessionRepository.find();\n    }\n\n    /**\n     * Get a session by its state.\n     * @param state\n     * @returns\n     */\n    get(state: string) {\n        return this.sessionRepository.findOneByOrFail({ id: state });\n    }\n\n    /**\n     * Get a session by a specific condition.\n     * @param where\n     * @returns\n     */\n    getBy(where: FindOptionsWhere) {\n        return this.sessionRepository.findOneByOrFail(where);\n    }\n\n    /**\n     * Tidy up sessions that are older than 1 day.\n     */\n    tidyUpSessions() {\n        const ttl = this.configService.getOrThrow('SESSION_TTL') * 1000;\n        return this.sessionRepository.delete({\n            createdAt: LessThan(new Date(Date.now() - ttl)),\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StatusListController.html":{"url":"controllers/StatusListController.html","title":"controller - StatusListController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StatusListController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/status-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getList(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status-list')@Header('Content-Type', 'application/statuslist+jwt')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.controller.ts:16\n                        \n                    \n\n\n            \n                \n                        Get the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Param } from '@nestjs/common';\nimport { StatusListService } from './status-list.service';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Status management')\n@Controller(':tenantId/status-management')\nexport class StatusListController {\n    constructor(private statusListService: StatusListService) {}\n\n    /**\n     * Get the status list\n     * @returns\n     */\n    @Get('status-list')\n    @Header('Content-Type', 'application/statuslist+jwt')\n    getList(@Param('tenantId') tenantId: string) {\n        return this.statusListService.getList(tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StatusListFile.html":{"url":"interfaces/StatusListFile.html","title":"interface - StatusListFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StatusListFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            bits\n                                        \n                                \n                                \n                                        \n                                            elements\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            jwt\n                                        \n                                \n                                \n                                        \n                                            stack\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bits:     BitsPerStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BitsPerStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elements\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elements:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stack\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stack:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConflictException, Injectable, OnModuleInit } from '@nestjs/common';\nimport { join } from 'path';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport {\n    BitsPerStatus,\n    createHeaderAndPayload,\n    JWTwithStatusListPayload,\n    StatusList,\n    StatusListJWTHeaderParameters,\n} from '@sd-jwt/jwt-status-list';\nimport { JwtPayload } from '@sd-jwt/types';\nimport { ConfigService } from '@nestjs/config';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { StatusMapping } from './entities/status-mapping.entity';\nimport { Repository } from 'typeorm';\nimport { StatusUpdateDto } from './dto/status-update.dto';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { Session } from '../../session/entities/session.entity';\nimport { TENANT_EVENTS } from '../../auth/tenant-events';\n\ninterface StatusListFile {\n    elements: number[];\n    stack: number[];\n    bits: BitsPerStatus;\n    jwt?: string;\n}\n\n@Injectable()\nexport class StatusListService implements OnModuleInit {\n    private fileName: string = 'status-list.json';\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        @InjectRepository(StatusMapping)\n        private statusMappingRepository: Repository,\n    ) {}\n    onModuleInit() {}\n\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    onTenantInit(tenantId: string) {\n        return this.init(tenantId);\n    }\n\n    /**\n     * Initialize the status list service by checking if the status list file exists.\n     * If it does not exist, create a new status list with 10,000 entries and a stack\n     * of 10,000 indexes. The stack is shuffled to ensure randomness in the order of\n     * entries. The status list is stored in the file system as a JSON file.\n     */\n    private async init(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        if (!existsSync(file)) {\n            const size = 10000;\n            // create an empty array with the size of 1000\n            const elements = new Array(size).fill(0).map(() => 0);\n            // create a list of 1000 indexes and shuffel them\n            const stack = new Array(size)\n                .fill(0)\n                .map((_, i) => i)\n                .sort(() => 0.5 - Math.random());\n\n            writeFileSync(\n                file,\n                JSON.stringify({ elements, stack, bits: 1 } as StatusListFile),\n            );\n            await this.createList(tenantId);\n        }\n    }\n\n    /**\n     * Create a new status list and stored it in the file\n     */\n    async createList(tenantId: string) {\n        const file = this.getConfig(tenantId);\n        const list = new StatusList(file.elements, file.bits);\n        const iss = `${this.configService.getOrThrow('PUBLIC_URL')}`;\n\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            tenantId,\n            'status-management',\n            'status-list',\n        );\n\n        const prePayload: JwtPayload = {\n            iss,\n            sub,\n            iat: Math.floor(Date.now() / 1000),\n        };\n        const preHeader: StatusListJWTHeaderParameters = {\n            alg: 'ES256',\n            typ: 'statuslist+jwt',\n            x5c: this.cryptoService.getCertChain('signing', tenantId),\n        };\n        const { header, payload } = createHeaderAndPayload(\n            list,\n            prePayload,\n            preHeader,\n        );\n\n        const jwt = await this.cryptoService.signJwt(header, payload, tenantId);\n        file.jwt = jwt;\n        this.storeConfig(file, tenantId);\n    }\n\n    getList(tenantId: string) {\n        return this.getConfig(tenantId).jwt;\n    }\n\n    private getConfig(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        return JSON.parse(readFileSync(file, 'utf-8')) as StatusListFile;\n    }\n\n    private storeConfig(content: StatusListFile, tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        writeFileSync(file, JSON.stringify(content));\n    }\n\n    /**\n     * Get the next free entry in the status list\n     * @returns\n     */\n    async createEntry(\n        session: Session,\n        credentialConfigurationId: string,\n    ): Promise {\n        const file = this.getConfig(session.tenantId);\n        // get the last element from the stack\n        const idx = file.stack.pop();\n        //TODO: what to do if the stack is empty\n        if (idx === undefined) {\n            throw new Error('Stack for status list is empty!!!');\n        }\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            session.tenantId,\n            'status-management',\n            'status-list',\n        );\n        // store the index in the status mapping\n        await this.statusMappingRepository.save({\n            sessionId: session.id,\n            index: idx,\n            list: sub,\n            credentialConfigurationId,\n        });\n        this.storeConfig(file, session.tenantId);\n        return {\n            status: {\n                status_list: {\n                    idx: idx,\n                    uri: sub,\n                },\n            },\n        };\n    }\n\n    /**\n     * Update the value of an entry in the status list\n     * @param id\n     * @param value\n     */\n    private setEntry(id: number, value: number, tenantId: string) {\n        const file = this.getConfig(tenantId);\n        file.elements[id] = value;\n        this.storeConfig(file, tenantId);\n        return this.createList(tenantId);\n    }\n\n    /**\n     * Update the status of a session and its credential configuration\n     * @param value\n     */\n    async updateStatus(value: StatusUpdateDto, tenantId: string) {\n        const entries = await this.statusMappingRepository.findBy({\n            sessionId: value.sessionId,\n            credentialConfigurationId: value.credentialConfigurationId,\n        });\n        if (entries.length === 0) {\n            throw new ConflictException(\n                `No status mapping found for session ${value.sessionId} and credential configuration ${value.credentialConfigurationId}`,\n            );\n        }\n        for (const entry of entries) {\n            await this.setEntry(entry.index, value.status, tenantId);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StatusListModule.html":{"url":"modules/StatusListModule.html","title":"module - StatusListModule","body":"\n                   \n\n\n\n\n    Modules\n    StatusListModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_providers\n\n\n\ncluster_StatusListModule_imports\n\n\n\ncluster_StatusListModule_exports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/status-list/status-list.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StatusListController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StatusListController } from './status-list.controller';\nimport { StatusListService } from './status-list.service';\nimport { CryptoModule } from '../../crypto/crypto.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { StatusMapping } from './entities/status-mapping.entity';\n\n@Module({\n    imports: [CryptoModule, TypeOrmModule.forFeature([StatusMapping])],\n    controllers: [StatusListController],\n    providers: [StatusListService],\n    exports: [StatusListService],\n})\nexport class StatusListModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StatusListService.html":{"url":"injectables/StatusListService.html","title":"injectable - StatusListService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StatusListService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fileName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEntry\n                            \n                            \n                                    Async\n                                createList\n                            \n                            \n                                    Private\n                                getConfig\n                            \n                            \n                                getList\n                            \n                            \n                                    Private\n                                    Async\n                                init\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    \n                                onTenantInit\n                            \n                            \n                                    Private\n                                setEntry\n                            \n                            \n                                    Private\n                                storeConfig\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, statusMappingRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/status-list/status-list.service.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusMappingRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEntry(session: Session, credentialConfigurationId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:138\n                        \n                    \n\n\n            \n                \n                        Get the next free entry in the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createList\n                        \n                    \n                \n            \n            \n                \n                        \n                    createList(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Create a new status list and stored it in the file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfig(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         StatusListFile\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getList\n                        \n                    \n                \n            \n            \n                \ngetList(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Initialize the status list service by checking if the status list file exists.\nIf it does not exist, create a new status list with 10,000 entries and a stack\nof 10,000 indexes. The stack is shuffled to ensure randomness in the order of\nentries. The status list is stored in the file system as a JSON file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_KEYS, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    setEntry(id: number, value: number, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:178\n                        \n                    \n\n\n            \n                \n                        Update the value of an entry in the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        storeConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeConfig(content: StatusListFile, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                content\n                                            \n                                                            StatusListFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(value: StatusUpdateDto, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:189\n                        \n                    \n\n\n            \n                \n                        Update the status of a session and its credential configuration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fileName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'status-list.json'\n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/status-list.service.ts:31\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, OnModuleInit } from '@nestjs/common';\nimport { join } from 'path';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport {\n    BitsPerStatus,\n    createHeaderAndPayload,\n    JWTwithStatusListPayload,\n    StatusList,\n    StatusListJWTHeaderParameters,\n} from '@sd-jwt/jwt-status-list';\nimport { JwtPayload } from '@sd-jwt/types';\nimport { ConfigService } from '@nestjs/config';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { StatusMapping } from './entities/status-mapping.entity';\nimport { Repository } from 'typeorm';\nimport { StatusUpdateDto } from './dto/status-update.dto';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { Session } from '../../session/entities/session.entity';\nimport { TENANT_EVENTS } from '../../auth/tenant-events';\n\ninterface StatusListFile {\n    elements: number[];\n    stack: number[];\n    bits: BitsPerStatus;\n    jwt?: string;\n}\n\n@Injectable()\nexport class StatusListService implements OnModuleInit {\n    private fileName: string = 'status-list.json';\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        @InjectRepository(StatusMapping)\n        private statusMappingRepository: Repository,\n    ) {}\n    onModuleInit() {}\n\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    onTenantInit(tenantId: string) {\n        return this.init(tenantId);\n    }\n\n    /**\n     * Initialize the status list service by checking if the status list file exists.\n     * If it does not exist, create a new status list with 10,000 entries and a stack\n     * of 10,000 indexes. The stack is shuffled to ensure randomness in the order of\n     * entries. The status list is stored in the file system as a JSON file.\n     */\n    private async init(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        if (!existsSync(file)) {\n            const size = 10000;\n            // create an empty array with the size of 1000\n            const elements = new Array(size).fill(0).map(() => 0);\n            // create a list of 1000 indexes and shuffel them\n            const stack = new Array(size)\n                .fill(0)\n                .map((_, i) => i)\n                .sort(() => 0.5 - Math.random());\n\n            writeFileSync(\n                file,\n                JSON.stringify({ elements, stack, bits: 1 } as StatusListFile),\n            );\n            await this.createList(tenantId);\n        }\n    }\n\n    /**\n     * Create a new status list and stored it in the file\n     */\n    async createList(tenantId: string) {\n        const file = this.getConfig(tenantId);\n        const list = new StatusList(file.elements, file.bits);\n        const iss = `${this.configService.getOrThrow('PUBLIC_URL')}`;\n\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            tenantId,\n            'status-management',\n            'status-list',\n        );\n\n        const prePayload: JwtPayload = {\n            iss,\n            sub,\n            iat: Math.floor(Date.now() / 1000),\n        };\n        const preHeader: StatusListJWTHeaderParameters = {\n            alg: 'ES256',\n            typ: 'statuslist+jwt',\n            x5c: this.cryptoService.getCertChain('signing', tenantId),\n        };\n        const { header, payload } = createHeaderAndPayload(\n            list,\n            prePayload,\n            preHeader,\n        );\n\n        const jwt = await this.cryptoService.signJwt(header, payload, tenantId);\n        file.jwt = jwt;\n        this.storeConfig(file, tenantId);\n    }\n\n    getList(tenantId: string) {\n        return this.getConfig(tenantId).jwt;\n    }\n\n    private getConfig(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        return JSON.parse(readFileSync(file, 'utf-8')) as StatusListFile;\n    }\n\n    private storeConfig(content: StatusListFile, tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        writeFileSync(file, JSON.stringify(content));\n    }\n\n    /**\n     * Get the next free entry in the status list\n     * @returns\n     */\n    async createEntry(\n        session: Session,\n        credentialConfigurationId: string,\n    ): Promise {\n        const file = this.getConfig(session.tenantId);\n        // get the last element from the stack\n        const idx = file.stack.pop();\n        //TODO: what to do if the stack is empty\n        if (idx === undefined) {\n            throw new Error('Stack for status list is empty!!!');\n        }\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            session.tenantId,\n            'status-management',\n            'status-list',\n        );\n        // store the index in the status mapping\n        await this.statusMappingRepository.save({\n            sessionId: session.id,\n            index: idx,\n            list: sub,\n            credentialConfigurationId,\n        });\n        this.storeConfig(file, session.tenantId);\n        return {\n            status: {\n                status_list: {\n                    idx: idx,\n                    uri: sub,\n                },\n            },\n        };\n    }\n\n    /**\n     * Update the value of an entry in the status list\n     * @param id\n     * @param value\n     */\n    private setEntry(id: number, value: number, tenantId: string) {\n        const file = this.getConfig(tenantId);\n        file.elements[id] = value;\n        this.storeConfig(file, tenantId);\n        return this.createList(tenantId);\n    }\n\n    /**\n     * Update the status of a session and its credential configuration\n     * @param value\n     */\n    async updateStatus(value: StatusUpdateDto, tenantId: string) {\n        const entries = await this.statusMappingRepository.findBy({\n            sessionId: value.sessionId,\n            credentialConfigurationId: value.credentialConfigurationId,\n        });\n        if (entries.length === 0) {\n            throw new ConflictException(\n                `No status mapping found for session ${value.sessionId} and credential configuration ${value.credentialConfigurationId}`,\n            );\n        }\n        for (const entry of entries) {\n            await this.setEntry(entry.index, value.status, tenantId);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusMapping.html":{"url":"entities/StatusMapping.html","title":"entity - StatusMapping","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StatusMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/entities/status-mapping.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                credentialConfigurationId\n                            \n                            \n                                    \n                                index\n                            \n                            \n                                    \n                                list\n                            \n                            \n                                    \n                                sessionId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\n\n@Entity()\nexport class StatusMapping {\n    @Column({ type: 'varchar', primary: true })\n    sessionId: string;\n\n    @Column({ type: 'varchar', primary: true })\n    list: string;\n\n    @Column({ type: 'int', primary: true })\n    index: number;\n\n    @Column({ type: 'varchar', primary: true })\n    credentialConfigurationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StatusUpdateDto.html":{"url":"classes/StatusUpdateDto.html","title":"class - StatusUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StatusUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/dto/status-update.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationId\n                            \n                            \n                                    \n                                sessionId\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:16\n                        \n                    \n\n            \n                \n                    The ID of the credential configuration\nThis is optional, if not provided, all credentials will be revoked of the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:8\n                        \n                    \n\n            \n                \n                    The session ID of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsIn(['0', '1'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:24\n                        \n                    \n\n            \n                \n                    The status of the credential\n0 = valid, 1 = revoked\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNumber, IsOptional, IsString } from 'class-validator';\n\nexport class StatusUpdateDto {\n    /**\n     * The session ID of the user\n     */\n    @IsString()\n    sessionId: string;\n\n    /**\n     * The ID of the credential configuration\n     * This is optional, if not provided, all credentials will be revoked of the session.\n     */\n    @IsString()\n    @IsOptional()\n    credentialConfigurationId?: string;\n\n    /**\n     * The status of the credential\n     * 0 = valid, 1 = revoked\n     */\n    @IsNumber()\n    @IsIn([0, 1])\n    status: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TDataShape.html":{"url":"interfaces/TDataShape.html","title":"interface - TDataShape","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TDataShape\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            body\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            query\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type { Auth } from '../core/auth';\nimport type { Client as CoreClient, Config as CoreConfig } from '../core/types';\nimport type { Middleware } from './utils';\n\nexport type ResponseStyle = 'data' | 'fields';\n\nexport interface Config\n    extends Omit,\n        CoreConfig {\n    /**\n     * Base URL for all requests made by this client.\n     */\n    baseUrl?: T['baseUrl'];\n    /**\n     * Fetch API implementation. You can use this option to provide a custom\n     * fetch instance.\n     *\n     * @default globalThis.fetch\n     */\n    fetch?: (request: Request) => ReturnType;\n    /**\n     * Please don't use the Fetch client for Next.js applications. The `next`\n     * options won't have any effect.\n     *\n     * Install {@link https://www.npmjs.com/package/@hey-api/client-next `@hey-api/client-next`} instead.\n     */\n    next?: never;\n    /**\n     * Return the response data parsed in a specified format. By default, `auto`\n     * will infer the appropriate method from the `Content-Type` response header.\n     * You can override this behavior with any of the {@link Body} methods.\n     * Select `stream` if you don't want to parse response data at all.\n     *\n     * @default 'auto'\n     */\n    parseAs?:\n        | 'arrayBuffer'\n        | 'auto'\n        | 'blob'\n        | 'formData'\n        | 'json'\n        | 'stream'\n        | 'text';\n    /**\n     * Should we return only data or multiple fields (data, error, response, etc.)?\n     *\n     * @default 'fields'\n     */\n    responseStyle?: ResponseStyle;\n    /**\n     * Throw an error instead of returning it in the response?\n     *\n     * @default false\n     */\n    throwOnError?: T['throwOnError'];\n}\n\nexport interface RequestOptions extends Config {\n    /**\n     * Any body that you want to add to your request.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#body}\n     */\n    body?: unknown;\n    path?: Record;\n    query?: Record;\n    /**\n     * Security mechanism(s) to use for the request.\n     */\n    security?: ReadonlyArray;\n    url: Url;\n}\n\nexport type RequestResult = ThrowOnError extends true\n    ? Promise\n                  ? TData[keyof TData]\n                  : TData\n              : {\n                    data: TData extends Record\n                        ? TData[keyof TData]\n                        : TData;\n                    request: Request;\n                    response: Response;\n                }\n      >\n    : Promise\n                          ? TData[keyof TData]\n                          : TData)\n                    | undefined\n              : (\n                    | {\n                          data: TData extends Record\n                              ? TData[keyof TData]\n                              : TData;\n                          error: undefined;\n                      }\n                    | {\n                          data: undefined;\n                          error: TError extends Record\n                              ? TError[keyof TError]\n                              : TError;\n                      }\n                ) & {\n                    request: Request;\n                    response: Response;\n                }\n      >;\n\nexport interface ClientOptions {\n    baseUrl?: string;\n    responseStyle?: ResponseStyle;\n    throwOnError?: boolean;\n}\n\ntype MethodFn = (\n    options: Omit, 'method'>,\n) => RequestResult;\n\ntype RequestFn = (\n    options: Omit, 'method'> &\n        Pick>, 'method'>,\n) => RequestResult;\n\ntype BuildUrlFn = ;\n        query?: Record;\n        url: string;\n    },\n>(\n    options: Pick & Options,\n) => string;\n\nexport type Client = CoreClient & {\n    interceptors: Middleware;\n};\n\n/**\n * The `createClientConfig()` function will be called on client initialization\n * and the returned object will become the client's initial configuration.\n *\n * You may want to initialize your client this way instead of calling\n * `setConfig()`. This is useful for example if you're using Next.js\n * to ensure your client always has the correct values.\n */\nexport type CreateClientConfig = (\n    override?: Config,\n) => Config & T>;\n\nexport interface TDataShape {\n    body?: unknown;\n    headers?: unknown;\n    path?: unknown;\n    query?: unknown;\n    url: string;\n}\n\ntype OmitKeys = Pick>;\n\nexport type Options = OmitKeys,\n    'body' | 'path' | 'query' | 'url'\n> &\n    Omit;\n\nexport type OptionsLegacyParser = TData extends { body?: any }\n    ? TData extends { headers?: any }\n        ? OmitKeys,\n              'body' | 'headers' | 'url'\n          > &\n              TData\n        : OmitKeys,\n              'body' | 'url'\n          > &\n              TData &\n              Pick, 'headers'>\n    : TData extends { headers?: any }\n      ? OmitKeys,\n            'headers' | 'url'\n        > &\n            TData &\n            Pick, 'body'>\n      : OmitKeys, 'url'> & TData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.decorator.ts\n        \n\n\n            \n                Description\n            \n            \n                Values of the user token\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from '@nestjs/common';\n\nexport const Token = createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n);\n\n/**\n * Values of the user token\n */\nexport interface TokenPayload {\n    sub: string; // Subject (client_id for client credentials)\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenResponse.html":{"url":"classes/TokenResponse.html","title":"class - TokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/token-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access_token\n                            \n                            \n                                expires_in\n                            \n                            \n                                token_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TokenResponse {\n    access_token: string;\n    token_type: 'Bearer';\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VCT.html":{"url":"classes/VCT.html","title":"class - VCT","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VCT\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/dto/credential-config.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                extends\n                            \n                            \n                                    \n                                    Optional\n                                extends#integrity\n                            \n                            \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    Optional\n                                schema_uri\n                            \n                            \n                                    \n                                    Optional\n                                schema_uri#integrity\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        extends\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        extends#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema_uri#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook.dto';\n\nexport class VCT {\n    @IsString()\n    vct: string;\n    @IsString()\n    name?: string;\n    @IsString()\n    description?: string;\n    @IsString()\n    extends?: string;\n    @IsString()\n    'extends#integrity'?: string;\n    @IsString()\n    schema_uri?: string;\n    @IsString()\n    'schema_uri#integrity'?: string;\n}\n\nexport class PresentationDuringIssuance {\n    @IsString()\n    type: string;\n    @IsObject()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VaultKeyService.html":{"url":"injectables/VaultKeyService.html","title":"injectable - VaultKeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VaultKeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/vault-key.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            KeyService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                folder\n                            \n                            \n                                    Private\n                                headers\n                            \n                            \n                                    Private\n                                vaultUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                derToJwtSignature\n                            \n                            \n                                    Private\n                                getJWK\n                            \n                            \n                                getKid\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                init\n                            \n                            \n                                sign\n                            \n                            \n                                signer\n                            \n                            \n                                    Async\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, configService: ConfigService, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/vault-key.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair in the vault.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        derToJwtSignature\n                        \n                    \n                \n            \n            \n                \nderToJwtSignature(derSignature: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:185\n                        \n                    \n\n\n            \n                \n                        Converts a DER signature to a JWT signature.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                derSignature\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getJWK\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJWK(key: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:121\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getKid\n                        \n                    \n                \n            \n            \n                \ngetKid(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:90\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:100\n\n                        \n                    \n\n\n            \n                \n                        Gets the public key and converts it to a KeyLike object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"jwk\" | \"pem\", tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"jwk\" | \"pem\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:45\n\n                        \n                    \n\n\n            \n                \n                        Check if the vault has a key with the given id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sign\n                        \n                    \n                \n            \n            \n                \nsign(value: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:137\n                        \n                    \n\n\n            \n                \n                        Signs a value with a key in the vault.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signer\n                        \n                    \n                \n            \n            \n                \nsigner(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:57\n\n                        \n                    \n\n\n            \n                \n                        Get the signer for the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JwtPayload, header: JWTHeaderParameters, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:156\n\n                        \n                    \n\n\n            \n                \n                        Creates a proof of possession jwt.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWTHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        folder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/vault-key.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/vault-key.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        vaultUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/vault-key.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { KeyService } from './key.service';\nimport { HttpService } from '@nestjs/axios';\nimport { firstValueFrom } from 'rxjs';\nimport { importSPKI, exportJWK, JWTHeaderParameters, JWK } from 'jose';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtPayload, Signer } from '@sd-jwt/types';\nimport { CryptoService, CryptoType } from './crypto/crypto.service';\nimport { writeFileSync } from 'fs';\nimport { join } from 'path';\n\n@Injectable()\nexport class VaultKeyService extends KeyService {\n    // url to the vault instance\n    private vaultUrl: string;\n    // headers for the vault api\n    private headers: { headers: { 'X-Vault-Token': string } };\n\n    private folder: string;\n\n    constructor(\n        private httpService: HttpService,\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n    ) {\n        super();\n        this.folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            'keys',\n        );\n\n        this.vaultUrl = this.configService.get('VAULT_URL') as string;\n        this.headers = {\n            headers: {\n                'X-Vault-Token': this.configService.get(\n                    'VAULT_TOKEN',\n                ) as string,\n            },\n        };\n    }\n\n    /**\n     * Check if the vault has a key with the given id\n     */\n    async init(tenantId: string) {\n        //TODO: need to update this since signing cert is not created by the vault\n        await this.getPublicKey('pem', tenantId)\n            .then((res) => {\n                writeFileSync(join(this.folder, 'public-key.pem'), res);\n            })\n            .catch(async () => this.create(tenantId));\n    }\n\n    /**\n     * Get the signer for the key service\n     */\n    signer(tenantId: string): Promise {\n        //TODO: validate if this is correct.\n        return Promise.resolve((input: string) => this.sign(input, tenantId));\n    }\n\n    /**\n     * Creates a new keypair in the vault.\n     * @param createKeyDto\n     * @param user\n     * @returns\n     */\n    async create(tenantId: string) {\n        const types: Map = new Map();\n        types.set('ES256', 'ecdsa-p256');\n        types.set('Ed25519', 'ed25519');\n\n        const res = await firstValueFrom(\n            this.httpService.post(\n                `${this.vaultUrl}/keys/${tenantId}`,\n                {\n                    exportable: false,\n                    type: types.get(this.cryptoService.getAlg()),\n                },\n                this.headers,\n            ),\n        );\n        const jwk = await this.getPublicKey('jwk', tenantId);\n        return {\n            id: res.data.id,\n            publicKey: jwk,\n        };\n    }\n\n    getKid(tenantId: string): Promise {\n        //TODO: check if this is the right way to get the key id.\n        return Promise.resolve(tenantId);\n    }\n\n    /**\n     * Gets the public key and converts it to a KeyLike object.\n     * @param id\n     * @returns\n     */\n    async getPublicKey(type: 'pem', tenantId: string): Promise;\n    async getPublicKey(type: 'jwk', tenantId: string): Promise;\n    async getPublicKey(\n        type: 'jwk' | 'pem',\n        tenantId: string,\n    ): Promise {\n        return firstValueFrom(\n            this.httpService.get(\n                `${this.vaultUrl}/keys/${tenantId}`,\n                this.headers,\n            ),\n        ).then(async (res) => {\n            return type === 'pem'\n                ? (res.data.data.keys['1'].public_key as string)\n                : await this.getJWK(\n                      res.data.data.keys['1'].public_key,\n                      tenantId,\n                  );\n        });\n    }\n\n    private getJWK(key: string, tenantId: string): Promise {\n        return importSPKI(key, this.cryptoService.getAlg())\n            .then((cryptoKey) => exportJWK(cryptoKey))\n            .then(async (jwk) => {\n                jwk.kid = await this.getKid(tenantId);\n                return jwk;\n            });\n    }\n\n    /**\n     * Signs a value with a key in the vault.\n     * @param id\n     * @param user\n     * @param value\n     * @returns\n     */\n    sign(value: string, tenantId: string): Promise {\n        return firstValueFrom(\n            this.httpService.post(\n                `${this.vaultUrl}/sign/${tenantId}`,\n                {\n                    input: Buffer.from(value).toString('base64'),\n                },\n                this.headers,\n            ),\n        ).then((res) =>\n            this.derToJwtSignature(res.data.data.signature.split(':')[2]),\n        );\n    }\n\n    /**\n     * Creates a proof of possession jwt.\n     * @param user\n     * @param value\n     */\n    async signJWT(\n        payload: JwtPayload,\n        header: JWTHeaderParameters,\n        tenantId: string,\n    ): Promise {\n        // Convert header and payload to Base64 to prepare for Vault\n        const encodedHeader = Buffer.from(JSON.stringify(header)).toString(\n            'base64url',\n        );\n        const encodedPayload = Buffer.from(JSON.stringify(payload)).toString(\n            'base64url',\n        );\n        const signingInput = `${encodedHeader}.${encodedPayload}`;\n\n        // Request to Vault for signing\n        try {\n            const signature = await this.sign(signingInput, tenantId);\n            return `${encodedHeader}.${encodedPayload}.${signature}`;\n        } catch (error) {\n            console.error('Error signing JWT with Vault:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Converts a DER signature to a JWT signature.\n     * @param derSignature\n     * @returns\n     */\n    derToJwtSignature(derSignature: string) {\n        // Step 1: Extract r and s from DER signature\n        const der = Buffer.from(derSignature, 'base64');\n        const sequence = der.slice(2); // Skip the sequence tag and length\n        const rLength = sequence[1];\n        const r = sequence.slice(2, 2 + rLength);\n        const s = sequence.slice(2 + rLength + 2); // Skip r, its tag and length byte, and s's tag and length byte\n\n        // Step 2: Ensure r and s are 32 bytes each (pad with zeros if necessary)\n        // Ensure r and s are 32 bytes each\n        let rPadded: Buffer;\n        let sPadded: Buffer;\n        if (r.length > 32) {\n            if (r.length === 33 && r[0] === 0x00) {\n                rPadded = r.slice(1);\n            } else {\n                throw new Error('Invalid r length in DER signature');\n            }\n        } else {\n            rPadded = Buffer.concat([Buffer.alloc(32 - r.length), r]);\n        }\n        if (s.length > 32) {\n            if (s.length === 33 && s[0] === 0x00) {\n                sPadded = s.slice(1);\n            } else {\n                throw new Error('Invalid s length in DER signature');\n            }\n        } else {\n            sPadded = Buffer.concat([Buffer.alloc(32 - s.length), s]);\n        }\n\n        // Step 3: Concatenate r and s to form the raw signature\n        const rawSignature = Buffer.concat([rPadded, sPadded]);\n\n        // Step 4: Base64url encode the raw signature\n        return rawSignature\n            .toString('base64')\n            .replace(/\\+/g, '-')\n            .replace(/\\//g, '_')\n            .replace(/=/g, '');\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VerifierModule.html":{"url":"modules/VerifierModule.html","title":"module - VerifierModule","body":"\n                   \n\n\n\n\n    Modules\n    VerifierModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VerifierModule\n\n\n\ncluster_VerifierModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/verifier.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            PresentationsModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport { RegistrarModule } from '../registrar/registrar.module';\nimport { SessionModule } from '../session/session.module';\nimport { HttpModule } from '@nestjs/axios';\nimport { PresentationsModule } from './presentations/presentations.module';\nimport { Oid4vpModule } from './oid4vp/oid4vp.module';\n\n@Module({\n    imports: [\n        CryptoModule,\n        RegistrarModule,\n        SessionModule,\n        HttpModule,\n        PresentationsModule,\n        Oid4vpModule,\n    ],\n})\nexport class VerifierModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfig.html":{"url":"classes/WebHookAuthConfig.html","title":"class - WebHookAuthConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhook authentication.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApiKeyConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:43\n                        \n                    \n\n            \n                \n                    Configuration for API key authentication.\nThis is required if the type is 'apiKey'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['apiKey'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:36\n                        \n                    \n\n            \n                \n                    The type of authentication used for the webhook.\nCurrently, only 'apiKey' is supported.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebhookConfig.html":{"url":"classes/WebhookConfig.html","title":"class - WebhookConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebhookConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhooks used in various services.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                auth\n                            \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebHookAuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:62\n                        \n                    \n\n            \n                \n                    Optional authentication configuration for the webhook.\nIf not provided, no authentication will be used.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:54\n                        \n                    \n\n            \n                \n                    The URL to which the webhook will send notifications.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WellKnownController.html":{"url":"controllers/WellKnownController.html","title":"controller - WellKnownController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WellKnownController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/.well-known\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI well-known endpoints.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authzMetadata\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getJwks\n                            \n                            \n                                    \n                                    \n                                    Async\n                                issuerMetadata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    authzMetadata(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('oauth-authorization-server')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:36\n                        \n                    \n\n\n            \n                \n                        Authorization Server Metadata\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServerResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJwks(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Header('Content-Type', 'application/jwk-set+json')@Get('jwks.json')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:50\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for the authorization server.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        issuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    issuerMetadata(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get OpenID4VCI issuer metadata', description: 'Returns the OpenID4VCI issuer metadata.'})@Get('openid-credential-issuer')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Param } from '@nestjs/common';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { AuthorizeService } from '../issuer/authorize/authorize.service';\nimport { Oid4vciService } from '../issuer/oid4vci/oid4vci.service';\nimport { JwksResponseDto } from './dto/jwks-response.dto';\nimport { Oauth2AuthorizationServerResponse } from './dto/oauth-authorization-server-response.dto';\nimport { CredentialIssuerMetadataDto } from './dto/credential-issuer-metadata.dto';\nimport { ApiOperation } from '@nestjs/swagger';\n\n/**\n * Controller for the OpenID4VCI well-known endpoints.\n */\n@Controller(':tenantId/.well-known')\nexport class WellKnownController {\n    constructor(\n        private readonly oid4vciService: Oid4vciService,\n        private readonly authorizeService: AuthorizeService,\n        private readonly cryptoService: CryptoService,\n    ) {}\n\n    @ApiOperation({\n        summary: 'Get OpenID4VCI issuer metadata',\n        description: 'Returns the OpenID4VCI issuer metadata.',\n    })\n    @Get('openid-credential-issuer')\n    async issuerMetadata(@Param('tenantId') tenantId: string) {\n        return (await this.oid4vciService.issuerMetadata(tenantId))\n            .credentialIssuer as unknown as Promise;\n    }\n\n    /**\n     * Authorization Server Metadata\n     * @returns\n     */\n    @Get('oauth-authorization-server')\n    authzMetadata(\n        @Param('tenantId') tenantId: string,\n    ): Oauth2AuthorizationServerResponse {\n        return this.authorizeService.authzMetadata(\n            tenantId,\n        ) as Oauth2AuthorizationServerResponse;\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for the authorization server.\n     * @returns\n     */\n    @Header('Content-Type', 'application/jwk-set+json')\n    @Get('jwks.json')\n    async getJwks(\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        return this.cryptoService.getJwks(tenantId).then((key) => ({\n            keys: [key],\n        }));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n1.2.3 (2025-07-20)\nBug Fixes\n\nci deploy with version generation (259ab39)\nrelease pipeline (7a6a69c)\nset correct way for deployment (2aa727a)\nuse oidc url instead of keycloak one (2913417)\n\n1.2.2 (2025-07-19)\nBug Fixes\n\nadd tmp logger (6bb4aa9)\nset correct url for vp (295428b)\n\n1.2.1 (2025-07-18)\nBug Fixes\n\nci (8f9498a)\nci (905e17c)\n\n1.2.1 (2025-07-18)\nBug Fixes\n\nci (905e17c)\n\n1.2.0 (2025-07-18)\nBug Fixes\n\nadd codecov (#2) (9104df3)\nadd test for presentation (#6) (e3e5971)\nremove console logs (32fbd8e)\nremove ts file from root (b989c6c)\nupload test results (#3) (f75298f)\nvitest config (beef4d2)\n\nFeatures\n\nadd multi tenant support (#7) (46c9ce6)\n\n1.1.0 (2025-07-11)\nBug Fixes\n\nset correct version (91b5499)\nupdate db env (35f4d1e)\n\nFeatures\n\nadd deployment options (937603a)\n\n1.0.1 (2025-07-10)\nBug Fixes\n\nadd auth to webhook (c3b1b48)\nadd cloudflare worker example (6d31de0)\ngeneral improvements (f7e7505)\nmake key folder static (6a6cdb6)\nwebhook handling (df29d1e)\n\n1.0.0 (2025-07-09)\nBug Fixes\n\nadd semantic release (c805439)\nadjust release pipeline (3ac47ec)\nci (892b30e)\nci (40ccd32)\nci (12395c8)\nci (45f3f7f)\nci (4be0171)\nci (2f07af2)\nci (2a71850)\nci nameing (33ac2c7)\nci, install pnpm (ac4ee24)\nci, remove version (54e8a4e)\ndocker deploy (98303c1)\nmain (d6205da)\npage build (b3abd57)\nsplit jobs (2742ec4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @badgateway/oauth2-client : ^3.2.0\n        \n            @nestjs/axios : ^4.0.0\n        \n            @nestjs/common : ^11.1.3\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.3\n        \n            @nestjs/event-emitter : ^3.0.1\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.3\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/serve-static : ^5.0.3\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/terminus : ^11.0.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @openid4vc/oauth2 : 0.3.0-alpha-20250602121005\n        \n            @openid4vc/openid4vci : 0.3.0-alpha-20250602121005\n        \n            @openid4vc/openid4vp : 0.3.0-alpha-20250602121005\n        \n            @openid4vc/utils : ^0.3.0-alpha-20250602121005\n        \n            @sd-jwt/crypto-nodejs : ^0.14.0\n        \n            @sd-jwt/jwt-status-list : ^0.14.0\n        \n            @sd-jwt/sd-jwt-vc : ^0.14.0\n        \n            @sd-jwt/types : ^0.14.0\n        \n            axios : ^1.10.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            joi : ^17.13.3\n        \n            jose : ^6.0.11\n        \n            jwks-rsa : ^3.2.0\n        \n            mysql2 : ^3.14.1\n        \n            nestjs-pino : ^4.4.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.16.3\n        \n            pino-http : ^10.5.0\n        \n            pino-pretty : ^13.0.0\n        \n            qrcode : ^1.5.4\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            sqlite3 : ^5.1.7\n        \n            typeorm : ^0.3.25\n        \n            uuid : ^11.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ResponseType   (src/.../presentation-request.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/verifier/oid4vp/dto/presentation-request.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ResponseType\n                    \n                \n                    \n                        \n                            Enum for the type of response expected from the presentation request.\n\n                        \n                    \n                        \n                            \n                                 QRCode\n                            \n                        \n                        \n                            \n                                Value : qrcode\n                            \n                        \n                        \n                            \n                                 URI\n                            \n                        \n                        \n                            \n                                Value : uri\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getHeadersFromRequest   (src/.../util.ts)\n                        \n                        \n                            handleRequest   (test/.../index.ts)\n                        \n                        \n                            loggerMiddleware   (test/.../utils.ts)\n                        \n                        \n                            run   (scripts/.../import.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Bootstrap function to initialize the NestJS application.\n\n\n                \n            \n        \n    \n    src/issuer/oid4vci/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getHeadersFromRequest\n                        \n                    \n                \n            \n            \n                \ngetHeadersFromRequest(req: Request)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     globalThis.Headers\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    test/webhook/src/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(request: Request)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    test/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loggerMiddleware\n                        \n                    \n                \n            \n            \n                \nloggerMiddleware(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    scripts/import.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        run\n                        \n                    \n                \n            \n            \n                \nrun()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\nEUDIPLO\nYour Diplomatic Layer for EUDI Wallet Integration\nEUDIPLO is an open-source middleware that bridges your backend and EUDI Wallets\nusing a unified API and standardized protocols.\n\n🧭 Overview\nOrganizations joining the EUDI Wallet ecosystem face a tough choice: patch\ntogether protocol libraries that may not exist for their stack, or rely on\nproprietary solutions that risk vendor lock-in.\nEUDIPLO solves this by providing a lightweight, source-available, protocol\nabstraction layer. It communicates over HTTP and integrates easily with your\nexisting backend stack—so you can focus on your business logic, not\ncryptographic plumbing.\nIt supports all core flows of electronic attribute attestations—issuing,\nrequesting, and even requesting during issuance—and is already\ncompatible with production-grade EUDI Wallets like Animo.\nWhile still in early development, EUDIPLO is built for production: secure key\nmanagement, scalable database support, and clean API boundaries.\n\n🧩 Features\n\n✅ Supports OID4VCI, OID4VP, SD-JWT VC, and OAuth Token Status\nList\n✅ JSON-based credential configuration\n✅ Client credentials authentication for easy service integration\n✅ Runs via Docker with .env config\n✅ HTTP-based integration with any backend\n✅ Secure key management & pluggable storage\n✅ Privacy-friendly: no external calls, no long-term storage\n\n\n🚀 Quick Start\nExample :# Clone and configure\ngit clone https://github.com/cre8/eudiplo.git\ncd eudiplo\ncp .env.example .env\n\n# Configure authentication\necho \"JWT_SECRET=$(openssl rand -base64 32)\" >> .env\necho \"AUTH_CLIENT_SECRET=$(openssl rand -base64 24)\" >> .env\n\n# Start with Docker\ndocker run -p 3000:3000 \\\n  -e PUBLIC_URL=https://example.com \\\n  -e JWT_SECRET=your-32-character-secret \\\n  -e AUTH_CLIENT_SECRET=your-issuer-secret \\\n  -v $(pwd)/config:/app/config \\\n  ghcr.io/cre8/eudiplo:latest\n\n# Get a token and start using the API\ncurl -X POST http://localhost:3000/auth/oauth2/token \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"client_id\": \"root\",\n    \"client_secret\": \"root\"\n  }'📚 API:\nhttps://cre8.github.io/eudiplo/latest/api/📦\nFull setup:\nQuickstart Guide\n\n📚 Documentation\nChoose your documentation version:\n\n🚀 Latest Stable (recommended):\nhttps://cre8.github.io/eudiplo/latest/ -\nDocumentation for the most recent major release\n🔬 Development:\nhttps://cre8.github.io/eudiplo/main/ -\nLatest features from the main branch\n📚 Specific Major Versions: v1,\nv2, etc.\n\nKey sections:\n\nArchitecture\nSupported Protocols\nAPI Reference\nCode Documentation\n\n\n🤝 Contributing\nWe welcome PRs from wallet developers, institutions, and contributors interested\nin advancing the EUDI Wallet ecosystem.\nSee CONTRIBUTING.md for guidelines.\n\n📝 License\nLicensed under the Apache 2.0 License\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nExample :                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\n\n\n   END OF TERMS AND CONDITIONS\n   APPENDIX: How to apply the Apache License to your work.\nExample :  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.   Copyright [2025] [Mirko Mollik]\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\nExample :   http://www.apache.org/licenses/LICENSE-2.0   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IssuerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeyModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        Oid4vpModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PresentationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RegistrarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ResolverModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StatusListModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VerifierModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_exports\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_imports\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nCryptoService \n\nCryptoService \n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\n\n\nEncryptionService \n\nEncryptionService \n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\nOid4vpModule -->\n\nRegistrarModule->Oid4vpModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nClientService\n\nClientService\n\nAuthModule -->\n\nClientService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\nOid4vpModule -->\n\nPresentationsModule->Oid4vpModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nResolverModule\n\nResolverModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nResolverService \n\nResolverService \n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        15 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    12 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    20 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    24 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    29 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : Apache 2.0\n        \n            Author : Mirko Mollik \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AccessCertificate   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerAccessCertificatesData   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerAccessCertificatesResponse   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerAccessCertificatesResponses   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerDeleteData   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerDeleteResponses   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerFindOneData   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerFindOneParsedData   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerFindOneParsedResponse   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerFindOneParsedResponses   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerFindOneResponses   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerRegisterData   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerRegisterResponse   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerRegisterResponses   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateRegistration   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateRegistrationResponse   (src/.../types.gen.ts)\n                        \n                        \n                            ArraySeparatorStyle   (src/.../utils.ts)\n                        \n                        \n                            ArraySeparatorStyle   (src/.../pathSerializer.ts)\n                        \n                        \n                            ArrayStyle   (src/.../utils.ts)\n                        \n                        \n                            ArrayStyle   (src/.../pathSerializer.ts)\n                        \n                        \n                            AuthConfig   (src/.../webhook.dto.ts)\n                        \n                        \n                            AuthToken   (src/.../auth.ts)\n                        \n                        \n                            BodySerializer   (src/.../bodySerializer.ts)\n                        \n                        \n                            BuildUrlFn   (src/.../types.ts)\n                        \n                        \n                            certificateType   (src/.../crypto.service.ts)\n                        \n                        \n                            Client   (src/.../types.ts)\n                        \n                        \n                            ClientOptions   (src/.../types.gen.ts)\n                        \n                        \n                            Contact   (src/.../types.gen.ts)\n                        \n                        \n                            CreateClientConfig   (src/.../client.gen.ts)\n                        \n                        \n                            CreateClientConfig   (src/.../types.ts)\n                        \n                        \n                            Credential   (src/.../types.gen.ts)\n                        \n                        \n                            CryptoControllerOwnCertData   (src/.../types.gen.ts)\n                        \n                        \n                            CryptoControllerOwnCertParsedData   (src/.../types.gen.ts)\n                        \n                        \n                            CryptoControllerOwnCertParsedResponse   (src/.../types.gen.ts)\n                        \n                        \n                            CryptoControllerOwnCertParsedResponses   (src/.../types.gen.ts)\n                        \n                        \n                            CryptoControllerOwnCertResponse   (src/.../types.gen.ts)\n                        \n                        \n                            CryptoControllerOwnCertResponses   (src/.../types.gen.ts)\n                        \n                        \n                            CryptoType   (src/.../crypto.service.ts)\n                        \n                        \n                            DecodedJwt   (src/.../types.gen.ts)\n                        \n                        \n                            ErrInterceptor   (src/.../utils.ts)\n                        \n                        \n                            Field   (src/.../params.ts)\n                        \n                        \n                            FieldsConfig   (src/.../params.ts)\n                        \n                        \n                            HealthControllerCheckData   (src/.../types.gen.ts)\n                        \n                        \n                            HealthControllerCheckError   (src/.../types.gen.ts)\n                        \n                        \n                            HealthControllerCheckErrors   (src/.../types.gen.ts)\n                        \n                        \n                            HealthControllerCheckResponse   (src/.../types.gen.ts)\n                        \n                        \n                            HealthControllerCheckResponses   (src/.../types.gen.ts)\n                        \n                        \n                            IntendedUse   (src/.../types.gen.ts)\n                        \n                        \n                            KeyMap   (src/.../params.ts)\n                        \n                        \n                            KeyPair   (src/.../crypto-implementation.ts)\n                        \n                        \n                            LoginReponse   (scripts/.../import.ts)\n                        \n                        \n                            MatrixStyle   (src/.../utils.ts)\n                        \n                        \n                            MatrixStyle   (src/.../pathSerializer.ts)\n                        \n                        \n                            MethodFn   (src/.../types.ts)\n                        \n                        \n                            MultiLang   (src/.../types.gen.ts)\n                        \n                        \n                            Notification   (src/.../session.entity.ts)\n                        \n                        \n                            ObjectSeparatorStyle   (src/.../pathSerializer.ts)\n                        \n                        \n                            ObjectStyle   (src/.../pathSerializer.ts)\n                        \n                        \n                            Oid4VpControllerGetValidPidData   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerGetValidPidResponses   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerGetValidRequestData   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerGetValidRequestResponse   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerGetValidRequestResponses   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerGetValidRequestWithQueryData   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerGetValidRequestWithQueryResponse   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerGetValidRequestWithQueryResponses   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerResponseData   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerResponseResponses   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerSuccessData   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerSuccessResponse   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerSuccessResponses   (src/.../types.gen.ts)\n                        \n                        \n                            OmitKeys   (src/.../types.ts)\n                        \n                        \n                            OmitTypeClass   (src/.../types.gen.ts)\n                        \n                        \n                            Options   (src/.../sdk.gen.ts)\n                        \n                        \n                            Options   (src/.../types.ts)\n                        \n                        \n                            OptionsLegacyParser   (src/.../types.ts)\n                        \n                        \n                            QuerySerializer   (src/.../bodySerializer.ts)\n                        \n                        \n                            RegistrationCertificate   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerAllData   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerAllResponse   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerAllResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerDeleteData   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerDeleteResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneData   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneDecodedData   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneDecodedResponse   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneDecodedResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneError   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneErrors   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneResponse   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerRegisterData   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerRegisterResponse   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerRegisterResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateCreation   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingParty   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerFindAllData   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerFindAllResponse   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerFindAllResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerRegisterData   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerRegisterResponse   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerRegisterResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerRemoveData   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerRemoveResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyRegistration   (src/.../types.gen.ts)\n                        \n                        \n                            ReqInit   (src/.../client.ts)\n                        \n                        \n                            ReqInterceptor   (src/.../utils.ts)\n                        \n                        \n                            RequestFn   (src/.../types.ts)\n                        \n                        \n                            RequestResult   (src/.../types.ts)\n                        \n                        \n                            ResInterceptor   (src/.../utils.ts)\n                        \n                        \n                            ResponseStyle   (src/.../types.ts)\n                        \n                        \n                            Signer   (src/.../crypto-implementation.ts)\n                        \n                        \n                            Slot   (src/.../params.ts)\n                        \n                        \n                            StatusListControllerCrlFileData   (src/.../types.gen.ts)\n                        \n                        \n                            StatusListControllerCrlFileResponse   (src/.../types.gen.ts)\n                        \n                        \n                            StatusListControllerCrlFileResponses   (src/.../types.gen.ts)\n                        \n                        \n                            StatusListControllerGetListData   (src/.../types.gen.ts)\n                        \n                        \n                            StatusListControllerGetListResponse   (src/.../types.gen.ts)\n                        \n                        \n                            StatusListControllerGetListResponses   (src/.../types.gen.ts)\n                        \n                        \n                            Verifier   (src/.../crypto-implementation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/registrar/generated/types.gen.ts\n    \n    \n        \n            \n                \n                    \n                    AccessCertificate\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerAccessCertificatesData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerAccessCertificatesResponse\n                \n            \n            \n                \n                            AccessCertificateControllerAccessCertificatesResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerAccessCertificatesResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerDeleteData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerDeleteResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerFindOneData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerFindOneParsedData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerFindOneParsedResponse\n                \n            \n            \n                \n                            AccessCertificateControllerFindOneParsedResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerFindOneParsedResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerFindOneResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerRegisterData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerRegisterResponse\n                \n            \n            \n                \n                            AccessCertificateControllerRegisterResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerRegisterResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateRegistration\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateRegistrationResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ClientOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Contact\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Credential\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CryptoControllerOwnCertData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CryptoControllerOwnCertParsedData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CryptoControllerOwnCertParsedResponse\n                \n            \n            \n                \n                            CryptoControllerOwnCertParsedResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CryptoControllerOwnCertParsedResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CryptoControllerOwnCertResponse\n                \n            \n            \n                \n                            CryptoControllerOwnCertResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CryptoControllerOwnCertResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DecodedJwt\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HealthControllerCheckData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HealthControllerCheckError\n                \n            \n            \n                \n                            HealthControllerCheckErrors\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HealthControllerCheckErrors\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HealthControllerCheckResponse\n                \n            \n            \n                \n                            HealthControllerCheckResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HealthControllerCheckResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IntendedUse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MultiLang\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidPidData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidPidResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidRequestData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidRequestResponse\n                \n            \n            \n                \n                            Oid4VpControllerGetValidRequestResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidRequestResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidRequestWithQueryData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidRequestWithQueryResponse\n                \n            \n            \n                \n                            Oid4VpControllerGetValidRequestWithQueryResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidRequestWithQueryResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerResponseData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerResponseResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerSuccessData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerSuccessResponse\n                \n            \n            \n                \n                            Oid4VpControllerSuccessResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerSuccessResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OmitTypeClass\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificate\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerAllData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerAllResponse\n                \n            \n            \n                \n                            RegistrationCertificateControllerAllResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerAllResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerDeleteData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerDeleteResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneDecodedData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneDecodedResponse\n                \n            \n            \n                \n                            RegistrationCertificateControllerFindOneDecodedResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneDecodedResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneError\n                \n            \n            \n                \n                            RegistrationCertificateControllerFindOneErrors\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneErrors\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneResponse\n                \n            \n            \n                \n                            RegistrationCertificateControllerFindOneResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerRegisterData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerRegisterResponse\n                \n            \n            \n                \n                            RegistrationCertificateControllerRegisterResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerRegisterResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateCreation\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingParty\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerFindAllData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerFindAllResponse\n                \n            \n            \n                \n                            RelyingPartyControllerFindAllResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerFindAllResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerRegisterData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerRegisterResponse\n                \n            \n            \n                \n                            RelyingPartyControllerRegisterResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerRegisterResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerRemoveData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerRemoveResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyRegistration\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StatusListControllerCrlFileData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StatusListControllerCrlFileResponse\n                \n            \n            \n                \n                            StatusListControllerCrlFileResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StatusListControllerCrlFileResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StatusListControllerGetListData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StatusListControllerGetListResponse\n                \n            \n            \n                \n                            StatusListControllerGetListResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StatusListControllerGetListResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/registrar/generated/client/utils.ts\n    \n    \n        \n            \n                \n                    \n                    ArraySeparatorStyle\n                \n            \n            \n                \n                        ArrayStyle | MatrixStyle\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ArrayStyle\n                \n            \n            \n                \n                        \"form\" | \"spaceDelimited\" | \"pipeDelimited\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ErrInterceptor\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MatrixStyle\n                \n            \n            \n                \n                        \"label\" | \"matrix\" | \"simple\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ReqInterceptor\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResInterceptor\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/registrar/generated/core/pathSerializer.ts\n    \n    \n        \n            \n                \n                    \n                    ArraySeparatorStyle\n                \n            \n            \n                \n                        ArrayStyle | MatrixStyle\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ArrayStyle\n                \n            \n            \n                \n                        \"form\" | \"spaceDelimited\" | \"pipeDelimited\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MatrixStyle\n                \n            \n            \n                \n                        \"label\" | \"matrix\" | \"simple\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ObjectSeparatorStyle\n                \n            \n            \n                \n                        ObjectStyle | MatrixStyle\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ObjectStyle\n                \n            \n            \n                \n                        \"form\" | \"deepObject\"\n\n                \n            \n        \n    \n    src/utils/webhook.dto.ts\n    \n    \n        \n            \n                \n                    \n                    AuthConfig\n                \n            \n            \n                \n                    Enum for the type of authentication used in webhooks.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/registrar/generated/core/auth.ts\n    \n    \n        \n            \n                \n                    \n                    AuthToken\n                \n            \n            \n                \n                        string | undefined\n\n                \n            \n        \n    \n    src/registrar/generated/core/bodySerializer.ts\n    \n    \n        \n            \n                \n                    \n                    BodySerializer\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QuerySerializer\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/registrar/generated/client/types.ts\n    \n    \n        \n            \n                \n                    \n                    BuildUrlFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Client\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CreateClientConfig\n                \n            \n            \n                \n                    The createClientConfig() function will be called on client initialization\nand the returned object will become the client's initial configuration.\nYou may want to initialize your client this way instead of calling\nsetConfig(). This is useful for example if you're using Next.js\nto ensure your client always has the correct values.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MethodFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OmitKeys\n                \n            \n            \n                \n                        Pick>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Options\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OptionsLegacyParser\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestResult\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseStyle\n                \n            \n            \n                \n                        \"data\" | \"fields\"\n\n                \n            \n        \n    \n    src/crypto/crypto.service.ts\n    \n    \n        \n            \n                \n                    \n                    certificateType\n                \n            \n            \n                \n                        \"access\" | \"signing\"\n\n                \n            \n        \n    \n    src/registrar/generated/client.gen.ts\n    \n    \n        \n            \n                \n                    \n                    CreateClientConfig\n                \n            \n            \n                \n                    The createClientConfig() function will be called on client initialization\nand the returned object will become the client's initial configuration.\nYou may want to initialize your client this way instead of calling\nsetConfig(). This is useful for example if you're using Next.js\nto ensure your client always has the correct values.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/crypto/key/crypto/crypto.service.ts\n    \n    \n        \n            \n                \n                    \n                    CryptoType\n                \n            \n            \n                \n                        \"ES256\" | \"Ed25519\"\n\n                \n            \n        \n    \n    src/registrar/generated/core/params.ts\n    \n    \n        \n            \n                \n                    \n                    Field\n                \n            \n            \n                \n                        literal type | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FieldsConfig\n                \n            \n            \n                \n                            ReadonlyArray\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    KeyMap\n                \n            \n            \n                \n                        Map\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Slot\n                \n            \n            \n                \n                        \"body\" | \"headers\" | \"path\" | \"query\"\n\n                \n            \n        \n    \n    src/crypto/key/crypto/crypto-implementation.ts\n    \n    \n        \n            \n                \n                    \n                    KeyPair\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Signer\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Verifier\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    scripts/import.ts\n    \n    \n        \n            \n                \n                    \n                    LoginReponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/session/entities/session.entity.ts\n    \n    \n        \n            \n                \n                    \n                    Notification\n                \n            \n            \n                \n                    Represents a session entity for managing user sessions in the application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/registrar/generated/sdk.gen.ts\n    \n    \n        \n            \n                \n                    \n                    Options\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/registrar/generated/client/client.ts\n    \n    \n        \n            \n                \n                    \n                    ReqInit\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
