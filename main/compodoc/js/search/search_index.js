var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AccessCertificateResponse.html",[0,0.587,1,3.61]],["body/interfaces/AccessCertificateResponse.html",[0,0.317,1,3.904,2,0.727,3,0.045,4,0.035,5,0.08,6,2.136,7,0.496,8,3.418,9,5.399,10,5.209,11,0.927,12,0.107,13,0.446,14,4.462,15,1.906,16,0.495,17,5.68,18,0.538,19,0.202,20,0.009,21,1.659,22,0.992,23,3.407,24,1.873,25,2.578,26,1.936,27,1.961,28,3.123,29,0.438,30,0.741,31,3.407,32,2.928,33,0.395,34,2.047,35,0.78,36,4.885,37,1.951,38,3.131,39,2.136,40,3.418,41,3.418,42,3.418,43,3.418,44,3.418,45,3.418,46,1.951,47,2.52,48,1.209,49,2.725,50,2.136,51,1.17,52,3.661,53,2.136,54,1.403,55,1.464,56,1.348,57,1.703,58,5.08,59,6.17,60,2.212,61,2.341,62,1.703,63,1.611,64,1.348,65,1.403,66,1.464,67,1.611,68,1.403,69,3.223,70,1.532,71,1.298,72,2.136,73,1.813,74,5.699,75,5.467,76,2.136,77,3.418,78,4.771,79,0.045,80,0.021,81,1.17,82,2.245,83,3.418,84,1.464,85,1.611,86,2.345,87,1.134,88,1.209,89,1.918,90,2.136,91,1.298,92,1.951,93,1.037,94,2.084,95,2.596,96,1.813,97,1.697,98,0.905,99,1.951,100,1.813,101,1.703,102,1.813,103,1.703,104,1.403,105,1.403,106,1.209,107,1.961,108,2.902,109,1.209,110,1.527,111,2.136,112,2.136,113,2.342,114,2.136,115,2.725,116,2.136,117,2.136,118,2.222,119,1.209,120,2.136,121,2.136,122,2.136,123,2.136,124,2.136,125,5.985,126,2.136,127,1.403,128,2.136,129,0.954,130,3.418,131,1.813,132,1.343,133,2.902,134,2.578,135,1.296,136,1.061,137,1.036,138,1.611,139,1.813,140,3.418,141,1.659,142,3.223,143,1.464,144,2.136,145,2.136,146,2.185,147,2.402,148,3.418,149,1.067,150,2.136,151,2.425,152,1.813,153,1.611,154,3.418,155,5.206,156,2.136,157,2.136,158,2.136,159,1.134,160,0.905,161,1.036,162,2.136,163,1.252,164,3.223,165,2.136,166,2.136,167,2.136,168,2.003,169,2.136,170,2.136,171,1.209,172,2.136,173,1.951,174,1.951,175,1.348,176,1.951,177,1.951,178,1.951,179,2.136,180,2.136,181,2.136,182,2.136,183,1.464,184,2.136,185,4.838,186,3.407,187,4.274,188,2.806,189,2.136,190,0.97,191,1.128,192,1.813,193,1.561,194,2.902,195,0.663,196,2.136,197,2.136,198,3.418,199,3.418,200,1.611,201,2.902,202,1.007,203,3.066,204,2.928,205,2.136,206,1.067,207,2.136,208,2.136,209,2.136,210,2.136,211,2.927,212,4.838,213,2.862,214,3.123,215,2.136,216,3.407,217,4.274,218,3.418,219,2.304,220,5.343,221,3.904,222,5.699,223,3.123,224,2.136,225,1.007,226,1.951,227,2.136,228,2.136,229,2.245,230,2.136,231,2.725,232,1.813,233,1.813,234,1.813,235,1.611,236,1.813,237,2.136,238,1.638,239,3.418,240,1.252,241,2.578,242,2.136,243,2.136,244,4.274,245,2.136,246,1.209,247,2.073,248,2.902,249,2.136,250,1.279,251,2.136,252,1.951,253,2.578,254,2.136,255,2.136,256,1.403,257,1.703,258,1.252,259,0.005,260,1.951,261,2.136,262,2.136,263,1.961,264,2.136,265,2.136,266,2.136,267,1.532,268,2.136,269,1.951,270,1.067,271,2.136,272,2.136,273,3.123,274,1.951,275,2.136,276,1.532,277,2.136,278,2.136,279,1.813,280,2.136,281,2.136,282,1.703,283,2.136,284,3.123,285,2.157,286,3.418,287,2.136,288,1.464,289,1.209,290,1.813,291,3.418,292,3.418,293,2.136,294,2.157,295,1.703,296,2.136,297,1.464,298,1.464,299,1.951,300,2.136,301,2.136,302,0.004]],["title/classes/ApiKeyConfig.html",[80,0.038,303,3.354]],["body/classes/ApiKeyConfig.html",[3,0.096,4,0.075,5,0.075,7,1.064,12,0.229,13,0.778,16,0.664,18,0.54,19,0.373,20,0.009,22,2.208,29,0.376,60,1.424,79,0.147,80,0.07,87,4.04,97,2.374,129,2.048,191,1.182,202,3.317,259,0.006,302,0.006,303,5.969,304,1.801,305,4.19,306,5.538,307,6.424,308,6.065,309,2.163,310,1.771,311,3.847,312,0.758,313,5.189,314,2.904,315,4.819,316,3.619,317,5.189,318,3.893,319,3.893,320,3.759,321,3.627,322,2.163,323,2.225,324,3.459,325,4.19,326,3.657,327,5.454,328,4.763,329,3.619,330,5.636,331,4.19,332,2.688,333,4.19,334,2.894,335,3.657,336,3.657,337,2.688,338,2.233,339,3.143,340,3.459,341,2.688]],["title/controllers/AppController.html",[342,1.478,343,3.61]],["body/controllers/AppController.html",[3,0.124,4,0.097,5,0.097,12,0.295,18,0.518,20,0.009,29,0.441,33,1.094,79,0.124,80,0.057,109,0.995,135,1.437,259,0.007,302,0.007,310,1.757,312,0.752,342,2.618,343,6.394,344,2.509,345,6.702,346,1.776,347,8.71,348,6.702,349,7.919,350,3.144,351,5.411,352,4.722,353,6.702,354,4.722,355,4.059,356,5.924]],["title/modules/AppModule.html",[357,1.443,358,3.354]],["body/modules/AppModule.html",[3,0.119,4,0.056,5,0.056,15,1.383,19,0.231,20,0.009,21,2.366,29,0.501,33,0.63,34,2.697,35,1.245,61,1.868,64,2.151,79,0.071,80,0.033,109,0.819,110,1.207,136,1.767,137,2.366,151,1.659,161,1.655,219,1.608,246,3.223,250,1.275,259,0.005,270,2.435,302,0.005,338,1.275,343,5.199,344,2.066,357,2.078,358,6.831,359,1.703,360,1.868,361,1.998,362,1.998,363,1.868,364,2.761,365,1.931,366,3.41,367,3.41,368,5.449,369,4.152,370,5.84,371,5.449,372,5.449,373,5.238,374,4.904,375,4.683,376,5.449,377,2.857,378,1.998,379,1.868,380,3.858,381,5.199,382,3.403,383,4.831,384,3.341,385,2.446,386,3.115,387,3.41,388,3.858,389,4.876,390,3.858,391,3.858,392,4.876,393,3.115,394,3.858,395,3.41,396,2.718,397,3.858,398,4.876,399,3.858,400,5.517,401,3.858,402,3.858,403,4.876,404,2.895,405,3.858,406,3.115,407,3.858,408,3.858,409,4.876,410,3.858,411,3.858,412,3.858,413,3.858,414,3.115,415,2.718,416,4.139,417,3.858,418,3.858,419,3.858,420,3.9,421,3.858,422,3.858,423,3.858,424,3.858,425,4.454,426,3.858,427,4.454,428,4.454,429,3.115,430,1.659,431,6.44,432,5.692,433,4.454,434,6.44,435,2.718,436,3.115,437,3.115,438,3.858,439,4.831,440,1.564,441,3.858,442,3.858,443,3.858,444,4.139,445,4.454,446,4.454,447,3.115,448,3.858,449,3.115,450,3.858,451,3.858,452,3.858,453,1.915,454,3.858,455,1.931,456,3.858,457,3.858,458,3.858,459,3.858,460,3.858,461,3.858,462,3.858,463,3.858,464,3.858,465,3.858,466,3.202,467,5.517,468,2.066,469,5.517,470,3.858,471,5.517,472,2.446,473,3.858,474,2.572,475,3.858,476,2.718,477,3.858,478,2.895,479,3.858,480,1.523,481,1.755,482,4.876,483,3.858,484,1.868,485,3.858,486,3.41,487,3.858,488,3.858,489,3.858,490,3.858,491,3.41,492,5.517,493,3.858,494,2.572,495,3.858,496,3.858]],["title/interfaces/Auth.html",[0,0.587,129,1.765]],["body/interfaces/Auth.html",[0,0.705,2,1.615,3,0.099,4,0.077,5,0.077,11,1.656,12,0.237,13,0.796,16,1.092,18,0.527,19,0.372,20,0.009,79,0.141,88,2.687,89,2.798,107,2.801,109,1.197,110,1.294,129,3.471,141,2.303,146,1.733,147,1.733,190,1.731,191,1.494,206,3.681,259,0.006,302,0.006,309,1.811,314,3.169,323,2.962,324,5.559,328,4.841,339,4.183,430,2.424,453,1.864,497,5.369,498,8.06,499,5.728,500,5.576,501,5.181,502,7.37,503,4.624,504,6.164,505,4.028,506,5.38,507,5.369,508,6.906,509,5.369]],["title/controllers/AuthController.html",[342,1.478,510,3.61]],["body/controllers/AuthController.html",[3,0.075,4,0.059,5,0.059,7,1.474,11,1.723,12,0.179,15,1.433,16,0.519,18,0.374,19,0.317,20,0.009,21,2.451,24,1.964,29,0.459,33,0.662,38,3.334,79,0.075,80,0.035,82,4.397,84,3.462,85,3.81,86,1.801,89,2.804,93,1.088,94,1.76,107,1.645,109,0.602,110,1.514,113,4.589,115,5.339,118,2.176,129,2.99,132,1.408,135,1.226,146,2.136,147,1.309,159,1.902,160,3.248,190,1.433,191,0.71,193,2.706,195,1.568,238,2.566,259,0.005,302,0.005,306,2.572,309,1.063,310,1.063,312,0.455,314,2.765,316,2.6,323,3.249,324,3.81,332,2.101,341,2.101,342,1.341,344,1.519,346,1.282,350,1.902,351,3.274,472,4.557,480,3.102,502,6.352,510,4.615,511,4.056,512,1.902,513,6.619,514,4.056,515,4.056,516,5.344,517,4.027,518,5.716,519,4.615,520,5.344,521,4.615,522,5.344,523,4.056,524,3.554,525,5.052,526,5.716,527,0.994,528,1.964,529,7.577,530,2.572,531,5.344,532,4.288,533,4.412,534,3.585,535,4.412,536,3.585,537,3.585,538,4.056,539,4.056,540,2.961,541,3.043,542,4.056,543,2.354,544,4.056,545,4.056,546,4.056,547,7.187,548,3.043,549,4.056,550,2.704,551,4.615,552,3.274,553,2.6,554,4.615,555,4.056,556,5.052,557,4.288,558,5.716,559,4.056,560,2.572,561,3.462,562,2.572,563,4.056,564,3.043,565,3.624,566,2.704,567,5.716,568,4.056,569,4.056,570,5.716,571,4.056,572,4.056,573,3.043,574,4.056,575,3.462,576,4.056,577,2.178,578,4.056,579,4.056,580,4.056,581,4.056,582,4.056,583,4.056,584,1.79,585,3.043,586,4.056,587,4.056,588,3.274,589,4.056,590,2.704,591,3.274,592,3.585,593,3.585]],["title/modules/AuthModule.html",[357,1.443,368,3.15]],["body/modules/AuthModule.html",[3,0.096,4,0.075,5,0.075,20,0.009,29,0.492,33,0.852,35,1.685,79,0.125,80,0.045,84,3.161,110,0.978,132,1.812,138,5.75,259,0.006,302,0.006,344,2.539,357,2.431,359,2.304,360,2.528,361,2.704,362,2.704,363,2.528,364,3.77,365,3.77,368,6.451,377,3.513,378,2.704,379,2.528,382,2.528,383,5.088,384,4.107,409,4.614,510,6.082,533,6.022,534,4.614,535,5.647,536,4.614,594,4.614,595,4.614,596,4.614,597,5.243,598,6.778,599,5.22,600,7.533,601,3.916,602,5.22,603,5.22,604,5.22,605,8.744,606,5.22,607,8.625,608,8.265,609,5.22,610,5.22,611,4.614,612,5.22,613,5.22,614,5.22,615,4.214,616,5.22]],["title/interfaces/AuthResponse.html",[0,0.587,617,3.354]],["body/interfaces/AuthResponse.html",[0,0.825,2,1.891,3,0.116,4,0.091,5,0.091,7,1.29,11,1.828,12,0.277,13,0.878,18,0.571,19,0.357,20,0.009,22,1.954,79,0.116,89,2.848,225,3.42,259,0.007,302,0.007,309,1.649,501,5.719,506,5.371,617,6.154,618,6.288,619,3.808,620,4.431,621,6.044,622,6.885,623,7.623,624,7.623,625,4.834,626,5.469,627,4.093,628,3.815,629,6.288,630,4.718]],["title/classes/AuthorizationResponse.html",[80,0.038,631,3.354]],["body/classes/AuthorizationResponse.html",[3,0.12,4,0.094,5,0.094,7,1.332,12,0.286,13,0.895,18,0.564,19,0.272,20,0.009,29,0.362,79,0.12,80,0.066,89,2.698,195,2.481,259,0.007,302,0.007,304,2.254,310,1.703,311,3.783,312,0.728,322,2.707,323,3.697,619,3.933,620,5.477,626,5.181,627,4.629,631,5.831,632,7.772,633,5.74,634,5.831]],["title/controllers/AuthorizeController.html",[342,1.478,635,3.61]],["body/controllers/AuthorizeController.html",[3,0.073,4,0.057,5,0.057,7,1.156,9,3.576,11,2.073,12,0.175,16,0.912,18,0.565,19,0.336,20,0.009,29,0.457,33,0.65,51,1.927,79,0.073,80,0.034,86,1.777,89,2.898,91,3.826,93,1.067,94,2.527,109,1.058,110,0.746,135,1.723,146,2.694,147,1.284,151,2.671,190,1.786,191,1.247,193,2.881,195,2.204,202,2.351,206,2.489,246,4.02,247,1.706,259,0.005,270,3.817,299,3.212,302,0.005,310,1.868,312,0.799,323,3.765,342,2.487,344,1.49,346,1.264,350,1.866,468,1.49,512,1.866,524,4.545,527,1.747,528,1.927,532,4.231,543,2.309,557,2.985,635,4.553,636,3.979,637,3.979,638,4.984,639,4.553,640,5.639,641,5.288,642,7.126,643,7.522,644,3.517,645,5.708,646,5.639,647,3.979,648,4.984,649,3.979,650,3.979,651,4.316,652,5.346,653,1.49,654,3.979,655,3.979,656,5.753,657,3.979,658,3.979,659,3.979,660,5.639,661,3.979,662,3.759,663,4.984,664,3.273,665,2.803,666,2.652,667,2.219,668,3.967,669,3.979,670,3.212,671,3.652,672,2.803,673,3.212,674,3.979,675,3.979,676,1.706,677,5.021,678,3.979,679,3.979,680,4.518,681,3.979,682,3.212,683,3.517,684,2.985,685,2.985,686,3.979,687,3.517,688,3.979,689,2.985,690,3.979,691,3.979]],["title/classes/AuthorizeQueries.html",[80,0.038,645,2.981]],["body/classes/AuthorizeQueries.html",[3,0.095,4,0.074,5,0.074,12,0.226,13,0.773,16,1.19,18,0.608,19,0.375,20,0.009,29,0.286,79,0.095,80,0.057,259,0.006,302,0.006,304,1.783,310,2.349,311,4.1,312,1.004,321,4.839,322,2.141,550,4.983,645,4.474,680,4.74,692,9.013,693,3.257,694,5.608,695,7.475,696,7.475,697,7.475,698,5.267,699,7.475,700,7.475,701,4.74,702,7.475,703,8.957,704,5.137,705,4.54,706,5.137,707,5.137,708,5.137,709,4.54,710,5.137,711,4.148,712,5.137,713,4.54,714,5.137]],["title/injectables/AuthorizeService.html",[30,0.857,668,2.708]],["body/injectables/AuthorizeService.html",[0,0.372,3,0.052,4,0.041,5,0.041,11,1.829,12,0.125,16,0.976,18,0.588,19,0.341,20,0.009,21,1.215,29,0.449,30,0.84,33,0.463,34,2.337,35,0.915,38,1.089,47,2.999,48,1.418,51,1.372,60,0.777,79,0.081,80,0.024,86,2.343,93,1.176,98,1.641,109,1.024,110,1.618,113,1.716,118,1.981,119,1.418,129,2.116,135,1.594,136,1.203,146,2.754,147,2.634,151,2.712,159,1.329,161,2.299,164,1.889,190,1.099,191,1.335,193,2.462,195,2.21,213,1.468,236,2.126,238,2.21,246,2.683,247,1.88,250,0.937,256,1.645,259,0.004,270,3.368,302,0.004,309,0.743,312,0.856,329,3.138,334,2.444,337,3.125,338,1.772,341,2.777,346,0.983,468,3.016,478,3.289,480,1.73,527,1.87,564,2.126,577,1.521,590,1.889,621,2.922,628,3.02,641,4.328,644,2.505,645,5.196,651,1.716,652,4.022,653,1.641,664,4.004,665,3.778,666,1.889,667,1.58,668,2.655,670,2.288,671,4.012,672,1.997,680,3.4,694,4.527,698,4.598,715,1.034,716,2.505,717,3.875,718,4.384,719,4.739,720,4.739,721,4.739,722,4.384,723,4.739,724,1.58,725,4.357,726,4.357,727,2.834,728,2.834,729,3.539,730,2.834,731,5.268,732,3.875,733,2.834,734,5.767,735,2.834,736,2.834,737,2.288,738,2.834,739,2.834,740,2.834,741,2.834,742,3.875,743,2.834,744,2.834,745,2.834,746,3.654,747,3.539,748,4.328,749,3.02,750,2.505,751,1.889,752,1.997,753,2.505,754,2.505,755,1.716,756,2.126,757,3.539,758,2.505,759,3.875,760,3.539,761,2.505,762,3.875,763,1.797,764,4.739,765,2.505,766,2.299,767,2.288,768,2.505,769,2.288,770,2.505,771,2.288,772,2.505,773,2.505,774,2.288,775,2.354,776,1.997,777,2.288,778,2.288,779,2.505,780,2.288,781,2.505,782,2.288,783,2.505,784,2.505,785,2.505,786,3.875,787,2.505,788,2.288,789,2.505,790,2.505,791,3.705,792,2.505,793,2.505,794,2.505,795,2.505,796,2.505,797,3.875,798,3.089,799,2.505,800,4.872,801,2.505,802,2.505,803,2.505,804,4.328,805,2.505,806,2.505,807,2.505,808,2.505,809,2.505,810,2.505,811,2.505,812,1.251,813,2.505,814,3.539,815,2.505,816,2.505,817,1.716,818,1.521,819,2.288,820,1.997,821,2.505,822,2.288,823,2.288,824,2.505,825,2.505,826,1.58,827,2.922,828,2.288,829,2.505,830,3.875,831,2.505,832,2.505,833,2.505,834,2.505,835,2.505,836,1.149,837,1.997,838,1.645,839,3.875,840,2.505,841,2.922,842,1.997,843,3.875,844,2.505,845,2.505,846,1.716,847,2.922,848,2.505,849,2.505,850,2.505,851,2.505,852,2.505,853,2.505,854,2.505,855,2.505,856,2.505]],["title/interfaces/Client.html",[0,0.587,38,1.718]],["body/interfaces/Client.html",[0,0.814,2,1.373,3,0.084,4,0.066,5,0.066,12,0.201,13,0.715,15,2.158,18,0.569,19,0.259,20,0.009,29,0.454,30,1.189,31,4.965,33,0.745,34,2.387,35,1.473,38,3.461,54,2.649,56,3.459,61,3.004,64,2.545,65,2.649,66,2.765,68,2.649,79,0.114,80,0.039,81,2.21,82,2.649,86,2.492,93,1.224,94,1.405,97,1.741,106,2.284,109,1.174,110,1.417,113,3.757,115,4.371,132,2.153,135,0.979,136,1.252,149,2.015,160,2.323,161,1.958,191,0.799,202,1.903,216,3.216,219,1.903,259,0.006,263,3.383,282,3.216,285,2.545,294,2.545,302,0.006,306,2.894,336,3.216,338,1.509,352,3.216,420,2.765,430,1.373,472,2.894,494,3.043,535,3.043,575,4.788,615,3.685,662,3.043,826,2.545,842,3.216,857,4.035,858,5.008,859,3.425,860,3.043,861,5.008,862,7.208,863,3.685,864,4.035,865,4.035,866,4.035,867,4.035,868,4.035,869,4.035,870,3.685,871,4.035,872,4.035,873,4.035,874,4.035,875,6.228,876,4.035,877,4.035,878,4.035,879,4.035,880,3.685,881,3.043,882,4.035,883,5.483,884,5.483,885,4.035,886,4.035,887,4.035,888,4.035,889,2.765,890,4.035,891,4.035,892,4.035,893,4.035,894,4.035,895,3.425,896,3.425,897,3.425,898,4.035,899,3.425,900,4.035,901,4.035,902,5.483,903,4.035,904,2.076,905,5.483,906,3.685,907,4.035,908,4.035]],["title/interfaces/Client-1.html",[0,0.489,38,1.432,909,1.748]],["body/interfaces/Client-1.html",[0,0.759,2,1.239,3,0.076,4,0.059,5,0.059,11,2.086,12,0.182,13,0.666,19,0.371,20,0.009,29,0.322,38,2.222,60,2.091,79,0.107,87,1.933,89,2.007,119,2.063,129,3.202,135,1.24,141,3.697,161,2.863,163,2.994,168,2.135,190,1.815,193,1.33,195,1.832,202,2.41,206,1.819,225,3.383,229,3.355,259,0.005,263,1.671,302,0.005,309,1.081,312,0.462,315,2.496,338,1.911,354,4.073,430,1.738,455,3.815,480,2.635,481,1.875,501,3.092,503,2.496,504,5.391,517,2.904,527,1.01,528,3.826,584,1.819,627,2.213,653,2.5,837,2.904,910,3.643,911,5.1,912,6.737,913,4.423,914,5.844,915,6.737,916,6.154,917,6.737,918,4.825,919,6.737,920,4.451,921,5.109,922,6.144,923,4.451,924,5.844,925,3.723,926,3.666,927,2.747,928,3.643,929,3.643,930,2.392,931,2.063,932,5.109,933,4.589,934,2.904,935,2.057,936,4.234,937,3.643,938,3.643,939,3.643,940,4.337,941,3.643,942,1.431,943,3.643,944,3.643,945,5.109,946,2.213,947,3.355,948,5.109,949,2.392,950,3.643,951,3.643,952,3.327,953,3.643,954,2.747,955,3.643,956,3.643,957,3.327,958,3.643,959,3.643,960,5.109,961,4.234,962,5.109,963,5.109,964,5.109,965,5.109,966,3.643,967,3.643,968,3.327,969,3.643,970,3.327,971,3.643,972,3.643,973,3.643,974,3.643,975,3.092,976,3.643,977,3.643]],["title/classes/ClientCredentialsDto.html",[80,0.038,516,3.61]],["body/classes/ClientCredentialsDto.html",[3,0.123,4,0.096,5,0.096,12,0.294,13,0.91,18,0.569,19,0.33,20,0.009,29,0.372,79,0.123,80,0.068,259,0.007,302,0.007,304,2.318,310,2.072,311,4.039,312,0.886,322,2.783,516,6.38,550,5.611,552,6.795,978,8.416,979,6.677,980,6.677,981,6.677]],["title/interfaces/ClientOptions.html",[0,0.587,982,2.708]],["body/interfaces/ClientOptions.html",[0,0.883,2,1.056,3,0.065,4,0.051,5,0.051,11,1.903,12,0.155,13,0.594,16,0.958,18,0.49,19,0.367,20,0.009,24,1.701,27,2.476,29,0.34,38,2.974,60,1.965,79,0.152,87,1.647,91,1.886,95,1.886,97,0.986,98,1.315,107,2.476,109,0.765,127,4.157,129,1.386,136,0.964,137,1.506,141,1.506,142,2.341,159,1.647,161,2.884,163,1.819,175,3.75,190,1.292,193,2.613,195,2.222,206,2.969,211,1.701,219,2.545,225,3.308,229,2.038,238,1.19,250,2.223,258,3.162,259,0.005,302,0.005,314,1.282,316,1.597,338,2.721,346,0.788,430,2.154,440,1.424,453,2.119,455,3.747,480,2.955,484,1.701,653,2.682,918,2.341,920,2.341,922,2.341,923,2.341,927,2.341,930,2.991,933,3.871,935,1.25,936,3.871,942,2.599,954,2.341,961,2.227,982,3.121,983,2.635,984,6.176,985,5.617,986,2.227,987,3.867,988,3.867,989,2.635,990,2.874,991,2.635,992,4.053,993,4.739,994,2.635,995,2.341,996,2.635,997,4.265,998,2.341,999,2.227,1000,1.958,1001,2.635,1002,2.635,1003,2.635,1004,2.635,1005,3.631,1006,3.867,1007,2.635,1008,2.635,1009,2.475,1010,2.635,1011,3.867,1012,2.635,1013,4.302,1014,2.635,1015,2.475,1016,2.635,1017,3.871,1018,2.635,1019,2.475,1020,3.268,1021,2.635,1022,2.635,1023,3.268,1024,2.475,1025,2.227,1026,2.635,1027,2.127,1028,2.127,1029,2.127,1030,2.475,1031,2.475,1032,2.635,1033,2.127,1034,2.635,1035,2.635,1036,2.341,1037,4.58,1038,5.046,1039,6.58,1040,4.58,1041,2.635,1042,4.542,1043,2.127,1044,3.867,1045,2.475,1046,2.635,1047,2.635,1048,2.635,1049,2.038,1050,2.341,1051,2.475,1052,2.635,1053,2.341,1054,2.227,1055,1.758,1056,2.475,1057,5.617,1058,2.635]],["title/injectables/ClientService.html",[30,0.857,535,2.981]],["body/injectables/ClientService.html",[0,0.73,3,0.072,4,0.056,5,0.056,12,0.172,13,0.641,15,2.047,16,0.903,18,0.572,19,0.312,20,0.009,29,0.432,30,1.066,31,5.469,33,0.637,34,2.629,35,1.259,38,3.494,54,2.264,56,3.1,61,2.692,64,2.175,65,2.264,66,2.362,68,2.264,79,0.102,80,0.033,81,1.889,82,3.227,86,2.688,93,1.491,94,1.201,97,1.982,106,2.782,109,1.108,110,1.324,113,4.277,115,4.976,132,2.249,135,1.713,136,1.07,149,1.722,160,2.644,161,2.384,191,1.307,202,1.626,216,2.748,219,1.626,259,0.005,263,3.458,282,3.917,285,2.175,294,2.175,302,0.005,306,3.525,309,1.023,312,0.916,336,3.917,338,1.289,346,1.247,352,3.917,420,2.362,430,1.672,472,3.525,494,2.6,527,1.731,535,3.706,575,3.367,615,3.149,662,3.706,715,1.424,724,2.175,826,2.175,842,2.748,857,3.447,858,5.702,859,2.926,860,2.6,861,5.231,862,7.45,863,5.231,864,3.447,865,3.447,866,3.447,867,3.447,868,3.447,869,3.447,870,3.149,871,3.447,872,3.447,873,3.447,874,6.242,875,5.726,876,3.447,877,6.242,878,3.447,879,3.447,880,3.149,881,3.706,882,4.914,883,4.914,884,4.914,885,3.447,886,4.914,887,4.914,888,4.914,889,3.367,890,4.914,891,4.914,892,4.914,893,4.914,894,4.914,895,2.926,896,2.926,897,2.926,898,3.447,899,2.926,900,3.447,901,3.447,902,4.914,903,3.447,904,1.774,905,4.914,906,3.149,907,3.447,908,3.447,1059,5.56,1060,5.56,1061,5.56,1062,5.56,1063,3.9,1064,3.9,1065,3.9,1066,3.9,1067,2.88,1068,3.9,1069,3.9]],["title/interfaces/Config.html",[0,0.587,60,1.227]],["body/interfaces/Config.html",[0,0.828,2,0.929,3,0.057,4,0.045,5,0.045,11,1.832,12,0.136,13,0.54,16,1.051,18,0.413,19,0.367,20,0.009,24,2.268,27,1.253,29,0.315,38,3.007,60,1.959,79,0.147,87,2.197,91,2.514,95,2.514,97,0.867,98,1.157,107,2.751,109,0.937,127,3.937,129,1.219,136,0.847,137,2.008,141,2.426,142,2.059,159,1.449,161,2.909,163,1.6,175,4.362,190,1.174,193,2.574,195,2.304,206,2.786,211,1.496,219,2.358,225,3.425,229,1.793,238,1.586,250,2.36,258,3.514,259,0.004,302,0.004,309,1.655,314,1.709,316,1.405,338,2.68,346,1.05,430,2.399,440,2.294,453,1.963,455,3.712,480,2.818,484,2.268,653,2.54,918,2.059,920,2.059,922,2.059,923,2.059,927,3.122,930,2.718,933,3.587,935,1.099,936,4.002,942,2.478,954,3.122,961,1.959,982,1.871,983,2.318,984,5.984,985,5.356,986,1.959,987,3.513,988,4.243,989,2.318,990,2.611,991,2.318,992,3.992,993,4.78,994,3.513,995,3.122,996,2.318,997,5.057,998,3.122,999,2.97,1000,2.611,1001,3.513,1002,3.513,1003,2.318,1004,3.513,1005,4.447,1006,4.243,1007,3.513,1008,3.513,1009,3.3,1010,2.318,1011,4.243,1012,3.513,1013,4.78,1014,4.243,1015,3.3,1016,3.513,1017,4.703,1018,3.513,1019,3.3,1020,3.587,1021,3.513,1022,3.513,1023,4.301,1024,3.3,1025,4.002,1026,4.243,1027,3.426,1028,3.426,1029,3.426,1030,3.3,1031,3.3,1032,2.318,1033,1.871,1034,2.318,1035,2.318,1036,2.059,1037,4.243,1038,4.735,1039,6.451,1040,4.243,1041,2.318,1042,4.301,1043,1.871,1044,3.513,1045,2.177,1046,2.318,1047,2.318,1048,2.318,1049,1.793,1050,2.059,1051,2.177,1052,2.318,1053,2.059,1054,1.959,1055,3.395,1056,2.177,1057,5.356,1058,2.318]],["title/interfaces/Config-1.html",[0,0.489,60,1.022,909,1.748]],["body/interfaces/Config-1.html",[0,0.684,2,1.073,3,0.066,4,0.051,5,0.051,11,2.067,12,0.157,13,0.601,16,1.118,19,0.346,20,0.009,29,0.29,38,1.371,60,2.065,79,0.096,87,2.446,89,2.352,119,2.609,129,3.342,135,0.765,141,3.823,161,3.418,163,3.51,168,2.701,190,1.699,193,1.683,195,2.065,202,2.825,206,2.302,225,3.491,229,3.933,259,0.005,263,2.498,302,0.005,309,1.367,312,0.585,315,3.158,338,1.18,354,4.775,430,2.038,455,3.392,480,3.146,481,2.372,501,3.912,503,3.158,504,5.82,517,3.674,527,1.278,528,3.646,584,2.302,627,2.8,653,2.307,837,3.674,910,3.154,911,2.514,912,5.99,913,3.933,914,2.881,915,5.99,916,5.471,917,5.99,918,2.379,919,5.99,920,2.379,921,3.154,922,5.42,923,2.379,924,6.564,925,4.445,926,4.297,927,3.476,928,4.609,929,4.609,930,3.026,931,2.609,932,5.99,933,4.297,934,3.674,935,2.412,936,4.774,937,4.609,938,4.609,939,3.154,940,5.084,941,3.154,942,2.139,943,3.154,944,4.609,945,5.99,946,2.8,947,3.933,948,5.99,949,3.026,950,4.609,951,4.609,952,4.21,953,4.609,954,3.476,955,4.609,956,4.609,957,4.21,958,3.154,959,4.609,960,5.99,961,4.774,962,5.99,963,5.99,964,5.99,965,5.99,966,5.99,967,4.609,968,4.21,969,4.609,970,4.21,971,4.609,972,4.609,973,4.609,974,5.99,975,3.912,976,4.609,977,5.99]],["title/entities/CredentialConfig.html",[1070,2.097,1071,2.708]],["body/entities/CredentialConfig.html",[3,0.092,4,0.072,5,0.072,12,0.221,13,0.76,15,1.851,16,1.004,18,0.513,19,0.362,20,0.009,29,0.466,60,2.025,79,0.092,80,0.056,98,1.875,136,2.405,151,2.22,160,2.471,202,2.087,259,0.006,302,0.006,310,2.272,312,0.972,320,4.191,321,3.964,322,2.087,430,1.506,543,2.906,881,5.231,942,2.724,1070,3.096,1071,3.997,1072,2.792,1073,5.007,1074,5.96,1075,6.525,1076,5.845,1077,4.471,1078,5.583,1079,6.178,1080,6.502,1081,5.833,1082,5.007,1083,6.525,1084,4.426,1085,5.007,1086,5.007,1087,5.529,1088,5.007,1089,4.426,1090,6.6,1091,6.6,1092,5.007,1093,5.007,1094,5.538,1095,6.6,1096,5.007,1097,5.007,1098,5.007,1099,3.175,1100,3.338,1101,6.6,1102,5.833,1103,2.506,1104,3.338,1105,3.757,1106,4.043,1107,4.426,1108,3.338]],["title/injectables/CredentialConfigService.html",[30,0.857,1109,2.981]],["body/injectables/CredentialConfigService.html",[3,0.078,4,0.061,5,0.061,7,1.575,12,0.186,15,2.278,16,0.983,18,0.59,19,0.321,20,0.009,29,0.407,30,1.125,33,0.687,60,2.107,71,3.15,79,0.078,80,0.036,86,1.327,93,1.959,94,2.563,97,2.336,105,4.239,109,1.084,132,2.036,135,1.785,149,3.909,151,2.626,190,1.994,191,1.344,200,3.911,203,3.72,204,3.553,240,3.783,259,0.005,302,0.005,312,0.861,346,1.315,527,1.883,676,1.805,715,1.536,836,3.473,913,4.616,931,2.936,1070,3.905,1071,5.363,1072,3.271,1103,2.106,1109,4.869,1110,7.955,1111,5.968,1112,3.398,1113,5.866,1114,4.209,1115,4.818,1116,4.209,1117,6.753,1118,5.866,1119,3.72,1120,3.911,1121,5.55,1122,7.031,1123,4.133,1124,5.866,1125,5.866,1126,4.209,1127,5.147,1128,5.866,1129,4.209,1130,5.866,1131,4.209,1132,5.866,1133,3.553,1134,2.669,1135,2.106,1136,3.398,1137,3.72,1138,4.209,1139,4.209,1140,4.209,1141,4.209]],["title/classes/CredentialIssuerMetadataDto.html",[80,0.038,1142,3.61]],["body/classes/CredentialIssuerMetadataDto.html",[3,0.093,4,0.073,5,0.073,7,1.031,12,0.222,13,0.762,18,0.579,19,0.367,20,0.009,26,3.312,79,0.093,80,0.043,105,3.841,119,3.312,160,2.943,171,2.517,259,0.006,302,0.006,304,1.746,312,0.973,323,3.371,332,3.428,338,2.868,355,4.76,524,4.22,562,4.196,625,3.188,766,3.923,836,3.558,838,4.866,931,3.312,935,2.355,1142,5.343,1143,6.183,1144,8.775,1145,4.444,1146,3.352,1147,3.045,1148,6.538,1149,6.538,1150,6.538,1151,5.972,1152,6.538,1153,6.538,1154,6.594,1155,6.538,1156,5.028,1157,5.849,1158,5.028,1159,3.69,1160,6.618,1161,5.028,1162,7.397,1163,5.028,1164,5.028,1165,5.028,1166,5.849,1167,5.028,1168,4.965,1169,5.849,1170,5.028,1171,4.412,1172,5.028,1173,4.06,1174,4.444]],["title/controllers/CredentialsController.html",[342,1.478,1175,3.61]],["body/controllers/CredentialsController.html",[3,0.092,4,0.072,5,0.072,7,1.027,12,0.221,15,1.967,16,0.944,18,0.483,19,0.309,20,0.009,29,0.466,33,0.817,60,2.153,71,3.543,79,0.092,80,0.043,89,2.563,94,2.416,97,2.202,103,3.528,105,4.554,109,1.096,135,1.859,149,3.464,191,1.292,193,2.13,200,4.399,259,0.006,302,0.006,310,1.936,312,0.828,342,2.44,344,1.875,346,1.48,350,2.349,481,3.942,512,2.349,527,1.81,528,3.575,530,3.175,540,4.585,597,2.906,676,2.147,766,2.147,836,3.555,913,2.906,1071,4.753,1109,4.921,1111,3.757,1120,4.399,1136,4.043,1175,5.96,1176,5.007,1177,6.6,1178,5.96,1179,6.6,1180,6.525,1181,4.426,1182,5.328,1183,5.007,1184,5.007,1185,5.007,1186,5.007,1187,5.007,1188,3.528,1189,3.528,1190,3.338,1191,4.043,1192,3.528,1193,4.043,1194,2.792,1195,3.528,1196,3.528,1197,4.043,1198,4.185,1199,2.277,1200,5.007,1201,5.007,1202,5.007,1203,4.426,1204,5.007]],["title/controllers/CredentialsMetadataController.html",[342,1.478,1205,3.61]],["body/controllers/CredentialsMetadataController.html",[3,0.103,4,0.081,5,0.081,7,1.148,12,0.247,15,2.163,16,0.907,18,0.597,19,0.342,20,0.009,26,3.549,29,0.395,33,0.914,79,0.103,80,0.048,94,2.397,97,1.99,109,1.053,132,2.462,135,1.67,151,2.667,160,2.915,191,1.241,259,0.007,302,0.007,310,1.86,312,0.795,342,1.85,344,2.096,346,1.59,512,2.625,527,1.739,676,2.4,677,4.997,836,3.499,1077,4.957,1078,5.456,1127,5.767,1147,4.295,1198,4.937,1199,2.546,1205,5.726,1206,5.841,1207,6.881,1208,5.597,1209,5.597,1210,7.092,1211,5.597,1212,4.497,1213,5.597,1214,7.092,1215,5.597,1216,4.728,1217,4.519,1218,5.597,1219,5.597,1220,5.597,1221,5.597,1222,5.597]],["title/injectables/CredentialsService.html",[30,0.857,1198,2.835]],["body/injectables/CredentialsService.html",[3,0.062,4,0.048,5,0.048,12,0.147,15,1.909,16,0.941,18,0.581,19,0.334,20,0.009,29,0.475,30,0.953,33,0.546,34,2.58,35,1.079,47,2.738,48,1.674,60,1.364,79,0.062,80,0.029,86,2.07,93,1.333,94,2.345,97,2.317,109,1.042,110,1.525,118,2.112,135,1.77,136,0.917,146,2.773,147,2.374,151,2.646,160,1.861,183,2.025,190,1.844,191,1.287,203,3.152,231,2.356,238,2.377,240,2.575,259,0.005,288,3.01,302,0.005,309,1.84,312,0.825,314,1.221,334,2.772,346,1.115,468,2.93,474,3.314,527,1.803,543,1.941,553,1.521,577,2.669,653,1.861,715,1.221,746,4.455,749,3.513,751,2.229,763,3.152,775,2.669,791,3.768,812,1.476,817,2.025,818,1.796,836,3.425,942,1.161,1071,4.613,1074,4.013,1075,4.393,1077,3.593,1078,4.679,1083,2.956,1094,2.509,1099,2.121,1103,1.674,1104,2.229,1105,2.509,1106,2.7,1115,3.978,1127,4.628,1134,2.121,1135,1.674,1136,2.7,1137,2.956,1151,4.013,1180,5.243,1198,3.152,1212,4.164,1216,3.314,1223,3.344,1224,5.243,1225,5.932,1226,5.932,1227,4.971,1228,3.344,1229,4.613,1230,5.932,1231,3.344,1232,4.971,1233,3.344,1234,5.667,1235,3.344,1236,5.33,1237,3.344,1238,3.344,1239,3.344,1240,3.344,1241,4.971,1242,3.344,1243,6.568,1244,3.344,1245,3.344,1246,4.393,1247,4.013,1248,4.971,1249,2.575,1250,2.509,1251,2.509,1252,4.393,1253,2.509,1254,2.229,1255,2.025,1256,2.509,1257,2.7,1258,3.344,1259,3.344,1260,4.971,1261,3.344,1262,3.344,1263,3.344,1264,3.344,1265,4.971,1266,4.393,1267,4.789,1268,3.344,1269,3.344,1270,3.344,1271,3.344,1272,3.344,1273,3.344,1274,2.956,1275,3.344,1276,3.344,1277,2.956,1278,3.344,1279,3.344,1280,3.344,1281,2.7,1282,2.509,1283,3.344,1284,2.956,1285,3.344,1286,3.344,1287,2.356,1288,3.344,1289,2.121,1290,4.971,1291,3.344,1292,3.344,1293,3.344,1294,3.344,1295,4.971]],["title/interfaces/CryptoImplementation.html",[0,0.587,1296,3.354]],["body/interfaces/CryptoImplementation.html",[0,1.016,2,1.665,3,0.102,4,0.08,5,0.08,7,1.135,12,0.244,13,0.811,16,0.901,18,0.563,19,0.36,20,0.009,22,2.09,79,0.102,94,2.168,118,2.022,134,5.435,135,1.661,190,2.219,191,1.356,225,2.936,235,3.691,259,0.007,276,3.51,279,5.284,302,0.007,312,0.869,346,1.579,527,1.727,817,4.691,818,4.377,975,6.116,1296,5.284,1297,8.152,1298,5.536,1299,5.686,1300,7.043,1301,4.963,1302,7.206,1303,7.043,1304,7.043,1305,5.536,1306,6.225,1307,6.846,1308,7.043,1309,7.822,1310,5.536,1311,6.582,1312,7.043,1313,7.043,1314,5.536,1315,6.846,1316,7.043,1317,4.47,1318,4.47]],["title/modules/CryptoModule.html",[357,1.443,369,2.401]],["body/modules/CryptoModule.html",[3,0.116,4,0.091,5,0.091,20,0.009,29,0.457,33,1.028,47,3.861,79,0.116,80,0.054,259,0.007,302,0.007,357,2.65,359,2.781,360,3.05,361,3.263,362,3.263,363,3.05,364,4.109,365,4.109,369,4.931,377,3.953,378,3.263,379,3.05,382,3.05,1319,5.568,1320,5.568,1321,5.568,1322,6.527,1323,6.299,1324,6.299,1325,6.299]],["title/injectables/CryptoService.html",[30,0.857,47,1.864]],["body/injectables/CryptoService.html",[3,0.042,4,0.033,5,0.053,9,4.196,10,4.31,11,1.282,12,0.101,13,0.426,14,2.983,15,0.572,16,0.956,18,0.579,19,0.348,20,0.009,21,2.837,22,1.825,29,0.431,30,0.708,32,3.807,33,0.373,34,2.129,35,0.737,38,0.878,47,1.54,54,1.325,55,2.819,56,2.06,57,1.609,61,1.106,62,1.609,63,1.522,64,1.273,65,1.325,66,1.383,67,1.522,68,1.325,79,0.042,80,0.02,81,1.106,86,1.686,93,0.991,104,1.325,109,1.11,110,1.606,113,2.819,118,2.044,131,2.772,135,1.603,136,1.815,137,1.585,146,2.5,147,2.359,151,2.609,153,2.463,159,1.071,161,1.996,183,2.238,188,2.144,190,1.576,191,1.308,192,1.713,204,1.383,225,0.952,232,1.713,233,1.713,234,1.713,238,1.811,241,3.103,246,2.677,247,0.979,250,1.222,256,1.325,259,0.003,263,0.926,276,2.343,289,2.94,294,2.06,297,2.238,298,2.238,302,0.003,309,1.54,310,0.969,312,0.881,314,1.952,332,1.914,346,0.829,352,1.609,379,2.844,386,1.844,420,3.557,430,0.687,444,1.713,453,1.616,480,1.837,494,4.744,506,1.609,527,1.868,543,1.325,560,2.951,565,2.343,577,1.984,584,3.142,666,1.522,667,1.273,676,2.519,685,5.339,715,0.833,724,1.273,737,1.844,749,3.742,751,1.522,752,2.604,766,1.996,775,1.226,798,2.604,812,1.631,817,2.238,818,1.226,819,1.844,822,2.983,858,4.318,859,1.713,863,3.758,895,1.713,896,1.713,897,3.492,904,1.039,909,1.071,942,1.616,993,2.604,1051,1.609,1067,2.411,1247,1.844,1289,4.368,1326,2.284,1327,4.873,1328,4.654,1329,3.695,1330,3.266,1331,3.695,1332,3.695,1333,2.772,1334,3.916,1335,3.695,1336,5.348,1337,3.695,1338,2.284,1339,2.284,1340,3.695,1341,5.348,1342,2.284,1343,2.284,1344,3.266,1345,3.266,1346,2.284,1347,3.695,1348,2.284,1349,4.654,1350,3.695,1351,2.284,1352,2.284,1353,3.266,1354,2.284,1355,2.284,1356,2.284,1357,3.695,1358,2.284,1359,2.284,1360,2.284,1361,4.654,1362,3.695,1363,2.284,1364,2.284,1365,2.284,1366,2.284,1367,2.284,1368,4.654,1369,4.654,1370,3.695,1371,2.772,1372,1.713,1373,1.143,1374,2.284,1375,1.713,1376,1.844,1377,2.284,1378,2.284,1379,2.018,1380,2.284,1381,2.284,1382,3.695,1383,5.348,1384,2.982,1385,2.284,1386,2.284,1387,2.284,1388,3.695,1389,1.844,1390,5.874,1391,2.284,1392,5.348,1393,2.284,1394,5.874,1395,2.284,1396,5.348,1397,2.284,1398,3.695,1399,6.285,1400,4.654,1401,2.284,1402,2.284,1403,2.284,1404,2.284,1405,2.284,1406,3.695,1407,4.964,1408,2.284,1409,2.284,1410,2.284,1411,2.284,1412,2.284,1413,2.284,1414,3.695,1415,2.284,1416,3.695,1417,3.695,1418,3.103,1419,2.284,1420,5.874,1421,3.695,1422,2.983,1423,3.695,1424,3.695,1425,1.844,1426,2.284,1427,2.284,1428,3.695,1429,3.695,1430,3.695,1431,3.695,1432,4.654,1433,3.695,1434,3.695,1435,2.018,1436,2.284,1437,1.844,1438,2.284,1439,2.284,1440,2.284,1441,1.844,1442,1.844,1443,2.284,1444,2.284,1445,2.284,1446,2.284,1447,2.284,1448,2.018,1449,2.018,1450,2.284,1451,2.284,1452,1.844,1453,2.284,1454,2.018,1455,3.695,1456,2.284,1457,3.266,1458,4.114,1459,2.284,1460,2.018,1461,2.284,1462,2.284,1463,2.284,1464,3.695,1465,2.284,1466,3.695,1467,3.695,1468,3.695,1469,3.695,1470,4.727,1471,2.284,1472,2.284,1473,2.284,1474,2.284,1475,2.284,1476,2.018,1477,2.284,1478,2.284,1479,3.266,1480,2.284,1481,2.284,1482,3.695,1483,3.695,1484,3.695,1485,5.348,1486,2.284,1487,3.695,1488,4.654,1489,2.284,1490,3.695,1491,3.695,1492,3.695,1493,3.695,1494,2.284,1495,2.284,1496,2.284,1497,2.284,1498,2.284,1499,1.609,1500,2.06,1501,2.284,1502,2.284]],["title/injectables/CryptoService-1.html",[30,0.714,47,1.554,909,1.748]],["body/injectables/CryptoService-1.html",[3,0.105,4,0.082,5,0.082,12,0.251,16,0.918,19,0.3,20,0.009,29,0.473,30,1.376,33,0.931,34,2.792,35,1.841,47,2.992,79,0.132,80,0.049,93,1.53,100,5.385,109,1.261,118,1.638,135,1.684,191,1.256,202,2.992,238,1.932,259,0.007,276,4.98,302,0.007,309,1.496,312,0.881,346,1.609,430,2.159,527,1.76,715,2.082,775,4.425,818,4.425,998,3.803,1199,2.595,1249,2.955,1250,4.28,1251,4.28,1289,4.551,1296,5.892,1503,5.704,1504,8.242,1505,7.854,1506,5.704,1507,5.704,1508,7.178,1509,5.704,1510,6.942,1511,7.285,1512,5.704,1513,5.704,1514,7.854,1515,7.507,1516,3.455,1517,4.166,1518,5.704]],["title/modules/DatabaseModule.html",[357,1.443,370,3.15]],["body/modules/DatabaseModule.html",[3,0.103,4,0.081,5,0.081,19,0.297,20,0.009,29,0.47,33,0.914,34,2.772,35,1.806,61,3.434,79,0.131,80,0.048,109,1.053,110,1.459,136,1.946,138,5.63,219,2.333,231,3.944,259,0.007,302,0.007,357,2.289,359,2.471,370,4.997,382,3.434,383,5.321,384,4.295,444,4.199,445,4.519,447,4.519,491,4.947,1135,2.801,1519,5.597,1520,3.731,1521,7.092,1522,5.597,1523,7.092,1524,5.597,1525,5.597,1526,5.597,1527,8.185,1528,8.629,1529,7.465,1530,6.819,1531,5.597,1532,5.597,1533,5.597,1534,5.597,1535,5.597,1536,5.597,1537,7.092,1538,7.785,1539,5.597,1540,5.597,1541,7.092,1542,5.597,1543,5.597,1544,5.597,1545,5.597,1546,5.597,1547,4.947,1548,5.597,1549,5.726,1550,5.597,1551,5.597]],["title/classes/EC_Public.html",[80,0.038,1375,3.354]],["body/classes/EC_Public.html",[3,0.096,4,0.075,5,0.075,7,1.07,12,0.23,13,0.781,18,0.554,19,0.346,20,0.009,21,3.823,22,2.328,24,3.648,29,0.291,79,0.125,80,0.068,81,3.284,106,2.612,107,2.75,195,1.432,202,2.827,259,0.006,276,4.3,302,0.006,304,1.812,312,0.894,440,3.055,619,3.161,627,2.803,633,4.614,689,5.088,749,4.137,775,3.641,931,3.77,1053,4.521,1143,5.824,1146,5.022,1373,2.612,1375,5.088,1376,6.673,1384,4.809,1422,7.331,1552,5.308,1553,7.048,1554,7.048,1555,5.475,1556,6.658,1557,6.082,1558,6.658,1559,6.201,1560,7.305,1561,5.22,1562,5.994,1563,5.088,1564,5.22,1565,7.048,1566,5.22,1567,3.161,1568,3.916]],["title/injectables/EncryptionService.html",[30,0.857,1322,3.15]],["body/injectables/EncryptionService.html",[3,0.084,4,0.065,5,0.065,12,0.2,13,0.712,16,0.965,18,0.582,19,0.359,20,0.009,21,1.945,22,1.163,29,0.464,30,1.184,33,0.74,34,2.757,35,1.464,54,2.632,55,2.747,56,3.916,61,2.991,63,3.024,64,2.529,65,2.632,66,2.747,67,3.024,68,2.632,79,0.084,80,0.039,86,2.805,93,1.216,109,0.917,110,1.158,135,1.617,136,1.927,146,2.831,147,2.434,151,2.112,153,4.117,190,1.548,191,1.32,194,3.403,195,1.244,219,1.891,259,0.006,263,2.504,270,2.002,285,2.529,294,3.444,295,3.196,297,3.741,298,3.741,302,0.006,310,1.189,312,0.964,346,1.385,420,2.747,494,4.117,527,1.934,575,2.747,715,1.655,724,2.529,749,3.948,860,3.024,1055,2.27,1199,2.063,1277,4.009,1302,4.009,1322,4.352,1333,4.634,1353,5.459,1371,4.634,1373,2.27,1384,2.529,1557,3.662,1569,4.536,1570,7.023,1571,7.023,1572,7.023,1573,7.023,1574,6.176,1575,7.54,1576,4.352,1577,6.176,1578,6.176,1579,4.536,1580,4.536,1581,4.352,1582,4.536,1583,4.536,1584,6.208,1585,4.536,1586,4.536,1587,4.536,1588,3.662,1589,4.536,1590,3.662,1591,6.176,1592,6.176,1593,6.176,1594,4.536,1595,4.536,1596,5.459,1597,4.009,1598,4.009,1599,6.176,1600,4.536,1601,4.536,1602,4.536,1603,4.009,1604,4.536,1605,6.176,1606,6.176,1607,4.536,1608,4.536,1609,4.536]],["title/interfaces/Fields.html",[0,0.587,258,2.316]],["body/interfaces/Fields.html",[0,0.793,2,1.322,3,0.081,4,0.063,5,0.063,12,0.266,13,0.696,16,0.952,18,0.487,19,0.337,20,0.009,22,2,60,2.212,79,0.137,88,2.2,109,0.897,110,1.7,118,1.262,191,1.058,193,2.402,206,3.285,219,3.102,258,4.041,259,0.006,302,0.006,309,2.166,453,1.526,480,2.937,512,2.062,566,2.93,653,1.646,913,2.551,935,1.564,942,2.799,1036,5.201,1610,3.885,1611,6.578,1612,6.896,1613,6.107,1614,7.126,1615,6.578,1616,3.097,1617,6.545,1618,6.107,1619,3.885,1620,3.885,1621,3.885,1622,3.885,1623,3.885,1624,3.885,1625,3.885,1626,6.107,1627,3.885,1628,6.107,1629,3.885,1630,3.885,1631,3.885,1632,3.885,1633,3.885,1634,6.049,1635,3.885,1636,3.549,1637,3.885,1638,6.107,1639,3.885,1640,3.885,1641,3.885,1642,6.107,1643,3.885,1644,5.343,1645,3.097,1646,3.885,1647,5.343,1648,5.343,1649,5.343,1650,3.885,1651,3.885,1652,3.885,1653,6.107,1654,3.885,1655,3.885,1656,3.885,1657,5.343,1658,3.885,1659,3.885,1660,3.097,1661,3.885]],["title/injectables/FileSystemKeyService.html",[30,0.857,1662,3.61]],["body/injectables/FileSystemKeyService.html",[3,0.057,4,0.045,5,0.082,7,0.639,12,0.137,13,0.543,15,1.589,16,1.003,18,0.585,19,0.36,20,0.009,21,2.719,22,2.049,23,4.798,29,0.445,30,0.904,32,3.84,33,0.509,34,2.426,35,1.006,47,3.101,48,1.559,54,1.808,55,1.887,56,3.171,57,2.196,61,2.283,62,2.196,70,2.989,71,2.531,79,0.057,80,0.027,81,1.509,86,2.695,93,1.264,109,1.137,110,1.342,118,1.354,132,2.364,135,1.765,136,1.293,146,2.796,147,2.688,149,2.081,151,2.572,190,2.109,191,1.372,211,1.509,235,4.539,238,1.055,241,2.077,259,0.004,285,1.738,288,3.444,289,1.559,297,2.855,298,2.855,302,0.004,309,1.236,312,0.934,314,2.075,346,1.057,420,1.887,430,1.418,494,3.143,527,1.923,584,2.081,653,1.167,715,1.137,724,1.738,749,3.925,766,2.022,791,1.673,817,4.124,859,2.338,895,2.338,896,2.338,897,2.338,998,2.077,1049,1.808,1133,1.887,1212,1.976,1249,1.614,1296,4.266,1317,5.498,1327,3.143,1334,4.226,1371,4.266,1373,1.559,1384,4.457,1389,5.119,1418,3.143,1454,4.167,1479,2.754,1510,5.026,1576,3.322,1584,6.019,1588,4.591,1598,2.754,1662,3.806,1663,8.412,1664,2.754,1665,5.686,1666,5.686,1667,4.714,1668,3.806,1669,6.006,1670,4.714,1671,4.714,1672,3.116,1673,3.806,1674,3.806,1675,3.116,1676,5.498,1677,3.116,1678,3.116,1679,3.116,1680,4.714,1681,3.116,1682,3.116,1683,3.806,1684,3.116,1685,3.806,1686,4.02,1687,5.604,1688,3.116,1689,3.116,1690,3.116,1691,3.116,1692,4.714,1693,4.714,1694,4.167,1695,3.806,1696,2.338,1697,2.516,1698,1.976,1699,3.116,1700,3.116,1701,3.116,1702,3.116,1703,5.686,1704,3.116,1705,5.686,1706,5.686,1707,3.116,1708,4.714,1709,4.714,1710,2.754,1711,4.714,1712,3.116,1713,4.714,1714,6.809,1715,3.116,1716,3.116,1717,3.116,1718,3.116,1719,3.116,1720,4.714,1721,3.116,1722,4.714,1723,2.754,1724,2.754,1725,3.116,1726,3.116,1727,3.116,1728,3.116]],["title/interfaces/GenerateTokenOptions.html",[0,0.587,1729,3.61]],["body/interfaces/GenerateTokenOptions.html",[0,0.616,2,1.411,3,0.086,4,0.068,5,0.068,12,0.207,13,0.728,16,1.052,18,0.577,19,0.299,20,0.009,27,1.902,29,0.426,30,1.211,33,0.766,34,2.42,35,1.514,79,0.116,80,0.04,82,2.722,84,4.63,85,5.097,89,2.916,107,1.902,109,1.185,110,1.622,118,2.361,119,2.348,132,1.628,146,2.039,147,2.039,159,2.964,186,3.305,190,1.584,213,2.43,238,2.42,250,2.362,256,4.437,259,0.006,263,2.562,302,0.006,453,1.628,455,2.348,533,3.127,540,4.134,541,3.519,560,2.974,561,4.63,565,4.007,575,3.827,577,3.393,584,3.375,588,6.443,590,5.097,766,3.064,776,3.305,812,3.154,818,2.519,1199,2.134,1301,3.305,1334,4.212,1372,3.519,1373,2.348,1418,3.127,1729,5.769,1730,4.146,1731,4.146,1732,3.787,1733,4.146,1734,5.585,1735,5.102,1736,5.585,1737,5.585,1738,4.146,1739,4.146,1740,6.315,1741,5.585,1742,4.146,1743,5.102,1744,4.146,1745,4.146,1746,4.146,1747,4.146,1748,4.146,1749,4.146,1750,4.146,1751,4.146,1752,3.519,1753,3.519,1754,4.146,1755,4.452,1756,3.519,1757,4.146,1758,4.146,1759,3.519,1760,4.146,1761,3.787,1762,4.146,1763,4.146,1764,4.146,1765,4.146,1766,3.787]],["title/controllers/HealthController.html",[342,1.478,1767,3.61]],["body/controllers/HealthController.html",[3,0.113,4,0.088,5,0.088,7,1.254,12,0.27,20,0.009,29,0.417,33,0.998,70,4.752,79,0.113,80,0.052,86,2.362,93,1.64,109,0.908,131,5.623,132,2.602,135,1.607,213,4.672,259,0.007,302,0.007,310,1.604,312,0.686,342,2.022,344,2.29,346,1.681,512,2.869,524,4.024,639,6.051,1549,6.051,1767,6.82,1768,6.115,1769,8.821,1770,6.624,1771,6.624,1772,8.447,1773,6.624,1774,7.495,1775,6.115,1776,6.115,1777,7.495,1778,7.495,1779,4.937,1780,6.115,1781,5.405,1782,6.115,1783,6.115]],["title/modules/HealthModule.html",[357,1.443,371,3.15]],["body/modules/HealthModule.html",[3,0.127,4,0.099,5,0.099,20,0.009,29,0.475,33,1.124,79,0.127,80,0.059,259,0.008,302,0.008,344,3.012,357,2.596,359,3.039,371,5.668,382,3.333,1767,6.882,1779,5.557,1784,6.883,1785,6.883,1786,8.044]],["title/classes/Interceptors.html",[80,0.038,1043,2.708]],["body/classes/Interceptors.html",[0,0.472,3,0.041,4,0.032,5,0.032,11,1.384,12,0.231,13,0.414,15,1.636,16,0.738,18,0.494,19,0.341,20,0.009,22,0.922,27,0.896,29,0.321,38,0.849,60,1.866,79,0.133,80,0.019,88,3.265,89,1.82,93,1.22,107,2.646,109,1.252,110,1.669,118,1.506,127,3.043,129,0.872,135,1.327,136,1.698,137,2.249,141,0.947,143,1.338,146,0.713,147,0.713,171,4.039,190,1.14,191,1.413,193,0.713,195,1.698,204,2.178,206,2.548,211,1.069,219,2.72,225,0.921,246,2.624,250,1.504,259,0.003,263,2.646,270,2.008,302,0.003,304,0.767,309,2.264,312,0.763,314,2.381,323,0.947,338,2.693,341,1.863,346,0.806,430,0.664,440,1.458,453,1.82,455,3.404,480,2.776,484,2.539,499,1.657,505,1.657,527,1.415,561,1.338,827,1.472,841,1.472,909,2.708,911,1.556,925,3.793,926,2.28,930,2.64,931,2.277,935,2.503,942,2.004,946,2.443,947,4.296,949,2.087,982,1.338,986,1.4,990,2.005,999,1.4,1017,1.4,1020,2.28,1023,2.28,1025,2.28,1027,1.338,1028,1.338,1029,1.338,1033,1.338,1042,3.66,1043,3.496,1055,2.277,1067,1.863,1499,3.205,1500,2.005,1516,1.338,1517,2.64,1616,1.556,1645,4.597,1660,3.205,1787,1.783,1788,4.234,1789,3.934,1790,4.661,1791,3.596,1792,2.178,1793,3.596,1794,6.253,1795,2.209,1796,2.904,1797,2.209,1798,2.904,1799,2.209,1800,2.904,1801,2.209,1802,2.904,1803,4.997,1804,2.209,1805,2.904,1806,2.209,1807,2.904,1808,2.698,1809,2.885,1810,2.885,1811,2.755,1812,1.783,1813,1.472,1814,2.534,1815,1.783,1816,1.556,1817,2.178,1818,1.4,1819,1.4,1820,2.28,1821,2.885,1822,2.885,1823,2.28,1824,2.28,1825,2.904,1826,4.661,1827,3.673,1828,1.783,1829,3.934,1830,4.313,1831,1.783,1832,1.783,1833,1.783,1834,1.783,1835,1.783,1836,2.904,1837,2.904,1838,1.783,1839,3.673,1840,1.4,1841,2.904,1842,1.783,1843,1.783,1844,2.904,1845,3.496,1846,4.234,1847,4.661,1848,1.783,1849,2.904,1850,1.783,1851,2.904,1852,1.783,1853,2.904,1854,1.783,1855,1.783,1856,1.783,1857,1.783,1858,2.904,1859,1.783,1860,1.657,1861,1.783,1862,3.673,1863,1.783,1864,1.783,1865,1.783,1866,1.783,1867,1.783,1868,1.556,1869,1.783,1870,1.783,1871,1.783,1872,1.783,1873,1.783,1874,1.783,1875,1.783,1876,1.783,1877,3.673,1878,1.783,1879,1.783,1880,1.783,1881,1.783,1882,1.783,1883,2.904,1884,1.783,1885,1.783,1886,2.904,1887,1.783,1888,1.783,1889,2.904,1890,1.783,1891,1.783,1892,1.783,1893,1.783,1894,1.783,1895,2.698,1896,1.783,1897,1.783,1898,1.783,1899,1.783,1900,1.783,1901,1.783,1902,1.783,1903,1.783,1904,1.783,1905,2.904,1906,2.904,1907,1.282,1908,1.783,1909,1.783,1910,1.783,1911,1.783,1912,2.904,1913,1.783,1914,1.783,1915,1.783,1916,1.783,1917,2.397,1918,1.783,1919,1.657,1920,1.783,1921,2.397,1922,1.783,1923,1.783,1924,4.234,1925,1.783,1926,1.783,1927,3.673,1928,4.661,1929,1.783,1930,2.904,1931,1.783,1932,1.783,1933,1.783,1934,2.904,1935,2.904,1936,1.783]],["title/entities/IssuanceConfig.html",[1070,2.097,1076,2.981]],["body/entities/IssuanceConfig.html",[3,0.094,4,0.074,5,0.074,11,1.601,12,0.225,13,0.77,15,2.057,16,1.077,18,0.517,19,0.352,20,0.009,25,4.453,26,3.343,29,0.457,79,0.094,80,0.057,97,2.363,136,1.833,149,2.949,151,2.24,160,1.91,168,4.094,188,3.877,202,2.785,259,0.006,302,0.006,310,2.151,312,0.92,320,3.343,321,3.587,322,2.126,350,2.392,430,2.009,626,4.453,628,3.956,838,5.05,1070,3.133,1071,5.098,1072,2.844,1076,4.453,1079,3.594,1080,5.011,1087,3.594,1089,4.508,1100,4.453,1102,5.904,1103,2.553,1104,3.4,1105,3.826,1756,5.011,1937,8.418,1938,4.508,1939,5.249,1940,6.014,1941,6.584,1942,3.826,1943,5.393,1944,5.1,1945,5.904,1946,6.68,1947,5.1,1948,6.68,1949,5.1,1950,5.249,1951,5.1,1952,5.1,1953,6.381,1954,6.68,1955,5.011,1956,4.508,1957,5.1,1958,5.1,1959,5.904,1960,4.118]],["title/controllers/IssuanceController.html",[342,1.478,1961,3.61]],["body/controllers/IssuanceController.html",[3,0.095,4,0.074,5,0.074,12,0.227,15,1.99,16,0.958,18,0.49,19,0.313,20,0.009,29,0.47,33,0.842,60,2.178,79,0.095,80,0.044,89,2.6,94,2.306,97,2.228,105,3.906,109,1.112,135,1.871,149,3.505,191,1.311,193,2.172,200,4.487,259,0.006,302,0.006,310,1.964,312,0.84,342,1.706,344,1.932,346,1.509,350,2.42,481,3.967,512,2.42,527,1.836,528,3.627,530,3.272,540,4.609,597,2.994,676,2.213,726,4.537,766,2.213,838,4.901,913,2.994,1120,4.487,1178,6.048,1181,4.56,1182,5.434,1188,3.635,1189,3.635,1190,3.439,1192,3.635,1193,4.166,1194,2.877,1195,3.635,1196,3.635,1197,4.166,1199,2.347,1203,4.56,1961,5.434,1962,5.159,1963,6.73,1964,6.73,1965,6.621,1966,5.159,1967,5.159,1968,5.159,1969,5.159,1970,5.956,1971,5.159,1972,5.159,1973,4.56,1974,5.159,1975,5.159,1976,5.159,1977,3.635,1978,5.159]],["title/classes/IssuanceDto.html",[80,0.038,1970,3.354]],["body/classes/IssuanceDto.html",[3,0.12,4,0.094,5,0.094,12,0.286,13,0.895,16,0.994,18,0.508,19,0.325,20,0.009,29,0.433,79,0.12,80,0.066,136,1.782,160,2.432,259,0.007,302,0.007,304,2.254,310,2.038,311,3.535,312,0.872,320,3.89,321,4.173,322,2.707,1104,4.329,1105,4.872,1940,6.716,1941,7.352,1950,5.861,1970,5.831,1979,6.494,1980,6.494,1981,6.494,1982,6.494,1983,5.243,1984,6.494,1985,6.275,1986,5.243]],["title/injectables/IssuanceService.html",[30,0.857,726,2.708]],["body/injectables/IssuanceService.html",[3,0.081,4,0.064,5,0.064,12,0.194,15,2.11,16,0.999,18,0.593,19,0.327,20,0.009,21,2.967,29,0.46,30,1.161,33,0.719,60,1.661,79,0.081,80,0.038,86,1.909,93,1.624,94,2.544,97,2.091,105,3.514,109,1.106,110,1.396,135,1.887,146,2.757,147,1.422,149,3.289,151,2.695,160,2.268,190,1.518,191,1.367,203,3.84,240,3.137,259,0.006,288,3.668,302,0.006,309,2.048,312,0.876,346,1.358,527,1.914,653,2.268,715,1.608,726,3.668,836,3.021,838,4.323,1071,3.668,1076,4.037,1103,2.205,1108,2.938,1109,4.966,1111,3.306,1115,4.512,1120,4.037,1121,4.037,1134,2.794,1135,2.205,1178,4.889,1191,3.558,1246,5.352,1940,5.586,1960,3.558,1965,5.352,1970,5.589,1973,3.895,1987,4.407,1988,6.056,1989,6.919,1990,4.407,1991,6.919,1992,4.407,1993,6.056,1994,6.056,1995,4.407,1996,6.056,1997,4.407,1998,4.407,1999,4.407,2000,7.45,2001,6.056,2002,4.407,2003,4.407,2004,3.895,2005,4.407,2006,4.407,2007,6.056,2008,4.407,2009,6.056,2010,4.407,2011,4.407,2012,4.407,2013,4.407,2014,4.407,2015,4.407]],["title/controllers/IssuerManagementController.html",[342,1.478,2016,3.61]],["body/controllers/IssuerManagementController.html",[3,0.084,4,0.066,5,0.066,7,0.935,12,0.201,16,0.583,18,0.298,19,0.36,20,0.009,24,2.208,29,0.479,33,0.744,51,3.001,79,0.084,80,0.039,89,2.151,94,1.908,98,1.707,106,2.282,107,1.849,110,1.162,132,2.151,135,0.978,146,2.273,147,2,186,3.212,191,0.798,193,2.739,195,2.36,247,1.955,259,0.006,270,3.489,289,3.102,302,0.006,309,1.625,310,1.195,312,0.511,316,2.074,339,2.761,342,1.507,344,1.707,346,1.39,350,2.138,355,2.761,440,2.855,481,3.594,484,3.41,512,2.138,517,4.367,524,3.328,527,1.118,528,2.208,530,2.891,531,5.004,532,4.65,540,3.914,548,4.65,553,2.819,597,2.646,664,4.087,667,2.542,676,1.955,682,3.681,701,3.93,766,1.955,836,2.513,837,3.212,842,3.212,846,3.754,870,3.681,904,2.819,935,1.622,1077,3.754,1188,3.212,1189,3.212,1190,3.039,1192,3.212,1193,3.681,1194,3.926,1195,3.212,1196,3.212,1197,3.681,1199,2.074,1418,3.039,1868,3.212,1917,3.039,1977,3.212,2016,5.004,2017,6.198,2018,5.478,2019,4.559,2020,6.224,2021,4.029,2022,5.657,2023,4.029,2024,5.478,2025,4.465,2026,4.029,2027,4.559,2028,4.559,2029,4.559,2030,6.198,2031,4.029,2032,4.465,2033,3.681,2034,4.559,2035,3.039,2036,3.681,2037,4.465,2038,4.029,2039,4.029,2040,5.478,2041,6.679,2042,4.029,2043,4.029,2044,5.685,2045,5.478,2046,4.65,2047,4.132,2048,4.029,2049,4.559,2050,4.559,2051,4.559,2052,4.029,2053,4.559,2054,4.559,2055,4.029,2056,3.681,2057,4.029,2058,4.029,2059,4.029,2060,4.029,2061,4.029]],["title/interfaces/IssuerMetadata.html",[0,0.587,2062,3.15]],["body/interfaces/IssuerMetadata.html",[0,1.067,2,1.855,3,0.114,4,0.089,5,0.089,7,1.265,12,0.272,13,0.868,18,0.532,19,0.354,20,0.009,21,3.231,22,1.932,26,3.771,29,0.343,79,0.114,106,3.771,259,0.007,302,0.007,338,2.491,440,3.055,625,4.777,627,4.045,630,5.652,749,3.771,766,3.926,1145,5.452,1147,4.563,1159,3.439,1166,6.659,1373,3.087,1384,4.724,1552,5.309,1567,5.42,2062,5.309,2063,6.168]],["title/modules/IssuerModule.html",[357,1.443,372,3.15]],["body/modules/IssuerModule.html",[3,0.085,4,0.066,5,0.066,20,0.009,29,0.513,33,0.752,79,0.115,80,0.039,110,0.863,160,1.725,259,0.006,302,0.006,344,2.337,357,2.285,359,2.033,360,2.23,361,2.386,362,2.386,363,2.23,364,3.543,365,3.543,369,4.39,372,6.56,375,4.952,377,3.233,378,2.386,379,2.23,382,3.022,384,3.78,385,2.921,389,4.071,404,3.456,425,3.719,553,2.095,635,5.715,668,5.368,726,4.952,756,3.456,766,1.975,1071,3.78,1076,3.071,1107,4.071,1108,3.071,1109,5.451,1111,3.456,1135,2.305,1175,5.715,1191,3.719,1198,5.185,1205,5.715,1207,4.071,1217,3.719,1255,2.79,1520,3.071,1960,3.719,1961,5.715,2004,4.071,2016,5.715,2018,4.071,2032,5.62,2064,4.071,2065,4.071,2066,4.071,2067,4.071,2068,5.185,2069,5.451,2070,5.185,2071,5.185,2072,4.606,2073,5.715,2074,4.071,2075,4.606,2076,4.606,2077,4.606,2078,4.071,2079,4.606,2080,4.606,2081,4.606,2082,4.161,2083,3.456,2084,3.456,2085,4.606,2086,4.606,2087,4.071,2088,4.606]],["title/classes/JwksResponseDto.html",[80,0.038,1568,3.354]],["body/classes/JwksResponseDto.html",[3,0.104,4,0.081,5,0.081,7,1.155,12,0.248,13,0.82,18,0.511,19,0.298,20,0.009,21,3.808,22,2.277,24,3.781,29,0.314,79,0.131,80,0.067,81,2.727,106,3.563,107,2.284,195,1.953,202,2.348,259,0.007,276,3.571,302,0.007,304,1.955,312,0.632,440,3.166,619,3.411,627,3.823,689,4.226,749,4.106,775,3.024,931,4.325,1053,3.755,1143,5.017,1146,5.205,1373,2.819,1375,4.226,1376,5.749,1384,4.997,1422,7.289,1552,5.502,1553,6.293,1554,6.293,1555,4.547,1556,6.293,1557,4.547,1558,4.978,1559,5.342,1560,6.293,1562,4.978,1563,4.226,1565,6.293,1567,4.312,1568,5.342,2089,4.978]],["title/injectables/JwtAuthGuard.html",[30,0.857,597,2.595]],["body/injectables/JwtAuthGuard.html",[3,0.114,4,0.089,5,0.089,12,0.272,16,0.965,19,0.315,20,0.009,29,0.472,30,1.446,33,1.009,79,0.114,80,0.053,93,1.657,109,1.12,110,1.158,135,1.325,136,1.695,191,1.32,259,0.007,302,0.007,312,0.846,346,1.691,527,1.849,537,5.461,597,4.377,601,4.636,715,2.255,992,3.775,1199,2.811,2090,6.179,2091,7.542,2092,7.542,2093,5.461,2094,7.816,2095,6.179,2096,7.542,2097,6.844,2098,6.179,2099,4.119,2100,4.989,2101,6.179,2102,7.542,2103,4.989,2104,7.542,2105,6.179,2106,5.461,2107,6.179,2108,6.179]],["title/injectables/JwtService.html",[30,0.857,533,2.981]],["body/injectables/JwtService.html",[0,0.559,3,0.079,4,0.061,5,0.061,12,0.188,16,0.939,18,0.555,19,0.307,20,0.009,27,2.399,29,0.409,30,1.134,33,0.695,34,2.704,35,1.375,79,0.109,80,0.036,82,3.433,84,4.672,85,5.143,89,3.037,93,1.142,107,1.727,109,1.145,110,1.589,118,2.293,119,2.96,132,2.053,135,1.575,146,2.577,147,1.909,159,3.188,186,4.168,190,1.841,191,1.285,213,3.064,238,2.302,250,2.247,256,2.472,259,0.006,263,2.756,302,0.006,309,1.117,312,0.865,346,1.326,430,1.281,453,1.479,455,3.401,527,1.8,533,3.943,540,4.325,541,3.195,560,2.701,561,4.672,565,3.751,575,3.582,577,3.176,584,3.406,588,4.776,590,2.839,715,1.555,724,2.375,766,2.914,776,4.168,812,3.406,818,2.287,1199,1.937,1301,3.001,1334,3.943,1372,3.195,1373,2.132,1418,3.943,1729,5.928,1730,3.765,1731,3.765,1732,4.776,1733,6.006,1734,5.228,1735,4.776,1736,5.228,1737,5.228,1738,3.765,1739,3.765,1740,6.006,1741,5.228,1742,3.765,1743,4.776,1744,3.765,1745,3.765,1746,3.765,1747,3.765,1748,3.765,1749,3.765,1750,3.765,1751,3.765,1752,4.438,1753,4.438,1754,5.228,1755,4.788,1756,3.195,1757,3.765,1758,3.765,1759,3.195,1760,5.228,1761,4.776,1762,5.228,1763,5.228,1764,3.765,1765,6.489,1766,3.439,2109,5.915,2110,5.915,2111,4.259,2112,4.259,2113,4.259,2114,4.259,2115,4.259,2116,4.259]],["title/injectables/JwtStrategy.html",[30,0.857,598,3.354]],["body/injectables/JwtStrategy.html",[3,0.115,4,0.066,5,0.066,12,0.203,16,0.97,19,0.317,20,0.009,22,1.599,29,0.455,30,1.195,33,0.751,34,3.053,35,1.485,60,1.941,79,0.085,80,0.039,82,3.619,84,2.786,85,3.067,86,2.576,89,2.165,93,1.234,107,1.865,109,1.213,110,1.421,118,1.321,119,2.302,135,1.337,136,1.711,137,1.973,159,2.158,163,2.383,191,1.327,211,3.02,247,1.973,250,2.339,259,0.006,302,0.006,312,0.85,346,1.398,396,5.759,453,1.597,481,2.092,527,1.859,540,3.928,541,3.451,561,3.777,566,3.067,584,3.123,590,4.157,598,4.678,601,3.451,611,4.066,653,1.722,662,4.157,715,1.679,724,2.565,766,3.505,812,3.123,936,2.917,992,3.121,1077,2.786,1199,2.092,1289,2.917,1301,4.985,1437,3.714,1567,3.777,1732,5.712,1743,3.714,1753,5.307,1766,3.714,1907,2.67,1921,4.716,2103,3.714,2117,4.6,2118,6.236,2119,6.236,2120,7.074,2121,4.6,2122,6.236,2123,4.6,2124,6.236,2125,7.074,2126,4.6,2127,4.6,2128,6.236,2129,4.6,2130,4.6,2131,4.6,2132,4.6,2133,4.066,2134,6.236,2135,4.066,2136,7.584,2137,4.6,2138,4.6,2139,4.6,2140,4.066,2141,4.6,2142,4.6,2143,4.6,2144,4.6,2145,4.6,2146,4.6,2147,4.6,2148,6.236,2149,4.6,2150,4.6,2151,4.066,2152,6.236,2153,4.6,2154,4.6,2155,4.6,2156,4.6,2157,4.6,2158,4.6,2159,4.6,2160,4.6,2161,4.6,2162,3.714,2163,4.6,2164,4.6]],["title/entities/KeyEntity.html",[1070,2.097,2165,3.61]],["body/entities/KeyEntity.html",[3,0.122,4,0.096,5,0.096,12,0.292,13,0.906,18,0.515,19,0.329,20,0.009,29,0.369,79,0.122,80,0.057,136,2.158,151,2.523,259,0.007,302,0.007,310,2.063,312,0.882,881,5.244,1070,3.69,1072,3.695,1079,5.543,1087,5.543,1100,4.418,1103,3.317,1309,6.953,1317,6.774,2165,6.351,2166,6.627,2167,6.627,2168,6.627]],["title/modules/KeyModule.html",[357,1.443,373,3.15]],["body/modules/KeyModule.html",[3,0.099,4,0.077,5,0.077,15,1.342,20,0.009,29,0.499,33,0.874,34,2.889,35,1.728,47,3.555,48,2.679,60,1.469,79,0.127,80,0.046,109,1.132,110,1.292,118,1.979,135,1.148,138,5.083,259,0.006,302,0.006,312,0.6,346,1.2,357,2.461,359,2.363,364,2.679,365,2.679,369,3.701,373,5.372,382,2.592,383,5.171,384,4.175,385,3.394,396,4.857,398,4.731,444,4.016,445,4.322,447,4.322,1000,2.985,1327,4.595,1520,3.569,1529,6.739,1530,5.565,1662,5.565,1697,5.565,2165,4.322,2169,5.353,2170,7.624,2171,5.353,2172,7.624,2173,6.893,2174,5.353,2175,5.565,2176,7.538,2177,4.857,2178,5.87,2179,2.985,2180,5.353,2181,5.353,2182,6.893,2183,5.353,2184,5.353,2185,4.322,2186,5.353,2187,5.353,2188,4.731,2189,6.893,2190,5.353,2191,5.353,2192,5.353,2193,6.893]],["title/classes/KeyService.html",[80,0.038,1327,2.981]],["body/classes/KeyService.html",[0,0.833,3,0.087,4,0.068,5,0.068,7,0.968,12,0.208,15,1.591,16,1.077,18,0.598,19,0.366,20,0.009,21,2.722,22,2.193,23,5.401,29,0.353,79,0.087,80,0.04,94,1.454,132,2.661,135,1.859,141,2.722,151,2.731,190,2.257,191,1.473,247,2.025,259,0.006,302,0.006,304,1.639,312,0.944,314,2.617,346,1.423,506,5.052,527,2.063,584,2.802,684,3.543,749,4.003,817,4.988,1049,3.683,1249,2.446,1299,5.124,1327,4.231,1334,4.779,1373,2.363,1576,4.472,1581,4.472,1668,5.124,1669,6.794,1674,5.124,1676,6.458,1683,5.124,1685,3.812,1686,4.861,1698,2.994,1756,3.543,2194,4.722,2195,9.236,2196,4.722,2197,4.722,2198,4.722,2199,4.722,2200,4.722,2201,4.722,2202,7.666,2203,4.722]],["title/injectables/LoggerConfigService.html",[30,0.857,2204,3.61]],["body/injectables/LoggerConfigService.html",[0,0.566,3,0.11,4,0.062,5,0.062,7,0.885,12,0.19,13,0.688,16,0.764,18,0.448,19,0.286,20,0.009,27,3.526,29,0.332,30,1.144,33,0.705,34,2.715,35,1.393,60,1.877,71,3.205,79,0.11,80,0.037,86,2.68,93,1.158,97,2.25,109,1.243,110,0.809,132,2.072,133,4.479,135,1.846,137,2.935,191,1.045,202,2.488,213,3.092,250,1.973,259,0.006,302,0.006,312,0.983,346,1.339,414,4.82,427,4.82,428,4.82,429,4.82,433,3.485,435,3.041,436,3.485,437,3.485,439,5.54,440,2.775,446,4.82,449,5.525,503,3.615,527,1.463,676,1.851,715,1.575,724,2.407,942,1.498,1067,3.825,1112,3.485,1119,3.815,1199,1.963,2204,4.82,2205,7.807,2206,3.615,2207,6.526,2208,6.526,2209,6.526,2210,6.526,2211,6.526,2212,6.526,2213,6.526,2214,5.969,2215,6.526,2216,6.526,2217,5.969,2218,4.316,2219,6.258,2220,4.316,2221,4.316,2222,7.086,2223,4.316,2224,4.316,2225,4.316,2226,5.276,2227,4.316,2228,4.316,2229,5.276,2230,5.276,2231,4.479,2232,4.316,2233,5.276,2234,5.276,2235,3.785,2236,5.276,2237,5.276,2238,5.276,2239,5.276,2240,5.276,2241,3.815,2242,3.815,2243,5.203,2244,3.815,2245,5.276,2246,5.134,2247,3.815,2248,3.815,2249,3.815,2250,3.815,2251,3.815,2252,3.815,2253,3.815]],["title/interfaces/LoggerConfiguration.html",[0,0.587,2219,3.61]],["body/interfaces/LoggerConfiguration.html",[0,0.652,2,1.493,3,0.121,4,0.072,5,0.072,12,0.219,13,0.756,18,0.325,19,0.34,20,0.009,27,3.657,29,0.365,30,1.258,33,0.811,34,2.49,35,1.603,60,1.362,71,2.666,79,0.121,80,0.042,86,2.317,97,2.063,109,1.284,110,0.931,132,1.724,133,3.725,137,3.153,202,2.07,213,2.572,250,2.17,259,0.006,302,0.006,414,4.009,427,5.299,428,5.299,429,5.299,433,4.009,435,3.499,436,4.009,437,4.009,439,6.102,440,3.172,446,6.567,449,6.567,503,3.007,676,2.129,942,1.724,1067,3.399,1112,4.009,1199,2.258,2204,4.009,2205,4.389,2206,3.007,2207,4.389,2208,4.389,2209,4.389,2210,4.389,2211,4.389,2212,4.389,2213,4.389,2215,4.389,2216,4.389,2219,6.315,2222,7.385,2226,4.389,2229,4.389,2230,4.389,2231,3.725,2233,4.389,2234,4.389,2235,3.149,2236,7.189,2237,7.189,2238,7.189,2239,5.801,2240,5.801,2241,4.389,2242,4.389,2243,5.511,2244,4.389,2245,5.801,2246,5.515,2247,4.389,2248,4.389,2249,4.389,2250,4.389,2251,4.389,2252,4.389,2253,4.389]],["title/interfaces/Middleware.html",[0,0.587,990,2.493]],["body/interfaces/Middleware.html",[0,0.492,2,0.7,3,0.043,4,0.034,5,0.034,11,1.663,12,0.238,13,0.432,15,1.182,18,0.501,19,0.334,20,0.009,22,0.962,29,0.33,38,0.894,60,1.903,79,0.136,80,0.02,88,3.337,89,1.877,93,0.624,107,3.048,109,1.263,110,1.678,118,1.553,127,3.138,129,0.918,136,1.739,137,2.021,141,0.998,143,1.409,146,0.751,147,0.751,171,3.173,190,1.182,191,1.341,193,0.751,195,1.965,206,2.618,211,1.127,219,2.78,225,0.97,246,2.706,250,2.096,259,0.004,263,2.571,270,2.081,302,0.004,309,2.28,314,2.434,323,0.998,338,2.721,341,1.943,430,0.7,440,1.521,453,1.877,455,3.472,480,2.827,484,2.618,499,1.746,505,1.746,561,1.409,827,1.551,841,1.551,909,2.782,911,1.639,925,3.868,926,2.379,930,2.736,931,2.359,935,2.549,942,2.059,946,2.531,947,4.363,949,2.177,982,1.409,986,1.475,990,2.628,999,1.475,1017,1.475,1020,2.379,1023,2.379,1025,2.379,1027,1.409,1028,1.409,1029,1.409,1033,1.409,1042,4.767,1043,3.275,1055,2.359,1499,3.321,1500,2.092,1516,1.409,1517,2.736,1616,1.639,1645,4.698,1660,3.321,1787,1.879,1788,3.029,1789,1.746,1790,5.783,1794,5.002,1796,1.879,1798,1.879,1800,1.879,1802,1.879,1803,3.806,1805,1.879,1807,3.029,1808,2.815,1809,2.989,1810,2.989,1811,2.855,1812,1.879,1813,1.551,1814,2.643,1815,1.879,1816,1.639,1817,2.272,1818,1.475,1819,1.475,1820,2.379,1821,2.989,1822,2.989,1823,2.379,1824,2.379,1825,3.029,1826,4.788,1827,3.806,1828,1.879,1829,4.056,1830,4.399,1831,1.879,1832,1.879,1833,1.879,1834,1.879,1835,1.879,1836,3.029,1837,3.029,1838,1.879,1839,3.806,1840,1.475,1841,3.029,1842,1.879,1843,1.879,1844,3.029,1845,3.592,1846,4.365,1847,4.788,1848,1.879,1849,3.029,1850,1.879,1851,3.029,1852,1.879,1853,3.029,1854,1.879,1855,1.879,1856,1.879,1857,1.879,1858,3.029,1859,1.879,1860,1.746,1861,1.879,1862,3.806,1863,1.879,1864,1.879,1865,1.879,1866,1.879,1867,1.879,1868,1.639,1869,1.879,1870,1.879,1871,1.879,1872,1.879,1873,1.879,1874,1.879,1875,1.879,1876,1.879,1877,3.806,1878,1.879,1879,1.879,1880,1.879,1881,1.879,1882,1.879,1883,3.029,1884,1.879,1885,1.879,1886,3.029,1887,1.879,1888,1.879,1889,3.029,1890,1.879,1891,1.879,1892,1.879,1893,1.879,1894,1.879,1895,2.815,1896,1.879,1897,1.879,1898,1.879,1899,1.879,1900,1.879,1901,1.879,1902,1.879,1903,1.879,1904,1.879,1905,3.029,1906,3.029,1907,1.35,1908,1.879,1909,1.879,1910,1.879,1911,1.879,1912,3.029,1913,1.879,1914,1.879,1915,1.879,1916,1.879,1917,2.501,1918,1.879,1919,1.746,1920,1.879,1921,2.501,1922,1.879,1923,1.879,1924,4.365,1925,1.879,1926,1.879,1927,3.806,1928,4.788,1929,1.879,1930,3.029,1931,1.879,1932,1.879,1933,1.879,1934,3.029,1935,3.029,1936,1.879]],["title/classes/NotificationRequestDto.html",[80,0.038,2254,3.354]],["body/classes/NotificationRequestDto.html",[3,0.121,4,0.095,5,0.095,12,0.29,13,0.902,18,0.512,19,0.328,20,0.009,29,0.436,79,0.121,80,0.067,259,0.007,302,0.007,304,2.284,310,2.054,311,3.804,312,0.878,322,2.742,693,4.171,709,5.814,713,5.814,889,5.065,1099,4.171,2254,5.876,2255,8.364,2256,8.364,2257,6.753,2258,7.832,2259,7.832,2260,4.935]],["title/classes/Oauth2AuthorizationServerResponse.html",[80,0.038,2261,3.61]],["body/classes/Oauth2AuthorizationServerResponse.html",[3,0.088,4,0.069,5,0.069,7,0.98,11,1.534,12,0.211,13,0.737,18,0.595,19,0.363,20,0.009,22,1.64,27,2.594,28,5.166,79,0.088,80,0.041,82,4.899,89,2.221,91,3.435,106,3.202,119,4.489,195,1.311,259,0.006,302,0.006,304,1.659,312,0.974,323,3.986,332,3.99,338,2.902,440,2.594,524,4.713,619,2.894,648,6.809,656,6.219,766,3.093,767,5.823,769,5.823,771,5.823,774,5.823,777,5.823,778,5.823,780,5.823,782,5.823,804,5.166,1143,6.185,1146,3.186,1159,4.295,1289,4.057,1301,5.428,1442,5.166,1552,4.508,1567,3.875,2089,4.224,2261,5.166,2262,8.777,2263,4.779,2264,4.779,2265,8.265,2266,4.779,2267,4.779,2268,3.858,2269,4.779,2270,4.779,2271,5.655,2272,6.398,2273,4.224]],["title/classes/OfferRequestDto.html",[80,0.038,2022,2.981]],["body/classes/OfferRequestDto.html",[3,0.103,4,0.081,5,0.081,7,1.457,11,1.346,12,0.247,13,0.819,16,1.048,18,0.574,19,0.367,20,0.009,22,1.439,29,0.434,51,2.719,79,0.131,80,0.067,98,2.919,195,1.949,259,0.007,302,0.007,304,1.949,310,2.149,311,3.546,312,0.919,316,3.989,320,3.556,321,4.186,322,2.341,350,2.634,468,2.102,625,3.56,693,3.56,701,4.944,711,4.533,846,4.304,847,5.197,904,2.554,942,1.949,1983,4.533,1985,5.737,2022,4.737,2025,3.56,2035,5.197,2036,4.533,2037,4.944,2046,5.849,2047,4.737,2260,4.212,2274,7.472,2275,5.615,2276,4.962,2277,5.615,2278,5.331,2279,5.615,2280,5.615,2281,5.615,2282,6.281,2283,4.533]],["title/classes/OfferResponse.html",[80,0.038,2025,2.835]],["body/classes/OfferResponse.html",[3,0.112,4,0.087,5,0.087,7,1.241,11,1.451,12,0.267,13,0.858,18,0.583,19,0.337,20,0.009,22,1.552,29,0.449,51,2.931,79,0.137,80,0.069,98,2.267,195,1.661,259,0.007,302,0.007,304,2.101,311,3.387,312,0.835,316,3.828,320,3.727,321,4.331,322,2.523,350,2.839,468,3.021,693,3.838,701,3.838,846,3.666,847,4.035,904,3.669,942,2.101,1985,6.013,2022,4.035,2025,4.723,2035,4.965,2036,4.887,2037,4.723,2046,4.541,2047,4.965,2260,4.541,2274,7.13,2278,4.541,2282,6.583,2283,4.887,2284,6.053,2285,5.35]],["title/controllers/Oid4vciController.html",[342,1.478,2073,3.61]],["body/controllers/Oid4vciController.html",[3,0.095,4,0.074,5,0.074,11,2.061,12,0.227,16,0.859,18,0.552,19,0.332,20,0.009,29,0.479,33,0.84,51,2.491,79,0.095,80,0.044,94,2.303,109,1.11,110,0.964,135,1.701,151,2.621,160,2.515,188,2.986,190,1.684,191,1.176,193,2.723,240,2.665,246,4.411,247,2.881,257,3.625,259,0.006,302,0.006,310,1.761,312,0.753,340,4.987,342,1.701,344,1.926,346,1.506,468,2.969,474,5.287,512,2.413,524,4.417,527,1.647,528,2.491,665,3.625,667,2.869,676,2.206,677,4.733,826,2.869,828,4.154,836,3.033,1099,3.262,1171,4.478,1199,2.34,2032,4.743,2033,4.154,2070,3.262,2073,5.424,2082,4.478,2084,3.86,2254,5.949,2286,5.145,2287,5.145,2288,5.145,2289,5.145,2290,5.145,2291,5.938,2292,5.145,2293,5.145,2294,5.145,2295,4.547,2296,4.547,2297,4.547,2298,3.86,2299,4.154,2300,5.145,2301,4.547,2302,5.145,2303,4.547,2304,5.145,2305,5.145,2306,5.145,2307,5.145,2308,5.145,2309,5.145,2310,5.145,2311,5.145]],["title/injectables/Oid4vciService.html",[30,0.857,2032,2.835]],["body/injectables/Oid4vciService.html",[3,0.047,4,0.037,5,0.037,11,1.814,12,0.251,13,0.466,15,1.735,16,0.795,18,0.552,19,0.328,20,0.009,21,2.151,29,0.47,30,0.775,32,4.002,33,0.417,34,2.344,35,0.825,47,2.885,48,1.279,51,1.958,55,2.449,57,1.801,61,1.958,62,1.801,79,0.047,80,0.022,81,1.237,86,2.329,93,1.084,94,1.245,97,1.135,109,0.847,110,1.644,118,1.987,134,2.695,135,1.333,136,0.701,146,2.572,147,2.634,149,1.128,151,2.538,155,2.063,160,1.514,161,1.734,190,1.657,191,1.087,193,2.234,195,0.701,213,1.324,238,2.344,240,2.094,246,3.11,247,1.096,250,2.373,257,1.801,259,0.004,267,1.62,269,2.063,285,1.425,289,2.023,295,2.849,297,1.548,298,1.548,302,0.004,312,0.829,338,1.337,340,3.344,346,0.907,453,1.403,466,2.346,468,2.891,474,2.695,478,3.033,480,2.251,481,2.282,522,2.063,524,1.372,527,1.523,540,3.423,565,2.564,577,2.694,651,1.548,667,1.425,668,3.454,671,3.859,672,1.801,676,3.169,698,4.019,715,0.933,726,4.192,731,3.264,746,2.449,747,3.264,748,4.05,751,1.703,752,1.801,756,1.917,760,4.05,763,1.62,766,2.446,791,2.694,798,2.849,812,1.785,814,2.063,820,2.849,823,3.264,836,1.639,838,1.483,846,2.449,847,1.703,880,2.063,889,1.548,904,1.162,906,2.063,909,1.896,942,0.887,975,1.917,1030,1.801,1054,1.62,1067,1.324,1076,1.703,1099,1.62,1133,1.548,1147,1.548,1148,2.259,1149,2.259,1150,2.259,1151,2.063,1152,2.259,1153,3.573,1154,3.264,1155,2.259,1171,4.142,1174,2.259,1190,1.703,1198,4.799,1217,2.063,1224,4.434,1234,3.264,1236,2.695,1458,2.259,1517,1.483,1695,4.05,1696,1.917,1816,1.801,1977,1.801,2022,3.802,2025,2.564,2032,2.564,2046,3.033,2062,5.057,2071,3.616,2074,2.259,2082,2.695,2083,1.917,2087,2.259,2099,3.344,2206,1.548,2235,2.564,2254,4.279,2296,2.259,2297,2.259,2298,3.764,2312,2.555,2313,6.214,2314,5.017,2315,5.017,2316,2.555,2317,4.043,2318,4.043,2319,2.555,2320,2.555,2321,2.555,2322,2.555,2323,2.555,2324,2.555,2325,4.043,2326,3.573,2327,2.555,2328,2.555,2329,2.555,2330,5.703,2331,2.555,2332,5.703,2333,5.017,2334,2.555,2335,4.043,2336,2.555,2337,2.555,2338,2.555,2339,3.535,2340,2.555,2341,2.555,2342,4.043,2343,2.555,2344,2.555,2345,4.434,2346,2.555,2347,2.555,2348,2.555,2349,2.555,2350,2.555,2351,2.555,2352,5.017,2353,2.555,2354,2.555,2355,2.555,2356,2.555,2357,2.555,2358,4.043,2359,2.555,2360,2.555,2361,5.703,2362,2.555,2363,2.259,2364,2.259,2365,2.555,2366,2.063,2367,2.555,2368,4.043,2369,2.555,2370,4.043,2371,2.555,2372,2.259,2373,4.043,2374,4.043,2375,4.043,2376,4.043,2377,4.043,2378,4.043,2379,4.043,2380,4.043,2381,4.605,2382,3.033,2383,3.033,2384,2.555,2385,2.259,2386,5.703,2387,2.555,2388,2.555,2389,2.555,2390,2.555,2391,2.555,2392,2.259,2393,2.555,2394,2.555,2395,4.043,2396,2.555,2397,2.555,2398,2.555,2399,2.555,2400,2.555,2401,2.555,2402,2.555,2403,2.555,2404,6.608,2405,2.555,2406,4.043,2407,4.043,2408,2.259,2409,2.555,2410,2.259,2411,2.555,2412,2.555,2413,2.555,2414,2.555,2415,2.555,2416,2.259,2417,2.555,2418,2.555,2419,2.555,2420,5.703,2421,2.555,2422,4.043,2423,2.555,2424,2.555,2425,2.259,2426,2.259]],["title/controllers/Oid4vpController.html",[342,1.478,2427,3.61]],["body/controllers/Oid4vpController.html",[3,0.094,4,0.074,5,0.074,7,1.047,11,1.603,12,0.225,16,0.855,18,0.589,19,0.28,20,0.009,29,0.457,33,0.834,79,0.094,80,0.044,91,3.59,93,1.37,94,2.527,95,2.742,100,3.832,101,5.252,102,5.016,109,0.993,135,1.806,151,2.58,191,1.17,193,2.649,195,1.834,253,5.72,259,0.006,302,0.006,310,1.753,312,0.75,323,2.867,342,2.464,344,1.913,346,1.499,468,3.213,476,6.046,512,2.396,524,3.59,527,1.639,528,2.473,543,2.964,631,5.933,676,2.19,677,4.711,725,4.971,826,3.728,1121,4.457,1199,2.323,1216,4.457,2070,3.239,2082,4.457,2084,3.832,2295,4.514,2298,3.832,2299,4.124,2301,4.514,2303,4.514,2427,6.018,2428,5.108,2429,5.108,2430,6.686,2431,7.454,2432,6.588,2433,5.108,2434,5.108,2435,5.108,2436,4.514,2437,5.108,2438,5.108,2439,4.457,2440,4.514,2441,4.514,2442,5.108,2443,5.108,2444,5.108,2445,5.108,2446,5.108,2447,5.108,2448,5.108,2449,5.108]],["title/modules/Oid4vpModule.html",[357,1.443,2068,2.835]],["body/modules/Oid4vpModule.html",[3,0.102,4,0.08,5,0.08,20,0.009,29,0.501,33,0.905,79,0.102,80,0.047,259,0.007,302,0.007,344,2.64,357,2.502,359,2.448,360,2.685,361,2.872,362,2.872,363,2.685,364,3.879,365,3.879,369,4.622,374,5.458,375,5.213,377,3.652,378,2.872,379,2.685,382,3.414,385,3.516,393,4.477,404,4.16,725,5.518,2068,5.904,2070,5.458,2071,5.458,2082,4.7,2083,4.16,2084,4.16,2177,4.967,2179,3.092,2427,6.258,2440,4.901,2450,4.901,2451,4.901,2452,4.901,2453,4.901,2454,5.458,2455,5.545,2456,5.545,2457,4.901]],["title/injectables/Oid4vpService.html",[30,0.857,725,2.708]],["body/injectables/Oid4vpService.html",[3,0.045,4,0.036,5,0.036,9,1.562,11,1.75,12,0.109,15,0.618,16,0.715,18,0.555,19,0.234,20,0.009,22,0.632,24,1.193,29,0.46,30,0.753,33,0.402,34,2.311,35,0.795,47,2.711,48,1.233,51,1.193,52,4.132,60,0.676,61,1.193,69,4.548,79,0.045,80,0.021,86,2.233,93,1.053,94,2.181,98,2.285,103,2.767,104,2.279,109,0.583,110,1.571,118,0.707,119,1.233,129,0.972,135,1.309,146,2.416,147,2.549,151,2.605,160,2.285,161,1.684,173,1.989,174,1.989,175,1.374,176,1.989,177,1.989,178,1.989,183,2.378,188,1.43,190,1.401,191,0.978,192,1.848,193,1.268,195,1.533,225,1.027,231,3.451,232,1.848,233,1.848,234,1.848,238,1.659,240,2.034,247,2.1,248,3.674,250,2.527,253,5.186,258,1.276,259,0.004,267,3.543,270,1.734,282,1.736,289,1.965,295,2.767,302,0.004,309,0.646,312,0.626,314,1.787,315,1.492,323,2.617,328,1.562,329,3.103,334,1.374,338,0.814,339,1.492,346,0.881,453,2.118,466,2.279,468,2.653,472,4.124,476,4.582,480,1.55,527,1.594,543,2.279,550,2.618,565,3.105,577,2.629,584,1.088,617,1.848,621,1.642,622,3.171,628,1.233,631,4.192,665,2.767,666,1.642,671,3.804,672,1.736,680,1.562,694,4.879,701,1.562,715,0.899,725,2.378,763,1.562,775,3,812,2.466,818,2.109,826,2.19,838,1.43,904,1.121,909,1.156,942,0.855,968,1.989,1123,1.736,1171,2.618,1249,1.276,1282,1.848,1284,2.177,1287,1.736,1289,1.562,1306,3.471,1311,4.511,1322,4.807,1384,1.374,1437,1.989,1567,1.492,1596,2.177,1603,2.177,1617,1.848,1634,1.848,1636,1.989,1695,3.171,1696,1.848,1789,1.848,1816,2.767,1921,3.724,1953,1.989,2025,1.562,2071,3.543,2082,2.618,2083,1.848,2099,4.068,2178,4.807,2179,1.374,2206,1.492,2235,3.543,2298,3.674,2339,3.451,2364,2.177,2366,1.989,2381,5.509,2382,2.946,2383,2.946,2385,3.471,2392,5.394,2408,2.177,2410,2.177,2416,3.471,2425,2.177,2432,3.471,2436,3.471,2441,2.177,2458,2.463,2459,4.897,2460,4.897,2461,2.463,2462,2.463,2463,2.463,2464,2.463,2465,3.171,2466,3.171,2467,2.946,2468,2.463,2469,4.511,2470,2.463,2471,2.463,2472,3.927,2473,2.463,2474,2.463,2475,2.463,2476,2.463,2477,2.946,2478,1.642,2479,1.989,2480,2.463,2481,2.463,2482,2.177,2483,5.587,2484,3.927,2485,4.897,2486,2.463,2487,3.927,2488,6.103,2489,2.463,2490,2.463,2491,3.171,2492,2.463,2493,2.463,2494,2.463,2495,2.177,2496,2.463,2497,2.463,2498,2.463,2499,2.463,2500,2.463,2501,2.463,2502,2.463,2503,2.463,2504,2.463,2505,2.463,2506,2.463,2507,2.463,2508,2.463,2509,2.463,2510,4.897,2511,4.897,2512,2.463,2513,2.463,2514,3.927,2515,3.927,2516,2.463,2517,2.463,2518,2.463,2519,2.463,2520,2.463,2521,2.463,2522,2.463,2523,1.989,2524,2.177,2525,2.463,2526,2.463,2527,1.989,2528,2.177,2529,2.463,2530,2.463,2531,5.587,2532,3.927,2533,2.463,2534,2.463,2535,2.463,2536,3.927,2537,2.463,2538,2.463,2539,4.897,2540,3.927,2541,2.463,2542,2.463,2543,2.463,2544,2.463,2545,1.642,2546,5.587,2547,3.927,2548,3.927,2549,2.463,2550,2.463,2551,2.463,2552,3.927,2553,2.463,2554,2.463,2555,2.463,2556,2.463,2557,3.927,2558,2.463,2559,3.927,2560,2.463,2561,4.897,2562,2.463,2563,3.927,2564,2.463,2565,3.927,2566,3.927,2567,2.463,2568,3.927,2569,2.463,2570,2.463,2571,2.463,2572,2.463,2573,2.463,2574,2.463,2575,4.897,2576,3.927,2577,3.927,2578,2.463,2579,2.463,2580,2.463,2581,2.177,2582,2.463,2583,2.463,2584,4.897,2585,2.463,2586,2.177,2587,2.463,2588,2.463,2589,2.463,2590,2.463,2591,2.463,2592,2.177,2593,2.463]],["title/classes/ParResponseDto.html",[80,0.038,673,3.61]],["body/classes/ParResponseDto.html",[3,0.12,4,0.094,5,0.094,11,2.147,12,0.288,13,0.898,18,0.51,19,0.326,20,0.009,79,0.12,80,0.056,171,3.903,259,0.007,302,0.007,304,2.267,312,0.874,323,3.344,557,6.255,593,6.892,619,3.955,656,6.296,673,6.296,680,5.287,904,3.928,2268,5.272,2273,5.772,2594,8.338,2595,7.798,2596,7.798]],["title/interfaces/Params.html",[0,0.587,1634,3.354]],["body/interfaces/Params.html",[0,0.789,2,1.312,3,0.08,4,0.063,5,0.063,12,0.265,13,0.693,18,0.485,19,0.345,20,0.009,22,1.995,60,2.207,79,0.137,88,2.184,109,0.893,110,1.699,118,1.253,191,1.053,193,2.66,206,3.639,219,3.436,258,3.843,259,0.006,302,0.006,309,2.161,453,1.515,480,3.253,512,2.047,566,2.909,653,1.634,913,2.532,935,1.553,942,3.05,1036,4.588,1610,3.857,1611,3.857,1612,5.316,1613,3.857,1614,7.11,1615,6.557,1616,3.075,1617,6.536,1618,6.084,1619,3.857,1620,3.857,1621,3.857,1622,3.857,1623,3.857,1624,3.857,1625,3.857,1626,6.084,1627,3.857,1628,6.084,1629,3.857,1630,3.857,1631,3.857,1632,3.857,1633,3.857,1634,6.184,1635,3.857,1636,3.523,1637,3.857,1638,6.084,1639,3.857,1640,3.857,1641,3.857,1642,6.084,1643,3.857,1644,5.316,1645,3.075,1646,3.857,1647,5.316,1648,5.316,1649,5.316,1650,3.857,1651,3.857,1652,3.857,1653,6.084,1654,3.857,1655,3.857,1656,3.857,1657,5.316,1658,3.857,1659,3.857,1660,3.075,1661,3.857]],["title/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,0.587,757,3.61]],["body/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,0.44,2,1.009,3,0.062,4,0.048,5,0.048,11,1.828,12,0.148,13,0.574,18,0.558,19,0.308,20,0.009,21,1.439,29,0.466,30,0.956,33,0.548,34,2.014,35,1.083,38,1.29,47,2.478,48,1.68,51,1.625,60,0.921,79,0.092,80,0.029,86,2.321,93,0.9,98,1.866,109,1.093,110,1.658,113,2.033,118,2.115,119,1.68,129,2.346,136,1.367,146,2.377,147,2.728,151,2.648,159,1.574,161,2.55,164,2.238,190,0.842,193,2.269,195,2.021,213,1.739,236,2.518,238,2.381,246,1.68,247,2.137,250,1.11,256,1.948,259,0.005,270,3.103,302,0.005,309,0.88,329,2.993,334,2.779,337,2.582,338,1.965,341,3.08,468,3.132,478,3.739,480,1.967,564,2.518,577,1.802,590,2.238,621,3.323,628,3.293,641,2.71,645,4.386,651,2.033,652,3.739,664,4.644,665,4.189,666,2.238,667,1.872,668,2.033,670,2.71,671,3.315,672,2.365,680,3.77,694,4.936,698,3.512,716,2.967,719,2.967,720,2.967,721,2.967,723,2.967,725,3.601,726,3.601,729,2.71,731,5.312,732,2.967,734,5.816,742,2.967,746,3.985,747,5.312,748,4.8,749,3.293,750,2.967,751,2.238,752,2.365,753,2.967,754,2.967,755,2.033,756,2.518,757,4.8,758,5.816,759,4.406,760,4.024,761,2.967,762,4.406,763,2.128,764,5.255,765,2.967,766,2.55,767,2.71,768,2.967,769,2.71,770,2.967,771,2.71,772,2.967,773,2.967,774,2.71,775,2.676,776,2.365,777,2.71,778,2.71,779,2.967,780,2.71,781,2.967,782,2.71,783,2.967,784,2.967,785,2.967,786,4.406,787,2.967,788,2.71,789,2.967,790,2.967,791,3.955,792,2.967,793,2.967,794,2.967,795,2.967,796,2.967,797,4.406,798,3.512,799,2.967,800,5.312,801,2.967,802,2.967,803,2.967,804,4.8,805,2.967,806,2.967,807,2.967,808,2.967,809,2.967,810,2.967,811,2.967,812,1.482,813,2.967,814,4.024,815,2.967,816,2.967,817,2.033,818,1.802,819,2.71,820,2.365,821,2.967,822,2.71,823,2.71,824,2.967,825,2.967,826,1.872,827,3.323,828,2.71,829,2.967,830,4.406,831,2.967,832,2.967,833,2.967,834,2.967,835,2.967,836,1.361,837,2.365,838,1.948,839,4.406,840,2.967,841,3.323,842,2.365,843,4.406,844,2.967,845,2.967,846,2.033,847,3.323,848,2.967,849,2.967,850,2.967,851,2.967,852,2.967,853,2.967,854,2.967,855,2.967,856,2.967]],["title/interfaces/PathSerializer.html",[0,0.587,1814,3.15]],["body/interfaces/PathSerializer.html",[0,0.5,2,0.714,3,0.044,4,0.034,5,0.034,11,1.437,12,0.241,13,0.439,15,1.198,18,0.519,19,0.332,20,0.009,22,0.978,29,0.334,38,0.913,60,1.918,79,0.136,80,0.02,88,3.365,89,1.899,93,0.637,107,2.43,109,1.267,110,1.681,118,1.571,127,3.175,129,0.937,136,1.755,137,2.049,141,1.018,143,1.438,146,0.766,147,0.766,171,3.202,190,1.198,191,1.348,193,0.766,195,1.755,206,2.645,211,1.15,219,3.085,225,0.99,246,2.738,250,1.58,259,0.004,263,2.594,270,2.11,302,0.004,309,2.286,314,2.454,323,1.018,338,2.79,341,1.975,430,0.714,440,1.546,453,1.899,455,3.498,480,2.847,484,2.649,499,1.782,505,1.782,561,1.438,827,1.583,841,1.583,909,2.811,911,1.673,925,3.898,926,2.418,930,2.773,931,2.392,935,2.567,942,2.334,946,2.566,947,4.389,949,2.213,982,1.438,986,1.506,990,2.127,999,1.506,1017,1.506,1020,2.418,1023,2.418,1025,2.418,1027,1.438,1028,1.438,1029,1.438,1033,1.438,1042,3.8,1043,3.314,1055,2.392,1499,3.367,1500,2.127,1516,1.438,1517,2.773,1616,1.673,1645,4.737,1660,3.367,1787,1.917,1788,3.079,1789,1.782,1790,3.858,1794,5.044,1796,1.917,1798,1.917,1800,1.917,1802,1.917,1803,3.858,1805,1.917,1807,3.079,1808,2.861,1809,3.03,1810,3.03,1811,2.894,1812,1.917,1813,1.583,1814,3.367,1815,1.917,1816,1.673,1817,2.31,1818,1.506,1819,1.506,1820,2.418,1821,3.03,1822,3.03,1823,2.418,1824,2.418,1825,3.079,1826,4.838,1827,3.858,1828,1.917,1829,4.105,1830,4.432,1831,1.917,1832,1.917,1833,1.917,1834,1.917,1835,1.917,1836,3.079,1837,3.079,1838,1.917,1839,3.858,1840,1.506,1841,3.079,1842,1.917,1843,1.917,1844,3.079,1845,3.629,1846,4.417,1847,4.838,1848,1.917,1849,3.079,1850,1.917,1851,3.079,1852,1.917,1853,3.079,1854,1.917,1855,1.917,1856,1.917,1857,1.917,1858,3.079,1859,1.917,1860,1.782,1861,1.917,1862,3.858,1863,1.917,1864,1.917,1865,1.917,1866,1.917,1867,1.917,1868,1.673,1869,1.917,1870,1.917,1871,1.917,1872,1.917,1873,1.917,1874,1.917,1875,1.917,1876,1.917,1877,3.858,1878,1.917,1879,1.917,1880,1.917,1881,1.917,1882,1.917,1883,3.079,1884,1.917,1885,1.917,1886,3.079,1887,1.917,1888,1.917,1889,3.079,1890,1.917,1891,1.917,1892,1.917,1893,1.917,1894,1.917,1895,2.861,1896,1.917,1897,1.917,1898,1.917,1899,1.917,1900,1.917,1901,1.917,1902,1.917,1903,1.917,1904,1.917,1905,3.079,1906,3.079,1907,1.378,1908,1.917,1909,1.917,1910,1.917,1911,1.917,1912,3.079,1913,1.917,1914,1.917,1915,1.917,1916,1.917,1917,2.542,1918,1.917,1919,1.782,1920,1.917,1921,2.542,1922,1.917,1923,1.917,1924,4.417,1925,1.917,1926,1.917,1927,3.858,1928,4.838,1929,1.917,1930,3.079,1931,1.917,1932,1.917,1933,1.917,1934,3.079,1935,3.079,1936,1.917]],["title/entities/PresentationConfig.html",[1070,2.097,2545,2.981]],["body/entities/PresentationConfig.html",[3,0.088,4,0.069,5,0.069,7,0.977,10,3.868,11,2.136,12,0.21,13,0.736,15,2.011,16,0.984,18,0.503,19,0.353,20,0.009,25,4.258,26,3.196,29,0.447,49,5.075,51,2.308,78,4.5,79,0.088,80,0.055,97,1.792,104,3.707,136,2.111,149,2.82,151,2.166,168,3.986,188,3.707,195,1.752,202,2.662,206,3.18,247,2.044,248,5.404,259,0.006,302,0.006,310,2.166,311,2.905,312,0.926,320,3.851,322,1.987,329,3.649,337,3.731,338,2.111,350,2.236,430,1.921,626,5.848,627,3.429,628,3.196,630,4.791,634,4.791,689,3.576,755,2.887,881,5.13,995,4.258,1070,3.609,1072,2.658,1079,5.422,1080,4.791,1081,4.213,1084,4.213,1087,5.075,1100,4.258,1103,2.385,1216,4.258,1555,3.848,1938,4.213,1939,5.075,1942,3.576,1943,5.156,1945,5.645,1956,4.213,1959,5.645,2439,4.258,2491,5.815,2545,4.258,2597,8.435,2598,4.766,2599,4.766,2600,7.203,2601,4.766,2602,4.766,2603,4.766,2604,4.766,2605,4.766,2606,4.766,2607,4.766]],["title/classes/PresentationDuringIssuance.html",[80,0.038,1950,3.15]],["body/classes/PresentationDuringIssuance.html",[3,0.115,4,0.09,5,0.09,7,1.281,12,0.275,13,0.874,16,0.971,18,0.596,19,0.365,20,0.009,29,0.423,79,0.14,80,0.07,191,1.093,259,0.007,302,0.007,304,2.167,310,1.99,311,4.172,312,0.851,320,4.093,322,2.603,329,3.72,337,4.236,755,3.782,992,3.125,1078,5.06,1104,5.452,1206,6.135,1950,5.348,2608,5.519,2609,6.244,2610,6.244,2611,5.519,2612,5.519,2613,5.519]],["title/controllers/PresentationManagementController.html",[342,1.478,2614,3.61]],["body/controllers/PresentationManagementController.html",[3,0.07,4,0.055,5,0.055,7,0.779,11,1.944,12,0.167,15,1.852,16,0.892,18,0.456,19,0.358,20,0.009,24,1.838,29,0.472,33,0.62,51,2.641,52,3.865,60,1.914,79,0.07,80,0.032,86,1.719,89,2.421,93,1.018,94,2.274,97,2.159,98,1.422,105,3.165,106,1.9,107,1.539,109,0.947,110,1.022,135,1.771,146,2.06,147,1.76,191,1.221,193,2.557,195,2.265,203,3.458,204,3.303,240,2.825,247,1.628,253,3.635,259,0.005,270,3.262,289,2.729,302,0.005,309,1.43,310,1.829,312,0.782,315,3.303,316,1.727,329,1.727,339,2.299,342,1.255,344,1.422,346,1.223,350,1.781,440,2.588,481,3.933,484,3.09,512,1.781,517,3.843,527,1.71,528,3.09,530,2.407,531,4.403,532,4.091,540,4.479,548,4.091,553,2.48,597,2.203,628,4.132,664,3.704,667,2.117,676,2.339,682,3.065,701,3.458,725,3.865,904,2.48,913,2.203,935,1.351,1077,3.303,1108,2.531,1120,3.635,1182,4.403,1188,2.675,1189,2.675,1190,2.531,1192,2.675,1194,3.559,1195,3.843,1196,3.843,1418,2.531,1868,2.675,1917,2.531,1977,4.497,2020,5.641,2021,3.356,2023,3.356,2024,4.82,2025,4.047,2026,3.356,2031,3.356,2035,2.531,2037,4.047,2038,3.356,2039,3.356,2040,4.82,2041,6.166,2042,3.356,2043,3.356,2044,5.153,2045,4.82,2047,3.635,2048,3.356,2055,3.356,2056,3.065,2057,3.356,2058,3.356,2059,3.356,2060,3.356,2061,3.356,2479,3.065,2545,4.65,2614,4.403,2615,3.796,2616,5.453,2617,5.641,2618,3.796,2619,3.796,2620,3.796,2621,3.796,2622,6.21,2623,3.796,2624,3.796,2625,3.796,2626,3.796,2627,3.796,2628,5.453,2629,3.356,2630,3.065,2631,3.796,2632,3.796,2633,3.796,2634,3.796,2635,3.796,2636,3.796,2637,3.796,2638,3.796,2639,3.796,2640,3.796,2641,3.796,2642,3.796,2643,3.796,2644,3.796,2645,3.796,2646,3.796,2647,3.796]],["title/classes/PresentationRequest.html",[80,0.038,2622,3.61]],["body/classes/PresentationRequest.html",[3,0.1,4,0.078,5,0.078,7,1.109,11,2.004,12,0.238,13,0.8,15,1.74,16,0.888,18,0.454,19,0.368,20,0.009,26,3.473,29,0.386,79,0.128,80,0.059,97,2.4,195,2.386,202,2.893,229,4.028,253,5.108,259,0.006,302,0.006,304,1.878,310,2.009,311,3.485,312,0.859,316,3.677,320,3.473,321,3.726,322,2.255,326,4.89,329,3.956,337,3.969,341,3.595,620,4.89,627,3.726,628,4.183,664,3.14,693,3.43,701,4.859,711,4.368,755,3.277,904,3.485,1983,4.368,2035,5.108,2037,4.859,2044,4.368,2047,3.606,2162,5.603,2260,4.059,2276,4.782,2278,4.059,2283,5.603,2285,4.782,2439,4.626,2622,5.603,2648,6.526,2649,6.94]],["title/interfaces/PresentationRequestOptions.html",[0,0.587,2469,3.61]],["body/interfaces/PresentationRequestOptions.html",[0,0.832,2,1.908,3,0.117,4,0.092,5,0.092,7,1.301,11,1.974,12,0.28,13,0.883,16,1.162,18,0.539,19,0.321,20,0.009,26,3.835,29,0.353,79,0.117,97,2.151,195,2.102,259,0.007,302,0.007,329,4.047,337,4.43,468,3.332,620,5.4,755,3.842,2439,5.109,2469,6.906,2648,5.122,2650,6.344,2651,6.187]],["title/modules/PresentationsModule.html",[357,1.443,2454,2.835]],["body/modules/PresentationsModule.html",[3,0.11,4,0.086,5,0.086,20,0.009,29,0.5,33,0.975,52,5.573,79,0.11,80,0.051,259,0.007,302,0.007,344,2.766,357,2.588,359,2.636,360,2.892,361,3.093,362,3.093,363,2.892,364,4.013,365,4.013,377,3.826,378,3.093,379,2.892,382,3.576,1108,3.981,1135,2.989,1520,3.981,2068,4.683,2177,5.204,2179,3.33,2454,5.74,2545,3.981,2614,6.474,2629,5.278,2630,4.822,2652,5.278,2653,5.278,2654,5.278,2655,5.278,2656,6.179,2657,5.972,2658,7.386,2659,5.972,2660,5.972,2661,5.278,2662,5.972]],["title/injectables/PresentationsService.html",[30,0.857,52,2.708]],["body/injectables/PresentationsService.html",[3,0.042,4,0.033,5,0.033,7,1.416,10,3.817,11,0.89,12,0.101,13,0.428,15,2.254,16,0.848,18,0.58,19,0.313,20,0.009,21,2.004,22,0.589,29,0.425,30,0.712,32,3.817,33,0.375,52,3.25,71,2.881,78,4.44,79,0.042,80,0.02,81,1.112,86,2.247,91,1.993,93,1.439,94,2.584,95,3.561,97,2.305,98,0.86,101,3.781,102,2.785,103,2.616,104,2.155,105,4.007,109,1.219,110,1.336,118,1.982,132,1.289,135,1.728,136,1.616,137,1.592,141,0.985,146,2.034,147,1.732,149,3.558,151,2.553,164,3.577,190,1.945,191,1.282,195,1.018,200,3.577,225,2.878,226,1.854,235,1.531,238,1.257,240,3.576,250,1.227,257,2.616,259,0.003,270,2.369,302,0.003,309,1.225,312,0.856,314,1.355,346,0.832,430,1.405,453,1.289,500,2.997,503,2.248,522,1.854,527,1.795,543,1.333,553,2.441,577,1.233,584,2.782,617,4.026,622,2.997,626,2.475,628,3.939,683,5.57,715,0.838,746,1.391,749,2.338,775,1.993,776,4.673,791,1.993,812,3.518,826,2.07,904,2.866,913,3.114,931,1.858,935,0.817,997,2.354,1015,2.616,1024,2.616,1067,1.19,1070,2.956,1072,2.07,1108,1.531,1115,3.817,1120,2.475,1121,2.475,1122,6.102,1123,1.618,1127,3.781,1133,2.248,1134,1.456,1135,1.149,1159,2.07,1216,2.475,1234,3.772,1247,3.772,1249,4.215,1250,1.723,1251,1.723,1252,6.303,1253,1.723,1254,4.421,1266,2.03,1274,3.281,1315,6.619,1318,6.163,1371,1.723,1372,1.723,1373,1.149,1686,2.354,1698,1.456,1755,1.618,1792,2.248,1921,2.475,1939,1.618,2178,5.025,2179,1.281,2477,1.723,2478,1.531,2491,1.854,2545,5.088,2592,2.03,2617,3.281,2630,1.854,2663,2.297,2664,3.712,2665,6.904,2666,6.632,2667,4.672,2668,5.366,2669,3.712,2670,4.672,2671,3.712,2672,4.672,2673,3.712,2674,1.854,2675,5.16,2676,5.366,2677,3.712,2678,3.281,2679,3.281,2680,3.712,2681,3.712,2682,2.297,2683,3.712,2684,3.712,2685,2.297,2686,2.297,2687,3.712,2688,2.297,2689,2.297,2690,2.297,2691,5.891,2692,5.366,2693,2.297,2694,4.672,2695,3.712,2696,2.297,2697,3.712,2698,3.712,2699,2.297,2700,4.672,2701,2.297,2702,3.712,2703,3.712,2704,2.297,2705,2.297,2706,2.297,2707,2.297,2708,2.297,2709,2.297,2710,3.712,2711,2.297,2712,2.297,2713,2.297,2714,2.297,2715,1.854,2716,2.297,2717,2.297,2718,2.297,2719,2.297,2720,2.297,2721,2.297,2722,2.297,2723,2.297,2724,2.297,2725,2.297,2726,2.297,2727,2.297,2728,2.297,2729,2.297,2730,2.297,2731,2.297,2732,2.297,2733,2.297,2734,2.297,2735,2.297,2736,2.297,2737,2.297,2738,2.297,2739,4.672,2740,2.297,2741,2.297,2742,2.297,2743,2.297,2744,2.997,2745,3.712,2746,2.297,2747,2.297]],["title/interfaces/PresentedData.html",[0,0.587,2748,3.61]],["body/interfaces/PresentedData.html",[0,0.912,2,1.632,3,0.1,4,0.078,5,0.078,7,1.113,11,1.301,12,0.239,13,0.801,15,1.36,18,0.502,19,0.321,20,0.009,22,1.391,79,0.1,87,2.545,98,2.032,109,1.201,110,1.604,118,2.324,141,2.327,146,1.751,147,2.244,160,3.133,190,1.36,195,1.489,259,0.006,263,2.2,270,2.396,294,3.026,302,0.006,328,4.409,329,2.468,338,1.794,430,1.632,519,5.614,521,4.381,528,3.367,553,3.681,625,4.409,791,2.914,836,2.2,997,3.441,1133,3.287,1955,4.071,2047,3.617,2439,3.617,2748,6.195,2749,4.381,2750,5.426,2751,6.146,2752,5.426,2753,5.426,2754,4.796,2755,6.782,2756,5.614,2757,6.146,2758,4.381,2759,4.796,2760,5.614,2761,6.146,2762,6.146,2763,6.146,2764,4.796,2765,4.796,2766,4.796,2767,6.146,2768,6.146,2769,4.796,2770,4.796,2771,4.796,2772,4.796,2773,4.796,2774,4.796,2775,4.796,2776,4.796,2777,4.796,2778,4.796,2779,4.796,2780,4.796,2781,4.381]],["title/interfaces/ProcessResponse.html",[0,0.587,2756,3.61]],["body/interfaces/ProcessResponse.html",[0,0.916,2,1.642,3,0.101,4,0.079,5,0.079,7,1.12,11,1.309,12,0.241,13,0.804,15,1.369,18,0.503,19,0.322,20,0.009,22,1.4,79,0.101,87,2.561,98,2.044,109,1.204,110,1.607,118,2.329,141,2.341,146,1.762,147,2.253,160,2.044,190,1.369,195,1.915,259,0.007,263,2.214,270,2.41,294,3.044,302,0.007,328,4.427,329,2.483,338,1.805,430,1.642,519,5.636,521,4.408,528,3.38,553,3.689,625,4.427,791,2.931,836,2.831,997,3.462,1133,3.307,1955,4.096,2748,5.636,2749,4.408,2751,4.826,2754,4.826,2755,7.703,2756,6.213,2757,6.17,2758,4.408,2759,4.826,2760,5.636,2761,6.17,2762,6.17,2763,6.17,2764,4.826,2765,4.826,2766,4.826,2767,6.17,2768,6.17,2769,4.826,2770,4.826,2771,4.826,2772,4.826,2773,4.826,2774,4.826,2775,4.826,2776,4.826,2777,4.826,2778,4.826,2779,4.826,2780,4.826,2781,4.408]],["title/interfaces/QuerySerializerOptions.html",[0,0.587,926,2.835]],["body/interfaces/QuerySerializerOptions.html",[0,0.631,2,1.447,3,0.089,4,0.069,5,0.069,12,0.212,13,0.74,16,1.059,18,0.553,19,0.346,20,0.009,22,2.123,27,2.935,29,0.268,79,0.153,88,3.622,109,1.147,110,1.585,118,1.846,193,2.493,206,2.124,225,3.355,259,0.006,263,2.606,302,0.006,309,2.402,453,2.231,653,2.407,924,6.236,925,2.683,926,4.075,931,4.144,935,2.749,942,1.67,1027,2.914,1028,4.383,1055,3.622,1067,3.329,1499,4.529,1500,3.584,1808,3.61,1814,3.39,1817,2.914,1845,4.678,1907,2.792,1919,4.822,2782,4.811,2783,5.637,2784,3.39,2785,4.811,2786,7.724,2787,4.811,2788,6.427,2789,4.811,2790,6.427,2791,6.427,2792,6.427,2793,4.811,2794,4.811,2795,4.811,2796,4.811,2797,4.811,2798,6.427,2799,4.811]],["title/classes/RegistrarConfig.html",[58,3.354,80,0.038]],["body/classes/RegistrarConfig.html",[3,0.12,4,0.094,5,0.094,7,1.332,9,4.928,10,4.707,12,0.286,13,0.895,15,2.267,16,1.103,18,0.564,19,0.325,20,0.009,58,6.24,59,4.872,75,6.275,79,0.12,80,0.066,97,1.823,132,2.254,185,5.831,259,0.007,302,0.007,304,2.254,312,0.872,1146,4.329,2800,8.318,2801,6.494,2802,8.318,2803,6.494,2804,6.494]],["title/modules/RegistrarModule.html",[357,1.443,374,2.835]],["body/modules/RegistrarModule.html",[3,0.103,4,0.08,5,0.08,7,1.142,20,0.009,29,0.47,33,0.909,59,5.828,69,6.128,70,4.484,71,3.796,79,0.13,80,0.048,104,4.104,110,1.044,132,2.455,259,0.007,302,0.007,334,3.106,357,2.637,359,3.429,360,2.697,361,2.885,362,2.885,363,2.697,364,3.888,365,3.888,369,4.627,374,5.807,377,3.662,378,2.885,379,2.697,382,3.957,384,4.282,385,3.532,392,4.924,425,4.498,1077,3.374,1530,6.272,1753,4.179,1813,3.714,2231,4.179,2454,5.465,2805,4.924,2806,4.924,2807,5.571,2808,4.924,2809,5.571,2810,6.25,2811,5.571,2812,5.571,2813,5.571,2814,5.571,2815,5.571,2816,5.571,2817,7.768,2818,7.768,2819,5.571,2820,5.571]],["title/injectables/RegistrarService.html",[30,0.857,69,2.981]],["body/injectables/RegistrarService.html",[0,0.251,1,2.581,3,0.035,4,0.028,5,0.083,6,1.692,7,0.844,8,1.692,9,5.383,10,5.142,11,0.459,12,0.084,13,0.368,14,1.546,15,1.813,16,0.853,17,4.314,18,0.562,19,0.296,20,0.009,21,0.821,22,0.491,23,2.252,24,0.927,25,1.276,26,0.958,27,1.296,28,1.546,29,0.411,30,0.613,31,4.069,32,3.497,33,0.313,34,2.26,35,0.618,36,5.416,37,1.546,38,3.162,39,1.692,40,2.825,41,2.825,42,2.825,43,2.825,44,2.825,45,2.825,46,1.546,47,2.87,48,0.958,49,3.386,50,1.692,51,0.927,52,4.17,53,1.692,54,1.111,55,1.159,56,1.067,57,1.349,58,5.629,59,6.443,60,2.225,61,1.993,62,1.349,63,1.276,64,1.067,65,1.111,66,1.159,67,1.276,68,1.111,69,3.849,70,2.027,71,1.716,72,2.825,73,2.398,74,5.416,75,6.058,76,2.825,77,4.247,78,4.982,79,0.035,80,0.016,81,0.927,82,2.789,83,4.247,84,1.936,85,2.131,86,2.609,87,1.499,88,0.958,89,2.229,90,2.825,91,1.716,92,3.322,93,1.289,94,1.886,95,3.1,96,2.398,97,1.872,98,1.197,99,2.581,100,2.398,101,2.252,102,2.398,103,2.252,104,1.855,105,1.855,106,0.958,107,1.669,108,2.398,109,1.146,110,1.447,111,1.692,112,1.692,113,1.936,114,1.692,115,2.252,116,1.692,117,1.692,118,2.244,119,0.958,120,1.692,121,1.692,122,1.692,123,1.692,124,1.692,125,5.416,126,1.692,127,1.111,128,1.692,129,0.756,130,2.825,131,2.398,132,1.668,133,3.605,134,3.203,135,1.676,136,1.318,137,1.371,138,2.131,139,3.605,140,2.825,141,2.061,142,3.849,143,1.936,144,2.825,145,2.825,146,2.597,147,2.222,148,2.825,149,1.411,150,2.825,151,2.518,152,2.398,153,2.131,154,2.825,155,4.662,156,1.692,157,1.692,158,2.825,159,1.499,160,1.197,161,1.371,162,2.825,163,1.656,164,3.562,165,4.247,166,1.692,167,1.692,168,1.656,169,1.692,170,1.692,171,0.958,172,1.692,173,1.546,174,1.546,175,1.067,176,1.546,177,1.546,178,1.546,179,1.692,180,1.692,181,1.692,182,1.692,183,1.159,184,2.825,185,5.426,186,4.069,187,5.104,188,3.351,189,2.825,190,1.205,191,1.382,192,1.436,193,1.328,194,2.398,195,0.525,196,1.692,197,1.692,198,2.825,199,2.825,200,2.131,201,3.605,202,1.332,203,3.662,204,3.497,205,2.825,206,0.845,207,1.692,208,1.692,209,1.692,210,1.692,211,3.23,212,5.005,213,2.768,214,3.322,215,2.825,216,2.899,217,3.637,218,2.825,219,2.003,220,4.723,221,3.322,222,5.104,223,2.581,224,1.692,225,0.798,226,1.546,227,1.692,228,1.692,229,2.789,230,3.637,231,2.252,232,1.436,233,1.436,234,1.436,235,1.276,236,1.436,237,1.692,238,1.394,239,2.825,240,0.992,241,2.131,242,1.692,243,1.692,244,3.637,245,3.637,246,1.6,247,1.765,248,3.605,249,1.692,250,1.057,251,1.692,252,1.546,253,3.203,254,1.692,255,1.692,256,1.111,257,1.349,258,0.992,259,0.004,260,1.546,261,1.692,262,1.692,263,1.669,264,1.692,265,1.692,266,1.692,267,1.214,268,1.692,269,1.546,270,0.845,271,1.692,272,1.692,273,2.581,274,1.546,275,1.692,276,1.214,277,1.692,278,1.692,279,1.436,280,1.692,281,1.692,282,2.252,283,2.825,284,2.581,285,1.782,286,2.825,287,1.692,288,1.159,289,0.958,290,1.436,291,2.825,292,2.825,293,1.692,294,1.782,295,1.349,296,1.692,297,1.159,298,1.159,299,2.581,300,2.825,301,1.692,302,0.003,310,0.502,312,0.866,346,0.717,527,1.635,653,0.717,715,0.699,724,1.067,1067,1.656,1333,2.398,2821,3.196,2822,3.196,2823,3.196,2824,3.196,2825,3.196,2826,3.196,2827,1.914,2828,1.914,2829,1.914,2830,1.914,2831,1.914,2832,1.914,2833,1.914,2834,1.914,2835,1.914,2836,1.914,2837,1.914,2838,1.914,2839,1.914,2840,1.914,2841,1.914,2842,1.914]],["title/classes/RegistrationCertificateRequest.html",[49,3.15,80,0.038]],["body/classes/RegistrationCertificateRequest.html",[3,0.114,4,0.089,5,0.089,7,1.265,10,5.131,11,1.806,12,0.272,13,0.868,15,2.039,16,0.964,18,0.493,19,0.315,20,0.009,26,3.771,29,0.419,49,5.97,78,5.97,79,0.114,80,0.064,104,4.373,193,2.804,259,0.007,302,0.007,304,2.141,310,1.976,311,3.7,312,0.845,320,4.071,322,2.571,620,5.309,627,4.045,634,5.652,693,3.911,705,5.452,1169,6.659,2843,8.135,2844,8.135,2845,6.168,2846,6.168]],["title/interfaces/RequestOptions.html",[0,0.587,1033,2.708]],["body/interfaces/RequestOptions.html",[0,0.873,2,1.033,3,0.063,4,0.05,5,0.05,11,1.963,12,0.151,13,0.584,16,1.009,18,0.435,19,0.368,20,0.009,24,1.663,27,1.393,29,0.335,38,2.952,60,2.038,79,0.151,87,1.611,91,1.844,95,1.844,97,0.964,98,1.286,107,2.698,109,0.753,127,2.942,129,1.355,136,0.942,137,1.473,141,1.473,142,2.289,159,1.611,161,2.853,163,1.779,175,3.71,190,1.271,193,2.74,195,2.209,206,3.391,211,2.455,219,3.096,225,3.287,229,1.993,238,1.163,250,2.2,258,3.121,259,0.005,302,0.005,314,1.253,316,1.562,338,2.853,346,0.77,430,2.134,440,1.393,453,2.092,455,3.717,480,2.931,484,1.663,653,2.657,918,2.289,920,2.289,922,2.289,923,2.289,927,2.289,930,4.31,933,3.821,935,1.222,936,4.219,942,2.842,954,2.289,961,2.178,982,2.08,983,2.577,984,5.324,985,4.521,986,2.178,987,3.803,988,3.803,989,2.577,990,2.827,991,2.577,992,4.098,993,4.688,994,2.577,995,2.289,996,2.577,997,4.219,998,2.289,999,2.178,1000,1.915,1001,2.577,1002,2.577,1003,2.577,1004,2.577,1005,3.572,1006,3.803,1007,2.577,1008,2.577,1009,2.42,1010,2.577,1011,3.803,1012,2.577,1013,4.246,1014,2.577,1015,2.42,1016,2.577,1017,3.821,1018,2.577,1019,2.42,1020,3.215,1021,2.577,1022,2.577,1023,3.215,1024,2.42,1025,2.178,1026,2.577,1027,2.08,1028,2.08,1029,2.08,1030,2.42,1031,2.42,1032,2.577,1033,3.07,1034,3.803,1035,3.803,1036,4.017,1037,4.521,1038,4.992,1039,6.559,1040,4.521,1041,2.577,1042,4.5,1043,2.08,1044,3.803,1045,2.42,1046,2.577,1047,2.577,1048,2.577,1049,1.993,1050,2.289,1051,2.42,1052,2.577,1053,2.289,1054,2.178,1055,1.719,1056,2.42,1057,5.572,1058,2.577]],["title/modules/ResolverModule.html",[357,1.443,2656,3.15]],["body/modules/ResolverModule.html",[3,0.119,4,0.094,5,0.094,20,0.009,29,0.463,33,1.058,79,0.119,80,0.055,259,0.007,302,0.007,357,2.683,359,2.862,360,3.139,361,3.358,362,3.358,363,3.139,364,4.16,365,4.16,377,4.021,378,3.358,379,3.139,382,3.139,2177,5.471,2179,3.615,2656,6.37,2675,6.549,2847,5.73,2848,5.73,2849,5.73,2850,6.482,2851,6.482]],["title/injectables/ResolverService.html",[30,0.857,2675,3.15]],["body/injectables/ResolverService.html",[3,0.09,4,0.071,5,0.071,7,1.006,10,2.97,12,0.216,16,0.833,19,0.272,20,0.009,21,3.338,22,2.135,24,2.375,29,0.464,30,1.248,33,0.801,79,0.09,80,0.042,93,1.315,94,2.004,109,1.085,110,1.459,118,2.326,132,2.26,135,1.396,141,2.791,146,2.358,147,1.583,190,1.632,191,1.139,195,1.345,213,3.371,238,2.636,241,4.339,247,2.103,259,0.006,260,3.959,302,0.006,312,0.73,314,3.101,346,1.46,480,2.569,527,1.596,573,3.679,584,2.874,662,3.269,666,3.269,715,1.79,746,2.97,749,4.318,766,3.571,791,3.495,812,2.874,1147,3.942,1199,2.23,1254,3.269,1287,4.586,1373,2.454,1384,3.63,1457,4.334,1686,4.935,1723,4.334,1829,3.679,2062,3.455,2178,5.867,2179,2.734,2477,4.883,2478,3.269,2674,3.959,2675,4.586,2679,5.753,2852,4.904,2853,6.509,2854,6.509,2855,4.904,2856,6.509,2857,4.904,2858,6.509,2859,6.509,2860,5.753,2861,6.509,2862,4.904,2863,4.904,2864,4.334,2865,4.904,2866,4.904,2867,4.904,2868,4.904,2869,4.904,2870,4.904,2871,4.904,2872,4.904,2873,4.904,2874,4.904,2875,4.904,2876,6.509,2877,4.334,2878,4.904,2879,4.904,2880,4.334,2881,4.904,2882,4.904,2883,4.904,2884,4.904,2885,4.904,2886,4.904]],["title/classes/SchemaResponse.html",[80,0.038,1094,3.354]],["body/classes/SchemaResponse.html",[3,0.118,4,0.092,5,0.092,12,0.281,13,1.01,18,0.56,19,0.377,20,0.009,79,0.118,80,0.054,259,0.007,302,0.007,304,2.214,309,2.016,312,0.961,334,4.602,430,2.312,619,3.863,935,2.736,942,2.669,1077,4.999,1094,5.768,1106,7.08,1206,6.579,2268,5.149,2887,7.689,2888,7.689,2889,7.689,2890,5.637,2891,5.637,2892,5.637]],["title/interfaces/SerializeOptions.html",[0,0.587,2893,3.15]],["body/interfaces/SerializeOptions.html",[0,0.918,2,1.148,3,0.07,4,0.055,5,0.055,18,0.541,19,0.31,20,0.009,22,1.404,27,2.596,79,0.155,88,1.91,98,2.397,109,1.359,110,1.608,118,1.096,136,1.047,168,2.836,191,1.348,238,1.293,250,1.262,259,0.005,263,1.548,302,0.005,309,2.302,332,1.977,430,2.317,453,1.325,651,2.312,653,1.429,925,2.128,935,1.358,942,1.325,946,3.755,947,5.196,949,3.715,992,3.203,1000,2.128,1055,1.91,1500,4.296,1516,4.484,1517,5.095,1809,2.42,1810,2.42,1811,4.484,1817,3.316,1818,3.471,1819,3.471,1820,4.059,1821,5.148,1822,5.032,1823,4.695,1824,4.059,1830,4.695,1840,4.059,1845,5.007,1907,2.215,2783,4.267,2784,3.857,2893,4.927,2894,2.864,2895,4.927,2896,4.107,2897,2.864,2898,2.864,2899,2.689,2900,2.864,2901,6.436,2902,2.864,2903,4.802,2904,2.864,2905,5.246,2906,5.246,2907,2.864,2908,2.864,2909,4.107,2910,2.864,2911,2.864,2912,2.864,2913,2.864,2914,2.864,2915,2.864,2916,2.864,2917,2.864,2918,2.864,2919,2.864,2920,2.864,2921,2.864,2922,2.864,2923,2.864]],["title/interfaces/SerializePrimitiveOptions.html",[0,0.587,2895,3.15]],["body/interfaces/SerializePrimitiveOptions.html",[0,0.91,2,1.128,3,0.069,4,0.054,5,0.054,12,0.165,13,0.623,16,0.692,18,0.553,19,0.33,20,0.009,22,1.387,27,2.982,79,0.154,88,1.878,98,2.374,109,1.357,110,1.603,118,1.078,136,1.029,168,2.801,191,1.441,238,1.271,250,1.241,259,0.005,263,1.522,302,0.005,309,2.296,332,1.944,430,2.304,453,1.303,651,2.273,653,1.405,925,2.092,935,1.335,942,1.303,946,3.725,947,5.185,949,3.68,992,2.706,1000,2.092,1055,1.878,1500,4.272,1516,4.454,1517,5.081,1809,2.379,1810,2.379,1811,4.454,1817,3.275,1818,3.429,1819,3.429,1820,4.02,1821,5.125,1822,5.007,1823,4.664,1824,4.02,1830,4.664,1840,4.02,1845,5.179,1907,2.178,2783,3.605,2784,3.81,2893,4.467,2894,2.815,2895,4.889,2896,4.057,2897,2.815,2898,2.815,2899,2.644,2900,2.815,2901,6.416,2902,2.815,2903,4.757,2904,2.815,2905,5.205,2906,5.205,2907,2.815,2908,2.815,2909,4.057,2910,2.815,2911,2.815,2912,2.815,2913,2.815,2914,2.815,2915,2.815,2916,2.815,2917,2.815,2918,2.815,2919,2.815,2920,2.815,2921,2.815,2922,2.815,2923,2.815]],["title/interfaces/SerializePrimitiveParam.html",[0,0.587,1811,2.708]],["body/interfaces/SerializePrimitiveParam.html",[0,0.914,2,1.137,3,0.07,4,0.055,5,0.055,12,0.167,13,0.626,18,0.554,19,0.321,20,0.009,22,1.394,27,2.582,79,0.154,88,1.892,98,2.384,109,1.358,110,1.605,118,1.086,136,1.037,168,2.816,191,1.344,238,1.28,250,1.25,259,0.005,263,1.533,302,0.005,309,2.335,332,1.958,430,2.31,453,1.312,651,2.29,653,1.416,925,2.108,935,1.345,942,1.312,946,3.738,947,5.19,949,3.695,992,3.186,1000,2.108,1055,1.892,1500,4.283,1516,4.467,1517,5.087,1809,2.397,1810,2.397,1811,4.652,1817,3.293,1818,3.447,1819,3.447,1820,4.037,1821,5.135,1822,5.018,1823,4.677,1824,4.037,1830,4.677,1840,4.037,1845,4.995,1907,2.194,2783,3.624,2784,3.831,2893,4.486,2894,2.836,2895,4.906,2896,4.079,2897,2.836,2898,2.836,2899,2.664,2900,2.836,2901,6.425,2902,2.836,2903,4.777,2904,2.836,2905,5.223,2906,5.223,2907,2.836,2908,2.836,2909,4.079,2910,2.836,2911,2.836,2912,2.836,2913,2.836,2914,2.836,2915,2.836,2916,2.836,2917,2.836,2918,2.836,2919,2.836,2920,2.836,2921,2.836,2922,2.836,2923,2.836]],["title/interfaces/SerializerOptions.html",[0,0.587,2783,2.981]],["body/interfaces/SerializerOptions.html",[0,0.91,2,1.126,3,0.069,4,0.054,5,0.054,12,0.165,13,0.622,18,0.538,19,0.33,20,0.009,22,1.384,27,2.98,79,0.154,88,1.874,98,2.371,109,1.357,110,1.602,118,1.075,136,1.481,168,2.797,191,1.34,238,1.268,250,1.238,259,0.005,263,1.518,302,0.005,309,2.309,332,1.94,430,2.373,453,1.3,651,2.268,653,1.402,925,2.088,935,1.333,942,1.3,946,3.722,947,5.239,949,3.675,992,2.702,1000,2.088,1055,3.169,1500,4.269,1516,4.451,1517,5.08,1809,2.374,1810,2.374,1811,4.451,1817,3.27,1818,3.424,1819,3.424,1820,4.016,1821,5.122,1822,5.004,1823,4.66,1824,4.016,1830,5.122,1840,4.016,1845,4.984,1907,2.173,2783,4.222,2784,3.805,2893,4.462,2894,2.809,2895,4.462,2896,4.051,2897,2.809,2898,2.809,2899,2.639,2900,2.809,2901,6.413,2902,2.809,2903,4.751,2904,2.809,2905,5.2,2906,5.2,2907,2.809,2908,2.809,2909,4.051,2910,2.809,2911,2.809,2912,2.809,2913,2.809,2914,2.809,2915,2.809,2916,2.809,2917,2.809,2918,2.809,2919,2.809,2920,2.809,2921,2.809,2922,2.809,2923,2.809]],["title/entities/Session.html",[468,1.674,1070,2.097]],["body/entities/Session.html",[3,0.064,4,0.05,5,0.05,7,0.713,11,2.058,12,0.153,13,0.771,15,1.87,16,1.126,18,0.557,19,0.364,20,0.009,25,4.047,26,3.038,29,0.415,51,2.478,71,1.867,79,0.064,80,0.03,97,1.436,136,2.416,143,3.676,149,2.259,151,1.826,160,2.888,168,3.467,259,0.005,302,0.005,310,2.231,312,0.954,323,3.522,329,3.245,335,3.605,337,3.144,339,3.099,340,4.756,354,3.605,355,3.099,430,2.013,453,1.207,468,3.187,481,2.761,562,3.245,584,2.259,627,4.006,628,3.734,630,3.839,634,5.597,645,4.047,652,5.022,664,3.885,680,3.849,687,5.365,755,2.106,800,4.901,812,1.535,836,3.33,846,5.154,847,4.047,889,2.106,904,3.045,934,2.451,935,2.382,1070,3.346,1072,1.939,1079,5.937,1080,6.606,1087,5.787,1099,2.205,1100,3.411,1103,1.741,1123,3.605,1146,2.318,1171,4.756,1216,3.411,1249,1.801,1253,2.609,1254,2.318,1470,4.523,1563,3.839,1755,3.605,1939,4.277,1942,2.609,1943,4.131,1955,3.839,2022,4.047,2257,4.131,2366,4.901,2439,3.411,2465,4.131,2479,2.808,2495,5.365,2924,3.478,2925,3.478,2926,5.405,2927,3.478,2928,3.478,2929,3.478,2930,5.365,2931,3.478,2932,5.117,2933,3.478,2934,3.478,2935,3.478,2936,6.07,2937,3.478,2938,3.478,2939,3.478,2940,4.523,2941,5.117,2942,3.478,2943,5.117,2944,3.478,2945,5.117,2946,3.478,2947,3.478,2948,2.609]],["title/controllers/SessionController.html",[342,1.478,2949,3.61]],["body/controllers/SessionController.html",[3,0.095,4,0.074,5,0.074,7,1.055,12,0.227,15,2.063,16,0.859,18,0.489,19,0.281,20,0.009,26,3.362,29,0.485,33,0.84,79,0.095,80,0.044,86,2.117,89,2.332,93,1.38,94,2.303,109,1.11,135,1.701,160,2.515,190,1.988,191,1.176,193,1.66,259,0.006,302,0.006,309,1.961,310,1.961,312,0.839,342,1.701,344,1.926,346,1.506,350,2.413,355,4.069,468,3.33,481,3.402,512,2.413,527,1.647,528,2.491,530,3.262,540,4.108,553,3.056,597,2.986,671,4.171,676,2.881,1121,4.478,1127,5.588,1188,3.625,1189,3.625,1190,3.429,1192,3.625,1194,2.869,1195,3.625,1196,3.625,1212,4.26,1229,4.53,1255,3.116,1256,3.86,1792,4.069,1977,3.625,2948,5.04,2949,5.424,2950,5.145,2951,7.93,2952,6.718,2953,6.718,2954,5.145,2955,5.145,2956,6.718,2957,5.145,2958,5.145,2959,5.588,2960,6.718,2961,5.145,2962,4.547,2963,4.154,2964,5.938,2965,4.547,2966,4.154,2967,5.145,2968,5.145,2969,5.145,2970,5.145,2971,5.145,2972,5.145,2973,5.145]],["title/interfaces/SessionLogContext.html",[0,0.587,2339,3.15]],["body/interfaces/SessionLogContext.html",[0,0.743,2,1.702,3,0.104,4,0.082,5,0.082,7,1.161,12,0.249,13,0.823,15,1.79,16,1.084,18,0.595,19,0.367,20,0.009,22,1.831,25,4.761,26,4.113,73,4.246,79,0.104,149,3.454,151,2.471,259,0.007,302,0.007,312,0.635,355,4.325,466,4.769,468,3.328,472,5.373,474,5.649,476,5.971,961,4.529,970,5.766,1752,5.358,2099,5.216,2206,4.325,2235,3.588,2339,5.032,2382,6.166,2383,6.591,2651,5.766,2926,5.766,2974,5.766,2975,5.659,2976,5.659,2977,5.659,2978,7.142,2979,7.142,2980,7.142]],["title/injectables/SessionLoggerInterceptor.html",[30,0.857,2070,2.835]],["body/injectables/SessionLoggerInterceptor.html",[3,0.065,4,0.051,5,0.051,7,1.38,11,2.024,12,0.155,13,0.594,15,1.293,16,0.781,19,0.313,20,0.009,22,0.901,27,2.091,29,0.431,30,0.989,33,0.574,34,2.789,35,1.135,79,0.065,80,0.03,81,1.702,86,2.553,89,1.22,91,2.769,93,1.805,94,2.305,95,3.847,96,5.048,97,1.447,106,1.759,108,3.869,109,0.999,110,1.612,135,1.443,137,1.508,139,4.583,151,1.551,161,3.404,175,3.752,191,1.178,193,2.725,195,1.676,225,2.15,238,1.191,250,2.019,258,1.821,259,0.005,289,2.581,302,0.005,312,0.755,335,2.477,338,2.624,346,1.156,355,4.075,415,2.477,416,2.638,435,2.477,466,4.158,468,3.083,480,1.388,481,1.599,482,4.559,484,1.702,486,3.107,524,1.888,527,1.498,554,2.838,566,2.344,575,2.129,676,3.212,715,1.283,889,3.7,1147,4.34,1547,3.107,1759,3.869,1794,3.869,2070,4.267,2093,3.107,2094,7.159,2097,5.433,2099,4.993,2100,2.838,2106,3.107,2185,5.433,2206,4.34,2235,4.267,2243,2.477,2246,3.869,2299,2.838,2381,5.433,2382,5.376,2466,4.164,2467,2.638,2478,2.344,2744,4.932,2760,2.838,2974,5.785,2981,3.516,2982,5.158,2983,5.158,2984,5.158,2985,6.62,2986,5.158,2987,5.158,2988,6.729,2989,3.516,2990,5.158,2991,5.158,2992,5.158,2993,5.158,2994,5.158,2995,7.165,2996,5.158,2997,5.158,2998,3.516,2999,5.158,3000,6.108,3001,5.158,3002,6.729,3003,5.158,3004,3.516,3005,3.516,3006,3.516,3007,5.158,3008,3.516,3009,3.516,3010,3.516,3011,3.516,3012,3.516,3013,3.516,3014,3.516,3015,3.516,3016,3.516,3017,3.516,3018,3.516,3019,3.516,3020,3.516,3021,4.559,3022,3.516,3023,3.516,3024,3.516,3025,3.516,3026,3.516,3027,6.108,3028,6.108,3029,3.516,3030,3.516,3031,6.729,3032,3.516,3033,3.516,3034,3.516,3035,3.516,3036,3.107,3037,3.107,3038,3.516,3039,3.516,3040,3.107,3041,3.516,3042,3.107,3043,3.107,3044,2.477,3045,3.107,3046,3.107,3047,3.516,3048,3.107,3049,3.107,3050,3.516,3051,3.516,3052,3.516,3053,3.516,3054,5.158,3055,3.516]],["title/injectables/SessionLoggerService.html",[30,0.857,2071,2.835]],["body/injectables/SessionLoggerService.html",[3,0.052,4,0.041,5,0.041,7,0.899,11,1.285,12,0.125,13,0.505,16,1.015,18,0.527,19,0.341,20,0.009,27,2.917,29,0.336,30,0.84,33,0.463,34,2.64,35,0.915,68,3.502,79,0.052,80,0.024,86,2.343,89,1.861,93,1.618,94,1.349,95,2.354,96,3.289,97,1.23,108,3.289,109,1.178,110,1.005,132,1.522,135,1.702,137,1.215,139,4.022,149,1.251,161,2.588,188,1.645,191,1.428,250,2.838,259,0.004,302,0.004,312,0.915,323,2.588,346,0.983,415,1.997,416,2.126,435,1.997,468,3.25,472,4.838,527,1.945,628,2.194,663,4.739,676,2.798,685,3.289,715,1.034,737,6.293,836,2.798,838,2.544,889,4.502,1045,1.997,1067,4.037,1171,4.35,1299,4.872,1755,4.252,1759,4.527,1771,3.875,2071,3.826,2099,5.921,2185,3.539,2206,3.654,2231,3.289,2235,4.375,2243,1.997,2246,6.478,2257,5.268,2339,6.326,2383,5.398,2426,2.505,2467,3.289,2482,2.505,2930,5.767,2974,6.663,2985,6.57,3021,6.57,3037,2.505,3040,3.875,3042,3.875,3043,7.431,3044,3.089,3045,3.875,3056,2.834,3057,4.384,3058,4.384,3059,4.384,3060,5.361,3061,5.361,3062,4.384,3063,5.361,3064,4.384,3065,5.361,3066,5.361,3067,5.361,3068,4.384,3069,6.034,3070,2.834,3071,4.384,3072,4.384,3073,9.126,3074,2.834,3075,2.834,3076,6.525,3077,2.834,3078,2.834,3079,2.834,3080,4.384,3081,2.834,3082,5.361,3083,2.834,3084,2.834,3085,4.384,3086,2.834,3087,2.834,3088,2.834,3089,2.834,3090,2.834,3091,2.834,3092,2.834,3093,4.384,3094,2.834,3095,2.834,3096,2.834,3097,7.794,3098,7.794,3099,2.126,3100,7.433,3101,2.834,3102,2.834,3103,2.834,3104,2.834,3105,2.834,3106,2.834,3107,2.834,3108,2.834,3109,2.834,3110,4.384]],["title/modules/SessionModule.html",[357,1.443,375,2.708]],["body/modules/SessionModule.html",[3,0.104,4,0.082,5,0.082,7,1.162,20,0.009,29,0.489,33,0.925,70,4.533,71,4.204,79,0.132,80,0.048,110,1.062,259,0.007,302,0.007,344,2.677,357,2.654,359,2.502,360,2.745,361,2.936,362,2.936,363,2.745,364,3.919,365,3.919,375,5.507,377,3.703,378,2.936,379,2.745,382,3.462,384,4.33,403,5.01,430,2.15,468,2.122,481,3.562,591,4.576,592,5.01,671,5.096,1135,2.837,1255,3.433,1520,3.779,2069,5.771,2078,5.01,2524,6.921,2948,5.875,2949,6.322,2962,5.01,2963,4.576,2964,5.01,3111,5.01,3112,5.01,3113,5.01,3114,5.668,3115,5.668,3116,5.668,3117,5.01,3118,5.668,3119,5.01,3120,5.668,3121,5.668,3122,5.668]],["title/injectables/SessionService.html",[30,0.857,671,2.493]],["body/injectables/SessionService.html",[3,0.076,4,0.059,5,0.059,12,0.181,15,1.447,16,0.974,18,0.55,19,0.319,20,0.009,29,0.451,30,1.106,31,5.563,33,0.671,34,2.747,35,1.327,60,1.583,79,0.076,80,0.035,81,1.991,86,2.102,93,1.548,94,2.344,98,2.852,109,1.204,110,1.355,118,1.657,135,1.88,143,3.495,151,2.174,183,3.495,190,1.447,191,1.333,201,4.33,211,3.229,259,0.005,289,3.619,302,0.005,312,0.928,346,1.294,352,5.095,363,2.795,406,3.32,430,1.736,468,3.226,506,2.897,527,1.867,621,5.077,671,3.218,676,2.475,684,4.33,698,5.095,715,1.501,788,4.66,909,2.707,1067,2.13,1103,2.058,1115,4.379,1134,2.607,1135,2.058,1212,3.66,1407,4.33,1792,3.495,1939,2.897,2162,4.66,2948,5.424,2963,3.32,3117,5.101,3119,5.101,3123,4.112,3124,7.23,3125,7.23,3126,4.112,3127,8.109,3128,4.112,3129,5.771,3130,4.112,3131,7.23,3132,4.112,3133,5.771,3134,7.23,3135,4.112,3136,5.771,3137,4.112,3138,4.112,3139,5.771,3140,7.23,3141,4.112,3142,5.771,3143,4.112,3144,5.771,3145,7.23,3146,5.771,3147,5.771,3148,5.771,3149,4.112,3150,5.771,3151,5.771,3152,4.112,3153,4.112,3154,4.112,3155,4.112,3156,5.771,3157,5.771,3158,4.112,3159,5.771,3160,4.112,3161,4.112,3162,4.112,3163,4.112,3164,4.112,3165,4.112,3166,4.112,3167,5.771,3168,4.112,3169,4.112,3170,4.112,3171,4.112]],["title/controllers/StatusListController.html",[342,1.478,3172,3.61]],["body/controllers/StatusListController.html",[3,0.114,4,0.09,5,0.09,12,0.274,16,0.795,18,0.534,19,0.341,20,0.009,29,0.454,33,1.014,79,0.114,80,0.053,94,1.912,109,0.922,135,1.623,151,2.275,191,1.087,259,0.007,302,0.007,310,1.629,312,0.696,314,2.267,342,2.053,344,2.326,346,1.697,350,2.913,512,2.913,527,1.523,530,3.939,553,3.711,1159,4.55,1194,4.55,1199,2.825,1229,4.942,1255,4.582,1256,4.66,3172,6.109,3173,5.044,3174,6.211,3175,6.211,3176,6.687,3177,5.015,3178,7.566,3179,6.211,3180,7.566,3181,6.211,3182,6.211,3183,6.211,3184,5.49,3185,6.211,3186,6.211]],["title/interfaces/StatusListFile.html",[0,0.587,3187,3.61]],["body/interfaces/StatusListFile.html",[0,0.438,2,1.003,3,0.061,4,0.048,5,0.12,12,0.261,13,0.571,15,0.836,16,0.635,18,0.552,19,0.274,20,0.009,29,0.474,30,0.951,32,3.587,33,0.544,34,2.006,35,1.076,47,2.469,48,1.669,54,1.935,55,2.02,56,2.766,61,3.558,63,2.223,64,1.859,65,1.935,66,2.02,67,2.223,68,1.935,79,0.061,80,0.028,81,1.615,86,2.464,93,0.894,94,1.823,97,1.392,109,1.041,110,1.656,118,2.185,132,1.158,135,0.715,136,0.915,146,2.263,147,2.263,151,2.512,152,2.502,153,2.223,163,1.727,171,3.913,175,1.859,183,3.587,190,0.836,204,2.02,219,1.39,238,1.68,240,1.727,247,1.43,259,0.005,267,3.145,285,3.302,288,2.02,289,3.282,290,4.443,297,2.02,298,2.02,302,0.005,309,1.838,314,1.217,440,1.352,453,1.158,466,2.879,468,2.625,553,3.981,584,2.19,585,5.259,746,3.004,763,3.755,775,1.79,791,1.79,812,3.244,818,1.79,820,2.35,836,2.011,860,2.223,904,1.517,909,1.564,931,1.669,934,2.35,1049,1.935,1103,1.669,1115,3.004,1133,3.004,1134,2.115,1135,1.669,1159,4.789,1173,5.932,1194,2.766,1229,2.02,1236,3.948,1249,2.569,1255,2.02,1257,2.692,1267,4.005,1281,4.005,1282,2.502,1287,2.35,1452,2.692,1581,2.35,1590,2.692,1673,2.692,1686,3.145,1698,2.115,1792,3.004,2523,2.692,2527,2.692,2715,2.692,2959,3.495,2966,2.692,3044,5.729,3173,2.223,3177,2.692,3187,5.66,3188,2.947,3189,6.196,3190,5.797,3191,4.384,3192,2.947,3193,2.947,3194,4.384,3195,2.692,3196,2.35,3197,2.692,3198,2.692,3199,2.947,3200,2.692,3201,2.947,3202,2.947,3203,2.947,3204,2.947,3205,4.384,3206,5.797,3207,4.384,3208,2.947,3209,2.947,3210,5.235,3211,4.384,3212,2.947,3213,2.947,3214,2.947,3215,2.947,3216,2.947,3217,2.947,3218,2.947,3219,2.947,3220,2.947,3221,4.384,3222,2.947,3223,4.384,3224,2.947,3225,2.947,3226,4.384,3227,4.384,3228,2.947,3229,2.947,3230,2.947,3231,2.947,3232,5.235,3233,2.947,3234,2.947,3235,2.947,3236,2.947,3237,2.947,3238,2.947,3239,2.692,3240,5.235,3241,2.947,3242,2.947,3243,2.947,3244,2.947,3245,6.196,3246,2.947,3247,2.947,3248,4.384,3249,2.947,3250,2.947,3251,2.947,3252,2.947,3253,2.947,3254,2.947,3255,4.384,3256,4.384,3257,2.947,3258,2.947,3259,2.947]],["title/modules/StatusListModule.html",[357,1.443,2069,2.981]],["body/modules/StatusListModule.html",[3,0.113,4,0.088,5,0.088,20,0.009,29,0.491,33,0.997,79,0.113,80,0.052,259,0.007,302,0.007,344,2.803,357,2.613,359,2.695,360,2.956,361,3.162,362,3.162,363,2.956,364,4.053,365,4.053,369,4.734,377,3.878,378,3.162,379,2.956,382,3.625,385,3.871,553,3.405,1135,3.055,1229,5.588,1255,3.697,1256,4.58,1520,4.07,2069,6.057,3172,6.538,3173,4.07,3196,4.302,3197,4.929,3198,4.929,3260,5.396,3261,6.105,3262,5.396,3263,5.396,3264,6.105,3265,6.105,3266,6.105]],["title/injectables/StatusListService.html",[30,0.857,1229,2.708]],["body/injectables/StatusListService.html",[0,0.349,3,0.049,4,0.038,5,0.12,12,0.227,13,0.481,15,1.046,16,0.98,18,0.583,19,0.326,20,0.009,29,0.453,30,0.8,32,4.071,33,0.434,34,2.277,35,0.859,47,2.93,48,1.331,54,1.544,55,1.611,56,2.327,61,3.255,63,1.773,64,1.483,65,1.544,66,1.611,67,1.773,68,1.544,79,0.049,80,0.023,81,1.288,86,2.66,93,1.119,94,1.585,97,1.445,109,0.94,110,1.602,118,2.149,132,1.449,135,1.674,136,1.145,146,2.628,147,2.045,151,2.611,152,3.131,153,2.782,163,2.162,171,3.642,175,2.327,183,3.119,190,1.046,191,1.34,204,2.527,219,1.109,238,1.414,240,1.378,247,1.141,259,0.004,267,2.646,285,2.871,288,2.527,289,3.364,290,3.863,297,1.611,298,1.611,302,0.004,309,2.008,310,0.698,312,0.89,314,0.971,346,0.936,430,0.8,440,1.692,453,0.923,466,2.422,468,2.802,484,1.288,527,1.877,553,4.01,584,1.842,585,4.753,715,0.971,724,1.483,746,2.527,763,3.265,775,1.428,791,1.428,812,2.273,818,1.428,820,1.874,836,2.088,860,1.773,904,1.21,909,1.248,914,3.369,931,1.331,934,1.874,1049,2.422,1067,2.162,1103,1.331,1115,3.532,1133,3.532,1134,1.687,1135,1.331,1159,4.818,1173,4.158,1194,2.327,1229,2.527,1236,4.223,1249,2.162,1255,4.872,1257,2.148,1267,3.369,1281,3.369,1282,1.996,1287,1.874,1333,3.131,1452,2.148,1576,2.94,1581,2.94,1590,2.148,1673,3.369,1686,2.646,1698,1.687,1792,3.532,2523,2.148,2527,2.148,2715,3.369,2959,4.109,2966,2.148,3044,5.273,3173,5.363,3176,3.689,3177,3.369,3187,5.675,3188,2.351,3189,3.689,3190,3.689,3191,3.689,3192,2.351,3193,2.351,3194,3.689,3195,2.148,3196,1.874,3197,2.148,3198,2.148,3199,2.351,3200,4.158,3201,3.689,3202,2.351,3203,4.551,3204,3.689,3205,5.154,3206,5.941,3207,4.551,3208,3.689,3209,3.689,3210,4.551,3211,3.689,3212,2.351,3213,2.351,3214,2.351,3215,2.351,3216,2.351,3217,2.351,3218,2.351,3219,2.351,3220,2.351,3221,3.689,3222,3.689,3223,3.689,3224,2.351,3225,2.351,3226,3.689,3227,3.689,3228,2.351,3229,2.351,3230,2.351,3231,2.351,3232,4.551,3233,2.351,3234,3.689,3235,2.351,3236,3.689,3237,2.351,3238,2.351,3239,3.369,3240,5.599,3241,4.551,3242,2.351,3243,2.351,3244,2.351,3245,5.599,3246,2.351,3247,2.351,3248,3.689,3249,2.351,3250,2.351,3251,3.689,3252,2.351,3253,3.689,3254,2.351,3255,3.689,3256,3.689,3257,2.351,3258,2.351,3259,2.351,3267,4.173,3268,4.173,3269,4.173,3270,4.173,3271,4.173,3272,2.66,3273,2.66,3274,2.66,3275,2.66,3276,2.66,3277,2.66,3278,2.66,3279,2.66,3280,2.66,3281,2.66,3282,2.66]],["title/entities/StatusMapping.html",[1070,2.097,3196,3.15]],["body/entities/StatusMapping.html",[3,0.11,4,0.086,5,0.086,12,0.369,13,0.848,18,0.573,19,0.375,20,0.009,29,0.331,79,0.11,80,0.051,136,2.461,171,3.685,259,0.007,302,0.007,310,2.193,312,0.938,466,4.643,881,5.981,1070,3.454,1072,3.313,1100,5.731,1103,2.974,1159,4.461,1236,5.333,1942,6.274,3173,5.731,3196,5.188,3283,8.596,3284,5.942,3285,8.759,3286,5.942,3287,7.363,3288,5.942,3289,5.942,3290,5.942]],["title/classes/StatusUpdateDto.html",[80,0.038,2959,3.15]],["body/classes/StatusUpdateDto.html",[3,0.108,4,0.084,5,0.084,12,0.258,13,0.84,15,2.084,16,1.064,17,6.712,18,0.544,19,0.332,20,0.009,29,0.325,79,0.108,80,0.062,97,2.045,160,2.729,164,4.858,171,3.647,259,0.007,267,4.621,302,0.007,304,2.029,310,2.082,311,3.782,312,0.89,319,4.385,321,3.913,322,2.436,341,3.775,466,4.609,468,3.113,481,3.315,553,3.891,836,3.371,909,3.9,1236,5.294,2959,5.135,2965,7.348,3173,5.542,3291,5.845,3292,5.845,3293,5.845,3294,5.845,3295,5.845,3296,5.845,3297,7.288,3298,5.845]],["title/interfaces/TDataShape.html",[0,0.587,1056,3.15]],["body/interfaces/TDataShape.html",[0,0.883,2,1.056,3,0.065,4,0.051,5,0.051,11,1.903,12,0.155,13,0.594,16,1.015,18,0.49,19,0.362,20,0.009,24,1.701,27,1.424,29,0.34,38,2.974,60,1.965,79,0.152,87,1.647,91,1.886,95,1.886,97,0.986,98,1.315,107,2.476,109,0.765,127,2.991,129,1.386,136,0.964,137,1.506,141,1.506,142,2.341,159,1.647,161,2.884,163,1.819,175,3.75,190,1.292,193,2.725,195,2.222,206,3.416,211,1.701,219,3.121,225,3.308,229,2.038,238,1.19,250,2.223,258,3.162,259,0.005,302,0.005,314,1.282,316,1.597,338,2.819,346,0.788,430,2.154,440,1.424,453,2.119,455,3.747,480,3.196,484,1.701,653,2.682,918,2.341,920,2.341,922,2.341,923,2.341,927,2.341,930,2.991,933,3.871,935,1.25,936,3.871,942,2.599,954,2.341,961,2.227,982,2.127,983,2.635,984,5.374,985,4.58,986,2.227,987,3.867,988,3.867,989,2.635,990,2.874,991,2.635,992,4.053,993,4.739,994,2.635,995,2.341,996,2.635,997,4.265,998,2.341,999,2.227,1000,1.958,1001,2.635,1002,2.635,1003,2.635,1004,2.635,1005,3.631,1006,3.867,1007,2.635,1008,2.635,1009,2.475,1010,2.635,1011,3.867,1012,2.635,1013,4.302,1014,2.635,1015,2.475,1016,2.635,1017,3.871,1018,2.635,1019,2.475,1020,3.268,1021,2.635,1022,2.635,1023,3.268,1024,2.475,1025,2.227,1026,2.635,1027,2.127,1028,2.127,1029,2.127,1030,2.475,1031,2.475,1032,2.635,1033,2.127,1034,2.635,1035,2.635,1036,2.341,1037,4.58,1038,5.046,1039,6.58,1040,4.58,1041,2.635,1042,4.542,1043,2.127,1044,3.867,1045,2.475,1046,2.635,1047,2.635,1048,2.635,1049,2.038,1050,2.341,1051,2.475,1052,2.635,1053,2.341,1054,2.227,1055,1.758,1056,3.631,1057,5.617,1058,2.635]],["title/interfaces/TokenPayload.html",[0,0.587,540,2.316]],["body/interfaces/TokenPayload.html",[0,0.843,2,1.932,3,0.118,4,0.093,5,0.093,7,1.317,9,4.073,11,1.851,12,0.283,13,0.89,18,0.542,19,0.269,20,0.009,29,0.358,33,1.049,38,2.469,79,0.142,89,2.982,98,2.891,109,0.954,110,1.447,160,2.405,225,2.678,256,3.728,259,0.007,302,0.007,481,3.512,540,4.288,550,4.282,584,2.836,585,6.444,653,2.405,935,2.286,2097,6.234,3299,6.424,3300,7.722,3301,6.424,3302,6.424,3303,6.424]],["title/classes/TokenResponse.html",[80,0.038,520,3.61]],["body/classes/TokenResponse.html",[3,0.125,4,0.098,5,0.098,12,0.298,13,0.917,18,0.521,19,0.333,20,0.008,79,0.125,80,0.058,171,3.985,259,0.007,302,0.007,304,2.349,312,0.949,324,4.51,520,6.429,554,6.833,556,7.48,557,6.349,619,4.097,2890,5.98,2891,5.98,2892,5.98,3304,8.737]],["title/classes/VCT.html",[80,0.038,1078,2.981]],["body/classes/VCT.html",[3,0.103,4,0.08,5,0.08,7,1.592,12,0.245,13,0.814,16,1.166,18,0.603,19,0.37,20,0.009,29,0.393,79,0.13,80,0.066,191,1.358,259,0.007,302,0.007,304,1.931,310,2.295,311,4.207,312,0.981,320,3.535,322,2.319,329,2.53,337,3.659,755,3.369,992,3.885,1078,5.619,1104,5.905,1206,6.645,1950,3.919,2608,4.916,2611,6.861,2612,6.861,2613,6.861,3305,5.562,3306,5.562,3307,5.562,3308,5.562,3309,5.562,3310,5.562,3311,5.562]],["title/injectables/VaultKeyService.html",[30,0.857,2175,3.61]],["body/injectables/VaultKeyService.html",[3,0.045,4,0.035,5,0.035,11,0.587,12,0.108,13,0.45,15,1.625,16,0.993,18,0.596,19,0.357,20,0.009,21,2.09,22,1.915,23,4.285,29,0.416,30,0.749,33,0.399,34,2.305,35,0.79,47,2.836,48,1.224,56,1.364,61,1.891,79,0.045,80,0.021,86,2.548,87,1.148,89,1.356,93,1.047,94,2.243,95,1.314,104,1.42,109,1.109,110,1.478,118,1.746,132,1.356,135,1.734,137,1.049,146,2.683,147,2.093,151,2.623,163,2.023,188,1.42,190,2.048,191,1.359,194,2.93,213,2.525,216,1.724,219,1.02,221,3.153,223,1.975,235,1.631,238,1.651,241,1.631,247,2.09,250,1.612,259,0.004,270,2.152,285,1.364,289,1.955,294,2.718,302,0.004,309,1.595,312,0.906,314,2.031,338,0.809,346,0.876,420,2.952,480,2.559,481,2.217,527,1.904,565,1.551,566,1.631,573,2.93,577,1.314,584,2.152,625,1.551,653,0.916,662,1.631,685,4.175,715,0.893,749,3.646,812,2.685,817,3.684,860,1.631,909,1.148,935,1.39,946,1.314,992,1.955,1050,1.631,1054,1.551,1121,2.604,1249,1.267,1289,3.091,1307,3.452,1311,4.493,1318,6.031,1327,4.711,1334,3.25,1373,1.224,1379,2.162,1384,1.364,1389,1.975,1425,1.975,1435,2.162,1442,3.153,1476,3.452,1511,2.162,1515,2.162,1559,2.93,1576,2.752,1581,2.752,1588,1.975,1617,2.93,1664,2.162,1668,3.153,1669,5.494,1674,3.153,1676,4.91,1683,3.153,1685,1.975,1686,3.529,1687,4.919,1694,2.162,1697,1.975,1698,1.551,1724,2.162,1792,1.482,1813,1.631,1860,2.93,1986,3.153,2056,3.153,2103,1.975,2175,3.153,2176,7.062,2178,4.568,2179,1.364,2188,2.162,2243,1.724,2372,3.452,2477,4.175,2478,1.631,2581,3.452,2674,1.975,2877,2.162,2880,6.246,3036,5.376,3312,7.628,3313,4.875,3314,3.906,3315,3.906,3316,3.906,3317,3.906,3318,2.447,3319,3.906,3320,2.447,3321,5.565,3322,6.483,3323,3.906,3324,3.906,3325,2.447,3326,6.082,3327,2.447,3328,2.447,3329,3.906,3330,3.906,3331,2.447,3332,2.447,3333,2.447,3334,3.906,3335,2.447,3336,3.906,3337,2.447,3338,2.447,3339,3.906,3340,3.906,3341,2.447,3342,2.447,3343,2.447,3344,2.447,3345,5.565,3346,2.447,3347,2.447,3348,2.447,3349,2.447,3350,2.447,3351,2.447,3352,2.447,3353,2.447,3354,2.447,3355,2.447,3356,2.447,3357,3.906,3358,2.447,3359,2.447,3360,2.447,3361,2.447,3362,2.447,3363,2.447,3364,3.906,3365,2.447,3366,2.447,3367,2.447,3368,2.447,3369,2.447,3370,2.447,3371,2.447,3372,2.447,3373,2.447,3374,2.447,3375,2.447,3376,2.162,3377,2.447,3378,2.447,3379,4.875,3380,2.447,3381,2.447,3382,2.447,3383,2.447,3384,2.447,3385,2.447,3386,6.804,3387,2.447,3388,3.906,3389,2.447,3390,3.906,3391,4.875,3392,4.875,3393,2.447,3394,3.906,3395,3.906,3396,2.447,3397,4.919,3398,2.447,3399,2.447,3400,4.875,3401,5.565,3402,4.875,3403,3.906,3404,2.447,3405,3.906,3406,2.447,3407,3.906,3408,4.875,3409,2.447,3410,2.447,3411,2.447,3412,3.906,3413,2.447,3414,2.447,3415,2.447,3416,2.447,3417,2.447,3418,2.447,3419,2.447]],["title/modules/VerifierModule.html",[357,1.443,376,3.15]],["body/modules/VerifierModule.html",[3,0.111,4,0.087,5,0.087,20,0.009,29,0.496,33,0.983,79,0.111,80,0.051,259,0.007,302,0.007,357,2.598,359,2.659,360,2.916,361,3.119,362,3.119,363,2.916,364,3.014,365,3.014,369,4.718,374,5.573,375,5.322,376,6.535,377,3.846,378,3.119,379,2.916,382,3.595,385,3.819,393,4.862,404,4.518,2068,5.573,2177,5.231,2179,3.358,2454,5.573,2457,5.323,2661,5.323,3420,6.022,3421,6.022,3422,6.022]],["title/classes/WebHookAuthConfig.html",[80,0.038,330,3.354]],["body/classes/WebHookAuthConfig.html",[3,0.096,4,0.075,5,0.075,7,1.067,12,0.229,13,0.78,16,0.666,18,0.492,19,0.381,20,0.009,22,2.117,29,0.377,60,2.064,79,0.147,80,0.071,87,3.873,97,2.419,129,2.054,191,0.911,202,3.442,259,0.006,302,0.006,303,5.976,304,1.807,305,4.202,306,5.651,307,6.073,308,4.202,309,1.775,310,1.775,311,3.623,312,0.759,314,2.47,315,4.099,316,3.079,318,3.905,319,3.905,320,3.765,321,3.634,322,2.17,323,2.232,324,3.47,325,4.202,326,3.667,327,6.073,328,5.236,329,3.85,330,5.976,331,5.465,332,3.506,333,5.465,334,3.774,335,3.667,336,3.667,337,2.696,338,2.238,339,3.152,340,3.47,341,2.696,3423,5.205,3424,5.205,3425,5.205]],["title/classes/WebhookConfig.html",[80,0.038,337,2.316]],["body/classes/WebhookConfig.html",[3,0.096,4,0.075,5,0.075,7,1.066,12,0.229,13,0.779,16,1.018,18,0.521,19,0.373,20,0.009,22,2.041,29,0.376,60,1.426,79,0.147,80,0.071,87,3.734,97,2.418,129,2.967,191,0.91,202,3.527,259,0.006,302,0.006,303,5.639,304,1.804,305,4.196,306,5.6,307,6.428,308,4.196,309,1.773,310,1.773,311,3.754,312,0.758,314,2.468,315,4.096,316,3.076,318,3.899,319,3.899,320,3.762,321,3.631,322,2.166,323,2.229,324,3.464,325,4.196,326,3.662,327,5.46,328,4.766,329,3.849,330,5.973,331,4.196,332,2.692,333,4.196,334,2.898,335,4.765,336,4.765,337,3.503,338,2.729,339,4.096,340,4.508,341,3.503,3426,5.197,3427,5.197,3428,5.197]],["title/controllers/WellKnownController.html",[342,1.478,381,3.61]],["body/controllers/WellKnownController.html",[3,0.086,4,0.068,5,0.068,7,1.465,12,0.207,16,0.914,18,0.566,19,0.334,20,0.009,22,1.832,29,0.476,33,0.766,47,2.979,48,2.348,79,0.086,80,0.04,86,2.252,93,1.258,94,1.444,106,3.162,109,1.061,119,4.205,135,1.856,146,2.653,147,1.514,151,2.526,190,1.791,191,1.25,259,0.006,302,0.006,310,1.874,312,0.801,314,1.712,323,3.603,342,2.362,344,1.756,346,1.417,350,2.2,381,5.102,386,5.102,387,6.757,440,2.562,512,2.2,527,1.752,543,3.667,548,3.519,638,7.266,639,5.102,653,2.366,668,4.327,676,3.064,677,4.452,717,6.315,729,3.787,766,3.603,836,2.562,1142,3.787,1143,5.387,1147,4.833,1330,6.315,1345,4.146,1384,2.616,1552,4.452,1567,3.827,1568,3.519,2032,4.531,2033,3.787,2062,4.452,2261,6.173,2326,4.146,2345,4.146,2864,4.146,3184,5.585,3429,4.691,3430,4.691,3431,7.645,3432,6.319,3433,4.691,3434,6.319,3435,4.691,3436,4.691,3437,4.691,3438,4.691,3439,4.691,3440,4.691,3441,4.691,3442,4.691,3443,4.691,3444,6.319,3445,4.691,3446,4.691,3447,4.691,3448,4.691,3449,4.691,3450,4.691,3451,4.691,3452,4.691]],["title/changelog.html",[1168,2.796,3099,2.796,3453,3.727]],["body/changelog.html",[5,0.076,20,0.006,22,1.348,60,1.443,84,3.185,101,3.705,106,3.783,107,2.132,129,2.075,149,2.321,211,4.24,212,3.945,259,0.006,294,2.932,302,0.007,316,2.392,329,3.099,338,2.253,396,3.705,420,3.185,455,2.632,551,4.245,562,3.334,626,3.505,628,2.632,1009,3.705,1013,3.705,1050,3.505,1054,4.793,1425,4.245,1441,4.245,1448,4.648,1735,4.245,1781,4.648,1792,3.185,2140,6.023,2151,4.648,2206,3.185,2466,4.245,2744,6.103,2899,3.705,2940,4.648,3454,5.258,3455,7.74,3456,8.757,3457,8.757,3458,8.757,3459,9.129,3460,6.814,3461,5.671,3462,5.258,3463,6.682,3464,6.814,3465,5.258,3466,6.814,3467,5.258,3468,5.258,3469,5.258,3470,5.258,3471,5.258,3472,5.258,3473,5.258,3474,6.814,3475,7.559,3476,5.258,3477,6.814,3478,5.258,3479,5.258,3480,5.258,3481,5.258,3482,5.258,3483,5.258,3484,5.258,3485,5.258,3486,5.258,3487,5.258,3488,5.258,3489,5.258,3490,6.023,3491,5.258,3492,5.258,3493,5.258,3494,5.258,3495,4.648,3496,5.258,3497,5.258,3498,5.258,3499,5.258,3500,5.258,3501,5.258,3502,5.258,3503,5.258,3504,5.258,3505,5.258,3506,5.258,3507,4.648,3508,5.258,3509,5.258,3510,5.258,3511,5.258,3512,5.258,3513,5.258,3514,5.258,3515,5.258,3516,5.258,3517,5.258,3518,5.258,3519,5.258,3520,5.258,3521,5.258,3522,5.258,3523,5.258,3524,5.258,3525,5.258,3526,5.258,3527,5.258,3528,4.648,3529,5.258,3530,4.648,3531,5.258,3532,4.648,3533,5.258,3534,5.258,3535,5.258,3536,5.258,3537,5.258]],["title/dependencies.html",[360,2.606,3538,3.294]],["body/dependencies.html",[20,0.009,33,0.921,35,1.821,37,4.555,38,2.168,64,3.146,65,3.274,80,0.061,259,0.007,302,0.007,318,4.232,322,2.352,350,2.646,360,2.732,384,3.417,395,4.986,396,3.975,406,4.555,415,3.975,416,5.862,439,4.232,503,3.417,553,2.566,601,4.232,667,3.146,751,3.761,812,3.147,957,4.555,1099,3.577,1103,2.823,1135,2.823,1147,3.417,1159,3.146,1249,4.252,1250,4.232,1251,4.232,1253,4.232,1254,3.761,1373,2.823,1567,3.417,1696,4.232,1698,3.577,1779,4.555,2037,3.577,2100,4.555,2133,4.986,2135,4.986,2179,3.146,2478,3.761,3195,4.555,3539,7.127,3540,5.641,3541,7.814,3542,5.641,3543,5.641,3544,5.641,3545,5.641,3546,5.641,3547,5.641,3548,5.641,3549,7.127,3550,8.209,3551,8.209,3552,8.209,3553,5.641,3554,5.641,3555,8.209,3556,5.641,3557,5.641,3558,5.641,3559,5.641,3560,5.641,3561,5.641,3562,5.641,3563,5.641,3564,5.641,3565,5.641,3566,5.641,3567,5.641,3568,5.641,3569,5.641,3570,5.641,3571,5.641,3572,5.641,3573,5.641,3574,5.641,3575,5.641,3576,5.641]],["title/miscellaneous/enumerations.html",[3577,2.796,3578,4.756]],["body/miscellaneous/enumerations.html",[11,1.683,12,0.309,19,0.294,20,0.008,195,1.926,259,0.008,302,0.008,309,2.133,326,4.945,628,3.513,693,5.159,904,3.701,2035,5.424,2037,5.159,2278,5.266,2648,5.667,3577,5.266,3578,6.204,3579,7.019]],["title/miscellaneous/functions.html",[3577,2.796,3580,4.756]],["body/miscellaneous/functions.html",[11,2.04,12,0.253,16,1.111,18,0.599,19,0.363,20,0.009,27,2.328,60,1.575,92,6.67,135,1.911,141,2.462,143,3.477,171,3.607,190,2.177,191,1.52,246,2.873,259,0.007,284,5.818,302,0.007,363,4,415,4.045,524,3.869,527,2.129,752,5.078,798,4.045,1049,3.332,1344,5.074,1407,5.91,2749,4.635,2758,4.635,2781,5.818,3200,5.818,3577,4.307,3580,5.074,3581,5.741,3582,7.877,3583,8.685,3584,5.741,3585,5.741,3586,7.207,3587,7.207,3588,7.207,3589,7.207,3590,5.741,3591,5.741,3592,5.741,3593,7.207,3594,5.741,3595,5.741,3596,5.741,3597,5.741,3598,5.741]],["title/index.html",[12,0.164,1168,2.796,3099,2.796]],["body/index.html",[4,0.09,19,0.192,20,0.009,22,1.81,38,1.761,60,1.257,87,3.713,89,2.159,97,1.286,99,3.7,132,1.591,134,4.146,159,2.917,160,1.716,201,3.438,203,2.906,214,3.7,259,0.006,288,2.775,302,0.006,306,3.944,316,2.084,332,2.373,351,6.392,356,4.05,432,5.497,440,1.858,474,3.055,476,3.229,484,2.219,503,3.767,525,5.497,528,2.219,550,3.055,551,5.021,552,3.7,553,2.084,560,2.906,561,2.775,562,2.906,573,4.666,575,3.767,591,3.7,664,2.659,684,3.438,766,1.965,812,2.023,826,4.222,836,1.858,861,5.7,899,5.939,916,3.7,940,3.438,990,2.555,1031,3.229,1159,2.555,1194,3.468,1212,2.906,1249,2.373,1254,3.055,1407,3.438,1449,4.05,1500,2.555,1549,3.7,1559,3.438,1597,4.05,1710,4.05,1770,4.05,1917,3.055,1953,3.7,2467,5.297,2528,4.05,3044,3.229,3397,5.497,3461,3.438,3463,4.05,3490,5.497,3495,6.693,3528,6.24,3530,4.05,3599,4.582,3600,6.219,3601,4.582,3602,4.582,3603,7.06,3604,6.219,3605,4.582,3606,4.582,3607,6.219,3608,3.7,3609,4.582,3610,4.582,3611,6.219,3612,4.582,3613,4.582,3614,4.582,3615,4.582,3616,6.219,3617,4.582,3618,4.582,3619,4.582,3620,4.582,3621,4.582,3622,4.582,3623,4.582,3624,4.582,3625,4.582,3626,4.582,3627,4.582,3628,4.582,3629,4.582,3630,4.582,3631,4.582,3632,4.582,3633,4.582,3634,4.582,3635,4.582,3636,4.582,3637,4.582,3638,4.05,3639,4.582,3640,4.582,3641,6.219,3642,4.05,3643,4.582,3644,4.582,3645,4.582,3646,4.582,3647,4.582,3648,6.219,3649,4.582,3650,6.219,3651,4.582,3652,4.582,3653,4.582,3654,4.582,3655,4.582,3656,6.219,3657,4.582,3658,4.582,3659,4.582,3660,4.582,3661,4.582,3662,4.582,3663,6.219,3664,6.219,3665,4.582,3666,4.05,3667,4.582,3668,4.582,3669,4.582,3670,6.219,3671,4.582,3672,6.219,3673,4.582,3674,4.582,3675,7.06,3676,4.582,3677,4.582,3678,4.05,3679,4.582,3680,4.582,3681,4.582,3682,4.582,3683,4.582,3684,4.582,3685,4.05,3686,4.582,3687,4.582,3688,4.582,3689,4.582,3690,4.582,3691,6.693,3692,4.05,3693,6.219,3694,4.582,3695,4.582,3696,4.582,3697,6.219,3698,4.582,3699,4.582,3700,4.582,3701,4.582,3702,4.582,3703,4.05,3704,4.582,3705,4.582,3706,4.582,3707,4.582,3708,4.582,3709,4.582,3710,4.582,3711,4.582,3712,4.582,3713,4.582,3714,4.582,3715,4.666,3716,4.05,3717,4.05,3718,3.7,3719,3.7]],["title/license.html",[1168,2.796,3099,2.796,3715,2.796]],["body/license.html",[2,0.773,4,0.113,5,0.104,7,0.527,20,0.006,24,1.244,29,0.143,46,3.279,70,1.63,73,5.554,80,0.022,97,0.721,107,3.074,132,0.892,134,1.713,138,4.416,159,1.206,168,1.331,185,3.047,191,0.711,211,1.967,212,1.928,252,4.065,256,2.357,258,1.331,259,0.004,273,2.075,274,4.619,279,1.928,302,0.004,312,0.288,315,1.557,316,2.602,334,3.19,341,3.227,354,1.811,355,1.557,379,1.244,484,1.244,500,4.619,560,1.63,562,1.63,564,3.778,621,1.713,664,2.922,667,2.265,827,1.713,841,1.713,846,2.46,889,1.557,909,1.206,933,1.63,935,2.357,940,1.928,946,4.284,952,2.075,995,2.708,1000,1.433,1005,1.811,1019,1.811,1029,3.465,1070,3.556,1072,1.433,1074,3.279,1123,1.811,1154,3.279,1157,2.272,1194,1.433,1212,1.63,1460,2.272,1563,6.293,1752,4.675,1761,5.031,1773,2.272,1813,1.713,1895,1.928,1986,4.619,2052,3.59,2271,5.057,2291,2.272,2363,3.59,2465,2.075,2586,2.272,2651,2.075,2678,2.272,2810,3.59,2860,2.272,2926,2.075,3046,4.451,3048,2.272,3049,3.59,3239,3.279,3376,2.272,3455,2.272,3461,3.778,3507,2.272,3532,2.272,3638,3.59,3642,2.272,3678,2.272,3685,2.272,3691,4.451,3692,2.272,3703,2.272,3715,6.714,3716,2.272,3717,6.543,3718,4.619,3719,4.065,3720,2.57,3721,2.57,3722,2.57,3723,7.402,3724,7.98,3725,5.722,3726,6.231,3727,2.57,3728,8.171,3729,7.581,3730,2.57,3731,2.57,3732,7.581,3733,7.865,3734,6.231,3735,4.061,3736,2.57,3737,6.231,3738,2.57,3739,2.57,3740,5.722,3741,2.57,3742,2.57,3743,5.722,3744,4.061,3745,4.061,3746,2.57,3747,5.035,3748,4.061,3749,4.061,3750,2.57,3751,4.061,3752,2.57,3753,4.061,3754,2.57,3755,2.57,3756,2.57,3757,2.57,3758,2.57,3759,2.57,3760,5.035,3761,2.57,3762,5.035,3763,4.061,3764,6.624,3765,5.722,3766,4.061,3767,5.035,3768,2.57,3769,2.57,3770,2.57,3771,2.57,3772,2.57,3773,2.57,3774,2.57,3775,8.949,3776,5.035,3777,2.57,3778,7.402,3779,4.061,3780,2.57,3781,4.061,3782,2.57,3783,8.388,3784,8.447,3785,2.57,3786,2.57,3787,2.57,3788,2.57,3789,2.57,3790,2.57,3791,4.061,3792,5.035,3793,2.57,3794,2.57,3795,2.57,3796,2.57,3797,5.722,3798,6.231,3799,2.57,3800,4.061,3801,5.722,3802,4.061,3803,2.57,3804,6.231,3805,2.57,3806,2.57,3807,5.035,3808,2.57,3809,2.57,3810,2.57,3811,4.061,3812,2.57,3813,2.57,3814,2.57,3815,5.035,3816,2.57,3817,2.57,3818,2.57,3819,7.581,3820,2.57,3821,4.061,3822,7.191,3823,4.061,3824,4.061,3825,4.061,3826,5.035,3827,4.061,3828,5.035,3829,4.061,3830,4.061,3831,4.061,3832,4.061,3833,2.57,3834,6.231,3835,6.937,3836,5.035,3837,4.061,3838,2.57,3839,4.061,3840,2.57,3841,2.57,3842,5.035,3843,2.57,3844,2.57,3845,2.57,3846,5.035,3847,2.57,3848,2.57,3849,2.57,3850,4.061,3851,4.061,3852,2.57,3853,2.57,3854,2.57,3855,2.57,3856,2.57,3857,2.57,3858,2.57,3859,4.061,3860,2.57,3861,2.57,3862,2.57,3863,2.57,3864,2.57,3865,2.57,3866,2.57,3867,5.035,3868,2.57,3869,2.57,3870,2.57,3871,2.57,3872,2.57,3873,7.191,3874,2.57,3875,2.57,3876,2.57,3877,2.57,3878,2.57,3879,5.722,3880,4.061,3881,2.57,3882,2.57,3883,2.57,3884,5.035,3885,2.57,3886,2.57,3887,4.061,3888,2.57,3889,2.57,3890,2.57,3891,2.57,3892,2.57,3893,2.57,3894,2.57,3895,2.57,3896,2.57,3897,2.57,3898,5.035,3899,5.722,3900,2.57,3901,2.57,3902,2.57,3903,2.57,3904,2.57,3905,2.57,3906,2.57,3907,2.57,3908,2.57,3909,2.57,3910,4.061,3911,2.57,3912,2.57,3913,4.061,3914,2.57,3915,2.57,3916,2.57,3917,2.57,3918,2.57,3919,2.57,3920,2.57,3921,2.57,3922,5.722,3923,5.035,3924,5.035,3925,5.035,3926,4.061,3927,5.035,3928,4.061,3929,4.061,3930,4.061,3931,2.57,3932,2.57,3933,2.57,3934,2.57,3935,2.57,3936,2.57,3937,2.57,3938,4.061,3939,2.57,3940,2.57,3941,6.231,3942,2.57,3943,2.57,3944,2.57,3945,2.57,3946,2.57,3947,2.57,3948,2.57,3949,2.57,3950,6.231,3951,2.57,3952,2.57,3953,2.57,3954,2.57,3955,2.57,3956,2.57,3957,2.57,3958,2.57,3959,2.57,3960,2.57,3961,2.57,3962,2.57,3963,2.57,3964,2.57,3965,2.57,3966,5.035,3967,2.57,3968,2.57,3969,2.57,3970,4.061,3971,2.57,3972,2.57,3973,2.57,3974,2.57,3975,2.57,3976,2.57,3977,2.57,3978,2.57,3979,2.57,3980,2.57,3981,2.57,3982,2.57,3983,2.57,3984,2.57,3985,4.061,3986,2.57,3987,2.57,3988,4.061,3989,4.061,3990,2.57,3991,2.57,3992,2.57,3993,2.57,3994,2.57,3995,2.57,3996,2.57,3997,2.57,3998,2.272,3999,2.272,4000,2.57,4001,2.57,4002,2.57,4003,2.57,4004,2.57,4005,2.57]],["title/modules.html",[359,2.7]],["body/modules.html",[20,0.007,259,0.007,302,0.007,358,4.794,359,2.821,368,4.502,369,4.133,370,4.502,371,4.502,372,4.502,373,4.502,374,4.052,375,3.87,376,4.502,560,5.238,562,5.884,2068,4.052,2069,4.259,2454,4.052,2656,4.502,4006,9.279,4007,9.279,4008,9.356,4009,8.26]],["title/overview.html",[3608,4.938]],["body/overview.html",[2,1.206,20,0.009,47,3.534,52,4.876,69,5.367,259,0.005,302,0.005,304,1.392,344,1.502,357,1.294,358,6.822,359,1.77,360,1.942,361,2.077,362,2.077,363,1.942,364,2.007,365,2.007,366,3.544,367,3.544,368,6.193,369,4.797,370,5.038,371,4.635,372,6.479,373,4.635,374,5.49,375,5.194,376,6.15,377,2.937,378,2.077,379,1.942,533,5.367,535,4.385,594,3.544,595,3.544,596,3.544,597,4.673,598,6.04,668,4.876,671,4.489,715,1.464,725,4.876,726,3.984,1072,2.236,1109,4.385,1198,4.171,1229,4.876,1319,3.544,1320,3.544,1321,3.544,1322,5.673,1441,3.238,2032,5.105,2064,3.544,2065,3.544,2066,3.544,2067,3.544,2068,5.711,2069,5.575,2070,4.534,2071,4.534,2450,3.544,2451,3.544,2452,3.544,2453,3.544,2454,5.376,2652,3.544,2653,3.544,2654,3.544,2655,3.544,2656,5.519,2675,5.673,2805,3.544,2806,3.544,2808,3.544,2847,3.544,2848,3.544,2849,3.544,3111,3.544,3112,3.544,3113,3.544,3260,3.544,3262,3.544,3263,3.544,3608,3.238,4010,4.01,4011,4.01,4012,4.01,4013,4.01,4014,4.01]],["title/properties.html",[13,0.62,3538,3.294]],["body/properties.html",[7,1.437,13,0.807,20,0.009,259,0.008,302,0.008,826,3.906,899,5.255,990,3.906,1115,4.242,3461,5.255,3666,6.191,3715,5.255,3718,5.655,3719,5.655,3998,6.191,3999,6.191,4015,7.005,4016,7.005,4017,7.005,4018,7.005,4019,7.005]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":267,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{}}}],["0.0.1",{"_index":4015,"title":{},"body":{"properties.html":{}}}],["0.14.0",{"_index":3555,"title":{},"body":{"dependencies.html":{}}}],["0.14.2",{"_index":3558,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":3571,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":3550,"title":{},"body":{"dependencies.html":{}}}],["0.3.25",{"_index":3575,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":3219,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["0.5.1",{"_index":3557,"title":{},"body":{"dependencies.html":{}}}],["07",{"_index":3456,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":3511,"title":{},"body":{"changelog.html":{}}}],["0x00",{"_index":3405,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["1",{"_index":909,"title":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService-1.html":{}},"body":{"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/VaultKeyService.html":{},"license.html":{}}}],["1.0.0",{"_index":3510,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":3498,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":3492,"title":{},"body":{"changelog.html":{}}}],["1.10.0",{"_index":3556,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":3478,"title":{},"body":{"changelog.html":{}}}],["1.2.1",{"_index":3474,"title":{},"body":{"changelog.html":{}}}],["1.2.2",{"_index":3469,"title":{},"body":{"changelog.html":{}}}],["1.2.3",{"_index":3454,"title":{},"body":{"changelog.html":{}}}],["1.5.4",{"_index":3569,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":3499,"title":{},"body":{"changelog.html":{}}}],["10,000",{"_index":3205,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["10.5.0",{"_index":3567,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":825,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["1000",{"_index":183,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["10000",{"_index":3212,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["11",{"_index":3493,"title":{},"body":{"changelog.html":{}}}],["11.0.0",{"_index":3549,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":3544,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":3576,"title":{},"body":{"dependencies.html":{}}}],["11.1.3",{"_index":3541,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":3548,"title":{},"body":{"dependencies.html":{}}}],["12/schema",{"_index":2889,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["12395c8",{"_index":3518,"title":{},"body":{"changelog.html":{}}}],["13.0.0",{"_index":3568,"title":{},"body":{"dependencies.html":{}}}],["14",{"_index":4011,"title":{},"body":{"overview.html":{}}}],["15",{"_index":4010,"title":{},"body":{"overview.html":{}}}],["17.13.3",{"_index":3559,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":3475,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":3470,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":294,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["2.0",{"_index":3719,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["20",{"_index":2899,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"changelog.html":{}}}],["200",{"_index":519,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["2004",{"_index":3721,"title":{},"body":{"license.html":{}}}],["201",{"_index":2024,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["2025",{"_index":3455,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["20250602121005",{"_index":3552,"title":{},"body":{"dependencies.html":{}}}],["23",{"_index":4012,"title":{},"body":{"overview.html":{}}}],["24",{"_index":591,"title":{},"body":{"controllers/AuthController.html":{},"modules/SessionModule.html":{},"index.html":{}}}],["24h",{"_index":589,"title":{},"body":{"controllers/AuthController.html":{}}}],["25",{"_index":4013,"title":{},"body":{"overview.html":{}}}],["256",{"_index":1277,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{}}}],["259ab39",{"_index":3462,"title":{},"body":{"changelog.html":{}}}],["2742ec4",{"_index":3537,"title":{},"body":{"changelog.html":{}}}],["2913417",{"_index":3468,"title":{},"body":{"changelog.html":{}}}],["295428b",{"_index":3473,"title":{},"body":{"changelog.html":{}}}],["2a71850",{"_index":3522,"title":{},"body":{"changelog.html":{}}}],["2aa727a",{"_index":3467,"title":{},"body":{"changelog.html":{}}}],["2f07af2",{"_index":3521,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":1425,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["3.0.1",{"_index":3543,"title":{},"body":{"dependencies.html":{}}}],["3.14.1",{"_index":3562,"title":{},"body":{"dependencies.html":{}}}],["3.2.0",{"_index":3539,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":4014,"title":{},"body":{"overview.html":{}}}],["300",{"_index":822,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["3000:3000",{"_index":3674,"title":{},"body":{"index.html":{}}}],["32",{"_index":3397,"title":{},"body":{"injectables/VaultKeyService.html":{},"index.html":{}}}],["32fbd8e",{"_index":3483,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":3403,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["33ac2c7",{"_index":3524,"title":{},"body":{"changelog.html":{}}}],["35f4d1e",{"_index":3496,"title":{},"body":{"changelog.html":{}}}],["3600",{"_index":2413,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["365",{"_index":1434,"title":{},"body":{"injectables/CryptoService.html":{}}}],["3ac47ec",{"_index":3515,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":1435,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{}}}],["4.0.0",{"_index":3540,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":3564,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":3542,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":3563,"title":{},"body":{"dependencies.html":{}}}],["401",{"_index":521,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["404",{"_index":2780,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["40ccd32",{"_index":3517,"title":{},"body":{"changelog.html":{}}}],["45f3f7f",{"_index":3519,"title":{},"body":{"changelog.html":{}}}],["46c9ce6",{"_index":3491,"title":{},"body":{"changelog.html":{}}}],["4be0171",{"_index":3520,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":1437,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vpService.html":{}}}],["5.0.3",{"_index":3547,"title":{},"body":{"dependencies.html":{}}}],["5.1.7",{"_index":3574,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":3755,"title":{},"body":{"license.html":{}}}],["500",{"_index":688,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["54e8a4e",{"_index":3527,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":1441,"title":{},"body":{"injectables/CryptoService.html":{},"changelog.html":{},"overview.html":{}}}],["6.0.0",{"_index":3546,"title":{},"body":{"dependencies.html":{}}}],["6.0.11",{"_index":3560,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":2524,"title":{},"body":{"injectables/Oid4vpService.html":{},"modules/SessionModule.html":{}}}],["6a6cdb6",{"_index":3508,"title":{},"body":{"changelog.html":{}}}],["6bb4aa9",{"_index":3472,"title":{},"body":{"changelog.html":{}}}],["6d31de0",{"_index":3503,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":1448,"title":{},"body":{"injectables/CryptoService.html":{},"changelog.html":{}}}],["7.8.2",{"_index":3572,"title":{},"body":{"dependencies.html":{}}}],["7a6a69c",{"_index":3465,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":298,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["8.16.3",{"_index":3566,"title":{},"body":{"dependencies.html":{}}}],["86400",{"_index":558,"title":{},"body":{"controllers/AuthController.html":{}}}],["892b30e",{"_index":3516,"title":{},"body":{"changelog.html":{}}}],["8f9498a",{"_index":3476,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":3731,"title":{},"body":{"license.html":{}}}],["905e17c",{"_index":3477,"title":{},"body":{"changelog.html":{}}}],["9104df3",{"_index":3480,"title":{},"body":{"changelog.html":{}}}],["91b5499",{"_index":3494,"title":{},"body":{"changelog.html":{}}}],["937603a",{"_index":3497,"title":{},"body":{"changelog.html":{}}}],["98303c1",{"_index":3529,"title":{},"body":{"changelog.html":{}}}],["_",{"_index":3418,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["_fns",{"_index":1788,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["_key",{"_index":2794,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["_url",{"_index":1826,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["_url.match(path_param_re",{"_index":1828,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["_url.startswith",{"_index":1890,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["a128gcm",{"_index":2518,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["above",{"_index":3902,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":2195,"title":{},"body":{"classes/KeyService.html":{}}}],["abstraction",{"_index":3626,"title":{},"body":{"index.html":{}}}],["ac4ee24",{"_index":3526,"title":{},"body":{"changelog.html":{}}}],["accept",{"_index":2053,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["acceptance",{"_index":3968,"title":{},"body":{"license.html":{}}}],["accepting",{"_index":3966,"title":{},"body":{"license.html":{}}}],["accepts",{"_index":526,"title":{},"body":{"controllers/AuthController.html":{}}}],["access",{"_index":9,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{}}}],["access_token",{"_index":554,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenResponse.html":{}}}],["accesscert",{"_index":2531,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscert?.length",{"_index":2544,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscertificatecontrollerfindone",{"_index":40,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accesscertificatecontrollerregister",{"_index":41,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accesscertificateid",{"_index":2802,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["accesscertificateresponse",{"_index":1,"title":{"interfaces/AccessCertificateResponse.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accessing",{"_index":96,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["accesstoken",{"_index":92,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"miscellaneous/functions.html":{}}}],["accesstokenrequest",{"_index":797,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["accordingly",{"_index":893,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["act",{"_index":3974,"title":{},"body":{"license.html":{}}}],["acting",{"_index":3739,"title":{},"body":{"license.html":{}}}],["action",{"_index":2483,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["acts",{"_index":3948,"title":{},"body":{"license.html":{}}}],["add",{"_index":211,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionService.html":{},"interfaces/TDataShape.html":{},"changelog.html":{},"license.html":{}}}],["add(issuer_state",{"_index":3130,"title":{},"body":{"injectables/SessionService.html":{}}}],["addaccesscertificate",{"_index":230,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["addaccesscertificate(config",{"_index":2827,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["added",{"_index":929,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["addendum",{"_index":3893,"title":{},"body":{"license.html":{}}}],["addext",{"_index":1431,"title":{},"body":{"injectables/CryptoService.html":{}}}],["adding",{"_index":74,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["additional",{"_index":1752,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["additionaldata",{"_index":3073,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["additions",{"_index":3799,"title":{},"body":{"license.html":{}}}],["addregistrationcertificate",{"_index":245,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["addregistrationcertificate(req",{"_index":2829,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["address",{"_index":2751,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["addrp",{"_index":2821,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp(tenantid",{"_index":189,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["adds",{"_index":184,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["adjust",{"_index":3514,"title":{},"body":{"changelog.html":{}}}],["advancing",{"_index":3712,"title":{},"body":{"index.html":{}}}],["advised",{"_index":3964,"title":{},"body":{"license.html":{}}}],["against",{"_index":3851,"title":{},"body":{"license.html":{}}}],["agent",{"_index":482,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["agree",{"_index":3977,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":3925,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":3907,"title":{},"body":{"license.html":{}}}],["alg",{"_index":818,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["algorithm",{"_index":276,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/RegistrarService.html":{}}}],["algorithms",{"_index":1301,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["align",{"_index":2340,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["alleging",{"_index":3856,"title":{},"body":{"license.html":{}}}],["allowed",{"_index":1657,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["allowedauthenticationschemes",{"_index":2377,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["allowedsigningalgs",{"_index":810,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["allowextra",{"_index":1611,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["allowing",{"_index":890,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["allowreserved",{"_index":1845,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["alone",{"_index":3847,"title":{},"body":{"license.html":{}}}],["along",{"_index":3885,"title":{},"body":{"license.html":{}}}],["alongside",{"_index":3892,"title":{},"body":{"license.html":{}}}],["alpha",{"_index":3551,"title":{},"body":{"dependencies.html":{}}}],["already",{"_index":203,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"index.html":{}}}],["always",{"_index":1053,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["amount",{"_index":1172,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["and/or",{"_index":3971,"title":{},"body":{"license.html":{}}}],["animo",{"_index":3646,"title":{},"body":{"index.html":{}}}],["annotations",{"_index":3788,"title":{},"body":{"license.html":{}}}],["any).issuer",{"_index":2164,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["anymore",{"_index":865,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["apache",{"_index":3718,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["api",{"_index":87,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{}}}],["api/client",{"_index":1011,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["api:read",{"_index":2634,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["api:write",{"_index":2635,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apibody",{"_index":532,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apibody({description",{"_index":655,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["apiexcludecontroller",{"_index":349,"title":{},"body":{"controllers/AppController.html":{}}}],["apihideproperty",{"_index":1959,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["apihideproperty()@column('varchar",{"_index":1956,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["apikey",{"_index":328,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"injectables/Oid4vpService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["apikeyconfig",{"_index":303,"title":{"classes/ApiKeyConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["apioperation",{"_index":3444,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apioperation({summary",{"_index":3437,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apiproduces",{"_index":2031,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiproduces('application/json",{"_index":2043,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiproperty",{"_index":2282,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["apiproperty({example",{"_index":2277,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["apiresponse",{"_index":531,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiresponse({description",{"_index":2023,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apisecurity",{"_index":1189,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["apisecurity('oauth2",{"_index":1196,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["apitags",{"_index":530,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{}}}],["apitags('authentication",{"_index":544,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('issuer",{"_index":1193,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["apitags('presentation",{"_index":2633,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apitags('session",{"_index":2967,"title":{},"body":{"controllers/SessionController.html":{}}}],["apitags('status",{"_index":3182,"title":{},"body":{"controllers/StatusListController.html":{}}}],["app/app.controller",{"_index":402,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":343,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appear",{"_index":3889,"title":{},"body":{"license.html":{}}}],["appendix",{"_index":3781,"title":{},"body":{"license.html":{}}}],["applicable",{"_index":3923,"title":{},"body":{"license.html":{}}}],["application",{"_index":143,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"miscellaneous/functions.html":{}}}],["application/json",{"_index":1917,"title":{},"body":{"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"index.html":{}}}],["application/jwk",{"_index":3434,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["application/statuslist+jwt",{"_index":3180,"title":{},"body":{"controllers/StatusListController.html":{}}}],["applications",{"_index":1007,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["applies",{"_index":3841,"title":{},"body":{"license.html":{}}}],["apply",{"_index":3985,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":358,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":1019,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["appropriateness",{"_index":3937,"title":{},"body":{"license.html":{}}}],["architecture",{"_index":3704,"title":{},"body":{"index.html":{}}}],["archives",{"_index":3997,"title":{},"body":{"license.html":{}}}],["aren’t",{"_index":2913,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["arg",{"_index":1642,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["args",{"_index":1612,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["args.entries",{"_index":1643,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["arising",{"_index":3954,"title":{},"body":{"license.html":{}}}],["array",{"_index":931,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/Interceptors.html":{},"classes/JwksResponseDto.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["array(size",{"_index":3215,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["array(size).fill(0).map",{"_index":3213,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["array.isarray(dcql_query",{"_index":2498,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["array.isarray(value",{"_index":1499,"title":{},"body":{"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["array['headers",{"_index":1904,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["arraybuffer",{"_index":1026,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["arrays",{"_index":944,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["arrays/objects",{"_index":2912,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["arrayseparatorstyle",{"_index":1824,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["arraystyle",{"_index":1817,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["asserted",{"_index":3983,"title":{},"body":{"license.html":{}}}],["associated",{"_index":2926,"title":{},"body":{"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["assume",{"_index":841,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"license.html":{}}}],["assuming",{"_index":2750,"title":{},"body":{"interfaces/PresentedData.html":{}}}],["async",{"_index":146,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["att",{"_index":2739,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attach",{"_index":3986,"title":{},"body":{"license.html":{}}}],["attached",{"_index":3780,"title":{},"body":{"license.html":{}}}],["attestation",{"_index":828,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["attestations",{"_index":2694,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attestations.map((att",{"_index":2740,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attestations—issuing",{"_index":3640,"title":{},"body":{"index.html":{}}}],["attribute",{"_index":3639,"title":{},"body":{"index.html":{}}}],["attribution",{"_index":3879,"title":{},"body":{"license.html":{}}}],["aud",{"_index":2521,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["audience",{"_index":590,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["audio",{"_index":1867,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["auth",{"_index":129,"title":{"interfaces/Auth.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{}}}],["auth.controller",{"_index":604,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":603,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.in",{"_index":1876,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["auth.name",{"_index":1875,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["auth.scheme",{"_index":508,"title":{},"body":{"interfaces/Auth.html":{}}}],["auth/auth.guard",{"_index":1192,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["auth/auth.module",{"_index":410,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/tenant",{"_index":67,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["auth/token.decorator",{"_index":1190,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["auth_client_id",{"_index":616,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth_client_secret",{"_index":615,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["auth_client_secret=$(openssl",{"_index":3673,"title":{},"body":{"index.html":{}}}],["auth_client_secret=your",{"_index":3679,"title":{},"body":{"index.html":{}}}],["auth_queries",{"_index":687,"title":{},"body":{"controllers/AuthorizeController.html":{},"entities/Session.html":{}}}],["auth_session",{"_index":694,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["auth_validation_schema",{"_index":409,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["authconfig",{"_index":327,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["authcontroller",{"_index":510,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["authenticating",{"_index":90,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["authentication",{"_index":306,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{}}}],["authguard",{"_index":2101,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":2091,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authheader",{"_index":567,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.startswith('basic",{"_index":569,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.substring(6",{"_index":571,"title":{},"body":{"controllers/AuthController.html":{}}}],["authmodule",{"_index":368,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":4019,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":323,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/PathSerializer.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["authorization_challenge_endpoint",{"_index":782,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorization_code",{"_index":800,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/Session.html":{}}}],["authorization_encrypted_response_alg",{"_index":2516,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_encrypted_response_enc",{"_index":2517,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_endpoint",{"_index":769,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorization_request",{"_index":2482,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{}}}],["authorization_server",{"_index":1148,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["authorization_servers",{"_index":1149,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["authorizationchallengeendpoint",{"_index":641,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationchallengeendpoint(res",{"_index":644,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{}}}],["authorizationcodegrantidentifier",{"_index":747,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationresponse",{"_index":631,"title":{"classes/AuthorizationResponse.html":{}},"body":{"classes/AuthorizationResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["authorizationserver",{"_index":759,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationservermetadata",{"_index":731,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationservermetadata.dpop_signing_alg_values_supported",{"_index":811,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationservermetadata.issuer",{"_index":823,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationservers",{"_index":2352,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["authorize",{"_index":642,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(queries",{"_index":649,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize.service",{"_index":669,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize/authorize.controller",{"_index":2077,"title":{},"body":{"modules/IssuerModule.html":{}}}],["authorize/authorize.service",{"_index":2074,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{}}}],["authorizecontroller",{"_index":635,"title":{"controllers/AuthorizeController.html":{}},"body":{"controllers/AuthorizeController.html":{},"modules/IssuerModule.html":{}}}],["authorized",{"_index":3735,"title":{},"body":{"license.html":{}}}],["authorizequeries",{"_index":645,"title":{"classes/AuthorizeQueries.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/Session.html":{}}}],["authorizequeries})@post('par",{"_index":657,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorizeservice",{"_index":668,"title":{"injectables/AuthorizeService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/WellKnownController.html":{},"overview.html":{}}}],["authorship",{"_index":3776,"title":{},"body":{"license.html":{}}}],["authresponse",{"_index":617,"title":{"interfaces/AuthResponse.html":{}},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["authserver",{"_index":762,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authserver}/.well",{"_index":772,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authserver}/authorize",{"_index":770,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authserver}/authorize/challenge",{"_index":783,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authserver}/authorize/par",{"_index":779,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authserver}/authorize/token",{"_index":768,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authtoken",{"_index":504,"title":{},"body":{"interfaces/Auth.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["authtype",{"_index":2578,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authz",{"_index":2529,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authzmetadata",{"_index":717,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/WellKnownController.html":{}}}],["authzmetadata(tenantid",{"_index":729,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/WellKnownController.html":{}}}],["authzservice",{"_index":2318,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["auto",{"_index":1017,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["autoloadentities",{"_index":1540,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["autologging",{"_index":451,"title":{},"body":{"modules/AppModule.html":{}}}],["automatic",{"_index":2233,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["available",{"_index":560,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"index.html":{},"license.html":{},"modules.html":{}}}],["avoid",{"_index":3047,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["await",{"_index":147,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["axios",{"_index":957,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"dependencies.html":{}}}],["b",{"_index":1895,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"license.html":{}}}],["b.headers",{"_index":1902,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["b3abd57",{"_index":3534,"title":{},"body":{"changelog.html":{}}}],["b989c6c",{"_index":3485,"title":{},"body":{"changelog.html":{}}}],["back",{"_index":579,"title":{},"body":{"controllers/AuthController.html":{}}}],["backend",{"_index":3603,"title":{},"body":{"index.html":{}}}],["badgateway/oauth2",{"_index":37,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"dependencies.html":{}}}],["badrequestexception",{"_index":2333,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["badrequestexception('session",{"_index":2417,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["bar",{"_index":2770,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["base",{"_index":994,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["base64",{"_index":573,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"index.html":{}}}],["base64credentials",{"_index":570,"title":{},"body":{"controllers/AuthController.html":{}}}],["base64url",{"_index":3379,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["based",{"_index":134,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"index.html":{},"license.html":{}}}],["baseurl",{"_index":127,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["basic",{"_index":502,"title":{},"body":{"interfaces/Auth.html":{},"controllers/AuthController.html":{}}}],["basis",{"_index":3926,"title":{},"body":{"license.html":{}}}],["batch",{"_index":1162,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["batch_credential_issuance",{"_index":1150,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["batch_size",{"_index":1174,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["bearer",{"_index":324,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"classes/TokenResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["become",{"_index":1046,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["beef4d2",{"_index":3489,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":837,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["begin",{"_index":1459,"title":{},"body":{"injectables/CryptoService.html":{}}}],["behalf",{"_index":3804,"title":{},"body":{"license.html":{}}}],["behavior",{"_index":1021,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["being",{"_index":2978,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["below",{"_index":3782,"title":{},"body":{"license.html":{}}}],["beneficial",{"_index":3759,"title":{},"body":{"license.html":{}}}],["best",{"_index":1859,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["better",{"_index":2583,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["between",{"_index":624,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["bigint",{"_index":2795,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["binary",{"_index":2042,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["bind",{"_index":3796,"title":{},"body":{"license.html":{}}}],["bits",{"_index":3189,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["bitsperstatus",{"_index":3190,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["blob",{"_index":1027,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["body",{"_index":193,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"controllers/CredentialsController.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{}}}],["body.auth_session",{"_index":839,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["body.client_id",{"_index":580,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.client_secret",{"_index":581,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.code",{"_index":801,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["body.credentialconfigurationids",{"_index":2359,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.event",{"_index":2422,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.grant_type",{"_index":563,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.issuanceid",{"_index":2358,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.issuer_state",{"_index":830,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["body.notification_id",{"_index":2420,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.requestid",{"_index":2639,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body.response",{"_index":2555,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["body.response_type",{"_index":2055,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["body.webhook",{"_index":2640,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body_",{"_index":1620,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["bodyserializer",{"_index":924,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["boilerplate",{"_index":3987,"title":{},"body":{"license.html":{}}}],["boolean",{"_index":27,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":363,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":682,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["bound",{"_index":255,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["boundaries",{"_index":3652,"title":{},"body":{"index.html":{}}}],["brackets",{"_index":3989,"title":{},"body":{"license.html":{}}}],["branch",{"_index":3699,"title":{},"body":{"index.html":{}}}],["break",{"_index":1660,"title":{},"body":{"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{}}}],["bridges",{"_index":3602,"title":{},"body":{"index.html":{}}}],["browse",{"_index":4008,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":4006,"title":{},"body":{"modules.html":{}}}],["btoa(token",{"_index":509,"title":{},"body":{"interfaces/Auth.html":{}}}],["buffer",{"_index":2056,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/VaultKeyService.html":{}}}],["buffer.concat([buffer.alloc(32",{"_index":3407,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.concat([rpadded",{"_index":3413,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from",{"_index":572,"title":{},"body":{"controllers/AuthController.html":{}}}],["buffer.from(dersignature",{"_index":3387,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from(json.stringify(header)).tostring",{"_index":3378,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from(json.stringify(payload)).tostring",{"_index":3381,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from(value).tostring('base64",{"_index":3373,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["bug",{"_index":3457,"title":{},"body":{"changelog.html":{}}}],["bugs",{"_index":4017,"title":{},"body":{"properties.html":{}}}],["build",{"_index":3533,"title":{},"body":{"changelog.html":{}}}],["buildclientparams",{"_index":1639,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["builder/querypartialentity",{"_index":3154,"title":{},"body":{"injectables/SessionService.html":{}}}],["buildkeymap",{"_index":1627,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["buildkeymap(config.args",{"_index":1633,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["buildkeymap(fields",{"_index":1640,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["buildurl",{"_index":911,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["buildurlfn",{"_index":920,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["built",{"_index":3649,"title":{},"body":{"index.html":{}}}],["business",{"_index":3633,"title":{},"body":{"index.html":{}}}],["byte",{"_index":3395,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["bytes",{"_index":1476,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{}}}],["c",{"_index":3876,"title":{},"body":{"license.html":{}}}],["c.id",{"_index":884,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["c3b1b48",{"_index":3500,"title":{},"body":{"changelog.html":{}}}],["c805439",{"_index":3513,"title":{},"body":{"changelog.html":{}}}],["ca",{"_index":1444,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cache",{"_index":2141,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cacreateserial",{"_index":1446,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cakey",{"_index":1445,"title":{},"body":{"injectables/CryptoService.html":{}}}],["calculatejwkthumbprint",{"_index":1369,"title":{},"body":{"injectables/CryptoService.html":{}}}],["call",{"_index":2992,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["callback",{"_index":506,"title":{},"body":{"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"injectables/CryptoService.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{}}}],["callback(auth",{"_index":507,"title":{},"body":{"interfaces/Auth.html":{}}}],["callbackcontext",{"_index":1367,"title":{},"body":{"injectables/CryptoService.html":{}}}],["callbacks",{"_index":760,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["called",{"_index":142,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["callhandler",{"_index":2988,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["calling",{"_index":1051,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["calls",{"_index":3659,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":2092,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":2096,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["carry",{"_index":3871,"title":{},"body":{"license.html":{}}}],["cascade",{"_index":1091,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["case",{"_index":1517,"title":{},"body":{"injectables/CryptoService-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["catch",{"_index":577,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/VaultKeyService.html":{}}}],["catch(async",{"_index":3348,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["catcherror",{"_index":3005,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["catcherror((error",{"_index":3039,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["cause",{"_index":3749,"title":{},"body":{"license.html":{}}}],["cb",{"_index":2148,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cb(err",{"_index":2150,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cd",{"_index":3667,"title":{},"body":{"index.html":{}}}],["cert",{"_index":241,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["cert.id",{"_index":264,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["cert.publickey.export",{"_index":2874,"title":{},"body":{"injectables/ResolverService.html":{}}}],["cert.revoked",{"_index":262,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["cert.subjectaltname?.includes(payload.iss.split('://')[1",{"_index":2872,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certificate",{"_index":10,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{}}}],["certificate.pem",{"_index":1399,"title":{},"body":{"injectables/CryptoService.html":{}}}],["certificatechainlength",{"_index":2543,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["certificates",{"_index":77,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["certificatetype",{"_index":1341,"title":{},"body":{"injectables/CryptoService.html":{}}}],["certout",{"_index":1398,"title":{},"body":{"injectables/CryptoService.html":{}}}],["certs",{"_index":260,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["certs?.length",{"_index":266,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["certs[0",{"_index":2871,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certs[0].jwt",{"_index":268,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["chain",{"_index":1457,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/ResolverService.html":{}}}],["challenge",{"_index":648,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["changed",{"_index":3875,"title":{},"body":{"license.html":{}}}],["changelog",{"_index":3453,"title":{"changelog.html":{}},"body":{}}],["character",{"_index":3678,"title":{},"body":{"index.html":{},"license.html":{}}}],["characters",{"_index":951,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["charge",{"_index":3828,"title":{},"body":{"license.html":{}}}],["check",{"_index":213,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/JwtService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["checking",{"_index":3204,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["checks",{"_index":131,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"controllers/HealthController.html":{},"injectables/RegistrarService.html":{}}}],["checl",{"_index":2875,"title":{},"body":{"injectables/ResolverService.html":{}}}],["choice",{"_index":3614,"title":{},"body":{"index.html":{}}}],["choose",{"_index":3692,"title":{},"body":{"index.html":{},"license.html":{}}}],["ci",{"_index":3459,"title":{},"body":{"changelog.html":{}}}],["citizen",{"_index":2755,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["claim",{"_index":3853,"title":{},"body":{"license.html":{}}}],["claims",{"_index":1074,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"license.html":{}}}],["class",{"_index":80,"title":{"classes/ApiKeyConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/Interceptors.html":{},"classes/IssuanceDto.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrarConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{},"license.html":{}}}],["classes",{"_index":304,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/Interceptors.html":{},"classes/IssuanceDto.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrarConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"overview.html":{}}}],["clean",{"_index":1449,"title":{},"body":{"injectables/CryptoService.html":{},"index.html":{}}}],["cleancontent",{"_index":1862,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleancontent.endswith('+json",{"_index":1865,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleancontent.startswith('application/json",{"_index":1864,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleancontent.startswith('text",{"_index":1871,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleancontent.startswith(type",{"_index":1870,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleanup",{"_index":868,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["clear",{"_index":1789,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{}}}],["client",{"_index":38,"title":{"interfaces/Client.html":{},"interfaces/Client-1.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"dependencies.html":{},"index.html":{}}}],["client's",{"_index":1047,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["client.id",{"_index":586,"title":{},"body":{"controllers/AuthController.html":{}}}],["client.secret",{"_index":885,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["client.service",{"_index":536,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["client['buildurl",{"_index":1882,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["client_credentials",{"_index":547,"title":{},"body":{"controllers/AuthController.html":{}}}],["client_id",{"_index":550,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/TokenPayload.html":{},"index.html":{}}}],["client_metadata",{"_index":2506,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_name",{"_index":2519,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_secret",{"_index":552,"title":{},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{},"index.html":{}}}],["clientauthentication",{"_index":1478,"title":{},"body":{"injectables/CryptoService.html":{}}}],["clientauthenticationnone",{"_index":1370,"title":{},"body":{"injectables/CryptoService.html":{}}}],["clientcredentialsdto",{"_index":516,"title":{"classes/ClientCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{}}}],["clientid",{"_index":113,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["clientoptions",{"_index":982,"title":{"interfaces/ClientOptions.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["clients",{"_index":862,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["clients.foreach((client",{"_index":872,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["clientsecret",{"_index":115,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/RegistrarService.html":{}}}],["clientservice",{"_index":535,"title":{"injectables/ClientService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"overview.html":{}}}],["clone",{"_index":3663,"title":{},"body":{"index.html":{}}}],["cloudflare",{"_index":3501,"title":{},"body":{"changelog.html":{}}}],["cluster_appmodule",{"_index":366,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":367,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":594,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":596,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":595,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_cryptomodule",{"_index":1319,"title":{},"body":{"modules/CryptoModule.html":{},"overview.html":{}}}],["cluster_cryptomodule_exports",{"_index":1321,"title":{},"body":{"modules/CryptoModule.html":{},"overview.html":{}}}],["cluster_cryptomodule_providers",{"_index":1320,"title":{},"body":{"modules/CryptoModule.html":{},"overview.html":{}}}],["cluster_issuermodule",{"_index":2064,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_issuermodule_exports",{"_index":2067,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_issuermodule_imports",{"_index":2066,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_issuermodule_providers",{"_index":2065,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule",{"_index":2450,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule_exports",{"_index":2452,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule_imports",{"_index":2451,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule_providers",{"_index":2453,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule",{"_index":2652,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule_exports",{"_index":2653,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule_imports",{"_index":2654,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule_providers",{"_index":2655,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_registrarmodule",{"_index":2805,"title":{},"body":{"modules/RegistrarModule.html":{},"overview.html":{}}}],["cluster_registrarmodule_exports",{"_index":2808,"title":{},"body":{"modules/RegistrarModule.html":{},"overview.html":{}}}],["cluster_registrarmodule_imports",{"_index":2807,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["cluster_registrarmodule_providers",{"_index":2806,"title":{},"body":{"modules/RegistrarModule.html":{},"overview.html":{}}}],["cluster_resolvermodule",{"_index":2847,"title":{},"body":{"modules/ResolverModule.html":{},"overview.html":{}}}],["cluster_resolvermodule_exports",{"_index":2848,"title":{},"body":{"modules/ResolverModule.html":{},"overview.html":{}}}],["cluster_resolvermodule_providers",{"_index":2849,"title":{},"body":{"modules/ResolverModule.html":{},"overview.html":{}}}],["cluster_sessionmodule",{"_index":3111,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_sessionmodule_exports",{"_index":3112,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_sessionmodule_imports",{"_index":3114,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_sessionmodule_providers",{"_index":3113,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_statuslistmodule",{"_index":3260,"title":{},"body":{"modules/StatusListModule.html":{},"overview.html":{}}}],["cluster_statuslistmodule_exports",{"_index":3262,"title":{},"body":{"modules/StatusListModule.html":{},"overview.html":{}}}],["cluster_statuslistmodule_imports",{"_index":3261,"title":{},"body":{"modules/StatusListModule.html":{}}}],["cluster_statuslistmodule_providers",{"_index":3263,"title":{},"body":{"modules/StatusListModule.html":{},"overview.html":{}}}],["cluster_verifiermodule",{"_index":3420,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cluster_verifiermodule_imports",{"_index":3421,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cmd",{"_index":1410,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cn=${subject",{"_index":1430,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cnf",{"_index":1234,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{}}}],["cnonce",{"_index":814,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["cnonceexpiresin",{"_index":824,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["cnonceexpiresinseconds",{"_index":2412,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["code",{"_index":664,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/Session.html":{},"index.html":{},"license.html":{}}}],["code_challenge",{"_index":695,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_method",{"_index":696,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_methods_supported",{"_index":780,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["codecov",{"_index":3479,"title":{},"body":{"changelog.html":{}}}],["colorize",{"_index":456,"title":{},"body":{"modules/AppModule.html":{}}}],["column",{"_index":1100,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{}}}],["column('json",{"_index":1079,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["column('json')@isobject",{"_index":1084,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/PresentationConfig.html":{}}}],["column('varchar",{"_index":1087,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["column({type",{"_index":1942,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{}}}],["combination",{"_index":3848,"title":{},"body":{"license.html":{}}}],["commands",{"_index":1409,"title":{},"body":{"injectables/CryptoService.html":{}}}],["comment",{"_index":3992,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":3962,"title":{},"body":{"license.html":{}}}],["common",{"_index":3742,"title":{},"body":{"license.html":{}}}],["commonoptions",{"_index":1538,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["communicates",{"_index":3627,"title":{},"body":{"index.html":{}}}],["communication",{"_index":3807,"title":{},"body":{"license.html":{}}}],["compact",{"_index":1361,"title":{},"body":{"injectables/CryptoService.html":{}}}],["comparison",{"_index":275,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["compatible",{"_index":3644,"title":{},"body":{"index.html":{}}}],["compiled",{"_index":3772,"title":{},"body":{"license.html":{}}}],["complete",{"_index":2684,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["completed",{"_index":3037,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["completion",{"_index":3082,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["compliance",{"_index":4000,"title":{},"body":{"license.html":{}}}],["complies",{"_index":3896,"title":{},"body":{"license.html":{}}}],["computer",{"_index":3959,"title":{},"body":{"license.html":{}}}],["concatenate",{"_index":3411,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["condition",{"_index":3142,"title":{},"body":{"injectables/SessionService.html":{}}}],["conditions",{"_index":3724,"title":{},"body":{"license.html":{}}}],["config",{"_index":60,"title":{"interfaces/Config.html":{},"interfaces/Config-1.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionService.html":{},"interfaces/TDataShape.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["config.accesscertificateid",{"_index":217,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["config.allowextra",{"_index":1659,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.args",{"_index":1632,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.baseurl",{"_index":1897,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.baseurl.length",{"_index":1899,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.baseurl.substring(0",{"_index":1898,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.baseurl?.endswith",{"_index":1896,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.dto",{"_index":1105,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{}}}],["config.dto.ts",{"_index":2608,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["config.dto.ts:10",{"_index":3305,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:12",{"_index":3306,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:14",{"_index":3307,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:16",{"_index":3309,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:18",{"_index":3310,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:23",{"_index":2609,"title":{},"body":{"classes/PresentationDuringIssuance.html":{}}}],["config.dto.ts:25",{"_index":2610,"title":{},"body":{"classes/PresentationDuringIssuance.html":{}}}],["config.dto.ts:6",{"_index":3311,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:8",{"_index":3308,"title":{},"body":{"classes/VCT.html":{}}}],["config.entity",{"_index":1108,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["config.entity.ts",{"_index":1938,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.entity.ts:13",{"_index":1949,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:17",{"_index":2602,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:19",{"_index":1957,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:24",{"_index":2605,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:25",{"_index":1947,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:32",{"_index":2599,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:34",{"_index":1952,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:38",{"_index":2604,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:39",{"_index":1944,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:44",{"_index":2606,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:50",{"_index":2598,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.headers",{"_index":1900,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.id",{"_index":155,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["config.in",{"_index":1630,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.key",{"_index":1628,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.map",{"_index":1631,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.presentation_during_issuance",{"_index":850,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["config.presentation_during_issuance.webhook",{"_index":851,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["config.service",{"_index":1191,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["config.service.ts",{"_index":1112,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["config.service.ts:10",{"_index":1116,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:17",{"_index":2217,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:23",{"_index":2225,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:25",{"_index":1126,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:37",{"_index":1129,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:47",{"_index":2227,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:50",{"_index":1131,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:59",{"_index":2218,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:63",{"_index":1119,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/LoggerConfigService.html":{}}}],["config.service.ts:67",{"_index":2224,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:71",{"_index":2223,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:75",{"_index":2221,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:79",{"_index":2220,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:86",{"_index":2228,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:94",{"_index":2232,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.ts",{"_index":2801,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["config.ts:12",{"_index":2803,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["config.ts:8",{"_index":2804,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["config/credential",{"_index":1111,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["configmodule",{"_index":383,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["configmodule.forroot",{"_index":417,"title":{},"body":{"modules/AppModule.html":{}}}],["configs",{"_index":1260,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["configservice",{"_index":34,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["configservice.get",{"_index":447,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["configservice.get('jwt_issuer",{"_index":2163,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":2157,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('keycloak_client_id",{"_index":2155,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('keycloak_internal_issuer_url",{"_index":2154,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('keycloak_internal_issuer_url')}/protocol/openid",{"_index":2145,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('log_level",{"_index":450,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('oidc",{"_index":2137,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.getorthrow('db_database",{"_index":1550,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_host",{"_index":1542,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_password",{"_index":1548,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_port",{"_index":1544,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_username",{"_index":1546,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('folder",{"_index":491,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configservie",{"_index":1508,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["configurable",{"_index":1403,"title":{},"body":{"injectables/CryptoService.html":{}}}],["configuration",{"_index":97,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Client.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{},"license.html":{}}}],["configuration(@token",{"_index":2643,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configuration(user",{"_index":2618,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configurations",{"_index":105,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["configure",{"_index":3664,"title":{},"body":{"index.html":{}}}],["configured",{"_index":2162,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/PresentationRequest.html":{},"injectables/SessionService.html":{}}}],["conflictexception",{"_index":746,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["conflictexception('authorization",{"_index":802,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["conflictexception('issuer",{"_index":2882,"title":{},"body":{"injectables/ResolverService.html":{}}}],["conflictexception('request",{"_index":2721,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["conforms",{"_index":962,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["connect",{"_index":912,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["connect/certs",{"_index":2146,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["connect/token",{"_index":121,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["connection",{"_index":1774,"title":{},"body":{"controllers/HealthController.html":{}}}],["consequential",{"_index":3953,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":3973,"title":{},"body":{"license.html":{}}}],["console",{"_index":3482,"title":{},"body":{"changelog.html":{}}}],["console.error",{"_index":271,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["console.error('error",{"_index":223,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["console.log('keycloak",{"_index":2149,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["console.log('received",{"_index":2776,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["console.log('session",{"_index":2310,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["console.log(err",{"_index":2731,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["console.log(headers",{"_index":2574,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["console.log(json.stringify(presented",{"_index":2777,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["console.log(request.headers",{"_index":2773,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["console.warn('access",{"_index":228,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["conspicuously",{"_index":3816,"title":{},"body":{"license.html":{}}}],["const",{"_index":110,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{}}}],["constitutes",{"_index":3857,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":93,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["constructor(authzservice",{"_index":2316,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["constructor(configservice",{"_index":724,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["constructor(configservie",{"_index":1506,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["constructor(credentialconfigrepository",{"_index":1114,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["constructor(crpytoservice",{"_index":1228,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["constructor(cryptoservice",{"_index":2461,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["constructor(httpservice",{"_index":2674,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["constructor(issuanceconfigrepo",{"_index":1990,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["constructor(logger",{"_index":3070,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["constructor(private",{"_index":1199,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/ResolverService.html":{},"controllers/StatusListController.html":{}}}],["constructor(reflector",{"_index":2093,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["constructor(sessionrepository",{"_index":3126,"title":{},"body":{"injectables/SessionService.html":{}}}],["construed",{"_index":3894,"title":{},"body":{"license.html":{}}}],["consume",{"_index":2767,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["contained",{"_index":3882,"title":{},"body":{"license.html":{}}}],["containing",{"_index":627,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{}}}],["content",{"_index":484,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"index.html":{},"license.html":{}}}],["contents",{"_index":3890,"title":{},"body":{"license.html":{}}}],["contenttype",{"_index":1858,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["contenttype.split(';')[0]?.trim",{"_index":1863,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["context",{"_index":2099,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["context.flowtype",{"_index":3098,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.getclass",{"_index":2107,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":2106,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["context.sessionid",{"_index":3100,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.switchtohttp().getrequest",{"_index":3011,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":3012,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.tenantid",{"_index":3101,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.ts",{"_index":2975,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["context.ts:21",{"_index":2977,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["continue",{"_index":1645,"title":{},"body":{"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{}}}],["contract",{"_index":3751,"title":{},"body":{"license.html":{}}}],["contributing",{"_index":3705,"title":{},"body":{"index.html":{}}}],["contributing.md",{"_index":3713,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":3798,"title":{},"body":{"license.html":{}}}],["contribution(s",{"_index":3846,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":3898,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":3819,"title":{},"body":{"license.html":{}}}],["contributors",{"_index":3710,"title":{},"body":{"index.html":{}}}],["contributory",{"_index":3858,"title":{},"body":{"license.html":{}}}],["control",{"_index":3740,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":3741,"title":{},"body":{"license.html":{}}}],["controller",{"_index":342,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["controller(':tenantid/.well",{"_index":3445,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["controller(':tenantid/authorize",{"_index":675,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["controller(':tenantid/oid4vp",{"_index":2442,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["controller(':tenantid/status",{"_index":3183,"title":{},"body":{"controllers/StatusListController.html":{}}}],["controller(':tenantid/vci",{"_index":2300,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["controller('auth",{"_index":545,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('credentials",{"_index":1218,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["controller('health",{"_index":1780,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('issuer",{"_index":1197,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["controller('presentation",{"_index":2636,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["controller('session",{"_index":2968,"title":{},"body":{"controllers/SessionController.html":{}}}],["controllers",{"_index":344,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"controllers/WellKnownController.html":{},"overview.html":{}}}],["conversions",{"_index":3773,"title":{},"body":{"license.html":{}}}],["convert",{"_index":3375,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["converting",{"_index":971,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["converts",{"_index":3321,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["cookie",{"_index":499,"title":{},"body":{"interfaces/Auth.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["coordinate",{"_index":1565,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["copies",{"_index":3864,"title":{},"body":{"license.html":{}}}],["copy",{"_index":3046,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["copyright",{"_index":3733,"title":{},"body":{"license.html":{}}}],["core",{"_index":3636,"title":{},"body":{"index.html":{}}}],["core/auth",{"_index":986,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["core/bodyserializer",{"_index":1807,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["core/pathserializer",{"_index":1812,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["core/types",{"_index":989,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["coreclient",{"_index":987,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["coreconfig",{"_index":988,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["correct",{"_index":1054,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/Oid4vciService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["counterclaim",{"_index":3854,"title":{},"body":{"license.html":{}}}],["covered",{"_index":249,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["cp",{"_index":3668,"title":{},"body":{"index.html":{}}}],["create",{"_index":289,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["create(session",{"_index":3133,"title":{},"body":{"injectables/SessionService.html":{}}}],["create(tenantid",{"_index":3317,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["create_authorization_request",{"_index":2484,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest",{"_index":2459,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest(requestid",{"_index":2463,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationservermetadata",{"_index":765,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["createclientconfig",{"_index":1044,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["createconfig",{"_index":1936,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["createcredentialoffer",{"_index":2362,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["created",{"_index":188,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/VaultKeyService.html":{}}}],["createdat",{"_index":1939,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{}}}],["createentry",{"_index":3241,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["createentry(session",{"_index":3272,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createhash",{"_index":1364,"title":{},"body":{"injectables/CryptoService.html":{}}}],["createhash(alg.replace",{"_index":1472,"title":{},"body":{"injectables/CryptoService.html":{}}}],["createheaderandpayload",{"_index":3191,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["createinterceptors",{"_index":1930,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["createkeydto",{"_index":3352,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["createlist",{"_index":3267,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createlist(tenantid",{"_index":3222,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["createoffer",{"_index":2314,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["createoffer(body",{"_index":2319,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["createparamdecorator",{"_index":3300,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["createqueryserializer",{"_index":1844,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["createqueryserializer(options.queryserializer",{"_index":1887,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["createrequest",{"_index":2460,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createrequest(requestid",{"_index":2468,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["creates",{"_index":1311,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{},"injectables/VaultKeyService.html":{}}}],["cred",{"_index":2397,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["cred.length",{"_index":2402,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential",{"_index":836,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"controllers/WellKnownController.html":{},"index.html":{}}}],["credential(req",{"_index":2288,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["credential_configurations_supported",{"_index":1151,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{}}}],["credential_configurations_supported[value.id",{"_index":1262,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credential_creation",{"_index":3106,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_endpoint",{"_index":1152,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["credential_issuance",{"_index":3105,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_issuer",{"_index":1153,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["credential_issuer}/vci/credential",{"_index":2348,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_issuer}/vci/notification",{"_index":2349,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_request",{"_index":2384,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_revoked",{"_index":2259,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["credential_verification",{"_index":3108,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credentialconfig",{"_index":1071,"title":{"entities/CredentialConfig.html":{}},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentialconfig.issuanceconfig",{"_index":1946,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["credentialconfig.schema",{"_index":1295,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct",{"_index":1290,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct.vct",{"_index":1291,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigid",{"_index":2009,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialconfigrepo",{"_index":1230,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigrepository",{"_index":1117,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["credentialconfigs",{"_index":1940,"title":{},"body":{"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{}}}],["credentialconfigservice",{"_index":1109,"title":{"injectables/CredentialConfigService.html":{}},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"overview.html":{}}}],["credentialconfiguration",{"_index":1264,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.claims",{"_index":1269,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.disclosureframe",{"_index":1270,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigurationid",{"_index":1236,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["credentialconfigurationids",{"_index":2046,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{}}}],["credentialconfigurationsupported",{"_index":1083,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{}}}],["credentialcount",{"_index":2565,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialid",{"_index":1243,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialissuer",{"_index":2345,"title":{},"body":{"injectables/Oid4vciService.html":{},"controllers/WellKnownController.html":{}}}],["credentialissuermetadatadto",{"_index":1142,"title":{"classes/CredentialIssuerMetadataDto.html":{}},"body":{"classes/CredentialIssuerMetadataDto.html":{},"controllers/WellKnownController.html":{}}}],["credentialofferobject",{"_index":2936,"title":{},"body":{"entities/Session.html":{}}}],["credentialpayload",{"_index":2366,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["credentialrequest",{"_index":2370,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialresponse",{"_index":2296,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{}}}],["credentials",{"_index":160,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"index.html":{}}}],["credentials.dto",{"_index":539,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":979,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.dto.ts:5",{"_index":980,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.dto.ts:7",{"_index":981,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.length",{"_index":2410,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["credentials.push(cred",{"_index":2399,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentials.push(credential",{"_index":2012,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentials.split",{"_index":576,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials/credential",{"_index":2004,"title":{},"body":{"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials/credentials.controller",{"_index":2079,"title":{},"body":{"modules/IssuerModule.html":{}}}],["credentials/credentials.service",{"_index":1217,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{}}}],["credentials/entities/credential.entity",{"_index":1960,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials?.length",{"_index":2566,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialsconfigservice",{"_index":1991,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialscontroller",{"_index":1175,"title":{"controllers/CredentialsController.html":{}},"body":{"controllers/CredentialsController.html":{},"modules/IssuerModule.html":{}}}],["credentialsissued",{"_index":2409,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialsize",{"_index":2401,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialsmetadatacontroller",{"_index":1205,"title":{"controllers/CredentialsMetadataController.html":{}},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{}}}],["credentialsservice",{"_index":1198,"title":{"injectables/CredentialsService.html":{}},"body":{"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"overview.html":{}}}],["credentialtype",{"_index":3076,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["cron",{"_index":3146,"title":{},"body":{"injectables/SessionService.html":{}}}],["cross",{"_index":3852,"title":{},"body":{"license.html":{}}}],["crpytoservice",{"_index":1232,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["crt",{"_index":14,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/RegistrarService.html":{}}}],["crv",{"_index":1557,"title":{},"body":{"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/JwksResponseDto.html":{}}}],["crypto",{"_index":1510,"title":{},"body":{"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{}}}],["crypto.service",{"_index":1324,"title":{},"body":{"modules/CryptoModule.html":{}}}],["crypto/crypto",{"_index":1699,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["crypto/crypto.module",{"_index":385,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}}}],["crypto/crypto.service",{"_index":48,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["crypto/encryption/encryption.service",{"_index":2476,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["crypto/key/crypto/crypto.module",{"_index":401,"title":{},"body":{"modules/AppModule.html":{}}}],["crypto/key/key.module",{"_index":399,"title":{},"body":{"modules/AppModule.html":{}}}],["crypto_validation_schema",{"_index":400,"title":{},"body":{"modules/AppModule.html":{}}}],["cryptographic",{"_index":99,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"index.html":{}}}],["cryptoimplementation",{"_index":1296,"title":{"interfaces/CryptoImplementation.html":{}},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{}}}],["cryptokey",{"_index":1584,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{}}}],["cryptomodule",{"_index":369,"title":{"modules/CryptoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["cryptoservice",{"_index":47,"title":{"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"overview.html":{}}}],["cryptotype",{"_index":1511,"title":{},"body":{"injectables/CryptoService-1.html":{},"injectables/VaultKeyService.html":{}}}],["csr",{"_index":1436,"title":{},"body":{"injectables/CryptoService.html":{}}}],["ctx",{"_index":3301,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":3302,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["curl",{"_index":3682,"title":{},"body":{"index.html":{}}}],["current_timestamp",{"_index":1943,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["currentdate",{"_index":1467,"title":{},"body":{"injectables/CryptoService.html":{}}}],["currently",{"_index":331,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["curve",{"_index":1554,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["custom",{"_index":1001,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["customary",{"_index":3917,"title":{},"body":{"license.html":{}}}],["customprops",{"_index":465,"title":{},"body":{"modules/AppModule.html":{}}}],["d",{"_index":3685,"title":{},"body":{"index.html":{},"license.html":{}}}],["d6205da",{"_index":3531,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":3950,"title":{},"body":{"license.html":{}}}],["data",{"_index":225,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{}}}],["data.append(key",{"_index":2786,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["data.revoked",{"_index":227,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["data.tostring",{"_index":2799,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["database",{"_index":1549,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"index.html":{}}}],["database/database.module",{"_index":407,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":370,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":168,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"license.html":{}}}],["date((payload.exp",{"_index":1469,"title":{},"body":{"injectables/CryptoService.html":{}}}],["date().gettime",{"_index":1284,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{}}}],["date(date.now",{"_index":3171,"title":{},"body":{"injectables/SessionService.html":{}}}],["date(token.expiresat",{"_index":170,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["date.gettime",{"_index":182,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["date.now",{"_index":3028,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["day",{"_index":3151,"title":{},"body":{"injectables/SessionService.html":{}}}],["days",{"_index":1433,"title":{},"body":{"injectables/CryptoService.html":{}}}],["db",{"_index":1781,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["db_database",{"_index":1535,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_host",{"_index":1526,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_password",{"_index":1534,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_port",{"_index":1531,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_type",{"_index":1523,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_username",{"_index":1533,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_validation_schema",{"_index":1522,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dbtype",{"_index":1537,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dc+sd",{"_index":2512,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcql",{"_index":2600,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["dcql_query",{"_index":248,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{}}}],["dcql_query.length",{"_index":2499,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcqlquerycount",{"_index":2497,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dd",{"_index":461,"title":{},"body":{"modules/AppModule.html":{}}}],["de",{"_index":902,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["deal",{"_index":2039,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["debug",{"_index":427,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["debugging",{"_index":1762,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["declarations",{"_index":362,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["decode",{"_index":1760,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodedvc",{"_index":2723,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.header",{"_index":2726,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.payload",{"_index":2725,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodejwt",{"_index":1731,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodejwt(token",{"_index":1764,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodetoken",{"_index":2109,"title":{},"body":{"injectables/JwtService.html":{}}}],["decodetoken(token",{"_index":1763,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decorators",{"_index":310,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"entities/CredentialConfig.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"entities/KeyEntity.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["decryptjwe",{"_index":1574,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe(response",{"_index":1578,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["deeply",{"_index":2910,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["deepobject",{"_index":949,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["deeppartial",{"_index":3134,"title":{},"body":{"injectables/SessionService.html":{}}}],["default",{"_index":430,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Auth.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{}}}],["defaultheaders",{"_index":1935,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["defaultpathserializer",{"_index":1825,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["defaultqueryserializer",{"_index":1934,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["defend",{"_index":3979,"title":{},"body":{"license.html":{}}}],["define",{"_index":689,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/PresentationConfig.html":{}}}],["defined",{"_index":312,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"license.html":{}}}],["defines",{"_index":2813,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["definition",{"_index":3744,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":3727,"title":{},"body":{"license.html":{}}}],["delete",{"_index":913,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"interfaces/Fields.html":{},"controllers/IssuanceController.html":{},"interfaces/Params.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["delete(':id",{"_index":1182,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/PresentationManagementController.html":{}}}],["delete(tenantid",{"_index":1118,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["deleteconfiguration",{"_index":2616,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(@param('id",{"_index":2646,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(id",{"_index":2620,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteissuanceconfiguration",{"_index":1178,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["deleteissuanceconfiguration(id",{"_index":1181,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{}}}],["deleteissuanceconfiguration(tenantid",{"_index":1994,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["deletepresentationconfig",{"_index":2669,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletepresentationconfig(id",{"_index":2681,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletes",{"_index":1120,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["deletion",{"_index":2683,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deliberate",{"_index":3945,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":360,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":3460,"title":{},"body":{"changelog.html":{}}}],["deployment",{"_index":3466,"title":{},"body":{"changelog.html":{}}}],["der",{"_index":3322,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["der.slice(2",{"_index":3389,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["derivative",{"_index":3783,"title":{},"body":{"license.html":{}}}],["derived",{"_index":3785,"title":{},"body":{"license.html":{}}}],["dersignature",{"_index":3323,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["dertojwtsignature",{"_index":3314,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["dertojwtsignature(dersignature",{"_index":3319,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["desc",{"_index":2716,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["describing",{"_index":3918,"title":{},"body":{"license.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"interfaces/CryptoImplementation.html":{},"classes/EC_Public.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"interfaces/TokenPayload.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"license.html":{},"properties.html":{}}}],["designated",{"_index":3818,"title":{},"body":{"license.html":{}}}],["desired",{"_index":963,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["details",{"_index":634,"title":{},"body":{"classes/AuthorizationResponse.html":{},"entities/PresentationConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{}}}],["determining",{"_index":3936,"title":{},"body":{"license.html":{}}}],["dev",{"_index":900,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["developers",{"_index":3708,"title":{},"body":{"index.html":{}}}],["development",{"_index":3648,"title":{},"body":{"index.html":{}}}],["development/testing",{"_index":878,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["df29d1e",{"_index":3509,"title":{},"body":{"changelog.html":{}}}],["different",{"_index":279,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["differnt",{"_index":2415,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["digest",{"_index":1247,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/PresentationsService.html":{}}}],["diplomatic",{"_index":3599,"title":{},"body":{"index.html":{}}}],["direct",{"_index":3747,"title":{},"body":{"license.html":{}}}],["direct_post.jwt",{"_index":2505,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["direction",{"_index":3750,"title":{},"body":{"license.html":{}}}],["disable",{"_index":174,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["disablehttplogger",{"_index":446,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["disablesessionlogger",{"_index":2236,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["disclaimer",{"_index":3921,"title":{},"body":{"license.html":{}}}],["disclosed",{"_index":2753,"title":{},"body":{"interfaces/PresentedData.html":{}}}],["disclosureframe",{"_index":1075,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{}}}],["discoveryendpoint",{"_index":122,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["discussing",{"_index":3813,"title":{},"body":{"license.html":{}}}],["display",{"_index":1154,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{},"license.html":{}}}],["display.json",{"_index":906,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vciService.html":{}}}],["displayinfo",{"_index":898,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["distribute",{"_index":3834,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":3884,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":3726,"title":{},"body":{"license.html":{}}}],["dns",{"_index":237,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["docker",{"_index":3528,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["document",{"_index":2860,"title":{},"body":{"injectables/ResolverService.html":{},"license.html":{}}}],["documentation",{"_index":3691,"title":{},"body":{"index.html":{},"license.html":{}}}],["documents",{"_index":2680,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["don't",{"_index":1005,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["dpop",{"_index":804,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["dpop_jkt",{"_index":697,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["dpop_signing_alg_values_supported",{"_index":774,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["dto",{"_index":620,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["dto/auth",{"_index":2708,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dto/authorization",{"_index":2441,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["dto/authorize",{"_index":670,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["dto/client",{"_index":538,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/credential",{"_index":3443,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["dto/issuance.dto",{"_index":1973,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["dto/issuer",{"_index":2863,"title":{},"body":{"injectables/ResolverService.html":{}}}],["dto/jwks",{"_index":3441,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["dto/notification",{"_index":2297,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{}}}],["dto/oauth",{"_index":3442,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["dto/offer",{"_index":2338,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["dto/par",{"_index":674,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["dto/presentation",{"_index":2480,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dto/status",{"_index":3199,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["dto/token",{"_index":542,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/vp",{"_index":2607,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["dummy",{"_index":1414,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummy.csr",{"_index":1393,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummy_key.pem",{"_index":1391,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummycsr",{"_index":1392,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummykey",{"_index":1390,"title":{},"body":{"injectables/CryptoService.html":{}}}],["duration",{"_index":3031,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["duration}ms",{"_index":3038,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["during",{"_index":1953,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"index.html":{}}}],["dynamicmodule",{"_index":2172,"title":{},"body":{"modules/KeyModule.html":{}}}],["e",{"_index":3675,"title":{},"body":{"index.html":{}}}],["e.g",{"_index":970,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"interfaces/SessionLogContext.html":{}}}],["e3e5971",{"_index":3481,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":1986,"title":{},"body":{"classes/IssuanceDto.html":{},"injectables/VaultKeyService.html":{},"license.html":{}}}],["early",{"_index":3647,"title":{},"body":{"index.html":{}}}],["easier",{"_index":273,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["easily",{"_index":3630,"title":{},"body":{"index.html":{}}}],["easy",{"_index":3653,"title":{},"body":{"index.html":{}}}],["ec",{"_index":1422,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["ec_paramgen_curve:prime256v1",{"_index":1424,"title":{},"body":{"injectables/CryptoService.html":{}}}],["ec_public",{"_index":1375,"title":{"classes/EC_Public.html":{}},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["ecdh",{"_index":1603,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["ecdsa",{"_index":3354,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["echo",{"_index":3670,"title":{},"body":{"index.html":{}}}],["ecosystem",{"_index":3611,"title":{},"body":{"index.html":{}}}],["ed25519",{"_index":1515,"title":{},"body":{"injectables/CryptoService-1.html":{},"injectables/VaultKeyService.html":{}}}],["eddsa",{"_index":2510,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["editorial",{"_index":3786,"title":{},"body":{"license.html":{}}}],["effect",{"_index":954,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["effectively",{"_index":1861,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["eject",{"_index":1790,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["eject(id",{"_index":1796,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["elaborations",{"_index":3789,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":3638,"title":{},"body":{"index.html":{},"license.html":{}}}],["element",{"_index":3244,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["elements",{"_index":1173,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["elliptic",{"_index":1553,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["emits",{"_index":2996,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["emitter",{"_index":65,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["emitter.module",{"_index":413,"title":{},"body":{"modules/AppModule.html":{}}}],["emitter/dist/event",{"_index":412,"title":{},"body":{"modules/AppModule.html":{}}}],["empty",{"_index":290,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["enabled",{"_index":133,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/RegistrarService.html":{}}}],["enabledebugmode",{"_index":2237,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enclosed",{"_index":3988,"title":{},"body":{"license.html":{}}}],["encode",{"_index":3414,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encoded",{"_index":953,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["encodedheader",{"_index":3377,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodedheader}.${encodedpayload",{"_index":3383,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodedheader}.${encodedpayload}.${signature",{"_index":3385,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodedpayload",{"_index":3380,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodeuricomponent",{"_index":1842,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["encodeuricomponent(key)}=${encodeuricomponent(value",{"_index":2553,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["encodeuricomponent(v",{"_index":2903,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["encodeuricomponent(value",{"_index":2915,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["encryption.json",{"_index":1592,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption/encryption.service",{"_index":1325,"title":{},"body":{"modules/CryptoModule.html":{}}}],["encryptionservice",{"_index":1322,"title":{"injectables/EncryptionService.html":{}},"body":{"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"overview.html":{}}}],["end",{"_index":1460,"title":{},"body":{"injectables/CryptoService.html":{},"license.html":{}}}],["endpoint",{"_index":524,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/functions.html":{}}}],["endpoints",{"_index":639,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/HealthController.html":{},"controllers/WellKnownController.html":{}}}],["ensure",{"_index":163,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{}}}],["entities",{"_index":1072,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{},"license.html":{},"overview.html":{}}}],["entities/credential.entity",{"_index":1136,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{}}}],["entities/issuance",{"_index":2003,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["entities/key.entity",{"_index":2181,"title":{},"body":{"modules/KeyModule.html":{}}}],["entities/presentation",{"_index":2630,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["entities/session.entity",{"_index":2963,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["entities/status",{"_index":3197,"title":{},"body":{"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["entity",{"_index":1070,"title":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{}},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{},"license.html":{}}}],["entries",{"_index":3206,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["entries.length",{"_index":3257,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["entry",{"_index":3240,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["enum",{"_index":326,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/PresentationRequest.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":3578,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":3495,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["env.example",{"_index":3669,"title":{},"body":{"index.html":{}}}],["environment",{"_index":2231,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/RegistrarModule.html":{},"injectables/SessionLoggerService.html":{}}}],["err",{"_index":1921,"title":{},"body":{"classes/Interceptors.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{}}}],["err.message",{"_index":2592,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["errinterceptor",{"_index":1920,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["error",{"_index":250,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{}}}],["error('credential",{"_index":845,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["error('error",{"_index":239,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["error('invalid",{"_index":2372,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/VaultKeyService.html":{}}}],["error('issuer",{"_index":2866,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error('key",{"_index":1723,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/ResolverService.html":{}}}],["error('no",{"_index":2734,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["error('signer",{"_index":1483,"title":{},"body":{"injectables/CryptoService.html":{}}}],["error('stack",{"_index":3247,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["error('subject",{"_index":2873,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error(`invalid",{"_index":1758,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["error(`unsupported",{"_index":1518,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["error.message",{"_index":1759,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.name",{"_index":3042,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.stack",{"_index":3045,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error_description",{"_index":835,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["errors",{"_index":3057,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["es",{"_index":1596,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["es256",{"_index":775,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["es256.getverifier(publickey",{"_index":2728,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["es256k",{"_index":2515,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["es384",{"_index":2511,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["eslint",{"_index":173,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["eslint/no",{"_index":178,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["etc",{"_index":1031,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"index.html":{}}}],["eudi",{"_index":899,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"index.html":{},"properties.html":{}}}],["eudiplo",{"_index":351,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"index.html":{}}}],["even",{"_index":3642,"title":{},"body":{"index.html":{},"license.html":{}}}],["event",{"_index":889,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/NotificationRequestDto.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"license.html":{}}}],["eventemitter",{"_index":863,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{}}}],["eventemitter2",{"_index":858,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{}}}],["eventemittermodule",{"_index":411,"title":{},"body":{"modules/AppModule.html":{}}}],["eventemittermodule.forroot",{"_index":496,"title":{},"body":{"modules/AppModule.html":{}}}],["events",{"_index":68,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["example",{"_index":316,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["examples",{"_index":517,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["except",{"_index":3836,"title":{},"body":{"license.html":{}}}],["exchange",{"_index":663,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["exclude",{"_index":1616,"title":{},"body":{"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{}}}],["excluding",{"_index":3815,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":3827,"title":{},"body":{"license.html":{}}}],["execsync",{"_index":1377,"title":{},"body":{"injectables/CryptoService.html":{}}}],["execsync(cmd",{"_index":1411,"title":{},"body":{"injectables/CryptoService.html":{}}}],["executed",{"_index":3908,"title":{},"body":{"license.html":{}}}],["execution",{"_index":2991,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["executioncontext",{"_index":2097,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TokenPayload.html":{}}}],["exercise",{"_index":3940,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":3761,"title":{},"body":{"license.html":{}}}],["exist",{"_index":288,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"index.html":{}}}],["existing",{"_index":201,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"index.html":{}}}],["exists",{"_index":204,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["exists(id",{"_index":1798,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["existssync",{"_index":54,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["existssync(certout",{"_index":1402,"title":{},"body":{"injectables/CryptoService.html":{}}}],["existssync(dummykey",{"_index":1417,"title":{},"body":{"injectables/CryptoService.html":{}}}],["existssync(file",{"_index":1452,"title":{},"body":{"injectables/CryptoService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["existssync(filepath",{"_index":287,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["existssync(folder",{"_index":895,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["existssync(join(folder",{"_index":1454,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["existssync(this.folder",{"_index":1381,"title":{},"body":{"injectables/CryptoService.html":{}}}],["existssync(this.privateenncryptionpath",{"_index":1594,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exp",{"_index":2522,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["expandvariables",{"_index":442,"title":{},"body":{"modules/AppModule.html":{}}}],["expected",{"_index":2278,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["expectedcode",{"_index":808,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["expectednonce",{"_index":2394,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["expextedapikey",{"_index":2768,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["expiration",{"_index":2595,"title":{},"body":{"classes/ParResponseDto.html":{}}}],["expirationdate",{"_index":169,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["expirationdate.gettime",{"_index":181,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["expire",{"_index":2161,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expires_in",{"_index":557,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{},"classes/TokenResponse.html":{}}}],["expiresin",{"_index":588,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["expiresinseconds",{"_index":821,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["explicitly",{"_index":3900,"title":{},"body":{"license.html":{}}}],["explode",{"_index":1830,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["exploded",{"_index":945,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["export",{"_index":79,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["exportable",{"_index":3358,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["exportjwk",{"_index":1588,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["exportjwk(cryptokey",{"_index":3368,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["exportjwk(secret.privatekey",{"_index":1600,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exportjwk(secret.publickey",{"_index":1601,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exportpkcs8",{"_index":1691,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["exportpkcs8((await",{"_index":1716,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["exports",{"_index":365,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["exportspki",{"_index":1692,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["exportspki((await",{"_index":1718,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["expose",{"_index":1931,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["express",{"_index":667,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"dependencies.html":{},"license.html":{}}}],["extends",{"_index":992,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationDuringIssuance.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{}}}],["extends#integrity",{"_index":2611,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["extension",{"_index":1439,"title":{},"body":{"injectables/CryptoService.html":{}}}],["external",{"_index":561,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"index.html":{}}}],["extfile",{"_index":1447,"title":{},"body":{"injectables/CryptoService.html":{}}}],["extra",{"_index":1653,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["extract",{"_index":566,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Fields.html":{},"injectables/JwtStrategy.html":{},"interfaces/Params.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{}}}],["extractable",{"_index":1598,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{}}}],["extractjwt",{"_index":2131,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":2152,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extraprefixes",{"_index":1624,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["extraprefixes.find(([prefix",{"_index":1654,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["extraprefixesmap",{"_index":1619,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":555,"title":{},"body":{"controllers/AuthController.html":{}}}],["f75298f",{"_index":3487,"title":{},"body":{"changelog.html":{}}}],["f7e7505",{"_index":3506,"title":{},"body":{"changelog.html":{}}}],["face",{"_index":3612,"title":{},"body":{"index.html":{}}}],["failed",{"_index":2426,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/SessionLoggerService.html":{}}}],["fails",{"_index":2746,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["failure",{"_index":3960,"title":{},"body":{"license.html":{}}}],["fall",{"_index":578,"title":{},"body":{"controllers/AuthController.html":{}}}],["false",{"_index":137,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{}}}],["fatal",{"_index":429,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["features",{"_index":3490,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["fee",{"_index":3967,"title":{},"body":{"license.html":{}}}],["fetch",{"_index":997,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["field",{"_index":1615,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["field.map",{"_index":1647,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["fields",{"_index":258,"title":{"interfaces/Fields.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Fields.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["fields[index",{"_index":1644,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["fieldsconfig",{"_index":1618,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["fieldsconfig[number",{"_index":1641,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["fifty",{"_index":3754,"title":{},"body":{"license.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"license.html":{}}}],["file.bits",{"_index":3225,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["file.elements[id",{"_index":3252,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["file.jwt",{"_index":3231,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["file.stack.pop",{"_index":3246,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["filed",{"_index":3862,"title":{},"body":{"license.html":{}}}],["filename",{"_index":3200,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"miscellaneous/functions.html":{}}}],["filepath",{"_index":284,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"miscellaneous/functions.html":{}}}],["files",{"_index":3767,"title":{},"body":{"license.html":{}}}],["filesystem",{"_index":2174,"title":{},"body":{"modules/KeyModule.html":{}}}],["filesystemkeyservice",{"_index":1662,"title":{"injectables/FileSystemKeyService.html":{}},"body":{"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{}}}],["fill(0",{"_index":3216,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["final",{"_index":921,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["finally",{"_index":2861,"title":{},"body":{"injectables/ResolverService.html":{}}}],["find",{"_index":886,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["findclientbyid",{"_index":1059,"title":{},"body":{"injectables/ClientService.html":{}}}],["findclientbyid(clientid",{"_index":887,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["finding",{"_index":224,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["findonebyorfail",{"_index":1266,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["findoptionswhere",{"_index":3140,"title":{},"body":{"injectables/SessionService.html":{}}}],["first",{"_index":2859,"title":{},"body":{"injectables/ResolverService.html":{}}}],["firstvaluefrom",{"_index":2477,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["firstvaluefrom(this.httpservice.get(uri)).then",{"_index":2732,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fitness",{"_index":3933,"title":{},"body":{"license.html":{}}}],["fixes",{"_index":3458,"title":{},"body":{"changelog.html":{}}}],["flow",{"_index":472,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["flow_complete",{"_index":3103,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_error",{"_index":3104,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_start",{"_index":3102,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flows",{"_index":3637,"title":{},"body":{"index.html":{}}}],["flowtype",{"_index":2382,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["fn",{"_index":1803,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["focus",{"_index":3632,"title":{},"body":{"index.html":{}}}],["folder",{"_index":420,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["following",{"_index":3867,"title":{},"body":{"license.html":{}}}],["foo",{"_index":2769,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["force_pubkey",{"_index":1443,"title":{},"body":{"injectables/CryptoService.html":{}}}],["foreach((file",{"_index":1451,"title":{},"body":{"injectables/CryptoService.html":{}}}],["form",{"_index":946,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/VaultKeyService.html":{},"license.html":{}}}],["format",{"_index":24,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/EC_Public.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["formdata",{"_index":1028,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["formdatabodyserializer",{"_index":2789,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["forroot",{"_index":2170,"title":{},"body":{"modules/KeyModule.html":{}}}],["forwardref",{"_index":2658,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["found",{"_index":791,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["free",{"_index":3239,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"license.html":{}}}],["friendly",{"_index":3658,"title":{},"body":{"index.html":{}}}],["fs",{"_index":860,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["full",{"_index":3687,"title":{},"body":{"index.html":{}}}],["function",{"_index":141,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/TDataShape.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":3580,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":2945,"title":{},"body":{"entities/Session.html":{}}}],["g",{"_index":1816,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{}}}],["general",{"_index":3504,"title":{},"body":{"changelog.html":{}}}],["generate",{"_index":1418,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/PresentationManagementController.html":{}}}],["generated",{"_index":46,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["generated/client.gen",{"_index":39,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["generatekeypair",{"_index":1302,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/EncryptionService.html":{}}}],["generatekeypair('ecdh",{"_index":1595,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generaterandom",{"_index":1475,"title":{},"body":{"injectables/CryptoService.html":{}}}],["generates",{"_index":1306,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{}}}],["generatesalt",{"_index":1248,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["generatetoken",{"_index":1733,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generatetoken(payload",{"_index":2113,"title":{},"body":{"injectables/JwtService.html":{}}}],["generatetokenoptions",{"_index":1729,"title":{"interfaces/GenerateTokenOptions.html":{}},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generation",{"_index":1735,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"changelog.html":{}}}],["generic",{"_index":1299,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/KeyService.html":{},"injectables/SessionLoggerService.html":{}}}],["genpkey",{"_index":1421,"title":{},"body":{"injectables/CryptoService.html":{}}}],["get(':id",{"_index":2956,"title":{},"body":{"controllers/SessionController.html":{}}}],["get('jwks.json",{"_index":3451,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('oauth",{"_index":3432,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('openid",{"_index":3446,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('request/:requestid/:session",{"_index":2443,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["get('request/:requestid/:session')@sessionlogger('session",{"_index":2434,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["get('schema/:id",{"_index":1210,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get('session",{"_index":2309,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["get('status",{"_index":3178,"title":{},"body":{"controllers/StatusListController.html":{}}}],["get('vct/:id",{"_index":1214,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get()@healthcheck",{"_index":1775,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(state",{"_index":3136,"title":{},"body":{"injectables/SessionService.html":{}}}],["get(tenantid",{"_index":1125,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getaccesscertificateid",{"_index":2822,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["getaccesscertificateid(config",{"_index":215,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["getaccesstoken",{"_index":3582,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getalg",{"_index":1504,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["getall",{"_index":3124,"title":{},"body":{"injectables/SessionService.html":{}}}],["getallsessions",{"_index":2951,"title":{},"body":{"controllers/SessionController.html":{}}}],["getauthorizationserver",{"_index":718,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["getauthorizationserver(tenantid",{"_index":732,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["getauthtoken",{"_index":505,"title":{},"body":{"interfaces/Auth.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getauthtoken(auth",{"_index":1873,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getby",{"_index":788,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["getby(where",{"_index":3139,"title":{},"body":{"injectables/SessionService.html":{}}}],["getbyid",{"_index":1113,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getbyid(tenantid",{"_index":1128,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getcallbackcontext",{"_index":1328,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getcallbackcontext(tenantid",{"_index":1338,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getcertchain",{"_index":1329,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getcertchain(type",{"_index":1340,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getclients",{"_index":874,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["getconfig",{"_index":914,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/StatusListService.html":{}}}],["getconfig(tenantid",{"_index":3234,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["getconfigs",{"_index":1179,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(@token",{"_index":1200,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(user",{"_index":1184,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfiguration",{"_index":2207,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getcredential",{"_index":1224,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{}}}],["getcredential(credentialconfigurationid",{"_index":1233,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredential(req",{"_index":2321,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["getcredentialconfiguration",{"_index":1225,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredentialconfiguration(tenantid",{"_index":1237,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcrypto",{"_index":1505,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["getcrypto(alg",{"_index":1512,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["getencryptionpublickey",{"_index":1575,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getexternaloidcconfig",{"_index":2119,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getexternaloidcconfig(configservice",{"_index":2122,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getheadersfromrequest",{"_index":752,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"miscellaneous/functions.html":{}}}],["getheadersfromrequest(req",{"_index":798,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"miscellaneous/functions.html":{}}}],["gethello",{"_index":347,"title":{},"body":{"controllers/AppController.html":{}}}],["getintegratedoauth2config",{"_index":2120,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getintegratedoauth2config(configservice",{"_index":2126,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getinterceptorindex",{"_index":1791,"title":{},"body":{"classes/Interceptors.html":{}}}],["getinterceptorindex(id",{"_index":1800,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getissuanceconfiguration",{"_index":1988,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfiguration(tenantid",{"_index":1996,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid",{"_index":1989,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid(body.issuanceid",{"_index":2357,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["getissuanceconfigurationbyid(issuanceconfigid",{"_index":1998,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurations",{"_index":1964,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(@token",{"_index":1974,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(user",{"_index":1967,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getjwk",{"_index":3315,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["getjwk(key",{"_index":3324,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["getjwks",{"_index":1330,"title":{},"body":{"injectables/CryptoService.html":{},"controllers/WellKnownController.html":{}}}],["getjwks(tenantid",{"_index":1345,"title":{},"body":{"injectables/CryptoService.html":{},"controllers/WellKnownController.html":{}}}],["getkeys",{"_index":1667,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["getkeys(tenantid",{"_index":1671,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["getkid",{"_index":1668,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getkid(tenantid",{"_index":1674,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getlist",{"_index":3176,"title":{},"body":{"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["getlist(@param('tenantid",{"_index":3185,"title":{},"body":{"controllers/StatusListController.html":{}}}],["getlist(tenantid",{"_index":3177,"title":{},"body":{"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["getlogformat",{"_index":2208,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getloglevel",{"_index":2209,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getoauth2token",{"_index":513,"title":{},"body":{"controllers/AuthController.html":{}}}],["getoauth2token(body",{"_index":514,"title":{},"body":{"controllers/AuthController.html":{}}}],["getoffer",{"_index":2020,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getoffer(res",{"_index":2021,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getorthrow('public_url",{"_index":233,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["getparseas",{"_index":1857,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getpresentationconfig",{"_index":2670,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfig(id",{"_index":2685,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs",{"_index":2671,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs(tenantid",{"_index":2687,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpublickey",{"_index":1669,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getpublickey(type",{"_index":1676,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getrequestwithsession",{"_index":2431,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getrequestwithsession(tenantid",{"_index":2433,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getresponse",{"_index":2432,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["getresponse(body",{"_index":2436,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["gets",{"_index":3329,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["getschema",{"_index":1226,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getschema(credentialconfigurationid",{"_index":1239,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getsession",{"_index":2952,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(@param('id",{"_index":2970,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(id",{"_index":2955,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsigner",{"_index":1303,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getsigner(privatekeyjwk",{"_index":1308,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getsignjwtcallback",{"_index":1331,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getsignjwtcallback(tenantid",{"_index":1347,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getting",{"_index":1168,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["geturl",{"_index":1883,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getvct",{"_index":1227,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getvct(credentialid",{"_index":1241,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getverifier",{"_index":1304,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getverifier(publickeyjwk",{"_index":1313,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["ghcr.io/cre8/eudiplo:latest",{"_index":3681,"title":{},"body":{"index.html":{}}}],["git",{"_index":3665,"title":{},"body":{"index.html":{}}}],["give",{"_index":3868,"title":{},"body":{"license.html":{}}}],["given",{"_index":1121,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/VaultKeyService.html":{}}}],["global",{"_index":2173,"title":{},"body":{"modules/KeyModule.html":{}}}],["globalthis.fetch",{"_index":1002,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["globalthis.headers",{"_index":1344,"title":{},"body":{"injectables/CryptoService.html":{},"miscellaneous/functions.html":{}}}],["goodwill",{"_index":3957,"title":{},"body":{"license.html":{}}}],["governing",{"_index":4004,"title":{},"body":{"license.html":{}}}],["grade",{"_index":3645,"title":{},"body":{"index.html":{}}}],["grant",{"_index":564,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"license.html":{}}}],["grant_type",{"_index":549,"title":{},"body":{"controllers/AuthController.html":{}}}],["granted",{"_index":3763,"title":{},"body":{"license.html":{}}}],["granting",{"_index":3736,"title":{},"body":{"license.html":{}}}],["grants",{"_index":2363,"title":{},"body":{"injectables/Oid4vciService.html":{},"license.html":{}}}],["granttype",{"_index":758,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["graph",{"_index":4009,"title":{},"body":{"modules.html":{}}}],["grossly",{"_index":3946,"title":{},"body":{"license.html":{}}}],["guide",{"_index":3690,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":3714,"title":{},"body":{"index.html":{}}}],["h",{"_index":3684,"title":{},"body":{"index.html":{}}}],["handle",{"_index":651,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["handled",{"_index":1756,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{}}}],["handlenotification",{"_index":2315,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["handlenotification(req",{"_index":2323,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["handler",{"_index":2993,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["handlerequest",{"_index":2781,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"miscellaneous/functions.html":{}}}],["handlerequest(request",{"_index":2758,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"miscellaneous/functions.html":{}}}],["handles",{"_index":640,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["handlesigningkeyerror",{"_index":2147,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["handling",{"_index":101,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"changelog.html":{}}}],["harmless",{"_index":3981,"title":{},"body":{"license.html":{}}}],["hascerts",{"_index":1332,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hascerts(tenantid",{"_index":1350,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hash",{"_index":1471,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hashalg",{"_index":1275,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["hashalgorithm",{"_index":1368,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hashalgorithm.sha256",{"_index":1491,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hashcallback",{"_index":1488,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hasher",{"_index":1274,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["hasresponsedata",{"_index":2590,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["haswebhook",{"_index":2560,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["head",{"_index":915,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["header",{"_index":314,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["header('content",{"_index":3184,"title":{},"body":{"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["header.entries",{"_index":1908,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["header.kid",{"_index":2886,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c",{"_index":2867,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c.map",{"_index":2869,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header['jwk",{"_index":2876,"title":{},"body":{"injectables/ResolverService.html":{}}}],["headername",{"_index":308,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["headers",{"_index":480,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{}}}],["headers.append(key",{"_index":1501,"title":{},"body":{"injectables/CryptoService.html":{}}}],["headers.authorization",{"_index":568,"title":{},"body":{"controllers/AuthController.html":{}}}],["headers.set(key",{"_index":1502,"title":{},"body":{"injectables/CryptoService.html":{}}}],["headers[session.webhook.auth.config.headername",{"_index":2572,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["headers_",{"_index":1621,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["health",{"_index":1769,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":1785,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":408,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1777,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1772,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1767,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["healthmodule",{"_index":371,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["helper",{"_index":1406,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hereby",{"_index":3823,"title":{},"body":{"license.html":{}}}],["herein",{"_index":3904,"title":{},"body":{"license.html":{}}}],["hey",{"_index":1012,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["hh:mm:ss",{"_index":462,"title":{},"body":{"modules/AppModule.html":{}}}],["hold",{"_index":3980,"title":{},"body":{"license.html":{}}}],["host",{"_index":231,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["host.replace('https",{"_index":2501,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${tenantid",{"_index":2486,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${tenantid}/credentials",{"_index":1292,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["host}/${tenantid}/oid4vp/response",{"_index":2503,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["hot",{"_index":2229,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["hour",{"_index":3119,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["hours",{"_index":592,"title":{},"body":{"controllers/AuthController.html":{},"modules/SessionModule.html":{}}}],["hs256",{"_index":1743,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["http",{"_index":503,"title":{},"body":{"interfaces/Auth.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{},"index.html":{}}}],["http://localhost:3000/auth/oauth2/token",{"_index":3683,"title":{},"body":{"index.html":{}}}],["http://www.apache.org/licenses",{"_index":3722,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/license",{"_index":4002,"title":{},"body":{"license.html":{}}}],["httpmethod",{"_index":748,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["httpmodule",{"_index":2177,"title":{},"body":{"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"modules/VerifierModule.html":{}}}],["https://${req.host}${req.url",{"_index":2375,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["https://cre8.github.io/eudiplo/latest",{"_index":356,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["https://cre8.github.io/eudiplo/latest/api",{"_index":3686,"title":{},"body":{"index.html":{}}}],["https://cre8.github.io/eudiplo/main",{"_index":3698,"title":{},"body":{"index.html":{}}}],["https://developer.mozilla.org/docs/web/api/fetch#body",{"_index":1034,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["https://developer.mozilla.org/docs/web/api/fetch#method",{"_index":943,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["https://developer.mozilla.org/docs/web/api/headers/headers#init",{"_index":939,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["https://github.com/cre8/eudiplo.git",{"_index":3666,"title":{},"body":{"index.html":{},"properties.html":{}}}],["https://github.com/cre8/eudiplo/issues",{"_index":4018,"title":{},"body":{"properties.html":{}}}],["https://json",{"_index":2887,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["https://swagger.io/docs/specification/serialization/#query",{"_index":958,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["https://www.npmjs.com/package/@hey",{"_index":1010,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["httpservice",{"_index":2178,"title":{},"body":{"modules/KeyModule.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["i.e",{"_index":1914,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["iat",{"_index":1282,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["id",{"_index":15,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/VaultKeyService.html":{}}}],["identification",{"_index":3996,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":26,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"entities/IssuanceConfig.html":{},"interfaces/IssuerMetadata.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{}}}],["identifying",{"_index":3991,"title":{},"body":{"license.html":{}}}],["idx",{"_index":3245,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["ignore",{"_index":463,"title":{},"body":{"modules/AppModule.html":{}}}],["ignoreexpiration",{"_index":2159,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ignoring",{"_index":864,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["ii",{"_index":3752,"title":{},"body":{"license.html":{}}}],["iii",{"_index":3758,"title":{},"body":{"license.html":{}}}],["image",{"_index":1868,"title":{},"body":{"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png",{"_index":2041,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png')@apibody({type",{"_index":2027,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["image/png')@useguards(jwtauthguard)@apisecurity('oauth2')@apibody({type",{"_index":2623,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["imeplement",{"_index":1300,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implement",{"_index":866,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["implementation",{"_index":998,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["implementation.ts",{"_index":1298,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:19",{"_index":1305,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:24",{"_index":1310,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:29",{"_index":1314,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implements",{"_index":81,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/FileSystemKeyService.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["implied",{"_index":3929,"title":{},"body":{"license.html":{}}}],["import",{"_index":29,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"license.html":{}}}],["importconfig",{"_index":3593,"title":{},"body":{"miscellaneous/functions.html":{}}}],["importdirectory",{"_index":3586,"title":{},"body":{"miscellaneous/functions.html":{}}}],["importdirectory(config",{"_index":3592,"title":{},"body":{"miscellaneous/functions.html":{}}}],["importfilewithretry",{"_index":3587,"title":{},"body":{"miscellaneous/functions.html":{}}}],["importfilewithretry(filepath",{"_index":3594,"title":{},"body":{"miscellaneous/functions.html":{}}}],["importjwk",{"_index":1371,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/PresentationsService.html":{}}}],["importjwk(payload.cnf.jwk",{"_index":2735,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["importjwk(privatekey",{"_index":1717,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["importjwk(publicjwk",{"_index":1465,"title":{},"body":{"injectables/CryptoService.html":{}}}],["importjwk(publickey",{"_index":1719,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["importpkcs8",{"_index":1693,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["imports",{"_index":382,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}}}],["importspki",{"_index":1694,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["importspki(key",{"_index":3366,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["improvements",{"_index":3505,"title":{},"body":{"changelog.html":{}}}],["improving",{"_index":3814,"title":{},"body":{"license.html":{}}}],["inability",{"_index":3955,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":3952,"title":{},"body":{"license.html":{}}}],["include",{"_index":3792,"title":{},"body":{"license.html":{}}}],["included",{"_index":3779,"title":{},"body":{"license.html":{}}}],["includes",{"_index":2465,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{},"license.html":{}}}],["including",{"_index":73,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["inclusion",{"_index":3802,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":3821,"title":{},"body":{"license.html":{}}}],["incurred",{"_index":3982,"title":{},"body":{"license.html":{}}}],["indemnify",{"_index":3978,"title":{},"body":{"license.html":{}}}],["indemnity",{"_index":3969,"title":{},"body":{"license.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["indexable",{"_index":2976,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["indexes",{"_index":3207,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["indicated",{"_index":3777,"title":{},"body":{"license.html":{}}}],["indicates",{"_index":28,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{}}}],["indicating",{"_index":2649,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["indirect",{"_index":3748,"title":{},"body":{"license.html":{}}}],["individual",{"_index":3760,"title":{},"body":{"license.html":{}}}],["infer",{"_index":1018,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["infers",{"_index":1856,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["information",{"_index":355,"title":{},"body":{"controllers/AppController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/IssuerManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["informational",{"_index":3891,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":3845,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":3859,"title":{},"body":{"license.html":{}}}],["inherit",{"_index":1413,"title":{},"body":{"injectables/CryptoService.html":{}}}],["inherited",{"_index":3326,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["init",{"_index":1576,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["init(tenant",{"_index":1680,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["init(tenantid",{"_index":1581,"title":{},"body":{"injectables/EncryptionService.html":{},"classes/KeyService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["initial",{"_index":1048,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["initialconfig",{"_index":291,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["initialization",{"_index":1045,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{}}}],["initialize",{"_index":1049,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"interfaces/RequestOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"miscellaneous/functions.html":{}}}],["initialized",{"_index":150,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["initializes",{"_index":103,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/CredentialsController.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["inject",{"_index":444,"title":{},"body":{"modules/AppModule.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["inject('keyservice",{"_index":1362,"title":{},"body":{"injectables/CryptoService.html":{}}}],["injectable",{"_index":30,"title":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["injectables",{"_index":715,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"overview.html":{}}}],["injectrepository",{"_index":1134,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["injectrepository(credentialconfig",{"_index":1137,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{}}}],["injectrepository(issuanceconfig",{"_index":2005,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["injectrepository(presentationconfig",{"_index":2709,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["injectrepository(session",{"_index":3155,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectrepository(statusmapping",{"_index":3202,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["input",{"_index":3372,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["install",{"_index":1009,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"changelog.html":{}}}],["instance",{"_index":95,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{}}}],["instance.decode(`${data}.${signature",{"_index":2724,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["instanceof",{"_index":1907,"title":{},"body":{"classes/Interceptors.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["instead",{"_index":1013,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"changelog.html":{}}}],["institute",{"_index":3849,"title":{},"body":{"license.html":{}}}],["institutions",{"_index":3709,"title":{},"body":{"index.html":{}}}],["insufficient_authorization",{"_index":834,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["int",{"_index":3287,"title":{},"body":{"entities/StatusMapping.html":{}}}],["integrated",{"_index":1732,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["integrates",{"_index":3629,"title":{},"body":{"index.html":{}}}],["integration",{"_index":861,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"index.html":{}}}],["intended",{"_index":1562,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["intentionally",{"_index":3800,"title":{},"body":{"license.html":{}}}],["interact",{"_index":4016,"title":{},"body":{"properties.html":{}}}],["interacting",{"_index":83,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["interaction",{"_index":72,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["intercept",{"_index":2983,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercept(context",{"_index":2987,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interceptor",{"_index":1794,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["interceptors",{"_index":1043,"title":{"classes/Interceptors.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["intercepts",{"_index":2990,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interested",{"_index":3711,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/Fields.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/StatusListFile.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/Fields.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"interfaces/IssuerMetadata.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/Fields.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/StatusListFile.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"license.html":{},"overview.html":{}}}],["internally",{"_index":1933,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["internals",{"_index":1932,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["interval",{"_index":3159,"title":{},"body":{"injectables/SessionService.html":{}}}],["intervaltime",{"_index":3157,"title":{},"body":{"injectables/SessionService.html":{}}}],["invalid",{"_index":522,"title":{},"body":{"controllers/AuthController.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{}}}],["irrevocable",{"_index":3830,"title":{},"body":{"license.html":{}}}],["is_public_key",{"_index":2102,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["isabsolute",{"_index":397,"title":{},"body":{"modules/AppModule.html":{}}}],["isabsolute(folder",{"_index":493,"title":{},"body":{"modules/AppModule.html":{}}}],["isarray",{"_index":1985,"title":{},"body":{"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["isarray()@isoptional",{"_index":2275,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["isdebugmodeenabled",{"_index":2210,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isenabled",{"_index":139,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["isenum",{"_index":2260,"title":{},"body":{"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["isenum(['credential_accepted",{"_index":2258,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["isenum(responsetype",{"_index":2283,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["isglobal",{"_index":441,"title":{},"body":{"modules/AppModule.html":{}}}],["ishttploggerenabled",{"_index":2211,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isin",{"_index":319,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isin(['apikey",{"_index":333,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isin([0",{"_index":3298,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnumber",{"_index":3297,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnumber()@isin(['0",{"_index":3295,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["iso",{"_index":972,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["isobject",{"_index":320,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isobject()@column('json",{"_index":2603,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["isobject()@isoptional",{"_index":1983,"title":{},"body":{"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/PresentationRequest.html":{}}}],["isobject()@isoptional()@column('json",{"_index":1951,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["isoptional",{"_index":321,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthorizeQueries.html":{},"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isoptional()@isstring",{"_index":703,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["ispublic",{"_index":2104,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["iss",{"_index":1281,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["issessionloggerenabled",{"_index":2212,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isstring",{"_index":311,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/IssuanceDto.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isstring()@isoptional",{"_index":3292,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isstring({each",{"_index":1980,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["issuance",{"_index":838,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/SessionLoggerService.html":{}}}],["issuance.service",{"_index":1972,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["issuance/entities/issuance",{"_index":1107,"title":{},"body":{"entities/CredentialConfig.html":{},"modules/IssuerModule.html":{}}}],["issuance/issuance.controller",{"_index":2085,"title":{},"body":{"modules/IssuerModule.html":{}}}],["issuance/issuance.service",{"_index":756,"title":{},"body":{"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["issuanceconfig",{"_index":1076,"title":{"entities/IssuanceConfig.html":{}},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{}}}],["issuanceconfig.credentialconfigs",{"_index":1090,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["issuanceconfig.credentialconfigs.map((config",{"_index":2360,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuanceconfigid",{"_index":2000,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuanceconfigrepo",{"_index":1993,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuancecontroller",{"_index":1961,"title":{"controllers/IssuanceController.html":{}},"body":{"controllers/IssuanceController.html":{},"modules/IssuerModule.html":{}}}],["issuancedto",{"_index":1970,"title":{"classes/IssuanceDto.html":{}},"body":{"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{}}}],["issuanceid",{"_index":847,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/Session.html":{}}}],["issuanceservice",{"_index":726,"title":{"injectables/IssuanceService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"overview.html":{}}}],["issuance—and",{"_index":3643,"title":{},"body":{"index.html":{}}}],["issue",{"_index":2291,"title":{},"body":{"controllers/Oid4vciController.html":{},"license.html":{}}}],["issued",{"_index":1169,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["issuer",{"_index":766,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"index.html":{}}}],["issuer.png",{"_index":905,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["issuer/authorize/authorize.service",{"_index":3440,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["issuer/authorize/dto/authorize",{"_index":2946,"title":{},"body":{"entities/Session.html":{}}}],["issuer/issuer.module",{"_index":390,"title":{},"body":{"modules/AppModule.html":{}}}],["issuer/oid4vci/dto/offer",{"_index":2479,"title":{},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{}}}],["issuer/oid4vci/oid4vci.service",{"_index":2033,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/WellKnownController.html":{}}}],["issuer/status",{"_index":2964,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["issuer_cert.pem",{"_index":1397,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuer_cert.srl",{"_index":1450,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuer_key.pem",{"_index":1395,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuer_state",{"_index":698,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["issuer_validation_schema",{"_index":389,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{}}}],["issuercert",{"_index":1396,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuerkey",{"_index":1394,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuermanagementcontroller",{"_index":2016,"title":{"controllers/IssuerManagementController.html":{}},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{}}}],["issuermetadata",{"_index":2062,"title":{"interfaces/IssuerMetadata.html":{}},"body":{"interfaces/IssuerMetadata.html":{},"injectables/Oid4vciService.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{}}}],["issuermetadata(@param('tenantid",{"_index":3447,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["issuermetadata(tenantid",{"_index":2326,"title":{},"body":{"injectables/Oid4vciService.html":{},"controllers/WellKnownController.html":{}}}],["issuermetadata.authorizationservers",{"_index":2374,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermetadata.credentialissuer.credential_issuer",{"_index":2376,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermetadataresult",{"_index":2335,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermodule",{"_index":372,"title":{"modules/IssuerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules.html":{},"overview.html":{}}}],["issuing",{"_index":3107,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["isusingexternaloidc",{"_index":1765,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["it's",{"_index":968,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/Oid4vpService.html":{}}}],["item.name",{"_index":209,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["iterator",{"_index":1906,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["january",{"_index":3720,"title":{},"body":{"license.html":{}}}],["job",{"_index":3147,"title":{},"body":{"injectables/SessionService.html":{}}}],["jobs",{"_index":3536,"title":{},"body":{"changelog.html":{}}}],["joi",{"_index":384,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/RegistrarModule.html":{},"modules/SessionModule.html":{},"dependencies.html":{}}}],["joi.boolean().default(false",{"_index":434,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.exist",{"_index":2818,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["joi.number().default(24",{"_index":3121,"title":{},"body":{"modules/SessionModule.html":{}}}],["joi.number().default(60",{"_index":3118,"title":{},"body":{"modules/SessionModule.html":{}}}],["joi.number().when('db_type",{"_index":1532,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["joi.object",{"_index":419,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.optional",{"_index":1529,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["joi.required",{"_index":1530,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/RegistrarModule.html":{}}}],["joi.string",{"_index":425,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/RegistrarModule.html":{}}}],["joi.string().default('./tmp",{"_index":421,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('24h",{"_index":614,"title":{},"body":{"modules/AuthModule.html":{}}}],["joi.string().default('eudiplo",{"_index":423,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('key",{"_index":2191,"title":{},"body":{"modules/KeyModule.html":{}}}],["joi.string().optional",{"_index":605,"title":{},"body":{"modules/AuthModule.html":{}}}],["joi.string().optional().default('eudiplo",{"_index":612,"title":{},"body":{"modules/AuthModule.html":{}}}],["joi.string().required",{"_index":608,"title":{},"body":{"modules/AuthModule.html":{}}}],["joi.string().uri().when('km_type",{"_index":2187,"title":{},"body":{"modules/KeyModule.html":{}}}],["joi.string().valid('file",{"_index":2183,"title":{},"body":{"modules/KeyModule.html":{}}}],["joi.string().valid('sqlite",{"_index":1524,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["joi.string().when('db_type",{"_index":1527,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["joi.string().when('km_type",{"_index":2189,"title":{},"body":{"modules/KeyModule.html":{}}}],["joi.string().when('registrar_url",{"_index":2817,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["joi.when('oidc",{"_index":607,"title":{},"body":{"modules/AuthModule.html":{}}}],["join",{"_index":61,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["join(__dirname",{"_index":495,"title":{},"body":{"modules/AppModule.html":{}}}],["join(folder",{"_index":494,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{}}}],["join(separator",{"_index":2909,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["join(separatorarraynoexplode(style",{"_index":2904,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["join(this.configservice.getorthrow('folder",{"_index":1380,"title":{},"body":{"injectables/CryptoService.html":{}}}],["join(this.folder",{"_index":1383,"title":{},"body":{"injectables/CryptoService.html":{}}}],["joinedvalues",{"_index":2901,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["joining",{"_index":3610,"title":{},"body":{"index.html":{}}}],["jointable",{"_index":1101,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["jose",{"_index":1373,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{}}}],["joseheaderparameters",{"_index":2202,"title":{},"body":{"classes/KeyService.html":{}}}],["josepublickey",{"_index":1484,"title":{},"body":{"injectables/CryptoService.html":{}}}],["json",{"_index":440,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/EC_Public.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"interfaces/RequestOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"controllers/WellKnownController.html":{},"index.html":{}}}],["json.parse",{"_index":295,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["json.parse(readfilesync(file",{"_index":3235,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["json.parse(readfilesync(this.privateenncryptionpath",{"_index":1602,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["json.stringify",{"_index":934,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["json.stringify(await",{"_index":1599,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["json.stringify(body",{"_index":2793,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["json.stringify(config",{"_index":301,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["json.stringify(content",{"_index":3238,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["json.stringify(credentialissuer).replace",{"_index":2351,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["json.stringify(data",{"_index":3035,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["json.stringify(displayinfo",{"_index":907,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["json.stringify(initialconfig",{"_index":293,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["json.stringify(value",{"_index":1919,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["json.stringify(values.dcql_query).replace",{"_index":2489,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["json.stringify(values.registrationcert).replace",{"_index":2492,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jsonbodyserializer",{"_index":1808,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["jsonwebkey",{"_index":1309,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"entities/KeyEntity.html":{}}}],["jwk",{"_index":749,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["jwk.kid",{"_index":3369,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["jwk_ec_public",{"_index":1556,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["jwks",{"_index":1567,"title":{},"body":{"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["jwks_uri",{"_index":771,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["jwksrequestsperminute",{"_index":2143,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwksresponsedto",{"_index":1568,"title":{"classes/JwksResponseDto.html":{}},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"controllers/WellKnownController.html":{}}}],["jwksuri",{"_index":2144,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwkthumbprint",{"_index":1490,"title":{},"body":{"injectables/CryptoService.html":{}}}],["jwt",{"_index":812,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.service",{"_index":534,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["jwt.setaudience(options.audience",{"_index":1750,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.sign(secretkey",{"_index":1751,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.strategy",{"_index":602,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt/crypto",{"_index":1250,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService-1.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["jwt/jwt",{"_index":3195,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["jwt/sd",{"_index":1253,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["jwt/types",{"_index":1698,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{}}}],["jwt_alg_values",{"_index":2514,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jwt_expires_in",{"_index":613,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_issuer",{"_index":611,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwt_secret",{"_index":610,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_secret=$(openssl",{"_index":3671,"title":{},"body":{"index.html":{}}}],["jwt_secret=your",{"_index":3677,"title":{},"body":{"index.html":{}}}],["jwtauthguard",{"_index":597,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"overview.html":{}}}],["jwtdecrypt",{"_index":1589,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtdecrypt(response",{"_index":1608,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtfromrequest",{"_index":2125,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtheaderparameters",{"_index":1687,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["jwtpayload",{"_index":1686,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["jwtservice",{"_index":533,"title":{"injectables/JwtService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"overview.html":{}}}],["jwtstrategy",{"_index":598,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"overview.html":{}}}],["jwtstrategy.getexternaloidcconfig(configservice",{"_index":2138,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy.getintegratedoauth2config(configservice",{"_index":2139,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtverify",{"_index":1372,"title":{},"body":{"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/PresentationsService.html":{}}}],["jwtverify(`${data}.${signature",{"_index":2736,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["jwtverify(compact",{"_index":1466,"title":{},"body":{"injectables/CryptoService.html":{}}}],["jwtverify(token",{"_index":1757,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwtwithstatuslistpayload",{"_index":3192,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["kb",{"_index":2513,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["kbverifier",{"_index":2666,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["key",{"_index":22,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/AuthResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"index.html":{}}}],["key).then",{"_index":2737,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["key.kid",{"_index":2885,"title":{},"body":{"injectables/ResolverService.html":{}}}],["key.pem",{"_index":1389,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["key.service",{"_index":1697,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{}}}],["key.service.ts",{"_index":1664,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["key.service.ts:101",{"_index":3331,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:102",{"_index":3332,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:118",{"_index":1675,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:121",{"_index":3325,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:131",{"_index":1677,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:132",{"_index":1678,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:133",{"_index":1679,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:137",{"_index":3335,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:15",{"_index":3342,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:150",{"_index":1688,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:17",{"_index":3341,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:185",{"_index":3320,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:19",{"_index":3316,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:29",{"_index":1689,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:31",{"_index":1690,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:32",{"_index":1670,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:41",{"_index":1682,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:42",{"_index":1681,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:51",{"_index":1684,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:60",{"_index":1672,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:68",{"_index":3318,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.slice(prefix.length",{"_index":1656,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["key.startswith(prefix",{"_index":1655,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["key/key.service",{"_index":1374,"title":{},"body":{"injectables/CryptoService.html":{}}}],["key_validation_schema",{"_index":398,"title":{},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{}}}],["keybinding",{"_index":2703,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keybindingnonce",{"_index":2692,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keybindings",{"_index":2702,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keycloak",{"_index":2151,"title":{},"body":{"injectables/JwtStrategy.html":{},"changelog.html":{}}}],["keycloak_client_id",{"_index":609,"title":{},"body":{"modules/AuthModule.html":{}}}],["keycloak_internal_issuer_url",{"_index":606,"title":{},"body":{"modules/AuthModule.html":{}}}],["keyentity",{"_index":2165,"title":{"entities/KeyEntity.html":{}},"body":{"entities/KeyEntity.html":{},"modules/KeyModule.html":{}}}],["keylike",{"_index":3330,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keymap",{"_index":1626,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["keymodule",{"_index":373,"title":{"modules/KeyModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{},"modules.html":{},"overview.html":{}}}],["keymodule.forroot",{"_index":488,"title":{},"body":{"modules/AppModule.html":{}}}],["keypair",{"_index":1307,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/VaultKeyService.html":{}}}],["keys",{"_index":1384,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["keys.privatekey",{"_index":1708,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["keys.publickey",{"_index":1709,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["keys.publickey.kid",{"_index":1722,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["keyservice",{"_index":1327,"title":{"classes/KeyService.html":{}},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["keyservice:100",{"_index":3328,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:156",{"_index":3338,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:45",{"_index":3333,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:57",{"_index":3337,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:90",{"_index":3327,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["kind",{"_index":3928,"title":{},"body":{"license.html":{}}}],["km_type",{"_index":2182,"title":{},"body":{"modules/KeyModule.html":{}}}],["kmtype",{"_index":2193,"title":{},"body":{"modules/KeyModule.html":{}}}],["know",{"_index":251,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["known",{"_index":3431,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller",{"_index":388,"title":{},"body":{"modules/AppModule.html":{}}}],["known.controller.ts",{"_index":3429,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:26",{"_index":3439,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:36",{"_index":3433,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:50",{"_index":3436,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known/dto/credential",{"_index":1144,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["known/dto/jwks",{"_index":1376,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["known/dto/oauth",{"_index":2262,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["known/jwks.json",{"_index":773,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["known/jwt",{"_index":2879,"title":{},"body":{"injectables/ResolverService.html":{}}}],["known/openid",{"_index":124,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["known/well",{"_index":387,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{}}}],["kty",{"_index":1558,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["label",{"_index":1821,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["language",{"_index":4003,"title":{},"body":{"license.html":{}}}],["last",{"_index":3243,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["later",{"_index":870,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{}}}],["latest",{"_index":3693,"title":{},"body":{"index.html":{}}}],["law",{"_index":3924,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":3855,"title":{},"body":{"license.html":{}}}],["layer",{"_index":3600,"title":{},"body":{"index.html":{}}}],["legal",{"_index":3737,"title":{},"body":{"license.html":{}}}],["legend",{"_index":361,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["length",{"_index":3036,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{}}}],["lessthan",{"_index":3152,"title":{},"body":{"injectables/SessionService.html":{}}}],["lessthan(new",{"_index":3170,"title":{},"body":{"injectables/SessionService.html":{}}}],["level",{"_index":449,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["levels",{"_index":2244,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["levels[level.tolowercase",{"_index":2247,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["liability",{"_index":3941,"title":{},"body":{"license.html":{}}}],["liable",{"_index":3949,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":3617,"title":{},"body":{"index.html":{}}}],["licensable",{"_index":3843,"title":{},"body":{"license.html":{}}}],["license",{"_index":3715,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":3716,"title":{},"body":{"index.html":{},"license.html":{}}}],["licenses",{"_index":3860,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":3732,"title":{},"body":{"license.html":{}}}],["lightweight",{"_index":3625,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":3930,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":4005,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3765,"title":{},"body":{"license.html":{}}}],["line",{"_index":176,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["link",{"_index":933,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["list",{"_index":1159,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/PresentationsService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"dependencies.html":{},"index.html":{}}}],["list')@header('content",{"_index":3179,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.controller",{"_index":3265,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.controller.ts",{"_index":3174,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.controller.ts:16",{"_index":3181,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.json",{"_index":3201,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["list.module",{"_index":2078,"title":{},"body":{"modules/IssuerModule.html":{},"modules/SessionModule.html":{}}}],["list.module.ts",{"_index":3264,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.service",{"_index":1256,"title":{},"body":{"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{}}}],["list.service.ts",{"_index":3188,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["list.service.ts:112",{"_index":3276,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:116",{"_index":3275,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:125",{"_index":3281,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:138",{"_index":3273,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:178",{"_index":3280,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:189",{"_index":3282,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:31",{"_index":3271,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:39",{"_index":3278,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:42",{"_index":3279,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:52",{"_index":3277,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:79",{"_index":3274,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list/dto/status",{"_index":2965,"title":{},"body":{"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{}}}],["list/entities/status",{"_index":3283,"title":{},"body":{"entities/StatusMapping.html":{}}}],["list/status",{"_index":1255,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["listen",{"_index":891,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["lists",{"_index":3810,"title":{},"body":{"license.html":{}}}],["literal",{"_index":625,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/OfferRequestDto.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/VaultKeyService.html":{}}}],["litigation",{"_index":3850,"title":{},"body":{"license.html":{}}}],["live",{"_index":2764,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["load",{"_index":282,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["loadclients",{"_index":877,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["loadconfig",{"_index":2823,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["loadconfig(tenantid",{"_index":283,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["loadconfiguration",{"_index":2213,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loadtypemetadataformat",{"_index":1279,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["locale",{"_index":901,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["locality",{"_index":2754,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["lock",{"_index":3623,"title":{},"body":{"index.html":{}}}],["log",{"_index":2246,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["log_debug_mode",{"_index":436,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_disable_http_logger",{"_index":433,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_disable_session_logger",{"_index":435,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["log_format",{"_index":437,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_level",{"_index":424,"title":{},"body":{"modules/AppModule.html":{}}}],["logauthorizationrequest",{"_index":3059,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logauthorizationrequest(context",{"_index":3072,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcontext",{"_index":2381,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logcredentialissuance",{"_index":3060,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialissuance(context",{"_index":3075,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification",{"_index":3061,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification(context",{"_index":3078,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete",{"_index":3062,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete(context",{"_index":3080,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror",{"_index":3063,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror(context",{"_index":3083,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart",{"_index":3064,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart(context",{"_index":3085,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logformat",{"_index":2238,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["logged",{"_index":2979,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["logger",{"_index":2206,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"changelog.html":{}}}],["logger.decorator",{"_index":2299,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor",{"_index":2084,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["logger.interceptor.ts",{"_index":2981,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:141",{"_index":2998,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:19",{"_index":2986,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:44",{"_index":2989,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.service",{"_index":2083,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["logger.service.ts",{"_index":3056,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:102",{"_index":3077,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:12",{"_index":3071,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:124",{"_index":3079,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:146",{"_index":3074,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:163",{"_index":3094,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:180",{"_index":3088,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:202",{"_index":3090,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:221",{"_index":3092,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:30",{"_index":3095,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:37",{"_index":3086,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:56",{"_index":3081,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:75",{"_index":3084,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["loggerconfigservice",{"_index":2204,"title":{"injectables/LoggerConfigService.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loggerconfiguration",{"_index":2219,"title":{"interfaces/LoggerConfiguration.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loggermodule",{"_index":414,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loggermodule.forrootasync",{"_index":443,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":2235,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["logic",{"_index":3634,"title":{},"body":{"index.html":{}}}],["loglevel",{"_index":2222,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["lognotification",{"_index":3065,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["lognotification(context",{"_index":3087,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logo",{"_index":903,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["logs",{"_index":2466,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"changelog.html":{}}}],["logsession",{"_index":3066,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsession(context",{"_index":3089,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror",{"_index":3067,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror(context",{"_index":3091,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange",{"_index":3068,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange(context",{"_index":3093,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["long",{"_index":3660,"title":{},"body":{"index.html":{}}}],["loss",{"_index":3956,"title":{},"body":{"license.html":{}}}],["losses",{"_index":3963,"title":{},"body":{"license.html":{}}}],["made",{"_index":995,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"entities/PresentationConfig.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["mailing",{"_index":3809,"title":{},"body":{"license.html":{}}}],["main",{"_index":3530,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["maintain",{"_index":623,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["major",{"_index":3697,"title":{},"body":{"index.html":{}}}],["make",{"_index":3507,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["making",{"_index":2678,"title":{},"body":{"injectables/PresentationsService.html":{},"license.html":{}}}],["malfunction",{"_index":3961,"title":{},"body":{"license.html":{}}}],["managed",{"_index":3812,"title":{},"body":{"license.html":{}}}],["management",{"_index":1194,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"index.html":{},"license.html":{}}}],["management.controller",{"_index":2080,"title":{},"body":{"modules/IssuerModule.html":{}}}],["management.controller.ts",{"_index":2019,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management.controller.ts:63",{"_index":2029,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management/credentials",{"_index":1177,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["management/issuance",{"_index":1963,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["management/issuer",{"_index":2018,"title":{},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{}}}],["managing",{"_index":71,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/FileSystemKeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"modules/SessionModule.html":{}}}],["manytomany",{"_index":1102,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["manytomany(undefined",{"_index":1089,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["map",{"_index":1617,"title":{},"body":{"interfaces/Fields.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"injectables/VaultKeyService.html":{}}}],["map(([key",{"_index":2922,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["map((_",{"_index":3217,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["map((v",{"_index":2908,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["map.get(config.key",{"_index":1646,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["map.get(key",{"_index":1652,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["map.set(config.key",{"_index":1629,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["mapping",{"_index":3248,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity",{"_index":3198,"title":{},"body":{"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity.ts",{"_index":3284,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:12",{"_index":3288,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:15",{"_index":3286,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:6",{"_index":3290,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:9",{"_index":3289,"title":{},"body":{"entities/StatusMapping.html":{}}}],["marked",{"_index":3817,"title":{},"body":{"license.html":{}}}],["marks",{"_index":3914,"title":{},"body":{"license.html":{}}}],["match",{"_index":1829,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/ResolverService.html":{}}}],["match.length",{"_index":1832,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["match.substring(1",{"_index":1831,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["matches",{"_index":1827,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["matching",{"_index":259,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["math.floor(date.now",{"_index":2523,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["math.floor(new",{"_index":2525,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["math.random",{"_index":3220,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["math.round(new",{"_index":1283,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["matrix",{"_index":1822,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["matrixstyle",{"_index":1820,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["maybe",{"_index":277,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["mean",{"_index":3729,"title":{},"body":{"license.html":{}}}],["means",{"_index":3745,"title":{},"body":{"license.html":{}}}],["meant",{"_index":1912,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mechanical",{"_index":3769,"title":{},"body":{"license.html":{}}}],["mechanism",{"_index":869,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["mechanism(s",{"_index":1035,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["media",{"_index":3774,"title":{},"body":{"license.html":{}}}],["medium",{"_index":3865,"title":{},"body":{"license.html":{}}}],["meet",{"_index":3866,"title":{},"body":{"license.html":{}}}],["merchantability",{"_index":3932,"title":{},"body":{"license.html":{}}}],["merely",{"_index":3795,"title":{},"body":{"license.html":{}}}],["mergeconfigs",{"_index":1894,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergedheaders",{"_index":1905,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergedheaders.append(key",{"_index":1911,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergedheaders.delete(key",{"_index":1910,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergedheaders.set",{"_index":1918,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergeheaders",{"_index":1903,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergeheaders(a.headers",{"_index":1901,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["message",{"_index":3043,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["metadata",{"_index":1147,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"interfaces/IssuerMetadata.html":{},"injectables/Oid4vciService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["metadata.'})@get('openid",{"_index":3438,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["metadata.controller",{"_index":2086,"title":{},"body":{"modules/IssuerModule.html":{}}}],["metadata.controller.ts",{"_index":1208,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.controller.ts:13",{"_index":1215,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.controller.ts:23",{"_index":1211,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.dto",{"_index":2864,"title":{},"body":{"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{}}}],["metadata.dto.ts",{"_index":1145,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{}}}],["metadata.dto.ts:12",{"_index":1158,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:16",{"_index":1164,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:20",{"_index":1170,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:24",{"_index":1161,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:33",{"_index":1167,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:37",{"_index":1163,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:41",{"_index":1156,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:8",{"_index":1165,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata/credentials",{"_index":1207,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{}}}],["metadata/dto/credential",{"_index":1104,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["metadata/dto/schema",{"_index":1106,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/SchemaResponse.html":{}}}],["metadata/vct/${credentialconfig.id",{"_index":1293,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["method",{"_index":161,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{}}}],["methodfn",{"_index":922,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["methods",{"_index":346,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["middleware",{"_index":990,"title":{"interfaces/Middleware.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"index.html":{},"properties.html":{}}}],["mirko",{"_index":3998,"title":{},"body":{"license.html":{},"properties.html":{}}}],["miscellaneous",{"_index":3577,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["missing",{"_index":1416,"title":{},"body":{"injectables/CryptoService.html":{}}}],["misused",{"_index":179,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["mkdirsync",{"_index":859,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["mkdirsync(folder",{"_index":896,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["mkdirsync(this.folder",{"_index":1382,"title":{},"body":{"injectables/CryptoService.html":{}}}],["mm",{"_index":460,"title":{},"body":{"modules/AppModule.html":{}}}],["modifications",{"_index":3764,"title":{},"body":{"license.html":{}}}],["modified",{"_index":3870,"title":{},"body":{"license.html":{}}}],["modify",{"_index":2052,"title":{},"body":{"controllers/IssuerManagementController.html":{},"license.html":{}}}],["modifying",{"_index":3048,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["module",{"_index":357,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["modules",{"_index":359,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["mollik",{"_index":3999,"title":{},"body":{"license.html":{},"properties.html":{}}}],["more",{"_index":354,"title":{},"body":{"controllers/AppController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"entities/Session.html":{},"license.html":{}}}],["ms",{"_index":3596,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mso_mdoc",{"_index":2509,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["multi",{"_index":2940,"title":{},"body":{"entities/Session.html":{},"changelog.html":{}}}],["multipart/form",{"_index":1866,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["multiple",{"_index":1030,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/Oid4vciService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["mysql2",{"_index":3561,"title":{},"body":{"dependencies.html":{}}}],["n${json.stringify(signer.publicjwk",{"_index":1494,"title":{},"body":{"injectables/CryptoService.html":{}}}],["name",{"_index":191,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["name)?.id",{"_index":210,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["name.endswith",{"_index":1833,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name.length",{"_index":1835,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name.startswith",{"_index":1836,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name.substring(0",{"_index":1834,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name.substring(1",{"_index":1837,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["nameing",{"_index":3523,"title":{},"body":{"changelog.html":{}}}],["names",{"_index":3913,"title":{},"body":{"license.html":{}}}],["name}=${allowreserved",{"_index":2914,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["name}=${joinedvalues",{"_index":2905,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["name}=${token",{"_index":1880,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name}=${value.toisostring",{"_index":2917,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["name}[${key",{"_index":2923,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["native",{"_index":955,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["necessarily",{"_index":3844,"title":{},"body":{"license.html":{}}}],["necessary",{"_index":104,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/VaultKeyService.html":{}}}],["need",{"_index":216,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["needed",{"_index":186,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/RegistrarService.html":{}}}],["negligence",{"_index":3944,"title":{},"body":{"license.html":{}}}],["negligent",{"_index":3947,"title":{},"body":{"license.html":{}}}],["nested",{"_index":2911,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["nestinterceptor",{"_index":3003,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["nestjs",{"_index":415,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["nestjs/axios",{"_index":2179,"title":{},"body":{"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":33,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":35,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2100,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":64,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":601,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":3545,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":406,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionService.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":395,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":350,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1779,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":1135,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["nestjs/typeorm/dist/typeorm.module",{"_index":2180,"title":{},"body":{"modules/KeyModule.html":{}}}],["never",{"_index":1014,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["new",{"_index":118,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["next",{"_index":175,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{}}}],["next.handle",{"_index":3009,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["next.handle().pipe",{"_index":3029,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["next.js",{"_index":1006,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["node:child_process",{"_index":1378,"title":{},"body":{"injectables/CryptoService.html":{}}}],["node:crypto",{"_index":666,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/ResolverService.html":{}}}],["node:fs",{"_index":57,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["node:path",{"_index":62,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["nodejs",{"_index":1251,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService-1.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["non",{"_index":3826,"title":{},"body":{"license.html":{}}}],["noncce",{"_index":2943,"title":{},"body":{"entities/Session.html":{}}}],["nonce",{"_index":2392,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["none",{"_index":2580,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["normally",{"_index":3888,"title":{},"body":{"license.html":{}}}],["nothing",{"_index":3903,"title":{},"body":{"license.html":{}}}],["notice",{"_index":3778,"title":{},"body":{"license.html":{}}}],["notices",{"_index":3873,"title":{},"body":{"license.html":{}}}],["notification",{"_index":1171,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["notification.id",{"_index":2419,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notification_endpoint",{"_index":1155,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["notification_id",{"_index":2256,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["notificationevent",{"_index":2257,"title":{},"body":{"classes/NotificationRequestDto.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["notificationid",{"_index":2404,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notificationindex",{"_index":2424,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notificationrequestdto",{"_index":2254,"title":{"classes/NotificationRequestDto.html":{}},"body":{"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{}}}],["notifications",{"_index":340,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["notifications(body",{"_index":2292,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["notitification",{"_index":2325,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notwithstanding",{"_index":3901,"title":{},"body":{"license.html":{}}}],["now",{"_index":842,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["null",{"_index":263,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["nullable",{"_index":1080,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["number",{"_index":171,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"classes/ParResponseDto.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"miscellaneous/functions.html":{}}}],["oauth",{"_index":2528,"title":{},"body":{"injectables/Oid4vpService.html":{},"index.html":{}}}],["oauth2",{"_index":82,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{}}}],["oauth2authorizationserver",{"_index":734,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["oauth2authorizationserverresponse",{"_index":2261,"title":{"classes/Oauth2AuthorizationServerResponse.html":{}},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{}}}],["oauth2client",{"_index":36,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["oauth2resourceserver",{"_index":2332,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["object",{"_index":935,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"license.html":{}}}],["object.entries",{"_index":1658,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["object.entries(arg",{"_index":1651,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["object.entries(body).foreach(([key",{"_index":2790,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["object.entries(extraprefixesmap",{"_index":1625,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["object.entries(header",{"_index":1909,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["object.entries(params",{"_index":1636,"title":{},"body":{"interfaces/Fields.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{}}}],["object.entries(req.headers",{"_index":1498,"title":{},"body":{"injectables/CryptoService.html":{}}}],["object.entries(value",{"_index":2921,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["object.entries(value).foreach(([key",{"_index":2918,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["object.keys(res.vp_token",{"_index":2738,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["object.keys(value).length",{"_index":1637,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["objects",{"_index":948,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["objectseparatorstyle",{"_index":2896,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["objectstyle",{"_index":2784,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["obligations",{"_index":3970,"title":{},"body":{"license.html":{}}}],["observable",{"_index":2995,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["obtain",{"_index":4001,"title":{},"body":{"license.html":{}}}],["offer",{"_index":846,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/Session.html":{},"license.html":{}}}],["offer.credentialoffer",{"_index":2367,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["offer.credentialofferobject",{"_index":2365,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["offerrequestdto",{"_index":2022,"title":{"classes/OfferRequestDto.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{}}}],["offerresponse",{"_index":2025,"title":{"classes/OfferResponse.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{}}}],["oid4vci",{"_index":474,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/SessionLogContext.html":{},"index.html":{}}}],["oid4vci/dto/offer",{"_index":2034,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["oid4vci/oid4vci.controller",{"_index":2076,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/oid4vci.service",{"_index":2075,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/util",{"_index":753,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["oid4vcicontroller",{"_index":2073,"title":{"controllers/Oid4vciController.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{}}}],["oid4vciservice",{"_index":2032,"title":{"injectables/Oid4vciService.html":{}},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/WellKnownController.html":{},"overview.html":{}}}],["oid4vp",{"_index":476,"title":{},"body":{"modules/AppModule.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"index.html":{}}}],["oid4vp.controller",{"_index":2456,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["oid4vp.service",{"_index":2440,"title":{},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["oid4vp/dto/presentation",{"_index":2631,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vp/oid4vp.module",{"_index":2661,"title":{},"body":{"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{}}}],["oid4vp/oid4vp.service",{"_index":2632,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vpcontroller",{"_index":2427,"title":{"controllers/Oid4vpController.html":{}},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["oid4vpmodule",{"_index":2068,"title":{"modules/Oid4vpModule.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["oid4vpservice",{"_index":725,"title":{"injectables/Oid4vpService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"overview.html":{}}}],["oidc",{"_index":84,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"changelog.html":{}}}],["oidc_client_id",{"_index":2819,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["oidc_client_secret",{"_index":2820,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["oidc_issuer_url",{"_index":2816,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["oidcissuerurl",{"_index":111,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/.well",{"_index":123,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/protocol/openid",{"_index":120,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["older",{"_index":3150,"title":{},"body":{"injectables/SessionService.html":{}}}],["omit",{"_index":993,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["omitkeys",{"_index":1057,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["onapplicationbootstrap",{"_index":31,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{}}}],["once",{"_index":187,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["one",{"_index":212,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"changelog.html":{},"license.html":{}}}],["onevent",{"_index":63,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["onevent(tenant_events.tenant_init",{"_index":1353,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{}}}],["onevent(tenant_events.tenant_keys",{"_index":152,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["onmoduleinit",{"_index":32,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit",{"_index":1333,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit(tenantid",{"_index":153,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["open",{"_index":3601,"title":{},"body":{"index.html":{}}}],["openapi",{"_index":1915,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["openid",{"_index":2430,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["openid4vc/oauth2",{"_index":751,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"dependencies.html":{}}}],["openid4vc/openid4vci",{"_index":1099,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["openid4vc/openid4vp",{"_index":3553,"title":{},"body":{"dependencies.html":{}}}],["openid4vc/utils",{"_index":3554,"title":{},"body":{"dependencies.html":{}}}],["openid4vci",{"_index":638,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/WellKnownController.html":{}}}],["openid4vcidraftversion",{"_index":2336,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vcidraftversion.draft14",{"_index":2354,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vciissuer",{"_index":2330,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vp://?${(await",{"_index":831,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["openid4vp://?${values.uri",{"_index":2642,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["openssl",{"_index":1420,"title":{},"body":{"injectables/CryptoService.html":{}}}],["operation",{"_index":1124,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["operations",{"_index":100,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService-1.html":{},"controllers/Oid4vpController.html":{},"injectables/RegistrarService.html":{}}}],["option",{"_index":999,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["optional",{"_index":16,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/SerializePrimitiveOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":455,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"changelog.html":{}}}],["options.audience",{"_index":1749,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["options.auth",{"_index":1874,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.baseurl",{"_index":1884,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.dto",{"_index":2481,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["options.dto.ts",{"_index":2650,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{}}}],["options.expiresin",{"_index":1738,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["options.headers.append('cookie",{"_index":1879,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.headers.set(name",{"_index":1881,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.path",{"_index":1885,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.query",{"_index":1877,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.query[name",{"_index":1878,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.queryserializer",{"_index":1886,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.url",{"_index":1888,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["optionslegacyparser",{"_index":1058,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["order",{"_index":2715,"title":{},"body":{"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["organizations",{"_index":3609,"title":{},"body":{"index.html":{}}}],["origin",{"_index":3919,"title":{},"body":{"license.html":{}}}],["original",{"_index":3049,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["originaldraftversion",{"_index":2353,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["otherwhise",{"_index":2038,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["otherwise",{"_index":138,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["out",{"_index":379,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"license.html":{},"overview.html":{}}}],["outstanding",{"_index":3756,"title":{},"body":{"license.html":{}}}],["over",{"_index":3628,"title":{},"body":{"index.html":{}}}],["override",{"_index":1020,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["overview",{"_index":3608,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["overwrite",{"_index":1246,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{}}}],["overwritten",{"_index":1132,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["owner",{"_index":3734,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":3753,"title":{},"body":{"license.html":{}}}],["p",{"_index":1597,"title":{},"body":{"injectables/EncryptionService.html":{},"index.html":{}}}],["p256",{"_index":3355,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["package",{"_index":3538,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pad",{"_index":3398,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["page",{"_index":3532,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["pair",{"_index":1415,"title":{},"body":{"injectables/CryptoService.html":{}}}],["pairs",{"_index":629,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["par",{"_index":643,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(body",{"_index":654,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["param",{"_index":94,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["param('id",{"_index":1203,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{}}}],["param('requestid",{"_index":2445,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["param('session",{"_index":2446,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["param('tenantid",{"_index":677,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["parameter",{"_index":501,"title":{},"body":{"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["parameterize",{"_index":1404,"title":{},"body":{"injectables/CryptoService.html":{}}}],["parameters",{"_index":527,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":1634,"title":{"interfaces/Params.html":{}},"body":{"interfaces/Fields.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{}}}],["params.body",{"_index":1650,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["params[field.in",{"_index":1648,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["params[slot",{"_index":1638,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["paramsserializer",{"_index":956,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["parresponsedto",{"_index":673,"title":{"classes/ParResponseDto.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{}}}],["parse",{"_index":1024,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/PresentationsService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["parseaccesstokenrequest",{"_index":796,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parseas",{"_index":1025,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["parsechallengerequest",{"_index":719,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsechallengerequest(body",{"_index":735,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["parsed",{"_index":1015,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/PresentationsService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["parsedaccesstokenauthorizationcoderequestgrant",{"_index":757,"title":{"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest",{"_index":795,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.accesstokenrequest",{"_index":807,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.dpop?.jwt",{"_index":813,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant",{"_index":806,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsedcredentialrequest",{"_index":2368,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.credentialconfigurationid",{"_index":2386,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.proofs.jwt",{"_index":2389,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.proofs?.jwt?.length",{"_index":2388,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest?.proofs?.jwt",{"_index":2371,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parseloglevel",{"_index":2214,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["parseloglevel(level",{"_index":2226,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["parseresponse",{"_index":2672,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseresponse(res",{"_index":2690,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["part",{"_index":500,"title":{},"body":{"interfaces/Auth.html":{},"injectables/PresentationsService.html":{},"license.html":{}}}],["partial",{"_index":1613,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["particular",{"_index":3934,"title":{},"body":{"license.html":{}}}],["parties",{"_index":76,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["party",{"_index":185,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["pass",{"_index":2051,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["passed",{"_index":975,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"injectables/Oid4vciService.html":{}}}],["passport",{"_index":2133,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportjwtsecret",{"_index":2134,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportmodule",{"_index":600,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":2130,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":2118,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":1547,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["patch",{"_index":916,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"index.html":{}}}],["patent",{"_index":3835,"title":{},"body":{"license.html":{}}}],["path",{"_index":219,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Client.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{}}}],["path[name",{"_index":1838,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["path_",{"_index":1622,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["path_param_re",{"_index":1815,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["pathserializer",{"_index":1814,"title":{"interfaces/PathSerializer.html":{}},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["pathurl",{"_index":1889,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["payload",{"_index":584,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{}}}],["payload.cnf",{"_index":2733,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["payload.iss",{"_index":2865,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.iss}/.well",{"_index":2878,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.sub",{"_index":1747,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["payload?.exp",{"_index":1468,"title":{},"body":{"injectables/CryptoService.html":{}}}],["payloads",{"_index":2853,"title":{},"body":{"injectables/ResolverService.html":{}}}],["pem",{"_index":23,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["percent",{"_index":952,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"license.html":{}}}],["perform",{"_index":1773,"title":{},"body":{"controllers/HealthController.html":{},"license.html":{}}}],["periodically",{"_index":162,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["permission",{"_index":3911,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":3762,"title":{},"body":{"license.html":{}}}],["perpetual",{"_index":3824,"title":{},"body":{"license.html":{}}}],["pertain",{"_index":3880,"title":{},"body":{"license.html":{}}}],["pg",{"_index":3565,"title":{},"body":{"dependencies.html":{}}}],["pick",{"_index":1042,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["pid",{"_index":2047,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentedData.html":{}}}],["pid,hostname",{"_index":464,"title":{},"body":{"modules/AppModule.html":{}}}],["pino",{"_index":416,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{}}}],["pinohttp",{"_index":448,"title":{},"body":{"modules/AppModule.html":{}}}],["pinologger",{"_index":2985,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["pipedelimited",{"_index":1819,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["pipeline",{"_index":3464,"title":{},"body":{"changelog.html":{}}}],["pkcecodechallengemethod",{"_index":750,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["pkcecodechallengemethod.s256",{"_index":781,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["pkcs#8",{"_index":1419,"title":{},"body":{"injectables/CryptoService.html":{}}}],["pkeyopt",{"_index":1423,"title":{},"body":{"injectables/CryptoService.html":{}}}],["placeholders",{"_index":2350,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["places",{"_index":3883,"title":{},"body":{"license.html":{}}}],["please",{"_index":1004,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["pluggable",{"_index":3655,"title":{},"body":{"index.html":{}}}],["plumbing",{"_index":3635,"title":{},"body":{"index.html":{}}}],["png",{"_index":2040,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["pnpm",{"_index":3525,"title":{},"body":{"changelog.html":{}}}],["populate",{"_index":938,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["port",{"_index":1543,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["possession",{"_index":3340,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["possibility",{"_index":3965,"title":{},"body":{"license.html":{}}}],["post",{"_index":528,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"controllers/SessionController.html":{},"index.html":{}}}],["post('challenge",{"_index":646,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('credential",{"_index":2302,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('credential')@sessionlogger('state",{"_index":2289,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('notification",{"_index":2305,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('notification')@sessionlogger('notification_id",{"_index":2293,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('oauth2/token",{"_index":546,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('offer",{"_index":2049,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["post('par",{"_index":679,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('request",{"_index":2637,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["post('response",{"_index":2448,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["post('response')@sessionlogger('state",{"_index":2437,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["post('revoke",{"_index":2960,"title":{},"body":{"controllers/SessionController.html":{}}}],["post('token",{"_index":660,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["postgres",{"_index":1541,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres').default('sqlite",{"_index":1525,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["power",{"_index":3746,"title":{},"body":{"license.html":{}}}],["pre",{"_index":937,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["preferred",{"_index":1157,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"license.html":{}}}],["prefix",{"_index":512,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"interfaces/Fields.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"interfaces/Params.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["preheader",{"_index":3227,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["prepare",{"_index":3376,"title":{},"body":{"injectables/VaultKeyService.html":{},"license.html":{}}}],["prepayload",{"_index":3226,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["presentation",{"_index":628,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["presentation_during_issuance",{"_index":1941,"title":{},"body":{"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{}}}],["presentationconfig",{"_index":2545,"title":{"entities/PresentationConfig.html":{}},"body":{"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["presentationconfig.webhook",{"_index":2548,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationduringissuance",{"_index":1950,"title":{"classes/PresentationDuringIssuance.html":{}},"body":{"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["presentationmanagementcontroller",{"_index":2614,"title":{"controllers/PresentationManagementController.html":{}},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{}}}],["presentationrequest",{"_index":2622,"title":{"classes/PresentationRequest.html":{}},"body":{"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["presentationrequestoptions",{"_index":2469,"title":{"interfaces/PresentationRequestOptions.html":{}},"body":{"injectables/Oid4vpService.html":{},"interfaces/PresentationRequestOptions.html":{}}}],["presentations",{"_index":102,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["presentations.controller",{"_index":2659,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["presentations.service",{"_index":2629,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{}}}],["presentations/dto/auth",{"_index":2475,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentations/presentations.module",{"_index":2457,"title":{},"body":{"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["presentations/presentations.service",{"_index":2474,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationsmodule",{"_index":2454,"title":{"modules/PresentationsModule.html":{}},"body":{"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["presentationsservice",{"_index":52,"title":{"injectables/PresentationsService.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"overview.html":{}}}],["presented",{"_index":2762,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["presented.credentials[0].values.address.locality",{"_index":2765,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["presenteddata",{"_index":2748,"title":{"interfaces/PresentedData.html":{}},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["pretty",{"_index":439,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"dependencies.html":{}}}],["primary",{"_index":881,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/StatusMapping.html":{}}}],["primarycolumn",{"_index":2947,"title":{},"body":{"entities/Session.html":{}}}],["primarycolumn('uuid",{"_index":2932,"title":{},"body":{"entities/Session.html":{}}}],["primarygeneratedcolumn",{"_index":1958,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":1948,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["printed",{"_index":3995,"title":{},"body":{"license.html":{}}}],["privacy",{"_index":3657,"title":{},"body":{"index.html":{}}}],["private",{"_index":86,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["private_key",{"_index":3051,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["privateencryptionkey",{"_index":1570,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["privateenncryptionpath",{"_index":1571,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["privatekey",{"_index":1317,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/FileSystemKeyService.html":{},"entities/KeyEntity.html":{}}}],["privatekey.alg",{"_index":1713,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatekey.kid",{"_index":1712,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatekeyinstance",{"_index":1726,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatekeyjwk",{"_index":1312,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["privatekeypath",{"_index":1665,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatethumbprint",{"_index":1492,"title":{},"body":{"injectables/CryptoService.html":{}}}],["proceed",{"_index":2994,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["process",{"_index":1955,"title":{},"body":{"entities/IssuanceConfig.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"entities/Session.html":{}}}],["process.env.node_env",{"_index":431,"title":{},"body":{"modules/AppModule.html":{}}}],["process_presentation_response",{"_index":2559,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["processes",{"_index":2472,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["processing",{"_index":969,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["processresponse",{"_index":2756,"title":{"interfaces/ProcessResponse.html":{}},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["product",{"_index":3915,"title":{},"body":{"license.html":{}}}],["production",{"_index":432,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["progress",{"_index":2980,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["prominent",{"_index":3872,"title":{},"body":{"license.html":{}}}],["promise",{"_index":190,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["promise.all(att",{"_index":2747,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["promise.resolve((input",{"_index":3350,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["promise.resolve(keys.publickey",{"_index":1725,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["promise.resolve(tenantid",{"_index":3363,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["promises",{"_index":180,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["proof",{"_index":3339,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["proofcount",{"_index":2387,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["proofverified",{"_index":2403,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["proper",{"_index":867,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["properties",{"_index":13,"title":{"properties.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"entities/KeyEntity.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"properties.html":{}}}],["proprietary",{"_index":3619,"title":{},"body":{"index.html":{}}}],["protected",{"_index":2030,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["protocol",{"_index":3616,"title":{},"body":{"index.html":{}}}],["protocols",{"_index":3607,"title":{},"body":{"index.html":{}}}],["provide",{"_index":1000,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"modules/KeyModule.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["provided",{"_index":341,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"classes/PresentationRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"license.html":{}}}],["provider",{"_index":85,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{}}}],["providers",{"_index":364,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["provides",{"_index":2810,"title":{},"body":{"modules/RegistrarModule.html":{},"license.html":{}}}],["providing",{"_index":1770,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["prs",{"_index":3707,"title":{},"body":{"index.html":{}}}],["pubkey",{"_index":1388,"title":{},"body":{"injectables/CryptoService.html":{}}}],["public",{"_index":21,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["public()@post('oauth2/token')@apibody({type",{"_index":515,"title":{},"body":{"controllers/AuthController.html":{}}}],["public.decorator",{"_index":537,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["public_url",{"_index":2087,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{}}}],["public_url=https://example.com",{"_index":3676,"title":{},"body":{"index.html":{}}}],["publiccryptokey",{"_index":1464,"title":{},"body":{"injectables/CryptoService.html":{}}}],["publicencryptionkey",{"_index":1572,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["publicencryptionpath",{"_index":1573,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["publicjwk",{"_index":819,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["publickey",{"_index":235,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/FileSystemKeyService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["publickey.alg",{"_index":1715,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["publickey.kid",{"_index":1711,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["publickeyjwk",{"_index":1316,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["publickeypath",{"_index":1666,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["publicly",{"_index":3832,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":252,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["purposes",{"_index":3743,"title":{},"body":{"license.html":{}}}],["pushed",{"_index":656,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["pushed_authorization_request_endpoint",{"_index":778,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["put",{"_index":917,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["pwd)/config:/app/config",{"_index":3680,"title":{},"body":{"index.html":{}}}],["qr",{"_index":2044,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["qrcode",{"_index":2037,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["qrcode.tobuffer(values.uri",{"_index":2058,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["qrcodebuffer",{"_index":2057,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["queries",{"_index":652,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/Session.html":{}}}],["queries.request_uri",{"_index":786,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["query",{"_index":206,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["query_",{"_index":1623,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["querydeeppartialentity",{"_index":3131,"title":{},"body":{"injectables/SessionService.html":{}}}],["queryparams",{"_index":1846,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["queryparams[name",{"_index":1848,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["queryserializer",{"_index":925,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["queryserializer(query",{"_index":1891,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["queryserializeroptions",{"_index":926,"title":{"interfaces/QuerySerializerOptions.html":{}},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["querystring",{"_index":2552,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["quick",{"_index":3662,"title":{},"body":{"index.html":{}}}],["quickstart",{"_index":3689,"title":{},"body":{"index.html":{}}}],["r",{"_index":2880,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["r.data",{"_index":2881,"title":{},"body":{"injectables/ResolverService.html":{}}}],["r.length",{"_index":3402,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["r.slice(1",{"_index":3406,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["r[0",{"_index":3404,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["rand",{"_index":3672,"title":{},"body":{"index.html":{}}}],["random",{"_index":1479,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["randombytes",{"_index":1365,"title":{},"body":{"injectables/CryptoService.html":{}}}],["randombytes(bytes",{"_index":1477,"title":{},"body":{"injectables/CryptoService.html":{}}}],["randomness",{"_index":3209,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["randomuuid",{"_index":665,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["ratelimit",{"_index":2142,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["raw",{"_index":1860,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/VaultKeyService.html":{}}}],["rawsignature",{"_index":3412,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["re",{"_index":829,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["reachable",{"_index":2883,"title":{},"body":{"injectables/ResolverService.html":{}}}],["react",{"_index":892,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["readable",{"_index":3881,"title":{},"body":{"license.html":{}}}],["readfilesync",{"_index":55,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["readfilesync(filepath",{"_index":296,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["readfilesync(join(folder",{"_index":1720,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["readfilesync(this.publicencryptionpath",{"_index":1607,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["readonly",{"_index":676,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CryptoService.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/WellKnownController.html":{}}}],["readonlyarray",{"_index":1036,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Fields.html":{},"interfaces/Params.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["real",{"_index":1480,"title":{},"body":{"injectables/CryptoService.html":{}}}],["reason",{"_index":3984,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":3916,"title":{},"body":{"license.html":{}}}],["receive",{"_index":2439,"title":{},"body":{"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"entities/Session.html":{}}}],["received",{"_index":2586,"title":{},"body":{"injectables/Oid4vpService.html":{},"license.html":{}}}],["recent",{"_index":3696,"title":{},"body":{"index.html":{}}}],["recipients",{"_index":3869,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":3994,"title":{},"body":{"license.html":{}}}],["recommended",{"_index":3695,"title":{},"body":{"index.html":{}}}],["record",{"_index":942,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{}}}],["record)[name",{"_index":1649,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["recursive",{"_index":897,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["redacted",{"_index":3055,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["redirect_uri",{"_index":699,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["redistributing",{"_index":3938,"title":{},"body":{"license.html":{}}}],["redistribution",{"_index":3863,"title":{},"body":{"license.html":{}}}],["reference",{"_index":1710,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"index.html":{}}}],["reflect",{"_index":3570,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":2094,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["refresh",{"_index":145,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["refresh_token",{"_index":3052,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["refreshaccesstoken",{"_index":165,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["refreshes",{"_index":158,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["regarding",{"_index":3909,"title":{},"body":{"license.html":{}}}],["regcert",{"_index":2488,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["register",{"_index":3144,"title":{},"body":{"injectables/SessionService.html":{}}}],["registrar",{"_index":59,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{}}}],["registrar.json",{"_index":286,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["registrar.service",{"_index":2811,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["registrar/generated",{"_index":2846,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrar/registrar.module",{"_index":393,"title":{},"body":{"modules/AppModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["registrar/registrar.service",{"_index":2473,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["registrar_url",{"_index":2815,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["registrar_validation_schema",{"_index":392,"title":{},"body":{"modules/AppModule.html":{},"modules/RegistrarModule.html":{}}}],["registrarconfig",{"_index":58,"title":{"classes/RegistrarConfig.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{}}}],["registrarmodule",{"_index":374,"title":{"modules/RegistrarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["registrarservice",{"_index":69,"title":{"injectables/RegistrarService.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"overview.html":{}}}],["registration",{"_index":78,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["registrationcert",{"_index":2491,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{}}}],["registrationcertid",{"_index":2700,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["registrationcertificatecontrollerall",{"_index":42,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["registrationcertificatecontrollerregister",{"_index":43,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["registrationcertificatecreation",{"_index":2844,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrationcertificaterequest",{"_index":49,"title":{"classes/RegistrationCertificateRequest.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["related",{"_index":2185,"title":{},"body":{"modules/KeyModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["relations",{"_index":2007,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["release",{"_index":3463,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["relevant",{"_index":2308,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["reload",{"_index":2230,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["reloadconfiguration",{"_index":2215,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["rely",{"_index":3618,"title":{},"body":{"index.html":{}}}],["relying",{"_index":75,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerfindall",{"_index":44,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerregister",{"_index":45,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["remain",{"_index":3793,"title":{},"body":{"license.html":{}}}],["remove",{"_index":2744,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"changelog.html":{}}}],["replace",{"_index":1458,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{}}}],["replace('https",{"_index":234,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["replace(/=/g",{"_index":3419,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["replace(/\\+/g",{"_index":3416,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["replace(/\\//g",{"_index":3417,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["replace(/\\r?\\n|\\r/g",{"_index":1461,"title":{},"body":{"injectables/CryptoService.html":{}}}],["replaced",{"_index":3990,"title":{},"body":{"license.html":{}}}],["replacevalue",{"_index":1841,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["repository",{"_index":1115,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"properties.html":{}}}],["represent",{"_index":3790,"title":{},"body":{"license.html":{}}}],["representatives",{"_index":3808,"title":{},"body":{"license.html":{}}}],["representing",{"_index":630,"title":{},"body":{"interfaces/AuthResponse.html":{},"interfaces/IssuerMetadata.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["represents",{"_index":1146,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/RegistrarConfig.html":{},"entities/Session.html":{}}}],["reproduce",{"_index":3831,"title":{},"body":{"license.html":{}}}],["reproducing",{"_index":3920,"title":{},"body":{"license.html":{}}}],["reproduction",{"_index":3725,"title":{},"body":{"license.html":{}}}],["repsonse",{"_index":8,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["req",{"_index":246,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"miscellaneous/functions.html":{}}}],["req+jwt",{"_index":2530,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["req.body",{"_index":269,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["req.body?.session_id",{"_index":470,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers['content",{"_index":485,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers['user",{"_index":483,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers['x",{"_index":467,"title":{},"body":{"modules/AppModule.html":{}}}],["req.id",{"_index":265,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["req.method",{"_index":478,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["req.params?.session",{"_index":469,"title":{},"body":{"modules/AppModule.html":{}}}],["req.params?.tenantid",{"_index":471,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url",{"_index":479,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url?.includes('/oid4vp",{"_index":475,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url?.includes('/vci",{"_index":473,"title":{},"body":{"modules/AppModule.html":{}}}],["reqinterceptor",{"_index":1922,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["request",{"_index":11,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["request.'})@isenum(responsetype",{"_index":2279,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.body?.[sessionidparam",{"_index":3015,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.dto",{"_index":51,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{}}}],["request.dto.ts",{"_index":693,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"miscellaneous/enumerations.html":{}}}],["request.dto.ts:12",{"_index":705,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:15",{"_index":710,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:17",{"_index":2845,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:18",{"_index":712,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:20",{"_index":2280,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:21",{"_index":714,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:24",{"_index":706,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:26",{"_index":2276,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/PresentationRequest.html":{}}}],["request.dto.ts:27",{"_index":707,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:30",{"_index":708,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:33",{"_index":711,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/OfferRequestDto.html":{},"classes/PresentationRequest.html":{}}}],["request.dto.ts:36",{"_index":704,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:37",{"_index":2281,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:41",{"_index":2285,"title":{},"body":{"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["request.dto.ts:42",{"_index":2284,"title":{},"body":{"classes/OfferResponse.html":{}}}],["request.dto.ts:6",{"_index":709,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.dto.ts:9",{"_index":713,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.header",{"_index":2535,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.headers.get('x",{"_index":2774,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["request.headers['content",{"_index":3024,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.headers['user",{"_index":3023,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.headers['x",{"_index":3016,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.json",{"_index":2763,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["request.method",{"_index":2760,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["request.params?.[sessionidparam",{"_index":3014,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params?.tenantid",{"_index":3018,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.payload",{"_index":2538,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.query?.[sessionidparam",{"_index":3017,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.url",{"_index":3019,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.user",{"_index":3303,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["request/response",{"_index":2234,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["request_error",{"_index":3041,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_start",{"_index":3022,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_success",{"_index":3032,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_uri",{"_index":680,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/Session.html":{}}}],["requested",{"_index":257,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["requestfn",{"_index":923,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["requestid",{"_index":253,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{}}}],["requesting",{"_index":3641,"title":{},"body":{"index.html":{}}}],["requestinit['headers",{"_index":941,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["requestoptions",{"_index":1033,"title":{"interfaces/RequestOptions.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["requestresult",{"_index":1037,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["requests",{"_index":91,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{}}}],["requestvalidator",{"_index":966,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["require_pushed_authorization_requests",{"_index":777,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["required",{"_index":334,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"modules/RegistrarModule.html":{},"classes/SchemaResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"license.html":{}}}],["requiredclaimkeys",{"_index":2742,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requiredfields",{"_index":2691,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requires",{"_index":2272,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["res",{"_index":270,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/EncryptionService.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["res.data",{"_index":226,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["res.data!['crt",{"_index":243,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.data!['id",{"_index":244,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.data!['jwt",{"_index":281,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.data.data.keys['1'].public_key",{"_index":3364,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["res.data.id",{"_index":3361,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["res.data?.filter",{"_index":261,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.error",{"_index":222,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.payload",{"_index":1609,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["res.redirect(`${values.redirect_uri}?code=${code",{"_index":793,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["res.send",{"_index":855,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["res.send(qrcodebuffer",{"_index":2060,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.send(values",{"_index":2061,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.setheader('content",{"_index":2059,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.state",{"_index":2557,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["res.status(400).send(response",{"_index":853,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["res.statuscode",{"_index":487,"title":{},"body":{"modules/AppModule.html":{}}}],["reserved",{"_index":950,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["reset",{"_index":378,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["resinterceptor",{"_index":1923,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["resolve",{"_index":2858,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolved",{"_index":928,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["resolvepublickey",{"_index":2854,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolvepublickey(payload",{"_index":2856,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolver.service",{"_index":2851,"title":{},"body":{"modules/ResolverModule.html":{}}}],["resolver/resolver.module",{"_index":2660,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["resolver/resolver.service",{"_index":2706,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resolvermodule",{"_index":2656,"title":{"modules/ResolverModule.html":{}},"body":{"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"modules.html":{},"overview.html":{}}}],["resolverservice",{"_index":2675,"title":{"injectables/ResolverService.html":{}},"body":{"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"overview.html":{}}}],["resolves",{"_index":1122,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/PresentationsService.html":{}}}],["resolving",{"_index":2679,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{}}}],["resource",{"_index":700,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["resourceserver",{"_index":2313,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["response",{"_index":195,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"miscellaneous/enumerations.html":{}}}],["response('not",{"_index":2779,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["response('unauthorized",{"_index":2775,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["response(null",{"_index":2778,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["response.data!.find((item",{"_index":208,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["response.data!['id",{"_index":198,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["response.dto",{"_index":543,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"controllers/WellKnownController.html":{}}}],["response.dto.ts",{"_index":619,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:11",{"_index":633,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{}}}],["response.dto.ts:13",{"_index":2264,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:15",{"_index":1561,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:17",{"_index":2269,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:19",{"_index":1564,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:2",{"_index":2890,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:21",{"_index":2266,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:23",{"_index":1566,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:25",{"_index":2267,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:29",{"_index":2270,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:3",{"_index":2892,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:33",{"_index":2089,"title":{},"body":{"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:37",{"_index":2263,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:4",{"_index":2891,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:5",{"_index":2268,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{}}}],["response.dto.ts:9",{"_index":2273,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["response.error",{"_index":196,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["response.json(res",{"_index":2766,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["response.jwks.keys.find((key",{"_index":2884,"title":{},"body":{"injectables/ResolverService.html":{}}}],["response.statuscode",{"_index":3033,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["response_mode",{"_index":2504,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_processing",{"_index":2558,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_type",{"_index":701,"title":{},"body":{"classes/AuthorizeQueries.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["response_types_supported",{"_index":2520,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_uri",{"_index":2502,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["responses",{"_index":2982,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsesize",{"_index":3034,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsestatus",{"_index":2588,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["responsestyle",{"_index":984,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["responsetransformer",{"_index":974,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["responsetype",{"_index":2035,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["responsetype.qrcode",{"_index":2045,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsetype.uri",{"_index":2048,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsevalidator",{"_index":977,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["responsibility",{"_index":3976,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":70,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{},"license.html":{}}}],["result",{"_index":1123,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"license.html":{}}}],["result.payload",{"_index":2743,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resulting",{"_index":3768,"title":{},"body":{"license.html":{}}}],["results",{"_index":302,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["retain",{"_index":3877,"title":{},"body":{"license.html":{}}}],["retrieve",{"_index":683,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/PresentationsService.html":{}}}],["retrieved",{"_index":2772,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["retrieves",{"_index":1127,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{}}}],["return",{"_index":109,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["returned",{"_index":229,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["returning",{"_index":927,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["returns",{"_index":135,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["returntype",{"_index":1003,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["revisions",{"_index":3787,"title":{},"body":{"license.html":{}}}],["revokeall",{"_index":2953,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(@body",{"_index":2972,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(value",{"_index":2958,"title":{},"body":{"controllers/SessionController.html":{}}}],["revoked",{"_index":17,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"classes/StatusUpdateDto.html":{}}}],["right",{"_index":3362,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["rights",{"_index":3972,"title":{},"body":{"license.html":{}}}],["risk",{"_index":3621,"title":{},"body":{"index.html":{}}}],["risks",{"_index":3939,"title":{},"body":{"license.html":{}}}],["rlength",{"_index":3392,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["root",{"_index":551,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{},"index.html":{}}}],["rootpath",{"_index":492,"title":{},"body":{"modules/AppModule.html":{}}}],["royalty",{"_index":3829,"title":{},"body":{"license.html":{}}}],["rp",{"_index":220,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["rp_name",{"_index":422,"title":{},"body":{"modules/AppModule.html":{}}}],["rpadded",{"_index":3400,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["rs256",{"_index":2153,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["rsa",{"_index":2135,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["run",{"_index":1407,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/SessionService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["running",{"_index":353,"title":{},"body":{"controllers/AppController.html":{}}}],["runs",{"_index":3654,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":2478,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":3006,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["s",{"_index":3386,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s's",{"_index":3396,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s.length",{"_index":3408,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s.slice(1",{"_index":3410,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s[0",{"_index":3409,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["safely",{"_index":965,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["saltgenerator",{"_index":1278,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["same",{"_index":827,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"license.html":{}}}],["san",{"_index":1438,"title":{},"body":{"injectables/CryptoService.html":{}}}],["san.ext",{"_index":1401,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sanext",{"_index":1400,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sanitize",{"_index":3001,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody",{"_index":2984,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody(body",{"_index":2997,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized",{"_index":3002,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized[field",{"_index":3054,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizes",{"_index":2999,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["satisfies",{"_index":2355,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["save",{"_index":299,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/RegistrarService.html":{}}}],["saveconfig",{"_index":2824,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["saveconfig(config",{"_index":300,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["scalable",{"_index":3651,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":405,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":489,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":3127,"title":{},"body":{"injectables/SessionService.html":{}}}],["schema",{"_index":1077,"title":{},"body":{"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"controllers/PresentationManagementController.html":{},"modules/RegistrarModule.html":{},"classes/SchemaResponse.html":{}}}],["schema(@param('id",{"_index":1221,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema(id",{"_index":1209,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema.org/draft/2020",{"_index":2888,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["schema_uri",{"_index":2612,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["schema_uri#integrity",{"_index":2613,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["schemaresponse",{"_index":1094,"title":{"classes/SchemaResponse.html":{}},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/SchemaResponse.html":{}}}],["scheme",{"_index":498,"title":{},"body":{"interfaces/Auth.html":{}}}],["scope",{"_index":702,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["script",{"_index":1405,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sd",{"_index":1249,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{},"index.html":{}}}],["sdjwt",{"_index":1271,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwt.issue",{"_index":1280,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwtinstance",{"_index":2667,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["sdjwtvcinstance",{"_index":1252,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["search",{"_index":1847,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.join",{"_index":1855,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.push(serializedarray",{"_index":1850,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.push(serializedobject",{"_index":1852,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.push(serializedprimitive",{"_index":1854,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.startswith",{"_index":1892,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.substring(1",{"_index":1893,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["seconds",{"_index":593,"title":{},"body":{"controllers/AuthController.html":{},"classes/ParResponseDto.html":{}}}],["secret",{"_index":575,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"index.html":{}}}],["secretkey",{"_index":1740,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["secretorkey",{"_index":2156,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secretorkeyprovider",{"_index":2124,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":3838,"title":{},"body":{"license.html":{}}}],["sections",{"_index":3703,"title":{},"body":{"index.html":{},"license.html":{}}}],["secure",{"_index":3650,"title":{},"body":{"index.html":{}}}],["securely",{"_index":2771,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["security",{"_index":930,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["see",{"_index":940,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"index.html":{},"license.html":{}}}],["select",{"_index":1022,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["selectivly",{"_index":2752,"title":{},"body":{"interfaces/PresentedData.html":{}}}],["self",{"_index":1426,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sell",{"_index":3839,"title":{},"body":{"license.html":{}}}],["semantic",{"_index":3512,"title":{},"body":{"changelog.html":{}}}],["send",{"_index":339,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["sendauthorizationcode",{"_index":720,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["sendauthorizationcode(res",{"_index":738,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sendauthorizationresponse",{"_index":721,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["sendauthorizationresponse(queries",{"_index":740,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sending",{"_index":2575,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["sends",{"_index":888,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["sensitive",{"_index":3000,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields",{"_index":3050,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields.foreach((field",{"_index":3053,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sent",{"_index":315,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"license.html":{}}}],["separable",{"_index":3794,"title":{},"body":{"license.html":{}}}],["separate",{"_index":3906,"title":{},"body":{"license.html":{}}}],["separator",{"_index":2906,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorarrayexplode",{"_index":2897,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorarrayexplode(style",{"_index":2907,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorarraynoexplode",{"_index":2898,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorobjectexplode",{"_index":2900,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorobjectexplode(style",{"_index":2920,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["sequence",{"_index":3388,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["sequence.slice(2",{"_index":3394,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["sequence[1",{"_index":3393,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["serializearrayparam",{"_index":1809,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializedarray",{"_index":1849,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["serializedobject",{"_index":1851,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["serializedprimitive",{"_index":1853,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["serializeformdatapair",{"_index":2785,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["serializeformdatapair(data",{"_index":2792,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["serializeobjectparam",{"_index":1810,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializeoptions",{"_index":2893,"title":{"interfaces/SerializeOptions.html":{}},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializeprimitiveoptions",{"_index":2895,"title":{"interfaces/SerializePrimitiveOptions.html":{}},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializeprimitiveparam",{"_index":1811,"title":{"interfaces/SerializePrimitiveParam.html":{}},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializeroptions",{"_index":2783,"title":{"interfaces/SerializerOptions.html":{}},"body":{"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializers",{"_index":477,"title":{},"body":{"modules/AppModule.html":{}}}],["serializeurlsearchparamspair",{"_index":2787,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["serializeurlsearchparamspair(data",{"_index":2798,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["serializing",{"_index":932,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["server",{"_index":119,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"controllers/WellKnownController.html":{}}}],["server's",{"_index":2265,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["servers",{"_index":1160,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["servestaticmodule",{"_index":394,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forrootasync",{"_index":490,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":132,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"index.html":{},"license.html":{}}}],["service.db",{"_index":1551,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["services",{"_index":336,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["session",{"_index":468,"title":{"entities/Session.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{}}}],["session.auth_queries",{"_index":790,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["session.authorization_code",{"_index":809,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["session.controller",{"_index":3116,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.credentialpayload",{"_index":2587,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.credentialpayload!.values",{"_index":2585,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.credentialpayload?.values?.[credentialconfigurationid",{"_index":1268,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["session.id",{"_index":820,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["session.issuanceid",{"_index":848,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["session.notifications",{"_index":2407,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications.findindex",{"_index":2418,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications.push",{"_index":2405,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications[index",{"_index":2421,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.service",{"_index":2962,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["session.tenantid",{"_index":1267,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["session.vp_nonce",{"_index":2563,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook",{"_index":2561,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook!.url",{"_index":2591,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook.auth",{"_index":2570,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook.auth.config.value",{"_index":2573,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook.auth.type",{"_index":2571,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook.auth?.type",{"_index":2579,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook.url",{"_index":2577,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session/entities/session.entity",{"_index":1257,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["session/session.module",{"_index":404,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["session/session.service",{"_index":672,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["session_id",{"_index":2311,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_logger_key",{"_index":3007,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["session_tidy_up_interval",{"_index":3117,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["session_ttl",{"_index":3120,"title":{},"body":{"modules/SessionModule.html":{}}}],["session_validation_schema",{"_index":403,"title":{},"body":{"modules/AppModule.html":{},"modules/SessionModule.html":{}}}],["sessioncontroller",{"_index":2949,"title":{"controllers/SessionController.html":{}},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["sessionid",{"_index":466,"title":{},"body":{"modules/AppModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["sessionidparam",{"_index":3010,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sessionlogcontext",{"_index":2339,"title":{"interfaces/SessionLogContext.html":{}},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["sessionlogger",{"_index":2298,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["sessionlogger('notification_id",{"_index":2306,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["sessionlogger('session",{"_index":2444,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["sessionlogger('state",{"_index":2303,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["sessionloggerinterceptor",{"_index":2070,"title":{"injectables/SessionLoggerInterceptor.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"overview.html":{}}}],["sessionloggerservice",{"_index":2071,"title":{"injectables/SessionLoggerService.html":{}},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{},"overview.html":{}}}],["sessionmodule",{"_index":375,"title":{"modules/SessionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/SessionModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["sessionrepository",{"_index":3129,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessions",{"_index":2948,"title":{},"body":{"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["sessionservice",{"_index":671,"title":{"injectables/SessionService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"overview.html":{}}}],["set",{"_index":106,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/EC_Public.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/WellKnownController.html":{},"changelog.html":{}}}],["set+json",{"_index":3450,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["set+json')@get('jwks.json",{"_index":3435,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["setauthcode",{"_index":722,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["setauthcode(issuer_state",{"_index":742,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["setauthparams",{"_index":1872,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["setconfig",{"_index":918,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["setentry",{"_index":3268,"title":{},"body":{"injectables/StatusListService.html":{}}}],["setentry(id",{"_index":3251,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["setexpirationtime(expiresin",{"_index":1748,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setinterval(callback",{"_index":3160,"title":{},"body":{"injectables/SessionService.html":{}}}],["setissuedat",{"_index":1744,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setissuer(issuer",{"_index":1745,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setprotectedheader",{"_index":1742,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setprotectedheader(header",{"_index":1727,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["setsubject(options.subject",{"_index":1746,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["settimeout",{"_index":172,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["setup",{"_index":3688,"title":{},"body":{"index.html":{}}}],["setupclient",{"_index":1060,"title":{},"body":{"injectables/ClientService.html":{}}}],["setupclient(id",{"_index":894,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["sha",{"_index":1276,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["shall",{"_index":3728,"title":{},"body":{"license.html":{}}}],["shape",{"_index":964,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["shares",{"_index":3757,"title":{},"body":{"license.html":{}}}],["shell",{"_index":1408,"title":{},"body":{"injectables/CryptoService.html":{}}}],["shouldenableautologging",{"_index":2216,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["shouldlog",{"_index":3069,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["shuffel",{"_index":3214,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["shuffled",{"_index":3208,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["sign",{"_index":1442,"title":{},"body":{"injectables/CryptoService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/VaultKeyService.html":{}}}],["sign(privatekeyinstance",{"_index":1728,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["sign(value",{"_index":3334,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["signalg",{"_index":1273,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["signature",{"_index":1318,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"injectables/VaultKeyService.html":{}}}],["signature).catch((err",{"_index":2730,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["signed",{"_index":1427,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signedjwt",{"_index":2536,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwt.length",{"_index":2542,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwtlength",{"_index":2541,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signer",{"_index":817,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/VaultKeyService.html":{}}}],["signer(tenantid",{"_index":1683,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["signer.alg",{"_index":1486,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signer.method",{"_index":1482,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signer.publicjwk",{"_index":1485,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signerjwk",{"_index":1487,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signing",{"_index":1289,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/VaultKeyService.html":{}}}],["signingcert",{"_index":1455,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signinginput",{"_index":3382,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["signjwt",{"_index":1334,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["signjwt(header",{"_index":1355,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signjwt(payload",{"_index":1685,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["signjwtcallback",{"_index":1349,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signs",{"_index":3336,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["simple",{"_index":1823,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["simplicity",{"_index":2745,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["singleline",{"_index":457,"title":{},"body":{"modules/AppModule.html":{}}}],["size",{"_index":3211,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["skip",{"_index":3390,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["sleep",{"_index":3588,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sleep(ms",{"_index":3595,"title":{},"body":{"miscellaneous/functions.html":{}}}],["slot",{"_index":1614,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["software",{"_index":3766,"title":{},"body":{"license.html":{}}}],["sole",{"_index":3975,"title":{},"body":{"license.html":{}}}],["solely",{"_index":3935,"title":{},"body":{"license.html":{}}}],["solutions",{"_index":3620,"title":{},"body":{"index.html":{}}}],["solves",{"_index":3624,"title":{},"body":{"index.html":{}}}],["someone",{"_index":278,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["sort",{"_index":3218,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"index.html":{},"license.html":{}}}],["sources",{"_index":3013,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["spacedelimited",{"_index":1818,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["spadded",{"_index":3401,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["special",{"_index":3951,"title":{},"body":{"license.html":{}}}],["specific",{"_index":1212,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"index.html":{},"license.html":{}}}],["specification",{"_index":1916,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["specified",{"_index":1016,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["specify",{"_index":1954,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["split",{"_index":3535,"title":{},"body":{"changelog.html":{}}}],["sqlite",{"_index":1528,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["sqlite3",{"_index":3573,"title":{},"body":{"dependencies.html":{}}}],["src/.../main.ts",{"_index":3581,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../presentation",{"_index":3579,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../util.ts",{"_index":3584,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":380,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/app.controller.ts",{"_index":345,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/app.controller.ts:8",{"_index":348,"title":{},"body":{"controllers/AppController.html":{}}}],["src/auth/auth.controller.ts",{"_index":511,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:60",{"_index":523,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard.ts",{"_index":2090,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.guard.ts:12",{"_index":2098,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.guard.ts:7",{"_index":2095,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":599,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/client.service.ts",{"_index":857,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:16",{"_index":1062,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:23",{"_index":1066,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:35",{"_index":1064,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:45",{"_index":1065,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:61",{"_index":1069,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:74",{"_index":1063,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:82",{"_index":1068,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/dto/client",{"_index":978,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["src/auth/dto/token",{"_index":3304,"title":{},"body":{"classes/TokenResponse.html":{}}}],["src/auth/jwt.service.ts",{"_index":1730,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:13",{"_index":2111,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:19",{"_index":2114,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:56",{"_index":2116,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:83",{"_index":2112,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:94",{"_index":2115,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":2117,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:20",{"_index":2123,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:47",{"_index":2127,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:66",{"_index":2129,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:9",{"_index":2121,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/token.decorator.ts",{"_index":3299,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["src/crypto/crypto.module.ts",{"_index":1323,"title":{},"body":{"modules/CryptoModule.html":{}}}],["src/crypto/crypto.service.ts",{"_index":1326,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:144",{"_index":1342,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:157",{"_index":1358,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:164",{"_index":1356,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:172",{"_index":1360,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:191",{"_index":1339,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:229",{"_index":1348,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:266",{"_index":1343,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:280",{"_index":1346,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:32",{"_index":1337,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:36",{"_index":1363,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:39",{"_index":1352,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:47",{"_index":1354,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:61",{"_index":1351,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/encryption/encryption.service.ts",{"_index":1569,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:11",{"_index":1585,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:12",{"_index":1587,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:13",{"_index":1586,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:14",{"_index":1577,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:19",{"_index":1583,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:23",{"_index":1582,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:58",{"_index":1579,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:63",{"_index":1580,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/key/crypto/crypto",{"_index":1297,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["src/crypto/key/crypto/crypto.service.ts",{"_index":1503,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["src/crypto/key/crypto/crypto.service.ts:10",{"_index":1507,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["src/crypto/key/crypto/crypto.service.ts:17",{"_index":1509,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["src/crypto/key/crypto/crypto.service.ts:21",{"_index":1513,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["src/crypto/key/entities/key.entity.ts",{"_index":2166,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/key.entity.ts:6",{"_index":2168,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/key.entity.ts:8",{"_index":2167,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/filesystem",{"_index":1663,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["src/crypto/key/key.module.ts",{"_index":2169,"title":{},"body":{"modules/KeyModule.html":{}}}],["src/crypto/key/key.module.ts:36",{"_index":2171,"title":{},"body":{"modules/KeyModule.html":{}}}],["src/crypto/key/key.service.ts",{"_index":2194,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:11",{"_index":2200,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:17",{"_index":2201,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:23",{"_index":2196,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:29",{"_index":2197,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:30",{"_index":2198,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:31",{"_index":2199,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:37",{"_index":2203,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/vault",{"_index":3312,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["src/database/database.module.ts",{"_index":1519,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/health/health.controller.ts",{"_index":1768,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:25",{"_index":1776,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1784,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/issuer/authorize/authorize.controller.ts",{"_index":636,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:36",{"_index":650,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:58",{"_index":658,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:82",{"_index":661,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:98",{"_index":647,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.service.ts",{"_index":716,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["src/issuer/authorize/authorize.service.ts:163",{"_index":736,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:181",{"_index":728,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:222",{"_index":739,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:236",{"_index":743,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:27",{"_index":727,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:38",{"_index":733,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:45",{"_index":730,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:68",{"_index":741,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:94",{"_index":745,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/dto/authorize",{"_index":692,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["src/issuer/authorize/dto/par",{"_index":2594,"title":{},"body":{"classes/ParResponseDto.html":{}}}],["src/issuer/credentials",{"_index":1206,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"classes/PresentationDuringIssuance.html":{},"classes/SchemaResponse.html":{},"classes/VCT.html":{}}}],["src/issuer/credentials/credential",{"_index":1110,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["src/issuer/credentials/credentials.controller.ts",{"_index":1176,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:35",{"_index":1185,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:45",{"_index":1187,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:58",{"_index":1183,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.service.ts",{"_index":1223,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:127",{"_index":1242,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:153",{"_index":1240,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:17",{"_index":1231,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:33",{"_index":1245,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:46",{"_index":1238,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:62",{"_index":1235,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts",{"_index":1073,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:11",{"_index":1088,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:13",{"_index":1097,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:16",{"_index":1085,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:20",{"_index":1082,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:23",{"_index":1086,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:27",{"_index":1098,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:31",{"_index":1096,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:38",{"_index":1093,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts",{"_index":1979,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:11",{"_index":1984,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:7",{"_index":1982,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/entities/issuance",{"_index":1937,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["src/issuer/issuance/issuance.controller.ts",{"_index":1962,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:28",{"_index":1968,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:38",{"_index":1971,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:54",{"_index":1966,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.service.ts",{"_index":1987,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:10",{"_index":1992,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:22",{"_index":1997,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:35",{"_index":1999,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:51",{"_index":2002,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:76",{"_index":1995,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuer",{"_index":2017,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["src/issuer/issuer.module.ts",{"_index":2072,"title":{},"body":{"modules/IssuerModule.html":{}}}],["src/issuer/oid4vci/dto/notification",{"_index":2255,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["src/issuer/oid4vci/dto/offer",{"_index":2274,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts",{"_index":2286,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:28",{"_index":2290,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:42",{"_index":2294,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts",{"_index":2312,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:112",{"_index":2320,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:162",{"_index":2322,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:273",{"_index":2324,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:38",{"_index":2331,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:40",{"_index":2317,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:45",{"_index":2329,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:51",{"_index":2328,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:62",{"_index":2327,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/util.ts",{"_index":3598,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/issuer/status",{"_index":3173,"title":{},"body":{"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["src/main.ts",{"_index":3590,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/registrar/generated/client/types.ts",{"_index":983,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["src/registrar/generated/client/utils.ts",{"_index":1787,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["src/registrar/generated/client/utils.ts:331",{"_index":1793,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:337",{"_index":1795,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:341",{"_index":1801,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:348",{"_index":1799,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:353",{"_index":1797,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:360",{"_index":1804,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:370",{"_index":1806,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/core/auth.ts",{"_index":497,"title":{},"body":{"interfaces/Auth.html":{}}}],["src/registrar/generated/core/bodyserializer.ts",{"_index":2782,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["src/registrar/generated/core/params.ts",{"_index":1610,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["src/registrar/generated/core/pathserializer.ts",{"_index":2894,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["src/registrar/generated/core/types.ts",{"_index":910,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["src/registrar/registrar",{"_index":2800,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["src/registrar/registrar.module.ts",{"_index":2809,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["src/registrar/registrar.service.ts",{"_index":6,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:109",{"_index":2833,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:117",{"_index":2835,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:129",{"_index":2837,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:144",{"_index":2838,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:161",{"_index":2831,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:186",{"_index":2840,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:204",{"_index":2832,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:231",{"_index":2828,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:272",{"_index":2830,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:329",{"_index":2834,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:352",{"_index":2839,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:53",{"_index":2842,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:57",{"_index":2841,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:61",{"_index":2826,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:78",{"_index":2836,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/session/entities/session.entity.ts",{"_index":2924,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:36",{"_index":2933,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:39",{"_index":2934,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:44",{"_index":2931,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:49",{"_index":2927,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:54",{"_index":2938,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:59",{"_index":2925,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:64",{"_index":2942,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:69",{"_index":2928,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:74",{"_index":2937,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:79",{"_index":2929,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:84",{"_index":2944,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:89",{"_index":2935,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:94",{"_index":2939,"title":{},"body":{"entities/Session.html":{}}}],["src/session/session.controller.ts",{"_index":2950,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:23",{"_index":2954,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:32",{"_index":2957,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:42",{"_index":2961,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.module.ts",{"_index":3115,"title":{},"body":{"modules/SessionModule.html":{}}}],["src/session/session.service.ts",{"_index":3123,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:10",{"_index":3128,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:23",{"_index":3143,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:40",{"_index":3135,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:50",{"_index":3132,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:65",{"_index":3138,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:74",{"_index":3137,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:83",{"_index":3141,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:90",{"_index":3149,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/utils/logger",{"_index":2205,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["src/utils/session",{"_index":2974,"title":{},"body":{"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["src/utils/webhook.dto.ts",{"_index":305,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["src/utils/webhook.dto.ts:13",{"_index":313,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook.dto.ts:19",{"_index":317,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook.dto.ts:36",{"_index":3425,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook.dto.ts:43",{"_index":3424,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook.dto.ts:54",{"_index":3428,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook.dto.ts:62",{"_index":3427,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/verifier/oid4vp/dto/authorization",{"_index":632,"title":{},"body":{"classes/AuthorizationResponse.html":{}}}],["src/verifier/oid4vp/dto/presentation",{"_index":2648,"title":{},"body":{"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"miscellaneous/enumerations.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts",{"_index":2428,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:34",{"_index":2435,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:53",{"_index":2438,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.module.ts",{"_index":2455,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts",{"_index":2458,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:20",{"_index":2462,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:215",{"_index":2470,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:264",{"_index":2471,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:41",{"_index":2464,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/presentations/dto/auth",{"_index":618,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["src/verifier/presentations/dto/vp",{"_index":2843,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["src/verifier/presentations/entities/presentation",{"_index":2597,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["src/verifier/presentations/presentations.controller.ts",{"_index":2615,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:111",{"_index":2619,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:121",{"_index":2627,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:137",{"_index":2621,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:79",{"_index":2625,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.module.ts",{"_index":2657,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["src/verifier/presentations/presentations.service.ts",{"_index":2663,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:109",{"_index":2699,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:122",{"_index":2705,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:145",{"_index":2704,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:160",{"_index":2701,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:177",{"_index":2693,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:22",{"_index":2677,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:40",{"_index":2689,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:54",{"_index":2688,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:67",{"_index":2696,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:78",{"_index":2682,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:88",{"_index":2686,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/resolver/dto/issuer",{"_index":2063,"title":{},"body":{"interfaces/IssuerMetadata.html":{}}}],["src/verifier/resolver/resolver.module.ts",{"_index":2850,"title":{},"body":{"modules/ResolverModule.html":{}}}],["src/verifier/resolver/resolver.service.ts",{"_index":2852,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/resolver/resolver.service.ts:12",{"_index":2855,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/resolver/resolver.service.ts:21",{"_index":2857,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/verifier.module.ts",{"_index":3422,"title":{},"body":{"modules/VerifierModule.html":{}}}],["src/well",{"_index":1143,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{}}}],["stable",{"_index":3694,"title":{},"body":{"index.html":{}}}],["stack",{"_index":3044,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"index.html":{}}}],["stack—so",{"_index":3631,"title":{},"body":{"index.html":{}}}],["stage",{"_index":2383,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["standardized",{"_index":3606,"title":{},"body":{"index.html":{}}}],["start",{"_index":2467,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"index.html":{}}}],["started",{"_index":3099,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"injectables/SessionLoggerService.html":{}}}],["starting",{"_index":3026,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["starts",{"_index":144,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["starttime",{"_index":3027,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["state",{"_index":621,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/SessionService.html":{},"license.html":{}}}],["stated",{"_index":3837,"title":{},"body":{"license.html":{}}}],["statement",{"_index":3895,"title":{},"body":{"license.html":{}}}],["static",{"_index":396,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"changelog.html":{},"dependencies.html":{}}}],["stating",{"_index":3874,"title":{},"body":{"license.html":{}}}],["status",{"_index":553,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"dependencies.html":{},"index.html":{}}}],["status_list",{"_index":3250,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuscode",{"_index":486,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["statuslist",{"_index":3193,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslist(file.elements",{"_index":3224,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslist+jwt",{"_index":3228,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslistcontroller",{"_index":3172,"title":{"controllers/StatusListController.html":{}},"body":{"controllers/StatusListController.html":{},"modules/StatusListModule.html":{}}}],["statuslistfetcher",{"_index":2668,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["statuslistfile",{"_index":3187,"title":{"interfaces/StatusListFile.html":{}},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslistjwtheaderparameters",{"_index":3194,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslistmodule",{"_index":2069,"title":{"modules/StatusListModule.html":{}},"body":{"modules/IssuerModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules.html":{},"overview.html":{}}}],["statuslistservice",{"_index":1229,"title":{"injectables/StatusListService.html":{}},"body":{"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"overview.html":{}}}],["statusmapping",{"_index":3196,"title":{"entities/StatusMapping.html":{}},"body":{"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{}}}],["statusmappingrepository",{"_index":3203,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statusupdatedto",{"_index":2959,"title":{"classes/StatusUpdateDto.html":{}},"body":{"controllers/SessionController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{}}}],["stdio",{"_index":1412,"title":{},"body":{"injectables/CryptoService.html":{}}}],["step",{"_index":685,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/CryptoService.html":{},"injectables/SessionLoggerService.html":{},"injectables/VaultKeyService.html":{}}}],["still",{"_index":214,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"index.html":{}}}],["stoppage",{"_index":3958,"title":{},"body":{"license.html":{}}}],["storage",{"_index":3656,"title":{},"body":{"index.html":{}}}],["store",{"_index":240,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["store(tenantid",{"_index":1130,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["storeaccesscertificate",{"_index":1335,"title":{},"body":{"injectables/CryptoService.html":{}}}],["storeaccesscertificate(crt",{"_index":1357,"title":{},"body":{"injectables/CryptoService.html":{}}}],["storeconfig",{"_index":3269,"title":{},"body":{"injectables/StatusListService.html":{}}}],["storeconfig(content",{"_index":3236,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["storecredentialconfiguration",{"_index":1180,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{}}}],["storecredentialconfiguration(config",{"_index":1186,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["storecredentialconfiguration(tenantid",{"_index":1244,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["stored",{"_index":1133,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["storeexistingrp",{"_index":2825,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["storeexistingrp(name",{"_index":205,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["storeissuanceconfiguration",{"_index":1965,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["storeissuanceconfiguration(config",{"_index":1969,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["storeissuanceconfiguration(tenantid",{"_index":2001,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["storepresentationconfig",{"_index":2617,"title":{},"body":{"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["storepresentationconfig(config",{"_index":2626,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["storepresentationconfig(vprequest",{"_index":2695,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid",{"_index":2673,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid(registrationcertid",{"_index":2698,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["stores",{"_index":200,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["strategy",{"_index":2132,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["stream",{"_index":1023,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["string",{"_index":18,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["stringified",{"_index":1913,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["strings",{"_index":973,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["stripemptyslots",{"_index":1635,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["stripemptyslots(params",{"_index":1661,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["structure",{"_index":1555,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/PresentationConfig.html":{}}}],["structured",{"_index":3058,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["style",{"_index":947,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["sub",{"_index":585,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{}}}],["subj",{"_index":1429,"title":{},"body":{"injectables/CryptoService.html":{}}}],["subject",{"_index":256,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{},"license.html":{}}}],["subjectaltname=dns:${uri",{"_index":1432,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sublicense",{"_index":3833,"title":{},"body":{"license.html":{}}}],["submission",{"_index":3897,"title":{},"body":{"license.html":{}}}],["submit",{"_index":3803,"title":{},"body":{"license.html":{}}}],["submitted",{"_index":3801,"title":{},"body":{"license.html":{}}}],["subsequently",{"_index":3820,"title":{},"body":{"license.html":{}}}],["succeeded",{"_index":3109,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["successfully",{"_index":2540,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["such",{"_index":1563,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/Session.html":{},"license.html":{}}}],["summary",{"_index":548,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["super",{"_index":2103,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/VaultKeyService.html":{}}}],["super.canactivate(context",{"_index":2108,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["supersede",{"_index":3905,"title":{},"body":{"license.html":{}}}],["support",{"_index":562,"title":{},"body":{"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/Session.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{}}}],["supported",{"_index":332,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/CryptoService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{}}}],["supportedauthenticationscheme",{"_index":2334,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["supportedauthenticationscheme.clientattestationjwt",{"_index":785,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["supportedauthenticationscheme.dpop",{"_index":2378,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["supports",{"_index":525,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["svg",{"_index":4007,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":1516,"title":{},"body":{"injectables/CryptoService-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["symmetric",{"_index":2158,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["synchronize",{"_index":1539,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["syntax",{"_index":3993,"title":{},"body":{"license.html":{}}}],["system",{"_index":1673,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["systems",{"_index":3811,"title":{},"body":{"license.html":{}}}],["t",{"_index":1055,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/EncryptionService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{}}}],["t['baseurl",{"_index":996,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["t['throwonerror",{"_index":1032,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tag",{"_index":3391,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["tap",{"_index":3004,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["tap((data",{"_index":3030,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["target",{"_index":454,"title":{},"body":{"modules/AppModule.html":{}}}],["tdata",{"_index":1039,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tdata[keyof",{"_index":1038,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tdatashape",{"_index":1056,"title":{"interfaces/TDataShape.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tell",{"_index":2567,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["tenancy",{"_index":2941,"title":{},"body":{"entities/Session.html":{}}}],["tenant",{"_index":149,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/FileSystemKeyService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"changelog.html":{}}}],["tenant_events",{"_index":66,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["tenantid",{"_index":151,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["tenantid)).uri",{"_index":833,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["tenantid/.well",{"_index":3430,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["tenantid/authorize",{"_index":637,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["tenantid/oid4vp",{"_index":2429,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["tenantid/status",{"_index":3175,"title":{},"body":{"controllers/StatusListController.html":{}}}],["tenantid/vci",{"_index":2287,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["tenanturl",{"_index":2485,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["term",{"_index":3661,"title":{},"body":{"index.html":{}}}],["terminate",{"_index":3861,"title":{},"body":{"license.html":{}}}],["terminusmodule",{"_index":1786,"title":{},"body":{"modules/HealthModule.html":{}}}],["terms",{"_index":3723,"title":{},"body":{"license.html":{}}}],["terror",{"_index":1040,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["terror[keyof",{"_index":1041,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["test",{"_index":2140,"title":{},"body":{"injectables/JwtStrategy.html":{},"changelog.html":{}}}],["test/.../import.ts",{"_index":3583,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../index.ts",{"_index":3585,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/import/import.ts",{"_index":3591,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/webhook/src/index.ts",{"_index":2749,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"miscellaneous/functions.html":{}}}],["text",{"_index":1029,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["textencoder().encode(secret",{"_index":1741,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["then((cryptokey",{"_index":3367,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["then((key",{"_index":1604,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["then((res",{"_index":221,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["then((response",{"_index":207,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["then((session",{"_index":789,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["then(async",{"_index":194,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["theory",{"_index":3942,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":3797,"title":{},"body":{"license.html":{}}}],["third",{"_index":3887,"title":{},"body":{"license.html":{}}}],["this._fns",{"_index":1924,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this._fns.indexof(id",{"_index":1926,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this._fns.length",{"_index":1929,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this._fns[id",{"_index":1925,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this._fns[index",{"_index":1928,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this.accesstoken",{"_index":130,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.addaccesscertificate(config",{"_index":218,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.addrp(tenantid",{"_index":156,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.authorizeservice.authorizationchallengeendpoint",{"_index":691,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.authzmetadata",{"_index":3449,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.authorizeservice.sendauthorizationresponse",{"_index":678,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.validatetokenrequest(body",{"_index":690,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authzmetadata(tenantid",{"_index":803,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.authzservice.authzmetadata(tenantid",{"_index":2344,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.client",{"_index":125,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.client.setconfig",{"_index":126,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.clients",{"_index":875,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clientservice.validateclient",{"_index":582,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.config",{"_index":2240,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.disablehttplogger",{"_index":2249,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.disablesessionlogger",{"_index":2248,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enabledebugmode",{"_index":2250,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.level",{"_index":2251,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.logformat",{"_index":2252,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice",{"_index":232,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.get",{"_index":2243,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/VaultKeyService.html":{}}}],["this.configservice.get('log_level",{"_index":2242,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice.get('oidc",{"_index":1766,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["this.configservice.get('registrar_url",{"_index":140,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.get('vault_url",{"_index":3344,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.configservice.getorthrow",{"_index":880,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vciService.html":{}}}],["this.configservice.getorthrow('auth_client_id",{"_index":879,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.configservice.getorthrow('folder",{"_index":285,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["this.configservice.getorthrow('jwt_expires_in",{"_index":1739,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('jwt_issuer",{"_index":1737,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('jwt_secret",{"_index":1736,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('oidc_client_id",{"_index":114,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('oidc_client_secret",{"_index":116,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('oidc_issuer_url",{"_index":112,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('public_url",{"_index":763,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.configservice.getorthrow('public_url')}${req.url",{"_index":794,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.configservice.getorthrow('public_url')}/${session.tenantid}/credentials/vct/${credentialconfigurationid",{"_index":1285,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.configservice.getorthrow('public_url')}/${tenantid",{"_index":816,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.configservice.getorthrow('public_url')}/${tenantid}/oid4vp/request/${requestid}/${values.session",{"_index":2551,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.configservice.getorthrow('registrar_url",{"_index":128,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('rp_name",{"_index":192,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('session_tidy_up_interval",{"_index":3158,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservice.getorthrow('session_ttl",{"_index":3168,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservie.get('crypto_alg",{"_index":1514,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["this.create(tenantid",{"_index":3349,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.createlist(tenantid",{"_index":3221,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.credentialconfigrepo",{"_index":1265,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findby",{"_index":1261,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findonebyorfail",{"_index":1294,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.save(value",{"_index":1259,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepository.delete",{"_index":1141,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.find",{"_index":1138,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.findone",{"_index":1139,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.save",{"_index":1140,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialsconfigservice.getbyid",{"_index":2011,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsservice.delete(user.sub",{"_index":1204,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.get(user.sub",{"_index":1201,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.getcredential",{"_index":2398,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.credentialsservice.getcredentialconfiguration",{"_index":2347,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.credentialsservice.getschema(id",{"_index":1222,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.getvct(id",{"_index":1220,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.store(user.sub",{"_index":1202,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.crpytoservice.getcertchain",{"_index":1288,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.crpytoservice.keyservice.signer",{"_index":1272,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.crypto",{"_index":1700,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.crypto.alg",{"_index":1714,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.crypto.generatekeypair",{"_index":1707,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.crypto.getsigner(keys.privatekey",{"_index":1704,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.cryptoservice.getalg",{"_index":1724,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["this.cryptoservice.getcallbackcontext",{"_index":2341,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.cryptoservice.getcallbackcontext(tenantid",{"_index":761,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.cryptoservice.getcertchain",{"_index":2532,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.cryptoservice.getcertchain('signing",{"_index":3229,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.cryptoservice.getcrypto",{"_index":1701,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.cryptoservice.getjwks(tenantid).then((key",{"_index":3452,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.cryptoservice.keyservice.getpublickey",{"_index":236,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["this.cryptoservice.signjwt",{"_index":2537,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.cryptoservice.signjwt(header",{"_index":3230,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.cryptoservice.storeaccesscertificate",{"_index":242,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.db.pingcheck('database",{"_index":1783,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.dertojwtsignature(res.data.data.signature.split(':')[2",{"_index":3374,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.encryptionservice.decryptjwe",{"_index":2554,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.getencryptionpublickey",{"_index":2507,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.eventemitter.emit(tenant_events.tenant_init",{"_index":908,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.eventemitter.emit(tenant_events.tenant_keys",{"_index":1387,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.filename",{"_index":3210,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.folder",{"_index":1379,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{}}}],["this.getaccesscertificateid(config",{"_index":157,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.getauthorizationserver",{"_index":764,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.getauthorizationserver(tenantid).createaccesstokenresponse",{"_index":815,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.getcallbackcontext(tenantid).hash",{"_index":1489,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.getclients",{"_index":871,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.getclients().find((c",{"_index":883,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.getconfig(session.tenantid",{"_index":3242,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.getconfig(tenantid",{"_index":3223,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.getconfig(tenantid).jwt",{"_index":3233,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.getinterceptorindex(id",{"_index":1927,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this.getjwk",{"_index":3365,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getkeys(tenant",{"_index":1702,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.getkeys(tenantid",{"_index":1703,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.getkeys(tenantid).then((keys",{"_index":1721,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.getkid(tenantid",{"_index":3370,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getpublickey('jwk",{"_index":3360,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getpublickey('pem",{"_index":3346,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getsignjwtcallback(tenantid",{"_index":1481,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.hascerts(tenantid",{"_index":1386,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.headers",{"_index":3345,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.health.check",{"_index":1782,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httpservice.get",{"_index":2877,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["this.httpservice.post",{"_index":2581,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/VaultKeyService.html":{}}}],["this.init(tenantid",{"_index":1590,"title":{},"body":{"injectables/EncryptionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.isenabled",{"_index":108,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.ishttploggerenabled",{"_index":2253,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.issuanceconfigrepo.create",{"_index":2013,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.delete",{"_index":2015,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.find",{"_index":2006,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.findoneorfail",{"_index":2008,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.save(issuanceconfig",{"_index":2014,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceservice",{"_index":2356,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuanceservice.deleteissuanceconfiguration(user.sub",{"_index":1978,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfiguration(user.sub",{"_index":1975,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfigurationbyid",{"_index":849,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.issuanceservice.storeissuanceconfiguration",{"_index":1976,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuer",{"_index":2342,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.createcredentialissuermetadata",{"_index":2346,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.createcredentialresponse",{"_index":2411,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.parsecredentialrequest",{"_index":2369,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.verifycredentialrequestjwtproof",{"_index":2391,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuermetadata(tenantid",{"_index":2361,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.isusingexternaloidc",{"_index":1734,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.jwtservice.generatetoken(payload",{"_index":587,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwtservice.isusingexternaloidc",{"_index":559,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.kbverifier.bind(this",{"_index":2712,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.keyservice.getpublickey",{"_index":1493,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.keyservice.getpublickey('jwk",{"_index":1463,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.keyservice.init(tenantid",{"_index":1385,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.keyservice.signjwt(payload",{"_index":1462,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.loadclients",{"_index":876,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.loadconfig(tenantid",{"_index":154,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.loadconfig(tenantid).id",{"_index":254,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.loadconfiguration",{"_index":2239,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.logger.error",{"_index":3040,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.info",{"_index":3021,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.setcontext('sessionlogger",{"_index":3020,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.logger.setcontext('sessionloggerservice",{"_index":3096,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.oauth2client",{"_index":117,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.oauth2client.clientcredentials().then((token",{"_index":166,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.oid4vciservice.createoffer",{"_index":2054,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.oid4vciservice.getcredential(req",{"_index":2304,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.handlenotification(req",{"_index":2307,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.issuermetadata(tenantid",{"_index":3448,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.oid4vpservice.createauthorizationrequest",{"_index":2447,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.oid4vpservice.createrequest",{"_index":2638,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.oid4vpservice.createrequest('pid",{"_index":832,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.oid4vpservice.getresponse(body",{"_index":2449,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.parsechallengerequest",{"_index":852,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.parseloglevel",{"_index":2241,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.presentationsservice.deletepresentationconfig(id",{"_index":2647,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.getpresentationconfig",{"_index":2487,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.getpresentationconfigs(user.sub",{"_index":2644,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.parseresponse",{"_index":2562,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.storepresentationconfig",{"_index":2645,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.storercid",{"_index":280,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.privateencryptionkey",{"_index":1605,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.privateenncryptionpath",{"_index":1591,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.privatekeypath",{"_index":1705,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.publicencryptionkey",{"_index":1606,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.publicencryptionpath",{"_index":1593,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.publickeypath",{"_index":1706,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.reflector.get",{"_index":3008,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.reflector.getallandoverride",{"_index":2105,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.refreshaccesstoken",{"_index":148,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.registrarservice.addregistrationcertificate",{"_index":2493,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.isenabled",{"_index":2490,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.resolverservice.resolvepublickey",{"_index":2727,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.resourceserver",{"_index":2343,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.resourceserver.verifyresourcerequest",{"_index":2373,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sanitizebody(request.body",{"_index":3025,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.saveconfig(config",{"_index":199,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.schedulerregistry.addinterval('tidyupsessions",{"_index":3161,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sdjwtinstance",{"_index":2710,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.sendauthorizationcode(res",{"_index":843,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.sessionlogger.logauthorizationrequest(logcontext",{"_index":2496,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logcredentialissuance",{"_index":2400,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionlogger.logcredentialverification",{"_index":2564,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowcomplete(logcontext",{"_index":2408,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowerror(logcontext",{"_index":2416,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowstart(logcontext",{"_index":2385,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.lognotification(logcontext",{"_index":2423,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionlogger.logsession",{"_index":2539,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logsessionerror",{"_index":2425,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionrepository.delete",{"_index":3169,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.find",{"_index":3164,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail",{"_index":3165,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail(where",{"_index":3166,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.save(session",{"_index":3162,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.update",{"_index":3163,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionservice",{"_index":787,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.sessionservice.add(auth_session",{"_index":2494,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.add(body.issuer_state",{"_index":686,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.sessionservice.add(issuer_state",{"_index":856,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.sessionservice.add(res.state",{"_index":2568,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.add(session.id",{"_index":2406,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionservice.add(values.session",{"_index":2549,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.create",{"_index":2364,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionservice.get",{"_index":2379,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionservice.get(body.auth_session",{"_index":840,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.sessionservice.get(body.issuer_state",{"_index":844,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.sessionservice.get(id",{"_index":2971,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.get(res.state",{"_index":2556,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.getall",{"_index":2969,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.getby",{"_index":799,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.setauthcode",{"_index":854,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.setauthcode(values.issuer_state",{"_index":792,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.setentry(entry.index",{"_index":3258,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.setupclient(client.id",{"_index":873,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.shouldlog",{"_index":3097,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.sign(input",{"_index":3351,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.sign(signinginput",{"_index":3384,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.signjwt(header",{"_index":1495,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.statuslistfetcher.bind(this",{"_index":2713,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.statuslistservice.createentry",{"_index":1286,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.statuslistservice.getlist(tenantid",{"_index":3186,"title":{},"body":{"controllers/StatusListController.html":{}}}],["this.statuslistservice.updatestatus(value",{"_index":2973,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.statusmappingrepository.findby",{"_index":3254,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.statusmappingrepository.save",{"_index":3249,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.storeconfig(file",{"_index":3232,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.storeexistingrp(name",{"_index":197,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.tidyupsessions",{"_index":3156,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.vaulturl",{"_index":3343,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.vaulturl}/keys/${tenantid",{"_index":3357,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.vaulturl}/sign/${tenantid",{"_index":3371,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.verifier.bind(this",{"_index":2711,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository",{"_index":2720,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.delete",{"_index":2719,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.find",{"_index":2714,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.save(vprequest",{"_index":2718,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.update",{"_index":2722,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["those",{"_index":3842,"title":{},"body":{"license.html":{}}}],["through",{"_index":3730,"title":{},"body":{"license.html":{}}}],["throw",{"_index":238,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{}}}],["throwonerror",{"_index":985,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tidy",{"_index":3145,"title":{},"body":{"injectables/SessionService.html":{}}}],["tidyupsessions",{"_index":3125,"title":{},"body":{"injectables/SessionService.html":{}}}],["time",{"_index":2596,"title":{},"body":{"classes/ParResponseDto.html":{}}}],["times",{"_index":2414,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["timestamp",{"_index":1945,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["title",{"_index":3931,"title":{},"body":{"license.html":{}}}],["tmp",{"_index":3471,"title":{},"body":{"changelog.html":{}}}],["todo",{"_index":247,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["together",{"_index":3615,"title":{},"body":{"index.html":{}}}],["token",{"_index":89,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"controllers/CredentialsController.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"index.html":{}}}],["token(body",{"_index":659,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["token.accesstoken",{"_index":167,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["token.decorator",{"_index":541,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["token_endpoint",{"_index":767,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["token_endpoint_auth_methods_supported",{"_index":784,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["token_exchange",{"_index":3110,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["token_type",{"_index":556,"title":{},"body":{"controllers/AuthController.html":{},"classes/TokenResponse.html":{}}}],["tokenpayload",{"_index":540,"title":{"interfaces/TokenPayload.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"interfaces/TokenPayload.html":{}}}],["tokenpayload.nonce",{"_index":2395,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["tokenpayload.sub",{"_index":2380,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["tokenresponse",{"_index":520,"title":{"classes/TokenResponse.html":{}},"body":{"controllers/AuthController.html":{},"classes/TokenResponse.html":{}}}],["tokens",{"_index":2160,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["tolowercase",{"_index":1473,"title":{},"body":{"injectables/CryptoService.html":{}}}],["tort",{"_index":3943,"title":{},"body":{"license.html":{}}}],["tostring('ascii",{"_index":574,"title":{},"body":{"controllers/AuthController.html":{}}}],["tostring('base64",{"_index":3415,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["tough",{"_index":3613,"title":{},"body":{"index.html":{}}}],["town",{"_index":2757,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["trace",{"_index":919,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["tracking",{"_index":2651,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["trade",{"_index":3912,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":3878,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":3910,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":3840,"title":{},"body":{"license.html":{}}}],["transformation",{"_index":3770,"title":{},"body":{"license.html":{}}}],["transformer",{"_index":318,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["transformers",{"_index":976,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["transforming",{"_index":967,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["translatetime",{"_index":458,"title":{},"body":{"modules/AppModule.html":{}}}],["translation",{"_index":3771,"title":{},"body":{"license.html":{}}}],["transport",{"_index":452,"title":{},"body":{"modules/AppModule.html":{}}}],["true",{"_index":136,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"interfaces/TDataShape.html":{}}}],["true})@isarray",{"_index":1981,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["true})@isobject",{"_index":1081,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/PresentationConfig.html":{}}}],["true})@isobject()@isoptional",{"_index":1095,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isstring",{"_index":2601,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@jointable",{"_index":1092,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["trust",{"_index":2868,"title":{},"body":{"injectables/ResolverService.html":{}}}],["try",{"_index":565,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/VaultKeyService.html":{}}}],["ts",{"_index":3484,"title":{},"body":{"changelog.html":{}}}],["ttl",{"_index":3167,"title":{},"body":{"injectables/SessionService.html":{}}}],["typ",{"_index":2527,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["type",{"_index":19,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["type(undefined)@isobject",{"_index":3423,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["type(undefined)@isoptional()@isobject",{"_index":3426,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["typeof",{"_index":88,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["typeorm",{"_index":1103,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"dependencies.html":{}}}],["typeorm/query",{"_index":3153,"title":{},"body":{"injectables/SessionService.html":{}}}],["typeorm/repository/repository",{"_index":2707,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["typeormhealthindicator",{"_index":1778,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormmodule",{"_index":1520,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/PresentationsModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{}}}],["typeormmodule.forfeature([issuanceconfig",{"_index":2088,"title":{},"body":{"modules/IssuerModule.html":{}}}],["typeormmodule.forfeature([keyentity",{"_index":2192,"title":{},"body":{"modules/KeyModule.html":{}}}],["typeormmodule.forfeature([presentationconfig",{"_index":2662,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["typeormmodule.forfeature([session",{"_index":3122,"title":{},"body":{"modules/SessionModule.html":{}}}],["typeormmodule.forfeature([statusmapping",{"_index":3266,"title":{},"body":{"modules/StatusListModule.html":{}}}],["typeormmodule.forrootasync",{"_index":1536,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleoptions",{"_index":1521,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":1813,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"modules/RegistrarModule.html":{},"injectables/VaultKeyService.html":{},"license.html":{}}}],["types.get(this.cryptoservice.getalg",{"_index":3359,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["types.set('ed25519",{"_index":3356,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["types.set('es256",{"_index":3353,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["typescript",{"_index":177,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["typically",{"_index":1166,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{}}}],["unauthorizedexception",{"_index":529,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception('invalid",{"_index":583,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined",{"_index":453,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Auth.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"interfaces/Fields.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{}}}],["undefined})@apiproduces('application/json",{"_index":2026,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["undefined})@apiresponse({status",{"_index":518,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@post('offer",{"_index":2028,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["undefined})@post('request",{"_index":2624,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["under",{"_index":3717,"title":{},"body":{"index.html":{},"license.html":{}}}],["unified",{"_index":3605,"title":{},"body":{"index.html":{}}}],["union",{"_index":3738,"title":{},"body":{"license.html":{}}}],["unique",{"_index":25,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{}}}],["unknown",{"_index":653,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CredentialsService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Params.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["unless",{"_index":3899,"title":{},"body":{"license.html":{}}}],["unlinksync",{"_index":1366,"title":{},"body":{"injectables/CryptoService.html":{}}}],["unlinksync(file",{"_index":1453,"title":{},"body":{"injectables/CryptoService.html":{}}}],["unused",{"_index":2533,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["up",{"_index":352,"title":{},"body":{"controllers/AppController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/SessionService.html":{}}}],["update",{"_index":1792,"title":{},"body":{"classes/Interceptors.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["update(data",{"_index":1474,"title":{},"body":{"injectables/CryptoService.html":{}}}],["update(id",{"_index":1802,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["update.dto",{"_index":2966,"title":{},"body":{"controllers/SessionController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["update.dto.ts",{"_index":3291,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:16",{"_index":3293,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:24",{"_index":3296,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:8",{"_index":3294,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["updated",{"_index":2628,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["updatestatus",{"_index":3270,"title":{},"body":{"injectables/StatusListService.html":{}}}],["updatestatus(value",{"_index":3253,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["upload",{"_index":3486,"title":{},"body":{"changelog.html":{}}}],["uri",{"_index":904,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"miscellaneous/enumerations.html":{}}}],["url",{"_index":338,"title":{},"body":{"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Interceptors.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{}}}],["url(request.url",{"_index":2759,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["url.pathname",{"_index":2761,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["url.replace",{"_index":1839,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["url.replace(match",{"_index":1843,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["urlsearchparams",{"_index":2788,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["urlsearchparamsbodyserializer",{"_index":2797,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["urn:${randomuuid",{"_index":681,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["use",{"_index":107,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/EC_Public.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"changelog.html":{},"license.html":{}}}],["use(fn",{"_index":1805,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["used",{"_index":202,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"entities/CredentialConfig.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"entities/IssuanceConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["useexternaloidc",{"_index":2136,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usefactory",{"_index":445,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["useful",{"_index":961,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/TDataShape.html":{}}}],["useguards",{"_index":1188,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["useguards(jwtauthguard",{"_index":1195,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["useinterceptors",{"_index":2295,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["useinterceptors(sessionloggerinterceptor",{"_index":2301,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["user",{"_index":481,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"modules/SessionModule.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{}}}],["user.sub",{"_index":1977,"title":{},"body":{"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["username",{"_index":1545,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["uses",{"_index":1771,"title":{},"body":{"controllers/HealthController.html":{},"injectables/SessionLoggerService.html":{}}}],["using",{"_index":159,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"index.html":{},"license.html":{}}}],["utf",{"_index":297,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["util",{"_index":2337,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["utility",{"_index":1496,"title":{},"body":{"injectables/CryptoService.html":{}}}],["utils",{"_index":991,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["utils.ts",{"_index":1497,"title":{},"body":{"injectables/CryptoService.html":{}}}],["utils/session",{"_index":2082,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["utils/webhook.dto",{"_index":755,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/VCT.html":{}}}],["uuid",{"_index":1696,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"dependencies.html":{}}}],["v",{"_index":1500,"title":{},"body":{"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"index.html":{}}}],["v1",{"_index":3701,"title":{},"body":{"index.html":{}}}],["v2",{"_index":3702,"title":{},"body":{"index.html":{}}}],["v4",{"_index":1695,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["valid",{"_index":164,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/StatusUpdateDto.html":{}}}],["valid('json",{"_index":438,"title":{},"body":{"modules/AppModule.html":{}}}],["valid('trace",{"_index":426,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":662,"title":{},"body":{"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["validate(payload",{"_index":2128,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateclient",{"_index":1061,"title":{},"body":{"injectables/ClientService.html":{}}}],["validateclient(clientid",{"_index":882,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["validated",{"_index":2393,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["validatejsonfile",{"_index":3589,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validatejsonfile(filepath",{"_index":3597,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validatetokenrequest",{"_index":723,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["validatetokenrequest(body",{"_index":744,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["validating",{"_index":960,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["validation",{"_index":1753,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/RegistrarModule.html":{}}}],["validationschema",{"_index":418,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":322,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["value",{"_index":309,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"controllers/SessionController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["value.config",{"_index":1263,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.credentialconfigs",{"_index":2010,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.credentialconfigurationid",{"_index":3256,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["value.foreach((v",{"_index":2791,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["value.map((v",{"_index":2902,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["value.sessionid",{"_index":3255,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["value.status",{"_index":3259,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["value.tenantid",{"_index":1258,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.toisostring",{"_index":2916,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["value.tostring",{"_index":2796,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["valueonly",{"_index":1840,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["values",{"_index":98,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"entities/CredentialConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionService.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{}}}],["values.join",{"_index":2919,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["values.session",{"_index":2546,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["values.uri",{"_index":2641,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["values.webhook",{"_index":2547,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["varchar",{"_index":3285,"title":{},"body":{"entities/StatusMapping.html":{}}}],["variable",{"_index":3148,"title":{},"body":{"injectables/SessionService.html":{}}}],["variables",{"_index":2814,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["various",{"_index":335,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["vars",{"_index":2534,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["vault",{"_index":2176,"title":{},"body":{"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{}}}],["vault').default('file",{"_index":2184,"title":{},"body":{"modules/KeyModule.html":{}}}],["vault_key_id",{"_index":2190,"title":{},"body":{"modules/KeyModule.html":{}}}],["vault_token",{"_index":2188,"title":{},"body":{"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{}}}],["vault_url",{"_index":2186,"title":{},"body":{"modules/KeyModule.html":{}}}],["vaultkeyservice",{"_index":2175,"title":{"injectables/VaultKeyService.html":{}},"body":{"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{}}}],["vaulturl",{"_index":3313,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["vc",{"_index":1254,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"dependencies.html":{},"index.html":{}}}],["vcs",{"_index":2665,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vct",{"_index":1078,"title":{"classes/VCT.html":{}},"body":{"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["vct(@param('id",{"_index":1219,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["vct(id",{"_index":1213,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["vendor",{"_index":3622,"title":{},"body":{"index.html":{}}}],["verbal",{"_index":3805,"title":{},"body":{"license.html":{}}}],["verbose",{"_index":2245,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["verifiable",{"_index":1216,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{}}}],["verification",{"_index":1755,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["verificationresult",{"_index":2930,"title":{},"body":{"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["verified",{"_index":1470,"title":{},"body":{"injectables/CryptoService.html":{},"entities/Session.html":{}}}],["verifiedproof",{"_index":2390,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["verifiedproof.signer.publicjwk",{"_index":2396,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["verifier",{"_index":1315,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{}}}],["verifier/oid4vp/dto/presentation",{"_index":2036,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["verifier/oid4vp/oid4vp.module",{"_index":2081,"title":{},"body":{"modules/IssuerModule.html":{}}}],["verifier/oid4vp/oid4vp.service",{"_index":754,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["verifier/presentations/dto/vp",{"_index":50,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["verifier/presentations/presentations.module",{"_index":2812,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["verifier/presentations/presentations.service",{"_index":53,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["verifier/verifier.module",{"_index":391,"title":{},"body":{"modules/AppModule.html":{}}}],["verifier_attestations",{"_index":2526,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["verifiermodule",{"_index":376,"title":{"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["verify",{"_index":776,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{}}}],["verify(data",{"_index":2729,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verify(res.vp_token[att",{"_index":2741,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verifyauthorizationcodeaccesstokenrequest",{"_index":805,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["verifyjwt",{"_index":1336,"title":{},"body":{"injectables/CryptoService.html":{}}}],["verifyjwt(compact",{"_index":1359,"title":{},"body":{"injectables/CryptoService.html":{}}}],["verifytoken",{"_index":2110,"title":{},"body":{"injectables/JwtService.html":{}}}],["verifytoken(token",{"_index":1754,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["version",{"_index":3461,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["versions",{"_index":3700,"title":{},"body":{"index.html":{}}}],["via",{"_index":684,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{},"index.html":{}}}],["video/'].some((type",{"_index":1869,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["view",{"_index":959,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["vitest",{"_index":3488,"title":{},"body":{"changelog.html":{}}}],["void",{"_index":1067,"title":{},"body":{"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["vp",{"_index":626,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"changelog.html":{}}}],["vp_formats",{"_index":2508,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["vp_nonce",{"_index":2495,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["vp_token",{"_index":622,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["vprequest",{"_index":2697,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequest.tenantid",{"_index":2717,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequestrepository",{"_index":2676,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vps",{"_index":2664,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["wallet",{"_index":826,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"index.html":{},"properties.html":{}}}],["wallets",{"_index":3604,"title":{},"body":{"index.html":{}}}],["want",{"_index":936,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["warn",{"_index":428,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["warranties",{"_index":3927,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":3922,"title":{},"body":{"license.html":{}}}],["way",{"_index":1050,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["we'll",{"_index":2050,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["web",{"_index":1552,"title":{},"body":{"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{}}}],["webhook",{"_index":329,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"entities/Session.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{}}}],["webhookauthconfig",{"_index":330,"title":{"classes/WebHookAuthConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["webhookconfig",{"_index":337,"title":{"classes/WebhookConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["webhookresponse",{"_index":2582,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhookresponse.data",{"_index":2584,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhookresponse.status",{"_index":2589,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhooks",{"_index":307,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["webhooksent",{"_index":2593,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhookurl",{"_index":2576,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webook",{"_index":2569,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["welcome",{"_index":3706,"title":{},"body":{"index.html":{}}}],["well",{"_index":386,"title":{},"body":{"modules/AppModule.html":{},"injectables/CryptoService.html":{},"controllers/WellKnownController.html":{}}}],["wellknowncontroller",{"_index":381,"title":{"controllers/WellKnownController.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{}}}],["wherever",{"_index":3886,"title":{},"body":{"license.html":{}}}],["whether",{"_index":2271,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"license.html":{}}}],["whole",{"_index":3791,"title":{},"body":{"license.html":{}}}],["within",{"_index":3822,"title":{},"body":{"license.html":{}}}],["without",{"_index":1761,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"license.html":{}}}],["won't",{"_index":1008,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["work",{"_index":3775,"title":{},"body":{"license.html":{}}}],["worker",{"_index":3502,"title":{},"body":{"changelog.html":{}}}],["works",{"_index":3784,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":3825,"title":{},"body":{"license.html":{}}}],["write",{"_index":272,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["writefilesync",{"_index":56,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["writefilesync(file",{"_index":3237,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["writefilesync(filepath",{"_index":292,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["writefilesync(join(folder",{"_index":1456,"title":{},"body":{"injectables/CryptoService.html":{}}}],["writefilesync(join(this.folder",{"_index":3347,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["writefilesync(sanext",{"_index":1440,"title":{},"body":{"injectables/CryptoService.html":{}}}],["writing",{"_index":274,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["written",{"_index":3806,"title":{},"body":{"license.html":{}}}],["x",{"_index":1559,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/VaultKeyService.html":{},"index.html":{}}}],["x509",{"_index":1428,"title":{},"body":{"injectables/CryptoService.html":{}}}],["x509_san_dns",{"_index":2500,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509_san_dns:${host",{"_index":2550,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509certificate",{"_index":2862,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x509certificate(buffer.from(cert",{"_index":2870,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x5c",{"_index":1287,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["y",{"_index":1560,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["yes",{"_index":737,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/SessionLoggerService.html":{}}}],["you're",{"_index":1052,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["your_api_key_here",{"_index":325,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["yyyy",{"_index":459,"title":{},"body":{"modules/AppModule.html":{}}}],["zeros",{"_index":3399,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["zoom",{"_index":377,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AccessCertificateResponse.html":{"url":"interfaces/AccessCertificateResponse.html","title":"interface - AccessCertificateResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccessCertificateResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Repsonse of access certificate request.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            crt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            revoked\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        crt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        crt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The public key in PEM format.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier of the access certificate.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        revoked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        revoked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates if the access certificate is revoked.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { OAuth2Client } from '@badgateway/oauth2-client';\nimport { client } from './generated/client.gen';\nimport {\n    accessCertificateControllerFindOne,\n    accessCertificateControllerRegister,\n    registrationCertificateControllerAll,\n    registrationCertificateControllerRegister,\n    relyingPartyControllerFindAll,\n    relyingPartyControllerRegister,\n} from './generated';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { RegistrationCertificateRequest } from '../verifier/presentations/dto/vp-request.dto';\nimport { PresentationsService } from '../verifier/presentations/presentations.service';\nimport { existsSync, readFileSync, writeFileSync } from 'node:fs';\nimport { RegistrarConfig } from './registrar-config';\nimport { join } from 'node:path';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { TENANT_EVENTS } from '../auth/tenant-events';\n\n/**\n * Repsonse of access certificate request.\n */\ninterface AccessCertificateResponse {\n    /**\n     * Unique identifier of the access certificate.\n     */\n    id: string;\n    /**\n     * The public key in PEM format.\n     */\n    crt: string;\n    /**\n     * Indicates if the access certificate is revoked.\n     */\n    revoked?: boolean;\n}\n\n/**\n * RegistrarService is responsible for managing the interaction with the registrar,\n * including adding relying parties, access certificates, and registration certificates.\n */\n@Injectable()\nexport class RegistrarService implements OnApplicationBootstrap, OnModuleInit {\n    /**\n     * OAuth2 client for interacting with the OIDC provider.\n     */\n    private oauth2Client: OAuth2Client;\n    /**\n     * Client for interacting with the registrar API.\n     */\n    private client: typeof client;\n    /**\n     * Access token for authenticating requests to the registrar.\n     */\n    private accessToken: string;\n\n    /**\n     * Constructor for the RegistrarService.\n     * @param configService - Instance of ConfigService for accessing configuration values.\n     * @param cryptoService - Instance of CryptoService for cryptographic operations.\n     * @param presentationsService - Instance of PresentationsService for handling presentations.\n     */\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private presentationsService: PresentationsService,\n    ) {}\n\n    /**\n     * Initializes the OAuth2 client and registrar client with the necessary configurations.\n     */\n    onModuleInit() {\n        //when not set, we will not use the registrar\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const oidcIssuerUrl =\n            this.configService.getOrThrow('OIDC_ISSUER_URL');\n        const clientId =\n            this.configService.getOrThrow('OIDC_CLIENT_ID');\n        const clientSecret =\n            this.configService.getOrThrow('OIDC_CLIENT_SECRET');\n\n        this.oauth2Client = new OAuth2Client({\n            server: `${oidcIssuerUrl}/protocol/openid-connect/token`,\n            clientId,\n            clientSecret,\n            discoveryEndpoint: `${oidcIssuerUrl}/.well-known/openid-configuration`,\n        });\n\n        this.client = client;\n        this.client.setConfig({\n            baseUrl: this.configService.getOrThrow('REGISTRAR_URL'),\n            auth: () => this.accessToken,\n        });\n    }\n\n    /**\n     * Checks if the registrar service is enabled based on the configuration.\n     * @returns True if the registrar service is enabled, false otherwise.\n     */\n    isEnabled() {\n        return !!this.configService.get('REGISTRAR_URL');\n    }\n\n    /**\n     * This function is called when the application starts.\n     * It will refresh the access token for the registrar.\n     */\n    async onApplicationBootstrap() {\n        if (!this.configService.get('REGISTRAR_URL')) {\n            return;\n        }\n        await this.refreshAccessToken();\n    }\n\n    /**\n     * This function is called when a tenant is initialized.\n     * @param tenantId\n     */\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    async onTenantInit(tenantId: string) {\n        if (!this.isEnabled()) {\n            return;\n        }\n        const config = this.loadConfig(tenantId);\n        if (!config.id) {\n            config.id = await this.addRp(tenantId);\n        }\n        await this.getAccessCertificateId(config, tenantId);\n    }\n\n    /**\n     * Refreshes the access token for the registrar using client credentials.\n     * This method is called periodically to ensure the access token is valid.\n     */\n    async refreshAccessToken() {\n        await this.oauth2Client.clientCredentials().then((token) => {\n            this.accessToken = token.accessToken;\n            const date = new Date();\n            const expirationDate = new Date(token.expiresAt as number);\n            setTimeout(\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                () => this.refreshAccessToken(),\n                expirationDate.getTime() - date.getTime() - 1000,\n            );\n        });\n    }\n\n    /**\n     * Adds a new relying party to the registrar.\n     * This is only needed once, when the relying party is created.\n     */\n    addRp(tenantId: string): Promise {\n        const name = this.configService.getOrThrow('RP_NAME');\n        return relyingPartyControllerRegister({\n            client: this.client,\n            body: {\n                name,\n            },\n        }).then(async (response) => {\n            const config = this.loadConfig(tenantId);\n            if (response.error) {\n                config.id = await this.storeExistingRp(name);\n            } else {\n                config.id = response.data!['id'];\n            }\n            this.saveConfig(config, tenantId);\n            return response.data!['id'];\n        });\n    }\n\n    /**\n     * Stores the existing relying party ID based on the name.\n     * This is used when the relying party already exists in the registrar.\n     * @param name - The name of the relying party.\n     * @returns The ID of the existing relying party.\n     */\n    private storeExistingRp(name: string) {\n        return relyingPartyControllerFindAll({\n            client: this.client,\n            query: {\n                name,\n            },\n        }).then((response) => {\n            return response.data!.find((item) => item.name === name)?.id;\n        });\n    }\n\n    /**\n     * Get the access certificate ID from the registrar.\n     * If there is no access certificate ID in the config, it will add a new one.\n     * If there is one, it will check if it is still valid.\n     * If it is revoked, it will add a new one.\n     * @param config\n     */\n    async getAccessCertificateId(config: RegistrarConfig, tenantId: string) {\n        // if there is no access certificate ID in the config, we need to add it\n        if (!config.accessCertificateId) {\n            await this.addAccessCertificate(config, tenantId);\n        }\n        // if there is one, check if it is still valid\n        await accessCertificateControllerFindOne({\n            client: this.client,\n            path: { rp: config.id, id: config.accessCertificateId! },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error finding access certificate:', res.error);\n            }\n            const data = res.data as AccessCertificateResponse;\n            if (data.revoked) {\n                console.warn('Access certificate is revoked, adding a new one');\n                return this.addAccessCertificate(config, tenantId);\n            }\n        });\n    }\n\n    /**\n     * Add a new access certificate to the registrar.\n     * This is only needed once, when the access certificate is created.\n     * If the access certificate already exists, it will be returned.\n     * @returns\n     */\n    private async addAccessCertificate(\n        config: RegistrarConfig,\n        tenantId: string,\n    ): Promise {\n        const host = this.configService\n            .getOrThrow('PUBLIC_URL')\n            .replace('https://', '');\n        return accessCertificateControllerRegister({\n            client: this.client,\n            body: {\n                publicKey: await this.cryptoService.keyService.getPublicKey(\n                    'pem',\n                    tenantId,\n                ),\n                dns: [host],\n            },\n            path: {\n                rp: config.id,\n            },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error adding access certificate:', res.error);\n                throw new Error('Error adding access certificate');\n            }\n            //store the cert\n            this.cryptoService.storeAccessCertificate(\n                res.data!['crt'],\n                tenantId,\n            );\n            config.accessCertificateId = res.data!['id'];\n            this.saveConfig(config, tenantId);\n            return res.data!['id'];\n        });\n    }\n\n    /**\n     * Add a new registration certificate to the registrar.\n     * This is only needed once, when the registration certificate is created.\n     * If the registration certificate already exists, it will be returned.\n     * @returns\n     */\n    async addRegistrationCertificate(\n        req: RegistrationCertificateRequest,\n        //TODO: check if the dcql_query is covered by the registration certificate. If not, we need to throw an error since we do not know the new purpose for it.\n        dcql_query: any,\n        requestId: string,\n        tenantId: string,\n    ) {\n        const rp = this.loadConfig(tenantId).id;\n\n        //TODO: need to check if the access certificate is bound to the access certificate with the subject. Also that the requested fields are matching.\n\n        const certs =\n            (await registrationCertificateControllerAll({\n                client: this.client,\n                path: {\n                    rp,\n                },\n            }).then((res) =>\n                res.data?.filter(\n                    (cert) =>\n                        cert.revoked == null && cert.id === (req.id as string),\n                ),\n            )) || [];\n\n        if (certs?.length > 0) {\n            return certs[0].jwt;\n        }\n\n        return registrationCertificateControllerRegister({\n            client: this.client,\n            path: {\n                rp,\n            },\n            body: req.body,\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\n                    'Error adding registration certificate:',\n                    res.error,\n                );\n                throw new Error('Error adding registration certificate');\n            }\n\n            //TODO: write the ID to the config so its easier to use it. Easier than writing the comparison algorithm (any maybe someone wants to use a different one)\n            await this.presentationsService.storeRCID(\n                res.data!['id'],\n                requestId,\n                tenantId,\n            );\n            return res.data!['jwt'];\n        });\n    }\n\n    /**\n     * Load the registrar configuration from the config file.\n     * @returns\n     */\n    private loadConfig(tenantId: string): RegistrarConfig {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n\n        if (!existsSync(filePath)) {\n            // If the config file does not exist, create an empty config\n            const initialConfig: RegistrarConfig = {};\n            writeFileSync(filePath, JSON.stringify(initialConfig, null, 2));\n            return initialConfig;\n        }\n        const config = JSON.parse(\n            readFileSync(filePath, 'utf-8'),\n        ) as RegistrarConfig;\n        return config;\n    }\n\n    /**\n     * Save the registrar configuration to the config file.\n     * @param config\n     */\n    private saveConfig(config: RegistrarConfig, tenantId: string) {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n        writeFileSync(filePath, JSON.stringify(config, null, 2));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApiKeyConfig.html":{"url":"classes/ApiKeyConfig.html","title":"class - ApiKeyConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiKeyConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for API key authentication in webhooks.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                headerName\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        headerName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:13\n                        \n                    \n\n            \n                \n                    The name of the header where the API key will be sent.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:19\n                        \n                    \n\n            \n                \n                    The value of the API key to be sent in the header.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app/app.controller.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiExcludeController } from '@nestjs/swagger';\n\n@ApiExcludeController()\n@Controller()\nexport class AppController {\n    @Get()\n    getHello(): string {\n        return 'EUDIPLO is up and running, more information at https://cre8.github.io/eudiplo/latest/';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            WellKnownController\n                        \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CryptoModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            IssuerModule\n                        \n                        \n                            KeyModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            VerifierModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as Joi from 'joi';\nimport { CryptoModule } from './crypto/crypto.module';\nimport { WellKnownController } from './well-known/well-known.controller';\nimport { ISSUER_VALIDATION_SCHEMA, IssuerModule } from './issuer/issuer.module';\nimport { VerifierModule } from './verifier/verifier.module';\nimport {\n    REGISTRAR_VALIDATION_SCHEMA,\n    RegistrarModule,\n} from './registrar/registrar.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join, isAbsolute } from 'path';\nimport { KEY_VALIDATION_SCHEMA, KeyModule } from './crypto/key/key.module';\nimport { CRYPTO_VALIDATION_SCHEMA } from './crypto/key/crypto/crypto.module';\nimport { AppController } from './app/app.controller';\nimport {\n    SESSION_VALIDATION_SCHEMA,\n    SessionModule,\n} from './session/session.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { DatabaseModule } from './database/database.module';\nimport { HealthModule } from './health/health.module';\nimport { AUTH_VALIDATION_SCHEMA, AuthModule } from './auth/auth.module';\nimport { EventEmitterModule } from '@nestjs/event-emitter/dist/event-emitter.module';\nimport { LoggerModule } from 'nestjs-pino';\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            validationSchema: Joi.object({\n                FOLDER: Joi.string().default('./tmp'),\n                RP_NAME: Joi.string().default('EUDIPLO'),\n                LOG_LEVEL: Joi.string()\n                    .valid('trace', 'debug', 'info', 'warn', 'error', 'fatal')\n                    .default(\n                        process.env.NODE_ENV === 'production'\n                            ? 'warn'\n                            : 'debug',\n                    ),\n                ...AUTH_VALIDATION_SCHEMA,\n                ...REGISTRAR_VALIDATION_SCHEMA,\n                ...KEY_VALIDATION_SCHEMA,\n                ...CRYPTO_VALIDATION_SCHEMA,\n                ...ISSUER_VALIDATION_SCHEMA,\n                ...SESSION_VALIDATION_SCHEMA,\n                LOG_DISABLE_HTTP_LOGGER: Joi.boolean().default(false),\n                LOG_DISABLE_SESSION_LOGGER: Joi.boolean().default(false),\n                LOG_DEBUG_MODE: Joi.boolean().default(false),\n                LOG_FORMAT: Joi.string()\n                    .valid('json', 'pretty')\n                    .default(\n                        process.env.NODE_ENV === 'production'\n                            ? 'json'\n                            : 'pretty',\n                    ),\n            }),\n            isGlobal: true,\n            expandVariables: true,\n        }),\n        LoggerModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const disableHttpLogger = configService.get(\n                    'LOG_DISABLE_HTTP_LOGGER',\n                    false,\n                );\n\n                return {\n                    pinoHttp: {\n                        level: configService.get('LOG_LEVEL', 'info'),\n                        autoLogging: !disableHttpLogger,\n                        transport:\n                            process.env.NODE_ENV === 'production'\n                                ? undefined\n                                : {\n                                      target: 'pino-pretty',\n                                      options: {\n                                          colorize: true,\n                                          singleLine: false,\n                                          translateTime: 'yyyy-mm-dd HH:MM:ss',\n                                          ignore: 'pid,hostname',\n                                      },\n                                  },\n                        customProps: (req: any) => ({\n                            sessionId:\n                                req.headers['x-session-id'] ||\n                                req.params?.session ||\n                                req.body?.session_id,\n                            tenantId: req.params?.tenantId,\n                            flow: req.url?.includes('/vci')\n                                ? 'OID4VCI'\n                                : req.url?.includes('/oid4vp')\n                                  ? 'OID4VP'\n                                  : undefined,\n                        }),\n                        serializers: {\n                            req: (req: any) => ({\n                                method: req.method,\n                                url: req.url,\n                                headers: {\n                                    'user-agent': req.headers['user-agent'],\n                                    'content-type': req.headers['content-type'],\n                                },\n                                sessionId:\n                                    req.headers['x-session-id'] ||\n                                    req.params?.session,\n                                tenantId: req.params?.tenantId,\n                            }),\n                            res: (res: any) => ({\n                                statusCode: res.statusCode,\n                            }),\n                        },\n                    },\n                };\n            },\n        }),\n        KeyModule.forRoot(),\n        CryptoModule,\n        IssuerModule,\n        VerifierModule,\n        RegistrarModule,\n        ScheduleModule.forRoot(),\n        ServeStaticModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const folder = configService.getOrThrow('FOLDER');\n                const rootPath = isAbsolute(folder)\n                    ? join(folder, 'public')\n                    : join(__dirname, '../', folder, 'public');\n                return [\n                    {\n                        rootPath,\n                    },\n                ];\n            },\n        }),\n        EventEmitterModule.forRoot(),\n        DatabaseModule,\n        SessionModule,\n        DatabaseModule,\n        HealthModule,\n        AuthModule,\n    ],\n    controllers: [WellKnownController, AppController],\n    providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Auth.html":{"url":"interfaces/Auth.html","title":"interface - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/auth.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            in\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            scheme\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        in\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        in:     \"header\" | \"query\" | \"cookie\"\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 'header'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :     \"header\" | \"query\" | \"cookie\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Which part of the request do we use to send the auth?\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 'Authorization'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Header or query parameter name.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scheme\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scheme:     \"basic\" | \"bearer\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"basic\" | \"bearer\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"apiKey\" | \"http\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"apiKey\" | \"http\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type AuthToken = string | undefined;\n\nexport interface Auth {\n    /**\n     * Which part of the request do we use to send the auth?\n     *\n     * @default 'header'\n     */\n    in?: 'header' | 'query' | 'cookie';\n    /**\n     * Header or query parameter name.\n     *\n     * @default 'Authorization'\n     */\n    name?: string;\n    scheme?: 'basic' | 'bearer';\n    type: 'apiKey' | 'http';\n}\n\nexport const getAuthToken = async (\n    auth: Auth,\n    callback: ((auth: Auth) => Promise | AuthToken) | AuthToken,\n): Promise => {\n    const token =\n        typeof callback === 'function' ? await callback(auth) : callback;\n\n    if (!token) {\n        return;\n    }\n\n    if (auth.scheme === 'bearer') {\n        return `Bearer ${token}`;\n    }\n\n    if (auth.scheme === 'basic') {\n        return `Basic ${btoa(token)}`;\n    }\n\n    return token;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOAuth2Token\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getOAuth2Token\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOAuth2Token(body: any, headers: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('oauth2/token')@ApiBody({type: ClientCredentialsDto, examples: undefined})@ApiResponse({status: 200, description: 'OAuth2 token response', type: TokenResponse, example: undefined})@ApiResponse({status: 401, description: 'Invalid client credentials'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:60\n                        \n                    \n\n\n            \n                \n                        OAuth2 Token endpoint - supports client credentials flow only\nAccepts client credentials either in Authorization header (Basic auth) or request body\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Post,\n    Body,\n    UnauthorizedException,\n    Headers,\n} from '@nestjs/common';\nimport { ApiTags, ApiResponse, ApiBody } from '@nestjs/swagger';\nimport { JwtService } from './jwt.service';\nimport { ClientService } from './client.service';\nimport { Public } from './public.decorator';\nimport { ClientCredentialsDto } from './dto/client-credentials.dto';\nimport { TokenPayload } from './token.decorator';\nimport { TokenResponse } from './dto/token-response.dto';\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        private jwtService: JwtService,\n        private clientService: ClientService,\n    ) {}\n\n    /**\n     * OAuth2 Token endpoint - supports client credentials flow only\n     * Accepts client credentials either in Authorization header (Basic auth) or request body\n     * @param body\n     * @param headers\n     * @returns\n     */\n    @Public()\n    @Post('oauth2/token')\n    @ApiBody({\n        type: ClientCredentialsDto,\n        examples: {\n            client_credentials: {\n                summary: 'Client Credentials Flow',\n                value: {\n                    grant_type: 'client_credentials',\n                    client_id: 'root',\n                    client_secret: 'root',\n                },\n            },\n        },\n    })\n    @ApiResponse({\n        status: 200,\n        description: 'OAuth2 token response',\n        type: TokenResponse,\n        example: {\n            access_token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n            token_type: 'Bearer',\n            expires_in: 86400,\n        },\n    })\n    @ApiResponse({\n        status: 401,\n        description: 'Invalid client credentials',\n    })\n    async getOAuth2Token(\n        @Body() body: any,\n        @Headers() headers: any,\n    ): Promise {\n        if (this.jwtService.isUsingExternalOIDC()) {\n            throw new UnauthorizedException(\n                'OAuth2 token endpoint is not available when using external OIDC provider. Use your external OIDC provider for authentication.',\n            );\n        }\n\n        // Only support client credentials flow\n        if (body.grant_type !== 'client_credentials') {\n            throw new UnauthorizedException(\n                'Only client_credentials grant type is supported',\n            );\n        }\n\n        let clientId: string;\n        let clientSecret: string;\n\n        // Try to extract credentials from Authorization header (Basic auth)\n        const authHeader = headers.authorization;\n        if (authHeader && authHeader.startsWith('Basic ')) {\n            try {\n                const base64Credentials = authHeader.substring(6);\n                const credentials = Buffer.from(\n                    base64Credentials,\n                    'base64',\n                ).toString('ascii');\n                const [id, secret] = credentials.split(':');\n                clientId = id;\n                clientSecret = secret;\n            } catch {\n                throw new UnauthorizedException(\n                    'Invalid Authorization header format',\n                );\n            }\n        } else {\n            // Fall back to request body\n            clientId = body.client_id;\n            clientSecret = body.client_secret;\n        }\n\n        if (!clientId || !clientSecret) {\n            throw new UnauthorizedException(\n                'Client credentials must be provided either in Authorization header (Basic auth) or request body',\n            );\n        }\n\n        const client = this.clientService.validateClient(\n            clientId,\n            clientSecret,\n        );\n        if (!client) {\n            throw new UnauthorizedException('Invalid client credentials');\n        }\n\n        const payload: TokenPayload = {\n            sub: client.id,\n        };\n\n        const token = await this.jwtService.generateToken(payload, {\n            expiresIn: '24h',\n            audience: 'eudiplo-service',\n        });\n\n        return {\n            access_token: token,\n            token_type: 'Bearer',\n            expires_in: 86400, // 24 hours in seconds\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\n\n\nJwtService \n\nJwtService \n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nClientService\n\nClientService\n\nAuthModule -->\n\nClientService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClientService\n                        \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './jwt.strategy';\nimport { JwtAuthGuard } from './auth.guard';\nimport { JwtService } from './jwt.service';\nimport { AuthController } from './auth.controller';\nimport { ClientService } from './client.service';\nimport * as Joi from 'joi';\nimport { ConfigModule } from '@nestjs/config';\n\nexport const AUTH_VALIDATION_SCHEMA = {\n    OIDC: Joi.string().optional(),\n    KEYCLOAK_INTERNAL_ISSUER_URL: Joi.when('OIDC', {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    KEYCLOAK_CLIENT_ID: Joi.when('OIDC', {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    JWT_SECRET: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n    JWT_ISSUER: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().optional().default('eudiplo-service'),\n    }),\n    JWT_EXPIRES_IN: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default('24h'),\n    }),\n    AUTH_CLIENT_SECRET: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n    AUTH_CLIENT_ID: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n};\n\n@Module({\n    imports: [PassportModule, ConfigModule],\n    providers: [JwtStrategy, JwtAuthGuard, JwtService, ClientService],\n    controllers: [AuthController],\n    exports: [PassportModule, JwtStrategy, JwtAuthGuard, JwtService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthResponse.html":{"url":"interfaces/AuthResponse.html","title":"interface - AuthResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/auth-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthResponse DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            state\n                                        \n                                \n                                \n                                        \n                                            vp_token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The state parameter to maintain state between the request and callback.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vp_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        vp_token:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The VP token containing the presentation data.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AuthResponse {\n    /**\n     * The VP token containing the presentation data.\n     */\n    vp_token: {\n        /**\n         * Key-value pairs representing the VP token data.\n         */\n        [key: string]: string;\n    };\n    /**\n     * The state parameter to maintain state between the request and callback.\n     */\n    state: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizationResponse.html":{"url":"classes/AuthorizationResponse.html","title":"class - AuthorizationResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizationResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/authorization-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the authorization response containing the VP token.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                response\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/authorization-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The response string containing the authorization details.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\n/**\n * DTO for the authorization response containing the VP token.\n */\nexport class AuthorizationResponse {\n    /**\n     * The response string containing the authorization details.\n     */\n    @IsString()\n    response: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthorizeController.html":{"url":"controllers/AuthorizeController.html","title":"controller - AuthorizeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthorizeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/authorize\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI authorization endpoints.\nThis controller handles the authorization requests, token requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authorizationChallengeEndpoint\n                            \n                            \n                                    \n                                    Async\n                                authorize\n                            \n                            \n                                    \n                                    \n                                    Async\n                                par\n                            \n                            \n                                    \n                                    Async\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response, body: AuthorizeQueries, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('challenge')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:98\n                        \n                    \n\n\n            \n                \n                        Endpoint for the authorization challenge.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        authorize\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorize(queries: AuthorizeQueries, res: Response, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:36\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Authorization Request.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        par\n                        \n                    \n                \n            \n            \n                \n                        \n                    par(body: AuthorizeQueries, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({description: 'Pushed Authorization Request', type: AuthorizeQueries})@Post('par')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Pushed Authorization Request (PAR).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        token\n                        \n                    \n                \n            \n            \n                \n                        \n                    token(body: any, req: Request, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('token')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:82\n                        \n                    \n\n\n            \n                \n                        Endpoint to validate the token request.\nThis endpoint is used to exchange the authorization code for an access token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport {\n    Body,\n    Controller,\n    Get,\n    Param,\n    Post,\n    Query,\n    Req,\n    Res,\n} from '@nestjs/common';\nimport type { Request, Response } from 'express';\nimport { AuthorizeService } from './authorize.service';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { SessionService } from '../../session/session.service';\nimport { ParResponseDto } from './dto/par-response.dto';\nimport { ApiBody } from '@nestjs/swagger';\n\n/**\n * Controller for the OpenID4VCI authorization endpoints.\n * This controller handles the authorization requests, token requests.\n */\n@Controller(':tenantId/authorize')\nexport class AuthorizeController {\n    constructor(\n        private readonly authorizeService: AuthorizeService,\n        private sessionService: SessionService,\n    ) {}\n\n    /**\n     * Endpoint to handle the Authorization Request.\n     * @param queries\n     * @param res\n     */\n    @Get()\n    async authorize(\n        @Query() queries: AuthorizeQueries,\n        @Res() res: Response,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.authorizeService.sendAuthorizationResponse(\n            queries,\n            res,\n            tenantId,\n        );\n    }\n\n    /**\n     * Endpoint to handle the Pushed Authorization Request (PAR).\n     * @param body\n     * @returns\n     */\n    @ApiBody({\n        description: 'Pushed Authorization Request',\n        type: AuthorizeQueries,\n    })\n    @Post('par')\n    async par(\n        @Body() body: AuthorizeQueries,\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        const request_uri = `urn:${randomUUID()}`;\n        // save both so we can retrieve the session also via the request_uri in the authorize step.\n        await this.sessionService.add(body.issuer_state!, tenantId, {\n            request_uri,\n            auth_queries: body,\n        });\n        return {\n            expires_in: 500,\n            request_uri,\n        };\n    }\n\n    /**\n     * Endpoint to validate the token request.\n     * This endpoint is used to exchange the authorization code for an access token.\n     * @param body\n     * @param req\n     * @returns\n     */\n    @Post('token')\n    async token(\n        @Body() body: any,\n        @Req() req: Request,\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        //TODO: define body\n        return this.authorizeService.validateTokenRequest(body, req, tenantId);\n    }\n\n    /**\n     * Endpoint for the authorization challenge.\n     * @param res\n     * @param body\n     * @returns\n     */\n    @Post('challenge')\n    authorizationChallengeEndpoint(\n        @Res() res: Response,\n        @Body() body: AuthorizeQueries,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.authorizeService.authorizationChallengeEndpoint(\n            res,\n            body,\n            tenantId,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizeQueries.html":{"url":"classes/AuthorizeQueries.html","title":"class - AuthorizeQueries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizeQueries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/authorize-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                auth_session\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                client_id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge_method\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                dpop_jkt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                issuer_state\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                redirect_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resource\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        auth_session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge_method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        dpop_jkt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        issuer_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        redirect_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from 'class-validator';\n\nexport class AuthorizeQueries {\n    @IsOptional()\n    @IsString()\n    issuer_state?: string;\n    @IsOptional()\n    @IsString()\n    response_type?: string;\n    @IsOptional()\n    @IsString()\n    client_id?: string;\n    @IsOptional()\n    @IsString()\n    redirect_uri?: string;\n    @IsOptional()\n    @IsString()\n    resource?: string;\n    @IsOptional()\n    @IsString()\n    scope?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge_method?: string;\n    @IsOptional()\n    @IsString()\n    dpop_jkt?: string;\n    @IsOptional()\n    @IsString()\n    request_uri?: string;\n    @IsOptional()\n    @IsString()\n    auth_session?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthorizeService.html":{"url":"injectables/AuthorizeService.html","title":"injectable - AuthorizeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthorizeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authorizationChallengeEndpoint\n                            \n                            \n                                authzMetadata\n                            \n                            \n                                getAuthorizationServer\n                            \n                            \n                                    Async\n                                parseChallengeRequest\n                            \n                            \n                                    Private\n                                    Async\n                                sendAuthorizationCode\n                            \n                            \n                                    Async\n                                sendAuthorizationResponse\n                            \n                            \n                                    Async\n                                setAuthCode\n                            \n                            \n                                    Async\n                                validateTokenRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, oid4vpService: Oid4vpService, sessionService: SessionService, issuanceService: IssuanceService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/authorize/authorize.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oid4vpService\n                                                  \n                                                        \n                                                                        Oid4vpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issuanceService\n                                                  \n                                                        \n                                                                        IssuanceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response>, body: AuthorizeQueries, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:181\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \nauthzMetadata(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         AuthorizationServerMetadata\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthorizationServer\n                        \n                    \n                \n            \n            \n                \ngetAuthorizationServer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServer\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        parseChallengeRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseChallengeRequest(body: AuthorizeQueries, tenantId: string, webhook?: WebhookConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:163\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                webhook\n                                            \n                                                            WebhookConfig\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        sendAuthorizationCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationCode(res: Response, issuer_state: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:222\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendAuthorizationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationResponse(queries: AuthorizeQueries, res: Response>, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setAuthCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAuthCode(issuer_state: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:236\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateTokenRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateTokenRequest(body: any, req: Request, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n} from '@openid4vc/oauth2';\nimport type { Request, Response } from 'express';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { getHeadersFromRequest } from '../oid4vci/util';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { Oid4vpService } from '../../verifier/oid4vp/oid4vp.service';\nimport { SessionService } from '../../session/session.service';\nimport { WebhookConfig } from '../../utils/webhook.dto';\nimport { IssuanceService } from '../issuance/issuance.service';\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(tenantId: string): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow('PUBLIC_URL') +\n            `/${tenantId}`;\n        return this.getAuthorizationServer(\n            tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: ['ES256'],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n        tenantId: string,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        'request_uri not found or not provided in the request',\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                'request_uri not found or not provided in the request',\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!, tenantId);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        tenantId: string,\n    ): Promise {\n        const url = `${this.configService.getOrThrow('PUBLIC_URL')}${req.url}`;\n\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const session = await this.sessionService.getBy({\n            authorization_code: body.code,\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        }\n        const authorizationServerMetadata = this.authzMetadata(tenantId);\n        //TODO: handle response\n        const { dpop } = await this.getAuthorizationServer(\n            tenantId,\n        ).verifyAuthorizationCodeAccessTokenRequest({\n            grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n            accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n            expectedCode: session.authorization_code as string,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n            dpop: {\n                required: true,\n                allowedSigningAlgs:\n                    authorizationServerMetadata.dpop_signing_alg_values_supported,\n                jwt: parsedAccessTokenRequest.dpop?.jwt,\n            },\n            authorizationServerMetadata,\n        });\n\n        const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow('PUBLIC_URL')}/${tenantId}`,\n            signer: {\n                method: 'jwk',\n                alg: 'ES256',\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            cNonce,\n            cNonceExpiresIn: 100,\n            clientId: 'wallet', // must be same as the client attestation\n            dpop,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest('pid', { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: 'insufficient_authorization',\n            auth_session,\n            presentation,\n            error_description:\n                'Presentation of credential required before issuance',\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        tenantId: string,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n            //check if session has valid presentation, we assume for now\n            await this.sendAuthorizationCode(res, body.auth_session, tenantId);\n            return;\n        }\n\n        const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        }\n        const issuanceId = session.issuanceId!;\n        const config = await this.issuanceService.getIssuanceConfigurationById(\n            issuanceId,\n            tenantId,\n        );\n        if (config.presentation_during_issuance) {\n            const webhook = config.presentation_during_issuance.webhook;\n            const response = await this.parseChallengeRequest(\n                body,\n                tenantId,\n                webhook,\n            );\n            res.status(400).send(response);\n        } else {\n            await this.sendAuthorizationCode(res, body.issuer_state!, tenantId);\n        }\n    }\n\n    private async sendAuthorizationCode(\n        res: Response,\n        issuer_state: string,\n        tenantId: string,\n    ) {\n        const authorization_code = await this.setAuthCode(\n            issuer_state,\n            tenantId,\n        );\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string, tenantId: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, tenantId, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Client.html":{"url":"interfaces/Client.html","title":"interface - Client","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Client\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { existsSync, mkdirSync, writeFileSync } from 'fs';\nimport { join } from 'path';\nimport { TENANT_EVENTS } from './tenant-events';\n\n// Client interface for service integration\nexport interface Client {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class ClientService implements OnApplicationBootstrap {\n    private clients: Client[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private eventEmitter: EventEmitter2,\n    ) {}\n\n    onApplicationBootstrap() {\n        // were are ignoring clients that are not used anymore for now. Need to implement a proper cleanup mechanism later\n        const clients = this.getClients();\n        clients.forEach((client) => {\n            this.setUpClient(client.id);\n        });\n    }\n\n    /**\n     * Get clients from configuration\n     * @returns\n     */\n    private getClients(): Client[] {\n        if (!this.clients) {\n            this.clients = this.loadClients();\n        }\n        return this.clients;\n    }\n\n    /**\n     * Load clients from configuration\n     */\n    private loadClients(): Client[] {\n        // Default clients for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow('AUTH_CLIENT_ID'),\n                secret: this.configService.getOrThrow(\n                    'AUTH_CLIENT_SECRET',\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate client credentials (OAuth2 Client Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateClient(clientId: string, clientSecret: string): Client | null {\n        const client = this.getClients().find((c) => c.id === clientId);\n\n        if (!client || client.secret !== clientSecret) {\n            return null;\n        }\n\n        return client;\n    }\n\n    /**\n     * Find client by ID\n     */\n    findClientById(clientId: string): Client | null {\n        return this.getClients().find((c) => c.id === clientId) || null;\n    }\n\n    /**\n     * Sends an event to set up a client, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    setUpClient(id: string) {\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            id,\n        );\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n\n        const displayInfo = [\n            {\n                name: 'EUDI Wallet dev',\n                locale: 'de-DE',\n                logo: {\n                    uri: '/issuer.png',\n                    url: '/issuer.png',\n                },\n            },\n        ];\n        writeFileSync(\n            join(folder, 'display.json'),\n            JSON.stringify(displayInfo, null, 2),\n        );\n\n        this.eventEmitter.emit(TENANT_EVENTS.TENANT_INIT, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Client-1.html":{"url":"interfaces/Client-1.html","title":"interface - Client-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Client\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            buildUrl\n                                        \n                                \n                                \n                                        \n                                            connect\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                        \n                                            get\n                                        \n                                \n                                \n                                        \n                                            getConfig\n                                        \n                                \n                                \n                                        \n                                            head\n                                        \n                                \n                                \n                                        \n                                            options\n                                        \n                                \n                                \n                                        \n                                            patch\n                                        \n                                \n                                \n                                        \n                                            post\n                                        \n                                \n                                \n                                        \n                                            put\n                                        \n                                \n                                \n                                        \n                                            request\n                                        \n                                \n                                \n                                        \n                                            setConfig\n                                        \n                                \n                                \n                                        \n                                            trace\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buildUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        buildUrl:         BuildUrlFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BuildUrlFn\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Returns the final request URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        connect\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        connect:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        get\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        get:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getConfig\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getConfig:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        head\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        head:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        patch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        patch:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        post\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        post:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        put\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        put:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        request\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        request:         RequestFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RequestFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        setConfig\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        setConfig:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trace\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trace:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type { Auth, AuthToken } from './auth';\nimport type {\n    BodySerializer,\n    QuerySerializer,\n    QuerySerializerOptions,\n} from './bodySerializer';\n\nexport interface Client {\n    /**\n     * Returns the final request URL.\n     */\n    buildUrl: BuildUrlFn;\n    connect: MethodFn;\n    delete: MethodFn;\n    get: MethodFn;\n    getConfig: () => Config;\n    head: MethodFn;\n    options: MethodFn;\n    patch: MethodFn;\n    post: MethodFn;\n    put: MethodFn;\n    request: RequestFn;\n    setConfig: (config: Config) => Config;\n    trace: MethodFn;\n}\n\nexport interface Config {\n    /**\n     * Auth token or a function returning auth token. The resolved value will be\n     * added to the request payload as defined by its `security` array.\n     */\n    auth?: ((auth: Auth) => Promise | AuthToken) | AuthToken;\n    /**\n     * A function for serializing request body parameter. By default,\n     * {@link JSON.stringify()} will be used.\n     */\n    bodySerializer?: BodySerializer | null;\n    /**\n     * An object containing any HTTP headers that you want to pre-populate your\n     * `Headers` object with.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/Headers/Headers#init See more}\n     */\n    headers?:\n        | RequestInit['headers']\n        | Record;\n    /**\n     * The request method.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#method See more}\n     */\n    method?:\n        | 'CONNECT'\n        | 'DELETE'\n        | 'GET'\n        | 'HEAD'\n        | 'OPTIONS'\n        | 'PATCH'\n        | 'POST'\n        | 'PUT'\n        | 'TRACE';\n    /**\n     * A function for serializing request query parameters. By default, arrays\n     * will be exploded in form style, objects will be exploded in deepObject\n     * style, and reserved characters are percent-encoded.\n     *\n     * This method will have no effect if the native `paramsSerializer()` Axios\n     * API function is used.\n     *\n     * {@link https://swagger.io/docs/specification/serialization/#query View examples}\n     */\n    querySerializer?: QuerySerializer | QuerySerializerOptions;\n    /**\n     * A function validating request data. This is useful if you want to ensure\n     * the request conforms to the desired shape, so it can be safely sent to\n     * the server.\n     */\n    requestValidator?: (data: unknown) => Promise;\n    /**\n     * A function transforming response data before it's returned. This is useful\n     * for post-processing data, e.g. converting ISO strings into Date objects.\n     */\n    responseTransformer?: (data: unknown) => Promise;\n    /**\n     * A function validating response data. This is useful if you want to ensure\n     * the response conforms to the desired shape, so it can be safely passed to\n     * the transformers and returned to the user.\n     */\n    responseValidator?: (data: unknown) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClientCredentialsDto.html":{"url":"classes/ClientCredentialsDto.html","title":"class - ClientCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClientCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/client-credentials.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                client_id\n                            \n                            \n                                    \n                                client_secret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class ClientCredentialsDto {\n    @IsString()\n    client_id: string;\n    @IsString()\n    client_secret: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClientOptions.html":{"url":"interfaces/ClientOptions.html","title":"interface - ClientOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ClientOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            baseUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            responseStyle\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            throwOnError\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        baseUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseStyle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseStyle:         ResponseStyle\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ResponseStyle\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        throwOnError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        throwOnError:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type { Auth } from '../core/auth';\nimport type { Client as CoreClient, Config as CoreConfig } from '../core/types';\nimport type { Middleware } from './utils';\n\nexport type ResponseStyle = 'data' | 'fields';\n\nexport interface Config\n    extends Omit,\n        CoreConfig {\n    /**\n     * Base URL for all requests made by this client.\n     */\n    baseUrl?: T['baseUrl'];\n    /**\n     * Fetch API implementation. You can use this option to provide a custom\n     * fetch instance.\n     *\n     * @default globalThis.fetch\n     */\n    fetch?: (request: Request) => ReturnType;\n    /**\n     * Please don't use the Fetch client for Next.js applications. The `next`\n     * options won't have any effect.\n     *\n     * Install {@link https://www.npmjs.com/package/@hey-api/client-next `@hey-api/client-next`} instead.\n     */\n    next?: never;\n    /**\n     * Return the response data parsed in a specified format. By default, `auto`\n     * will infer the appropriate method from the `Content-Type` response header.\n     * You can override this behavior with any of the {@link Body} methods.\n     * Select `stream` if you don't want to parse response data at all.\n     *\n     * @default 'auto'\n     */\n    parseAs?:\n        | 'arrayBuffer'\n        | 'auto'\n        | 'blob'\n        | 'formData'\n        | 'json'\n        | 'stream'\n        | 'text';\n    /**\n     * Should we return only data or multiple fields (data, error, response, etc.)?\n     *\n     * @default 'fields'\n     */\n    responseStyle?: ResponseStyle;\n    /**\n     * Throw an error instead of returning it in the response?\n     *\n     * @default false\n     */\n    throwOnError?: T['throwOnError'];\n}\n\nexport interface RequestOptions extends Config {\n    /**\n     * Any body that you want to add to your request.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#body}\n     */\n    body?: unknown;\n    path?: Record;\n    query?: Record;\n    /**\n     * Security mechanism(s) to use for the request.\n     */\n    security?: ReadonlyArray;\n    url: Url;\n}\n\nexport type RequestResult = ThrowOnError extends true\n    ? Promise\n                  ? TData[keyof TData]\n                  : TData\n              : {\n                    data: TData extends Record\n                        ? TData[keyof TData]\n                        : TData;\n                    request: Request;\n                    response: Response;\n                }\n      >\n    : Promise\n                          ? TData[keyof TData]\n                          : TData)\n                    | undefined\n              : (\n                    | {\n                          data: TData extends Record\n                              ? TData[keyof TData]\n                              : TData;\n                          error: undefined;\n                      }\n                    | {\n                          data: undefined;\n                          error: TError extends Record\n                              ? TError[keyof TError]\n                              : TError;\n                      }\n                ) & {\n                    request: Request;\n                    response: Response;\n                }\n      >;\n\nexport interface ClientOptions {\n    baseUrl?: string;\n    responseStyle?: ResponseStyle;\n    throwOnError?: boolean;\n}\n\ntype MethodFn = (\n    options: Omit, 'method'>,\n) => RequestResult;\n\ntype RequestFn = (\n    options: Omit, 'method'> &\n        Pick>, 'method'>,\n) => RequestResult;\n\ntype BuildUrlFn = ;\n        query?: Record;\n        url: string;\n    },\n>(\n    options: Pick & Options,\n) => string;\n\nexport type Client = CoreClient & {\n    interceptors: Middleware;\n};\n\n/**\n * The `createClientConfig()` function will be called on client initialization\n * and the returned object will become the client's initial configuration.\n *\n * You may want to initialize your client this way instead of calling\n * `setConfig()`. This is useful for example if you're using Next.js\n * to ensure your client always has the correct values.\n */\nexport type CreateClientConfig = (\n    override?: Config,\n) => Config & T>;\n\nexport interface TDataShape {\n    body?: unknown;\n    headers?: unknown;\n    path?: unknown;\n    query?: unknown;\n    url: string;\n}\n\ntype OmitKeys = Pick>;\n\nexport type Options = OmitKeys,\n    'body' | 'path' | 'query' | 'url'\n> &\n    Omit;\n\nexport type OptionsLegacyParser = TData extends { body?: any }\n    ? TData extends { headers?: any }\n        ? OmitKeys,\n              'body' | 'headers' | 'url'\n          > &\n              TData\n        : OmitKeys,\n              'body' | 'url'\n          > &\n              TData &\n              Pick, 'headers'>\n    : TData extends { headers?: any }\n      ? OmitKeys,\n            'headers' | 'url'\n        > &\n            TData &\n            Pick, 'body'>\n      : OmitKeys, 'url'> & TData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClientService.html":{"url":"injectables/ClientService.html","title":"injectable - ClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clients\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findClientById\n                            \n                            \n                                    Private\n                                getClients\n                            \n                            \n                                    Private\n                                loadClients\n                            \n                            \n                                onApplicationBootstrap\n                            \n                            \n                                setUpClient\n                            \n                            \n                                validateClient\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/auth/client.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findClientById\n                        \n                    \n                \n            \n            \n                \nfindClientById(clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Find client by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Client | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Get clients from configuration\n\n\n                        \n                            Returns :         Client[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Load clients from configuration\n\n\n                        \n                            Returns :         Client[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \nonApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setUpClient\n                        \n                    \n                \n            \n            \n                \nsetUpClient(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Sends an event to set up a client, allowing all other services to listen and react accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateClient\n                        \n                    \n                \n            \n            \n                \nvalidateClient(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Validate client credentials (OAuth2 Client Credentials flow)\nThis is the primary authentication method for service integration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Client | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clients\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Client[] | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/auth/client.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { existsSync, mkdirSync, writeFileSync } from 'fs';\nimport { join } from 'path';\nimport { TENANT_EVENTS } from './tenant-events';\n\n// Client interface for service integration\nexport interface Client {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class ClientService implements OnApplicationBootstrap {\n    private clients: Client[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private eventEmitter: EventEmitter2,\n    ) {}\n\n    onApplicationBootstrap() {\n        // were are ignoring clients that are not used anymore for now. Need to implement a proper cleanup mechanism later\n        const clients = this.getClients();\n        clients.forEach((client) => {\n            this.setUpClient(client.id);\n        });\n    }\n\n    /**\n     * Get clients from configuration\n     * @returns\n     */\n    private getClients(): Client[] {\n        if (!this.clients) {\n            this.clients = this.loadClients();\n        }\n        return this.clients;\n    }\n\n    /**\n     * Load clients from configuration\n     */\n    private loadClients(): Client[] {\n        // Default clients for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow('AUTH_CLIENT_ID'),\n                secret: this.configService.getOrThrow(\n                    'AUTH_CLIENT_SECRET',\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate client credentials (OAuth2 Client Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateClient(clientId: string, clientSecret: string): Client | null {\n        const client = this.getClients().find((c) => c.id === clientId);\n\n        if (!client || client.secret !== clientSecret) {\n            return null;\n        }\n\n        return client;\n    }\n\n    /**\n     * Find client by ID\n     */\n    findClientById(clientId: string): Client | null {\n        return this.getClients().find((c) => c.id === clientId) || null;\n    }\n\n    /**\n     * Sends an event to set up a client, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    setUpClient(id: string) {\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            id,\n        );\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n\n        const displayInfo = [\n            {\n                name: 'EUDI Wallet dev',\n                locale: 'de-DE',\n                logo: {\n                    uri: '/issuer.png',\n                    url: '/issuer.png',\n                },\n            },\n        ];\n        writeFileSync(\n            join(folder, 'display.json'),\n            JSON.stringify(displayInfo, null, 2),\n        );\n\n        this.eventEmitter.emit(TENANT_EVENTS.TENANT_INIT, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Config.html":{"url":"interfaces/Config.html","title":"interface - Config","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Omit\n                            CoreConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            baseUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fetch\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            next\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            parseAs\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            responseStyle\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            throwOnError\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        baseUrl:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Base URL for all requests made by this client.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fetch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fetch:         function\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : globalThis.fetch\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Fetch API implementation. You can use this option to provide a custom\nfetch instance.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        next\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        next:     never\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     never\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Please don't use the Fetch client for Next.js applications. The next\noptions won't have any effect.\nInstall @hey-api/client-next instead.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parseAs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        parseAs:     \"arrayBuffer\" | \"auto\" | \"blob\" | \"formData\" | \"json\" | \"stream\" | \"text\"\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 'auto'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :     \"arrayBuffer\" | \"auto\" | \"blob\" | \"formData\" | \"json\" | \"stream\" | \"text\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Return the response data parsed in a specified format. By default, auto\nwill infer the appropriate method from the Content-Type response header.\nYou can override this behavior with any of the Body methods.\nSelect stream if you don't want to parse response data at all.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseStyle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseStyle:         ResponseStyle\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 'fields'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         ResponseStyle\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Should we return only data or multiple fields (data, error, response, etc.)?\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        throwOnError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        throwOnError:     T\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : false\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Throw an error instead of returning it in the response?\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import type { Auth } from '../core/auth';\nimport type { Client as CoreClient, Config as CoreConfig } from '../core/types';\nimport type { Middleware } from './utils';\n\nexport type ResponseStyle = 'data' | 'fields';\n\nexport interface Config\n    extends Omit,\n        CoreConfig {\n    /**\n     * Base URL for all requests made by this client.\n     */\n    baseUrl?: T['baseUrl'];\n    /**\n     * Fetch API implementation. You can use this option to provide a custom\n     * fetch instance.\n     *\n     * @default globalThis.fetch\n     */\n    fetch?: (request: Request) => ReturnType;\n    /**\n     * Please don't use the Fetch client for Next.js applications. The `next`\n     * options won't have any effect.\n     *\n     * Install {@link https://www.npmjs.com/package/@hey-api/client-next `@hey-api/client-next`} instead.\n     */\n    next?: never;\n    /**\n     * Return the response data parsed in a specified format. By default, `auto`\n     * will infer the appropriate method from the `Content-Type` response header.\n     * You can override this behavior with any of the {@link Body} methods.\n     * Select `stream` if you don't want to parse response data at all.\n     *\n     * @default 'auto'\n     */\n    parseAs?:\n        | 'arrayBuffer'\n        | 'auto'\n        | 'blob'\n        | 'formData'\n        | 'json'\n        | 'stream'\n        | 'text';\n    /**\n     * Should we return only data or multiple fields (data, error, response, etc.)?\n     *\n     * @default 'fields'\n     */\n    responseStyle?: ResponseStyle;\n    /**\n     * Throw an error instead of returning it in the response?\n     *\n     * @default false\n     */\n    throwOnError?: T['throwOnError'];\n}\n\nexport interface RequestOptions extends Config {\n    /**\n     * Any body that you want to add to your request.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#body}\n     */\n    body?: unknown;\n    path?: Record;\n    query?: Record;\n    /**\n     * Security mechanism(s) to use for the request.\n     */\n    security?: ReadonlyArray;\n    url: Url;\n}\n\nexport type RequestResult = ThrowOnError extends true\n    ? Promise\n                  ? TData[keyof TData]\n                  : TData\n              : {\n                    data: TData extends Record\n                        ? TData[keyof TData]\n                        : TData;\n                    request: Request;\n                    response: Response;\n                }\n      >\n    : Promise\n                          ? TData[keyof TData]\n                          : TData)\n                    | undefined\n              : (\n                    | {\n                          data: TData extends Record\n                              ? TData[keyof TData]\n                              : TData;\n                          error: undefined;\n                      }\n                    | {\n                          data: undefined;\n                          error: TError extends Record\n                              ? TError[keyof TError]\n                              : TError;\n                      }\n                ) & {\n                    request: Request;\n                    response: Response;\n                }\n      >;\n\nexport interface ClientOptions {\n    baseUrl?: string;\n    responseStyle?: ResponseStyle;\n    throwOnError?: boolean;\n}\n\ntype MethodFn = (\n    options: Omit, 'method'>,\n) => RequestResult;\n\ntype RequestFn = (\n    options: Omit, 'method'> &\n        Pick>, 'method'>,\n) => RequestResult;\n\ntype BuildUrlFn = ;\n        query?: Record;\n        url: string;\n    },\n>(\n    options: Pick & Options,\n) => string;\n\nexport type Client = CoreClient & {\n    interceptors: Middleware;\n};\n\n/**\n * The `createClientConfig()` function will be called on client initialization\n * and the returned object will become the client's initial configuration.\n *\n * You may want to initialize your client this way instead of calling\n * `setConfig()`. This is useful for example if you're using Next.js\n * to ensure your client always has the correct values.\n */\nexport type CreateClientConfig = (\n    override?: Config,\n) => Config & T>;\n\nexport interface TDataShape {\n    body?: unknown;\n    headers?: unknown;\n    path?: unknown;\n    query?: unknown;\n    url: string;\n}\n\ntype OmitKeys = Pick>;\n\nexport type Options = OmitKeys,\n    'body' | 'path' | 'query' | 'url'\n> &\n    Omit;\n\nexport type OptionsLegacyParser = TData extends { body?: any }\n    ? TData extends { headers?: any }\n        ? OmitKeys,\n              'body' | 'headers' | 'url'\n          > &\n              TData\n        : OmitKeys,\n              'body' | 'url'\n          > &\n              TData &\n              Pick, 'headers'>\n    : TData extends { headers?: any }\n      ? OmitKeys,\n            'headers' | 'url'\n        > &\n            TData &\n            Pick, 'body'>\n      : OmitKeys, 'url'> & TData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Config-1.html":{"url":"interfaces/Config-1.html","title":"interface - Config-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            auth\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            bodySerializer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            method\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            querySerializer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            requestValidator\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            responseTransformer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            responseValidator\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        auth\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        auth:          | AuthToken\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :          | AuthToken\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Auth token or a function returning auth token. The resolved value will be\nadded to the request payload as defined by its security array.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bodySerializer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bodySerializer:         BodySerializer | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BodySerializer | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function for serializing request body parameter. By default,\nJSON.stringify() will be used.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:      | Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :      | Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An object containing any HTTP headers that you want to pre-populate your\nHeaders object with.\nSee more\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:     \"CONNECT\" | \"DELETE\" | \"GET\" | \"HEAD\" | \"OPTIONS\" | \"PATCH\" | \"POST\" | \"PUT\" | \"TRACE\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"CONNECT\" | \"DELETE\" | \"GET\" | \"HEAD\" | \"OPTIONS\" | \"PATCH\" | \"POST\" | \"PUT\" | \"TRACE\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The request method.\nSee more\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        querySerializer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        querySerializer:     QuerySerializer | QuerySerializerOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     QuerySerializer | QuerySerializerOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function for serializing request query parameters. By default, arrays\nwill be exploded in form style, objects will be exploded in deepObject\nstyle, and reserved characters are percent-encoded.\nThis method will have no effect if the native paramsSerializer() Axios\nAPI function is used.\nView examples\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requestValidator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        requestValidator:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function validating request data. This is useful if you want to ensure\nthe request conforms to the desired shape, so it can be safely sent to\nthe server.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseTransformer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseTransformer:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function transforming response data before it's returned. This is useful\nfor post-processing data, e.g. converting ISO strings into Date objects.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseValidator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseValidator:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function validating response data. This is useful if you want to ensure\nthe response conforms to the desired shape, so it can be safely passed to\nthe transformers and returned to the user.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import type { Auth, AuthToken } from './auth';\nimport type {\n    BodySerializer,\n    QuerySerializer,\n    QuerySerializerOptions,\n} from './bodySerializer';\n\nexport interface Client {\n    /**\n     * Returns the final request URL.\n     */\n    buildUrl: BuildUrlFn;\n    connect: MethodFn;\n    delete: MethodFn;\n    get: MethodFn;\n    getConfig: () => Config;\n    head: MethodFn;\n    options: MethodFn;\n    patch: MethodFn;\n    post: MethodFn;\n    put: MethodFn;\n    request: RequestFn;\n    setConfig: (config: Config) => Config;\n    trace: MethodFn;\n}\n\nexport interface Config {\n    /**\n     * Auth token or a function returning auth token. The resolved value will be\n     * added to the request payload as defined by its `security` array.\n     */\n    auth?: ((auth: Auth) => Promise | AuthToken) | AuthToken;\n    /**\n     * A function for serializing request body parameter. By default,\n     * {@link JSON.stringify()} will be used.\n     */\n    bodySerializer?: BodySerializer | null;\n    /**\n     * An object containing any HTTP headers that you want to pre-populate your\n     * `Headers` object with.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/Headers/Headers#init See more}\n     */\n    headers?:\n        | RequestInit['headers']\n        | Record;\n    /**\n     * The request method.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#method See more}\n     */\n    method?:\n        | 'CONNECT'\n        | 'DELETE'\n        | 'GET'\n        | 'HEAD'\n        | 'OPTIONS'\n        | 'PATCH'\n        | 'POST'\n        | 'PUT'\n        | 'TRACE';\n    /**\n     * A function for serializing request query parameters. By default, arrays\n     * will be exploded in form style, objects will be exploded in deepObject\n     * style, and reserved characters are percent-encoded.\n     *\n     * This method will have no effect if the native `paramsSerializer()` Axios\n     * API function is used.\n     *\n     * {@link https://swagger.io/docs/specification/serialization/#query View examples}\n     */\n    querySerializer?: QuerySerializer | QuerySerializerOptions;\n    /**\n     * A function validating request data. This is useful if you want to ensure\n     * the request conforms to the desired shape, so it can be safely sent to\n     * the server.\n     */\n    requestValidator?: (data: unknown) => Promise;\n    /**\n     * A function transforming response data before it's returned. This is useful\n     * for post-processing data, e.g. converting ISO strings into Date objects.\n     */\n    responseTransformer?: (data: unknown) => Promise;\n    /**\n     * A function validating response data. This is useful if you want to ensure\n     * the response conforms to the desired shape, so it can be safely passed to\n     * the transformers and returned to the user.\n     */\n    responseValidator?: (data: unknown) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CredentialConfig.html":{"url":"entities/CredentialConfig.html","title":"entity - CredentialConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CredentialConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                claims\n                            \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                disclosureFrame\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                issuanceConfig\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfigurationSupported\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        disclosureFrame\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        issuanceConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IssuanceConfig[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, issuanceConfig => issuanceConfig.credentialConfigs, {cascade: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SchemaResponse\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         VCT\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { CredentialConfigurationSupported } from '@openid4vc/openid4vci';\nimport { IsObject, IsOptional } from 'class-validator';\nimport { Column, Entity, JoinTable, ManyToMany } from 'typeorm';\nimport { VCT } from '../../credentials-metadata/dto/credential-config.dto';\nimport { SchemaResponse } from '../../credentials-metadata/dto/schema-response.dto';\nimport { IssuanceConfig } from '../../issuance/entities/issuance-config.entity';\n\n@Entity()\nexport class CredentialConfig {\n    @Column('varchar', { primary: true })\n    id: string;\n    @Column('varchar', { primary: true })\n    tenantId: string;\n    @Column('json')\n    @IsObject()\n    config: CredentialConfigurationSupported;\n    // default values to be used\n    @Column('json', { nullable: true })\n    @IsObject()\n    claims: Record;\n    @Column('json', { nullable: true })\n    @IsObject()\n    disclosureFrame: Record;\n    @Column('json', { nullable: true })\n    @IsObject()\n    @IsOptional()\n    vct?: VCT;\n    @Column('json', { nullable: true })\n    @IsObject()\n    @IsOptional()\n    schema?: SchemaResponse;\n    @ManyToMany(\n        () => IssuanceConfig,\n        (issuanceConfig) => issuanceConfig.credentialConfigs,\n        { cascade: true },\n    )\n    @JoinTable()\n    issuanceConfig: IssuanceConfig[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialConfigService.html":{"url":"injectables/CredentialConfigService.html","title":"injectable - CredentialConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credential-config/credential-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing credential configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                getById\n                            \n                            \n                                store\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(credentialConfigRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credential-config/credential-config.service.ts:10\n                            \n                        \n\n                \n                    \n                            Constructor for CredentialConfigService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        credentialConfigRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for CredentialConfig entity.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:63\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the CredentialConfig entity to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the result of the delete operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:25\n                        \n                    \n\n\n            \n                \n                        Retrieves all credential configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to an array of CredentialConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Retrieves a credential configuration by its ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n            \n                \nstore(tenantId: string, config: CredentialConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Stores a credential configuration for a given tenant.\nIf the configuration already exists, it will be overwritten.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                config\n                                            \n                                                            CredentialConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CredentialConfig entity to store.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored CredentialConfig entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CredentialConfig } from '../entities/credential.entity';\n\n/**\n * Service for managing credential configurations.\n */\n@Injectable()\nexport class CredentialConfigService {\n    /**\n     * Constructor for CredentialConfigService.\n     * @param credentialConfigRepository - Repository for CredentialConfig entity.\n     */\n    constructor(\n        @InjectRepository(CredentialConfig)\n        private readonly credentialConfigRepository: Repository,\n    ) {}\n\n    /**\n     * Retrieves all credential configurations for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @returns A promise that resolves to an array of CredentialConfig entities.\n     */\n    get(tenantId: string) {\n        return this.credentialConfigRepository.find({\n            where: { tenantId },\n        });\n    }\n\n    /**\n     * Retrieves a credential configuration by its ID for a given tenant.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    getById(tenantId: string, id: string) {\n        return this.credentialConfigRepository.findOne({\n            where: { id, tenantId },\n        });\n    }\n\n    /**\n     * Stores a credential configuration for a given tenant.\n     * If the configuration already exists, it will be overwritten.\n     * @param tenantId - The ID of the tenant.\n     * @param config - The CredentialConfig entity to store.\n     * @returns A promise that resolves to the stored CredentialConfig entity.\n     */\n    store(tenantId: string, config: CredentialConfig) {\n        return this.credentialConfigRepository.save({\n            ...config,\n            tenantId,\n        });\n    }\n\n    /**\n     * Deletes a credential configuration for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @param id - The ID of the CredentialConfig entity to delete.\n     * @returns A promise that resolves to the result of the delete operation.\n     */\n    delete(tenantId: string, id: string) {\n        return this.credentialConfigRepository.delete({\n            id,\n            tenantId,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialIssuerMetadataDto.html":{"url":"classes/CredentialIssuerMetadataDto.html","title":"class - CredentialIssuerMetadataDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialIssuerMetadataDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/credential-issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the metadata for a credential issuer.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_server\n                            \n                            \n                                authorization_servers\n                            \n                            \n                                batch_credential_issuance\n                            \n                            \n                                credential_configurations_supported\n                            \n                            \n                                credential_endpoint\n                            \n                            \n                                credential_issuer\n                            \n                            \n                                display\n                            \n                            \n                                notification_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_server\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:41\n                        \n                    \n\n            \n                \n                    The URL of the preferred authorization server.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_servers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:12\n                        \n                    \n\n            \n                \n                    List of authorization servers that support the credential issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        batch_credential_issuance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:24\n                        \n                    \n\n            \n                \n                    Information about batch credential issuance.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_configurations_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:37\n                        \n                    \n\n            \n                \n                    Object of credentials configurations supported by the issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:16\n                        \n                    \n\n            \n                \n                    The URL of the credential issuance endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:8\n                        \n                    \n\n            \n                \n                    The issuer identifier, typically a URL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        display\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:33\n                        \n                    \n\n            \n                \n                    Display information for the credentials that are getting issued.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notification_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:20\n                        \n                    \n\n            \n                \n                    The URL of the notification endpoint for credential issuance.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CredentialIssuerMetadataDto {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    credential_issuer: string;\n    /**\n     * List of authorization servers that support the credential issuer.\n     */\n    authorization_servers: string[];\n    /**\n     * The URL of the credential issuance endpoint.\n     */\n    credential_endpoint: string;\n    /**\n     * The URL of the notification endpoint for credential issuance.\n     */\n    notification_endpoint: string;\n    /**\n     * Information about batch credential issuance.\n     */\n    batch_credential_issuance: {\n        /**\n         * Amount of elements in a batch.\n         */\n        batch_size: number;\n    };\n    /**\n     * Display information for the credentials that are getting issued.\n     */\n    display: Array;\n    /**\n     * Object of credentials configurations supported by the issuer.\n     */\n    credential_configurations_supported: any;\n    /**\n     * The URL of the preferred authorization server.\n     */\n    authorization_server: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsController.html":{"url":"controllers/CredentialsController.html","title":"controller - CredentialsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management/credentials\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing credential configurations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getConfigs\n                            \n                            \n                                    \n                                storeCredentialConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Deletes an credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getConfigs\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfigs(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:35\n                        \n                    \n\n\n            \n                \n                        Returns the credential configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeCredentialConfiguration(config: CredentialConfig, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:45\n                        \n                    \n\n\n            \n                \n                        Stores the credential configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            CredentialConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Body,\n    UseGuards,\n} from '@nestjs/common';\nimport { ApiSecurity, ApiTags } from '@nestjs/swagger';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { CredentialConfigService } from './credential-config/credential-config.service';\nimport { CredentialConfig } from './entities/credential.entity';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\n\n/**\n * Controller for managing credential configurations.\n */\n@ApiTags('Issuer management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('issuer-management/credentials')\nexport class CredentialsController {\n    /**\n     * Initializes the CredentialsController with the CredentialConfigService.\n     * @param credentialsService\n     */\n    constructor(private readonly credentialsService: CredentialConfigService) {}\n\n    /**\n     * Returns the credential configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getConfigs(@Token() user: TokenPayload) {\n        return this.credentialsService.get(user.sub);\n    }\n\n    /**\n     * Stores the credential configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeCredentialConfiguration(\n        @Body() config: CredentialConfig,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.store(user.sub, config);\n    }\n\n    /**\n     * Deletes an credential configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(':id')\n    deleteIssuanceConfiguration(\n        @Param('id') id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.delete(user.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsMetadataController.html":{"url":"controllers/CredentialsMetadataController.html","title":"controller - CredentialsMetadataController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsMetadataController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/credentials-metadata.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                credentials-metadata\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n            \n                \n                        \n                    schema(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('schema/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:23\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n            \n                \n                        \n                    vct(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('vct/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:13\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the credential configuration.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from '@nestjs/common';\nimport { CredentialsService } from '../credentials/credentials.service';\n\n@Controller('credentials-metadata')\nexport class CredentialsMetadataController {\n    constructor(private readonly credentialsService: CredentialsService) {}\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n     * @param id - The identifier of the credential configuration.\n     */\n    @Get('vct/:id')\n    vct(@Param('id') id: string, @Param('tenantId') tenantId: string) {\n        return this.credentialsService.getVCT(id, tenantId);\n    }\n\n    /**\n     * Retrieves the schema for a specific credential\n     * @param id\n     * @returns\n     */\n    @Get('schema/:id')\n    schema(@Param('id') id: string, @Param('tenantId') tenantId: string) {\n        return this.credentialsService.getSchema(id, tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialsService.html":{"url":"injectables/CredentialsService.html","title":"injectable - CredentialsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCredential\n                            \n                            \n                                    Async\n                                getCredentialConfiguration\n                            \n                            \n                                    Async\n                                getSchema\n                            \n                            \n                                    Async\n                                getVCT\n                            \n                            \n                                    Async\n                                storeCredentialConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(crpytoService: CryptoService, configService: ConfigService, statusListService: StatusListService, credentialConfigRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credentials.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        crpytoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredential\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredential(credentialConfigurationId: string, cnf: Jwk, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cnf\n                                            \n                                                        Jwk\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredentialConfiguration(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Returns the credential configuration that is required for oid4vci\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSchema\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSchema(credentialConfigurationId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:153\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getVCT\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVCT(credentialId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:127\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        storeCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeCredentialConfiguration(tenantId: string, value: CredentialConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Store the config. If it already exist, overwrite it.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            CredentialConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport type { Jwk } from '@openid4vc/oauth2';\nimport { digest, generateSalt } from '@sd-jwt/crypto-nodejs';\nimport { SDJwtVcInstance } from '@sd-jwt/sd-jwt-vc';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { StatusListService } from '../status-list/status-list.service';\nimport { CredentialConfigurationSupported } from '@openid4vc/openid4vci';\nimport { Session } from '../../session/entities/session.entity';\nimport { SchemaResponse } from '../credentials-metadata/dto/schema-response.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CredentialConfig } from './entities/credential.entity';\nimport { VCT } from '../credentials-metadata/dto/credential-config.dto';\n\n@Injectable()\nexport class CredentialsService {\n    constructor(\n        private crpytoService: CryptoService,\n        private configService: ConfigService,\n        private statusListService: StatusListService,\n\n        @InjectRepository(CredentialConfig)\n        private credentialConfigRepo: Repository,\n    ) {}\n\n    /**\n     * Store the config. If it already exist, overwrite it.\n     * @param tenantId\n     * @param value\n     * @returns\n     */\n    async storeCredentialConfiguration(\n        tenantId: string,\n        value: CredentialConfig,\n    ) {\n        value.tenantId = tenantId;\n        return this.credentialConfigRepo.save(value);\n    }\n\n    /**\n     * Returns the credential configuration that is required for oid4vci\n     * @param tenantId\n     * @returns\n     */\n    async getCredentialConfiguration(\n        tenantId: string,\n    ): Promise> {\n        const credential_configurations_supported: Record = {};\n\n        const configs = await this.credentialConfigRepo.findBy({ tenantId });\n\n        for (const value of configs) {\n            credential_configurations_supported[value.id] = value.config;\n        }\n        return credential_configurations_supported;\n    }\n\n    async getCredential(\n        credentialConfigurationId: string,\n        cnf: Jwk,\n        session: Session,\n    ) {\n        const credentialConfiguration = await this.credentialConfigRepo\n            .findOneByOrFail({\n                id: credentialConfigurationId,\n                tenantId: session.tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(\n                    `Credential configuration with id ${credentialConfigurationId} not found`,\n                );\n            });\n\n        const claims =\n            session.credentialPayload?.values?.[credentialConfigurationId] ??\n            credentialConfiguration.claims;\n        const disclosureFrame = credentialConfiguration.disclosureFrame;\n\n        const sdjwt = new SDJwtVcInstance({\n            signer: await this.crpytoService.keyService.signer(\n                session.tenantId,\n            ),\n            signAlg: 'ES256',\n            hasher: digest,\n            hashAlg: 'sha-256',\n            saltGenerator: generateSalt,\n            loadTypeMetadataFormat: true,\n        });\n\n        return sdjwt.issue(\n            {\n                iss: this.configService.getOrThrow('PUBLIC_URL'),\n                iat: Math.round(new Date().getTime() / 1000),\n                vct: `${this.configService.getOrThrow('PUBLIC_URL')}/${session.tenantId}/credentials/vct/${credentialConfigurationId}`,\n                cnf: {\n                    jwk: cnf,\n                },\n                ...(await this.statusListService.createEntry(\n                    session,\n                    credentialConfigurationId,\n                )),\n                ...claims,\n            },\n            disclosureFrame,\n            {\n                header: {\n                    x5c: this.crpytoService.getCertChain(\n                        'signing',\n                        session.tenantId,\n                    ),\n                    alg: 'ES256',\n                },\n            },\n        );\n    }\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n     * @param credentialId\n     * @param tenantId\n     * @returns\n     */\n    async getVCT(credentialId: string, tenantId: string): Promise {\n        const credentialConfig = await this.credentialConfigRepo\n            .findOneByOrFail({\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(\n                    `Credential configuration with id ${credentialId} not found`,\n                );\n            });\n        if (!credentialConfig.vct) {\n            throw new ConflictException(\n                `VCT for credential configuration with id ${credentialId} not found`,\n            );\n        }\n        const host = this.configService.getOrThrow('PUBLIC_URL');\n        credentialConfig.vct.vct = `${host}/${tenantId}/credentials-metadata/vct/${credentialConfig.id}`;\n        return credentialConfig.vct;\n    }\n\n    /**\n     * Retrieves the schema for a specific credential configuration.\n     * @param id\n     * @param tenantId\n     * @returns\n     */\n    async getSchema(\n        credentialConfigurationId: string,\n        tenantId: string,\n    ): Promise {\n        const credentialConfig =\n            await this.credentialConfigRepo.findOneByOrFail({\n                tenantId,\n            });\n        if (!credentialConfig) {\n            throw new ConflictException(\n                `Credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        if (!credentialConfig.schema) {\n            throw new ConflictException(\n                `Schema for credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        return credentialConfig.schema;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptoImplementation.html":{"url":"interfaces/CryptoImplementation.html","title":"interface - CryptoImplementation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CryptoImplementation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto/crypto-implementation.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface to imeplement different algorithms.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            alg\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        generateKeyPair\n                                    \n                                \n                                \n                                    \n                                        getSigner\n                                    \n                                \n                                \n                                    \n                                        getVerifier\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyPair\n                        \n                    \n                \n            \n            \n                \ngenerateKeyPair()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto-implementation.ts:19\n                        \n                    \n\n\n            \n                \n                        Generates a new keypair\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSigner\n                        \n                    \n                \n            \n            \n                \ngetSigner(privateKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto-implementation.ts:24\n                        \n                    \n\n\n            \n                \n                        creates a signer based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKeyJWK\n                                            \n                                                        JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getVerifier\n                        \n                    \n                \n            \n            \n                \ngetVerifier(publicKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto-implementation.ts:29\n                        \n                    \n\n\n            \n                \n                        creates a verifier based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                publicKeyJWK\n                                            \n                                                        JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        alg:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type KeyPair = {\n    publicKey: JsonWebKey;\n    privateKey: JsonWebKey;\n};\n\ntype Signer = (data: string) => Promise;\n\ntype Verifier = (data: string, signature: string) => Promise;\n\n/**\n * Generic interface to imeplement different algorithms.\n */\nexport interface CryptoImplementation {\n    //name of the algorithm\n    alg: string;\n    /**\n     * Generates a new keypair\n     */\n    generateKeyPair(): Promise;\n    /**\n     * creates a signer based on the passed key.\n     * @param privateKeyJWK\n     */\n    getSigner(privateKeyJWK: JsonWebKey): Promise;\n    /**\n     * creates a verifier based on the passed key.\n     * @param publicKeyJWK\n     */\n    getVerifier(publicKeyJWK: JsonWebKey): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoModule.html":{"url":"modules/CryptoModule.html","title":"module - CryptoModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_providers\n\n\n\ncluster_CryptoModule_exports\n\n\n\n\nCryptoService \n\nCryptoService \n\n\n\nEncryptionService \n\nEncryptionService \n\n\n\nCryptoModule\n\nCryptoModule\n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/crypto.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CryptoService } from './crypto.service';\nimport { EncryptionService } from './encryption/encryption.service';\n\n@Module({\n    imports: [],\n    providers: [CryptoService, EncryptionService],\n    exports: [CryptoService, EncryptionService],\n})\nexport class CryptoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoService.html":{"url":"injectables/CryptoService.html","title":"injectable - CryptoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/crypto.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                folder\n                            \n                            \n                                    \n                                    Public\n                                    Readonly\n                                keyService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCallbackContext\n                            \n                            \n                                getCertChain\n                            \n                            \n                                getHeadersFromRequest\n                            \n                            \n                                getJwks\n                            \n                            \n                                getSignJwtCallback\n                            \n                            \n                                hasCerts\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Async\n                                signJwt\n                            \n                            \n                                storeAccessCertificate\n                            \n                            \n                                    Async\n                                verifyJwt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, keyService: KeyService, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/crypto.service.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keyService\n                                                  \n                                                        \n                                                                        KeyService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCallbackContext\n                        \n                    \n                \n            \n            \n                \ngetCallbackContext(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:191\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Omit\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCertChain\n                        \n                    \n                \n            \n            \n                \ngetCertChain(type: certificateType, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:144\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            certificateType\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'signing'\n                                            \n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHeadersFromRequest\n                        \n                    \n                \n            \n            \n                \ngetHeadersFromRequest(req: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:266\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     globalThis.Headers\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getJwks\n                        \n                    \n                \n            \n            \n                \ngetJwks(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:280\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSignJwtCallback\n                        \n                    \n                \n            \n            \n                \ngetSignJwtCallback(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:229\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SignJwtCallback\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasCerts\n                        \n                    \n                \n            \n            \n                \nhasCerts(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Checks if there is a signing certificate and access certificate available.\nIf not it will be created.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_INIT, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJwt\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJwt(header: any, payload: any, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:164\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                header\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storeAccessCertificate\n                        \n                    \n                \n            \n            \n                \nstoreAccessCertificate(crt: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                crt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyJwt\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyJwt(compact: string, tenantId: string, payload?: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:172\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                compact\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        folder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/crypto.service.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Readonly\n                        keyService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KeyService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject('KeyService')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/crypto.service.ts:36\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { createHash, randomBytes } from 'node:crypto';\nimport {\n    existsSync,\n    mkdirSync,\n    readFileSync,\n    unlinkSync,\n    writeFileSync,\n} from 'node:fs';\nimport { Inject, Injectable, OnModuleInit } from '@nestjs/common';\nimport {\n    type CallbackContext,\n    HashAlgorithm,\n    type Jwk,\n    SignJwtCallback,\n    calculateJwkThumbprint,\n    clientAuthenticationNone,\n} from '@openid4vc/oauth2';\nimport type { Request } from 'express';\nimport { type JWK, importJWK, jwtVerify } from 'jose';\nimport { ConfigService } from '@nestjs/config';\nimport { join } from 'node:path';\nimport { KeyService } from './key/key.service';\nimport { EC_Public } from '../well-known/dto/jwks-response.dto';\nimport { execSync } from 'node:child_process';\nimport { EventEmitter2, OnEvent } from '@nestjs/event-emitter';\nimport { TENANT_EVENTS } from '../auth/tenant-events';\n\ntype certificateType = 'access' | 'signing';\n\n@Injectable()\nexport class CryptoService implements OnModuleInit {\n    folder: string;\n\n    constructor(\n        private readonly configService: ConfigService,\n        @Inject('KeyService') public readonly keyService: KeyService,\n        private readonly eventEmitter: EventEmitter2,\n    ) {}\n    onModuleInit() {\n        this.folder = join(this.configService.getOrThrow('FOLDER'));\n        if (!existsSync(this.folder)) {\n            mkdirSync(this.folder, { recursive: true });\n        }\n    }\n\n    @OnEvent(TENANT_EVENTS.TENANT_INIT, { async: true })\n    async onTenantInit(tenantId: string) {\n        const folder = join(this.folder, tenantId, 'keys');\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n        await this.keyService.init(tenantId);\n        this.hasCerts(tenantId);\n        this.eventEmitter.emit(TENANT_EVENTS.TENANT_KEYS, tenantId);\n    }\n\n    /**\n     * Checks if there is a signing certificate and access certificate available.\n     * If not it will be created.\n     */\n    hasCerts(tenantId: string) {\n        const folder = join(this.folder, tenantId, 'keys');\n        const pubkey = join(folder, 'public-key.pem');\n        const dummyKey = join(folder, 'dummy_key.pem');\n        const dummyCsr = join(folder, 'dummy.csr');\n        const issuerKey = join(folder, 'issuer_key.pem');\n        const issuerCert = join(folder, 'issuer_cert.pem');\n        const certOut = join(folder, 'signing-certificate.pem');\n        const sanExt = join(folder, 'san.ext');\n        if (!existsSync(certOut)) {\n            // === Configurable parameters (you can parameterize these when calling the script) ===\n            const subject = this.configService.getOrThrow('RP_NAME');\n            const uri = this.configService\n                .getOrThrow('PUBLIC_URL')\n                .replace('https://', '');\n\n            // === Helper to run shell commands ===\n            const run = (cmd) => {\n                execSync(cmd, { stdio: 'inherit' });\n            };\n\n            // === Step-by-step ===\n            mkdirSync(this.folder, { recursive: true });\n\n            // Step 1: Create dummy key pair if public key is missing\n            if (!existsSync(dummyKey)) {\n                // Generate private key (PKCS#8)\n                run(\n                    `openssl genpkey -algorithm EC -pkeyopt ec_paramgen_curve:prime256v1 -out \"${dummyKey}\"`,\n                );\n            } else {\n                if (!existsSync(dummyKey)) {\n                    throw new Error(\n                        `Public key exists but ${dummyKey} is missing.`,\n                    );\n                }\n            }\n\n            // Step 2: Generate issuer key\n            run(\n                `openssl genpkey -algorithm EC -pkeyopt ec_paramgen_curve:prime256v1 -out \"${issuerKey}\"`,\n            );\n\n            // Step 3: Create self-signed issuer cert\n            run(\n                `openssl req -x509 -new -key \"${issuerKey}\" -subj \"/CN=${subject}\" -addext \"subjectAltName=DNS:${uri}\" -days 365 -out \"${issuerCert}\"`,\n            );\n\n            // Step 4: Create dummy CSR\n            run(\n                `openssl req -new -key \"${dummyKey}\" -subj \"/CN=${subject}\" -addext \"subjectAltName=DNS:${uri}\" -out \"${dummyCsr}\"`,\n            );\n\n            // Step 5: Create SAN extension file\n            writeFileSync(sanExt, `subjectAltName=DNS:${uri}`);\n\n            // Step 6: Sign certificate using issuer\n            run(\n                `openssl x509 -req -in \"${dummyCsr}\" -force_pubkey \"${pubkey}\" -CA \"${issuerCert}\" -CAkey \"${issuerKey}\" -CAcreateserial -days 365 -extfile \"${sanExt}\" -out \"${certOut}\"`,\n            );\n\n            // Step 7: Clean up\n            [\n                issuerKey,\n                issuerCert,\n                dummyCsr,\n                dummyKey,\n                join(folder, 'issuer_cert.srl'),\n                sanExt,\n            ].forEach((file) => {\n                if (existsSync(file)) unlinkSync(file);\n            });\n        }\n        if (!existsSync(join(folder, 'access-certificate.pem'))) {\n            // Create access certificate from signing certificate\n            const signingCert = readFileSync(\n                join(folder, 'signing-certificate.pem'),\n                'utf-8',\n            );\n            writeFileSync(join(folder, 'access-certificate.pem'), signingCert);\n        }\n    }\n\n    getCertChain(type: certificateType = 'signing', tenantId: string) {\n        const cert = readFileSync(\n            join(this.folder, tenantId, 'keys', `${type}-certificate.pem`),\n            'utf-8',\n        );\n\n        const chain = cert\n            .replace('-----BEGIN CERTIFICATE-----', '')\n            .replace('-----END CERTIFICATE-----', '')\n            .replace(/\\r?\\n|\\r/g, '');\n        return [chain];\n    }\n\n    storeAccessCertificate(crt: string, tenantId: string) {\n        writeFileSync(\n            join(this.folder, tenantId, 'keys', `access-certificate.pem`),\n            crt,\n        );\n    }\n\n    async signJwt(\n        header: any,\n        payload: any,\n        tenantId: string,\n    ): Promise {\n        return this.keyService.signJWT(payload, header, tenantId);\n    }\n\n    async verifyJwt(\n        compact: string,\n        tenantId: string,\n        payload?: Record,\n    ): Promise {\n        const publicJwk = await this.keyService.getPublicKey('jwk', tenantId);\n        const publicCryptoKey = await importJWK(publicJwk, 'ES256');\n\n        try {\n            await jwtVerify(compact, publicCryptoKey, {\n                currentDate: payload?.exp\n                    ? new Date((payload.exp - 300) * 1000)\n                    : undefined,\n            });\n            return { verified: true };\n        } catch {\n            return { verified: false };\n        }\n    }\n    getCallbackContext(\n        tenantId: string,\n    ): Omit {\n        return {\n            hash: (data, alg) =>\n                createHash(alg.replace('-', '').toLowerCase())\n                    .update(data)\n                    .digest(),\n            generateRandom: (bytes) => randomBytes(bytes),\n            clientAuthentication: clientAuthenticationNone({\n                clientId: 'some-random',\n            }),\n            //clientId: 'some-random-client-id', // TODO: Replace with your real clientId if necessary\n            signJwt: this.getSignJwtCallback(tenantId),\n            verifyJwt: async (signer, { compact, payload }) => {\n                if (signer.method !== 'jwk') {\n                    throw new Error('Signer method not supported');\n                }\n\n                const josePublicKey = await importJWK(\n                    signer.publicJwk as JWK,\n                    signer.alg,\n                );\n                try {\n                    await jwtVerify(compact, josePublicKey, {\n                        currentDate: payload?.exp\n                            ? new Date((payload.exp - 300) * 1000)\n                            : undefined,\n                    });\n                    return { verified: true, signerJwk: signer.publicJwk };\n                } catch {\n                    return { verified: false };\n                }\n            },\n        };\n    }\n\n    // Helper to generate signJwt callback\n    getSignJwtCallback(tenantId: string): SignJwtCallback {\n        return async (signer, { header, payload }) => {\n            if (signer.method !== 'jwk') {\n                throw new Error('Signer method not supported');\n            }\n            const hashCallback = this.getCallbackContext(tenantId).hash;\n            const jwkThumbprint = await calculateJwkThumbprint({\n                jwk: signer.publicJwk,\n                hashAlgorithm: HashAlgorithm.Sha256,\n                hashCallback,\n            });\n\n            const privateThumbprint = await calculateJwkThumbprint({\n                jwk: (await this.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n                hashAlgorithm: HashAlgorithm.Sha256,\n                hashCallback,\n            });\n\n            if (jwkThumbprint !== privateThumbprint) {\n                throw new Error(\n                    `No private key available for public jwk \\n${JSON.stringify(signer.publicJwk, null, 2)}`,\n                );\n            }\n\n            const jwt = await this.signJwt(header, payload, tenantId);\n\n            return {\n                jwt,\n                signerJwk: signer.publicJwk,\n            };\n        };\n    }\n\n    // Utility method like in your utils.ts\n    getHeadersFromRequest(req: Request): globalThis.Headers {\n        const headers = new Headers();\n        for (const [key, value] of Object.entries(req.headers)) {\n            if (Array.isArray(value)) {\n                for (const v of value) {\n                    headers.append(key, v);\n                }\n            } else if (value !== undefined) {\n                headers.set(key, value);\n            }\n        }\n        return headers;\n    }\n\n    getJwks(tenantId: string) {\n        return this.keyService.getPublicKey(\n            'jwk',\n            tenantId,\n        ) as Promise;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoService-1.html":{"url":"injectables/CryptoService-1.html","title":"injectable - CryptoService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto/crypto.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAlg\n                            \n                            \n                                getCrypto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configServie: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/crypto/crypto.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configServie\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAlg\n                        \n                    \n                \n            \n            \n                \ngetAlg()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Return the algorithm that is used for the crypto operations like signing.\n\n\n                        \n                            Returns :         CryptoType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCrypto\n                        \n                    \n                \n            \n            \n                \ngetCrypto(alg)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                alg\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    this.configServie.get('CRYPTO_ALG')\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CryptoImplementation\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config';\nimport { ES256 } from '@sd-jwt/crypto-nodejs';\nimport { ED25519 } from './ed25519';\nimport { CryptoImplementation } from './crypto-implementation';\nimport { Injectable } from '@nestjs/common';\n\nexport type CryptoType = 'ES256' | 'Ed25519';\n\n@Injectable()\nexport class CryptoService {\n    constructor(private configServie: ConfigService) {}\n\n    /**\n     * Return the algorithm that is used for the crypto operations like signing.\n     * @returns\n     */\n    getAlg(): CryptoType {\n        return this.configServie.get('CRYPTO_ALG') as CryptoType;\n    }\n\n    getCrypto(\n        alg = this.configServie.get('CRYPTO_ALG'),\n    ): CryptoImplementation {\n        switch (alg) {\n            case 'Ed25519':\n                return ED25519;\n            case 'ES256':\n                return ES256;\n            default:\n                throw new Error(`Unsupported algorithm ${alg}`);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport { join } from 'path';\nimport * as Joi from 'joi';\n\nexport const DB_VALIDATION_SCHEMA = {\n    DB_TYPE: Joi.string().valid('sqlite', 'postgres').default('sqlite'),\n    DB_HOST: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PORT: Joi.number().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_USERNAME: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PASSWORD: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_DATABASE: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n};\n\n@Module({\n    imports: [\n        TypeOrmModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (\n                configService: ConfigService,\n            ): TypeOrmModuleOptions => {\n                const dbType = configService.get(\n                    'DB_TYPE',\n                );\n\n                const commonOptions = {\n                    synchronize: true,\n                    autoLoadEntities: true,\n                };\n\n                if (dbType === 'postgres') {\n                    return {\n                        type: 'postgres',\n                        host: configService.getOrThrow('DB_HOST'),\n                        port: configService.getOrThrow('DB_PORT'),\n                        username:\n                            configService.getOrThrow('DB_USERNAME'),\n                        password:\n                            configService.getOrThrow('DB_PASSWORD'),\n                        database:\n                            configService.getOrThrow('DB_DATABASE'),\n                        ...commonOptions,\n                    };\n                }\n\n                return {\n                    type: 'sqlite',\n                    database: join(\n                        configService.getOrThrow('FOLDER'),\n                        'service.db',\n                    ),\n                    ...commonOptions,\n                };\n            },\n        }),\n    ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EC_Public.html":{"url":"classes/EC_Public.html","title":"class - EC_Public","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EC_Public\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\nThis class is used to define the structure of EC public keys in JWK format.\n\n            \n\n\n            \n                Implements\n            \n            \n                            JWK_EC_Public\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crv\n                            \n                            \n                                kty\n                            \n                            \n                                x\n                            \n                            \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:15\n                        \n                    \n\n            \n                \n                    The algorithm intended for use with the key, such as 'ES256'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        kty\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The key type, which is always 'EC' for Elliptic Curve keys.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:19\n                        \n                    \n\n            \n                \n                    The x coordinate of the EC public key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:23\n                        \n                    \n\n            \n                \n                    The y coordinate of the EC public key.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from 'jose';\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: 'EC';\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncryptionService.html":{"url":"injectables/EncryptionService.html","title":"injectable - EncryptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncryptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/encryption/encryption.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                privateEncryptionKey\n                            \n                            \n                                    Private\n                                privateEnncryptionPath\n                            \n                            \n                                    Private\n                                publicEncryptionKey\n                            \n                            \n                                    Private\n                                publicEncryptionPath\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decryptJwe\n                            \n                            \n                                getEncryptionPublicKey\n                            \n                            \n                                    Async\n                                init\n                            \n                            \n                                    \n                                    Async\n                                onTenantInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/encryption/encryption.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decryptJwe\n                        \n                    \n                \n            \n            \n                \n                        \n                    decryptJwe(response: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:58\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEncryptionPublicKey\n                        \n                    \n                \n            \n            \n                \ngetEncryptionPublicKey()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     JWK\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_INIT, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        privateEncryptionKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CryptoKey\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        privateEnncryptionPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        publicEncryptionKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JWK\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        publicEncryptionPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport { importJWK, exportJWK, generateKeyPair, jwtDecrypt, JWK } from 'jose';\nimport { join } from 'path';\nimport { TENANT_EVENTS } from '../../auth/tenant-events';\nimport { OnEvent } from '@nestjs/event-emitter';\n\n@Injectable()\nexport class EncryptionService {\n    private privateEncryptionKey: CryptoKey;\n    private publicEncryptionKey: JWK;\n    private privateEnncryptionPath: string;\n    private publicEncryptionPath: string;\n\n    constructor(private configService: ConfigService) {}\n\n    @OnEvent(TENANT_EVENTS.TENANT_INIT, { async: true })\n    async onTenantInit(tenantId: string) {\n        await this.init(tenantId);\n    }\n\n    async init(tenantId: string) {\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'keys',\n        );\n        this.privateEnncryptionPath = join(folder, 'private-encryption.json');\n        this.publicEncryptionPath = join(folder, 'public-encryption.json');\n        if (!existsSync(this.privateEnncryptionPath)) {\n            await generateKeyPair('ECDH-ES', {\n                crv: 'P-256',\n                extractable: true,\n            }).then(async (secret) => {\n                writeFileSync(\n                    this.privateEnncryptionPath,\n                    JSON.stringify(await exportJWK(secret.privateKey), null, 2),\n                );\n                writeFileSync(\n                    this.publicEncryptionPath,\n                    JSON.stringify(await exportJWK(secret.publicKey), null, 2),\n                );\n            });\n        }\n\n        await importJWK(\n            JSON.parse(readFileSync(this.privateEnncryptionPath, 'utf-8')),\n            'ECDH-ES',\n        ).then((key) => {\n            this.privateEncryptionKey = key as CryptoKey;\n        });\n        this.publicEncryptionKey = JSON.parse(\n            readFileSync(this.publicEncryptionPath, 'utf-8'),\n        ) as JWK;\n    }\n\n    async decryptJwe(response: string): Promise {\n        const res = await jwtDecrypt(response, this.privateEncryptionKey);\n        return res.payload;\n    }\n\n    getEncryptionPublicKey() {\n        return this.publicEncryptionKey;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Fields.html":{"url":"interfaces/Fields.html","title":"interface - Fields","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Fields\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/params.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowExtra\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            args\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowExtra\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowExtra:         Partial>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Partial>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        args\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        args:         ReadonlyArray\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ReadonlyArray\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type Slot = 'body' | 'headers' | 'path' | 'query';\n\nexport type Field =\n    | {\n          in: Exclude;\n          key: string;\n          map?: string;\n      }\n    | {\n          in: Extract;\n          key?: string;\n          map?: string;\n      };\n\nexport interface Fields {\n    allowExtra?: Partial>;\n    args?: ReadonlyArray;\n}\n\nexport type FieldsConfig = ReadonlyArray;\n\nconst extraPrefixesMap: Record = {\n    $body_: 'body',\n    $headers_: 'headers',\n    $path_: 'path',\n    $query_: 'query',\n};\nconst extraPrefixes = Object.entries(extraPrefixesMap);\n\ntype KeyMap = Map;\n\nconst buildKeyMap = (fields: FieldsConfig, map?: KeyMap): KeyMap => {\n    if (!map) {\n        map = new Map();\n    }\n\n    for (const config of fields) {\n        if ('in' in config) {\n            if (config.key) {\n                map.set(config.key, {\n                    in: config.in,\n                    map: config.map,\n                });\n            }\n        } else if (config.args) {\n            buildKeyMap(config.args, map);\n        }\n    }\n\n    return map;\n};\n\ninterface Params {\n    body: unknown;\n    headers: Record;\n    path: Record;\n    query: Record;\n}\n\nconst stripEmptySlots = (params: Params) => {\n    for (const [slot, value] of Object.entries(params)) {\n        if (value && typeof value === 'object' && !Object.keys(value).length) {\n            delete params[slot as Slot];\n        }\n    }\n};\n\nexport const buildClientParams = (\n    args: ReadonlyArray,\n    fields: FieldsConfig,\n) => {\n    const params: Params = {\n        body: {},\n        headers: {},\n        path: {},\n        query: {},\n    };\n\n    const map = buildKeyMap(fields);\n\n    let config: FieldsConfig[number] | undefined;\n\n    for (const [index, arg] of args.entries()) {\n        if (fields[index]) {\n            config = fields[index];\n        }\n\n        if (!config) {\n            continue;\n        }\n\n        if ('in' in config) {\n            if (config.key) {\n                const field = map.get(config.key)!;\n                const name = field.map || config.key;\n                (params[field.in] as Record)[name] = arg;\n            } else {\n                params.body = arg;\n            }\n        } else {\n            for (const [key, value] of Object.entries(arg ?? {})) {\n                const field = map.get(key);\n\n                if (field) {\n                    const name = field.map || key;\n                    (params[field.in] as Record)[name] = value;\n                } else {\n                    const extra = extraPrefixes.find(([prefix]) =>\n                        key.startsWith(prefix),\n                    );\n\n                    if (extra) {\n                        const [prefix, slot] = extra;\n                        (params[slot] as Record)[\n                            key.slice(prefix.length)\n                        ] = value;\n                    } else {\n                        for (const [slot, allowed] of Object.entries(\n                            config.allowExtra ?? {},\n                        )) {\n                            if (allowed) {\n                                (\n                                    params[slot as Slot] as Record\n                                )[key] = value;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    stripEmptySlots(params);\n\n    return params;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileSystemKeyService.html":{"url":"injectables/FileSystemKeyService.html","title":"injectable - FileSystemKeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileSystemKeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/filesystem-key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The key service is responsible for managing the keys of the issuer.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                crypto\n                            \n                            \n                                    Private\n                                privateKeyPath\n                            \n                            \n                                    Private\n                                publicKeyPath\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                getKeys\n                            \n                            \n                                getKid\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                init\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                signer\n                            \n                            \n                                    Async\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/filesystem-key.service.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKeys(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Get the keys from the file system or generate them if they do not exist\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getKid\n                        \n                    \n                \n            \n            \n                \ngetKid(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Get the key id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:131\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:133\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenant: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenant\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Get the signer for the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JWTHeaderParameters, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWTHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        crypto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/filesystem-key.service.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        privateKeyPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'private-key.pem'\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/filesystem-key.service.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        publicKeyPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'public-key.pem'\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/filesystem-key.service.ts:32\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { existsSync, mkdirSync, writeFileSync, readFileSync } from 'node:fs';\nimport {\n    JWK,\n    JWTHeaderParameters,\n    JWTPayload,\n    CryptoKey,\n    SignJWT,\n    importJWK,\n    exportPKCS8,\n    exportSPKI,\n    importPKCS8,\n    importSPKI,\n    exportJWK,\n} from 'jose';\nimport { v4 } from 'uuid';\nimport { KeyService } from './key.service';\nimport { Injectable } from '@nestjs/common';\nimport { Signer } from '@sd-jwt/types';\nimport { ConfigService } from '@nestjs/config';\nimport { CryptoImplementation } from './crypto/crypto-implementation';\nimport { CryptoService } from './crypto/crypto.service';\nimport { join } from 'node:path';\n\n/**\n * The key service is responsible for managing the keys of the issuer.\n */\n@Injectable()\nexport class FileSystemKeyService implements KeyService {\n    private crypto: CryptoImplementation;\n\n    private privateKeyPath = 'private-key.pem';\n    private publicKeyPath = 'public-key.pem';\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n    ) {\n        this.crypto = this.cryptoService.getCrypto();\n    }\n\n    async onModuleInit(): Promise {}\n    async init(tenant: string) {\n        // Initialize the key service for a specific tenant\n        // This will create the keys if they do not exist\n        await this.getKeys(tenant);\n    }\n\n    /**\n     * Get the signer for the key service\n     */\n    async signer(tenantId: string): Promise {\n        const keys = await this.getKeys(tenantId);\n        return this.crypto.getSigner(keys.privateKey);\n    }\n\n    /**\n     * Get the keys from the file system or generate them if they do not exist\n     * @returns\n     */\n    private async getKeys(tenantId: string) {\n        let privateKey: JWK;\n        let publicKey: JWK;\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'keys',\n        );\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n        if (\n            !existsSync(join(folder, this.privateKeyPath)) &&\n            !existsSync(join(folder, this.publicKeyPath))\n        ) {\n            const keys = await this.crypto.generateKeyPair();\n            privateKey = keys.privateKey as JWK;\n            publicKey = keys.publicKey as JWK;\n            //add a random key id for reference\n            publicKey.kid = v4();\n            privateKey.kid = publicKey.kid;\n            privateKey.alg = this.crypto.alg;\n            publicKey.alg = this.crypto.alg;\n            writeFileSync(\n                join(folder, this.privateKeyPath),\n                await exportPKCS8((await importJWK(privateKey)) as CryptoKey),\n            );\n            writeFileSync(\n                join(folder, this.publicKeyPath),\n                await exportSPKI((await importJWK(publicKey)) as CryptoKey),\n            );\n            return { privateKey, publicKey };\n        }\n\n        privateKey = await exportJWK(\n            await importPKCS8(\n                readFileSync(join(folder, this.privateKeyPath), 'utf-8'),\n                this.crypto.alg,\n                {\n                    extractable: true,\n                },\n            ),\n        );\n        //should be stored the cert\n        privateKey.alg = this.crypto.alg;\n        publicKey = await exportJWK(\n            await importSPKI(\n                readFileSync(join(folder, this.publicKeyPath), 'utf-8'),\n                this.crypto.alg,\n            ),\n        );\n        return { privateKey, publicKey };\n    }\n\n    /**\n     * Get the key id\n     * @returns\n     */\n    getKid(tenantId: string): Promise {\n        return this.getKeys(tenantId).then((keys) => {\n            if (keys.publicKey.kid) {\n                return keys.publicKey.kid;\n            }\n            throw new Error('Key id not found');\n        });\n    }\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    getPublicKey(type: 'jwk', tenantId: string): Promise;\n    getPublicKey(type: 'pem', tenantId: string): Promise;\n    async getPublicKey(\n        type: 'pem' | 'jwk',\n        tenantId: string,\n    ): Promise {\n        const keys = await this.getKeys(tenantId);\n        if (type === 'pem') {\n            return exportSPKI(\n                (await importJWK(\n                    keys.publicKey,\n                    this.cryptoService.getAlg(),\n                )) as CryptoKey,\n            );\n        } else {\n            return Promise.resolve(keys.publicKey);\n        }\n    }\n\n    async signJWT(\n        payload: JWTPayload,\n        header: JWTHeaderParameters,\n        tenantId: string,\n    ): Promise {\n        const keys = await this.getKeys(tenantId);\n        const privateKeyInstance = (await importJWK(\n            keys.privateKey,\n        )) as CryptoKey;\n        return new SignJWT(payload)\n            .setProtectedHeader(header)\n            .sign(privateKeyInstance);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GenerateTokenOptions.html":{"url":"interfaces/GenerateTokenOptions.html","title":"interface - GenerateTokenOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GenerateTokenOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            audience\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresIn\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subject\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresIn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SignJWT, jwtVerify, decodeJwt } from 'jose';\nimport { TokenPayload } from './token.decorator';\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {}\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow('JWT_EXPIRES_IN');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: 'HS256' })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token verification is handled by external OIDC provider.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: ['HS256'],\n            });\n\n            return payload as TokenPayload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Decode token without verification (for debugging)\n     */\n    decodeToken(token: string): TokenPayload | null {\n        try {\n            return decodeJwt(token) as TokenPayload;\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get('OIDC') !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                HealthController is responsible for providing health check endpoints.\nIt uses the HealthCheckService to perform checks on the database connection.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Endpoint to check the health of the service.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport {\n    HealthCheck,\n    HealthCheckService,\n    TypeOrmHealthIndicator,\n} from '@nestjs/terminus';\n\n/**\n * HealthController is responsible for providing health check endpoints.\n * It uses the HealthCheckService to perform checks on the database connection.\n */\n@Controller('health')\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        private db: TypeOrmHealthIndicator,\n    ) {}\n\n    /**\n     * Endpoint to check the health of the service.\n     * @returns\n     */\n    @Get()\n    @HealthCheck()\n    check() {\n        return this.health.check([() => this.db.pingCheck('database')]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HealthController } from './health.controller';\nimport { TerminusModule } from '@nestjs/terminus';\n\n@Module({\n    imports: [TerminusModule],\n    controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Interceptors.html":{"url":"classes/Interceptors.html","title":"class - Interceptors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Interceptors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/utils.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _fns\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clear\n                            \n                            \n                                eject\n                            \n                            \n                                exists\n                            \n                            \n                                getInterceptorIndex\n                            \n                            \n                                update\n                            \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/registrar/generated/client/utils.ts:331\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _fns\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (Interceptor | null)[]\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/generated/client/utils.ts:331\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:337\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eject\n                        \n                    \n                \n            \n            \n                \neject(id: number | Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:353\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(id: number | Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:348\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInterceptorIndex\n                        \n                    \n                \n            \n            \n                \ngetInterceptorIndex(id: number | Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:341\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number | Interceptor, fn: Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:360\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fn\n                                            \n                                                        Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     number | false | Interceptor\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(fn: Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:370\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                        Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { getAuthToken } from '../core/auth';\nimport type {\n    QuerySerializer,\n    QuerySerializerOptions,\n} from '../core/bodySerializer';\nimport { jsonBodySerializer } from '../core/bodySerializer';\nimport {\n    serializeArrayParam,\n    serializeObjectParam,\n    serializePrimitiveParam,\n} from '../core/pathSerializer';\nimport type { Client, ClientOptions, Config, RequestOptions } from './types';\n\ninterface PathSerializer {\n    path: Record;\n    url: string;\n}\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\ntype ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\ntype ArraySeparatorStyle = ArrayStyle | MatrixStyle;\n\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n    let url = _url;\n    const matches = _url.match(PATH_PARAM_RE);\n    if (matches) {\n        for (const match of matches) {\n            let explode = false;\n            let name = match.substring(1, match.length - 1);\n            let style: ArraySeparatorStyle = 'simple';\n\n            if (name.endsWith('*')) {\n                explode = true;\n                name = name.substring(0, name.length - 1);\n            }\n\n            if (name.startsWith('.')) {\n                name = name.substring(1);\n                style = 'label';\n            } else if (name.startsWith(';')) {\n                name = name.substring(1);\n                style = 'matrix';\n            }\n\n            const value = path[name];\n\n            if (value === undefined || value === null) {\n                continue;\n            }\n\n            if (Array.isArray(value)) {\n                url = url.replace(\n                    match,\n                    serializeArrayParam({ explode, name, style, value }),\n                );\n                continue;\n            }\n\n            if (typeof value === 'object') {\n                url = url.replace(\n                    match,\n                    serializeObjectParam({\n                        explode,\n                        name,\n                        style,\n                        value: value as Record,\n                        valueOnly: true,\n                    }),\n                );\n                continue;\n            }\n\n            if (style === 'matrix') {\n                url = url.replace(\n                    match,\n                    `;${serializePrimitiveParam({\n                        name,\n                        value: value as string,\n                    })}`,\n                );\n                continue;\n            }\n\n            const replaceValue = encodeURIComponent(\n                style === 'label' ? `.${value as string}` : (value as string),\n            );\n            url = url.replace(match, replaceValue);\n        }\n    }\n    return url;\n};\n\nexport const createQuerySerializer = ({\n    allowReserved,\n    array,\n    object,\n}: QuerySerializerOptions = {}) => {\n    const querySerializer = (queryParams: T) => {\n        const search: string[] = [];\n        if (queryParams && typeof queryParams === 'object') {\n            for (const name in queryParams) {\n                const value = queryParams[name];\n\n                if (value === undefined || value === null) {\n                    continue;\n                }\n\n                if (Array.isArray(value)) {\n                    const serializedArray = serializeArrayParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'form',\n                        value,\n                        ...array,\n                    });\n                    if (serializedArray) search.push(serializedArray);\n                } else if (typeof value === 'object') {\n                    const serializedObject = serializeObjectParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'deepObject',\n                        value: value as Record,\n                        ...object,\n                    });\n                    if (serializedObject) search.push(serializedObject);\n                } else {\n                    const serializedPrimitive = serializePrimitiveParam({\n                        allowReserved,\n                        name,\n                        value: value as string,\n                    });\n                    if (serializedPrimitive) search.push(serializedPrimitive);\n                }\n            }\n        }\n        return search.join('&');\n    };\n    return querySerializer;\n};\n\n/**\n * Infers parseAs value from provided Content-Type header.\n */\nexport const getParseAs = (\n    contentType: string | null,\n): Exclude => {\n    if (!contentType) {\n        // If no Content-Type header is provided, the best we can do is return the raw response body,\n        // which is effectively the same as the 'stream' option.\n        return 'stream';\n    }\n\n    const cleanContent = contentType.split(';')[0]?.trim();\n\n    if (!cleanContent) {\n        return;\n    }\n\n    if (\n        cleanContent.startsWith('application/json') ||\n        cleanContent.endsWith('+json')\n    ) {\n        return 'json';\n    }\n\n    if (cleanContent === 'multipart/form-data') {\n        return 'formData';\n    }\n\n    if (\n        ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n            cleanContent.startsWith(type),\n        )\n    ) {\n        return 'blob';\n    }\n\n    if (cleanContent.startsWith('text/')) {\n        return 'text';\n    }\n\n    return;\n};\n\nexport const setAuthParams = async ({\n    security,\n    ...options\n}: Pick, 'security'> &\n    Pick & {\n        headers: Headers;\n    }) => {\n    for (const auth of security) {\n        const token = await getAuthToken(auth, options.auth);\n\n        if (!token) {\n            continue;\n        }\n\n        const name = auth.name ?? 'Authorization';\n\n        switch (auth.in) {\n            case 'query':\n                if (!options.query) {\n                    options.query = {};\n                }\n                options.query[name] = token;\n                break;\n            case 'cookie':\n                options.headers.append('Cookie', `${name}=${token}`);\n                break;\n            case 'header':\n            default:\n                options.headers.set(name, token);\n                break;\n        }\n\n        return;\n    }\n};\n\nexport const buildUrl: Client['buildUrl'] = (options) => {\n    const url = getUrl({\n        baseUrl: options.baseUrl as string,\n        path: options.path,\n        query: options.query,\n        querySerializer:\n            typeof options.querySerializer === 'function'\n                ? options.querySerializer\n                : createQuerySerializer(options.querySerializer),\n        url: options.url,\n    });\n    return url;\n};\n\nexport const getUrl = ({\n    baseUrl,\n    path,\n    query,\n    querySerializer,\n    url: _url,\n}: {\n    baseUrl?: string;\n    path?: Record;\n    query?: Record;\n    querySerializer: QuerySerializer;\n    url: string;\n}) => {\n    const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n    let url = (baseUrl ?? '') + pathUrl;\n    if (path) {\n        url = defaultPathSerializer({ path, url });\n    }\n    let search = query ? querySerializer(query) : '';\n    if (search.startsWith('?')) {\n        search = search.substring(1);\n    }\n    if (search) {\n        url += `?${search}`;\n    }\n    return url;\n};\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n    const config = { ...a, ...b };\n    if (config.baseUrl?.endsWith('/')) {\n        config.baseUrl = config.baseUrl.substring(0, config.baseUrl.length - 1);\n    }\n    config.headers = mergeHeaders(a.headers, b.headers);\n    return config;\n};\n\nexport const mergeHeaders = (\n    ...headers: Array['headers'] | undefined>\n): Headers => {\n    const mergedHeaders = new Headers();\n    for (const header of headers) {\n        if (!header || typeof header !== 'object') {\n            continue;\n        }\n\n        const iterator =\n            header instanceof Headers\n                ? header.entries()\n                : Object.entries(header);\n\n        for (const [key, value] of iterator) {\n            if (value === null) {\n                mergedHeaders.delete(key);\n            } else if (Array.isArray(value)) {\n                for (const v of value) {\n                    mergedHeaders.append(key, v as string);\n                }\n            } else if (value !== undefined) {\n                // assume object headers are meant to be JSON stringified, i.e. their\n                // content value in OpenAPI specification is 'application/json'\n                mergedHeaders.set(\n                    key,\n                    typeof value === 'object'\n                        ? JSON.stringify(value)\n                        : (value as string),\n                );\n            }\n        }\n    }\n    return mergedHeaders;\n};\n\ntype ErrInterceptor = (\n    error: Err,\n    response: Res,\n    request: Req,\n    options: Options,\n) => Err | Promise;\n\ntype ReqInterceptor = (\n    request: Req,\n    options: Options,\n) => Req | Promise;\n\ntype ResInterceptor = (\n    response: Res,\n    request: Req,\n    options: Options,\n) => Res | Promise;\n\nclass Interceptors {\n    _fns: (Interceptor | null)[];\n\n    constructor() {\n        this._fns = [];\n    }\n\n    clear() {\n        this._fns = [];\n    }\n\n    getInterceptorIndex(id: number | Interceptor): number {\n        if (typeof id === 'number') {\n            return this._fns[id] ? id : -1;\n        } else {\n            return this._fns.indexOf(id);\n        }\n    }\n    exists(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        return !!this._fns[index];\n    }\n\n    eject(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = null;\n        }\n    }\n\n    update(id: number | Interceptor, fn: Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = fn;\n            return id;\n        } else {\n            return false;\n        }\n    }\n\n    use(fn: Interceptor) {\n        this._fns = [...this._fns, fn];\n        return this._fns.length - 1;\n    }\n}\n\n// `createInterceptors()` response, meant for external use as it does not\n// expose internals\nexport interface Middleware {\n    error: Pick>,\n        'eject' | 'use'\n    >;\n    request: Pick>, 'eject' | 'use'>;\n    response: Pick>,\n        'eject' | 'use'\n    >;\n}\n\n// do not add `Middleware` as return type so we can use _fns internally\nexport const createInterceptors = () => ({\n    error: new Interceptors>(),\n    request: new Interceptors>(),\n    response: new Interceptors>(),\n});\n\nconst defaultQuerySerializer = createQuerySerializer({\n    allowReserved: false,\n    array: {\n        explode: true,\n        style: 'form',\n    },\n    object: {\n        explode: true,\n        style: 'deepObject',\n    },\n});\n\nconst defaultHeaders = {\n    'Content-Type': 'application/json',\n};\n\nexport const createConfig = (\n    override: Config & T> = {},\n): Config & T> => ({\n    ...jsonBodySerializer,\n    headers: defaultHeaders,\n    parseAs: 'auto',\n    querySerializer: defaultQuerySerializer,\n    ...override,\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/IssuanceConfig.html":{"url":"entities/IssuanceConfig.html","title":"entity - IssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  IssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/entities/issuance-config.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                createdAt\n                            \n                            \n                                    \n                                credentialConfigs\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                presentation_during_issuance\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:39\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfig[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, credentialConfig => credentialConfig.issuanceConfig)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:13\n                        \n                    \n\n            \n                \n                    Unique identifier for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        presentation_during_issuance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PresentationDuringIssuance\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:34\n                        \n                    \n\n            \n                \n                    Presentation during issuance configuration.\nThis is optional and can be used to specify how the presentation should be handled during the issuance process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:19\n                        \n                    \n\n            \n                \n                    Tenant ID for the issuance configuration.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { IsOptional, IsObject } from 'class-validator';\nimport { Column, Entity, ManyToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { PresentationDuringIssuance } from '../../credentials-metadata/dto/credential-config.dto';\nimport { ApiHideProperty } from '@nestjs/swagger';\nimport { CredentialConfig } from '../../credentials/entities/credential.entity';\n\n@Entity()\nexport class IssuanceConfig {\n    /**\n     * Unique identifier for the issuance configuration.\n     */\n    @PrimaryGeneratedColumn('uuid')\n    id: string;\n    /**\n     * Tenant ID for the issuance configuration.\n     */\n    @ApiHideProperty()\n    @Column('varchar')\n    tenantId: string;\n\n    @ManyToMany(\n        () => CredentialConfig,\n        (credentialConfig) => credentialConfig.issuanceConfig,\n    )\n    credentialConfigs: CredentialConfig[];\n\n    /**\n     * Presentation during issuance configuration.\n     * This is optional and can be used to specify how the presentation should be handled during the issuance process.\n     */\n    @IsObject()\n    @IsOptional()\n    @Column('json', { nullable: true })\n    presentation_during_issuance?: PresentationDuringIssuance;\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuanceController.html":{"url":"controllers/IssuanceController.html","title":"controller - IssuanceController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuanceController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management/issuance\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getIssuanceConfigurations\n                            \n                            \n                                    \n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:54\n                        \n                    \n\n\n            \n                \n                        Deletes an issuance configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getIssuanceConfigurations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfigurations(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:28\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(config: IssuanceDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Stores the issuance configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n    Body,\n} from '@nestjs/common';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { ApiTags, ApiSecurity } from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { IssuanceService } from './issuance.service';\nimport { IssuanceDto } from './dto/issuance.dto';\n\n@ApiTags('Issuer management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('issuer-management/issuance')\nexport class IssuanceController {\n    constructor(private readonly issuanceService: IssuanceService) {}\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getIssuanceConfigurations(@Token() user: TokenPayload) {\n        return this.issuanceService.getIssuanceConfiguration(user.sub);\n    }\n\n    /**\n     * Stores the issuance configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeIssuanceConfiguration(\n        @Body() config: IssuanceDto,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.storeIssuanceConfiguration(\n            user.sub,\n            config,\n        );\n    }\n\n    /**\n     * Deletes an issuance configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(':id')\n    deleteIssuanceConfiguration(\n        @Param('id') id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.deleteIssuanceConfiguration(user.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IssuanceDto.html":{"url":"classes/IssuanceDto.html","title":"class - IssuanceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IssuanceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/issuance.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                credentialConfigs\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                presentation_during_issuance\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credentialConfigs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({each: true})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        presentation_during_issuance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PresentationDuringIssuance\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsObject, IsOptional, IsString } from 'class-validator';\nimport { PresentationDuringIssuance } from '../../credentials-metadata/dto/credential-config.dto';\n\nexport class IssuanceDto {\n    @IsString({ each: true })\n    @IsArray()\n    credentialConfigs: string[];\n\n    @IsObject()\n    @IsOptional()\n    presentation_during_issuance?: PresentationDuringIssuance;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IssuanceService.html":{"url":"injectables/IssuanceService.html","title":"injectable - IssuanceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IssuanceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    Public\n                                    Async\n                                getIssuanceConfiguration\n                            \n                            \n                                    Async\n                                getIssuanceConfigurationById\n                            \n                            \n                                    Async\n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(issuanceConfigRepo: Repository, credentialsConfigService: CredentialConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/issuance/issuance.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        issuanceConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialsConfigService\n                                                  \n                                                        \n                                                                        CredentialConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \ndeleteIssuanceConfiguration(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:76\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfiguration(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:22\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getIssuanceConfigurationById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfigurationById(issuanceConfigId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configuration by ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuanceConfigId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(tenantId: string, value: IssuanceDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Store the config. If it already exist, overwrite it.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { IssuanceConfig } from './entities/issuance-config.entity';\nimport { CredentialConfigService } from '../credentials/credential-config/credential-config.service';\nimport { IssuanceDto } from './dto/issuance.dto';\nimport { CredentialConfig } from '../credentials/entities/credential.entity';\n\n@Injectable()\nexport class IssuanceService {\n    constructor(\n        @InjectRepository(IssuanceConfig)\n        private issuanceConfigRepo: Repository,\n        private credentialsConfigService: CredentialConfigService,\n    ) {}\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @param tenantId\n     * @returns\n     */\n    public async getIssuanceConfiguration(tenantId: string) {\n        return this.issuanceConfigRepo.find({\n            where: { tenantId },\n            relations: ['credentialConfigs'],\n        });\n    }\n\n    /**\n     * Returns the issuance configuration by ID for a given tenant.\n     * @param issuanceConfigId\n     * @param tenantId\n     * @returns\n     */\n    async getIssuanceConfigurationById(\n        issuanceConfigId: string,\n        tenantId: string,\n    ): Promise {\n        return this.issuanceConfigRepo.findOneOrFail({\n            where: { id: issuanceConfigId, tenantId },\n            relations: ['credentialConfigs'],\n        });\n    }\n\n    /**\n     * Store the config. If it already exist, overwrite it.\n     * @param tenantId\n     * @param value\n     * @returns\n     */\n    async storeIssuanceConfiguration(tenantId: string, value: IssuanceDto) {\n        const credentials: CredentialConfig[] = [];\n        for (const credentialConfigId of value.credentialConfigs) {\n            const credential = await this.credentialsConfigService.getById(\n                tenantId,\n                credentialConfigId,\n            );\n            if (credential) {\n                credentials.push(credential);\n            }\n        }\n        const issuanceConfig = this.issuanceConfigRepo.create({\n            ...value,\n            tenantId,\n            credentialConfigs: credentials,\n        });\n        return this.issuanceConfigRepo.save(issuanceConfig);\n    }\n\n    /**\n     * Deletes a credential configuration.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    deleteIssuanceConfiguration(tenantId: string, id: string) {\n        return this.issuanceConfigRepo.delete({ tenantId, id });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuerManagementController.html":{"url":"controllers/IssuerManagementController.html","title":"controller - IssuerManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuerManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuer-management/issuer-management.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: OfferRequestDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@ApiBody({type: OfferRequestDto, examples: undefined})@Post('offer')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:63\n                        \n                    \n\n\n            \n                \n                        Create an offer for a credential. This endpoint may be protected\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            OfferRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Res, UseGuards } from '@nestjs/common';\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { Oid4vciService } from '../../issuer/oid4vci/oid4vci.service';\nimport {\n    OfferResponse,\n    OfferRequestDto,\n} from '../oid4vci/dto/offer-request.dto';\nimport { ResponseType } from '../../verifier/oid4vp/dto/presentation-request.dto';\nimport * as QRCode from 'qrcode';\nimport { Response } from 'express';\n\n@ApiTags('Issuer management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('issuer-management')\nexport class IssuerManagementController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Create an offer for a credential. This endpoint may be protected\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: 'JSON response',\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            'application/json': { schema: { type: 'object' } },\n            'image/png': { schema: { type: 'string', format: 'binary' } },\n        },\n    })\n    @ApiProduces('application/json', 'image/png')\n    @ApiBody({\n        type: OfferRequestDto,\n        examples: {\n            qrcode: {\n                summary: 'QR-Code Example',\n                value: {\n                    response_type: ResponseType.QRCode,\n                    credentialConfigurationIds: ['pid'],\n                } as OfferRequestDto,\n            },\n            uri: {\n                summary: 'URI',\n                value: {\n                    response_type: ResponseType.URI,\n                    credentialConfigurationIds: ['pid'],\n                } as OfferRequestDto,\n            },\n        },\n    })\n    @Post('offer')\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: OfferRequestDto,\n        @Token() user: TokenPayload,\n    ) {\n        // For now, we'll just pass the body to the service as before\n        // You can modify the service later to accept user information if needed\n        const values = await this.oid4vciService.createOffer(\n            body,\n            user,\n            user.sub,\n        );\n\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader('Content-Type', 'image/png');\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IssuerMetadata.html":{"url":"interfaces/IssuerMetadata.html","title":"interface - IssuerMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IssuerMetadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/dto/issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the issuer metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            issuer\n                                        \n                                \n                                \n                                        \n                                            jwks\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        issuer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        issuer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The issuer identifier, typically a URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwks:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { JWK } from 'jose';\n\n/**\n * Interface representing the issuer metadata.\n */\nexport interface IssuerMetadata {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    issuer: string;\n    /**\n     * The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n     */\n    jwks: {\n        /**\n         * List of keys in the JWKS.\n         */\n        keys: JWK[];\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IssuerModule.html":{"url":"modules/IssuerModule.html","title":"module - IssuerModule","body":"\n                   \n\n\n\n\n    Modules\n    IssuerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_exports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/issuer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            CredentialConfigService\n                        \n                        \n                            CredentialsService\n                        \n                        \n                            IssuanceService\n                        \n                        \n                            Oid4vciService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vciController\n                        \n                        \n                            AuthorizeController\n                        \n                        \n                            CredentialsController\n                        \n                        \n                            IssuerManagementController\n                        \n                        \n                            IssuanceController\n                        \n                        \n                            CredentialsMetadataController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            Oid4vciService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthorizeService } from './authorize/authorize.service';\nimport { CredentialsService } from './credentials/credentials.service';\nimport { Oid4vciService } from './oid4vci/oid4vci.service';\nimport { Oid4vciController } from './oid4vci/oid4vci.controller';\nimport { AuthorizeController } from './authorize/authorize.controller';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport { StatusListModule } from './status-list/status-list.module';\nimport { CredentialsController } from './credentials/credentials.controller';\nimport * as Joi from 'joi';\nimport { SessionModule } from '../session/session.module';\nimport { IssuerManagementController } from './issuer-management/issuer-management.controller';\nimport { Oid4vpModule } from '../verifier/oid4vp/oid4vp.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { IssuanceConfig } from './issuance/entities/issuance-config.entity';\nimport { SessionLoggerService } from '../utils/session-logger.service';\nimport { SessionLoggerInterceptor } from '../utils/session-logger.interceptor';\nimport { CredentialConfig } from './credentials/entities/credential.entity';\nimport { IssuanceController } from './issuance/issuance.controller';\nimport { CredentialsMetadataController } from './credentials-metadata/credentials-metadata.controller';\nimport { IssuanceService } from './issuance/issuance.service';\nimport { CredentialConfigService } from './credentials/credential-config/credential-config.service';\n\nexport const ISSUER_VALIDATION_SCHEMA = {\n    PUBLIC_URL: Joi.string(),\n};\n\n@Module({\n    imports: [\n        CryptoModule,\n        StatusListModule,\n        Oid4vpModule,\n        SessionModule,\n        TypeOrmModule.forFeature([IssuanceConfig, CredentialConfig]),\n    ],\n    controllers: [\n        Oid4vciController,\n        AuthorizeController,\n        CredentialsController,\n        IssuerManagementController,\n        IssuanceController,\n        CredentialsMetadataController,\n    ],\n    providers: [\n        AuthorizeService,\n        CredentialsService,\n        Oid4vciService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n        IssuanceService,\n        CredentialConfigService,\n    ],\n    exports: [AuthorizeService, Oid4vciService],\n})\nexport class IssuerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwksResponseDto.html":{"url":"classes/JwksResponseDto.html","title":"class - JwksResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwksResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keys\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    An array of EC public keys in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from 'jose';\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: 'EC';\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n    constructor(private reflector: Reflector) {\n        super();\n    }\n\n    canActivate(context: ExecutionContext) {\n        const isPublic = this.reflector.getAllAndOverride(\n            IS_PUBLIC_KEY,\n            [context.getHandler(), context.getClass()],\n        );\n        if (isPublic) {\n            return true;\n        }\n        return super.canActivate(context);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtService.html":{"url":"injectables/JwtService.html","title":"injectable - JwtService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                decodeToken\n                            \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                isUsingExternalOIDC\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        decodeToken\n                        \n                    \n                \n            \n            \n                \ndecodeToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:83\n                        \n                    \n\n\n            \n                \n                        Decode token without verification (for debugging)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TokenPayload | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(payload: TokenPayload, options: GenerateTokenOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:19\n                        \n                    \n\n\n            \n                \n                        Generate a JWT token for integrated OAuth2 server\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                options\n                                            \n                                                            GenerateTokenOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUsingExternalOIDC\n                        \n                    \n                \n            \n            \n                \nisUsingExternalOIDC()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Check if the service is using external OIDC provider\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Verify a JWT token (for additional validation if needed)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SignJWT, jwtVerify, decodeJwt } from 'jose';\nimport { TokenPayload } from './token.decorator';\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {}\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow('JWT_EXPIRES_IN');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: 'HS256' })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token verification is handled by external OIDC provider.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: ['HS256'],\n            });\n\n            return payload as TokenPayload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Decode token without verification (for debugging)\n     */\n    decodeToken(token: string): TokenPayload | null {\n        try {\n            return decodeJwt(token) as TokenPayload;\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get('OIDC') !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                getExternalOIDCConfig\n                            \n                            \n                                    Private\n                                    Static\n                                getIntegratedOAuth2Config\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getExternalOIDCConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getExternalOIDCConfig(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { secretOrKeyProvider: any; jwtFromRequest: any; algorithms: {}; issuer: any; audience: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getIntegratedOAuth2Config\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIntegratedOAuth2Config(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: TokenPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { passportJwtSecret } from 'jwks-rsa';\nimport { ConfigService } from '@nestjs/config';\nimport { TokenPayload } from './token.decorator';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n    constructor(private configService: ConfigService) {\n        const useExternalOIDC = configService.get('OIDC');\n\n        super(\n            useExternalOIDC\n                ? JwtStrategy.getExternalOIDCConfig(configService)\n                : JwtStrategy.getIntegratedOAuth2Config(configService),\n        );\n    }\n\n    private static getExternalOIDCConfig(configService: ConfigService) {\n        //TODO: test it\n        return {\n            secretOrKeyProvider: passportJwtSecret({\n                cache: true,\n                rateLimit: true,\n                jwksRequestsPerMinute: 5,\n                jwksUri: `${configService.get('KEYCLOAK_INTERNAL_ISSUER_URL')}/protocol/openid-connect/certs`,\n                handleSigningKeyError: (err, cb) => {\n                    console.log('Keycloak JWKS error:', err);\n                    if (err instanceof Error) {\n                        return cb(err);\n                    }\n                    return cb(\n                        new Error(\n                            'Could not get the signing key from Keycloak',\n                        ),\n                    );\n                },\n            }),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: ['RS256'],\n            issuer: configService.get('KEYCLOAK_INTERNAL_ISSUER_URL'),\n            audience: configService.get('KEYCLOAK_CLIENT_ID'), // You may want to add this to validation schema\n        };\n    }\n\n    private static getIntegratedOAuth2Config(\n        configService: ConfigService,\n    ): any {\n        const config = {\n            secretOrKey: configService.get('JWT_SECRET'),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: ['HS256'], // Using symmetric key for integrated OAuth2\n            ignoreExpiration: false, // Ensure tokens expire\n        };\n\n        // Add issuer validation only if JWT_ISSUER is configured\n        const issuer = configService.get('JWT_ISSUER');\n        if (issuer) {\n            (config as any).issuer = issuer;\n        }\n\n        return config;\n    }\n\n    validate(payload: TokenPayload): unknown {\n        const useExternalOIDC =\n            this.configService.get('OIDC') !== undefined;\n\n        if (useExternalOIDC) {\n            // External OIDC: Extract user info from external provider token\n            return payload;\n        } else {\n            // Integrated OAuth2: Use integrated server token validation\n            return payload;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/KeyEntity.html":{"url":"entities/KeyEntity.html","title":"entity - KeyEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  KeyEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/entities/key.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                privateKey\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        privateKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JsonWebKey\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/key.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/key.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\n\n@Entity()\nexport class KeyEntity {\n    @Column('varchar', { primary: true })\n    tenantId: string;\n    @Column('json')\n    privateKey: JsonWebKey;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeyModule.html":{"url":"modules/KeyModule.html","title":"module - KeyModule","body":"\n                   \n\n\n\n\n    Modules\n    KeyModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/key/key.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.module.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Global, Module } from '@nestjs/common';\nimport { FileSystemKeyService } from './filesystem-key.service';\nimport { VaultKeyService } from './vault-key.service';\nimport { CryptoModule } from './crypto/crypto.module';\nimport { CryptoService } from './crypto/crypto.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { HttpModule, HttpService } from '@nestjs/axios';\nimport * as Joi from 'joi';\nimport { TypeOrmModule } from '@nestjs/typeorm/dist/typeorm.module';\nimport { KeyEntity } from './entities/key.entity';\n\nexport const KEY_VALIDATION_SCHEMA = {\n    KM_TYPE: Joi.string().valid('file', 'vault').default('file'),\n\n    // Vault-related config\n    VAULT_URL: Joi.string().uri().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_TOKEN: Joi.string().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_KEY_ID: Joi.string().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.string().default('key-id'),\n        otherwise: Joi.optional(),\n    }),\n};\n\n@Global()\n@Module({})\nexport class KeyModule {\n    static forRoot(): DynamicModule {\n        return {\n            module: KeyModule,\n            imports: [\n                HttpModule,\n                ConfigModule,\n                CryptoModule,\n                TypeOrmModule.forFeature([KeyEntity]),\n            ],\n            providers: [\n                {\n                    provide: 'KeyService',\n                    useFactory: (\n                        configService: ConfigService,\n                        httpService: HttpService,\n                        cryptoService: CryptoService,\n                    ) => {\n                        const kmType = configService.get(\n                            'KM_TYPE',\n                        );\n                        if (kmType === 'vault') {\n                            return new VaultKeyService(\n                                httpService,\n                                configService,\n                                cryptoService,\n                            );\n                        }\n\n                        return new FileSystemKeyService(\n                            configService,\n                            cryptoService,\n                        );\n                    },\n                    inject: [ConfigService, HttpService, CryptoService],\n                },\n            ],\n            exports: ['KeyService'],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyService.html":{"url":"classes/KeyService.html","title":"class - KeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface for a key service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                getKid\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                init\n                            \n                            \n                                    Abstract\n                                signer\n                            \n                            \n                                    Abstract\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getKid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKid(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Get the key id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:11\n                        \n                    \n\n\n            \n                \n                        Initialize the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Get the callback for the signer function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JoseHeaderParameters, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JoseHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Signer } from '@sd-jwt/types';\nimport { JWK, JWTPayload, JoseHeaderParameters } from 'jose';\n\n/**\n * Generic interface for a key service\n */\nexport abstract class KeyService {\n    /**\n     * Initialize the key service\n     */\n    abstract init(tenantId): Promise;\n\n    /**\n     * Get the callback for the signer function\n     * @param tenantId\n     */\n    abstract signer(tenantId: string): Promise;\n\n    /**\n     * Get the key id\n     * @returns\n     */\n    abstract getKid(tenantId: string): Promise;\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    abstract getPublicKey(type: 'jwk', tenantId: string): Promise;\n    abstract getPublicKey(type: 'pem', tenantId: string): Promise;\n    abstract getPublicKey(\n        type: 'pem' | 'jwk',\n        tenantId: string,\n    ): Promise;\n\n    //TODO: this can be handled via the signer callback\n    abstract signJWT(\n        payload: JWTPayload,\n        header: JoseHeaderParameters,\n        tenantId: string,\n    ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerConfigService.html":{"url":"injectables/LoggerConfigService.html","title":"injectable - LoggerConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing logger configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getConfiguration\n                            \n                            \n                                getLogFormat\n                            \n                            \n                                getLogLevel\n                            \n                            \n                                isDebugModeEnabled\n                            \n                            \n                                isHttpLoggerEnabled\n                            \n                            \n                                isSessionLoggerEnabled\n                            \n                            \n                                    Private\n                                loadConfiguration\n                            \n                            \n                                    Private\n                                parseLogLevel\n                            \n                            \n                                reloadConfiguration\n                            \n                            \n                                shouldEnableAutoLogging\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger-config.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConfiguration\n                        \n                    \n                \n            \n            \n                \ngetConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger-config.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         LoggerConfiguration\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogFormat\n                        \n                    \n                \n            \n            \n                \ngetLogFormat()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger-config.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     \"json\" | \"pretty\"\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogLevel\n                        \n                    \n                \n            \n            \n                \ngetLogLevel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger-config.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     LogLevel\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDebugModeEnabled\n                        \n                    \n                \n            \n            \n                \nisDebugModeEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger-config.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isHttpLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisHttpLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger-config.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSessionLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisSessionLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger-config.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger-config.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseLogLevel\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseLogLevel(level: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger-config.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                level\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     LogLevel\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reloadConfiguration\n                        \n                    \n                \n            \n            \n                \nreloadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger-config.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Hot reload configuration from environment\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        shouldEnableAutoLogging\n                        \n                    \n                \n            \n            \n                \nshouldEnableAutoLogging()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger-config.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Check if automatic HTTP request/response logging should be enabled\nThis is used by the LoggerModule configuration\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoggerConfiguration\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger-config.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, LogLevel } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    disableSessionLogger: boolean;\n    disableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: 'json' | 'pretty';\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get('LOG_LEVEL', 'info'),\n            ),\n            disableSessionLogger: this.configService.get(\n                'LOG_DISABLE_SESSION_LOGGER',\n                false,\n            ),\n            disableHttpLogger: this.configService.get(\n                'LOG_DISABLE_HTTP_LOGGER',\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                'LOG_DEBUG_MODE',\n                false,\n            ),\n            logFormat: this.configService.get(\n                'LOG_FORMAT',\n                'pretty',\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: 'verbose',\n            debug: 'debug',\n            log: 'log',\n            warn: 'warn',\n            error: 'error',\n            fatal: 'fatal',\n        };\n        return levels[level.toLowerCase()] || 'log';\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return !this.config.disableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return !this.config.disableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): 'json' | 'pretty' {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggerConfiguration.html":{"url":"interfaces/LoggerConfiguration.html","title":"interface - LoggerConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoggerConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger-config.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            disableHttpLogger\n                                        \n                                \n                                \n                                        \n                                            disableSessionLogger\n                                        \n                                \n                                \n                                        \n                                            enableDebugMode\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            logFormat\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disableHttpLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableHttpLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableSessionLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableSessionLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableDebugMode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableDebugMode:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:     LogLevel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     LogLevel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logFormat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logFormat:     \"json\" | \"pretty\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"json\" | \"pretty\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, LogLevel } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    disableSessionLogger: boolean;\n    disableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: 'json' | 'pretty';\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get('LOG_LEVEL', 'info'),\n            ),\n            disableSessionLogger: this.configService.get(\n                'LOG_DISABLE_SESSION_LOGGER',\n                false,\n            ),\n            disableHttpLogger: this.configService.get(\n                'LOG_DISABLE_HTTP_LOGGER',\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                'LOG_DEBUG_MODE',\n                false,\n            ),\n            logFormat: this.configService.get(\n                'LOG_FORMAT',\n                'pretty',\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: 'verbose',\n            debug: 'debug',\n            log: 'log',\n            warn: 'warn',\n            error: 'error',\n            fatal: 'fatal',\n        };\n        return levels[level.toLowerCase()] || 'log';\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return !this.config.disableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return !this.config.disableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): 'json' | 'pretty' {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Middleware.html":{"url":"interfaces/Middleware.html","title":"interface - Middleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Middleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/utils.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            request\n                                        \n                                \n                                \n                                        \n                                            response\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         Pick> | \"eject\" | \"use\">\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Pick> | \"eject\" | \"use\">\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        request\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        request:         Pick> | \"eject\" | \"use\">\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Pick> | \"eject\" | \"use\">\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        response:         Pick> | \"eject\" | \"use\">\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Pick> | \"eject\" | \"use\">\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { getAuthToken } from '../core/auth';\nimport type {\n    QuerySerializer,\n    QuerySerializerOptions,\n} from '../core/bodySerializer';\nimport { jsonBodySerializer } from '../core/bodySerializer';\nimport {\n    serializeArrayParam,\n    serializeObjectParam,\n    serializePrimitiveParam,\n} from '../core/pathSerializer';\nimport type { Client, ClientOptions, Config, RequestOptions } from './types';\n\ninterface PathSerializer {\n    path: Record;\n    url: string;\n}\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\ntype ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\ntype ArraySeparatorStyle = ArrayStyle | MatrixStyle;\n\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n    let url = _url;\n    const matches = _url.match(PATH_PARAM_RE);\n    if (matches) {\n        for (const match of matches) {\n            let explode = false;\n            let name = match.substring(1, match.length - 1);\n            let style: ArraySeparatorStyle = 'simple';\n\n            if (name.endsWith('*')) {\n                explode = true;\n                name = name.substring(0, name.length - 1);\n            }\n\n            if (name.startsWith('.')) {\n                name = name.substring(1);\n                style = 'label';\n            } else if (name.startsWith(';')) {\n                name = name.substring(1);\n                style = 'matrix';\n            }\n\n            const value = path[name];\n\n            if (value === undefined || value === null) {\n                continue;\n            }\n\n            if (Array.isArray(value)) {\n                url = url.replace(\n                    match,\n                    serializeArrayParam({ explode, name, style, value }),\n                );\n                continue;\n            }\n\n            if (typeof value === 'object') {\n                url = url.replace(\n                    match,\n                    serializeObjectParam({\n                        explode,\n                        name,\n                        style,\n                        value: value as Record,\n                        valueOnly: true,\n                    }),\n                );\n                continue;\n            }\n\n            if (style === 'matrix') {\n                url = url.replace(\n                    match,\n                    `;${serializePrimitiveParam({\n                        name,\n                        value: value as string,\n                    })}`,\n                );\n                continue;\n            }\n\n            const replaceValue = encodeURIComponent(\n                style === 'label' ? `.${value as string}` : (value as string),\n            );\n            url = url.replace(match, replaceValue);\n        }\n    }\n    return url;\n};\n\nexport const createQuerySerializer = ({\n    allowReserved,\n    array,\n    object,\n}: QuerySerializerOptions = {}) => {\n    const querySerializer = (queryParams: T) => {\n        const search: string[] = [];\n        if (queryParams && typeof queryParams === 'object') {\n            for (const name in queryParams) {\n                const value = queryParams[name];\n\n                if (value === undefined || value === null) {\n                    continue;\n                }\n\n                if (Array.isArray(value)) {\n                    const serializedArray = serializeArrayParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'form',\n                        value,\n                        ...array,\n                    });\n                    if (serializedArray) search.push(serializedArray);\n                } else if (typeof value === 'object') {\n                    const serializedObject = serializeObjectParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'deepObject',\n                        value: value as Record,\n                        ...object,\n                    });\n                    if (serializedObject) search.push(serializedObject);\n                } else {\n                    const serializedPrimitive = serializePrimitiveParam({\n                        allowReserved,\n                        name,\n                        value: value as string,\n                    });\n                    if (serializedPrimitive) search.push(serializedPrimitive);\n                }\n            }\n        }\n        return search.join('&');\n    };\n    return querySerializer;\n};\n\n/**\n * Infers parseAs value from provided Content-Type header.\n */\nexport const getParseAs = (\n    contentType: string | null,\n): Exclude => {\n    if (!contentType) {\n        // If no Content-Type header is provided, the best we can do is return the raw response body,\n        // which is effectively the same as the 'stream' option.\n        return 'stream';\n    }\n\n    const cleanContent = contentType.split(';')[0]?.trim();\n\n    if (!cleanContent) {\n        return;\n    }\n\n    if (\n        cleanContent.startsWith('application/json') ||\n        cleanContent.endsWith('+json')\n    ) {\n        return 'json';\n    }\n\n    if (cleanContent === 'multipart/form-data') {\n        return 'formData';\n    }\n\n    if (\n        ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n            cleanContent.startsWith(type),\n        )\n    ) {\n        return 'blob';\n    }\n\n    if (cleanContent.startsWith('text/')) {\n        return 'text';\n    }\n\n    return;\n};\n\nexport const setAuthParams = async ({\n    security,\n    ...options\n}: Pick, 'security'> &\n    Pick & {\n        headers: Headers;\n    }) => {\n    for (const auth of security) {\n        const token = await getAuthToken(auth, options.auth);\n\n        if (!token) {\n            continue;\n        }\n\n        const name = auth.name ?? 'Authorization';\n\n        switch (auth.in) {\n            case 'query':\n                if (!options.query) {\n                    options.query = {};\n                }\n                options.query[name] = token;\n                break;\n            case 'cookie':\n                options.headers.append('Cookie', `${name}=${token}`);\n                break;\n            case 'header':\n            default:\n                options.headers.set(name, token);\n                break;\n        }\n\n        return;\n    }\n};\n\nexport const buildUrl: Client['buildUrl'] = (options) => {\n    const url = getUrl({\n        baseUrl: options.baseUrl as string,\n        path: options.path,\n        query: options.query,\n        querySerializer:\n            typeof options.querySerializer === 'function'\n                ? options.querySerializer\n                : createQuerySerializer(options.querySerializer),\n        url: options.url,\n    });\n    return url;\n};\n\nexport const getUrl = ({\n    baseUrl,\n    path,\n    query,\n    querySerializer,\n    url: _url,\n}: {\n    baseUrl?: string;\n    path?: Record;\n    query?: Record;\n    querySerializer: QuerySerializer;\n    url: string;\n}) => {\n    const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n    let url = (baseUrl ?? '') + pathUrl;\n    if (path) {\n        url = defaultPathSerializer({ path, url });\n    }\n    let search = query ? querySerializer(query) : '';\n    if (search.startsWith('?')) {\n        search = search.substring(1);\n    }\n    if (search) {\n        url += `?${search}`;\n    }\n    return url;\n};\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n    const config = { ...a, ...b };\n    if (config.baseUrl?.endsWith('/')) {\n        config.baseUrl = config.baseUrl.substring(0, config.baseUrl.length - 1);\n    }\n    config.headers = mergeHeaders(a.headers, b.headers);\n    return config;\n};\n\nexport const mergeHeaders = (\n    ...headers: Array['headers'] | undefined>\n): Headers => {\n    const mergedHeaders = new Headers();\n    for (const header of headers) {\n        if (!header || typeof header !== 'object') {\n            continue;\n        }\n\n        const iterator =\n            header instanceof Headers\n                ? header.entries()\n                : Object.entries(header);\n\n        for (const [key, value] of iterator) {\n            if (value === null) {\n                mergedHeaders.delete(key);\n            } else if (Array.isArray(value)) {\n                for (const v of value) {\n                    mergedHeaders.append(key, v as string);\n                }\n            } else if (value !== undefined) {\n                // assume object headers are meant to be JSON stringified, i.e. their\n                // content value in OpenAPI specification is 'application/json'\n                mergedHeaders.set(\n                    key,\n                    typeof value === 'object'\n                        ? JSON.stringify(value)\n                        : (value as string),\n                );\n            }\n        }\n    }\n    return mergedHeaders;\n};\n\ntype ErrInterceptor = (\n    error: Err,\n    response: Res,\n    request: Req,\n    options: Options,\n) => Err | Promise;\n\ntype ReqInterceptor = (\n    request: Req,\n    options: Options,\n) => Req | Promise;\n\ntype ResInterceptor = (\n    response: Res,\n    request: Req,\n    options: Options,\n) => Res | Promise;\n\nclass Interceptors {\n    _fns: (Interceptor | null)[];\n\n    constructor() {\n        this._fns = [];\n    }\n\n    clear() {\n        this._fns = [];\n    }\n\n    getInterceptorIndex(id: number | Interceptor): number {\n        if (typeof id === 'number') {\n            return this._fns[id] ? id : -1;\n        } else {\n            return this._fns.indexOf(id);\n        }\n    }\n    exists(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        return !!this._fns[index];\n    }\n\n    eject(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = null;\n        }\n    }\n\n    update(id: number | Interceptor, fn: Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = fn;\n            return id;\n        } else {\n            return false;\n        }\n    }\n\n    use(fn: Interceptor) {\n        this._fns = [...this._fns, fn];\n        return this._fns.length - 1;\n    }\n}\n\n// `createInterceptors()` response, meant for external use as it does not\n// expose internals\nexport interface Middleware {\n    error: Pick>,\n        'eject' | 'use'\n    >;\n    request: Pick>, 'eject' | 'use'>;\n    response: Pick>,\n        'eject' | 'use'\n    >;\n}\n\n// do not add `Middleware` as return type so we can use _fns internally\nexport const createInterceptors = () => ({\n    error: new Interceptors>(),\n    request: new Interceptors>(),\n    response: new Interceptors>(),\n});\n\nconst defaultQuerySerializer = createQuerySerializer({\n    allowReserved: false,\n    array: {\n        explode: true,\n        style: 'form',\n    },\n    object: {\n        explode: true,\n        style: 'deepObject',\n    },\n});\n\nconst defaultHeaders = {\n    'Content-Type': 'application/json',\n};\n\nexport const createConfig = (\n    override: Config & T> = {},\n): Config & T> => ({\n    ...jsonBodySerializer,\n    headers: defaultHeaders,\n    parseAs: 'auto',\n    querySerializer: defaultQuerySerializer,\n    ...override,\n});\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotificationRequestDto.html":{"url":"classes/NotificationRequestDto.html","title":"class - NotificationRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotificationRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/notification-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                event\n                            \n                            \n                                    \n                                notification_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationEvent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['credential_accepted', 'credential_revoked'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notification_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotificationEvent } from '@openid4vc/openid4vci';\nimport { IsEnum, IsString } from 'class-validator';\n\nexport class NotificationRequestDto {\n    @IsString()\n    notification_id: string;\n\n    @IsEnum(['credential_accepted', 'credential_revoked'])\n    event: NotificationEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Oauth2AuthorizationServerResponse.html":{"url":"classes/Oauth2AuthorizationServerResponse.html","title":"class - Oauth2AuthorizationServerResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Oauth2AuthorizationServerResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/oauth-authorization-server-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response from an OAuth2 authorization server.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_challenge_endpoint\n                            \n                            \n                                authorization_endpoint\n                            \n                            \n                                code_challenge_methods_supported\n                            \n                            \n                                dpop_signing_alg_values_supported\n                            \n                            \n                                issuer\n                            \n                            \n                                jwks_uri\n                            \n                            \n                                pushed_authorization_request_endpoint\n                            \n                            \n                                require_pushed_authorization_requests\n                            \n                            \n                                token_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_challenge_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:37\n                        \n                    \n\n            \n                \n                    The URL of the authorization challenge endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:13\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's authorization endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        code_challenge_methods_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:21\n                        \n                    \n\n            \n                \n                    List of supported algorithms to sign the challenge\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dpop_signing_alg_values_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:25\n                        \n                    \n\n            \n                \n                    List of supported algorithms for DPoP signing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwks_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:17\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushed_authorization_request_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    The URL of the pushed authorization request endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        require_pushed_authorization_requests\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:29\n                        \n                    \n\n            \n                \n                    Indicates whether the server requires pushed authorization requests.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's token endpoint.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Oauth2AuthorizationServerResponse {\n    issuer: string;\n    /**\n     * The URL of the OAuth2 authorization server's token endpoint.\n     */\n    token_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's authorization endpoint.\n     */\n    authorization_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n     */\n    jwks_uri: string;\n    /**\n     * List of supported algorithms to sign the challenge\n     */\n    code_challenge_methods_supported: string[];\n    /**\n     * List of supported algorithms for DPoP signing.\n     */\n    dpop_signing_alg_values_supported: string[];\n    /**\n     * Indicates whether the server requires pushed authorization requests.\n     */\n    require_pushed_authorization_requests: boolean;\n    /**\n     * The URL of the pushed authorization request endpoint.\n     */\n    pushed_authorization_request_endpoint: string;\n    /**\n     * The URL of the authorization challenge endpoint.\n     */\n    authorization_challenge_endpoint: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferRequestDto.html":{"url":"classes/OfferRequestDto.html","title":"class - OfferRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationIds\n                            \n                            \n                                    \n                                issuanceId\n                            \n                            \n                                    \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:33\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:26\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'qrcode', description: 'The type of response expected for the offer request.'})@IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:20\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n} from 'class-validator';\nimport { ResponseType } from '../../../verifier/oid4vp/dto/presentation-request.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class OfferRequestDto {\n    /**\n     * @example \"qrcode\"\n     */\n    @ApiProperty({\n        example: 'qrcode',\n        description: 'The type of response expected for the offer request.',\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * @example \"pid\"\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * @example [\"pid\"]\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    @IsObject()\n    @IsOptional()\n    values?: { [key: string]: Record };\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferResponse.html":{"url":"classes/OfferResponse.html","title":"class - OfferResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                session\n                            \n                            \n                                uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n} from 'class-validator';\nimport { ResponseType } from '../../../verifier/oid4vp/dto/presentation-request.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class OfferRequestDto {\n    /**\n     * @example \"qrcode\"\n     */\n    @ApiProperty({\n        example: 'qrcode',\n        description: 'The type of response expected for the offer request.',\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * @example \"pid\"\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * @example [\"pid\"]\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    @IsObject()\n    @IsOptional()\n    values?: { [key: string]: Record };\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vciController.html":{"url":"controllers/Oid4vciController.html","title":"controller - Oid4vciController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vciController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/oid4vci.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/vci\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                credential\n                            \n                            \n                                    \n                                    \n                                notifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credential\n                        \n                    \n                \n            \n            \n                \n                        \n                    credential(req: Request, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('credential')@SessionLogger('state', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:28\n                        \n                    \n\n\n            \n                \n                        Endpoint to issue credentials\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        notifications\n                        \n                    \n                \n            \n            \n                \n                        \n                    notifications(body: NotificationRequestDto, req: Request, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('notification')@SessionLogger('notification_id', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:42\n                        \n                    \n\n\n            \n                \n                        Notification endpoint\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            NotificationRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Param,\n    Post,\n    Req,\n    UseInterceptors,\n} from '@nestjs/common';\nimport type { CredentialResponse } from '@openid4vc/openid4vci';\nimport type { Request } from 'express';\nimport { Oid4vciService } from '../../issuer/oid4vci/oid4vci.service';\nimport { NotificationRequestDto } from './dto/notification-request.dto';\nimport { SessionLogger } from '../../utils/session-logger.decorator';\nimport { SessionLoggerInterceptor } from '../../utils/session-logger.interceptor';\n\n@Controller(':tenantId/vci')\n@UseInterceptors(SessionLoggerInterceptor)\nexport class Oid4vciController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Endpoint to issue credentials\n     * @param req\n     * @returns\n     */\n    @Post('credential')\n    @SessionLogger('state', 'OID4VCI')\n    credential(\n        @Req() req: Request,\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        return this.oid4vciService.getCredential(req, tenantId);\n    }\n\n    /**\n     * Notification endpoint\n     * @param body\n     * @returns\n     */\n    @Post('notification')\n    @SessionLogger('notification_id', 'OID4VCI')\n    notifications(\n        @Body() body: NotificationRequestDto,\n        @Req() req: Request,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.oid4vciService.handleNotification(req, body, tenantId);\n    }\n\n    //TODO: this endpoint may be relevant for the wallet attestation.\n    /* @Get('session')\n  session() {\n    console.log('Session requested');\n    //TODO store session and created at\n    const session = randomUUID();\n    return {\n      session_id: session,\n    };\n  } */\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Oid4vciService.html":{"url":"injectables/Oid4vciService.html","title":"injectable - Oid4vciService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Oid4vciService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/oid4vci.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                credentialsService\n                            \n                            \n                                    Private\n                                issuer\n                            \n                            \n                                resourceServer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createOffer\n                            \n                            \n                                    Async\n                                getCredential\n                            \n                            \n                                    Async\n                                handleNotification\n                            \n                            \n                                    Async\n                                issuerMetadata\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authzService: AuthorizeService, cryptoService: CryptoService, credentialsService: CredentialsService, configService: ConfigService, sessionService: SessionService, sessionLogger: SessionLoggerService, issuanceService: IssuanceService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authzService\n                                                  \n                                                        \n                                                                        AuthorizeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialsService\n                                                  \n                                                        \n                                                                        CredentialsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issuanceService\n                                                  \n                                                        \n                                                                        IssuanceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOffer(body: OfferRequestDto, user: TokenPayload, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            OfferRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredential\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredential(req: Request, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:162\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleNotification(req: Request, body: NotificationRequestDto, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:273\n                        \n                    \n\n\n            \n                \n                        Store the notification in the session based on the notitification id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            NotificationRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        issuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    issuerMetadata(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        credentialsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialsService\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Openid4vciIssuer\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resourceServer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Oauth2ResourceServer\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:40\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    BadRequestException,\n    ConflictException,\n    Injectable,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    type HttpMethod,\n    Oauth2ResourceServer,\n    SupportedAuthenticationScheme,\n    authorizationCodeGrantIdentifier,\n} from '@openid4vc/oauth2';\nimport {\n    type CredentialResponse,\n    type IssuerMetadataResult,\n    Openid4vciDraftVersion,\n    Openid4vciIssuer,\n} from '@openid4vc/openid4vci';\nimport type { Request } from 'express';\nimport { CredentialsService } from '../credentials/credentials.service';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { AuthorizeService } from '../authorize/authorize.service';\nimport { getHeadersFromRequest } from './util';\nimport { readFileSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { SessionService } from '../../session/session.service';\nimport { v4 } from 'uuid';\nimport { OfferRequestDto, OfferResponse } from './dto/offer-request.dto';\nimport { NotificationRequestDto } from './dto/notification-request.dto';\nimport { SessionLoggerService } from '../../utils/session-logger.service';\nimport { SessionLogContext } from '../../utils/session-logger-context';\nimport { TokenPayload } from '../../auth/token.decorator';\nimport { IssuanceService } from '../issuance/issuance.service';\n\n@Injectable()\nexport class Oid4vciService implements OnModuleInit {\n    private issuer: Openid4vciIssuer;\n\n    resourceServer: Oauth2ResourceServer;\n\n    constructor(\n        private readonly authzService: AuthorizeService,\n        private readonly cryptoService: CryptoService,\n        public readonly credentialsService: CredentialsService,\n        private readonly configService: ConfigService,\n        private readonly sessionService: SessionService,\n        private readonly sessionLogger: SessionLoggerService,\n        private readonly issuanceService: IssuanceService,\n    ) {}\n    onModuleInit() {\n        //TODO: align for tenant\n        const callbacks = this.cryptoService.getCallbackContext('');\n        this.issuer = new Openid4vciIssuer({\n            callbacks,\n        });\n        this.resourceServer = new Oauth2ResourceServer({\n            callbacks,\n        });\n    }\n\n    async issuerMetadata(tenantId: string): Promise {\n        const credential_issuer = `${this.configService.getOrThrow(\n            'PUBLIC_URL',\n        )}/${tenantId}`;\n\n        const display = JSON.parse(\n            readFileSync(\n                join(\n                    this.configService.getOrThrow('FOLDER'),\n                    tenantId,\n                    'display.json',\n                ),\n                'utf-8',\n            ),\n        );\n\n        const authorizationServerMetadata =\n            this.authzService.authzMetadata(tenantId);\n\n        let credentialIssuer = this.issuer.createCredentialIssuerMetadata({\n            credential_issuer,\n            credential_configurations_supported:\n                await this.credentialsService.getCredentialConfiguration(\n                    tenantId,\n                ),\n            credential_endpoint: `${credential_issuer}/vci/credential`,\n            authorization_servers: [authorizationServerMetadata.issuer],\n            authorization_server: authorizationServerMetadata.issuer,\n            notification_endpoint: `${credential_issuer}/vci/notification`,\n            batch_credential_issuance: {\n                batch_size: 1,\n            },\n            display,\n        });\n\n        //replace placeholders in the issuer metadata\n        credentialIssuer = JSON.parse(\n            JSON.stringify(credentialIssuer).replace(\n                //g,\n                this.configService.getOrThrow('PUBLIC_URL'),\n            ),\n        );\n\n        return {\n            credentialIssuer,\n            authorizationServers: [authorizationServerMetadata],\n            originalDraftVersion: Openid4vciDraftVersion.Draft14,\n        } as const satisfies IssuerMetadataResult;\n    }\n\n    async createOffer(\n        body: OfferRequestDto,\n        user: TokenPayload,\n        tenantId: string,\n    ): Promise {\n        const issuanceConfig = await this.issuanceService\n            .getIssuanceConfigurationById(body.issuanceId, tenantId)\n            .catch(() => {\n                throw new BadRequestException(\n                    `Issuance configuration with ID ${body.issuanceId} not found`,\n                );\n            });\n        const credentialConfigurationIds =\n            body.credentialConfigurationIds ||\n            issuanceConfig.credentialConfigs.map((config) => config.id);\n\n        const issuerMetadata = await this.issuerMetadata(tenantId);\n        const issuer_state = v4();\n        return this.issuer\n            .createCredentialOffer({\n                credentialConfigurationIds,\n                grants: {\n                    [authorizationCodeGrantIdentifier]: {\n                        issuer_state,\n                    },\n                },\n                issuerMetadata,\n            })\n            .then(\n                async (offer) => {\n                    await this.sessionService.create({\n                        id: issuer_state,\n                        offer: offer.credentialOfferObject,\n                        credentialPayload: body,\n                        tenantId: user.sub,\n                        issuanceId: body.issuanceId,\n                    });\n                    return {\n                        session: issuer_state,\n                        uri: offer.credentialOffer,\n                    } as OfferResponse;\n                },\n                () => {\n                    throw new ConflictException(\n                        `Invalid credential configuration ID`,\n                    );\n                },\n            );\n    }\n\n    async getCredential(\n        req: Request,\n        tenantId: string,\n    ): Promise {\n        const issuerMetadata = await this.issuerMetadata(tenantId);\n        const parsedCredentialRequest = this.issuer.parseCredentialRequest({\n            issuerMetadata,\n            credentialRequest: req.body as Record,\n        });\n\n        if (parsedCredentialRequest?.proofs?.jwt === undefined) {\n            throw new Error('Invalid credential request');\n        }\n\n        const headers = getHeadersFromRequest(req);\n        const { tokenPayload } =\n            await this.resourceServer.verifyResourceRequest({\n                authorizationServers: issuerMetadata.authorizationServers,\n                request: {\n                    url: `https://${req.host}${req.url}`,\n                    method: req.method as HttpMethod,\n                    headers,\n                },\n                resourceServer:\n                    issuerMetadata.credentialIssuer.credential_issuer,\n                allowedAuthenticationSchemes: [\n                    SupportedAuthenticationScheme.DPoP,\n                ],\n            });\n\n        const session = await this.sessionService.get(\n            tokenPayload.sub as string,\n        );\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId,\n            flowType: 'OID4VCI',\n            stage: 'credential_request',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            credentialConfigurationId:\n                parsedCredentialRequest.credentialConfigurationId,\n            proofCount: parsedCredentialRequest.proofs?.jwt?.length || 0,\n        });\n\n        try {\n            const credentials: string[] = [];\n            for (const jwt of parsedCredentialRequest.proofs.jwt) {\n                const verifiedProof =\n                    await this.issuer.verifyCredentialRequestJwtProof({\n                        //check if this is correct or if the passed nonce is validated.\n                        expectedNonce: tokenPayload.nonce as string,\n                        issuerMetadata: await this.issuerMetadata(tenantId),\n                        jwt,\n                    });\n                const cnf = verifiedProof.signer.publicJwk;\n                const cred = await this.credentialsService.getCredential(\n                    parsedCredentialRequest.credentialConfigurationId as string,\n                    cnf as any,\n                    session,\n                );\n                credentials.push(cred);\n\n                this.sessionLogger.logCredentialIssuance(\n                    logContext,\n                    parsedCredentialRequest.credentialConfigurationId as string,\n                    {\n                        credentialSize: cred.length,\n                        proofVerified: true,\n                    },\n                );\n            }\n\n            const notificationId = v4();\n            session.notifications.push({\n                id: notificationId,\n            });\n            await this.sessionService.add(session.id, tenantId, {\n                notifications: session.notifications,\n            });\n\n            this.sessionLogger.logFlowComplete(logContext, {\n                credentialsIssued: credentials.length,\n                notificationId,\n            });\n\n            return this.issuer.createCredentialResponse({\n                credentials,\n                credentialRequest: parsedCredentialRequest,\n                cNonce: tokenPayload.nonce as string,\n                cNonceExpiresInSeconds: 3600,\n                //this should be stored in the session in case this endpoint is requested multiple times, but the response is differnt.\n                notificationId,\n            });\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                credentialConfigurationId:\n                    parsedCredentialRequest.credentialConfigurationId,\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Store the notification in the session based on the notitification id.\n     * @param req\n     * @param body\n     */\n    async handleNotification(\n        req: Request,\n        body: NotificationRequestDto,\n        tenantId: string,\n    ) {\n        const issuerMetadata = await this.issuerMetadata(tenantId);\n        const headers = getHeadersFromRequest(req);\n        const { tokenPayload } =\n            await this.resourceServer.verifyResourceRequest({\n                authorizationServers: issuerMetadata.authorizationServers,\n                request: {\n                    url: `https://${req.host}${req.url}`,\n                    method: req.method as HttpMethod,\n                    headers,\n                },\n                resourceServer:\n                    issuerMetadata.credentialIssuer.credential_issuer,\n                allowedAuthenticationSchemes: [\n                    SupportedAuthenticationScheme.DPoP,\n                ],\n            });\n\n        const session = await this.sessionService.get(\n            tokenPayload.sub as string,\n        );\n        if (session === undefined) {\n            throw new BadRequestException('Session not found');\n        }\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId,\n            flowType: 'OID4VCI',\n            stage: 'notification',\n        };\n\n        try {\n            const index = session.notifications.findIndex(\n                (notification) => notification.id === body.notification_id,\n            );\n            if (index === -1) {\n                throw new BadRequestException(\n                    'No notifications found in session',\n                );\n            }\n            session.notifications[index] = {\n                id: body.notification_id,\n                event: body.event,\n            };\n            await this.sessionService.add(session.id, tenantId, {\n                notifications: session.notifications,\n            });\n\n            this.sessionLogger.logNotification(logContext, body.event || '', {\n                notificationId: body.notification_id,\n                notificationIndex: index,\n            });\n        } catch (error) {\n            this.sessionLogger.logSessionError(\n                logContext,\n                error as Error,\n                'Failed to handle notification',\n                {\n                    notificationId: body.notification_id,\n                },\n            );\n            throw error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vpController.html":{"url":"controllers/Oid4vpController.html","title":"controller - Oid4vpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/oid4vp\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getRequestWithSession\n                            \n                            \n                                    \n                                    \n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getRequestWithSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRequestWithSession(tenantId: string, requestId: string, session: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('request/:requestId/:session')@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:34\n                        \n                    \n\n\n            \n                \n                        Returns the authorization request for a given requestId and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('response')@SessionLogger('state', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Endpoint to receive the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    Param,\n    Post,\n    UseInterceptors,\n} from '@nestjs/common';\nimport { Oid4vpService } from './oid4vp.service';\nimport { AuthorizationResponse } from './dto/authorization-response.dto';\nimport { SessionLogger } from '../../utils/session-logger.decorator';\nimport { SessionLoggerInterceptor } from '../../utils/session-logger.interceptor';\n\n/**\n * Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n */\n@Controller(':tenantId/oid4vp')\n@UseInterceptors(SessionLoggerInterceptor)\nexport class Oid4vpController {\n    /**\n     * Constructor for the Oid4vpController.\n     * @param oid4vpService - Instance of Oid4vpService for handling OID4VP operations.\n     */\n    constructor(private readonly oid4vpService: Oid4vpService) {}\n\n    /**\n     * Returns the authorization request for a given requestId and session.\n     * @param requestId\n     * @param session\n     * @returns\n     */\n    @Get('request/:requestId/:session')\n    @SessionLogger('session', 'OID4VP')\n    getRequestWithSession(\n        @Param('tenantId') tenantId: string,\n        @Param('requestId') requestId: string,\n        @Param('session') session: string,\n    ) {\n        return this.oid4vpService.createAuthorizationRequest(\n            requestId,\n            tenantId,\n            session,\n        );\n    }\n\n    /**\n     * Endpoint to receive the response from the wallet.\n     * @param body\n     * @returns\n     */\n    @Post('response')\n    @SessionLogger('state', 'OID4VP')\n    getResponse(\n        @Body() body: AuthorizationResponse,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.oid4vpService.getResponse(body, tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/Oid4vpModule.html":{"url":"modules/Oid4vpModule.html","title":"module - Oid4vpModule","body":"\n                   \n\n\n\n\n    Modules\n    Oid4vpModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_imports\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nOid4vpModule -->\n\nPresentationsModule->Oid4vpModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nOid4vpModule -->\n\nRegistrarModule->Oid4vpModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            Oid4vpService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vpController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            PresentationsModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            Oid4vpService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { Oid4vpService } from './oid4vp.service';\nimport { Oid4vpController } from './oid4vp.controller';\nimport { CryptoModule } from '../../crypto/crypto.module';\nimport { RegistrarModule } from '../../registrar/registrar.module';\nimport { PresentationsModule } from '../presentations/presentations.module';\nimport { SessionModule } from '../../session/session.module';\nimport { HttpModule } from '@nestjs/axios';\nimport { SessionLoggerService } from '../../utils/session-logger.service';\nimport { SessionLoggerInterceptor } from '../../utils/session-logger.interceptor';\n\n@Module({\n    imports: [\n        CryptoModule,\n        RegistrarModule,\n        PresentationsModule,\n        SessionModule,\n        HttpModule,\n    ],\n    controllers: [Oid4vpController],\n    providers: [Oid4vpService, SessionLoggerService, SessionLoggerInterceptor],\n    exports: [Oid4vpService],\n})\nexport class Oid4vpModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Oid4vpService.html":{"url":"injectables/Oid4vpService.html","title":"injectable - Oid4vpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Oid4vpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAuthorizationRequest\n                            \n                            \n                                    Async\n                                createRequest\n                            \n                            \n                                    Async\n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, encryptionService: EncryptionService, configService: ConfigService, registrarService: RegistrarService, presentationsService: PresentationsService, sessionService: SessionService, httpService: HttpService, sessionLogger: SessionLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/oid4vp/oid4vp.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAuthorizationRequest(requestId: string, tenantId: string, auth_session: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:41\n                        \n                    \n\n\n            \n                \n                        Creates an authorization request for the OID4VP flow.\nThis method generates a JWT that includes the necessary parameters for the authorization request.\nIt initializes the session logging context and logs the start of the flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                auth_session\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRequest(requestId: string, values: PresentationRequestOptions, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:215\n                        \n                    \n\n\n            \n                \n                        Creates a request for the OID4VP flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            PresentationRequestOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:264\n                        \n                    \n\n\n            \n                \n                        Processes the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { randomUUID } from 'node:crypto';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { AuthorizationResponse } from './dto/authorization-response.dto';\nimport { RegistrarService } from '../../registrar/registrar.service';\nimport { PresentationsService } from '../presentations/presentations.service';\nimport { AuthResponse } from '../presentations/dto/auth-response.dto';\nimport { EncryptionService } from '../../crypto/encryption/encryption.service';\nimport { v4 } from 'uuid';\nimport { SessionService } from '../../session/session.service';\nimport { HttpService } from '@nestjs/axios';\nimport { firstValueFrom } from 'rxjs';\nimport { OfferResponse } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport { SessionLoggerService } from '../../utils/session-logger.service';\nimport { SessionLogContext } from '../../utils/session-logger-context';\nimport { PresentationRequestOptions } from './dto/presentation-request-options.dto';\n\n@Injectable()\nexport class Oid4vpService {\n    constructor(\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private configService: ConfigService,\n        private registrarService: RegistrarService,\n        private presentationsService: PresentationsService,\n        private sessionService: SessionService,\n        private httpService: HttpService,\n        private sessionLogger: SessionLoggerService,\n    ) {}\n\n    /**\n     * Creates an authorization request for the OID4VP flow.\n     * This method generates a JWT that includes the necessary parameters for the authorization request.\n     * It initializes the session logging context and logs the start of the flow.\n     * @param requestId\n     * @param tenantId\n     * @param auth_session\n     * @returns\n     */\n    async createAuthorizationRequest(\n        requestId: string,\n        tenantId: string,\n        auth_session: string,\n    ): Promise {\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: auth_session,\n            tenantId,\n            flowType: 'OID4VP',\n            stage: 'authorization_request',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            requestId,\n            action: 'create_authorization_request',\n        });\n\n        try {\n            const host = this.configService.getOrThrow('PUBLIC_URL');\n            const tenantUrl = `${host}/${tenantId}`;\n\n            const values =\n                await this.presentationsService.getPresentationConfig(\n                    requestId,\n                    tenantId,\n                );\n            let regCert: string | undefined = undefined;\n\n            const dcql_query = JSON.parse(\n                JSON.stringify(values.dcql_query).replace(\n                    //g,\n                    tenantUrl,\n                ),\n            );\n\n            if (this.registrarService.isEnabled()) {\n                const registrationCert = JSON.parse(\n                    JSON.stringify(values.registrationCert).replace(\n                        //g,\n                        tenantUrl,\n                    ),\n                );\n                regCert =\n                    await this.registrarService.addRegistrationCertificate(\n                        registrationCert,\n                        dcql_query,\n                        requestId,\n                        tenantId,\n                    );\n            }\n            const nonce = randomUUID();\n            await this.sessionService.add(auth_session, tenantId, {\n                vp_nonce: nonce,\n            });\n\n            this.sessionLogger.logAuthorizationRequest(logContext, {\n                requestId,\n                nonce,\n                regCert,\n                dcqlQueryCount: Array.isArray(dcql_query)\n                    ? dcql_query.length\n                    : 1,\n            });\n\n            const request = {\n                payload: {\n                    response_type: 'vp_token',\n                    client_id: 'x509_san_dns:' + host.replace('https://', ''),\n                    response_uri: `${host}/${tenantId}/oid4vp/response`,\n                    response_mode: 'direct_post.jwt',\n                    nonce,\n                    dcql_query,\n                    client_metadata: {\n                        jwks: {\n                            keys: [\n                                this.encryptionService.getEncryptionPublicKey(),\n                            ],\n                        },\n                        vp_formats: {\n                            mso_mdoc: {\n                                alg: ['EdDSA', 'ES256', 'ES384'],\n                            },\n                            'dc+sd-jwt': {\n                                'kb-jwt_alg_values': [\n                                    'EdDSA',\n                                    'ES256',\n                                    'ES384',\n                                    'ES256K',\n                                ],\n                                'sd-jwt_alg_values': [\n                                    'EdDSA',\n                                    'ES256',\n                                    'ES384',\n                                    'ES256K',\n                                ],\n                            },\n                        },\n                        authorization_encrypted_response_alg: 'ECDH-ES',\n                        authorization_encrypted_response_enc: 'A128GCM',\n                        client_name:\n                            this.configService.getOrThrow('RP_NAME'),\n                        response_types_supported: ['vp_token'],\n                    },\n                    state: auth_session,\n                    aud: host,\n                    exp: Math.floor(Date.now() / 1000) + 60 * 5,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    verifier_attestations: regCert\n                        ? [\n                              {\n                                  format: 'jwt',\n                                  data: regCert,\n                              },\n                          ]\n                        : undefined,\n                },\n                header: {\n                    typ: 'oauth-authz-req+jwt',\n                },\n            };\n\n            let accessCert: string[] | undefined = undefined;\n            try {\n                accessCert = this.cryptoService.getCertChain(\n                    'access',\n                    tenantId,\n                );\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            } catch (err: any) {\n                accessCert = this.cryptoService.getCertChain(\n                    'signing',\n                    tenantId,\n                );\n            }\n\n            const header = {\n                ...request.header,\n                alg: 'ES256',\n                x5c: accessCert,\n            };\n\n            const signedJwt = await this.cryptoService.signJwt(\n                header,\n                request.payload,\n                tenantId,\n            );\n\n            this.sessionLogger.logSession(\n                logContext,\n                'Authorization request created successfully',\n                {\n                    signedJwtLength: signedJwt.length,\n                    certificateChainLength: accessCert?.length || 0,\n                },\n            );\n\n            return signedJwt;\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                requestId,\n                action: 'create_authorization_request',\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Creates a request for the OID4VP flow.\n     * @param requestId\n     * @param values\n     * @param tenantId\n     * @returns\n     */\n    async createRequest(\n        requestId: string,\n        values: PresentationRequestOptions,\n        tenantId: string,\n    ): Promise {\n        const presentationConfig =\n            await this.presentationsService.getPresentationConfig(\n                requestId,\n                tenantId,\n            );\n\n        if (!values.session) {\n            values.session = v4();\n            await this.sessionService.create({\n                id: values.session,\n                webhook: values.webhook ?? presentationConfig.webhook,\n                tenantId,\n            });\n        } else {\n            await this.sessionService.add(values.session, tenantId, {\n                webhook: values.webhook ?? presentationConfig.webhook,\n            });\n        }\n\n        const host = this.configService\n            .getOrThrow('PUBLIC_URL')\n            .replace('https://', '');\n        const params = {\n            client_id: `x509_san_dns:${host}`,\n            request_uri: `${this.configService.getOrThrow('PUBLIC_URL')}/${tenantId}/oid4vp/request/${requestId}/${values.session}`,\n        };\n        const queryString = Object.entries(params)\n            .map(\n                ([key, value]) =>\n                    `${encodeURIComponent(key)}=${encodeURIComponent(value)}`,\n            )\n            .join('&');\n\n        return {\n            uri: queryString,\n            session: values.session,\n        };\n    }\n\n    /**\n     * Processes the response from the wallet.\n     * @param body\n     * @param tenantId\n     */\n    async getResponse(body: AuthorizationResponse, tenantId: string) {\n        const res = await this.encryptionService.decryptJwe(\n            body.response,\n        );\n        const session = await this.sessionService.get(res.state);\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: res.state,\n            tenantId,\n            flowType: 'OID4VP',\n            stage: 'response_processing',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            action: 'process_presentation_response',\n            hasWebhook: !!session.webhook,\n        });\n\n        try {\n            //TODO: load required fields from the config\n            const credentials = await this.presentationsService.parseResponse(\n                res,\n                [],\n                session.vp_nonce as string,\n            );\n\n            this.sessionLogger.logCredentialVerification(\n                logContext,\n                !!credentials && credentials.length > 0,\n                {\n                    credentialCount: credentials?.length || 0,\n                    nonce: session.vp_nonce,\n                },\n            );\n\n            //tell the auth server the result of the session.\n            await this.sessionService.add(res.state, tenantId, {\n                //TODO: not clear why it has to be any\n                credentials: credentials as any,\n            });\n            // if there a a webook URL, send the response there\n            if (session.webhook) {\n                const headers: Record = {};\n                if (\n                    session.webhook.auth &&\n                    session.webhook.auth.type === 'apiKey'\n                ) {\n                    headers[session.webhook.auth.config.headerName] =\n                        session.webhook.auth.config.value;\n                }\n\n                console.log(headers);\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    'Sending webhook notification',\n                    {\n                        webhookUrl: session.webhook.url,\n                        authType: session.webhook.auth?.type || 'none',\n                    },\n                );\n\n                await firstValueFrom(\n                    this.httpService.post(\n                        session.webhook.url,\n                        {\n                            credentials,\n                            session: res.state,\n                        },\n                        {\n                            headers,\n                        },\n                    ),\n                ).then(\n                    async (webhookResponse) => {\n                        //TODO: better: just store it when it's a presentation during issuance\n                        if (webhookResponse.data) {\n                            session.credentialPayload!.values =\n                                webhookResponse.data;\n                            //store received webhook response\n                            await this.sessionService.add(res.state, tenantId, {\n                                credentialPayload: session.credentialPayload,\n                            });\n                        }\n\n                        this.sessionLogger.logSession(\n                            logContext,\n                            'Webhook notification sent successfully',\n                            {\n                                responseStatus: webhookResponse.status,\n                                hasResponseData: !!webhookResponse.data,\n                            },\n                        );\n                    },\n                    (err) => {\n                        this.sessionLogger.logSessionError(\n                            logContext,\n                            err,\n                            'Error sending webhook',\n                            {\n                                webhookUrl: session.webhook!.url,\n                            },\n                        );\n                        throw new Error(\n                            `Error sending webhook: ${err.message || err}`,\n                        );\n                    },\n                );\n            }\n\n            this.sessionLogger.logFlowComplete(logContext, {\n                credentialCount: credentials?.length || 0,\n                webhookSent: !!session.webhook,\n            });\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                action: 'process_presentation_response',\n            });\n            throw error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParResponseDto.html":{"url":"classes/ParResponseDto.html","title":"class - ParResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/par-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expires_in\n                            \n                            \n                                request_uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The expiration time for the request URI in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:5\n                        \n                    \n\n            \n                \n                    The request URI for the Pushed Authorization Request.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ParResponseDto {\n    /**\n     * The request URI for the Pushed Authorization Request.\n     */\n    request_uri: string;\n    /**\n     * The expiration time for the request URI in seconds.\n     */\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Params.html":{"url":"interfaces/Params.html","title":"interface - Params","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Params\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/params.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            headers\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            query\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type Slot = 'body' | 'headers' | 'path' | 'query';\n\nexport type Field =\n    | {\n          in: Exclude;\n          key: string;\n          map?: string;\n      }\n    | {\n          in: Extract;\n          key?: string;\n          map?: string;\n      };\n\nexport interface Fields {\n    allowExtra?: Partial>;\n    args?: ReadonlyArray;\n}\n\nexport type FieldsConfig = ReadonlyArray;\n\nconst extraPrefixesMap: Record = {\n    $body_: 'body',\n    $headers_: 'headers',\n    $path_: 'path',\n    $query_: 'query',\n};\nconst extraPrefixes = Object.entries(extraPrefixesMap);\n\ntype KeyMap = Map;\n\nconst buildKeyMap = (fields: FieldsConfig, map?: KeyMap): KeyMap => {\n    if (!map) {\n        map = new Map();\n    }\n\n    for (const config of fields) {\n        if ('in' in config) {\n            if (config.key) {\n                map.set(config.key, {\n                    in: config.in,\n                    map: config.map,\n                });\n            }\n        } else if (config.args) {\n            buildKeyMap(config.args, map);\n        }\n    }\n\n    return map;\n};\n\ninterface Params {\n    body: unknown;\n    headers: Record;\n    path: Record;\n    query: Record;\n}\n\nconst stripEmptySlots = (params: Params) => {\n    for (const [slot, value] of Object.entries(params)) {\n        if (value && typeof value === 'object' && !Object.keys(value).length) {\n            delete params[slot as Slot];\n        }\n    }\n};\n\nexport const buildClientParams = (\n    args: ReadonlyArray,\n    fields: FieldsConfig,\n) => {\n    const params: Params = {\n        body: {},\n        headers: {},\n        path: {},\n        query: {},\n    };\n\n    const map = buildKeyMap(fields);\n\n    let config: FieldsConfig[number] | undefined;\n\n    for (const [index, arg] of args.entries()) {\n        if (fields[index]) {\n            config = fields[index];\n        }\n\n        if (!config) {\n            continue;\n        }\n\n        if ('in' in config) {\n            if (config.key) {\n                const field = map.get(config.key)!;\n                const name = field.map || config.key;\n                (params[field.in] as Record)[name] = arg;\n            } else {\n                params.body = arg;\n            }\n        } else {\n            for (const [key, value] of Object.entries(arg ?? {})) {\n                const field = map.get(key);\n\n                if (field) {\n                    const name = field.map || key;\n                    (params[field.in] as Record)[name] = value;\n                } else {\n                    const extra = extraPrefixes.find(([prefix]) =>\n                        key.startsWith(prefix),\n                    );\n\n                    if (extra) {\n                        const [prefix, slot] = extra;\n                        (params[slot] as Record)[\n                            key.slice(prefix.length)\n                        ] = value;\n                    } else {\n                        for (const [slot, allowed] of Object.entries(\n                            config.allowExtra ?? {},\n                        )) {\n                            if (allowed) {\n                                (\n                                    params[slot as Slot] as Record\n                                )[key] = value;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    stripEmptySlots(params);\n\n    return params;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html","title":"interface - ParsedAccessTokenAuthorizationCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenAuthorizationCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                        \n                                            grantType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:         AuthorizationCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AuthorizationCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n} from '@openid4vc/oauth2';\nimport type { Request, Response } from 'express';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { getHeadersFromRequest } from '../oid4vci/util';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { Oid4vpService } from '../../verifier/oid4vp/oid4vp.service';\nimport { SessionService } from '../../session/session.service';\nimport { WebhookConfig } from '../../utils/webhook.dto';\nimport { IssuanceService } from '../issuance/issuance.service';\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(tenantId: string): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow('PUBLIC_URL') +\n            `/${tenantId}`;\n        return this.getAuthorizationServer(\n            tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: ['ES256'],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n        tenantId: string,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        'request_uri not found or not provided in the request',\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                'request_uri not found or not provided in the request',\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!, tenantId);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        tenantId: string,\n    ): Promise {\n        const url = `${this.configService.getOrThrow('PUBLIC_URL')}${req.url}`;\n\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const session = await this.sessionService.getBy({\n            authorization_code: body.code,\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        }\n        const authorizationServerMetadata = this.authzMetadata(tenantId);\n        //TODO: handle response\n        const { dpop } = await this.getAuthorizationServer(\n            tenantId,\n        ).verifyAuthorizationCodeAccessTokenRequest({\n            grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n            accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n            expectedCode: session.authorization_code as string,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n            dpop: {\n                required: true,\n                allowedSigningAlgs:\n                    authorizationServerMetadata.dpop_signing_alg_values_supported,\n                jwt: parsedAccessTokenRequest.dpop?.jwt,\n            },\n            authorizationServerMetadata,\n        });\n\n        const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow('PUBLIC_URL')}/${tenantId}`,\n            signer: {\n                method: 'jwk',\n                alg: 'ES256',\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            cNonce,\n            cNonceExpiresIn: 100,\n            clientId: 'wallet', // must be same as the client attestation\n            dpop,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest('pid', { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: 'insufficient_authorization',\n            auth_session,\n            presentation,\n            error_description:\n                'Presentation of credential required before issuance',\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        tenantId: string,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n            //check if session has valid presentation, we assume for now\n            await this.sendAuthorizationCode(res, body.auth_session, tenantId);\n            return;\n        }\n\n        const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        }\n        const issuanceId = session.issuanceId!;\n        const config = await this.issuanceService.getIssuanceConfigurationById(\n            issuanceId,\n            tenantId,\n        );\n        if (config.presentation_during_issuance) {\n            const webhook = config.presentation_during_issuance.webhook;\n            const response = await this.parseChallengeRequest(\n                body,\n                tenantId,\n                webhook,\n            );\n            res.status(400).send(response);\n        } else {\n            await this.sendAuthorizationCode(res, body.issuer_state!, tenantId);\n        }\n    }\n\n    private async sendAuthorizationCode(\n        res: Response,\n        issuer_state: string,\n        tenantId: string,\n    ) {\n        const authorization_code = await this.setAuthCode(\n            issuer_state,\n            tenantId,\n        );\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string, tenantId: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, tenantId, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PathSerializer.html":{"url":"interfaces/PathSerializer.html","title":"interface - PathSerializer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PathSerializer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/utils.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { getAuthToken } from '../core/auth';\nimport type {\n    QuerySerializer,\n    QuerySerializerOptions,\n} from '../core/bodySerializer';\nimport { jsonBodySerializer } from '../core/bodySerializer';\nimport {\n    serializeArrayParam,\n    serializeObjectParam,\n    serializePrimitiveParam,\n} from '../core/pathSerializer';\nimport type { Client, ClientOptions, Config, RequestOptions } from './types';\n\ninterface PathSerializer {\n    path: Record;\n    url: string;\n}\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\ntype ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\ntype ArraySeparatorStyle = ArrayStyle | MatrixStyle;\n\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n    let url = _url;\n    const matches = _url.match(PATH_PARAM_RE);\n    if (matches) {\n        for (const match of matches) {\n            let explode = false;\n            let name = match.substring(1, match.length - 1);\n            let style: ArraySeparatorStyle = 'simple';\n\n            if (name.endsWith('*')) {\n                explode = true;\n                name = name.substring(0, name.length - 1);\n            }\n\n            if (name.startsWith('.')) {\n                name = name.substring(1);\n                style = 'label';\n            } else if (name.startsWith(';')) {\n                name = name.substring(1);\n                style = 'matrix';\n            }\n\n            const value = path[name];\n\n            if (value === undefined || value === null) {\n                continue;\n            }\n\n            if (Array.isArray(value)) {\n                url = url.replace(\n                    match,\n                    serializeArrayParam({ explode, name, style, value }),\n                );\n                continue;\n            }\n\n            if (typeof value === 'object') {\n                url = url.replace(\n                    match,\n                    serializeObjectParam({\n                        explode,\n                        name,\n                        style,\n                        value: value as Record,\n                        valueOnly: true,\n                    }),\n                );\n                continue;\n            }\n\n            if (style === 'matrix') {\n                url = url.replace(\n                    match,\n                    `;${serializePrimitiveParam({\n                        name,\n                        value: value as string,\n                    })}`,\n                );\n                continue;\n            }\n\n            const replaceValue = encodeURIComponent(\n                style === 'label' ? `.${value as string}` : (value as string),\n            );\n            url = url.replace(match, replaceValue);\n        }\n    }\n    return url;\n};\n\nexport const createQuerySerializer = ({\n    allowReserved,\n    array,\n    object,\n}: QuerySerializerOptions = {}) => {\n    const querySerializer = (queryParams: T) => {\n        const search: string[] = [];\n        if (queryParams && typeof queryParams === 'object') {\n            for (const name in queryParams) {\n                const value = queryParams[name];\n\n                if (value === undefined || value === null) {\n                    continue;\n                }\n\n                if (Array.isArray(value)) {\n                    const serializedArray = serializeArrayParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'form',\n                        value,\n                        ...array,\n                    });\n                    if (serializedArray) search.push(serializedArray);\n                } else if (typeof value === 'object') {\n                    const serializedObject = serializeObjectParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'deepObject',\n                        value: value as Record,\n                        ...object,\n                    });\n                    if (serializedObject) search.push(serializedObject);\n                } else {\n                    const serializedPrimitive = serializePrimitiveParam({\n                        allowReserved,\n                        name,\n                        value: value as string,\n                    });\n                    if (serializedPrimitive) search.push(serializedPrimitive);\n                }\n            }\n        }\n        return search.join('&');\n    };\n    return querySerializer;\n};\n\n/**\n * Infers parseAs value from provided Content-Type header.\n */\nexport const getParseAs = (\n    contentType: string | null,\n): Exclude => {\n    if (!contentType) {\n        // If no Content-Type header is provided, the best we can do is return the raw response body,\n        // which is effectively the same as the 'stream' option.\n        return 'stream';\n    }\n\n    const cleanContent = contentType.split(';')[0]?.trim();\n\n    if (!cleanContent) {\n        return;\n    }\n\n    if (\n        cleanContent.startsWith('application/json') ||\n        cleanContent.endsWith('+json')\n    ) {\n        return 'json';\n    }\n\n    if (cleanContent === 'multipart/form-data') {\n        return 'formData';\n    }\n\n    if (\n        ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n            cleanContent.startsWith(type),\n        )\n    ) {\n        return 'blob';\n    }\n\n    if (cleanContent.startsWith('text/')) {\n        return 'text';\n    }\n\n    return;\n};\n\nexport const setAuthParams = async ({\n    security,\n    ...options\n}: Pick, 'security'> &\n    Pick & {\n        headers: Headers;\n    }) => {\n    for (const auth of security) {\n        const token = await getAuthToken(auth, options.auth);\n\n        if (!token) {\n            continue;\n        }\n\n        const name = auth.name ?? 'Authorization';\n\n        switch (auth.in) {\n            case 'query':\n                if (!options.query) {\n                    options.query = {};\n                }\n                options.query[name] = token;\n                break;\n            case 'cookie':\n                options.headers.append('Cookie', `${name}=${token}`);\n                break;\n            case 'header':\n            default:\n                options.headers.set(name, token);\n                break;\n        }\n\n        return;\n    }\n};\n\nexport const buildUrl: Client['buildUrl'] = (options) => {\n    const url = getUrl({\n        baseUrl: options.baseUrl as string,\n        path: options.path,\n        query: options.query,\n        querySerializer:\n            typeof options.querySerializer === 'function'\n                ? options.querySerializer\n                : createQuerySerializer(options.querySerializer),\n        url: options.url,\n    });\n    return url;\n};\n\nexport const getUrl = ({\n    baseUrl,\n    path,\n    query,\n    querySerializer,\n    url: _url,\n}: {\n    baseUrl?: string;\n    path?: Record;\n    query?: Record;\n    querySerializer: QuerySerializer;\n    url: string;\n}) => {\n    const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n    let url = (baseUrl ?? '') + pathUrl;\n    if (path) {\n        url = defaultPathSerializer({ path, url });\n    }\n    let search = query ? querySerializer(query) : '';\n    if (search.startsWith('?')) {\n        search = search.substring(1);\n    }\n    if (search) {\n        url += `?${search}`;\n    }\n    return url;\n};\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n    const config = { ...a, ...b };\n    if (config.baseUrl?.endsWith('/')) {\n        config.baseUrl = config.baseUrl.substring(0, config.baseUrl.length - 1);\n    }\n    config.headers = mergeHeaders(a.headers, b.headers);\n    return config;\n};\n\nexport const mergeHeaders = (\n    ...headers: Array['headers'] | undefined>\n): Headers => {\n    const mergedHeaders = new Headers();\n    for (const header of headers) {\n        if (!header || typeof header !== 'object') {\n            continue;\n        }\n\n        const iterator =\n            header instanceof Headers\n                ? header.entries()\n                : Object.entries(header);\n\n        for (const [key, value] of iterator) {\n            if (value === null) {\n                mergedHeaders.delete(key);\n            } else if (Array.isArray(value)) {\n                for (const v of value) {\n                    mergedHeaders.append(key, v as string);\n                }\n            } else if (value !== undefined) {\n                // assume object headers are meant to be JSON stringified, i.e. their\n                // content value in OpenAPI specification is 'application/json'\n                mergedHeaders.set(\n                    key,\n                    typeof value === 'object'\n                        ? JSON.stringify(value)\n                        : (value as string),\n                );\n            }\n        }\n    }\n    return mergedHeaders;\n};\n\ntype ErrInterceptor = (\n    error: Err,\n    response: Res,\n    request: Req,\n    options: Options,\n) => Err | Promise;\n\ntype ReqInterceptor = (\n    request: Req,\n    options: Options,\n) => Req | Promise;\n\ntype ResInterceptor = (\n    response: Res,\n    request: Req,\n    options: Options,\n) => Res | Promise;\n\nclass Interceptors {\n    _fns: (Interceptor | null)[];\n\n    constructor() {\n        this._fns = [];\n    }\n\n    clear() {\n        this._fns = [];\n    }\n\n    getInterceptorIndex(id: number | Interceptor): number {\n        if (typeof id === 'number') {\n            return this._fns[id] ? id : -1;\n        } else {\n            return this._fns.indexOf(id);\n        }\n    }\n    exists(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        return !!this._fns[index];\n    }\n\n    eject(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = null;\n        }\n    }\n\n    update(id: number | Interceptor, fn: Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = fn;\n            return id;\n        } else {\n            return false;\n        }\n    }\n\n    use(fn: Interceptor) {\n        this._fns = [...this._fns, fn];\n        return this._fns.length - 1;\n    }\n}\n\n// `createInterceptors()` response, meant for external use as it does not\n// expose internals\nexport interface Middleware {\n    error: Pick>,\n        'eject' | 'use'\n    >;\n    request: Pick>, 'eject' | 'use'>;\n    response: Pick>,\n        'eject' | 'use'\n    >;\n}\n\n// do not add `Middleware` as return type so we can use _fns internally\nexport const createInterceptors = () => ({\n    error: new Interceptors>(),\n    request: new Interceptors>(),\n    response: new Interceptors>(),\n});\n\nconst defaultQuerySerializer = createQuerySerializer({\n    allowReserved: false,\n    array: {\n        explode: true,\n        style: 'form',\n    },\n    object: {\n        explode: true,\n        style: 'deepObject',\n    },\n});\n\nconst defaultHeaders = {\n    'Content-Type': 'application/json',\n};\n\nexport const createConfig = (\n    override: Config & T> = {},\n): Config & T> => ({\n    ...jsonBodySerializer,\n    headers: defaultHeaders,\n    parseAs: 'auto',\n    querySerializer: defaultQuerySerializer,\n    ...override,\n});\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PresentationConfig.html":{"url":"entities/PresentationConfig.html","title":"entity - PresentationConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PresentationConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a configuration for a Verifiable Presentation (VP) request.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                dcql_query\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                registrationCert\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:50\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        dcql_query\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:32\n                        \n                    \n\n            \n                \n                    The DCQL query to be used for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:17\n                        \n                    \n\n            \n                \n                    Unique identifier for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        registrationCert\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistrationCertificateRequest\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:38\n                        \n                    \n\n            \n                \n                    The registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:24\n                        \n                    \n\n            \n                \n                    The tenant ID for which the VP request is made.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:44\n                        \n                    \n\n            \n                \n                    Optional webhook URL to receive the response.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { IsString, IsObject } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook.dto';\nimport { RegistrationCertificateRequest } from '../dto/vp-request.dto';\nimport { Column, Entity } from 'typeorm';\nimport { ApiHideProperty } from '@nestjs/swagger';\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column('varchar', { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column('varchar', { primary: true })\n    tenantId: string;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column('json')\n    @IsObject()\n    //TODO: define the structure of the DCQL query\n    dcql_query: any;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsObject()\n    @Column('json')\n    registrationCert: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column('json', { nullable: true })\n    @IsObject()\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationDuringIssuance.html":{"url":"classes/PresentationDuringIssuance.html","title":"class - PresentationDuringIssuance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationDuringIssuance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/credential-config.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook.dto';\n\nexport class VCT {\n    @IsString()\n    vct: string;\n    @IsString()\n    name?: string;\n    @IsString()\n    description?: string;\n    @IsString()\n    extends?: string;\n    @IsString()\n    'extends#integrity'?: string;\n    @IsString()\n    schema_uri?: string;\n    @IsString()\n    'schema_uri#integrity'?: string;\n}\n\nexport class PresentationDuringIssuance {\n    @IsString()\n    type: string;\n    @IsObject()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PresentationManagementController.html":{"url":"controllers/PresentationManagementController.html","title":"controller - PresentationManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PresentationManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                presentation-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                configuration\n                            \n                            \n                                    \n                                deleteConfiguration\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                            \n                                    \n                                storePresentationConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        configuration\n                        \n                    \n                \n            \n            \n                \n                        \n                    configuration(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:111\n                        \n                    \n\n\n            \n                \n                        Returns the presentation request configurations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:137\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation request configuration by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: PresentationRequest, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@UseGuards(JwtAuthGuard)@ApiSecurity('oauth2')@ApiBody({type: PresentationRequest, examples: undefined})@Post('request')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:79\n                        \n                    \n\n\n            \n                \n                        Create an presentation request that can be sent to the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            PresentationRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    storePresentationConfig(config: PresentationConfig, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:121\n                        \n                    \n\n\n            \n                \n                        Store a presentation request configuration. If it already exists, it will be updated.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            PresentationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Res,\n    UseGuards,\n} from '@nestjs/common';\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from '@nestjs/swagger';\nimport { PresentationsService } from './presentations.service';\nimport { PresentationConfig } from './entities/presentation-config.entity';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { OfferResponse } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport {\n    PresentationRequest,\n    ResponseType,\n} from '../oid4vp/dto/presentation-request.dto';\nimport { Oid4vpService } from '../oid4vp/oid4vp.service';\nimport * as QRCode from 'qrcode';\nimport { Response } from 'express';\n\n@ApiTags('Presentation management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2', ['api:read', 'api:write'])\n@Controller('presentation-management')\nexport class PresentationManagementController {\n    constructor(\n        private readonly presentationsService: PresentationsService,\n        private readonly oid4vpService: Oid4vpService,\n    ) {}\n\n    /**\n     * Create an presentation request that can be sent to the user\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: 'JSON response',\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            'application/json': { schema: { type: 'object' } },\n            'image/png': { schema: { type: 'string', format: 'binary' } },\n        },\n    })\n    @ApiProduces('application/json', 'image/png')\n    @UseGuards(JwtAuthGuard)\n    @ApiSecurity('oauth2')\n    @ApiBody({\n        type: PresentationRequest,\n        examples: {\n            qrcode: {\n                summary: 'QR-Code Example',\n                value: {\n                    response_type: ResponseType.QRCode,\n                    requestId: 'pid',\n                },\n            },\n            uri: {\n                summary: 'URI',\n                value: {\n                    response_type: ResponseType.URI,\n                    requestId: 'pid',\n                },\n            },\n        },\n    })\n    @Post('request')\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: PresentationRequest,\n        @Token() user: TokenPayload,\n    ) {\n        const values = await this.oid4vpService.createRequest(\n            body.requestId,\n            {\n                webhook: body.webhook,\n            },\n            user.sub,\n        );\n        values.uri = `openid4vp://?${values.uri}`;\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader('Content-Type', 'image/png');\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n\n    /**\n     * Returns the presentation request configurations.\n     * @returns\n     */\n    @Get()\n    configuration(@Token() user: TokenPayload) {\n        return this.presentationsService.getPresentationConfigs(user.sub);\n    }\n\n    /**\n     * Store a presentation request configuration. If it already exists, it will be updated.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storePresentationConfig(\n        @Body() config: PresentationConfig,\n        @Token() user: TokenPayload,\n    ) {\n        return this.presentationsService.storePresentationConfig(\n            config,\n            user.sub,\n        );\n    }\n\n    /**\n     * Deletes a presentation request configuration by its ID.\n     * @param id\n     * @returns\n     */\n    @Delete(':id')\n    deleteConfiguration(@Param('id') id: string, @Token() user: TokenPayload) {\n        return this.presentationsService.deletePresentationConfig(id, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationRequest.html":{"url":"classes/PresentationRequest.html","title":"class - PresentationRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the presentation request containing the response type and request ID.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                requestId\n                            \n                            \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:33\n                        \n                    \n\n            \n                \n                    Identifier of the presentation configuration\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:26\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:41\n                        \n                    \n\n            \n                \n                    Webhook configuration to receive the response.\nIf not provided, the configured webhook from the configuration will be used.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsObject, IsOptional, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook.dto';\n\n/**\n * Enum for the type of response expected from the presentation request.\n */\nexport enum ResponseType {\n    /**\n     * Response type indicating a QR code will be returned.\n     */\n    QRCode = 'qrcode',\n    /**\n     * Response type indicating a URI will be returned.\n     */\n    URI = 'uri',\n}\n\n/**\n * DTO for the presentation request containing the response type and request ID.\n */\nexport class PresentationRequest {\n    /**\n     * @example qrcode\n     */\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Identifier of the presentation configuration\n     * @example pid\n     */\n    @IsString()\n    requestId: string;\n\n    /**\n     * Webhook configuration to receive the response.\n     * If not provided, the configured webhook from the configuration will be used.\n     */\n    @IsObject()\n    @IsOptional()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PresentationRequestOptions.html":{"url":"interfaces/PresentationRequestOptions.html","title":"interface - PresentationRequestOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PresentationRequestOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PresentationRequestOptions DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            session\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            webhook\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        session\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        session:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional session identifier for tracking the request.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        webhook\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        webhook:         WebhookConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WebhookConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional webhook configuration to receive the response.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { WebhookConfig } from '../../../utils/webhook.dto';\n\n/**\n * PresentationRequestOptions DTO\n */\nexport interface PresentationRequestOptions {\n    /**\n     * Optional session identifier for tracking the request.\n     */\n    session?: string;\n    /**\n     * Optional webhook configuration to receive the response.\n     */\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PresentationsModule.html":{"url":"modules/PresentationsModule.html","title":"module - PresentationsModule","body":"\n                   \n\n\n\n\n    Modules\n    PresentationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\n\nResolverModule\n\nResolverModule\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/presentations/presentations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PresentationManagementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ResolverModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { PresentationManagementController } from './presentations.controller';\nimport { PresentationsService } from './presentations.service';\nimport { ResolverModule } from '../resolver/resolver.module';\nimport { HttpModule } from '@nestjs/axios';\nimport { Oid4vpModule } from '../oid4vp/oid4vp.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PresentationConfig } from './entities/presentation-config.entity';\n\n@Module({\n    imports: [\n        ResolverModule,\n        HttpModule,\n        forwardRef(() => Oid4vpModule),\n        TypeOrmModule.forFeature([PresentationConfig]),\n    ],\n    controllers: [PresentationManagementController],\n    providers: [PresentationsService],\n    exports: [PresentationsService],\n})\nexport class PresentationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PresentationsService.html":{"url":"injectables/PresentationsService.html","title":"injectable - PresentationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PresentationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                kbVerifier\n                            \n                            \n                                sdjwtInstance\n                            \n                            \n                                    Private\n                                statusListFetcher\n                            \n                            \n                                verifier\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deletePresentationConfig\n                            \n                            \n                                    Async\n                                getPresentationConfig\n                            \n                            \n                                getPresentationConfigs\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                parseResponse\n                            \n                            \n                                storePresentationConfig\n                            \n                            \n                                    Public\n                                storeRCID\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, resolverService: ResolverService, vpRequestRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/presentations/presentations.service.ts:22\n                            \n                        \n\n                \n                    \n                            Constructor for the PresentationsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of HttpService for making HTTP requests.\n\n\n                                                        \n                                                \n                                                \n                                                        resolverService\n                                                  \n                                                        \n                                                                        ResolverService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ResolverService for resolving DID documents.\n\n\n                                                        \n                                                \n                                                \n                                                        vpRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for managing VP request configurations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deletePresentationConfig\n                        \n                    \n                \n            \n            \n                \ndeletePresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to delete.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to delete the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the deletion is complete.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Retrieves a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the requested PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPresentationConfigs\n                        \n                    \n                \n            \n            \n                \ngetPresentationConfigs(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:54\n                        \n                    \n\n\n            \n                \n                        Retrieves all presentation configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve configurations.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of PresentationConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Initializes the SDJwtVcInstance with the necessary configurations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseResponse\n                        \n                    \n                \n            \n            \n                \nparseResponse(res: AuthResponse, requiredFields: string[], keyBindingNonce: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:177\n                        \n                    \n\n\n            \n                \n                        Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            AuthResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requiredFields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyBindingNonce\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \nstorePresentationConfig(vprequest: PresentationConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Stores a new presentation configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                vprequest\n                                            \n                                                            PresentationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe PresentationConfig entity to store.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        storeRCID\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeRCID(registrationCertId: string, id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Stores the new registration certificate.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registrationCertId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the registration certificate to store.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to update.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the registration certificate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kbVerifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KbVerifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:160\n                        \n                    \n\n            \n                \n                    Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                            \n                                            \n                                                    signature\n                                            \n                                            \n                                                    payload\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sdjwtInstance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SDJwtVcInstance\n\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:22\n                        \n                    \n\n            \n                \n                    Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        statusListFetcher\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:145\n                        \n                    \n\n            \n                \n                    Fetch the status list from the uri.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    uri\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Verifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:122\n                        \n                    \n\n            \n                \n                    Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                                    \n                                                            \nThe data part of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                            \n                                                    signature\n                                                    \n                                                            \nThe signature of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { ConflictException, Injectable, OnModuleInit } from '@nestjs/common';\nimport { digest, ES256 } from '@sd-jwt/crypto-nodejs';\nimport { SDJwtVcInstance } from '@sd-jwt/sd-jwt-vc';\nimport { KbVerifier, Verifier } from '@sd-jwt/types';\nimport { importJWK, JWK, JWTPayload, jwtVerify } from 'jose';\nimport { firstValueFrom } from 'rxjs';\nimport { ResolverService } from '../resolver/resolver.service';\nimport { PresentationConfig } from './entities/presentation-config.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm/repository/Repository';\nimport { AuthResponse } from './dto/auth-response.dto';\n\n/**\n * Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n */\n@Injectable()\nexport class PresentationsService implements OnModuleInit {\n    /**\n     * Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n     */\n    sdjwtInstance: SDJwtVcInstance;\n\n    /**\n     * Constructor for the PresentationsService.\n     * @param httpService - Instance of HttpService for making HTTP requests.\n     * @param resolverService - Instance of ResolverService for resolving DID documents.\n     * @param vpRequestRepository - Repository for managing VP request configurations.\n     */\n    constructor(\n        private httpService: HttpService,\n        private resolverService: ResolverService,\n        @InjectRepository(PresentationConfig)\n        private vpRequestRepository: Repository,\n    ) {}\n\n    /**\n     * Initializes the SDJwtVcInstance with the necessary configurations.\n     */\n    onModuleInit() {\n        this.sdjwtInstance = new SDJwtVcInstance({\n            hasher: digest,\n            verifier: this.verifier.bind(this),\n            kbVerifier: this.kbVerifier.bind(this),\n            statusListFetcher: this.statusListFetcher.bind(this),\n        });\n    }\n\n    /**\n     * Retrieves all presentation configurations for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve configurations.\n     * @returns A promise that resolves to an array of PresentationConfig entities.\n     */\n    getPresentationConfigs(tenantId: string): Promise {\n        return this.vpRequestRepository.find({\n            where: { tenantId },\n            order: { createdAt: 'DESC' },\n        });\n    }\n\n    /**\n     * Stores a new presentation configuration.\n     * @param vprequest - The PresentationConfig entity to store.\n     * @param tenantId - The ID of the tenant for which to store the configuration.\n     * @returns A promise that resolves to the stored PresentationConfig entity.\n     */\n    storePresentationConfig(vprequest: PresentationConfig, tenantId: string) {\n        vprequest.tenantId = tenantId;\n        return this.vpRequestRepository.save(vprequest);\n    }\n\n    /**\n     * Deletes a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to delete.\n     * @param tenantId - The ID of the tenant for which to delete the configuration.\n     * @returns A promise that resolves when the deletion is complete.\n     */\n    deletePresentationConfig(id: string, tenantId: string) {\n        return this.vpRequestRepository.delete({ id, tenantId });\n    }\n\n    /**\n     * Retrieves a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to retrieve.\n     * @param tenantId - The ID of the tenant for which to retrieve the configuration.\n     * @returns A promise that resolves to the requested PresentationConfig entity.\n     */\n    async getPresentationConfig(\n        id: string,\n        tenantId: string,\n    ): Promise {\n        return this.vpRequestRepository\n            .findOneByOrFail({\n                id,\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException('Request ID invalid not found');\n            });\n    }\n\n    /**\n     * Stores the new registration certificate.\n     * @param registrationCertId - The ID of the registration certificate to store.\n     * @param id - The ID of the presentation configuration to update.\n     * @param tenantId - The ID of the tenant for which to store the registration certificate.\n     * @returns\n     */\n    public storeRCID(registrationCertId: string, id: string, tenantId: string) {\n        return this.vpRequestRepository.update(\n            { id, tenantId },\n            { registrationCert: { id: registrationCertId } },\n        );\n    }\n\n    /**\n     * Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n     * @param data - The data part of the SD-JWT-VC.\n     * @param signature - The signature of the SD-JWT-VC.\n     * @returns\n     */\n    verifier: Verifier = async (data, signature) => {\n        const instance = new SDJwtVcInstance({\n            hasher: digest,\n        });\n        const decodedVC = await instance.decode(`${data}.${signature}`);\n        const payload = decodedVC.jwt?.payload as JWTPayload;\n        const header = decodedVC.jwt?.header as JWK;\n        const publicKey = await this.resolverService.resolvePublicKey(\n            payload,\n            header,\n        );\n        const verify = await ES256.getVerifier(publicKey);\n        return verify(data, signature).catch((err) => {\n            console.log(err);\n            return false;\n        });\n    };\n\n    /**\n     * Fetch the status list from the uri.\n     * @param uri\n     * @returns\n     */\n    private statusListFetcher: (uri: string) => Promise = async (\n        uri: string,\n    ) => {\n        return firstValueFrom(this.httpService.get(uri)).then(\n            (res) => res.data,\n        );\n    };\n\n    /**\n     * Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n     * @param data\n     * @param signature\n     * @param payload\n     * @returns\n     */\n    private kbVerifier: KbVerifier = async (data, signature, payload) => {\n        if (!payload.cnf) {\n            throw new Error('No cnf found in the payload');\n        }\n        const key = await importJWK(payload.cnf.jwk as JWK, 'ES256');\n        return jwtVerify(`${data}.${signature}`, key).then(\n            () => true,\n            () => false,\n        );\n    };\n\n    /**\n     * Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n     * @param res\n     * @param requiredFields\n     * @returns\n     */\n    parseResponse(\n        res: AuthResponse,\n        requiredFields: string[],\n        keyBindingNonce: string,\n    ) {\n        const attestations = Object.keys(res.vp_token);\n        const att = attestations.map((att) =>\n            this.sdjwtInstance\n                .verify(res.vp_token[att], {\n                    requiredClaimKeys: requiredFields,\n                    keyBindingNonce,\n                })\n                .then(\n                    (result) => {\n                        return {\n                            id: att,\n                            values: {\n                                ...result.payload,\n                                cnf: undefined, // remove cnf for simplicity\n                                status: undefined, // remove status for simplicity\n                            },\n                        };\n                    },\n                    (err) => ({\n                        // when the verification fails, it will return an error object                (err) => ({\n                        id: att,\n                        error: err.message,\n                    }),\n                ),\n        );\n        return Promise.all(att);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PresentedData.html":{"url":"interfaces/PresentedData.html","title":"interface - PresentedData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PresentedData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            test/webhook/src/index.ts\n        \n\n\n            \n                Description\n            \n            \n                Assuming we receive a PID credentials with the address selectivly disclosed\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            credentials\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        credentials\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        credentials:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface PresentedData {\n\tcredentials: {\n\t\tid: string;\n\t\tvalues: {\n\t\t\taddress: {\n\t\t\t\tlocality: string;\n\t\t\t};\n\t\t};\n\t}[];\n}\n\n/**\n * Response for the citizen credential.\n */\ninterface ProcessResponse {\n\tcitizen: {\n\t\ttown: string;\n\t};\n}\n\nasync function handleRequest(request: Request): Promise {\n\tconst url = new URL(request.url);\n\n\tif (request.method === 'POST' && url.pathname === '/process') {\n\t\tconst presented: PresentedData = await request.json();\n\t\tconst res: ProcessResponse = {\n\t\t\tcitizen: {\n\t\t\t\ttown: `You live in ${presented.credentials[0].values.address.locality}`,\n\t\t\t},\n\t\t};\n\t\treturn Response.json(res, { status: 200 });\n\t}\n\n\tif (request.method === 'POST' && url.pathname === '/consume') {\n\t\tconst expextedApiKey = 'foo-bar'; // This should be securely stored and retrieved\n\t\tconsole.log(request.headers);\n\t\tconst apiKey = request.headers.get('x-api-key');\n\t\tif (apiKey !== expextedApiKey) {\n\t\t\treturn new Response('Unauthorized', { status: 401 });\n\t\t}\n\n\t\tconst presented = await request.json();\n\t\tconsole.log('Received consume webhook:');\n\t\tconsole.log(JSON.stringify(presented, null, 2));\n\t\treturn new Response(null, { status: 200 });\n\t}\n\n\treturn new Response('Not found', { status: 404 });\n}\n\nexport default {\n\tfetch: handleRequest,\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProcessResponse.html":{"url":"interfaces/ProcessResponse.html","title":"interface - ProcessResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProcessResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            test/webhook/src/index.ts\n        \n\n\n            \n                Description\n            \n            \n                Response for the citizen credential.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            citizen\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        citizen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        citizen:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface PresentedData {\n\tcredentials: {\n\t\tid: string;\n\t\tvalues: {\n\t\t\taddress: {\n\t\t\t\tlocality: string;\n\t\t\t};\n\t\t};\n\t}[];\n}\n\n/**\n * Response for the citizen credential.\n */\ninterface ProcessResponse {\n\tcitizen: {\n\t\ttown: string;\n\t};\n}\n\nasync function handleRequest(request: Request): Promise {\n\tconst url = new URL(request.url);\n\n\tif (request.method === 'POST' && url.pathname === '/process') {\n\t\tconst presented: PresentedData = await request.json();\n\t\tconst res: ProcessResponse = {\n\t\t\tcitizen: {\n\t\t\t\ttown: `You live in ${presented.credentials[0].values.address.locality}`,\n\t\t\t},\n\t\t};\n\t\treturn Response.json(res, { status: 200 });\n\t}\n\n\tif (request.method === 'POST' && url.pathname === '/consume') {\n\t\tconst expextedApiKey = 'foo-bar'; // This should be securely stored and retrieved\n\t\tconsole.log(request.headers);\n\t\tconst apiKey = request.headers.get('x-api-key');\n\t\tif (apiKey !== expextedApiKey) {\n\t\t\treturn new Response('Unauthorized', { status: 401 });\n\t\t}\n\n\t\tconst presented = await request.json();\n\t\tconsole.log('Received consume webhook:');\n\t\tconsole.log(JSON.stringify(presented, null, 2));\n\t\treturn new Response(null, { status: 200 });\n\t}\n\n\treturn new Response('Not found', { status: 404 });\n}\n\nexport default {\n\tfetch: handleRequest,\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuerySerializerOptions.html":{"url":"interfaces/QuerySerializerOptions.html","title":"interface - QuerySerializerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QuerySerializerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/bodySerializer.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowReserved\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            array\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            object\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowReserved\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowReserved:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        array\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        array:         SerializerOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SerializerOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        object\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        object:         SerializerOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SerializerOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type {\n    ArrayStyle,\n    ObjectStyle,\n    SerializerOptions,\n} from './pathSerializer';\n\nexport type QuerySerializer = (query: Record) => string;\n\nexport type BodySerializer = (body: any) => any;\n\nexport interface QuerySerializerOptions {\n    allowReserved?: boolean;\n    array?: SerializerOptions;\n    object?: SerializerOptions;\n}\n\nconst serializeFormDataPair = (\n    data: FormData,\n    key: string,\n    value: unknown,\n): void => {\n    if (typeof value === 'string' || value instanceof Blob) {\n        data.append(key, value);\n    } else {\n        data.append(key, JSON.stringify(value));\n    }\n};\n\nconst serializeUrlSearchParamsPair = (\n    data: URLSearchParams,\n    key: string,\n    value: unknown,\n): void => {\n    if (typeof value === 'string') {\n        data.append(key, value);\n    } else {\n        data.append(key, JSON.stringify(value));\n    }\n};\n\nexport const formDataBodySerializer = {\n    bodySerializer:  | Array>,\n    >(\n        body: T,\n    ): FormData => {\n        const data = new FormData();\n\n        Object.entries(body).forEach(([key, value]) => {\n            if (value === undefined || value === null) {\n                return;\n            }\n            if (Array.isArray(value)) {\n                value.forEach((v) => serializeFormDataPair(data, key, v));\n            } else {\n                serializeFormDataPair(data, key, value);\n            }\n        });\n\n        return data;\n    },\n};\n\nexport const jsonBodySerializer = {\n    bodySerializer: (body: T): string =>\n        JSON.stringify(body, (_key, value) =>\n            typeof value === 'bigint' ? value.toString() : value,\n        ),\n};\n\nexport const urlSearchParamsBodySerializer = {\n    bodySerializer:  | Array>,\n    >(\n        body: T,\n    ): string => {\n        const data = new URLSearchParams();\n\n        Object.entries(body).forEach(([key, value]) => {\n            if (value === undefined || value === null) {\n                return;\n            }\n            if (Array.isArray(value)) {\n                value.forEach((v) =>\n                    serializeUrlSearchParamsPair(data, key, v),\n                );\n            } else {\n                serializeUrlSearchParamsPair(data, key, value);\n            }\n        });\n\n        return data.toString();\n    },\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrarConfig.html":{"url":"classes/RegistrarConfig.html","title":"class - RegistrarConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrarConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar-config.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrarConfig class represents the configuration for the registrar service.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                accessCertificateId\n                            \n                            \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        accessCertificateId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar-config.ts:12\n                        \n                    \n\n            \n                \n                    ID of the access certificate.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar-config.ts:8\n                        \n                    \n\n            \n                \n                    ID of the relying party.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class RegistrarConfig {\n    /**\n     * ID of the relying party.\n     */\n    id?: string;\n    /**\n     * ID of the access certificate.\n     */\n    accessCertificateId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RegistrarModule.html":{"url":"modules/RegistrarModule.html","title":"module - RegistrarModule","body":"\n                   \n\n\n\n\n    Modules\n    RegistrarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_RegistrarModule_imports\n\n\n\ncluster_RegistrarModule_exports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/registrar/registrar.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            RegistrarModule is responsible for managing the registrar service.\nIt provides the RegistrarService and imports necessary modules.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            PresentationsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RegistrarService } from './registrar.service';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport * as Joi from 'joi';\nimport { PresentationsModule } from '../verifier/presentations/presentations.module';\n\n/**\n * Validation schema for the registrar module.\n * Defines the required environment variables and their types.\n */\nexport const REGISTRAR_VALIDATION_SCHEMA = {\n    REGISTRAR_URL: Joi.string(),\n    OIDC_ISSUER_URL: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    OIDC_CLIENT_ID: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    OIDC_CLIENT_SECRET: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n};\n\n/**\n * RegistrarModule is responsible for managing the registrar service.\n * It provides the RegistrarService and imports necessary modules.\n */\n@Module({\n    imports: [CryptoModule, PresentationsModule],\n    providers: [RegistrarService],\n    exports: [RegistrarService],\n})\nexport class RegistrarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RegistrarService.html":{"url":"injectables/RegistrarService.html","title":"injectable - RegistrarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RegistrarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar.service.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrarService is responsible for managing the interaction with the registrar,\nincluding adding relying parties, access certificates, and registration certificates.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                accessToken\n                            \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                oauth2Client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                addAccessCertificate\n                            \n                            \n                                    Async\n                                addRegistrationCertificate\n                            \n                            \n                                addRp\n                            \n                            \n                                    Async\n                                getAccessCertificateId\n                            \n                            \n                                isEnabled\n                            \n                            \n                                    Private\n                                loadConfig\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Async\n                                refreshAccessToken\n                            \n                            \n                                    Private\n                                saveConfig\n                            \n                            \n                                    Private\n                                storeExistingRp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, presentationsService: PresentationsService)\n                    \n                \n                        \n                            \n                                Defined in src/registrar/registrar.service.ts:61\n                            \n                        \n\n                \n                    \n                            Constructor for the RegistrarService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ConfigService for accessing configuration values.\n\n\n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of CryptoService for cryptographic operations.\n\n\n                                                        \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of PresentationsService for handling presentations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        addAccessCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addAccessCertificate(config: RegistrarConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:231\n                        \n                    \n\n\n            \n                \n                        Add a new access certificate to the registrar.\nThis is only needed once, when the access certificate is created.\nIf the access certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            RegistrarConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addRegistrationCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addRegistrationCertificate(req: RegistrationCertificateRequest, dcql_query: any, requestId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:272\n                        \n                    \n\n\n            \n                \n                        Add a new registration certificate to the registrar.\nThis is only needed once, when the registration certificate is created.\nIf the registration certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RegistrationCertificateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dcql_query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addRp\n                        \n                    \n                \n            \n            \n                \naddRp(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:161\n                        \n                    \n\n\n            \n                \n                        Adds a new relying party to the registrar.\nThis is only needed once, when the relying party is created.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAccessCertificateId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAccessCertificateId(config: RegistrarConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:204\n                        \n                    \n\n\n            \n                \n                        Get the access certificate ID from the registrar.\nIf there is no access certificate ID in the config, it will add a new one.\nIf there is one, it will check if it is still valid.\nIf it is revoked, it will add a new one.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            RegistrarConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnabled\n                        \n                    \n                \n            \n            \n                \nisEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Checks if the registrar service is enabled based on the configuration.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the registrar service is enabled, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadConfig(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:329\n                        \n                    \n\n\n            \n                \n                        Load the registrar configuration from the config file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         RegistrarConfig\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:117\n                        \n                    \n\n\n            \n                \n                        This function is called when the application starts.\nIt will refresh the access token for the registrar.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Initializes the OAuth2 client and registrar client with the necessary configurations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_KEYS, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:129\n                        \n                    \n\n\n            \n                \n                        This function is called when a tenant is initialized.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshAccessToken()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:144\n                        \n                    \n\n\n            \n                \n                        Refreshes the access token for the registrar using client credentials.\nThis method is called periodically to ensure the access token is valid.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        saveConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveConfig(config: RegistrarConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:352\n                        \n                    \n\n\n            \n                \n                        Save the registrar configuration to the config file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            RegistrarConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        storeExistingRp\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeExistingRp(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:186\n                        \n                    \n\n\n            \n                \n                        Stores the existing relying party ID based on the name.\nThis is used when the relying party already exists in the registrar.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the relying party.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The ID of the existing relying party.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:61\n                        \n                    \n\n            \n                \n                    Access token for authenticating requests to the registrar.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:57\n                        \n                    \n\n            \n                \n                    Client for interacting with the registrar API.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauth2Client\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:53\n                        \n                    \n\n            \n                \n                    OAuth2 client for interacting with the OIDC provider.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { OAuth2Client } from '@badgateway/oauth2-client';\nimport { client } from './generated/client.gen';\nimport {\n    accessCertificateControllerFindOne,\n    accessCertificateControllerRegister,\n    registrationCertificateControllerAll,\n    registrationCertificateControllerRegister,\n    relyingPartyControllerFindAll,\n    relyingPartyControllerRegister,\n} from './generated';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { RegistrationCertificateRequest } from '../verifier/presentations/dto/vp-request.dto';\nimport { PresentationsService } from '../verifier/presentations/presentations.service';\nimport { existsSync, readFileSync, writeFileSync } from 'node:fs';\nimport { RegistrarConfig } from './registrar-config';\nimport { join } from 'node:path';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { TENANT_EVENTS } from '../auth/tenant-events';\n\n/**\n * Repsonse of access certificate request.\n */\ninterface AccessCertificateResponse {\n    /**\n     * Unique identifier of the access certificate.\n     */\n    id: string;\n    /**\n     * The public key in PEM format.\n     */\n    crt: string;\n    /**\n     * Indicates if the access certificate is revoked.\n     */\n    revoked?: boolean;\n}\n\n/**\n * RegistrarService is responsible for managing the interaction with the registrar,\n * including adding relying parties, access certificates, and registration certificates.\n */\n@Injectable()\nexport class RegistrarService implements OnApplicationBootstrap, OnModuleInit {\n    /**\n     * OAuth2 client for interacting with the OIDC provider.\n     */\n    private oauth2Client: OAuth2Client;\n    /**\n     * Client for interacting with the registrar API.\n     */\n    private client: typeof client;\n    /**\n     * Access token for authenticating requests to the registrar.\n     */\n    private accessToken: string;\n\n    /**\n     * Constructor for the RegistrarService.\n     * @param configService - Instance of ConfigService for accessing configuration values.\n     * @param cryptoService - Instance of CryptoService for cryptographic operations.\n     * @param presentationsService - Instance of PresentationsService for handling presentations.\n     */\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private presentationsService: PresentationsService,\n    ) {}\n\n    /**\n     * Initializes the OAuth2 client and registrar client with the necessary configurations.\n     */\n    onModuleInit() {\n        //when not set, we will not use the registrar\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const oidcIssuerUrl =\n            this.configService.getOrThrow('OIDC_ISSUER_URL');\n        const clientId =\n            this.configService.getOrThrow('OIDC_CLIENT_ID');\n        const clientSecret =\n            this.configService.getOrThrow('OIDC_CLIENT_SECRET');\n\n        this.oauth2Client = new OAuth2Client({\n            server: `${oidcIssuerUrl}/protocol/openid-connect/token`,\n            clientId,\n            clientSecret,\n            discoveryEndpoint: `${oidcIssuerUrl}/.well-known/openid-configuration`,\n        });\n\n        this.client = client;\n        this.client.setConfig({\n            baseUrl: this.configService.getOrThrow('REGISTRAR_URL'),\n            auth: () => this.accessToken,\n        });\n    }\n\n    /**\n     * Checks if the registrar service is enabled based on the configuration.\n     * @returns True if the registrar service is enabled, false otherwise.\n     */\n    isEnabled() {\n        return !!this.configService.get('REGISTRAR_URL');\n    }\n\n    /**\n     * This function is called when the application starts.\n     * It will refresh the access token for the registrar.\n     */\n    async onApplicationBootstrap() {\n        if (!this.configService.get('REGISTRAR_URL')) {\n            return;\n        }\n        await this.refreshAccessToken();\n    }\n\n    /**\n     * This function is called when a tenant is initialized.\n     * @param tenantId\n     */\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    async onTenantInit(tenantId: string) {\n        if (!this.isEnabled()) {\n            return;\n        }\n        const config = this.loadConfig(tenantId);\n        if (!config.id) {\n            config.id = await this.addRp(tenantId);\n        }\n        await this.getAccessCertificateId(config, tenantId);\n    }\n\n    /**\n     * Refreshes the access token for the registrar using client credentials.\n     * This method is called periodically to ensure the access token is valid.\n     */\n    async refreshAccessToken() {\n        await this.oauth2Client.clientCredentials().then((token) => {\n            this.accessToken = token.accessToken;\n            const date = new Date();\n            const expirationDate = new Date(token.expiresAt as number);\n            setTimeout(\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                () => this.refreshAccessToken(),\n                expirationDate.getTime() - date.getTime() - 1000,\n            );\n        });\n    }\n\n    /**\n     * Adds a new relying party to the registrar.\n     * This is only needed once, when the relying party is created.\n     */\n    addRp(tenantId: string): Promise {\n        const name = this.configService.getOrThrow('RP_NAME');\n        return relyingPartyControllerRegister({\n            client: this.client,\n            body: {\n                name,\n            },\n        }).then(async (response) => {\n            const config = this.loadConfig(tenantId);\n            if (response.error) {\n                config.id = await this.storeExistingRp(name);\n            } else {\n                config.id = response.data!['id'];\n            }\n            this.saveConfig(config, tenantId);\n            return response.data!['id'];\n        });\n    }\n\n    /**\n     * Stores the existing relying party ID based on the name.\n     * This is used when the relying party already exists in the registrar.\n     * @param name - The name of the relying party.\n     * @returns The ID of the existing relying party.\n     */\n    private storeExistingRp(name: string) {\n        return relyingPartyControllerFindAll({\n            client: this.client,\n            query: {\n                name,\n            },\n        }).then((response) => {\n            return response.data!.find((item) => item.name === name)?.id;\n        });\n    }\n\n    /**\n     * Get the access certificate ID from the registrar.\n     * If there is no access certificate ID in the config, it will add a new one.\n     * If there is one, it will check if it is still valid.\n     * If it is revoked, it will add a new one.\n     * @param config\n     */\n    async getAccessCertificateId(config: RegistrarConfig, tenantId: string) {\n        // if there is no access certificate ID in the config, we need to add it\n        if (!config.accessCertificateId) {\n            await this.addAccessCertificate(config, tenantId);\n        }\n        // if there is one, check if it is still valid\n        await accessCertificateControllerFindOne({\n            client: this.client,\n            path: { rp: config.id, id: config.accessCertificateId! },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error finding access certificate:', res.error);\n            }\n            const data = res.data as AccessCertificateResponse;\n            if (data.revoked) {\n                console.warn('Access certificate is revoked, adding a new one');\n                return this.addAccessCertificate(config, tenantId);\n            }\n        });\n    }\n\n    /**\n     * Add a new access certificate to the registrar.\n     * This is only needed once, when the access certificate is created.\n     * If the access certificate already exists, it will be returned.\n     * @returns\n     */\n    private async addAccessCertificate(\n        config: RegistrarConfig,\n        tenantId: string,\n    ): Promise {\n        const host = this.configService\n            .getOrThrow('PUBLIC_URL')\n            .replace('https://', '');\n        return accessCertificateControllerRegister({\n            client: this.client,\n            body: {\n                publicKey: await this.cryptoService.keyService.getPublicKey(\n                    'pem',\n                    tenantId,\n                ),\n                dns: [host],\n            },\n            path: {\n                rp: config.id,\n            },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error adding access certificate:', res.error);\n                throw new Error('Error adding access certificate');\n            }\n            //store the cert\n            this.cryptoService.storeAccessCertificate(\n                res.data!['crt'],\n                tenantId,\n            );\n            config.accessCertificateId = res.data!['id'];\n            this.saveConfig(config, tenantId);\n            return res.data!['id'];\n        });\n    }\n\n    /**\n     * Add a new registration certificate to the registrar.\n     * This is only needed once, when the registration certificate is created.\n     * If the registration certificate already exists, it will be returned.\n     * @returns\n     */\n    async addRegistrationCertificate(\n        req: RegistrationCertificateRequest,\n        //TODO: check if the dcql_query is covered by the registration certificate. If not, we need to throw an error since we do not know the new purpose for it.\n        dcql_query: any,\n        requestId: string,\n        tenantId: string,\n    ) {\n        const rp = this.loadConfig(tenantId).id;\n\n        //TODO: need to check if the access certificate is bound to the access certificate with the subject. Also that the requested fields are matching.\n\n        const certs =\n            (await registrationCertificateControllerAll({\n                client: this.client,\n                path: {\n                    rp,\n                },\n            }).then((res) =>\n                res.data?.filter(\n                    (cert) =>\n                        cert.revoked == null && cert.id === (req.id as string),\n                ),\n            )) || [];\n\n        if (certs?.length > 0) {\n            return certs[0].jwt;\n        }\n\n        return registrationCertificateControllerRegister({\n            client: this.client,\n            path: {\n                rp,\n            },\n            body: req.body,\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\n                    'Error adding registration certificate:',\n                    res.error,\n                );\n                throw new Error('Error adding registration certificate');\n            }\n\n            //TODO: write the ID to the config so its easier to use it. Easier than writing the comparison algorithm (any maybe someone wants to use a different one)\n            await this.presentationsService.storeRCID(\n                res.data!['id'],\n                requestId,\n                tenantId,\n            );\n            return res.data!['jwt'];\n        });\n    }\n\n    /**\n     * Load the registrar configuration from the config file.\n     * @returns\n     */\n    private loadConfig(tenantId: string): RegistrarConfig {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n\n        if (!existsSync(filePath)) {\n            // If the config file does not exist, create an empty config\n            const initialConfig: RegistrarConfig = {};\n            writeFileSync(filePath, JSON.stringify(initialConfig, null, 2));\n            return initialConfig;\n        }\n        const config = JSON.parse(\n            readFileSync(filePath, 'utf-8'),\n        ) as RegistrarConfig;\n        return config;\n    }\n\n    /**\n     * Save the registrar configuration to the config file.\n     * @param config\n     */\n    private saveConfig(config: RegistrarConfig, tenantId: string) {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n        writeFileSync(filePath, JSON.stringify(config, null, 2));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrationCertificateRequest.html":{"url":"classes/RegistrationCertificateRequest.html","title":"class - RegistrationCertificateRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrationCertificateRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/vp-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrationCertificateRequest DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                body\n                            \n                            \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistrationCertificateCreation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:17\n                        \n                    \n\n            \n                \n                    The body of the registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:12\n                        \n                    \n\n            \n                \n                    Identifier of the registration certificate that got issued.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { RegistrationCertificateCreation } from '../../../registrar/generated';\n\n/**\n * RegistrationCertificateRequest DTO\n */\nexport class RegistrationCertificateRequest {\n    /**\n     * Identifier of the registration certificate that got issued.\n     */\n    @IsString()\n    id?: string;\n    /**\n     * The body of the registration certificate request containing the necessary details.\n     */\n    @IsObject()\n    body: RegistrationCertificateCreation;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestOptions.html":{"url":"interfaces/RequestOptions.html","title":"interface - RequestOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Config\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            body\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            query\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            security\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Any body that you want to add to your request.\nhttps://developer.mozilla.org/docs/Web/API/fetch#body\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        security\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        security:         ReadonlyArray\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ReadonlyArray\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Security mechanism(s) to use for the request.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:     Url\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Url\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type { Auth } from '../core/auth';\nimport type { Client as CoreClient, Config as CoreConfig } from '../core/types';\nimport type { Middleware } from './utils';\n\nexport type ResponseStyle = 'data' | 'fields';\n\nexport interface Config\n    extends Omit,\n        CoreConfig {\n    /**\n     * Base URL for all requests made by this client.\n     */\n    baseUrl?: T['baseUrl'];\n    /**\n     * Fetch API implementation. You can use this option to provide a custom\n     * fetch instance.\n     *\n     * @default globalThis.fetch\n     */\n    fetch?: (request: Request) => ReturnType;\n    /**\n     * Please don't use the Fetch client for Next.js applications. The `next`\n     * options won't have any effect.\n     *\n     * Install {@link https://www.npmjs.com/package/@hey-api/client-next `@hey-api/client-next`} instead.\n     */\n    next?: never;\n    /**\n     * Return the response data parsed in a specified format. By default, `auto`\n     * will infer the appropriate method from the `Content-Type` response header.\n     * You can override this behavior with any of the {@link Body} methods.\n     * Select `stream` if you don't want to parse response data at all.\n     *\n     * @default 'auto'\n     */\n    parseAs?:\n        | 'arrayBuffer'\n        | 'auto'\n        | 'blob'\n        | 'formData'\n        | 'json'\n        | 'stream'\n        | 'text';\n    /**\n     * Should we return only data or multiple fields (data, error, response, etc.)?\n     *\n     * @default 'fields'\n     */\n    responseStyle?: ResponseStyle;\n    /**\n     * Throw an error instead of returning it in the response?\n     *\n     * @default false\n     */\n    throwOnError?: T['throwOnError'];\n}\n\nexport interface RequestOptions extends Config {\n    /**\n     * Any body that you want to add to your request.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#body}\n     */\n    body?: unknown;\n    path?: Record;\n    query?: Record;\n    /**\n     * Security mechanism(s) to use for the request.\n     */\n    security?: ReadonlyArray;\n    url: Url;\n}\n\nexport type RequestResult = ThrowOnError extends true\n    ? Promise\n                  ? TData[keyof TData]\n                  : TData\n              : {\n                    data: TData extends Record\n                        ? TData[keyof TData]\n                        : TData;\n                    request: Request;\n                    response: Response;\n                }\n      >\n    : Promise\n                          ? TData[keyof TData]\n                          : TData)\n                    | undefined\n              : (\n                    | {\n                          data: TData extends Record\n                              ? TData[keyof TData]\n                              : TData;\n                          error: undefined;\n                      }\n                    | {\n                          data: undefined;\n                          error: TError extends Record\n                              ? TError[keyof TError]\n                              : TError;\n                      }\n                ) & {\n                    request: Request;\n                    response: Response;\n                }\n      >;\n\nexport interface ClientOptions {\n    baseUrl?: string;\n    responseStyle?: ResponseStyle;\n    throwOnError?: boolean;\n}\n\ntype MethodFn = (\n    options: Omit, 'method'>,\n) => RequestResult;\n\ntype RequestFn = (\n    options: Omit, 'method'> &\n        Pick>, 'method'>,\n) => RequestResult;\n\ntype BuildUrlFn = ;\n        query?: Record;\n        url: string;\n    },\n>(\n    options: Pick & Options,\n) => string;\n\nexport type Client = CoreClient & {\n    interceptors: Middleware;\n};\n\n/**\n * The `createClientConfig()` function will be called on client initialization\n * and the returned object will become the client's initial configuration.\n *\n * You may want to initialize your client this way instead of calling\n * `setConfig()`. This is useful for example if you're using Next.js\n * to ensure your client always has the correct values.\n */\nexport type CreateClientConfig = (\n    override?: Config,\n) => Config & T>;\n\nexport interface TDataShape {\n    body?: unknown;\n    headers?: unknown;\n    path?: unknown;\n    query?: unknown;\n    url: string;\n}\n\ntype OmitKeys = Pick>;\n\nexport type Options = OmitKeys,\n    'body' | 'path' | 'query' | 'url'\n> &\n    Omit;\n\nexport type OptionsLegacyParser = TData extends { body?: any }\n    ? TData extends { headers?: any }\n        ? OmitKeys,\n              'body' | 'headers' | 'url'\n          > &\n              TData\n        : OmitKeys,\n              'body' | 'url'\n          > &\n              TData &\n              Pick, 'headers'>\n    : TData extends { headers?: any }\n      ? OmitKeys,\n            'headers' | 'url'\n        > &\n            TData &\n            Pick, 'body'>\n      : OmitKeys, 'url'> & TData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResolverModule.html":{"url":"modules/ResolverModule.html","title":"module - ResolverModule","body":"\n                   \n\n\n\n\n    Modules\n    ResolverModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\n\nResolverService \n\nResolverService \n\n\n\nResolverModule\n\nResolverModule\n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/resolver/resolver.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ResolverService } from './resolver.service';\nimport { HttpModule } from '@nestjs/axios';\n\n@Module({\n    imports: [HttpModule],\n    providers: [ResolverService],\n    exports: [ResolverService],\n})\nexport class ResolverModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResolverService.html":{"url":"injectables/ResolverService.html","title":"injectable - ResolverService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResolverService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/resolver.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for resolving public keys from JWT payloads and headers.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                resolvePublicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/resolver/resolver.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resolvePublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolvePublicKey(payload: JWTPayload, header: JWK)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/resolver/resolver.service.ts:21\n                        \n                    \n\n\n            \n                \n                        Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWK\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { JWK, JWTPayload } from 'jose';\nimport { HttpService } from '@nestjs/axios';\nimport { firstValueFrom } from 'rxjs';\nimport { X509Certificate } from 'node:crypto';\nimport { IssuerMetadata } from './dto/issuer-metadata.dto';\n\n/**\n * Service for resolving public keys from JWT payloads and headers.\n */\n@Injectable()\nexport class ResolverService {\n    constructor(private httpService: HttpService) {}\n\n    /**\n     * Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n     * @param payload\n     * @param header\n     * @returns\n     */\n    async resolvePublicKey(payload: JWTPayload, header: JWK): Promise {\n        if (!payload.iss) {\n            throw new Error('Issuer not found');\n        }\n\n        if (header.x5c) {\n            //TODO: validate the certificate and the chain of trust!\n            const certs = header.x5c.map(\n                (cert) => new X509Certificate(Buffer.from(cert, 'base64')),\n            );\n            const cert = certs[0];\n            if (!cert.subjectAltName?.includes(payload.iss.split('://')[1])) {\n                throw new Error('Subject and issuer do not match');\n            }\n            return cert.publicKey.export({ format: 'jwk' }) as JWK;\n        }\n        //checl if the key is in the header as jwk\n        if (header['jwk']) {\n            return header['jwk'] as JWK;\n        }\n\n        const response = await firstValueFrom(\n            this.httpService.get(\n                `${payload.iss}/.well-known/jwt-vc-issuer`,\n            ),\n        ).then(\n            (r) => r.data,\n            () => {\n                throw new ConflictException('Issuer not reachable');\n            },\n        );\n        const key = response.jwks.keys.find((key) => key.kid === header.kid);\n        if (!key) {\n            throw new Error('Key not found');\n        }\n        return key;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SchemaResponse.html":{"url":"classes/SchemaResponse.html","title":"class - SchemaResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SchemaResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/schema-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                $schema\n                            \n                            \n                                properties\n                            \n                            \n                                required\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        $schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'https://json-schema.org/draft/2020-12/schema'\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'object'\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class SchemaResponse {\n    '$schema' = 'https://json-schema.org/draft/2020-12/schema';\n    type = 'object';\n    properties: Record;\n    required: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializeOptions.html":{"url":"interfaces/SerializeOptions.html","title":"interface - SerializeOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializeOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/pathSerializer.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            SerializePrimitiveOptions\n                            SerializerOptions\n            \n\n\n\n\n    \n\n\n    \n        interface SerializeOptions\n    extends SerializePrimitiveOptions,\n        SerializerOptions {}\n\ninterface SerializePrimitiveOptions {\n    allowReserved?: boolean;\n    name: string;\n}\n\nexport interface SerializerOptions {\n    /**\n     * @default true\n     */\n    explode: boolean;\n    style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n    value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'form':\n            return ',';\n        case 'pipeDelimited':\n            return '|';\n        case 'spaceDelimited':\n            return '%20';\n        default:\n            return ',';\n    }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const serializeArrayParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n}: SerializeOptions & {\n    value: unknown[];\n}) => {\n    if (!explode) {\n        const joinedValues = (\n            allowReserved\n                ? value\n                : value.map((v) => encodeURIComponent(v as string))\n        ).join(separatorArrayNoExplode(style));\n        switch (style) {\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            case 'simple':\n                return joinedValues;\n            default:\n                return `${name}=${joinedValues}`;\n        }\n    }\n\n    const separator = separatorArrayExplode(style);\n    const joinedValues = value\n        .map((v) => {\n            if (style === 'label' || style === 'simple') {\n                return allowReserved ? v : encodeURIComponent(v as string);\n            }\n\n            return serializePrimitiveParam({\n                allowReserved,\n                name,\n                value: v as string,\n            });\n        })\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n    allowReserved,\n    name,\n    value,\n}: SerializePrimitiveParam) => {\n    if (value === undefined || value === null) {\n        return '';\n    }\n\n    if (typeof value === 'object') {\n        throw new Error(\n            'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n        );\n    }\n\n    return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n    valueOnly,\n}: SerializeOptions & {\n    value: Record | Date;\n    valueOnly?: boolean;\n}) => {\n    if (value instanceof Date) {\n        return valueOnly\n            ? value.toISOString()\n            : `${name}=${value.toISOString()}`;\n    }\n\n    if (style !== 'deepObject' && !explode) {\n        let values: string[] = [];\n        Object.entries(value).forEach(([key, v]) => {\n            values = [\n                ...values,\n                key,\n                allowReserved ? (v as string) : encodeURIComponent(v as string),\n            ];\n        });\n        const joinedValues = values.join(',');\n        switch (style) {\n            case 'form':\n                return `${name}=${joinedValues}`;\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            default:\n                return joinedValues;\n        }\n    }\n\n    const separator = separatorObjectExplode(style);\n    const joinedValues = Object.entries(value)\n        .map(([key, v]) =>\n            serializePrimitiveParam({\n                allowReserved,\n                name: style === 'deepObject' ? `${name}[${key}]` : key,\n                value: v as string,\n            }),\n        )\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializePrimitiveOptions.html":{"url":"interfaces/SerializePrimitiveOptions.html","title":"interface - SerializePrimitiveOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializePrimitiveOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/pathSerializer.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowReserved\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowReserved\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowReserved:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface SerializeOptions\n    extends SerializePrimitiveOptions,\n        SerializerOptions {}\n\ninterface SerializePrimitiveOptions {\n    allowReserved?: boolean;\n    name: string;\n}\n\nexport interface SerializerOptions {\n    /**\n     * @default true\n     */\n    explode: boolean;\n    style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n    value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'form':\n            return ',';\n        case 'pipeDelimited':\n            return '|';\n        case 'spaceDelimited':\n            return '%20';\n        default:\n            return ',';\n    }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const serializeArrayParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n}: SerializeOptions & {\n    value: unknown[];\n}) => {\n    if (!explode) {\n        const joinedValues = (\n            allowReserved\n                ? value\n                : value.map((v) => encodeURIComponent(v as string))\n        ).join(separatorArrayNoExplode(style));\n        switch (style) {\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            case 'simple':\n                return joinedValues;\n            default:\n                return `${name}=${joinedValues}`;\n        }\n    }\n\n    const separator = separatorArrayExplode(style);\n    const joinedValues = value\n        .map((v) => {\n            if (style === 'label' || style === 'simple') {\n                return allowReserved ? v : encodeURIComponent(v as string);\n            }\n\n            return serializePrimitiveParam({\n                allowReserved,\n                name,\n                value: v as string,\n            });\n        })\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n    allowReserved,\n    name,\n    value,\n}: SerializePrimitiveParam) => {\n    if (value === undefined || value === null) {\n        return '';\n    }\n\n    if (typeof value === 'object') {\n        throw new Error(\n            'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n        );\n    }\n\n    return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n    valueOnly,\n}: SerializeOptions & {\n    value: Record | Date;\n    valueOnly?: boolean;\n}) => {\n    if (value instanceof Date) {\n        return valueOnly\n            ? value.toISOString()\n            : `${name}=${value.toISOString()}`;\n    }\n\n    if (style !== 'deepObject' && !explode) {\n        let values: string[] = [];\n        Object.entries(value).forEach(([key, v]) => {\n            values = [\n                ...values,\n                key,\n                allowReserved ? (v as string) : encodeURIComponent(v as string),\n            ];\n        });\n        const joinedValues = values.join(',');\n        switch (style) {\n            case 'form':\n                return `${name}=${joinedValues}`;\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            default:\n                return joinedValues;\n        }\n    }\n\n    const separator = separatorObjectExplode(style);\n    const joinedValues = Object.entries(value)\n        .map(([key, v]) =>\n            serializePrimitiveParam({\n                allowReserved,\n                name: style === 'deepObject' ? `${name}[${key}]` : key,\n                value: v as string,\n            }),\n        )\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializePrimitiveParam.html":{"url":"interfaces/SerializePrimitiveParam.html","title":"interface - SerializePrimitiveParam","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializePrimitiveParam\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/pathSerializer.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            SerializePrimitiveOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface SerializeOptions\n    extends SerializePrimitiveOptions,\n        SerializerOptions {}\n\ninterface SerializePrimitiveOptions {\n    allowReserved?: boolean;\n    name: string;\n}\n\nexport interface SerializerOptions {\n    /**\n     * @default true\n     */\n    explode: boolean;\n    style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n    value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'form':\n            return ',';\n        case 'pipeDelimited':\n            return '|';\n        case 'spaceDelimited':\n            return '%20';\n        default:\n            return ',';\n    }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const serializeArrayParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n}: SerializeOptions & {\n    value: unknown[];\n}) => {\n    if (!explode) {\n        const joinedValues = (\n            allowReserved\n                ? value\n                : value.map((v) => encodeURIComponent(v as string))\n        ).join(separatorArrayNoExplode(style));\n        switch (style) {\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            case 'simple':\n                return joinedValues;\n            default:\n                return `${name}=${joinedValues}`;\n        }\n    }\n\n    const separator = separatorArrayExplode(style);\n    const joinedValues = value\n        .map((v) => {\n            if (style === 'label' || style === 'simple') {\n                return allowReserved ? v : encodeURIComponent(v as string);\n            }\n\n            return serializePrimitiveParam({\n                allowReserved,\n                name,\n                value: v as string,\n            });\n        })\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n    allowReserved,\n    name,\n    value,\n}: SerializePrimitiveParam) => {\n    if (value === undefined || value === null) {\n        return '';\n    }\n\n    if (typeof value === 'object') {\n        throw new Error(\n            'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n        );\n    }\n\n    return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n    valueOnly,\n}: SerializeOptions & {\n    value: Record | Date;\n    valueOnly?: boolean;\n}) => {\n    if (value instanceof Date) {\n        return valueOnly\n            ? value.toISOString()\n            : `${name}=${value.toISOString()}`;\n    }\n\n    if (style !== 'deepObject' && !explode) {\n        let values: string[] = [];\n        Object.entries(value).forEach(([key, v]) => {\n            values = [\n                ...values,\n                key,\n                allowReserved ? (v as string) : encodeURIComponent(v as string),\n            ];\n        });\n        const joinedValues = values.join(',');\n        switch (style) {\n            case 'form':\n                return `${name}=${joinedValues}`;\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            default:\n                return joinedValues;\n        }\n    }\n\n    const separator = separatorObjectExplode(style);\n    const joinedValues = Object.entries(value)\n        .map(([key, v]) =>\n            serializePrimitiveParam({\n                allowReserved,\n                name: style === 'deepObject' ? `${name}[${key}]` : key,\n                value: v as string,\n            }),\n        )\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializerOptions.html":{"url":"interfaces/SerializerOptions.html","title":"interface - SerializerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/pathSerializer.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            explode\n                                        \n                                \n                                \n                                        \n                                            style\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        explode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        explode:         boolean\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : true\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        style\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        style:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface SerializeOptions\n    extends SerializePrimitiveOptions,\n        SerializerOptions {}\n\ninterface SerializePrimitiveOptions {\n    allowReserved?: boolean;\n    name: string;\n}\n\nexport interface SerializerOptions {\n    /**\n     * @default true\n     */\n    explode: boolean;\n    style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n    value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'form':\n            return ',';\n        case 'pipeDelimited':\n            return '|';\n        case 'spaceDelimited':\n            return '%20';\n        default:\n            return ',';\n    }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const serializeArrayParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n}: SerializeOptions & {\n    value: unknown[];\n}) => {\n    if (!explode) {\n        const joinedValues = (\n            allowReserved\n                ? value\n                : value.map((v) => encodeURIComponent(v as string))\n        ).join(separatorArrayNoExplode(style));\n        switch (style) {\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            case 'simple':\n                return joinedValues;\n            default:\n                return `${name}=${joinedValues}`;\n        }\n    }\n\n    const separator = separatorArrayExplode(style);\n    const joinedValues = value\n        .map((v) => {\n            if (style === 'label' || style === 'simple') {\n                return allowReserved ? v : encodeURIComponent(v as string);\n            }\n\n            return serializePrimitiveParam({\n                allowReserved,\n                name,\n                value: v as string,\n            });\n        })\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n    allowReserved,\n    name,\n    value,\n}: SerializePrimitiveParam) => {\n    if (value === undefined || value === null) {\n        return '';\n    }\n\n    if (typeof value === 'object') {\n        throw new Error(\n            'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n        );\n    }\n\n    return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n    valueOnly,\n}: SerializeOptions & {\n    value: Record | Date;\n    valueOnly?: boolean;\n}) => {\n    if (value instanceof Date) {\n        return valueOnly\n            ? value.toISOString()\n            : `${name}=${value.toISOString()}`;\n    }\n\n    if (style !== 'deepObject' && !explode) {\n        let values: string[] = [];\n        Object.entries(value).forEach(([key, v]) => {\n            values = [\n                ...values,\n                key,\n                allowReserved ? (v as string) : encodeURIComponent(v as string),\n            ];\n        });\n        const joinedValues = values.join(',');\n        switch (style) {\n            case 'form':\n                return `${name}=${joinedValues}`;\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            default:\n                return joinedValues;\n        }\n    }\n\n    const separator = separatorObjectExplode(style);\n    const joinedValues = Object.entries(value)\n        .map(([key, v]) =>\n            serializePrimitiveParam({\n                allowReserved,\n                name: style === 'deepObject' ? `${name}[${key}]` : key,\n                value: v as string,\n            }),\n        )\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Session.html":{"url":"entities/Session.html","title":"entity - Session","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/entities/session.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a user session in the application.\nIt includes various properties such as credentials, authorization code,\nrequest URI, authorization queries, and more.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                auth_queries\n                            \n                            \n                                    \n                                    Optional\n                                authorization_code\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                credentialPayload\n                            \n                            \n                                    \n                                    Optional\n                                credentials\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                issuanceId\n                            \n                            \n                                    \n                                notifications\n                            \n                            \n                                    \n                                    Optional\n                                offer\n                            \n                            \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    Optional\n                                vp_nonce\n                            \n                            \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        auth_queries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthorizeQueries\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:59\n                        \n                    \n\n            \n                \n                    Authorization queries associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        authorization_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:49\n                        \n                    \n\n            \n                \n                    Authorization code for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:69\n                        \n                    \n\n            \n                \n                    Credential offer object containing details about the credential offer or presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentialPayload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OfferRequestDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:79\n                        \n                    \n\n            \n                \n                    Credential payload containing the offer request details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :     VerificationResult[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:44\n                        \n                    \n\n            \n                \n                    Verified credentials from the verification process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:36\n                        \n                    \n\n            \n                \n                    Unique identifier for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Notification[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:89\n                        \n                    \n\n            \n                \n                    Notifications associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        offer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialOfferObject\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:74\n                        \n                    \n\n            \n                \n                    Credential offer object containing details about the credential offer or presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:54\n                        \n                    \n\n            \n                \n                    Request URI from the authorization request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:94\n                        \n                    \n\n            \n                \n                    Tenant ID for multi-tenancy support.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        vp_nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:64\n                        \n                    \n\n            \n                \n                    Noncce from the Verifiable Presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:84\n                        \n                    \n\n            \n                \n                    Webhook configuration to send result and may receive further information.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n    CredentialOfferObject,\n    NotificationEvent,\n} from '@openid4vc/openid4vci';\nimport { VerificationResult } from '@sd-jwt/sd-jwt-vc';\nimport { AuthorizeQueries } from '../../issuer/authorize/dto/authorize-request.dto';\nimport { OfferRequestDto } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport { Column, Entity, PrimaryColumn } from 'typeorm';\nimport { WebhookConfig } from '../../utils/webhook.dto';\n\n/**\n * Represents a session entity for managing user sessions in the application.\n */\ntype Notification = {\n    /**\n     * Unique identifier for the notification.\n     */\n    id: string;\n    /**\n     * The type of notification.\n     */\n    event?: NotificationEvent;\n};\n\n/**\n * Entity representing a user session in the application.\n * It includes various properties such as credentials, authorization code,\n * request URI, authorization queries, and more.\n */\n@Entity()\nexport class Session {\n    /**\n     * Unique identifier for the session.\n     */\n    @PrimaryColumn('uuid')\n    id: string;\n\n    @Column('varchar', { nullable: true })\n    issuanceId?: string;\n    /**\n     * Verified credentials from the verification process.\n     */\n    @Column('json', { nullable: true })\n    credentials?: VerificationResult[];\n    /**\n     * Authorization code for the session.\n     */\n    @Column('varchar', { nullable: true })\n    authorization_code?: string;\n    /**\n     * Request URI from the authorization request.\n     */\n    @Column('varchar', { nullable: true })\n    request_uri?: string;\n    /**\n     * Authorization queries associated with the session.\n     */\n    @Column('json', { nullable: true })\n    auth_queries?: AuthorizeQueries;\n    /**\n     * Noncce from the Verifiable Presentation request.\n     */\n    @Column('varchar', { nullable: true })\n    vp_nonce?: string;\n    /**\n     * Credential offer object containing details about the credential offer or presentation request.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt: Date;\n    /**\n     * Credential offer object containing details about the credential offer or presentation request.\n     */\n    @Column('json', { nullable: true })\n    offer?: CredentialOfferObject;\n    /**\n     * Credential payload containing the offer request details.\n     */\n    @Column('json', { nullable: true })\n    credentialPayload?: OfferRequestDto;\n    /**\n     * Webhook configuration to send result and may receive further information.\n     */\n    @Column('json', { nullable: true })\n    webhook?: WebhookConfig;\n    /**\n     * Notifications associated with the session.\n     */\n    @Column('json', { default: JSON.stringify([]) })\n    notifications: Notification[];\n    /**\n     * Tenant ID for multi-tenancy support.\n     */\n    @Column('varchar')\n    tenantId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionController.html":{"url":"controllers/SessionController.html","title":"controller - SessionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                session\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getAllSessions\n                            \n                            \n                                    \n                                getSession\n                            \n                            \n                                    \n                                revokeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getAllSessions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllSessions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:23\n                        \n                    \n\n\n            \n                \n                        Retrieves all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSession(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        Retrieves the session information for a given session ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the session.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        revokeAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    revokeAll(value: StatusUpdateDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('revoke')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:42\n                        \n                    \n\n\n            \n                \n                        Update the status of the credentials of a specific session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Post, UseGuards, Body } from '@nestjs/common';\nimport { ApiSecurity, ApiTags } from '@nestjs/swagger';\nimport { SessionService } from './session.service';\nimport { Session } from './entities/session.entity';\nimport { JwtAuthGuard } from '../auth/auth.guard';\nimport { Token, TokenPayload } from '../auth/token.decorator';\nimport { StatusUpdateDto } from '../issuer/status-list/dto/status-update.dto';\nimport { StatusListService } from '../issuer/status-list/status-list.service';\n\n@ApiTags('Session management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('session')\nexport class SessionController {\n    constructor(\n        private readonly sessionService: SessionService,\n        private readonly statusListService: StatusListService,\n    ) {}\n\n    /**\n     * Retrieves all sessions.\n     */ @Get()\n    getAllSessions(): Promise {\n        return this.sessionService.getAll();\n    }\n\n    /**\n     * Retrieves the session information for a given session ID.\n     * @param id - The identifier of the session.\n     */\n    @Get(':id')\n    getSession(@Param('id') id: string): Promise {\n        return this.sessionService.get(id);\n    }\n\n    /**\n     * Update the status of the credentials of a specific session.\n     * @param value\n     * @returns\n     */\n    @Post('revoke')\n    revokeAll(@Body() value: StatusUpdateDto, @Token() user: TokenPayload) {\n        return this.statusListService.updateStatus(value, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SessionLogContext.html":{"url":"interfaces/SessionLogContext.html","title":"interface - SessionLogContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SessionLogContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/session-logger-context.ts\n        \n\n\n            \n                Description\n            \n            \n                Context for session logging, including session ID, tenant ID, flow type, and optional stage.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            flowType\n                                        \n                                \n                                \n                                        \n                                            sessionId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stage\n                                        \n                                \n                                \n                                        \n                                            tenantId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/session-logger-context.ts:21\n                            \n                        \n                \n                    \n                        Additional context information for the session.\n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        flowType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flowType:     \"OID4VCI\" | \"OID4VP\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"OID4VCI\" | \"OID4VP\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Type of flow being logged (e.g., OID4VCI, OID4VP).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sessionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sessionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier for the session.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional stage of the flow, useful for tracking progress.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenantId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tenantId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier for the tenant associated with the session.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SessionLogContext {\n    /**\n     * Unique identifier for the session.\n     */\n    sessionId: string;\n    /**\n     * Identifier for the tenant associated with the session.\n     */\n    tenantId: string;\n    /**\n     * Type of flow being logged (e.g., OID4VCI, OID4VP).\n     */\n    flowType: 'OID4VCI' | 'OID4VP';\n    /**\n     * Optional stage of the flow, useful for tracking progress.\n     */\n    stage?: string;\n    /**\n     * Additional context information for the session.\n     */\n    [key: string]: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerInterceptor.html":{"url":"injectables/SessionLoggerInterceptor.html","title":"injectable - SessionLoggerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/session-logger.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for logging session-related requests and responses.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                sanitizeBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, logger: PinoLogger, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/session-logger.interceptor.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerInterceptor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nReflector instance for accessing metadata.\n\n\n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfigService for accessing configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.interceptor.ts:44\n                        \n                    \n\n\n            \n                \n                        Intercepts the request and logs session-related information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExecution context of the request.\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCall handler to proceed with the request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that emits the response data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeBody(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.interceptor.ts:141\n                        \n                    \n\n\n            \n                \n                        Sanitizes the request body to remove sensitive information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request body to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Sanitized body.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/session-logger.interceptor.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ConfigService } from '@nestjs/config';\nimport { Observable } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { PinoLogger } from 'nestjs-pino';\nimport { SESSION_LOGGER_KEY } from './session-logger.decorator';\n\n/**\n * Interceptor for logging session-related requests and responses.\n */\n@Injectable()\nexport class SessionLoggerInterceptor implements NestInterceptor {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerInterceptor.\n     * @param reflector - Reflector instance for accessing metadata.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing configuration.\n     */\n    constructor(\n        private readonly reflector: Reflector,\n        private readonly logger: PinoLogger,\n        private readonly configService: ConfigService,\n    ) {\n        this.isEnabled = !this.configService.get(\n            'LOG_DISABLE_SESSION_LOGGER',\n            false,\n        );\n    }\n\n    /**\n     * Intercepts the request and logs session-related information.\n     * @param context - Execution context of the request.\n     * @param next - Call handler to proceed with the request.\n     * @returns An observable that emits the response data.\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        const metadata = this.reflector.get(\n            SESSION_LOGGER_KEY,\n            context.getHandler(),\n        );\n\n        if (!metadata || !this.isEnabled) {\n            return next.handle();\n        }\n\n        const { sessionIdParam, flowType } = metadata;\n        const request = context.switchToHttp().getRequest();\n        const response = context.switchToHttp().getResponse();\n\n        // Extract session ID from various sources\n        const sessionId =\n            request.params?.[sessionIdParam] ||\n            request.body?.[sessionIdParam] ||\n            request.headers['x-session-id'] ||\n            request.query?.[sessionIdParam];\n\n        const tenantId = request.params?.tenantId;\n        const method = request.method;\n        const url = request.url;\n\n        // Set context for this logger instance\n        this.logger.setContext('SessionLogger');\n\n        // Create log context\n        const logContext = {\n            sessionId,\n            tenantId,\n            flowType,\n            endpoint: `${method} ${url}`,\n        };\n\n        // Log the start of the request\n        this.logger.info(\n            {\n                ...logContext,\n                event: 'request_start',\n                method,\n                url,\n                headers: {\n                    'user-agent': request.headers['user-agent'],\n                    'content-type': request.headers['content-type'],\n                },\n                body: this.sanitizeBody(request.body),\n            },\n            `[${flowType}] Starting ${method} ${url} for session ${sessionId}`,\n        );\n\n        const startTime = Date.now();\n\n        return next.handle().pipe(\n            tap((data) => {\n                const duration = Date.now() - startTime;\n                this.logger.info(\n                    {\n                        ...logContext,\n                        event: 'request_success',\n                        method,\n                        url,\n                        statusCode: response.statusCode,\n                        duration,\n                        responseSize: JSON.stringify(data || {}).length,\n                    },\n                    `[${flowType}] Completed ${method} ${url} for session ${sessionId} in ${duration}ms`,\n                );\n            }),\n            catchError((error) => {\n                const duration = Date.now() - startTime;\n                this.logger.error(\n                    {\n                        ...logContext,\n                        event: 'request_error',\n                        method,\n                        url,\n                        error: {\n                            name: error.name,\n                            message: error.message,\n                            stack: error.stack,\n                        },\n                        duration,\n                    },\n                    `[${flowType}] Error in ${method} ${url} for session ${sessionId}: ${error.message}`,\n                );\n                throw error;\n            }),\n        );\n    }\n\n    /**\n     * Sanitizes the request body to remove sensitive information.\n     * @param body - The request body to sanitize.\n     * @returns Sanitized body.\n     */\n    private sanitizeBody(body: any): any {\n        if (!body) return body;\n\n        // Create a copy to avoid modifying the original\n        const sanitized = { ...body };\n\n        // Remove sensitive fields\n        const sensitiveFields = [\n            'password',\n            'token',\n            'secret',\n            'key',\n            'private_key',\n            'access_token',\n            'refresh_token',\n        ];\n\n        sensitiveFields.forEach((field) => {\n            if (sanitized[field]) {\n                sanitized[field] = '[REDACTED]';\n            }\n        });\n\n        return sanitized;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerService.html":{"url":"injectables/SessionLoggerService.html","title":"injectable - SessionLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/session-logger.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for logging session-related events and errors.\nUses PinoLogger for structured logging.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logAuthorizationRequest\n                            \n                            \n                                logCredentialIssuance\n                            \n                            \n                                logCredentialVerification\n                            \n                            \n                                logFlowComplete\n                            \n                            \n                                logFlowError\n                            \n                            \n                                logFlowStart\n                            \n                            \n                                logNotification\n                            \n                            \n                                logSession\n                            \n                            \n                                logSessionError\n                            \n                            \n                                logTokenExchange\n                            \n                            \n                                    Private\n                                shouldLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/session-logger.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfigService for accessing environment configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \nlogAuthorizationRequest(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:146\n                        \n                    \n\n\n            \n                \n                        Log authorization request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialIssuance\n                        \n                    \n                \n            \n            \n                \nlogCredentialIssuance(context: SessionLogContext, credentialType: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Log credential issuance step\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialVerification\n                        \n                    \n                \n            \n            \n                \nlogCredentialVerification(context: SessionLogContext, verificationResult: boolean, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Log credential presentation verification\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                verificationResult\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowComplete\n                        \n                    \n                \n            \n            \n                \nlogFlowComplete(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Log session flow completion\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowError\n                        \n                    \n                \n            \n            \n                \nlogFlowError(context: SessionLogContext, error: Error, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Log session flow error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowStart\n                        \n                    \n                \n            \n            \n                \nlogFlowStart(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Log session flow start\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logNotification\n                        \n                    \n                \n            \n            \n                \nlogNotification(context: SessionLogContext, notificationEvent: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Log notification events\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notificationEvent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSession\n                        \n                    \n                \n            \n            \n                \nlogSession(context: SessionLogContext, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:202\n                        \n                    \n\n\n            \n                \n                        Generic session log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSessionError\n                        \n                    \n                \n            \n            \n                \nlogSessionError(context: SessionLogContext, error: Error, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:221\n                        \n                    \n\n\n            \n                \n                        Generic session error log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logTokenExchange\n                        \n                    \n                \n            \n            \n                \nlogTokenExchange(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Log token exchange\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldLog\n                        \n                    \n                \n            \n            \n                \n                        \n                    shouldLog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/session-logger.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PinoLogger } from 'nestjs-pino';\nimport { ConfigService } from '@nestjs/config';\nimport { SessionLogContext } from './session-logger-context';\n\n/**\n * Service for logging session-related events and errors.\n * Uses PinoLogger for structured logging.\n */\n@Injectable()\nexport class SessionLoggerService {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerService.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing environment configuration.\n     */\n    constructor(\n        private readonly logger: PinoLogger,\n        private readonly configService: ConfigService,\n    ) {\n        this.logger.setContext('SessionLoggerService');\n        this.isEnabled = !this.configService.get(\n            'LOG_DISABLE_SESSION_LOGGER',\n            false,\n        );\n    }\n\n    private shouldLog(): boolean {\n        return this.isEnabled;\n    }\n\n    /**\n     * Log session flow start\n     */\n    logFlowStart(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow started for session ${context.sessionId} in tenant ${context.tenantId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'flow_start',\n                stage: 'initialization',\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow completion\n     */\n    logFlowComplete(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow completed for session ${context.sessionId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'flow_complete',\n                stage: 'completion',\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow error\n     */\n    logFlowError(\n        context: SessionLogContext,\n        error: Error,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow error for session ${context.sessionId}: ${error.message}`;\n\n        this.logger.error(\n            {\n                ...context,\n                event: 'flow_error',\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log credential issuance step\n     */\n    logCredentialIssuance(\n        context: SessionLogContext,\n        credentialType: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'credential_issuance',\n                stage: 'credential_creation',\n                credentialType,\n                ...additionalData,\n            },\n            `[${context.flowType}] Issuing credential of type ${credentialType} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log credential presentation verification\n     */\n    logCredentialVerification(\n        context: SessionLogContext,\n        verificationResult: boolean,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'credential_verification',\n                stage: 'verification',\n                verificationResult,\n                ...additionalData,\n            },\n            `[${context.flowType}] Credential verification ${verificationResult ? 'succeeded' : 'failed'} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log authorization request\n     */\n    logAuthorizationRequest(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'authorization_request',\n                stage: 'authorization',\n                ...additionalData,\n            },\n            `[${context.flowType}] Authorization request created for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log token exchange\n     */\n    logTokenExchange(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'token_exchange',\n                stage: 'token_exchange',\n                ...additionalData,\n            },\n            `[${context.flowType}] Token exchange for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log notification events\n     */\n    logNotification(\n        context: SessionLogContext,\n        notificationEvent: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'notification',\n                stage: 'notification',\n                notificationEvent,\n                ...additionalData,\n            },\n            `[${context.flowType}] Notification ${notificationEvent} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Generic session log method\n     */\n    logSession(\n        context: SessionLogContext,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}`,\n        );\n    }\n\n    /**\n     * Generic session error log method\n     */\n    logSessionError(\n        context: SessionLogContext,\n        error: Error,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.error(\n            {\n                ...context,\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}: ${error.message}`,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionModule.html":{"url":"modules/SessionModule.html","title":"module - SessionModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_SessionModule_imports\n\n\n\n\nStatusListModule\n\nStatusListModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/session/session.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            SessionModule is responsible for managing user sessions.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SessionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SessionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SessionService } from './session.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Session } from './entities/session.entity';\nimport { SessionController } from './session.controller';\nimport * as Joi from 'joi';\nimport { StatusListModule } from '../issuer/status-list/status-list.module';\n\n/**\n * Module for managing user sessions.\n */\nexport const SESSION_VALIDATION_SCHEMA = {\n    SESSION_TIDY_UP_INTERVAL: Joi.number().default(60 * 60), // default to every hour\n    SESSION_TTL: Joi.number().default(24 * 60 * 60), // default to 24 hours\n};\n\n/**\n * SessionModule is responsible for managing user sessions.\n */\n@Module({\n    imports: [TypeOrmModule.forFeature([Session]), StatusListModule],\n    providers: [SessionService],\n    exports: [SessionService],\n    controllers: [SessionController],\n})\nexport class SessionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                create\n                            \n                            \n                                get\n                            \n                            \n                                getAll\n                            \n                            \n                                getBy\n                            \n                            \n                                onApplicationBootstrap\n                            \n                            \n                                tidyUpSessions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionRepository: Repository, configService: ConfigService, schedulerRegistry: SchedulerRegistry)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schedulerRegistry\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(issuer_state: string, tenantId: string, values: QueryDeepPartialEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Update an existing session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            QueryDeepPartialEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(session: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Create a new session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Get a session by its state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Get all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBy\n                        \n                    \n                \n            \n            \n                \ngetBy(where: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:83\n                        \n                    \n\n\n            \n                \n                        Get a session by a specific condition.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                            FindOptionsWhere\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \nonApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Register the tidy up cron job on application bootstrap.\nThis will run every hour by default, but can be configured via the SESSION_TIDY_UP_INTERVAL config variable.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tidyUpSessions\n                        \n                    \n                \n            \n            \n                \ntidyUpSessions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Tidy up sessions that are older than 1 day.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { Session } from './entities/session.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeepPartial, FindOptionsWhere, LessThan, Repository } from 'typeorm';\nimport { QueryDeepPartialEntity } from 'typeorm/query-builder/QueryPartialEntity';\nimport { SchedulerRegistry } from '@nestjs/schedule';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class SessionService implements OnApplicationBootstrap {\n    constructor(\n        @InjectRepository(Session)\n        private sessionRepository: Repository,\n        private readonly configService: ConfigService,\n        private readonly schedulerRegistry: SchedulerRegistry,\n    ) {}\n\n    /**\n     * Register the tidy up cron job on application bootstrap.\n     * This will run every hour by default, but can be configured via the `SESSION_TIDY_UP_INTERVAL` config variable.\n     * @returns\n     */\n    onApplicationBootstrap() {\n        const callback = () => {\n            void this.tidyUpSessions();\n        };\n        const intervalTime =\n            this.configService.getOrThrow('SESSION_TIDY_UP_INTERVAL') *\n            1000;\n        const interval = setInterval(callback, intervalTime);\n        this.schedulerRegistry.addInterval('tidyUpSessions', interval);\n        return this.tidyUpSessions();\n    }\n\n    /**\n     * Create a new session.\n     * @param session\n     * @returns\n     */\n    create(session: DeepPartial) {\n        return this.sessionRepository.save(session);\n    }\n\n    /**\n     * Update an existing session.\n     * @param issuer_state\n     * @param values\n     * @returns\n     */\n    add(\n        issuer_state: string,\n        tenantId: string,\n        values: QueryDeepPartialEntity,\n    ) {\n        return this.sessionRepository.update(\n            { id: issuer_state, tenantId },\n            values,\n        );\n    }\n\n    /**\n     * Get all sessions.\n     * @returns\n     */\n    getAll(): Promise {\n        return this.sessionRepository.find();\n    }\n\n    /**\n     * Get a session by its state.\n     * @param state\n     * @returns\n     */\n    get(state: string) {\n        return this.sessionRepository.findOneByOrFail({ id: state });\n    }\n\n    /**\n     * Get a session by a specific condition.\n     * @param where\n     * @returns\n     */\n    getBy(where: FindOptionsWhere) {\n        return this.sessionRepository.findOneByOrFail(where);\n    }\n\n    /**\n     * Tidy up sessions that are older than 1 day.\n     */\n    tidyUpSessions() {\n        const ttl = this.configService.getOrThrow('SESSION_TTL') * 1000;\n        return this.sessionRepository.delete({\n            createdAt: LessThan(new Date(Date.now() - ttl)),\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StatusListController.html":{"url":"controllers/StatusListController.html","title":"controller - StatusListController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StatusListController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/status-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getList(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status-list')@Header('Content-Type', 'application/statuslist+jwt')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.controller.ts:16\n                        \n                    \n\n\n            \n                \n                        Get the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Param } from '@nestjs/common';\nimport { StatusListService } from './status-list.service';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Status management')\n@Controller(':tenantId/status-management')\nexport class StatusListController {\n    constructor(private statusListService: StatusListService) {}\n\n    /**\n     * Get the status list\n     * @returns\n     */\n    @Get('status-list')\n    @Header('Content-Type', 'application/statuslist+jwt')\n    getList(@Param('tenantId') tenantId: string) {\n        return this.statusListService.getList(tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StatusListFile.html":{"url":"interfaces/StatusListFile.html","title":"interface - StatusListFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StatusListFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            bits\n                                        \n                                \n                                \n                                        \n                                            elements\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            jwt\n                                        \n                                \n                                \n                                        \n                                            stack\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bits:     BitsPerStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BitsPerStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elements\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elements:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stack\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stack:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConflictException, Injectable, OnModuleInit } from '@nestjs/common';\nimport { join } from 'path';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport {\n    BitsPerStatus,\n    createHeaderAndPayload,\n    JWTwithStatusListPayload,\n    StatusList,\n    StatusListJWTHeaderParameters,\n} from '@sd-jwt/jwt-status-list';\nimport { JwtPayload } from '@sd-jwt/types';\nimport { ConfigService } from '@nestjs/config';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { StatusMapping } from './entities/status-mapping.entity';\nimport { Repository } from 'typeorm';\nimport { StatusUpdateDto } from './dto/status-update.dto';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { Session } from '../../session/entities/session.entity';\nimport { TENANT_EVENTS } from '../../auth/tenant-events';\n\ninterface StatusListFile {\n    elements: number[];\n    stack: number[];\n    bits: BitsPerStatus;\n    jwt?: string;\n}\n\n@Injectable()\nexport class StatusListService implements OnModuleInit {\n    private fileName: string = 'status-list.json';\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        @InjectRepository(StatusMapping)\n        private statusMappingRepository: Repository,\n    ) {}\n    onModuleInit() {}\n\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    onTenantInit(tenantId: string) {\n        return this.init(tenantId);\n    }\n\n    /**\n     * Initialize the status list service by checking if the status list file exists.\n     * If it does not exist, create a new status list with 10,000 entries and a stack\n     * of 10,000 indexes. The stack is shuffled to ensure randomness in the order of\n     * entries. The status list is stored in the file system as a JSON file.\n     */\n    private async init(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        if (!existsSync(file)) {\n            const size = 10000;\n            // create an empty array with the size of 1000\n            const elements = new Array(size).fill(0).map(() => 0);\n            // create a list of 1000 indexes and shuffel them\n            const stack = new Array(size)\n                .fill(0)\n                .map((_, i) => i)\n                .sort(() => 0.5 - Math.random());\n\n            writeFileSync(\n                file,\n                JSON.stringify({ elements, stack, bits: 1 } as StatusListFile),\n            );\n            await this.createList(tenantId);\n        }\n    }\n\n    /**\n     * Create a new status list and stored it in the file\n     */\n    async createList(tenantId: string) {\n        const file = this.getConfig(tenantId);\n        const list = new StatusList(file.elements, file.bits);\n        const iss = `${this.configService.getOrThrow('PUBLIC_URL')}`;\n\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            tenantId,\n            'status-management',\n            'status-list',\n        );\n\n        const prePayload: JwtPayload = {\n            iss,\n            sub,\n            iat: Math.floor(Date.now() / 1000),\n        };\n        const preHeader: StatusListJWTHeaderParameters = {\n            alg: 'ES256',\n            typ: 'statuslist+jwt',\n            x5c: this.cryptoService.getCertChain('signing', tenantId),\n        };\n        const { header, payload } = createHeaderAndPayload(\n            list,\n            prePayload,\n            preHeader,\n        );\n\n        const jwt = await this.cryptoService.signJwt(header, payload, tenantId);\n        file.jwt = jwt;\n        this.storeConfig(file, tenantId);\n    }\n\n    getList(tenantId: string) {\n        return this.getConfig(tenantId).jwt;\n    }\n\n    private getConfig(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        return JSON.parse(readFileSync(file, 'utf-8')) as StatusListFile;\n    }\n\n    private storeConfig(content: StatusListFile, tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        writeFileSync(file, JSON.stringify(content));\n    }\n\n    /**\n     * Get the next free entry in the status list\n     * @returns\n     */\n    async createEntry(\n        session: Session,\n        credentialConfigurationId: string,\n    ): Promise {\n        const file = this.getConfig(session.tenantId);\n        // get the last element from the stack\n        const idx = file.stack.pop();\n        //TODO: what to do if the stack is empty\n        if (idx === undefined) {\n            throw new Error('Stack for status list is empty!!!');\n        }\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            session.tenantId,\n            'status-management',\n            'status-list',\n        );\n        // store the index in the status mapping\n        await this.statusMappingRepository.save({\n            sessionId: session.id,\n            index: idx,\n            list: sub,\n            credentialConfigurationId,\n        });\n        this.storeConfig(file, session.tenantId);\n        return {\n            status: {\n                status_list: {\n                    idx: idx,\n                    uri: sub,\n                },\n            },\n        };\n    }\n\n    /**\n     * Update the value of an entry in the status list\n     * @param id\n     * @param value\n     */\n    private setEntry(id: number, value: number, tenantId: string) {\n        const file = this.getConfig(tenantId);\n        file.elements[id] = value;\n        this.storeConfig(file, tenantId);\n        return this.createList(tenantId);\n    }\n\n    /**\n     * Update the status of a session and its credential configuration\n     * @param value\n     */\n    async updateStatus(value: StatusUpdateDto, tenantId: string) {\n        const entries = await this.statusMappingRepository.findBy({\n            sessionId: value.sessionId,\n            credentialConfigurationId: value.credentialConfigurationId,\n        });\n        if (entries.length === 0) {\n            throw new ConflictException(\n                `No status mapping found for session ${value.sessionId} and credential configuration ${value.credentialConfigurationId}`,\n            );\n        }\n        for (const entry of entries) {\n            await this.setEntry(entry.index, value.status, tenantId);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StatusListModule.html":{"url":"modules/StatusListModule.html","title":"module - StatusListModule","body":"\n                   \n\n\n\n\n    Modules\n    StatusListModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_imports\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/status-list/status-list.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StatusListController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StatusListController } from './status-list.controller';\nimport { StatusListService } from './status-list.service';\nimport { CryptoModule } from '../../crypto/crypto.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { StatusMapping } from './entities/status-mapping.entity';\n\n@Module({\n    imports: [CryptoModule, TypeOrmModule.forFeature([StatusMapping])],\n    controllers: [StatusListController],\n    providers: [StatusListService],\n    exports: [StatusListService],\n})\nexport class StatusListModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StatusListService.html":{"url":"injectables/StatusListService.html","title":"injectable - StatusListService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StatusListService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fileName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEntry\n                            \n                            \n                                    Async\n                                createList\n                            \n                            \n                                    Private\n                                getConfig\n                            \n                            \n                                getList\n                            \n                            \n                                    Private\n                                    Async\n                                init\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    \n                                onTenantInit\n                            \n                            \n                                    Private\n                                setEntry\n                            \n                            \n                                    Private\n                                storeConfig\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, statusMappingRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/status-list/status-list.service.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusMappingRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEntry(session: Session, credentialConfigurationId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:138\n                        \n                    \n\n\n            \n                \n                        Get the next free entry in the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createList\n                        \n                    \n                \n            \n            \n                \n                        \n                    createList(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Create a new status list and stored it in the file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfig(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         StatusListFile\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getList\n                        \n                    \n                \n            \n            \n                \ngetList(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Initialize the status list service by checking if the status list file exists.\nIf it does not exist, create a new status list with 10,000 entries and a stack\nof 10,000 indexes. The stack is shuffled to ensure randomness in the order of\nentries. The status list is stored in the file system as a JSON file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_KEYS, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    setEntry(id: number, value: number, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:178\n                        \n                    \n\n\n            \n                \n                        Update the value of an entry in the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        storeConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeConfig(content: StatusListFile, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                content\n                                            \n                                                            StatusListFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(value: StatusUpdateDto, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:189\n                        \n                    \n\n\n            \n                \n                        Update the status of a session and its credential configuration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fileName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'status-list.json'\n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/status-list.service.ts:31\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, OnModuleInit } from '@nestjs/common';\nimport { join } from 'path';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport {\n    BitsPerStatus,\n    createHeaderAndPayload,\n    JWTwithStatusListPayload,\n    StatusList,\n    StatusListJWTHeaderParameters,\n} from '@sd-jwt/jwt-status-list';\nimport { JwtPayload } from '@sd-jwt/types';\nimport { ConfigService } from '@nestjs/config';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { StatusMapping } from './entities/status-mapping.entity';\nimport { Repository } from 'typeorm';\nimport { StatusUpdateDto } from './dto/status-update.dto';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { Session } from '../../session/entities/session.entity';\nimport { TENANT_EVENTS } from '../../auth/tenant-events';\n\ninterface StatusListFile {\n    elements: number[];\n    stack: number[];\n    bits: BitsPerStatus;\n    jwt?: string;\n}\n\n@Injectable()\nexport class StatusListService implements OnModuleInit {\n    private fileName: string = 'status-list.json';\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        @InjectRepository(StatusMapping)\n        private statusMappingRepository: Repository,\n    ) {}\n    onModuleInit() {}\n\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    onTenantInit(tenantId: string) {\n        return this.init(tenantId);\n    }\n\n    /**\n     * Initialize the status list service by checking if the status list file exists.\n     * If it does not exist, create a new status list with 10,000 entries and a stack\n     * of 10,000 indexes. The stack is shuffled to ensure randomness in the order of\n     * entries. The status list is stored in the file system as a JSON file.\n     */\n    private async init(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        if (!existsSync(file)) {\n            const size = 10000;\n            // create an empty array with the size of 1000\n            const elements = new Array(size).fill(0).map(() => 0);\n            // create a list of 1000 indexes and shuffel them\n            const stack = new Array(size)\n                .fill(0)\n                .map((_, i) => i)\n                .sort(() => 0.5 - Math.random());\n\n            writeFileSync(\n                file,\n                JSON.stringify({ elements, stack, bits: 1 } as StatusListFile),\n            );\n            await this.createList(tenantId);\n        }\n    }\n\n    /**\n     * Create a new status list and stored it in the file\n     */\n    async createList(tenantId: string) {\n        const file = this.getConfig(tenantId);\n        const list = new StatusList(file.elements, file.bits);\n        const iss = `${this.configService.getOrThrow('PUBLIC_URL')}`;\n\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            tenantId,\n            'status-management',\n            'status-list',\n        );\n\n        const prePayload: JwtPayload = {\n            iss,\n            sub,\n            iat: Math.floor(Date.now() / 1000),\n        };\n        const preHeader: StatusListJWTHeaderParameters = {\n            alg: 'ES256',\n            typ: 'statuslist+jwt',\n            x5c: this.cryptoService.getCertChain('signing', tenantId),\n        };\n        const { header, payload } = createHeaderAndPayload(\n            list,\n            prePayload,\n            preHeader,\n        );\n\n        const jwt = await this.cryptoService.signJwt(header, payload, tenantId);\n        file.jwt = jwt;\n        this.storeConfig(file, tenantId);\n    }\n\n    getList(tenantId: string) {\n        return this.getConfig(tenantId).jwt;\n    }\n\n    private getConfig(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        return JSON.parse(readFileSync(file, 'utf-8')) as StatusListFile;\n    }\n\n    private storeConfig(content: StatusListFile, tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        writeFileSync(file, JSON.stringify(content));\n    }\n\n    /**\n     * Get the next free entry in the status list\n     * @returns\n     */\n    async createEntry(\n        session: Session,\n        credentialConfigurationId: string,\n    ): Promise {\n        const file = this.getConfig(session.tenantId);\n        // get the last element from the stack\n        const idx = file.stack.pop();\n        //TODO: what to do if the stack is empty\n        if (idx === undefined) {\n            throw new Error('Stack for status list is empty!!!');\n        }\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            session.tenantId,\n            'status-management',\n            'status-list',\n        );\n        // store the index in the status mapping\n        await this.statusMappingRepository.save({\n            sessionId: session.id,\n            index: idx,\n            list: sub,\n            credentialConfigurationId,\n        });\n        this.storeConfig(file, session.tenantId);\n        return {\n            status: {\n                status_list: {\n                    idx: idx,\n                    uri: sub,\n                },\n            },\n        };\n    }\n\n    /**\n     * Update the value of an entry in the status list\n     * @param id\n     * @param value\n     */\n    private setEntry(id: number, value: number, tenantId: string) {\n        const file = this.getConfig(tenantId);\n        file.elements[id] = value;\n        this.storeConfig(file, tenantId);\n        return this.createList(tenantId);\n    }\n\n    /**\n     * Update the status of a session and its credential configuration\n     * @param value\n     */\n    async updateStatus(value: StatusUpdateDto, tenantId: string) {\n        const entries = await this.statusMappingRepository.findBy({\n            sessionId: value.sessionId,\n            credentialConfigurationId: value.credentialConfigurationId,\n        });\n        if (entries.length === 0) {\n            throw new ConflictException(\n                `No status mapping found for session ${value.sessionId} and credential configuration ${value.credentialConfigurationId}`,\n            );\n        }\n        for (const entry of entries) {\n            await this.setEntry(entry.index, value.status, tenantId);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusMapping.html":{"url":"entities/StatusMapping.html","title":"entity - StatusMapping","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StatusMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/entities/status-mapping.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                credentialConfigurationId\n                            \n                            \n                                    \n                                index\n                            \n                            \n                                    \n                                list\n                            \n                            \n                                    \n                                sessionId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\n\n@Entity()\nexport class StatusMapping {\n    @Column({ type: 'varchar', primary: true })\n    sessionId: string;\n\n    @Column({ type: 'varchar', primary: true })\n    list: string;\n\n    @Column({ type: 'int', primary: true })\n    index: number;\n\n    @Column({ type: 'varchar', primary: true })\n    credentialConfigurationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StatusUpdateDto.html":{"url":"classes/StatusUpdateDto.html","title":"class - StatusUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StatusUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/dto/status-update.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationId\n                            \n                            \n                                    \n                                sessionId\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:16\n                        \n                    \n\n            \n                \n                    The ID of the credential configuration\nThis is optional, if not provided, all credentials will be revoked of the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:8\n                        \n                    \n\n            \n                \n                    The session ID of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsIn(['0', '1'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:24\n                        \n                    \n\n            \n                \n                    The status of the credential\n0 = valid, 1 = revoked\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNumber, IsOptional, IsString } from 'class-validator';\n\nexport class StatusUpdateDto {\n    /**\n     * The session ID of the user\n     */\n    @IsString()\n    sessionId: string;\n\n    /**\n     * The ID of the credential configuration\n     * This is optional, if not provided, all credentials will be revoked of the session.\n     */\n    @IsString()\n    @IsOptional()\n    credentialConfigurationId?: string;\n\n    /**\n     * The status of the credential\n     * 0 = valid, 1 = revoked\n     */\n    @IsNumber()\n    @IsIn([0, 1])\n    status: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TDataShape.html":{"url":"interfaces/TDataShape.html","title":"interface - TDataShape","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TDataShape\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            body\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            query\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type { Auth } from '../core/auth';\nimport type { Client as CoreClient, Config as CoreConfig } from '../core/types';\nimport type { Middleware } from './utils';\n\nexport type ResponseStyle = 'data' | 'fields';\n\nexport interface Config\n    extends Omit,\n        CoreConfig {\n    /**\n     * Base URL for all requests made by this client.\n     */\n    baseUrl?: T['baseUrl'];\n    /**\n     * Fetch API implementation. You can use this option to provide a custom\n     * fetch instance.\n     *\n     * @default globalThis.fetch\n     */\n    fetch?: (request: Request) => ReturnType;\n    /**\n     * Please don't use the Fetch client for Next.js applications. The `next`\n     * options won't have any effect.\n     *\n     * Install {@link https://www.npmjs.com/package/@hey-api/client-next `@hey-api/client-next`} instead.\n     */\n    next?: never;\n    /**\n     * Return the response data parsed in a specified format. By default, `auto`\n     * will infer the appropriate method from the `Content-Type` response header.\n     * You can override this behavior with any of the {@link Body} methods.\n     * Select `stream` if you don't want to parse response data at all.\n     *\n     * @default 'auto'\n     */\n    parseAs?:\n        | 'arrayBuffer'\n        | 'auto'\n        | 'blob'\n        | 'formData'\n        | 'json'\n        | 'stream'\n        | 'text';\n    /**\n     * Should we return only data or multiple fields (data, error, response, etc.)?\n     *\n     * @default 'fields'\n     */\n    responseStyle?: ResponseStyle;\n    /**\n     * Throw an error instead of returning it in the response?\n     *\n     * @default false\n     */\n    throwOnError?: T['throwOnError'];\n}\n\nexport interface RequestOptions extends Config {\n    /**\n     * Any body that you want to add to your request.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#body}\n     */\n    body?: unknown;\n    path?: Record;\n    query?: Record;\n    /**\n     * Security mechanism(s) to use for the request.\n     */\n    security?: ReadonlyArray;\n    url: Url;\n}\n\nexport type RequestResult = ThrowOnError extends true\n    ? Promise\n                  ? TData[keyof TData]\n                  : TData\n              : {\n                    data: TData extends Record\n                        ? TData[keyof TData]\n                        : TData;\n                    request: Request;\n                    response: Response;\n                }\n      >\n    : Promise\n                          ? TData[keyof TData]\n                          : TData)\n                    | undefined\n              : (\n                    | {\n                          data: TData extends Record\n                              ? TData[keyof TData]\n                              : TData;\n                          error: undefined;\n                      }\n                    | {\n                          data: undefined;\n                          error: TError extends Record\n                              ? TError[keyof TError]\n                              : TError;\n                      }\n                ) & {\n                    request: Request;\n                    response: Response;\n                }\n      >;\n\nexport interface ClientOptions {\n    baseUrl?: string;\n    responseStyle?: ResponseStyle;\n    throwOnError?: boolean;\n}\n\ntype MethodFn = (\n    options: Omit, 'method'>,\n) => RequestResult;\n\ntype RequestFn = (\n    options: Omit, 'method'> &\n        Pick>, 'method'>,\n) => RequestResult;\n\ntype BuildUrlFn = ;\n        query?: Record;\n        url: string;\n    },\n>(\n    options: Pick & Options,\n) => string;\n\nexport type Client = CoreClient & {\n    interceptors: Middleware;\n};\n\n/**\n * The `createClientConfig()` function will be called on client initialization\n * and the returned object will become the client's initial configuration.\n *\n * You may want to initialize your client this way instead of calling\n * `setConfig()`. This is useful for example if you're using Next.js\n * to ensure your client always has the correct values.\n */\nexport type CreateClientConfig = (\n    override?: Config,\n) => Config & T>;\n\nexport interface TDataShape {\n    body?: unknown;\n    headers?: unknown;\n    path?: unknown;\n    query?: unknown;\n    url: string;\n}\n\ntype OmitKeys = Pick>;\n\nexport type Options = OmitKeys,\n    'body' | 'path' | 'query' | 'url'\n> &\n    Omit;\n\nexport type OptionsLegacyParser = TData extends { body?: any }\n    ? TData extends { headers?: any }\n        ? OmitKeys,\n              'body' | 'headers' | 'url'\n          > &\n              TData\n        : OmitKeys,\n              'body' | 'url'\n          > &\n              TData &\n              Pick, 'headers'>\n    : TData extends { headers?: any }\n      ? OmitKeys,\n            'headers' | 'url'\n        > &\n            TData &\n            Pick, 'body'>\n      : OmitKeys, 'url'> & TData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.decorator.ts\n        \n\n\n            \n                Description\n            \n            \n                Values of the user token\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from '@nestjs/common';\n\nexport const Token = createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n);\n\n/**\n * Values of the user token\n */\nexport interface TokenPayload {\n    sub: string; // Subject (client_id for client credentials)\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenResponse.html":{"url":"classes/TokenResponse.html","title":"class - TokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/token-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access_token\n                            \n                            \n                                expires_in\n                            \n                            \n                                token_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TokenResponse {\n    access_token: string;\n    token_type: 'Bearer';\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VCT.html":{"url":"classes/VCT.html","title":"class - VCT","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VCT\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/credential-config.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                extends\n                            \n                            \n                                    \n                                    Optional\n                                extends#integrity\n                            \n                            \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    Optional\n                                schema_uri\n                            \n                            \n                                    \n                                    Optional\n                                schema_uri#integrity\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        extends\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        extends#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema_uri#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook.dto';\n\nexport class VCT {\n    @IsString()\n    vct: string;\n    @IsString()\n    name?: string;\n    @IsString()\n    description?: string;\n    @IsString()\n    extends?: string;\n    @IsString()\n    'extends#integrity'?: string;\n    @IsString()\n    schema_uri?: string;\n    @IsString()\n    'schema_uri#integrity'?: string;\n}\n\nexport class PresentationDuringIssuance {\n    @IsString()\n    type: string;\n    @IsObject()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VaultKeyService.html":{"url":"injectables/VaultKeyService.html","title":"injectable - VaultKeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VaultKeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/vault-key.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            KeyService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                folder\n                            \n                            \n                                    Private\n                                headers\n                            \n                            \n                                    Private\n                                vaultUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                derToJwtSignature\n                            \n                            \n                                    Private\n                                getJWK\n                            \n                            \n                                getKid\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                init\n                            \n                            \n                                sign\n                            \n                            \n                                signer\n                            \n                            \n                                    Async\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, configService: ConfigService, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/vault-key.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair in the vault.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        derToJwtSignature\n                        \n                    \n                \n            \n            \n                \nderToJwtSignature(derSignature: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:185\n                        \n                    \n\n\n            \n                \n                        Converts a DER signature to a JWT signature.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                derSignature\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getJWK\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJWK(key: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:121\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getKid\n                        \n                    \n                \n            \n            \n                \ngetKid(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:90\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:100\n\n                        \n                    \n\n\n            \n                \n                        Gets the public key and converts it to a KeyLike object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"jwk\" | \"pem\", tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"jwk\" | \"pem\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:45\n\n                        \n                    \n\n\n            \n                \n                        Check if the vault has a key with the given id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sign\n                        \n                    \n                \n            \n            \n                \nsign(value: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:137\n                        \n                    \n\n\n            \n                \n                        Signs a value with a key in the vault.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signer\n                        \n                    \n                \n            \n            \n                \nsigner(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:57\n\n                        \n                    \n\n\n            \n                \n                        Get the signer for the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JwtPayload, header: JWTHeaderParameters, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:156\n\n                        \n                    \n\n\n            \n                \n                        Creates a proof of possession jwt.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWTHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        folder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/vault-key.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/vault-key.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        vaultUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/vault-key.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { KeyService } from './key.service';\nimport { HttpService } from '@nestjs/axios';\nimport { firstValueFrom } from 'rxjs';\nimport { importSPKI, exportJWK, JWTHeaderParameters, JWK } from 'jose';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtPayload, Signer } from '@sd-jwt/types';\nimport { CryptoService, CryptoType } from './crypto/crypto.service';\nimport { writeFileSync } from 'fs';\nimport { join } from 'path';\n\n@Injectable()\nexport class VaultKeyService extends KeyService {\n    // url to the vault instance\n    private vaultUrl: string;\n    // headers for the vault api\n    private headers: { headers: { 'X-Vault-Token': string } };\n\n    private folder: string;\n\n    constructor(\n        private httpService: HttpService,\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n    ) {\n        super();\n        this.folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            'keys',\n        );\n\n        this.vaultUrl = this.configService.get('VAULT_URL') as string;\n        this.headers = {\n            headers: {\n                'X-Vault-Token': this.configService.get(\n                    'VAULT_TOKEN',\n                ) as string,\n            },\n        };\n    }\n\n    /**\n     * Check if the vault has a key with the given id\n     */\n    async init(tenantId: string) {\n        //TODO: need to update this since signing cert is not created by the vault\n        await this.getPublicKey('pem', tenantId)\n            .then((res) => {\n                writeFileSync(join(this.folder, 'public-key.pem'), res);\n            })\n            .catch(async () => this.create(tenantId));\n    }\n\n    /**\n     * Get the signer for the key service\n     */\n    signer(tenantId: string): Promise {\n        //TODO: validate if this is correct.\n        return Promise.resolve((input: string) => this.sign(input, tenantId));\n    }\n\n    /**\n     * Creates a new keypair in the vault.\n     * @param createKeyDto\n     * @param user\n     * @returns\n     */\n    async create(tenantId: string) {\n        const types: Map = new Map();\n        types.set('ES256', 'ecdsa-p256');\n        types.set('Ed25519', 'ed25519');\n\n        const res = await firstValueFrom(\n            this.httpService.post(\n                `${this.vaultUrl}/keys/${tenantId}`,\n                {\n                    exportable: false,\n                    type: types.get(this.cryptoService.getAlg()),\n                },\n                this.headers,\n            ),\n        );\n        const jwk = await this.getPublicKey('jwk', tenantId);\n        return {\n            id: res.data.id,\n            publicKey: jwk,\n        };\n    }\n\n    getKid(tenantId: string): Promise {\n        //TODO: check if this is the right way to get the key id.\n        return Promise.resolve(tenantId);\n    }\n\n    /**\n     * Gets the public key and converts it to a KeyLike object.\n     * @param id\n     * @returns\n     */\n    async getPublicKey(type: 'pem', tenantId: string): Promise;\n    async getPublicKey(type: 'jwk', tenantId: string): Promise;\n    async getPublicKey(\n        type: 'jwk' | 'pem',\n        tenantId: string,\n    ): Promise {\n        return firstValueFrom(\n            this.httpService.get(\n                `${this.vaultUrl}/keys/${tenantId}`,\n                this.headers,\n            ),\n        ).then(async (res) => {\n            return type === 'pem'\n                ? (res.data.data.keys['1'].public_key as string)\n                : await this.getJWK(\n                      res.data.data.keys['1'].public_key,\n                      tenantId,\n                  );\n        });\n    }\n\n    private getJWK(key: string, tenantId: string): Promise {\n        return importSPKI(key, this.cryptoService.getAlg())\n            .then((cryptoKey) => exportJWK(cryptoKey))\n            .then(async (jwk) => {\n                jwk.kid = await this.getKid(tenantId);\n                return jwk;\n            });\n    }\n\n    /**\n     * Signs a value with a key in the vault.\n     * @param id\n     * @param user\n     * @param value\n     * @returns\n     */\n    sign(value: string, tenantId: string): Promise {\n        return firstValueFrom(\n            this.httpService.post(\n                `${this.vaultUrl}/sign/${tenantId}`,\n                {\n                    input: Buffer.from(value).toString('base64'),\n                },\n                this.headers,\n            ),\n        ).then((res) =>\n            this.derToJwtSignature(res.data.data.signature.split(':')[2]),\n        );\n    }\n\n    /**\n     * Creates a proof of possession jwt.\n     * @param user\n     * @param value\n     */\n    async signJWT(\n        payload: JwtPayload,\n        header: JWTHeaderParameters,\n        tenantId: string,\n    ): Promise {\n        // Convert header and payload to Base64 to prepare for Vault\n        const encodedHeader = Buffer.from(JSON.stringify(header)).toString(\n            'base64url',\n        );\n        const encodedPayload = Buffer.from(JSON.stringify(payload)).toString(\n            'base64url',\n        );\n        const signingInput = `${encodedHeader}.${encodedPayload}`;\n\n        // Request to Vault for signing\n        try {\n            const signature = await this.sign(signingInput, tenantId);\n            return `${encodedHeader}.${encodedPayload}.${signature}`;\n        } catch (error) {\n            console.error('Error signing JWT with Vault:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Converts a DER signature to a JWT signature.\n     * @param derSignature\n     * @returns\n     */\n    derToJwtSignature(derSignature: string) {\n        // Step 1: Extract r and s from DER signature\n        const der = Buffer.from(derSignature, 'base64');\n        const sequence = der.slice(2); // Skip the sequence tag and length\n        const rLength = sequence[1];\n        const r = sequence.slice(2, 2 + rLength);\n        const s = sequence.slice(2 + rLength + 2); // Skip r, its tag and length byte, and s's tag and length byte\n\n        // Step 2: Ensure r and s are 32 bytes each (pad with zeros if necessary)\n        // Ensure r and s are 32 bytes each\n        let rPadded: Buffer;\n        let sPadded: Buffer;\n        if (r.length > 32) {\n            if (r.length === 33 && r[0] === 0x00) {\n                rPadded = r.slice(1);\n            } else {\n                throw new Error('Invalid r length in DER signature');\n            }\n        } else {\n            rPadded = Buffer.concat([Buffer.alloc(32 - r.length), r]);\n        }\n        if (s.length > 32) {\n            if (s.length === 33 && s[0] === 0x00) {\n                sPadded = s.slice(1);\n            } else {\n                throw new Error('Invalid s length in DER signature');\n            }\n        } else {\n            sPadded = Buffer.concat([Buffer.alloc(32 - s.length), s]);\n        }\n\n        // Step 3: Concatenate r and s to form the raw signature\n        const rawSignature = Buffer.concat([rPadded, sPadded]);\n\n        // Step 4: Base64url encode the raw signature\n        return rawSignature\n            .toString('base64')\n            .replace(/\\+/g, '-')\n            .replace(/\\//g, '_')\n            .replace(/=/g, '');\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VerifierModule.html":{"url":"modules/VerifierModule.html","title":"module - VerifierModule","body":"\n                   \n\n\n\n\n    Modules\n    VerifierModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VerifierModule\n\n\n\ncluster_VerifierModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/verifier.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            PresentationsModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport { RegistrarModule } from '../registrar/registrar.module';\nimport { SessionModule } from '../session/session.module';\nimport { HttpModule } from '@nestjs/axios';\nimport { PresentationsModule } from './presentations/presentations.module';\nimport { Oid4vpModule } from './oid4vp/oid4vp.module';\n\n@Module({\n    imports: [\n        CryptoModule,\n        RegistrarModule,\n        SessionModule,\n        HttpModule,\n        PresentationsModule,\n        Oid4vpModule,\n    ],\n})\nexport class VerifierModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfig.html":{"url":"classes/WebHookAuthConfig.html","title":"class - WebHookAuthConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhook authentication.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApiKeyConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:43\n                        \n                    \n\n            \n                \n                    Configuration for API key authentication.\nThis is required if the type is 'apiKey'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['apiKey'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:36\n                        \n                    \n\n            \n                \n                    The type of authentication used for the webhook.\nCurrently, only 'apiKey' is supported.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebhookConfig.html":{"url":"classes/WebhookConfig.html","title":"class - WebhookConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebhookConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhooks used in various services.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                auth\n                            \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebHookAuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:62\n                        \n                    \n\n            \n                \n                    Optional authentication configuration for the webhook.\nIf not provided, no authentication will be used.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:54\n                        \n                    \n\n            \n                \n                    The URL to which the webhook will send notifications.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WellKnownController.html":{"url":"controllers/WellKnownController.html","title":"controller - WellKnownController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WellKnownController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/.well-known\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI well-known endpoints.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authzMetadata\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getJwks\n                            \n                            \n                                    \n                                    \n                                    Async\n                                issuerMetadata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    authzMetadata(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('oauth-authorization-server')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:36\n                        \n                    \n\n\n            \n                \n                        Authorization Server Metadata\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServerResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJwks(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Header('Content-Type', 'application/jwk-set+json')@Get('jwks.json')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:50\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for the authorization server.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        issuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    issuerMetadata(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get OpenID4VCI issuer metadata', description: 'Returns the OpenID4VCI issuer metadata.'})@Get('openid-credential-issuer')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Param } from '@nestjs/common';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { AuthorizeService } from '../issuer/authorize/authorize.service';\nimport { Oid4vciService } from '../issuer/oid4vci/oid4vci.service';\nimport { JwksResponseDto } from './dto/jwks-response.dto';\nimport { Oauth2AuthorizationServerResponse } from './dto/oauth-authorization-server-response.dto';\nimport { CredentialIssuerMetadataDto } from './dto/credential-issuer-metadata.dto';\nimport { ApiOperation } from '@nestjs/swagger';\n\n/**\n * Controller for the OpenID4VCI well-known endpoints.\n */\n@Controller(':tenantId/.well-known')\nexport class WellKnownController {\n    constructor(\n        private readonly oid4vciService: Oid4vciService,\n        private readonly authorizeService: AuthorizeService,\n        private readonly cryptoService: CryptoService,\n    ) {}\n\n    @ApiOperation({\n        summary: 'Get OpenID4VCI issuer metadata',\n        description: 'Returns the OpenID4VCI issuer metadata.',\n    })\n    @Get('openid-credential-issuer')\n    async issuerMetadata(@Param('tenantId') tenantId: string) {\n        return (await this.oid4vciService.issuerMetadata(tenantId))\n            .credentialIssuer as unknown as Promise;\n    }\n\n    /**\n     * Authorization Server Metadata\n     * @returns\n     */\n    @Get('oauth-authorization-server')\n    authzMetadata(\n        @Param('tenantId') tenantId: string,\n    ): Oauth2AuthorizationServerResponse {\n        return this.authorizeService.authzMetadata(\n            tenantId,\n        ) as Oauth2AuthorizationServerResponse;\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for the authorization server.\n     * @returns\n     */\n    @Header('Content-Type', 'application/jwk-set+json')\n    @Get('jwks.json')\n    async getJwks(\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        return this.cryptoService.getJwks(tenantId).then((key) => ({\n            keys: [key],\n        }));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n1.2.3 (2025-07-20)\nBug Fixes\n\nci deploy with version generation (259ab39)\nrelease pipeline (7a6a69c)\nset correct way for deployment (2aa727a)\nuse oidc url instead of keycloak one (2913417)\n\n1.2.2 (2025-07-19)\nBug Fixes\n\nadd tmp logger (6bb4aa9)\nset correct url for vp (295428b)\n\n1.2.1 (2025-07-18)\nBug Fixes\n\nci (8f9498a)\nci (905e17c)\n\n1.2.1 (2025-07-18)\nBug Fixes\n\nci (905e17c)\n\n1.2.0 (2025-07-18)\nBug Fixes\n\nadd codecov (#2) (9104df3)\nadd test for presentation (#6) (e3e5971)\nremove console logs (32fbd8e)\nremove ts file from root (b989c6c)\nupload test results (#3) (f75298f)\nvitest config (beef4d2)\n\nFeatures\n\nadd multi tenant support (#7) (46c9ce6)\n\n1.1.0 (2025-07-11)\nBug Fixes\n\nset correct version (91b5499)\nupdate db env (35f4d1e)\n\nFeatures\n\nadd deployment options (937603a)\n\n1.0.1 (2025-07-10)\nBug Fixes\n\nadd auth to webhook (c3b1b48)\nadd cloudflare worker example (6d31de0)\ngeneral improvements (f7e7505)\nmake key folder static (6a6cdb6)\nwebhook handling (df29d1e)\n\n1.0.0 (2025-07-09)\nBug Fixes\n\nadd semantic release (c805439)\nadjust release pipeline (3ac47ec)\nci (892b30e)\nci (40ccd32)\nci (12395c8)\nci (45f3f7f)\nci (4be0171)\nci (2f07af2)\nci (2a71850)\nci nameing (33ac2c7)\nci, install pnpm (ac4ee24)\nci, remove version (54e8a4e)\ndocker deploy (98303c1)\nmain (d6205da)\npage build (b3abd57)\nsplit jobs (2742ec4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @badgateway/oauth2-client : ^3.2.0\n        \n            @nestjs/axios : ^4.0.0\n        \n            @nestjs/common : ^11.1.3\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.3\n        \n            @nestjs/event-emitter : ^3.0.1\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.3\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/serve-static : ^5.0.3\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/terminus : ^11.0.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @openid4vc/oauth2 : 0.3.0-alpha-20250602121005\n        \n            @openid4vc/openid4vci : 0.3.0-alpha-20250602121005\n        \n            @openid4vc/openid4vp : 0.3.0-alpha-20250602121005\n        \n            @openid4vc/utils : ^0.3.0-alpha-20250602121005\n        \n            @sd-jwt/crypto-nodejs : ^0.14.0\n        \n            @sd-jwt/jwt-status-list : ^0.14.0\n        \n            @sd-jwt/sd-jwt-vc : ^0.14.0\n        \n            @sd-jwt/types : ^0.14.0\n        \n            axios : ^1.10.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            joi : ^17.13.3\n        \n            jose : ^6.0.11\n        \n            jwks-rsa : ^3.2.0\n        \n            mysql2 : ^3.14.1\n        \n            nestjs-pino : ^4.4.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.16.3\n        \n            pino-http : ^10.5.0\n        \n            pino-pretty : ^13.0.0\n        \n            qrcode : ^1.5.4\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            sqlite3 : ^5.1.7\n        \n            typeorm : ^0.3.25\n        \n            uuid : ^11.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ResponseType   (src/.../presentation-request.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/verifier/oid4vp/dto/presentation-request.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ResponseType\n                    \n                \n                    \n                        \n                            Enum for the type of response expected from the presentation request.\n\n                        \n                    \n                        \n                            \n                                 QRCode\n                            \n                        \n                        \n                            \n                                Value : qrcode\n                            \n                        \n                        \n                            \n                                 URI\n                            \n                        \n                        \n                            \n                                Value : uri\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getAccessToken   (test/.../import.ts)\n                        \n                        \n                            getHeadersFromRequest   (src/.../util.ts)\n                        \n                        \n                            handleRequest   (test/.../index.ts)\n                        \n                        \n                            importDirectory   (test/.../import.ts)\n                        \n                        \n                            importFileWithRetry   (test/.../import.ts)\n                        \n                        \n                            run   (test/.../import.ts)\n                        \n                        \n                            sleep   (test/.../import.ts)\n                        \n                        \n                            validateJsonFile   (test/.../import.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Bootstrap function to initialize the NestJS application.\n\n\n                \n            \n        \n    \n    test/import/import.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getAccessToken\n                        \n                    \n                \n            \n            \n                \ngetAccessToken()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        importDirectory\n                        \n                    \n                \n            \n            \n                \nimportDirectory(config: ImportConfig, accessToken: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            ImportConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        importFileWithRetry\n                        \n                    \n                \n            \n            \n                \nimportFileWithRetry(filePath: string, endpoint: string, accessToken: string, fileName: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filePath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endpoint\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        run\n                        \n                    \n                \n            \n            \n                \nrun()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sleep\n                        \n                    \n                \n            \n            \n                \nsleep(ms: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ms\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateJsonFile\n                        \n                    \n                \n            \n            \n                \nvalidateJsonFile(filePath: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filePath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/issuer/oid4vci/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getHeadersFromRequest\n                        \n                    \n                \n            \n            \n                \ngetHeadersFromRequest(req: Request)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     globalThis.Headers\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    test/webhook/src/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(request: Request)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\nEUDIPLO\nYour Diplomatic Layer for EUDI Wallet Integration\nEUDIPLO is an open-source middleware that bridges your backend and EUDI Wallets\nusing a unified API and standardized protocols.\n\n🧭 Overview\nOrganizations joining the EUDI Wallet ecosystem face a tough choice: patch\ntogether protocol libraries that may not exist for their stack, or rely on\nproprietary solutions that risk vendor lock-in.\nEUDIPLO solves this by providing a lightweight, source-available, protocol\nabstraction layer. It communicates over HTTP and integrates easily with your\nexisting backend stack—so you can focus on your business logic, not\ncryptographic plumbing.\nIt supports all core flows of electronic attribute attestations—issuing,\nrequesting, and even requesting during issuance—and is already\ncompatible with production-grade EUDI Wallets like Animo.\nWhile still in early development, EUDIPLO is built for production: secure key\nmanagement, scalable database support, and clean API boundaries.\n\n🧩 Features\n\n✅ Supports OID4VCI, OID4VP, SD-JWT VC, and OAuth Token Status\nList\n✅ JSON-based credential configuration\n✅ Client credentials authentication for easy service integration\n✅ Runs via Docker with .env config\n✅ HTTP-based integration with any backend\n✅ Secure key management & pluggable storage\n✅ Privacy-friendly: no external calls, no long-term storage\n\n\n🚀 Quick Start\nExample :# Clone and configure\ngit clone https://github.com/cre8/eudiplo.git\ncd eudiplo\ncp .env.example .env\n\n# Configure authentication\necho \"JWT_SECRET=$(openssl rand -base64 32)\" >> .env\necho \"AUTH_CLIENT_SECRET=$(openssl rand -base64 24)\" >> .env\n\n# Start with Docker\ndocker run -p 3000:3000 \\\n  -e PUBLIC_URL=https://example.com \\\n  -e JWT_SECRET=your-32-character-secret \\\n  -e AUTH_CLIENT_SECRET=your-issuer-secret \\\n  -v $(pwd)/config:/app/config \\\n  ghcr.io/cre8/eudiplo:latest\n\n# Get a token and start using the API\ncurl -X POST http://localhost:3000/auth/oauth2/token \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"client_id\": \"root\",\n    \"client_secret\": \"root\"\n  }'📚 API:\nhttps://cre8.github.io/eudiplo/latest/api/📦\nFull setup:\nQuickstart Guide\n\n📚 Documentation\nChoose your documentation version:\n\n🚀 Latest Stable (recommended):\nhttps://cre8.github.io/eudiplo/latest/ -\nDocumentation for the most recent major release\n🔬 Development:\nhttps://cre8.github.io/eudiplo/main/ -\nLatest features from the main branch\n📚 Specific Major Versions: v1,\nv2, etc.\n\nKey sections:\n\nArchitecture\nSupported Protocols\nAPI Reference\nCode Documentation\n\n\n🤝 Contributing\nWe welcome PRs from wallet developers, institutions, and contributors interested\nin advancing the EUDI Wallet ecosystem.\nSee CONTRIBUTING.md for guidelines.\n\n📝 License\nLicensed under the Apache 2.0 License\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nExample :                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\n\n\n   END OF TERMS AND CONDITIONS\n   APPENDIX: How to apply the Apache License to your work.\nExample :  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.   Copyright [2025] [Mirko Mollik]\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\nExample :   http://www.apache.org/licenses/LICENSE-2.0   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IssuerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeyModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        Oid4vpModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PresentationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RegistrarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ResolverModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StatusListModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VerifierModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_exports\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_imports\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nCryptoService \n\nCryptoService \n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\n\n\nEncryptionService \n\nEncryptionService \n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\nOid4vpModule -->\n\nRegistrarModule->Oid4vpModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nClientService\n\nClientService\n\nAuthModule -->\n\nClientService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\nOid4vpModule -->\n\nPresentationsModule->Oid4vpModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nResolverModule\n\nResolverModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nResolverService \n\nResolverService \n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        15 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    14 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    23 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    25 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    30 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : a middleware to interact with the EUDI Wallet\n        \n            Bugs : https://github.com/cre8/eudiplo/issues\n        \n            License : Apache-2.0\n        \n            Repository : https://github.com/cre8/eudiplo.git\n        \n            Author : Mirko Mollik \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
